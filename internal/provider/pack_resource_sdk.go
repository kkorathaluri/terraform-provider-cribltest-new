// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-cribl-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/operations"
)

func (r *PackResourceModel) ToOperationsCreatePacksRequestBody(ctx context.Context) (*operations.CreatePacksRequestBody, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	displayName := new(string)
	if !r.DisplayName.IsUnknown() && !r.DisplayName.IsNull() {
		*displayName = r.DisplayName.ValueString()
	} else {
		displayName = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	version := new(string)
	if !r.Version.IsUnknown() && !r.Version.IsNull() {
		*version = r.Version.ValueString()
	} else {
		version = nil
	}
	source := new(string)
	if !r.Source.IsUnknown() && !r.Source.IsNull() {
		*source = r.Source.ValueString()
	} else {
		source = nil
	}
	var groupID string
	groupID = r.GroupID.ValueString()

	disabled := new(bool)
	if !r.Disabled.IsUnknown() && !r.Disabled.IsNull() {
		*disabled = r.Disabled.ValueBool()
	} else {
		disabled = nil
	}
	out := operations.CreatePacksRequestBody{
		ID:          id,
		DisplayName: displayName,
		Description: description,
		Version:     version,
		Source:      source,
		GroupID:     groupID,
		Disabled:    disabled,
	}

	return &out, diags
}

func (r *PackResourceModel) ToOperationsCreatePacksRequest(ctx context.Context) (*operations.CreatePacksRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	requestBody, requestBodyDiags := r.ToOperationsCreatePacksRequestBody(ctx)
	diags.Append(requestBodyDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreatePacksRequest{
		GroupID:     groupID,
		RequestBody: *requestBody,
	}

	return &out, diags
}

func (r *PackResourceModel) ToOperationsGetPacksRequest(ctx context.Context) (*operations.GetPacksRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetPacksRequest{
		GroupID: groupID,
	}

	return &out, diags
}

func (r *PackResourceModel) ToOperationsUpdatePacksByIDRequest(ctx context.Context) (*operations.UpdatePacksByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	source := new(string)
	if !r.Source.IsUnknown() && !r.Source.IsNull() {
		*source = r.Source.ValueString()
	} else {
		source = nil
	}
	out := operations.UpdatePacksByIDRequest{
		ID:      id,
		GroupID: groupID,
		Source:  source,
	}

	return &out, diags
}

func (r *PackResourceModel) ToOperationsDeletePacksByIDRequest(ctx context.Context) (*operations.DeletePacksByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeletePacksByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *PackResourceModel) RefreshFromOperationsCreatePacksResponseBody(ctx context.Context, resp *operations.CreatePacksResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.PackInfo{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.PackInfo
			items.Author = types.StringPointerValue(itemsItem.Author)
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.DisplayName = types.StringPointerValue(itemsItem.DisplayName)
			items.Exports = make([]types.String, 0, len(itemsItem.Exports))
			for _, v := range itemsItem.Exports {
				items.Exports = append(items.Exports, types.StringValue(v))
			}
			items.ID = types.StringValue(itemsItem.ID)
			items.IsDisabled = types.BoolPointerValue(itemsItem.IsDisabled)
			items.MinLogStreamVersion = types.StringPointerValue(itemsItem.MinLogStreamVersion)
			if len(itemsItem.Settings) > 0 {
				items.Settings = make(map[string]types.String, len(itemsItem.Settings))
				for key, value := range itemsItem.Settings {
					result, _ := json.Marshal(value)
					items.Settings[key] = types.StringValue(string(result))
				}
			}
			items.Source = types.StringValue(itemsItem.Source)
			items.Spec = types.StringPointerValue(itemsItem.Spec)
			if itemsItem.Tags == nil {
				items.Tags = nil
			} else {
				items.Tags = &tfTypes.PackInfoTags{}
				items.Tags.DataType = make([]types.String, 0, len(itemsItem.Tags.DataType))
				for _, v := range itemsItem.Tags.DataType {
					items.Tags.DataType = append(items.Tags.DataType, types.StringValue(v))
				}
				items.Tags.Domain = make([]types.String, 0, len(itemsItem.Tags.Domain))
				for _, v := range itemsItem.Tags.Domain {
					items.Tags.Domain = append(items.Tags.Domain, types.StringValue(v))
				}
				items.Tags.Streamtags = make([]types.String, 0, len(itemsItem.Tags.Streamtags))
				for _, v := range itemsItem.Tags.Streamtags {
					items.Tags.Streamtags = append(items.Tags.Streamtags, types.StringValue(v))
				}
				items.Tags.Technology = make([]types.String, 0, len(itemsItem.Tags.Technology))
				for _, v := range itemsItem.Tags.Technology {
					items.Tags.Technology = append(items.Tags.Technology, types.StringValue(v))
				}
			}
			items.Version = types.StringPointerValue(itemsItem.Version)
			warningsResult, _ := json.Marshal(itemsItem.Warnings)
			items.Warnings = types.StringValue(string(warningsResult))
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Author = items.Author
				r.Items[itemsCount].Description = items.Description
				r.Items[itemsCount].DisplayName = items.DisplayName
				r.Items[itemsCount].Exports = items.Exports
				r.Items[itemsCount].ID = items.ID
				r.Items[itemsCount].IsDisabled = items.IsDisabled
				r.Items[itemsCount].MinLogStreamVersion = items.MinLogStreamVersion
				r.Items[itemsCount].Settings = items.Settings
				r.Items[itemsCount].Source = items.Source
				r.Items[itemsCount].Spec = items.Spec
				r.Items[itemsCount].Tags = items.Tags
				r.Items[itemsCount].Version = items.Version
				r.Items[itemsCount].Warnings = items.Warnings
			}
		}
	}

	return diags
}

func (r *PackResourceModel) RefreshFromOperationsGetPacksResponseBody(ctx context.Context, resp *operations.GetPacksResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.PackInfo{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.PackInfo
			items.Author = types.StringPointerValue(itemsItem.Author)
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.DisplayName = types.StringPointerValue(itemsItem.DisplayName)
			items.Exports = make([]types.String, 0, len(itemsItem.Exports))
			for _, v := range itemsItem.Exports {
				items.Exports = append(items.Exports, types.StringValue(v))
			}
			items.ID = types.StringValue(itemsItem.ID)
			items.IsDisabled = types.BoolPointerValue(itemsItem.IsDisabled)
			items.MinLogStreamVersion = types.StringPointerValue(itemsItem.MinLogStreamVersion)
			if len(itemsItem.Settings) > 0 {
				items.Settings = make(map[string]types.String, len(itemsItem.Settings))
				for key, value := range itemsItem.Settings {
					result, _ := json.Marshal(value)
					items.Settings[key] = types.StringValue(string(result))
				}
			}
			items.Source = types.StringValue(itemsItem.Source)
			items.Spec = types.StringPointerValue(itemsItem.Spec)
			if itemsItem.Tags == nil {
				items.Tags = nil
			} else {
				items.Tags = &tfTypes.PackInfoTags{}
				items.Tags.DataType = make([]types.String, 0, len(itemsItem.Tags.DataType))
				for _, v := range itemsItem.Tags.DataType {
					items.Tags.DataType = append(items.Tags.DataType, types.StringValue(v))
				}
				items.Tags.Domain = make([]types.String, 0, len(itemsItem.Tags.Domain))
				for _, v := range itemsItem.Tags.Domain {
					items.Tags.Domain = append(items.Tags.Domain, types.StringValue(v))
				}
				items.Tags.Streamtags = make([]types.String, 0, len(itemsItem.Tags.Streamtags))
				for _, v := range itemsItem.Tags.Streamtags {
					items.Tags.Streamtags = append(items.Tags.Streamtags, types.StringValue(v))
				}
				items.Tags.Technology = make([]types.String, 0, len(itemsItem.Tags.Technology))
				for _, v := range itemsItem.Tags.Technology {
					items.Tags.Technology = append(items.Tags.Technology, types.StringValue(v))
				}
			}
			items.Version = types.StringPointerValue(itemsItem.Version)
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Author = items.Author
				r.Items[itemsCount].Description = items.Description
				r.Items[itemsCount].DisplayName = items.DisplayName
				r.Items[itemsCount].Exports = items.Exports
				r.Items[itemsCount].ID = items.ID
				r.Items[itemsCount].IsDisabled = items.IsDisabled
				r.Items[itemsCount].MinLogStreamVersion = items.MinLogStreamVersion
				r.Items[itemsCount].Settings = items.Settings
				r.Items[itemsCount].Source = items.Source
				r.Items[itemsCount].Spec = items.Spec
				r.Items[itemsCount].Tags = items.Tags
				r.Items[itemsCount].Version = items.Version
			}
		}
	}

	return diags
}

func (r *PackResourceModel) RefreshFromOperationsUpdatePacksByIDResponseBody(ctx context.Context, resp *operations.UpdatePacksByIDResponseBody) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.PackInfo{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.PackInfo
			items.Author = types.StringPointerValue(itemsItem.Author)
			items.Description = types.StringPointerValue(itemsItem.Description)
			items.DisplayName = types.StringPointerValue(itemsItem.DisplayName)
			items.Exports = make([]types.String, 0, len(itemsItem.Exports))
			for _, v := range itemsItem.Exports {
				items.Exports = append(items.Exports, types.StringValue(v))
			}
			items.ID = types.StringValue(itemsItem.ID)
			items.IsDisabled = types.BoolPointerValue(itemsItem.IsDisabled)
			items.MinLogStreamVersion = types.StringPointerValue(itemsItem.MinLogStreamVersion)
			if len(itemsItem.Settings) > 0 {
				items.Settings = make(map[string]types.String, len(itemsItem.Settings))
				for key, value := range itemsItem.Settings {
					result, _ := json.Marshal(value)
					items.Settings[key] = types.StringValue(string(result))
				}
			}
			items.Source = types.StringValue(itemsItem.Source)
			items.Spec = types.StringPointerValue(itemsItem.Spec)
			if itemsItem.Tags == nil {
				items.Tags = nil
			} else {
				items.Tags = &tfTypes.PackInfoTags{}
				items.Tags.DataType = make([]types.String, 0, len(itemsItem.Tags.DataType))
				for _, v := range itemsItem.Tags.DataType {
					items.Tags.DataType = append(items.Tags.DataType, types.StringValue(v))
				}
				items.Tags.Domain = make([]types.String, 0, len(itemsItem.Tags.Domain))
				for _, v := range itemsItem.Tags.Domain {
					items.Tags.Domain = append(items.Tags.Domain, types.StringValue(v))
				}
				items.Tags.Streamtags = make([]types.String, 0, len(itemsItem.Tags.Streamtags))
				for _, v := range itemsItem.Tags.Streamtags {
					items.Tags.Streamtags = append(items.Tags.Streamtags, types.StringValue(v))
				}
				items.Tags.Technology = make([]types.String, 0, len(itemsItem.Tags.Technology))
				for _, v := range itemsItem.Tags.Technology {
					items.Tags.Technology = append(items.Tags.Technology, types.StringValue(v))
				}
			}
			items.Version = types.StringPointerValue(itemsItem.Version)
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Author = items.Author
				r.Items[itemsCount].Description = items.Description
				r.Items[itemsCount].DisplayName = items.DisplayName
				r.Items[itemsCount].Exports = items.Exports
				r.Items[itemsCount].ID = items.ID
				r.Items[itemsCount].IsDisabled = items.IsDisabled
				r.Items[itemsCount].MinLogStreamVersion = items.MinLogStreamVersion
				r.Items[itemsCount].Settings = items.Settings
				r.Items[itemsCount].Source = items.Source
				r.Items[itemsCount].Spec = items.Spec
				r.Items[itemsCount].Tags = items.Tags
				r.Items[itemsCount].Version = items.Version
			}
		}
	}

	return diags
}
