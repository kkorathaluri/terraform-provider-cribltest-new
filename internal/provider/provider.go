// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/shared"
	"net/http"
	"os"
)

var _ provider.Provider = (*CriblTerraformProvider)(nil)
var _ provider.ProviderWithEphemeralResources = (*CriblTerraformProvider)(nil)

type CriblTerraformProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// CriblTerraformProviderModel describes the provider data model.
type CriblTerraformProviderModel struct {
	BearerAuth     types.String `tfsdk:"bearer_auth"`
	ClientID       types.String `tfsdk:"client_id"`
	ClientSecret   types.String `tfsdk:"client_secret"`
	OrganizationID types.String `tfsdk:"organization_id"`
	ServerURL      types.String `tfsdk:"server_url"`
	TokenURL       types.String `tfsdk:"token_url"`
	WorkspaceID    types.String `tfsdk:"workspace_id"`
}

func (p *CriblTerraformProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "cribl-terraform"
	resp.Version = p.version
}

func (p *CriblTerraformProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"bearer_auth": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"client_id": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"client_secret": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"organization_id": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"server_url": schema.StringAttribute{
				Description: `Server URL (defaults to https://app.cribl-playground.cloud)`,
				Optional:    true,
			},
			"token_url": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"workspace_id": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
		},
	}
}

func (p *CriblTerraformProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data CriblTerraformProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()

	if ServerURL == "" {
		ServerURL = "https://app.cribl-playground.cloud"
	}

	bearerAuth := new(string)
	if !data.BearerAuth.IsUnknown() && !data.BearerAuth.IsNull() {
		*bearerAuth = data.BearerAuth.ValueString()
	} else {
		bearerAuth = nil
	}
	organizationID := new(string)
	if !data.OrganizationID.IsUnknown() && !data.OrganizationID.IsNull() {
		*organizationID = data.OrganizationID.ValueString()
	} else {
		if len(os.Getenv("CRIBL_ORGANIZATION_ID")) > 0 {
			*organizationID = os.Getenv("CRIBL_ORGANIZATION_ID")
		} else {
			organizationID = nil
		}
	}
	workspaceID := new(string)
	if !data.WorkspaceID.IsUnknown() && !data.WorkspaceID.IsNull() {
		*workspaceID = data.WorkspaceID.ValueString()
	} else {
		if len(os.Getenv("CRIBL_WORKSPACE_ID")) > 0 {
			*workspaceID = os.Getenv("CRIBL_WORKSPACE_ID")
		} else {
			workspaceID = nil
		}
	}
	security := shared.Security{
		BearerAuth:     bearerAuth,
		OrganizationID: organizationID,
		WorkspaceID:    workspaceID,
	}

	providerHTTPTransportOpts := ProviderHTTPTransportOpts{
		SetHeaders: make(map[string]string),
		Transport:  http.DefaultTransport,
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewProviderHTTPTransport(providerHTTPTransportOpts)

	opts := []sdk.SDKOption{
		sdk.WithServerURL(ServerURL),
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}
	client := sdk.New(opts...)

	resp.DataSourceData = client
	resp.EphemeralResourceData = client
	resp.ResourceData = client
}

func (p *CriblTerraformProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewDestinationResource,
		NewGroupResource,
		NewPackResource,
		NewPackPipelineResource,
		NewPipelineResource,
		NewSourceResource,
	}
}

func (p *CriblTerraformProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewPackDataSource,
		NewPackPipelineDataSource,
		NewPipelineDataSource,
	}
}

func (p *CriblTerraformProvider) EphemeralResources(ctx context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &CriblTerraformProvider{
			version: version,
		}
	}
}
