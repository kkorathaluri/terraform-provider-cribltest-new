// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-cribl-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/shared"
)

func (r *PipelineResourceModel) ToSharedPipeline(ctx context.Context) (*shared.Pipeline, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	asyncFuncTimeout := new(int64)
	if !r.Conf.AsyncFuncTimeout.IsUnknown() && !r.Conf.AsyncFuncTimeout.IsNull() {
		*asyncFuncTimeout = r.Conf.AsyncFuncTimeout.ValueInt64()
	} else {
		asyncFuncTimeout = nil
	}
	output := new(string)
	if !r.Conf.Output.IsUnknown() && !r.Conf.Output.IsNull() {
		*output = r.Conf.Output.ValueString()
	} else {
		output = nil
	}
	description := new(string)
	if !r.Conf.Description.IsUnknown() && !r.Conf.Description.IsNull() {
		*description = r.Conf.Description.ValueString()
	} else {
		description = nil
	}
	streamtags := make([]string, 0, len(r.Conf.Streamtags))
	for _, streamtagsItem := range r.Conf.Streamtags {
		streamtags = append(streamtags, streamtagsItem.ValueString())
	}
	functions := make([]shared.PipelineFunctionConf, 0, len(r.Conf.Functions))
	for _, functionsItem := range r.Conf.Functions {
		filter := new(string)
		if !functionsItem.Filter.IsUnknown() && !functionsItem.Filter.IsNull() {
			*filter = functionsItem.Filter.ValueString()
		} else {
			filter = nil
		}
		var id1 string
		id1 = functionsItem.ID.ValueString()

		description1 := new(string)
		if !functionsItem.Description.IsUnknown() && !functionsItem.Description.IsNull() {
			*description1 = functionsItem.Description.ValueString()
		} else {
			description1 = nil
		}
		disabled := new(bool)
		if !functionsItem.Disabled.IsUnknown() && !functionsItem.Disabled.IsNull() {
			*disabled = functionsItem.Disabled.ValueBool()
		} else {
			disabled = nil
		}
		final := new(bool)
		if !functionsItem.Final.IsUnknown() && !functionsItem.Final.IsNull() {
			*final = functionsItem.Final.ValueBool()
		} else {
			final = nil
		}
		conf1 := make(map[string]interface{})
		for confKey, confValue := range functionsItem.Conf {
			var confInst interface{}
			_ = json.Unmarshal([]byte(confValue.ValueString()), &confInst)
			conf1[confKey] = confInst
		}
		groupID := new(string)
		if !functionsItem.GroupID.IsUnknown() && !functionsItem.GroupID.IsNull() {
			*groupID = functionsItem.GroupID.ValueString()
		} else {
			groupID = nil
		}
		functions = append(functions, shared.PipelineFunctionConf{
			Filter:      filter,
			ID:          id1,
			Description: description1,
			Disabled:    disabled,
			Final:       final,
			Conf:        conf1,
			GroupID:     groupID,
		})
	}
	groups := make(map[string]shared.PipelineGroups)
	for groupsKey, groupsValue := range r.Conf.Groups {
		var name string
		name = groupsValue.Name.ValueString()

		description2 := new(string)
		if !groupsValue.Description.IsUnknown() && !groupsValue.Description.IsNull() {
			*description2 = groupsValue.Description.ValueString()
		} else {
			description2 = nil
		}
		disabled1 := new(bool)
		if !groupsValue.Disabled.IsUnknown() && !groupsValue.Disabled.IsNull() {
			*disabled1 = groupsValue.Disabled.ValueBool()
		} else {
			disabled1 = nil
		}
		groupsInst := shared.PipelineGroups{
			Name:        name,
			Description: description2,
			Disabled:    disabled1,
		}
		groups[groupsKey] = groupsInst
	}
	conf := shared.Conf{
		AsyncFuncTimeout: asyncFuncTimeout,
		Output:           output,
		Description:      description,
		Streamtags:       streamtags,
		Functions:        functions,
		Groups:           groups,
	}
	out := shared.Pipeline{
		ID:   id,
		Conf: conf,
	}

	return &out, diags
}

func (r *PipelineResourceModel) ToOperationsCreatePipelineRequest(ctx context.Context) (*operations.CreatePipelineRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	pipeline, pipelineDiags := r.ToSharedPipeline(ctx)
	diags.Append(pipelineDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreatePipelineRequest{
		GroupID:  groupID,
		Pipeline: *pipeline,
	}

	return &out, diags
}

func (r *PipelineResourceModel) ToOperationsUpdatePipelineByIDRequest(ctx context.Context) (*operations.UpdatePipelineByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	pipeline, pipelineDiags := r.ToSharedPipeline(ctx)
	diags.Append(pipelineDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdatePipelineByIDRequest{
		ID:       id,
		GroupID:  groupID,
		Pipeline: *pipeline,
	}

	return &out, diags
}

func (r *PipelineResourceModel) ToOperationsGetPipelineByIDRequest(ctx context.Context) (*operations.GetPipelineByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.GetPipelineByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *PipelineResourceModel) ToOperationsDeletePipelineByIDRequest(ctx context.Context) (*operations.DeletePipelineByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeletePipelineByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *PipelineResourceModel) RefreshFromSharedPipeline(ctx context.Context, resp *shared.Pipeline) diag.Diagnostics {
	var diags diag.Diagnostics

	r.Conf.AsyncFuncTimeout = types.Int64PointerValue(resp.Conf.AsyncFuncTimeout)
	r.Conf.Description = types.StringPointerValue(resp.Conf.Description)
	r.Conf.Functions = []tfTypes.PipelineFunctionConf{}
	if len(r.Conf.Functions) > len(resp.Conf.Functions) {
		r.Conf.Functions = r.Conf.Functions[:len(resp.Conf.Functions)]
	}
	for functionsCount, functionsItem := range resp.Conf.Functions {
		var functions tfTypes.PipelineFunctionConf
		if len(functionsItem.Conf) > 0 {
			functions.Conf = make(map[string]types.String, len(functionsItem.Conf))
			for key, value := range functionsItem.Conf {
				result, _ := json.Marshal(value)
				functions.Conf[key] = types.StringValue(string(result))
			}
		}
		functions.Description = types.StringPointerValue(functionsItem.Description)
		functions.Disabled = types.BoolPointerValue(functionsItem.Disabled)
		functions.Filter = types.StringPointerValue(functionsItem.Filter)
		functions.Final = types.BoolPointerValue(functionsItem.Final)
		functions.GroupID = types.StringPointerValue(functionsItem.GroupID)
		functions.ID = types.StringValue(functionsItem.ID)
		if functionsCount+1 > len(r.Conf.Functions) {
			r.Conf.Functions = append(r.Conf.Functions, functions)
		} else {
			r.Conf.Functions[functionsCount].Conf = functions.Conf
			r.Conf.Functions[functionsCount].Description = functions.Description
			r.Conf.Functions[functionsCount].Disabled = functions.Disabled
			r.Conf.Functions[functionsCount].Filter = functions.Filter
			r.Conf.Functions[functionsCount].Final = functions.Final
			r.Conf.Functions[functionsCount].GroupID = functions.GroupID
			r.Conf.Functions[functionsCount].ID = functions.ID
		}
	}
	if len(resp.Conf.Groups) > 0 {
		r.Conf.Groups = make(map[string]tfTypes.PipelineGroups, len(resp.Conf.Groups))
		for pipelineGroupsKey, pipelineGroupsValue := range resp.Conf.Groups {
			var pipelineGroupsResult tfTypes.PipelineGroups
			pipelineGroupsResult.Description = types.StringPointerValue(pipelineGroupsValue.Description)
			pipelineGroupsResult.Disabled = types.BoolPointerValue(pipelineGroupsValue.Disabled)
			pipelineGroupsResult.Name = types.StringValue(pipelineGroupsValue.Name)

			r.Conf.Groups[pipelineGroupsKey] = pipelineGroupsResult
		}
	}
	r.Conf.Output = types.StringPointerValue(resp.Conf.Output)
	r.Conf.Streamtags = make([]types.String, 0, len(resp.Conf.Streamtags))
	for _, v := range resp.Conf.Streamtags {
		r.Conf.Streamtags = append(r.Conf.Streamtags, types.StringValue(v))
	}
	r.ID = types.StringValue(resp.ID)

	return diags
}
