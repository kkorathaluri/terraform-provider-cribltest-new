// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-cribl-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/shared"
)

func (r *DestinationResourceModel) ToSharedOutput(ctx context.Context) (*shared.Output, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.Output
	var outputDefault *shared.OutputDefault
	if r.OutputDefault != nil {
		id := new(string)
		if !r.OutputDefault.ID.IsUnknown() && !r.OutputDefault.ID.IsNull() {
			*id = r.OutputDefault.ID.ValueString()
		} else {
			id = nil
		}
		typeVar := shared.OutputDefaultType(r.OutputDefault.Type.ValueString())
		pipeline := new(string)
		if !r.OutputDefault.Pipeline.IsUnknown() && !r.OutputDefault.Pipeline.IsNull() {
			*pipeline = r.OutputDefault.Pipeline.ValueString()
		} else {
			pipeline = nil
		}
		systemFields := make([]string, 0, len(r.OutputDefault.SystemFields))
		for _, systemFieldsItem := range r.OutputDefault.SystemFields {
			systemFields = append(systemFields, systemFieldsItem.ValueString())
		}
		environment := new(string)
		if !r.OutputDefault.Environment.IsUnknown() && !r.OutputDefault.Environment.IsNull() {
			*environment = r.OutputDefault.Environment.ValueString()
		} else {
			environment = nil
		}
		streamtags := make([]string, 0, len(r.OutputDefault.Streamtags))
		for _, streamtagsItem := range r.OutputDefault.Streamtags {
			streamtags = append(streamtags, streamtagsItem.ValueString())
		}
		var defaultID string
		defaultID = r.OutputDefault.DefaultID.ValueString()

		outputDefault = &shared.OutputDefault{
			ID:           id,
			Type:         typeVar,
			Pipeline:     pipeline,
			SystemFields: systemFields,
			Environment:  environment,
			Streamtags:   streamtags,
			DefaultID:    defaultID,
		}
	}
	if outputDefault != nil {
		out = shared.Output{
			OutputDefault: outputDefault,
		}
	}
	var outputWebhook *shared.OutputWebhook
	if r.OutputWebhook != nil {
		var id1 string
		id1 = r.OutputWebhook.ID.ValueString()

		typeVar1 := shared.OutputWebhookType(r.OutputWebhook.Type.ValueString())
		pipeline1 := new(string)
		if !r.OutputWebhook.Pipeline.IsUnknown() && !r.OutputWebhook.Pipeline.IsNull() {
			*pipeline1 = r.OutputWebhook.Pipeline.ValueString()
		} else {
			pipeline1 = nil
		}
		systemFields1 := make([]string, 0, len(r.OutputWebhook.SystemFields))
		for _, systemFieldsItem1 := range r.OutputWebhook.SystemFields {
			systemFields1 = append(systemFields1, systemFieldsItem1.ValueString())
		}
		environment1 := new(string)
		if !r.OutputWebhook.Environment.IsUnknown() && !r.OutputWebhook.Environment.IsNull() {
			*environment1 = r.OutputWebhook.Environment.ValueString()
		} else {
			environment1 = nil
		}
		streamtags1 := make([]string, 0, len(r.OutputWebhook.Streamtags))
		for _, streamtagsItem1 := range r.OutputWebhook.Streamtags {
			streamtags1 = append(streamtags1, streamtagsItem1.ValueString())
		}
		method := new(shared.Method)
		if !r.OutputWebhook.Method.IsUnknown() && !r.OutputWebhook.Method.IsNull() {
			*method = shared.Method(r.OutputWebhook.Method.ValueString())
		} else {
			method = nil
		}
		format := new(shared.OutputWebhookFormat)
		if !r.OutputWebhook.Format.IsUnknown() && !r.OutputWebhook.Format.IsNull() {
			*format = shared.OutputWebhookFormat(r.OutputWebhook.Format.ValueString())
		} else {
			format = nil
		}
		keepAlive := new(bool)
		if !r.OutputWebhook.KeepAlive.IsUnknown() && !r.OutputWebhook.KeepAlive.IsNull() {
			*keepAlive = r.OutputWebhook.KeepAlive.ValueBool()
		} else {
			keepAlive = nil
		}
		concurrency := new(float64)
		if !r.OutputWebhook.Concurrency.IsUnknown() && !r.OutputWebhook.Concurrency.IsNull() {
			*concurrency = r.OutputWebhook.Concurrency.ValueFloat64()
		} else {
			concurrency = nil
		}
		maxPayloadSizeKB := new(float64)
		if !r.OutputWebhook.MaxPayloadSizeKB.IsUnknown() && !r.OutputWebhook.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKB = r.OutputWebhook.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKB = nil
		}
		maxPayloadEvents := new(float64)
		if !r.OutputWebhook.MaxPayloadEvents.IsUnknown() && !r.OutputWebhook.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents = r.OutputWebhook.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents = nil
		}
		compress := new(bool)
		if !r.OutputWebhook.Compress.IsUnknown() && !r.OutputWebhook.Compress.IsNull() {
			*compress = r.OutputWebhook.Compress.ValueBool()
		} else {
			compress = nil
		}
		rejectUnauthorized := new(bool)
		if !r.OutputWebhook.RejectUnauthorized.IsUnknown() && !r.OutputWebhook.RejectUnauthorized.IsNull() {
			*rejectUnauthorized = r.OutputWebhook.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized = nil
		}
		timeoutSec := new(float64)
		if !r.OutputWebhook.TimeoutSec.IsUnknown() && !r.OutputWebhook.TimeoutSec.IsNull() {
			*timeoutSec = r.OutputWebhook.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec = nil
		}
		flushPeriodSec := new(float64)
		if !r.OutputWebhook.FlushPeriodSec.IsUnknown() && !r.OutputWebhook.FlushPeriodSec.IsNull() {
			*flushPeriodSec = r.OutputWebhook.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec = nil
		}
		extraHTTPHeaders := make([]shared.OutputWebhookExtraHTTPHeaders, 0, len(r.OutputWebhook.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem := range r.OutputWebhook.ExtraHTTPHeaders {
			name := new(string)
			if !extraHTTPHeadersItem.Name.IsUnknown() && !extraHTTPHeadersItem.Name.IsNull() {
				*name = extraHTTPHeadersItem.Name.ValueString()
			} else {
				name = nil
			}
			var value string
			value = extraHTTPHeadersItem.Value.ValueString()

			extraHTTPHeaders = append(extraHTTPHeaders, shared.OutputWebhookExtraHTTPHeaders{
				Name:  name,
				Value: value,
			})
		}
		useRoundRobinDNS := new(bool)
		if !r.OutputWebhook.UseRoundRobinDNS.IsUnknown() && !r.OutputWebhook.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDNS = r.OutputWebhook.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDNS = nil
		}
		failedRequestLoggingMode := new(shared.FailedRequestLoggingMode)
		if !r.OutputWebhook.FailedRequestLoggingMode.IsUnknown() && !r.OutputWebhook.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode = shared.FailedRequestLoggingMode(r.OutputWebhook.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode = nil
		}
		safeHeaders := make([]string, 0, len(r.OutputWebhook.SafeHeaders))
		for _, safeHeadersItem := range r.OutputWebhook.SafeHeaders {
			safeHeaders = append(safeHeaders, safeHeadersItem.ValueString())
		}
		responseRetrySettings := make([]shared.ResponseRetrySettings, 0, len(r.OutputWebhook.ResponseRetrySettings))
		for _, responseRetrySettingsItem := range r.OutputWebhook.ResponseRetrySettings {
			var httpStatus float64
			httpStatus = responseRetrySettingsItem.HTTPStatus.ValueFloat64()

			initialBackoff := new(float64)
			if !responseRetrySettingsItem.InitialBackoff.IsUnknown() && !responseRetrySettingsItem.InitialBackoff.IsNull() {
				*initialBackoff = responseRetrySettingsItem.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff = nil
			}
			backoffRate := new(float64)
			if !responseRetrySettingsItem.BackoffRate.IsUnknown() && !responseRetrySettingsItem.BackoffRate.IsNull() {
				*backoffRate = responseRetrySettingsItem.BackoffRate.ValueFloat64()
			} else {
				backoffRate = nil
			}
			maxBackoff := new(float64)
			if !responseRetrySettingsItem.MaxBackoff.IsUnknown() && !responseRetrySettingsItem.MaxBackoff.IsNull() {
				*maxBackoff = responseRetrySettingsItem.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff = nil
			}
			responseRetrySettings = append(responseRetrySettings, shared.ResponseRetrySettings{
				HTTPStatus:     httpStatus,
				InitialBackoff: initialBackoff,
				BackoffRate:    backoffRate,
				MaxBackoff:     maxBackoff,
			})
		}
		var timeoutRetrySettings *shared.TimeoutRetrySettings
		if r.OutputWebhook.TimeoutRetrySettings != nil {
			timeoutRetry := new(bool)
			if !r.OutputWebhook.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputWebhook.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry = r.OutputWebhook.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry = nil
			}
			initialBackoff1 := new(float64)
			if !r.OutputWebhook.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputWebhook.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff1 = r.OutputWebhook.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff1 = nil
			}
			backoffRate1 := new(float64)
			if !r.OutputWebhook.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputWebhook.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate1 = r.OutputWebhook.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate1 = nil
			}
			maxBackoff1 := new(float64)
			if !r.OutputWebhook.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputWebhook.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff1 = r.OutputWebhook.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff1 = nil
			}
			timeoutRetrySettings = &shared.TimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry,
				InitialBackoff: initialBackoff1,
				BackoffRate:    backoffRate1,
				MaxBackoff:     maxBackoff1,
			}
		}
		responseHonorRetryAfterHeader := new(bool)
		if !r.OutputWebhook.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputWebhook.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader = r.OutputWebhook.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader = nil
		}
		onBackpressure := new(shared.BackpressureBehavior)
		if !r.OutputWebhook.OnBackpressure.IsUnknown() && !r.OutputWebhook.OnBackpressure.IsNull() {
			*onBackpressure = shared.BackpressureBehavior(r.OutputWebhook.OnBackpressure.ValueString())
		} else {
			onBackpressure = nil
		}
		authType := new(shared.OutputWebhookAuthenticationType)
		if !r.OutputWebhook.AuthType.IsUnknown() && !r.OutputWebhook.AuthType.IsNull() {
			*authType = shared.OutputWebhookAuthenticationType(r.OutputWebhook.AuthType.ValueString())
		} else {
			authType = nil
		}
		var tls *shared.OutputWebhookTLSSettingsClientSide
		if r.OutputWebhook.TLS != nil {
			disabled := new(bool)
			if !r.OutputWebhook.TLS.Disabled.IsUnknown() && !r.OutputWebhook.TLS.Disabled.IsNull() {
				*disabled = r.OutputWebhook.TLS.Disabled.ValueBool()
			} else {
				disabled = nil
			}
			servername := new(string)
			if !r.OutputWebhook.TLS.Servername.IsUnknown() && !r.OutputWebhook.TLS.Servername.IsNull() {
				*servername = r.OutputWebhook.TLS.Servername.ValueString()
			} else {
				servername = nil
			}
			certificateName := new(string)
			if !r.OutputWebhook.TLS.CertificateName.IsUnknown() && !r.OutputWebhook.TLS.CertificateName.IsNull() {
				*certificateName = r.OutputWebhook.TLS.CertificateName.ValueString()
			} else {
				certificateName = nil
			}
			caPath := new(string)
			if !r.OutputWebhook.TLS.CaPath.IsUnknown() && !r.OutputWebhook.TLS.CaPath.IsNull() {
				*caPath = r.OutputWebhook.TLS.CaPath.ValueString()
			} else {
				caPath = nil
			}
			privKeyPath := new(string)
			if !r.OutputWebhook.TLS.PrivKeyPath.IsUnknown() && !r.OutputWebhook.TLS.PrivKeyPath.IsNull() {
				*privKeyPath = r.OutputWebhook.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath = nil
			}
			certPath := new(string)
			if !r.OutputWebhook.TLS.CertPath.IsUnknown() && !r.OutputWebhook.TLS.CertPath.IsNull() {
				*certPath = r.OutputWebhook.TLS.CertPath.ValueString()
			} else {
				certPath = nil
			}
			passphrase := new(string)
			if !r.OutputWebhook.TLS.Passphrase.IsUnknown() && !r.OutputWebhook.TLS.Passphrase.IsNull() {
				*passphrase = r.OutputWebhook.TLS.Passphrase.ValueString()
			} else {
				passphrase = nil
			}
			minVersion := new(shared.OutputWebhookMinimumTLSVersion)
			if !r.OutputWebhook.TLS.MinVersion.IsUnknown() && !r.OutputWebhook.TLS.MinVersion.IsNull() {
				*minVersion = shared.OutputWebhookMinimumTLSVersion(r.OutputWebhook.TLS.MinVersion.ValueString())
			} else {
				minVersion = nil
			}
			maxVersion := new(shared.OutputWebhookMaximumTLSVersion)
			if !r.OutputWebhook.TLS.MaxVersion.IsUnknown() && !r.OutputWebhook.TLS.MaxVersion.IsNull() {
				*maxVersion = shared.OutputWebhookMaximumTLSVersion(r.OutputWebhook.TLS.MaxVersion.ValueString())
			} else {
				maxVersion = nil
			}
			tls = &shared.OutputWebhookTLSSettingsClientSide{
				Disabled:        disabled,
				Servername:      servername,
				CertificateName: certificateName,
				CaPath:          caPath,
				PrivKeyPath:     privKeyPath,
				CertPath:        certPath,
				Passphrase:      passphrase,
				MinVersion:      minVersion,
				MaxVersion:      maxVersion,
			}
		}
		totalMemoryLimitKB := new(float64)
		if !r.OutputWebhook.TotalMemoryLimitKB.IsUnknown() && !r.OutputWebhook.TotalMemoryLimitKB.IsNull() {
			*totalMemoryLimitKB = r.OutputWebhook.TotalMemoryLimitKB.ValueFloat64()
		} else {
			totalMemoryLimitKB = nil
		}
		loadBalanced := new(bool)
		if !r.OutputWebhook.LoadBalanced.IsUnknown() && !r.OutputWebhook.LoadBalanced.IsNull() {
			*loadBalanced = r.OutputWebhook.LoadBalanced.ValueBool()
		} else {
			loadBalanced = nil
		}
		description := new(string)
		if !r.OutputWebhook.Description.IsUnknown() && !r.OutputWebhook.Description.IsNull() {
			*description = r.OutputWebhook.Description.ValueString()
		} else {
			description = nil
		}
		customSourceExpression := new(string)
		if !r.OutputWebhook.CustomSourceExpression.IsUnknown() && !r.OutputWebhook.CustomSourceExpression.IsNull() {
			*customSourceExpression = r.OutputWebhook.CustomSourceExpression.ValueString()
		} else {
			customSourceExpression = nil
		}
		customDropWhenNull := new(bool)
		if !r.OutputWebhook.CustomDropWhenNull.IsUnknown() && !r.OutputWebhook.CustomDropWhenNull.IsNull() {
			*customDropWhenNull = r.OutputWebhook.CustomDropWhenNull.ValueBool()
		} else {
			customDropWhenNull = nil
		}
		customEventDelimiter := new(string)
		if !r.OutputWebhook.CustomEventDelimiter.IsUnknown() && !r.OutputWebhook.CustomEventDelimiter.IsNull() {
			*customEventDelimiter = r.OutputWebhook.CustomEventDelimiter.ValueString()
		} else {
			customEventDelimiter = nil
		}
		customContentType := new(string)
		if !r.OutputWebhook.CustomContentType.IsUnknown() && !r.OutputWebhook.CustomContentType.IsNull() {
			*customContentType = r.OutputWebhook.CustomContentType.ValueString()
		} else {
			customContentType = nil
		}
		customPayloadExpression := new(string)
		if !r.OutputWebhook.CustomPayloadExpression.IsUnknown() && !r.OutputWebhook.CustomPayloadExpression.IsNull() {
			*customPayloadExpression = r.OutputWebhook.CustomPayloadExpression.ValueString()
		} else {
			customPayloadExpression = nil
		}
		advancedContentType := new(string)
		if !r.OutputWebhook.AdvancedContentType.IsUnknown() && !r.OutputWebhook.AdvancedContentType.IsNull() {
			*advancedContentType = r.OutputWebhook.AdvancedContentType.ValueString()
		} else {
			advancedContentType = nil
		}
		formatEventCode := new(string)
		if !r.OutputWebhook.FormatEventCode.IsUnknown() && !r.OutputWebhook.FormatEventCode.IsNull() {
			*formatEventCode = r.OutputWebhook.FormatEventCode.ValueString()
		} else {
			formatEventCode = nil
		}
		formatPayloadCode := new(string)
		if !r.OutputWebhook.FormatPayloadCode.IsUnknown() && !r.OutputWebhook.FormatPayloadCode.IsNull() {
			*formatPayloadCode = r.OutputWebhook.FormatPayloadCode.ValueString()
		} else {
			formatPayloadCode = nil
		}
		pqMaxFileSize := new(string)
		if !r.OutputWebhook.PqMaxFileSize.IsUnknown() && !r.OutputWebhook.PqMaxFileSize.IsNull() {
			*pqMaxFileSize = r.OutputWebhook.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize = nil
		}
		pqMaxSize := new(string)
		if !r.OutputWebhook.PqMaxSize.IsUnknown() && !r.OutputWebhook.PqMaxSize.IsNull() {
			*pqMaxSize = r.OutputWebhook.PqMaxSize.ValueString()
		} else {
			pqMaxSize = nil
		}
		pqPath := new(string)
		if !r.OutputWebhook.PqPath.IsUnknown() && !r.OutputWebhook.PqPath.IsNull() {
			*pqPath = r.OutputWebhook.PqPath.ValueString()
		} else {
			pqPath = nil
		}
		pqCompress := new(shared.OutputWebhookCompression)
		if !r.OutputWebhook.PqCompress.IsUnknown() && !r.OutputWebhook.PqCompress.IsNull() {
			*pqCompress = shared.OutputWebhookCompression(r.OutputWebhook.PqCompress.ValueString())
		} else {
			pqCompress = nil
		}
		pqOnBackpressure := new(shared.QueueFullBehavior)
		if !r.OutputWebhook.PqOnBackpressure.IsUnknown() && !r.OutputWebhook.PqOnBackpressure.IsNull() {
			*pqOnBackpressure = shared.QueueFullBehavior(r.OutputWebhook.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure = nil
		}
		pqMode := new(shared.OutputWebhookMode)
		if !r.OutputWebhook.PqMode.IsUnknown() && !r.OutputWebhook.PqMode.IsNull() {
			*pqMode = shared.OutputWebhookMode(r.OutputWebhook.PqMode.ValueString())
		} else {
			pqMode = nil
		}
		var pqControls *shared.PqControls
		if r.OutputWebhook.PqControls != nil {
			pqControls = &shared.PqControls{}
		}
		username := new(string)
		if !r.OutputWebhook.Username.IsUnknown() && !r.OutputWebhook.Username.IsNull() {
			*username = r.OutputWebhook.Username.ValueString()
		} else {
			username = nil
		}
		password := new(string)
		if !r.OutputWebhook.Password.IsUnknown() && !r.OutputWebhook.Password.IsNull() {
			*password = r.OutputWebhook.Password.ValueString()
		} else {
			password = nil
		}
		token := new(string)
		if !r.OutputWebhook.Token.IsUnknown() && !r.OutputWebhook.Token.IsNull() {
			*token = r.OutputWebhook.Token.ValueString()
		} else {
			token = nil
		}
		credentialsSecret := new(string)
		if !r.OutputWebhook.CredentialsSecret.IsUnknown() && !r.OutputWebhook.CredentialsSecret.IsNull() {
			*credentialsSecret = r.OutputWebhook.CredentialsSecret.ValueString()
		} else {
			credentialsSecret = nil
		}
		textSecret := new(string)
		if !r.OutputWebhook.TextSecret.IsUnknown() && !r.OutputWebhook.TextSecret.IsNull() {
			*textSecret = r.OutputWebhook.TextSecret.ValueString()
		} else {
			textSecret = nil
		}
		loginURL := new(string)
		if !r.OutputWebhook.LoginURL.IsUnknown() && !r.OutputWebhook.LoginURL.IsNull() {
			*loginURL = r.OutputWebhook.LoginURL.ValueString()
		} else {
			loginURL = nil
		}
		secretParamName := new(string)
		if !r.OutputWebhook.SecretParamName.IsUnknown() && !r.OutputWebhook.SecretParamName.IsNull() {
			*secretParamName = r.OutputWebhook.SecretParamName.ValueString()
		} else {
			secretParamName = nil
		}
		secret := new(string)
		if !r.OutputWebhook.Secret.IsUnknown() && !r.OutputWebhook.Secret.IsNull() {
			*secret = r.OutputWebhook.Secret.ValueString()
		} else {
			secret = nil
		}
		tokenAttributeName := new(string)
		if !r.OutputWebhook.TokenAttributeName.IsUnknown() && !r.OutputWebhook.TokenAttributeName.IsNull() {
			*tokenAttributeName = r.OutputWebhook.TokenAttributeName.ValueString()
		} else {
			tokenAttributeName = nil
		}
		authHeaderExpr := new(string)
		if !r.OutputWebhook.AuthHeaderExpr.IsUnknown() && !r.OutputWebhook.AuthHeaderExpr.IsNull() {
			*authHeaderExpr = r.OutputWebhook.AuthHeaderExpr.ValueString()
		} else {
			authHeaderExpr = nil
		}
		tokenTimeoutSecs := new(float64)
		if !r.OutputWebhook.TokenTimeoutSecs.IsUnknown() && !r.OutputWebhook.TokenTimeoutSecs.IsNull() {
			*tokenTimeoutSecs = r.OutputWebhook.TokenTimeoutSecs.ValueFloat64()
		} else {
			tokenTimeoutSecs = nil
		}
		oauthParams := make([]shared.OutputWebhookOauthParams, 0, len(r.OutputWebhook.OauthParams))
		for _, oauthParamsItem := range r.OutputWebhook.OauthParams {
			var name1 string
			name1 = oauthParamsItem.Name.ValueString()

			var value1 string
			value1 = oauthParamsItem.Value.ValueString()

			oauthParams = append(oauthParams, shared.OutputWebhookOauthParams{
				Name:  name1,
				Value: value1,
			})
		}
		oauthHeaders := make([]shared.OutputWebhookOauthHeaders, 0, len(r.OutputWebhook.OauthHeaders))
		for _, oauthHeadersItem := range r.OutputWebhook.OauthHeaders {
			var name2 string
			name2 = oauthHeadersItem.Name.ValueString()

			var value2 string
			value2 = oauthHeadersItem.Value.ValueString()

			oauthHeaders = append(oauthHeaders, shared.OutputWebhookOauthHeaders{
				Name:  name2,
				Value: value2,
			})
		}
		url := new(string)
		if !r.OutputWebhook.URL.IsUnknown() && !r.OutputWebhook.URL.IsNull() {
			*url = r.OutputWebhook.URL.ValueString()
		} else {
			url = nil
		}
		excludeSelf := new(bool)
		if !r.OutputWebhook.ExcludeSelf.IsUnknown() && !r.OutputWebhook.ExcludeSelf.IsNull() {
			*excludeSelf = r.OutputWebhook.ExcludeSelf.ValueBool()
		} else {
			excludeSelf = nil
		}
		urls := make([]shared.Urls, 0, len(r.OutputWebhook.Urls))
		for _, urlsItem := range r.OutputWebhook.Urls {
			var url1 string
			url1 = urlsItem.URL.ValueString()

			weight := new(float64)
			if !urlsItem.Weight.IsUnknown() && !urlsItem.Weight.IsNull() {
				*weight = urlsItem.Weight.ValueFloat64()
			} else {
				weight = nil
			}
			urls = append(urls, shared.Urls{
				URL:    url1,
				Weight: weight,
			})
		}
		dnsResolvePeriodSec := new(float64)
		if !r.OutputWebhook.DNSResolvePeriodSec.IsUnknown() && !r.OutputWebhook.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec = r.OutputWebhook.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec = nil
		}
		loadBalanceStatsPeriodSec := new(float64)
		if !r.OutputWebhook.LoadBalanceStatsPeriodSec.IsUnknown() && !r.OutputWebhook.LoadBalanceStatsPeriodSec.IsNull() {
			*loadBalanceStatsPeriodSec = r.OutputWebhook.LoadBalanceStatsPeriodSec.ValueFloat64()
		} else {
			loadBalanceStatsPeriodSec = nil
		}
		outputWebhook = &shared.OutputWebhook{
			ID:                            id1,
			Type:                          typeVar1,
			Pipeline:                      pipeline1,
			SystemFields:                  systemFields1,
			Environment:                   environment1,
			Streamtags:                    streamtags1,
			Method:                        method,
			Format:                        format,
			KeepAlive:                     keepAlive,
			Concurrency:                   concurrency,
			MaxPayloadSizeKB:              maxPayloadSizeKB,
			MaxPayloadEvents:              maxPayloadEvents,
			Compress:                      compress,
			RejectUnauthorized:            rejectUnauthorized,
			TimeoutSec:                    timeoutSec,
			FlushPeriodSec:                flushPeriodSec,
			ExtraHTTPHeaders:              extraHTTPHeaders,
			UseRoundRobinDNS:              useRoundRobinDNS,
			FailedRequestLoggingMode:      failedRequestLoggingMode,
			SafeHeaders:                   safeHeaders,
			ResponseRetrySettings:         responseRetrySettings,
			TimeoutRetrySettings:          timeoutRetrySettings,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader,
			OnBackpressure:                onBackpressure,
			AuthType:                      authType,
			TLS:                           tls,
			TotalMemoryLimitKB:            totalMemoryLimitKB,
			LoadBalanced:                  loadBalanced,
			Description:                   description,
			CustomSourceExpression:        customSourceExpression,
			CustomDropWhenNull:            customDropWhenNull,
			CustomEventDelimiter:          customEventDelimiter,
			CustomContentType:             customContentType,
			CustomPayloadExpression:       customPayloadExpression,
			AdvancedContentType:           advancedContentType,
			FormatEventCode:               formatEventCode,
			FormatPayloadCode:             formatPayloadCode,
			PqMaxFileSize:                 pqMaxFileSize,
			PqMaxSize:                     pqMaxSize,
			PqPath:                        pqPath,
			PqCompress:                    pqCompress,
			PqOnBackpressure:              pqOnBackpressure,
			PqMode:                        pqMode,
			PqControls:                    pqControls,
			Username:                      username,
			Password:                      password,
			Token:                         token,
			CredentialsSecret:             credentialsSecret,
			TextSecret:                    textSecret,
			LoginURL:                      loginURL,
			SecretParamName:               secretParamName,
			Secret:                        secret,
			TokenAttributeName:            tokenAttributeName,
			AuthHeaderExpr:                authHeaderExpr,
			TokenTimeoutSecs:              tokenTimeoutSecs,
			OauthParams:                   oauthParams,
			OauthHeaders:                  oauthHeaders,
			URL:                           url,
			ExcludeSelf:                   excludeSelf,
			Urls:                          urls,
			DNSResolvePeriodSec:           dnsResolvePeriodSec,
			LoadBalanceStatsPeriodSec:     loadBalanceStatsPeriodSec,
		}
	}
	if outputWebhook != nil {
		out = shared.Output{
			OutputWebhook: outputWebhook,
		}
	}
	var outputSentinel *shared.OutputSentinel
	if r.OutputSentinel != nil {
		id2 := new(string)
		if !r.OutputSentinel.ID.IsUnknown() && !r.OutputSentinel.ID.IsNull() {
			*id2 = r.OutputSentinel.ID.ValueString()
		} else {
			id2 = nil
		}
		typeVar2 := new(shared.OutputSentinelType)
		if !r.OutputSentinel.Type.IsUnknown() && !r.OutputSentinel.Type.IsNull() {
			*typeVar2 = shared.OutputSentinelType(r.OutputSentinel.Type.ValueString())
		} else {
			typeVar2 = nil
		}
		pipeline2 := new(string)
		if !r.OutputSentinel.Pipeline.IsUnknown() && !r.OutputSentinel.Pipeline.IsNull() {
			*pipeline2 = r.OutputSentinel.Pipeline.ValueString()
		} else {
			pipeline2 = nil
		}
		systemFields2 := make([]string, 0, len(r.OutputSentinel.SystemFields))
		for _, systemFieldsItem2 := range r.OutputSentinel.SystemFields {
			systemFields2 = append(systemFields2, systemFieldsItem2.ValueString())
		}
		environment2 := new(string)
		if !r.OutputSentinel.Environment.IsUnknown() && !r.OutputSentinel.Environment.IsNull() {
			*environment2 = r.OutputSentinel.Environment.ValueString()
		} else {
			environment2 = nil
		}
		streamtags2 := make([]string, 0, len(r.OutputSentinel.Streamtags))
		for _, streamtagsItem2 := range r.OutputSentinel.Streamtags {
			streamtags2 = append(streamtags2, streamtagsItem2.ValueString())
		}
		keepAlive1 := new(bool)
		if !r.OutputSentinel.KeepAlive.IsUnknown() && !r.OutputSentinel.KeepAlive.IsNull() {
			*keepAlive1 = r.OutputSentinel.KeepAlive.ValueBool()
		} else {
			keepAlive1 = nil
		}
		concurrency1 := new(float64)
		if !r.OutputSentinel.Concurrency.IsUnknown() && !r.OutputSentinel.Concurrency.IsNull() {
			*concurrency1 = r.OutputSentinel.Concurrency.ValueFloat64()
		} else {
			concurrency1 = nil
		}
		maxPayloadSizeKb1 := new(float64)
		if !r.OutputSentinel.MaxPayloadSizeKB.IsUnknown() && !r.OutputSentinel.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb1 = r.OutputSentinel.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb1 = nil
		}
		maxPayloadEvents1 := new(float64)
		if !r.OutputSentinel.MaxPayloadEvents.IsUnknown() && !r.OutputSentinel.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents1 = r.OutputSentinel.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents1 = nil
		}
		compress1 := new(bool)
		if !r.OutputSentinel.Compress.IsUnknown() && !r.OutputSentinel.Compress.IsNull() {
			*compress1 = r.OutputSentinel.Compress.ValueBool()
		} else {
			compress1 = nil
		}
		rejectUnauthorized1 := new(bool)
		if !r.OutputSentinel.RejectUnauthorized.IsUnknown() && !r.OutputSentinel.RejectUnauthorized.IsNull() {
			*rejectUnauthorized1 = r.OutputSentinel.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized1 = nil
		}
		timeoutSec1 := new(float64)
		if !r.OutputSentinel.TimeoutSec.IsUnknown() && !r.OutputSentinel.TimeoutSec.IsNull() {
			*timeoutSec1 = r.OutputSentinel.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec1 = nil
		}
		flushPeriodSec1 := new(float64)
		if !r.OutputSentinel.FlushPeriodSec.IsUnknown() && !r.OutputSentinel.FlushPeriodSec.IsNull() {
			*flushPeriodSec1 = r.OutputSentinel.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec1 = nil
		}
		extraHTTPHeaders1 := make([]shared.OutputSentinelExtraHTTPHeaders, 0, len(r.OutputSentinel.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem1 := range r.OutputSentinel.ExtraHTTPHeaders {
			name3 := new(string)
			if !extraHTTPHeadersItem1.Name.IsUnknown() && !extraHTTPHeadersItem1.Name.IsNull() {
				*name3 = extraHTTPHeadersItem1.Name.ValueString()
			} else {
				name3 = nil
			}
			var value3 string
			value3 = extraHTTPHeadersItem1.Value.ValueString()

			extraHTTPHeaders1 = append(extraHTTPHeaders1, shared.OutputSentinelExtraHTTPHeaders{
				Name:  name3,
				Value: value3,
			})
		}
		useRoundRobinDns1 := new(bool)
		if !r.OutputSentinel.UseRoundRobinDNS.IsUnknown() && !r.OutputSentinel.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns1 = r.OutputSentinel.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns1 = nil
		}
		failedRequestLoggingMode1 := new(shared.OutputSentinelFailedRequestLoggingMode)
		if !r.OutputSentinel.FailedRequestLoggingMode.IsUnknown() && !r.OutputSentinel.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode1 = shared.OutputSentinelFailedRequestLoggingMode(r.OutputSentinel.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode1 = nil
		}
		safeHeaders1 := make([]string, 0, len(r.OutputSentinel.SafeHeaders))
		for _, safeHeadersItem1 := range r.OutputSentinel.SafeHeaders {
			safeHeaders1 = append(safeHeaders1, safeHeadersItem1.ValueString())
		}
		responseRetrySettings1 := make([]shared.OutputSentinelResponseRetrySettings, 0, len(r.OutputSentinel.ResponseRetrySettings))
		for _, responseRetrySettingsItem1 := range r.OutputSentinel.ResponseRetrySettings {
			var httpStatus1 float64
			httpStatus1 = responseRetrySettingsItem1.HTTPStatus.ValueFloat64()

			initialBackoff2 := new(float64)
			if !responseRetrySettingsItem1.InitialBackoff.IsUnknown() && !responseRetrySettingsItem1.InitialBackoff.IsNull() {
				*initialBackoff2 = responseRetrySettingsItem1.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff2 = nil
			}
			backoffRate2 := new(float64)
			if !responseRetrySettingsItem1.BackoffRate.IsUnknown() && !responseRetrySettingsItem1.BackoffRate.IsNull() {
				*backoffRate2 = responseRetrySettingsItem1.BackoffRate.ValueFloat64()
			} else {
				backoffRate2 = nil
			}
			maxBackoff2 := new(float64)
			if !responseRetrySettingsItem1.MaxBackoff.IsUnknown() && !responseRetrySettingsItem1.MaxBackoff.IsNull() {
				*maxBackoff2 = responseRetrySettingsItem1.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff2 = nil
			}
			responseRetrySettings1 = append(responseRetrySettings1, shared.OutputSentinelResponseRetrySettings{
				HTTPStatus:     httpStatus1,
				InitialBackoff: initialBackoff2,
				BackoffRate:    backoffRate2,
				MaxBackoff:     maxBackoff2,
			})
		}
		var timeoutRetrySettings1 *shared.OutputSentinelTimeoutRetrySettings
		if r.OutputSentinel.TimeoutRetrySettings != nil {
			timeoutRetry1 := new(bool)
			if !r.OutputSentinel.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputSentinel.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry1 = r.OutputSentinel.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry1 = nil
			}
			initialBackoff3 := new(float64)
			if !r.OutputSentinel.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputSentinel.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff3 = r.OutputSentinel.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff3 = nil
			}
			backoffRate3 := new(float64)
			if !r.OutputSentinel.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputSentinel.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate3 = r.OutputSentinel.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate3 = nil
			}
			maxBackoff3 := new(float64)
			if !r.OutputSentinel.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputSentinel.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff3 = r.OutputSentinel.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff3 = nil
			}
			timeoutRetrySettings1 = &shared.OutputSentinelTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry1,
				InitialBackoff: initialBackoff3,
				BackoffRate:    backoffRate3,
				MaxBackoff:     maxBackoff3,
			}
		}
		responseHonorRetryAfterHeader1 := new(bool)
		if !r.OutputSentinel.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputSentinel.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader1 = r.OutputSentinel.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader1 = nil
		}
		onBackpressure1 := new(shared.OutputSentinelBackpressureBehavior)
		if !r.OutputSentinel.OnBackpressure.IsUnknown() && !r.OutputSentinel.OnBackpressure.IsNull() {
			*onBackpressure1 = shared.OutputSentinelBackpressureBehavior(r.OutputSentinel.OnBackpressure.ValueString())
		} else {
			onBackpressure1 = nil
		}
		authType1 := new(shared.AuthType)
		if !r.OutputSentinel.AuthType.IsUnknown() && !r.OutputSentinel.AuthType.IsNull() {
			*authType1 = shared.AuthType(r.OutputSentinel.AuthType.ValueString())
		} else {
			authType1 = nil
		}
		var loginUrl1 string
		loginUrl1 = r.OutputSentinel.LoginURL.ValueString()

		var secret1 string
		secret1 = r.OutputSentinel.Secret.ValueString()

		var clientID string
		clientID = r.OutputSentinel.ClientID.ValueString()

		scope := new(string)
		if !r.OutputSentinel.Scope.IsUnknown() && !r.OutputSentinel.Scope.IsNull() {
			*scope = r.OutputSentinel.Scope.ValueString()
		} else {
			scope = nil
		}
		endpointURLConfiguration := new(shared.EndpointConfiguration)
		if !r.OutputSentinel.EndpointURLConfiguration.IsUnknown() && !r.OutputSentinel.EndpointURLConfiguration.IsNull() {
			*endpointURLConfiguration = shared.EndpointConfiguration(r.OutputSentinel.EndpointURLConfiguration.ValueString())
		} else {
			endpointURLConfiguration = nil
		}
		totalMemoryLimitKb1 := new(float64)
		if !r.OutputSentinel.TotalMemoryLimitKB.IsUnknown() && !r.OutputSentinel.TotalMemoryLimitKB.IsNull() {
			*totalMemoryLimitKb1 = r.OutputSentinel.TotalMemoryLimitKB.ValueFloat64()
		} else {
			totalMemoryLimitKb1 = nil
		}
		description1 := new(string)
		if !r.OutputSentinel.Description.IsUnknown() && !r.OutputSentinel.Description.IsNull() {
			*description1 = r.OutputSentinel.Description.ValueString()
		} else {
			description1 = nil
		}
		format1 := new(shared.OutputSentinelFormat)
		if !r.OutputSentinel.Format.IsUnknown() && !r.OutputSentinel.Format.IsNull() {
			*format1 = shared.OutputSentinelFormat(r.OutputSentinel.Format.ValueString())
		} else {
			format1 = nil
		}
		customSourceExpression1 := new(string)
		if !r.OutputSentinel.CustomSourceExpression.IsUnknown() && !r.OutputSentinel.CustomSourceExpression.IsNull() {
			*customSourceExpression1 = r.OutputSentinel.CustomSourceExpression.ValueString()
		} else {
			customSourceExpression1 = nil
		}
		customDropWhenNull1 := new(bool)
		if !r.OutputSentinel.CustomDropWhenNull.IsUnknown() && !r.OutputSentinel.CustomDropWhenNull.IsNull() {
			*customDropWhenNull1 = r.OutputSentinel.CustomDropWhenNull.ValueBool()
		} else {
			customDropWhenNull1 = nil
		}
		customEventDelimiter1 := new(string)
		if !r.OutputSentinel.CustomEventDelimiter.IsUnknown() && !r.OutputSentinel.CustomEventDelimiter.IsNull() {
			*customEventDelimiter1 = r.OutputSentinel.CustomEventDelimiter.ValueString()
		} else {
			customEventDelimiter1 = nil
		}
		customContentType1 := new(string)
		if !r.OutputSentinel.CustomContentType.IsUnknown() && !r.OutputSentinel.CustomContentType.IsNull() {
			*customContentType1 = r.OutputSentinel.CustomContentType.ValueString()
		} else {
			customContentType1 = nil
		}
		customPayloadExpression1 := new(string)
		if !r.OutputSentinel.CustomPayloadExpression.IsUnknown() && !r.OutputSentinel.CustomPayloadExpression.IsNull() {
			*customPayloadExpression1 = r.OutputSentinel.CustomPayloadExpression.ValueString()
		} else {
			customPayloadExpression1 = nil
		}
		advancedContentType1 := new(string)
		if !r.OutputSentinel.AdvancedContentType.IsUnknown() && !r.OutputSentinel.AdvancedContentType.IsNull() {
			*advancedContentType1 = r.OutputSentinel.AdvancedContentType.ValueString()
		} else {
			advancedContentType1 = nil
		}
		formatEventCode1 := new(string)
		if !r.OutputSentinel.FormatEventCode.IsUnknown() && !r.OutputSentinel.FormatEventCode.IsNull() {
			*formatEventCode1 = r.OutputSentinel.FormatEventCode.ValueString()
		} else {
			formatEventCode1 = nil
		}
		formatPayloadCode1 := new(string)
		if !r.OutputSentinel.FormatPayloadCode.IsUnknown() && !r.OutputSentinel.FormatPayloadCode.IsNull() {
			*formatPayloadCode1 = r.OutputSentinel.FormatPayloadCode.ValueString()
		} else {
			formatPayloadCode1 = nil
		}
		pqMaxFileSize1 := new(string)
		if !r.OutputSentinel.PqMaxFileSize.IsUnknown() && !r.OutputSentinel.PqMaxFileSize.IsNull() {
			*pqMaxFileSize1 = r.OutputSentinel.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize1 = nil
		}
		pqMaxSize1 := new(string)
		if !r.OutputSentinel.PqMaxSize.IsUnknown() && !r.OutputSentinel.PqMaxSize.IsNull() {
			*pqMaxSize1 = r.OutputSentinel.PqMaxSize.ValueString()
		} else {
			pqMaxSize1 = nil
		}
		pqPath1 := new(string)
		if !r.OutputSentinel.PqPath.IsUnknown() && !r.OutputSentinel.PqPath.IsNull() {
			*pqPath1 = r.OutputSentinel.PqPath.ValueString()
		} else {
			pqPath1 = nil
		}
		pqCompress1 := new(shared.OutputSentinelCompression)
		if !r.OutputSentinel.PqCompress.IsUnknown() && !r.OutputSentinel.PqCompress.IsNull() {
			*pqCompress1 = shared.OutputSentinelCompression(r.OutputSentinel.PqCompress.ValueString())
		} else {
			pqCompress1 = nil
		}
		pqOnBackpressure1 := new(shared.OutputSentinelQueueFullBehavior)
		if !r.OutputSentinel.PqOnBackpressure.IsUnknown() && !r.OutputSentinel.PqOnBackpressure.IsNull() {
			*pqOnBackpressure1 = shared.OutputSentinelQueueFullBehavior(r.OutputSentinel.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure1 = nil
		}
		pqMode1 := new(shared.OutputSentinelMode)
		if !r.OutputSentinel.PqMode.IsUnknown() && !r.OutputSentinel.PqMode.IsNull() {
			*pqMode1 = shared.OutputSentinelMode(r.OutputSentinel.PqMode.ValueString())
		} else {
			pqMode1 = nil
		}
		var pqControls1 *shared.OutputSentinelPqControls
		if r.OutputSentinel.PqControls != nil {
			pqControls1 = &shared.OutputSentinelPqControls{}
		}
		url2 := new(string)
		if !r.OutputSentinel.URL.IsUnknown() && !r.OutputSentinel.URL.IsNull() {
			*url2 = r.OutputSentinel.URL.ValueString()
		} else {
			url2 = nil
		}
		dcrID := new(string)
		if !r.OutputSentinel.DcrID.IsUnknown() && !r.OutputSentinel.DcrID.IsNull() {
			*dcrID = r.OutputSentinel.DcrID.ValueString()
		} else {
			dcrID = nil
		}
		dceEndpoint := new(string)
		if !r.OutputSentinel.DceEndpoint.IsUnknown() && !r.OutputSentinel.DceEndpoint.IsNull() {
			*dceEndpoint = r.OutputSentinel.DceEndpoint.ValueString()
		} else {
			dceEndpoint = nil
		}
		streamName := new(string)
		if !r.OutputSentinel.StreamName.IsUnknown() && !r.OutputSentinel.StreamName.IsNull() {
			*streamName = r.OutputSentinel.StreamName.ValueString()
		} else {
			streamName = nil
		}
		outputSentinel = &shared.OutputSentinel{
			ID:                            id2,
			Type:                          typeVar2,
			Pipeline:                      pipeline2,
			SystemFields:                  systemFields2,
			Environment:                   environment2,
			Streamtags:                    streamtags2,
			KeepAlive:                     keepAlive1,
			Concurrency:                   concurrency1,
			MaxPayloadSizeKB:              maxPayloadSizeKb1,
			MaxPayloadEvents:              maxPayloadEvents1,
			Compress:                      compress1,
			RejectUnauthorized:            rejectUnauthorized1,
			TimeoutSec:                    timeoutSec1,
			FlushPeriodSec:                flushPeriodSec1,
			ExtraHTTPHeaders:              extraHTTPHeaders1,
			UseRoundRobinDNS:              useRoundRobinDns1,
			FailedRequestLoggingMode:      failedRequestLoggingMode1,
			SafeHeaders:                   safeHeaders1,
			ResponseRetrySettings:         responseRetrySettings1,
			TimeoutRetrySettings:          timeoutRetrySettings1,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader1,
			OnBackpressure:                onBackpressure1,
			AuthType:                      authType1,
			LoginURL:                      loginUrl1,
			Secret:                        secret1,
			ClientID:                      clientID,
			Scope:                         scope,
			EndpointURLConfiguration:      endpointURLConfiguration,
			TotalMemoryLimitKB:            totalMemoryLimitKb1,
			Description:                   description1,
			Format:                        format1,
			CustomSourceExpression:        customSourceExpression1,
			CustomDropWhenNull:            customDropWhenNull1,
			CustomEventDelimiter:          customEventDelimiter1,
			CustomContentType:             customContentType1,
			CustomPayloadExpression:       customPayloadExpression1,
			AdvancedContentType:           advancedContentType1,
			FormatEventCode:               formatEventCode1,
			FormatPayloadCode:             formatPayloadCode1,
			PqMaxFileSize:                 pqMaxFileSize1,
			PqMaxSize:                     pqMaxSize1,
			PqPath:                        pqPath1,
			PqCompress:                    pqCompress1,
			PqOnBackpressure:              pqOnBackpressure1,
			PqMode:                        pqMode1,
			PqControls:                    pqControls1,
			URL:                           url2,
			DcrID:                         dcrID,
			DceEndpoint:                   dceEndpoint,
			StreamName:                    streamName,
		}
	}
	if outputSentinel != nil {
		out = shared.Output{
			OutputSentinel: outputSentinel,
		}
	}
	var outputDevnull *shared.OutputDevnull
	if r.OutputDevnull != nil {
		var id3 string
		id3 = r.OutputDevnull.ID.ValueString()

		typeVar3 := shared.OutputDevnullType(r.OutputDevnull.Type.ValueString())
		pipeline3 := new(string)
		if !r.OutputDevnull.Pipeline.IsUnknown() && !r.OutputDevnull.Pipeline.IsNull() {
			*pipeline3 = r.OutputDevnull.Pipeline.ValueString()
		} else {
			pipeline3 = nil
		}
		systemFields3 := make([]string, 0, len(r.OutputDevnull.SystemFields))
		for _, systemFieldsItem3 := range r.OutputDevnull.SystemFields {
			systemFields3 = append(systemFields3, systemFieldsItem3.ValueString())
		}
		environment3 := new(string)
		if !r.OutputDevnull.Environment.IsUnknown() && !r.OutputDevnull.Environment.IsNull() {
			*environment3 = r.OutputDevnull.Environment.ValueString()
		} else {
			environment3 = nil
		}
		streamtags3 := make([]string, 0, len(r.OutputDevnull.Streamtags))
		for _, streamtagsItem3 := range r.OutputDevnull.Streamtags {
			streamtags3 = append(streamtags3, streamtagsItem3.ValueString())
		}
		outputDevnull = &shared.OutputDevnull{
			ID:           id3,
			Type:         typeVar3,
			Pipeline:     pipeline3,
			SystemFields: systemFields3,
			Environment:  environment3,
			Streamtags:   streamtags3,
		}
	}
	if outputDevnull != nil {
		out = shared.Output{
			OutputDevnull: outputDevnull,
		}
	}
	var outputSyslog *shared.OutputSyslog
	if r.OutputSyslog != nil {
		var id4 string
		id4 = r.OutputSyslog.ID.ValueString()

		typeVar4 := shared.OutputSyslogType(r.OutputSyslog.Type.ValueString())
		pipeline4 := new(string)
		if !r.OutputSyslog.Pipeline.IsUnknown() && !r.OutputSyslog.Pipeline.IsNull() {
			*pipeline4 = r.OutputSyslog.Pipeline.ValueString()
		} else {
			pipeline4 = nil
		}
		systemFields4 := make([]string, 0, len(r.OutputSyslog.SystemFields))
		for _, systemFieldsItem4 := range r.OutputSyslog.SystemFields {
			systemFields4 = append(systemFields4, systemFieldsItem4.ValueString())
		}
		environment4 := new(string)
		if !r.OutputSyslog.Environment.IsUnknown() && !r.OutputSyslog.Environment.IsNull() {
			*environment4 = r.OutputSyslog.Environment.ValueString()
		} else {
			environment4 = nil
		}
		streamtags4 := make([]string, 0, len(r.OutputSyslog.Streamtags))
		for _, streamtagsItem4 := range r.OutputSyslog.Streamtags {
			streamtags4 = append(streamtags4, streamtagsItem4.ValueString())
		}
		protocol := new(shared.OutputSyslogProtocol)
		if !r.OutputSyslog.Protocol.IsUnknown() && !r.OutputSyslog.Protocol.IsNull() {
			*protocol = shared.OutputSyslogProtocol(r.OutputSyslog.Protocol.ValueString())
		} else {
			protocol = nil
		}
		facility := new(shared.Facility)
		if !r.OutputSyslog.Facility.IsUnknown() && !r.OutputSyslog.Facility.IsNull() {
			*facility = shared.Facility(r.OutputSyslog.Facility.ValueInt64())
		} else {
			facility = nil
		}
		severity := new(shared.OutputSyslogSeverity)
		if !r.OutputSyslog.Severity.IsUnknown() && !r.OutputSyslog.Severity.IsNull() {
			*severity = shared.OutputSyslogSeverity(r.OutputSyslog.Severity.ValueInt64())
		} else {
			severity = nil
		}
		appName := new(string)
		if !r.OutputSyslog.AppName.IsUnknown() && !r.OutputSyslog.AppName.IsNull() {
			*appName = r.OutputSyslog.AppName.ValueString()
		} else {
			appName = nil
		}
		messageFormat := new(shared.MessageFormat)
		if !r.OutputSyslog.MessageFormat.IsUnknown() && !r.OutputSyslog.MessageFormat.IsNull() {
			*messageFormat = shared.MessageFormat(r.OutputSyslog.MessageFormat.ValueString())
		} else {
			messageFormat = nil
		}
		timestampFormat := new(shared.TimestampFormat)
		if !r.OutputSyslog.TimestampFormat.IsUnknown() && !r.OutputSyslog.TimestampFormat.IsNull() {
			*timestampFormat = shared.TimestampFormat(r.OutputSyslog.TimestampFormat.ValueString())
		} else {
			timestampFormat = nil
		}
		throttleRatePerSec := new(string)
		if !r.OutputSyslog.ThrottleRatePerSec.IsUnknown() && !r.OutputSyslog.ThrottleRatePerSec.IsNull() {
			*throttleRatePerSec = r.OutputSyslog.ThrottleRatePerSec.ValueString()
		} else {
			throttleRatePerSec = nil
		}
		octetCountFraming := new(bool)
		if !r.OutputSyslog.OctetCountFraming.IsUnknown() && !r.OutputSyslog.OctetCountFraming.IsNull() {
			*octetCountFraming = r.OutputSyslog.OctetCountFraming.ValueBool()
		} else {
			octetCountFraming = nil
		}
		logFailedRequests := new(bool)
		if !r.OutputSyslog.LogFailedRequests.IsUnknown() && !r.OutputSyslog.LogFailedRequests.IsNull() {
			*logFailedRequests = r.OutputSyslog.LogFailedRequests.ValueBool()
		} else {
			logFailedRequests = nil
		}
		description2 := new(string)
		if !r.OutputSyslog.Description.IsUnknown() && !r.OutputSyslog.Description.IsNull() {
			*description2 = r.OutputSyslog.Description.ValueString()
		} else {
			description2 = nil
		}
		loadBalanced1 := new(bool)
		if !r.OutputSyslog.LoadBalanced.IsUnknown() && !r.OutputSyslog.LoadBalanced.IsNull() {
			*loadBalanced1 = r.OutputSyslog.LoadBalanced.ValueBool()
		} else {
			loadBalanced1 = nil
		}
		connectionTimeout := new(float64)
		if !r.OutputSyslog.ConnectionTimeout.IsUnknown() && !r.OutputSyslog.ConnectionTimeout.IsNull() {
			*connectionTimeout = r.OutputSyslog.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout = nil
		}
		writeTimeout := new(float64)
		if !r.OutputSyslog.WriteTimeout.IsUnknown() && !r.OutputSyslog.WriteTimeout.IsNull() {
			*writeTimeout = r.OutputSyslog.WriteTimeout.ValueFloat64()
		} else {
			writeTimeout = nil
		}
		var tls1 *shared.OutputSyslogTLSSettingsClientSide
		if r.OutputSyslog.TLS != nil {
			disabled1 := new(bool)
			if !r.OutputSyslog.TLS.Disabled.IsUnknown() && !r.OutputSyslog.TLS.Disabled.IsNull() {
				*disabled1 = r.OutputSyslog.TLS.Disabled.ValueBool()
			} else {
				disabled1 = nil
			}
			rejectUnauthorized2 := new(bool)
			if !r.OutputSyslog.TLS.RejectUnauthorized.IsUnknown() && !r.OutputSyslog.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized2 = r.OutputSyslog.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized2 = nil
			}
			servername1 := new(string)
			if !r.OutputSyslog.TLS.Servername.IsUnknown() && !r.OutputSyslog.TLS.Servername.IsNull() {
				*servername1 = r.OutputSyslog.TLS.Servername.ValueString()
			} else {
				servername1 = nil
			}
			certificateName1 := new(string)
			if !r.OutputSyslog.TLS.CertificateName.IsUnknown() && !r.OutputSyslog.TLS.CertificateName.IsNull() {
				*certificateName1 = r.OutputSyslog.TLS.CertificateName.ValueString()
			} else {
				certificateName1 = nil
			}
			caPath1 := new(string)
			if !r.OutputSyslog.TLS.CaPath.IsUnknown() && !r.OutputSyslog.TLS.CaPath.IsNull() {
				*caPath1 = r.OutputSyslog.TLS.CaPath.ValueString()
			} else {
				caPath1 = nil
			}
			privKeyPath1 := new(string)
			if !r.OutputSyslog.TLS.PrivKeyPath.IsUnknown() && !r.OutputSyslog.TLS.PrivKeyPath.IsNull() {
				*privKeyPath1 = r.OutputSyslog.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath1 = nil
			}
			certPath1 := new(string)
			if !r.OutputSyslog.TLS.CertPath.IsUnknown() && !r.OutputSyslog.TLS.CertPath.IsNull() {
				*certPath1 = r.OutputSyslog.TLS.CertPath.ValueString()
			} else {
				certPath1 = nil
			}
			passphrase1 := new(string)
			if !r.OutputSyslog.TLS.Passphrase.IsUnknown() && !r.OutputSyslog.TLS.Passphrase.IsNull() {
				*passphrase1 = r.OutputSyslog.TLS.Passphrase.ValueString()
			} else {
				passphrase1 = nil
			}
			minVersion1 := new(shared.OutputSyslogMinimumTLSVersion)
			if !r.OutputSyslog.TLS.MinVersion.IsUnknown() && !r.OutputSyslog.TLS.MinVersion.IsNull() {
				*minVersion1 = shared.OutputSyslogMinimumTLSVersion(r.OutputSyslog.TLS.MinVersion.ValueString())
			} else {
				minVersion1 = nil
			}
			maxVersion1 := new(shared.OutputSyslogMaximumTLSVersion)
			if !r.OutputSyslog.TLS.MaxVersion.IsUnknown() && !r.OutputSyslog.TLS.MaxVersion.IsNull() {
				*maxVersion1 = shared.OutputSyslogMaximumTLSVersion(r.OutputSyslog.TLS.MaxVersion.ValueString())
			} else {
				maxVersion1 = nil
			}
			tls1 = &shared.OutputSyslogTLSSettingsClientSide{
				Disabled:           disabled1,
				RejectUnauthorized: rejectUnauthorized2,
				Servername:         servername1,
				CertificateName:    certificateName1,
				CaPath:             caPath1,
				PrivKeyPath:        privKeyPath1,
				CertPath:           certPath1,
				Passphrase:         passphrase1,
				MinVersion:         minVersion1,
				MaxVersion:         maxVersion1,
			}
		}
		onBackpressure2 := new(shared.OutputSyslogBackpressureBehavior)
		if !r.OutputSyslog.OnBackpressure.IsUnknown() && !r.OutputSyslog.OnBackpressure.IsNull() {
			*onBackpressure2 = shared.OutputSyslogBackpressureBehavior(r.OutputSyslog.OnBackpressure.ValueString())
		} else {
			onBackpressure2 = nil
		}
		host := new(string)
		if !r.OutputSyslog.Host.IsUnknown() && !r.OutputSyslog.Host.IsNull() {
			*host = r.OutputSyslog.Host.ValueString()
		} else {
			host = nil
		}
		port := new(float64)
		if !r.OutputSyslog.Port.IsUnknown() && !r.OutputSyslog.Port.IsNull() {
			*port = r.OutputSyslog.Port.ValueFloat64()
		} else {
			port = nil
		}
		maxRecordSize := new(float64)
		if !r.OutputSyslog.MaxRecordSize.IsUnknown() && !r.OutputSyslog.MaxRecordSize.IsNull() {
			*maxRecordSize = r.OutputSyslog.MaxRecordSize.ValueFloat64()
		} else {
			maxRecordSize = nil
		}
		udpDNSResolvePeriodSec := new(float64)
		if !r.OutputSyslog.UDPDNSResolvePeriodSec.IsUnknown() && !r.OutputSyslog.UDPDNSResolvePeriodSec.IsNull() {
			*udpDNSResolvePeriodSec = r.OutputSyslog.UDPDNSResolvePeriodSec.ValueFloat64()
		} else {
			udpDNSResolvePeriodSec = nil
		}
		pqMaxFileSize2 := new(string)
		if !r.OutputSyslog.PqMaxFileSize.IsUnknown() && !r.OutputSyslog.PqMaxFileSize.IsNull() {
			*pqMaxFileSize2 = r.OutputSyslog.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize2 = nil
		}
		pqMaxSize2 := new(string)
		if !r.OutputSyslog.PqMaxSize.IsUnknown() && !r.OutputSyslog.PqMaxSize.IsNull() {
			*pqMaxSize2 = r.OutputSyslog.PqMaxSize.ValueString()
		} else {
			pqMaxSize2 = nil
		}
		pqPath2 := new(string)
		if !r.OutputSyslog.PqPath.IsUnknown() && !r.OutputSyslog.PqPath.IsNull() {
			*pqPath2 = r.OutputSyslog.PqPath.ValueString()
		} else {
			pqPath2 = nil
		}
		pqCompress2 := new(shared.OutputSyslogCompression)
		if !r.OutputSyslog.PqCompress.IsUnknown() && !r.OutputSyslog.PqCompress.IsNull() {
			*pqCompress2 = shared.OutputSyslogCompression(r.OutputSyslog.PqCompress.ValueString())
		} else {
			pqCompress2 = nil
		}
		pqOnBackpressure2 := new(shared.OutputSyslogQueueFullBehavior)
		if !r.OutputSyslog.PqOnBackpressure.IsUnknown() && !r.OutputSyslog.PqOnBackpressure.IsNull() {
			*pqOnBackpressure2 = shared.OutputSyslogQueueFullBehavior(r.OutputSyslog.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure2 = nil
		}
		pqMode2 := new(shared.OutputSyslogMode)
		if !r.OutputSyslog.PqMode.IsUnknown() && !r.OutputSyslog.PqMode.IsNull() {
			*pqMode2 = shared.OutputSyslogMode(r.OutputSyslog.PqMode.ValueString())
		} else {
			pqMode2 = nil
		}
		var pqControls2 *shared.OutputSyslogPqControls
		if r.OutputSyslog.PqControls != nil {
			pqControls2 = &shared.OutputSyslogPqControls{}
		}
		outputSyslog = &shared.OutputSyslog{
			ID:                     id4,
			Type:                   typeVar4,
			Pipeline:               pipeline4,
			SystemFields:           systemFields4,
			Environment:            environment4,
			Streamtags:             streamtags4,
			Protocol:               protocol,
			Facility:               facility,
			Severity:               severity,
			AppName:                appName,
			MessageFormat:          messageFormat,
			TimestampFormat:        timestampFormat,
			ThrottleRatePerSec:     throttleRatePerSec,
			OctetCountFraming:      octetCountFraming,
			LogFailedRequests:      logFailedRequests,
			Description:            description2,
			LoadBalanced:           loadBalanced1,
			ConnectionTimeout:      connectionTimeout,
			WriteTimeout:           writeTimeout,
			TLS:                    tls1,
			OnBackpressure:         onBackpressure2,
			Host:                   host,
			Port:                   port,
			MaxRecordSize:          maxRecordSize,
			UDPDNSResolvePeriodSec: udpDNSResolvePeriodSec,
			PqMaxFileSize:          pqMaxFileSize2,
			PqMaxSize:              pqMaxSize2,
			PqPath:                 pqPath2,
			PqCompress:             pqCompress2,
			PqOnBackpressure:       pqOnBackpressure2,
			PqMode:                 pqMode2,
			PqControls:             pqControls2,
		}
	}
	if outputSyslog != nil {
		out = shared.Output{
			OutputSyslog: outputSyslog,
		}
	}
	var outputSplunk *shared.OutputSplunk
	if r.OutputSplunk != nil {
		id5 := new(string)
		if !r.OutputSplunk.ID.IsUnknown() && !r.OutputSplunk.ID.IsNull() {
			*id5 = r.OutputSplunk.ID.ValueString()
		} else {
			id5 = nil
		}
		typeVar5 := new(shared.OutputSplunkType)
		if !r.OutputSplunk.Type.IsUnknown() && !r.OutputSplunk.Type.IsNull() {
			*typeVar5 = shared.OutputSplunkType(r.OutputSplunk.Type.ValueString())
		} else {
			typeVar5 = nil
		}
		pipeline5 := new(string)
		if !r.OutputSplunk.Pipeline.IsUnknown() && !r.OutputSplunk.Pipeline.IsNull() {
			*pipeline5 = r.OutputSplunk.Pipeline.ValueString()
		} else {
			pipeline5 = nil
		}
		systemFields5 := make([]string, 0, len(r.OutputSplunk.SystemFields))
		for _, systemFieldsItem5 := range r.OutputSplunk.SystemFields {
			systemFields5 = append(systemFields5, systemFieldsItem5.ValueString())
		}
		environment5 := new(string)
		if !r.OutputSplunk.Environment.IsUnknown() && !r.OutputSplunk.Environment.IsNull() {
			*environment5 = r.OutputSplunk.Environment.ValueString()
		} else {
			environment5 = nil
		}
		streamtags5 := make([]string, 0, len(r.OutputSplunk.Streamtags))
		for _, streamtagsItem5 := range r.OutputSplunk.Streamtags {
			streamtags5 = append(streamtags5, streamtagsItem5.ValueString())
		}
		var host1 string
		host1 = r.OutputSplunk.Host.ValueString()

		port1 := new(float64)
		if !r.OutputSplunk.Port.IsUnknown() && !r.OutputSplunk.Port.IsNull() {
			*port1 = r.OutputSplunk.Port.ValueFloat64()
		} else {
			port1 = nil
		}
		nestedFields := new(shared.NestedFieldSerialization)
		if !r.OutputSplunk.NestedFields.IsUnknown() && !r.OutputSplunk.NestedFields.IsNull() {
			*nestedFields = shared.NestedFieldSerialization(r.OutputSplunk.NestedFields.ValueString())
		} else {
			nestedFields = nil
		}
		throttleRatePerSec1 := new(string)
		if !r.OutputSplunk.ThrottleRatePerSec.IsUnknown() && !r.OutputSplunk.ThrottleRatePerSec.IsNull() {
			*throttleRatePerSec1 = r.OutputSplunk.ThrottleRatePerSec.ValueString()
		} else {
			throttleRatePerSec1 = nil
		}
		connectionTimeout1 := new(float64)
		if !r.OutputSplunk.ConnectionTimeout.IsUnknown() && !r.OutputSplunk.ConnectionTimeout.IsNull() {
			*connectionTimeout1 = r.OutputSplunk.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout1 = nil
		}
		writeTimeout1 := new(float64)
		if !r.OutputSplunk.WriteTimeout.IsUnknown() && !r.OutputSplunk.WriteTimeout.IsNull() {
			*writeTimeout1 = r.OutputSplunk.WriteTimeout.ValueFloat64()
		} else {
			writeTimeout1 = nil
		}
		var tls2 *shared.OutputSplunkTLSSettingsClientSide
		if r.OutputSplunk.TLS != nil {
			disabled2 := new(bool)
			if !r.OutputSplunk.TLS.Disabled.IsUnknown() && !r.OutputSplunk.TLS.Disabled.IsNull() {
				*disabled2 = r.OutputSplunk.TLS.Disabled.ValueBool()
			} else {
				disabled2 = nil
			}
			rejectUnauthorized3 := new(bool)
			if !r.OutputSplunk.TLS.RejectUnauthorized.IsUnknown() && !r.OutputSplunk.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized3 = r.OutputSplunk.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized3 = nil
			}
			servername2 := new(string)
			if !r.OutputSplunk.TLS.Servername.IsUnknown() && !r.OutputSplunk.TLS.Servername.IsNull() {
				*servername2 = r.OutputSplunk.TLS.Servername.ValueString()
			} else {
				servername2 = nil
			}
			certificateName2 := new(string)
			if !r.OutputSplunk.TLS.CertificateName.IsUnknown() && !r.OutputSplunk.TLS.CertificateName.IsNull() {
				*certificateName2 = r.OutputSplunk.TLS.CertificateName.ValueString()
			} else {
				certificateName2 = nil
			}
			caPath2 := new(string)
			if !r.OutputSplunk.TLS.CaPath.IsUnknown() && !r.OutputSplunk.TLS.CaPath.IsNull() {
				*caPath2 = r.OutputSplunk.TLS.CaPath.ValueString()
			} else {
				caPath2 = nil
			}
			privKeyPath2 := new(string)
			if !r.OutputSplunk.TLS.PrivKeyPath.IsUnknown() && !r.OutputSplunk.TLS.PrivKeyPath.IsNull() {
				*privKeyPath2 = r.OutputSplunk.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath2 = nil
			}
			certPath2 := new(string)
			if !r.OutputSplunk.TLS.CertPath.IsUnknown() && !r.OutputSplunk.TLS.CertPath.IsNull() {
				*certPath2 = r.OutputSplunk.TLS.CertPath.ValueString()
			} else {
				certPath2 = nil
			}
			passphrase2 := new(string)
			if !r.OutputSplunk.TLS.Passphrase.IsUnknown() && !r.OutputSplunk.TLS.Passphrase.IsNull() {
				*passphrase2 = r.OutputSplunk.TLS.Passphrase.ValueString()
			} else {
				passphrase2 = nil
			}
			minVersion2 := new(shared.OutputSplunkMinimumTLSVersion)
			if !r.OutputSplunk.TLS.MinVersion.IsUnknown() && !r.OutputSplunk.TLS.MinVersion.IsNull() {
				*minVersion2 = shared.OutputSplunkMinimumTLSVersion(r.OutputSplunk.TLS.MinVersion.ValueString())
			} else {
				minVersion2 = nil
			}
			maxVersion2 := new(shared.OutputSplunkMaximumTLSVersion)
			if !r.OutputSplunk.TLS.MaxVersion.IsUnknown() && !r.OutputSplunk.TLS.MaxVersion.IsNull() {
				*maxVersion2 = shared.OutputSplunkMaximumTLSVersion(r.OutputSplunk.TLS.MaxVersion.ValueString())
			} else {
				maxVersion2 = nil
			}
			tls2 = &shared.OutputSplunkTLSSettingsClientSide{
				Disabled:           disabled2,
				RejectUnauthorized: rejectUnauthorized3,
				Servername:         servername2,
				CertificateName:    certificateName2,
				CaPath:             caPath2,
				PrivKeyPath:        privKeyPath2,
				CertPath:           certPath2,
				Passphrase:         passphrase2,
				MinVersion:         minVersion2,
				MaxVersion:         maxVersion2,
			}
		}
		enableMultiMetrics := new(bool)
		if !r.OutputSplunk.EnableMultiMetrics.IsUnknown() && !r.OutputSplunk.EnableMultiMetrics.IsNull() {
			*enableMultiMetrics = r.OutputSplunk.EnableMultiMetrics.ValueBool()
		} else {
			enableMultiMetrics = nil
		}
		enableACK := new(bool)
		if !r.OutputSplunk.EnableACK.IsUnknown() && !r.OutputSplunk.EnableACK.IsNull() {
			*enableACK = r.OutputSplunk.EnableACK.ValueBool()
		} else {
			enableACK = nil
		}
		logFailedRequests1 := new(bool)
		if !r.OutputSplunk.LogFailedRequests.IsUnknown() && !r.OutputSplunk.LogFailedRequests.IsNull() {
			*logFailedRequests1 = r.OutputSplunk.LogFailedRequests.ValueBool()
		} else {
			logFailedRequests1 = nil
		}
		maxS2Sversion := new(shared.OutputSplunkMaxS2SVersion)
		if !r.OutputSplunk.MaxS2Sversion.IsUnknown() && !r.OutputSplunk.MaxS2Sversion.IsNull() {
			*maxS2Sversion = shared.OutputSplunkMaxS2SVersion(r.OutputSplunk.MaxS2Sversion.ValueString())
		} else {
			maxS2Sversion = nil
		}
		onBackpressure3 := new(shared.OutputSplunkBackpressureBehavior)
		if !r.OutputSplunk.OnBackpressure.IsUnknown() && !r.OutputSplunk.OnBackpressure.IsNull() {
			*onBackpressure3 = shared.OutputSplunkBackpressureBehavior(r.OutputSplunk.OnBackpressure.ValueString())
		} else {
			onBackpressure3 = nil
		}
		authType2 := new(shared.OutputSplunkAuthenticationMethod)
		if !r.OutputSplunk.AuthType.IsUnknown() && !r.OutputSplunk.AuthType.IsNull() {
			*authType2 = shared.OutputSplunkAuthenticationMethod(r.OutputSplunk.AuthType.ValueString())
		} else {
			authType2 = nil
		}
		description3 := new(string)
		if !r.OutputSplunk.Description.IsUnknown() && !r.OutputSplunk.Description.IsNull() {
			*description3 = r.OutputSplunk.Description.ValueString()
		} else {
			description3 = nil
		}
		maxFailedHealthChecks := new(float64)
		if !r.OutputSplunk.MaxFailedHealthChecks.IsUnknown() && !r.OutputSplunk.MaxFailedHealthChecks.IsNull() {
			*maxFailedHealthChecks = r.OutputSplunk.MaxFailedHealthChecks.ValueFloat64()
		} else {
			maxFailedHealthChecks = nil
		}
		compress2 := new(shared.OutputSplunkCompression)
		if !r.OutputSplunk.Compress.IsUnknown() && !r.OutputSplunk.Compress.IsNull() {
			*compress2 = shared.OutputSplunkCompression(r.OutputSplunk.Compress.ValueString())
		} else {
			compress2 = nil
		}
		pqMaxFileSize3 := new(string)
		if !r.OutputSplunk.PqMaxFileSize.IsUnknown() && !r.OutputSplunk.PqMaxFileSize.IsNull() {
			*pqMaxFileSize3 = r.OutputSplunk.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize3 = nil
		}
		pqMaxSize3 := new(string)
		if !r.OutputSplunk.PqMaxSize.IsUnknown() && !r.OutputSplunk.PqMaxSize.IsNull() {
			*pqMaxSize3 = r.OutputSplunk.PqMaxSize.ValueString()
		} else {
			pqMaxSize3 = nil
		}
		pqPath3 := new(string)
		if !r.OutputSplunk.PqPath.IsUnknown() && !r.OutputSplunk.PqPath.IsNull() {
			*pqPath3 = r.OutputSplunk.PqPath.ValueString()
		} else {
			pqPath3 = nil
		}
		pqCompress3 := new(shared.OutputSplunkPqCompressCompression)
		if !r.OutputSplunk.PqCompress.IsUnknown() && !r.OutputSplunk.PqCompress.IsNull() {
			*pqCompress3 = shared.OutputSplunkPqCompressCompression(r.OutputSplunk.PqCompress.ValueString())
		} else {
			pqCompress3 = nil
		}
		pqOnBackpressure3 := new(shared.OutputSplunkQueueFullBehavior)
		if !r.OutputSplunk.PqOnBackpressure.IsUnknown() && !r.OutputSplunk.PqOnBackpressure.IsNull() {
			*pqOnBackpressure3 = shared.OutputSplunkQueueFullBehavior(r.OutputSplunk.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure3 = nil
		}
		pqMode3 := new(shared.OutputSplunkMode)
		if !r.OutputSplunk.PqMode.IsUnknown() && !r.OutputSplunk.PqMode.IsNull() {
			*pqMode3 = shared.OutputSplunkMode(r.OutputSplunk.PqMode.ValueString())
		} else {
			pqMode3 = nil
		}
		var pqControls3 *shared.OutputSplunkPqControls
		if r.OutputSplunk.PqControls != nil {
			pqControls3 = &shared.OutputSplunkPqControls{}
		}
		authToken := new(string)
		if !r.OutputSplunk.AuthToken.IsUnknown() && !r.OutputSplunk.AuthToken.IsNull() {
			*authToken = r.OutputSplunk.AuthToken.ValueString()
		} else {
			authToken = nil
		}
		textSecret1 := new(string)
		if !r.OutputSplunk.TextSecret.IsUnknown() && !r.OutputSplunk.TextSecret.IsNull() {
			*textSecret1 = r.OutputSplunk.TextSecret.ValueString()
		} else {
			textSecret1 = nil
		}
		outputSplunk = &shared.OutputSplunk{
			ID:                    id5,
			Type:                  typeVar5,
			Pipeline:              pipeline5,
			SystemFields:          systemFields5,
			Environment:           environment5,
			Streamtags:            streamtags5,
			Host:                  host1,
			Port:                  port1,
			NestedFields:          nestedFields,
			ThrottleRatePerSec:    throttleRatePerSec1,
			ConnectionTimeout:     connectionTimeout1,
			WriteTimeout:          writeTimeout1,
			TLS:                   tls2,
			EnableMultiMetrics:    enableMultiMetrics,
			EnableACK:             enableACK,
			LogFailedRequests:     logFailedRequests1,
			MaxS2Sversion:         maxS2Sversion,
			OnBackpressure:        onBackpressure3,
			AuthType:              authType2,
			Description:           description3,
			MaxFailedHealthChecks: maxFailedHealthChecks,
			Compress:              compress2,
			PqMaxFileSize:         pqMaxFileSize3,
			PqMaxSize:             pqMaxSize3,
			PqPath:                pqPath3,
			PqCompress:            pqCompress3,
			PqOnBackpressure:      pqOnBackpressure3,
			PqMode:                pqMode3,
			PqControls:            pqControls3,
			AuthToken:             authToken,
			TextSecret:            textSecret1,
		}
	}
	if outputSplunk != nil {
		out = shared.Output{
			OutputSplunk: outputSplunk,
		}
	}
	var outputSplunkLb *shared.OutputSplunkLb
	if r.OutputSplunkLb != nil {
		id6 := new(string)
		if !r.OutputSplunkLb.ID.IsUnknown() && !r.OutputSplunkLb.ID.IsNull() {
			*id6 = r.OutputSplunkLb.ID.ValueString()
		} else {
			id6 = nil
		}
		typeVar6 := shared.OutputSplunkLbType(r.OutputSplunkLb.Type.ValueString())
		pipeline6 := new(string)
		if !r.OutputSplunkLb.Pipeline.IsUnknown() && !r.OutputSplunkLb.Pipeline.IsNull() {
			*pipeline6 = r.OutputSplunkLb.Pipeline.ValueString()
		} else {
			pipeline6 = nil
		}
		systemFields6 := make([]string, 0, len(r.OutputSplunkLb.SystemFields))
		for _, systemFieldsItem6 := range r.OutputSplunkLb.SystemFields {
			systemFields6 = append(systemFields6, systemFieldsItem6.ValueString())
		}
		environment6 := new(string)
		if !r.OutputSplunkLb.Environment.IsUnknown() && !r.OutputSplunkLb.Environment.IsNull() {
			*environment6 = r.OutputSplunkLb.Environment.ValueString()
		} else {
			environment6 = nil
		}
		streamtags6 := make([]string, 0, len(r.OutputSplunkLb.Streamtags))
		for _, streamtagsItem6 := range r.OutputSplunkLb.Streamtags {
			streamtags6 = append(streamtags6, streamtagsItem6.ValueString())
		}
		dnsResolvePeriodSec1 := new(float64)
		if !r.OutputSplunkLb.DNSResolvePeriodSec.IsUnknown() && !r.OutputSplunkLb.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec1 = r.OutputSplunkLb.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec1 = nil
		}
		loadBalanceStatsPeriodSec1 := new(float64)
		if !r.OutputSplunkLb.LoadBalanceStatsPeriodSec.IsUnknown() && !r.OutputSplunkLb.LoadBalanceStatsPeriodSec.IsNull() {
			*loadBalanceStatsPeriodSec1 = r.OutputSplunkLb.LoadBalanceStatsPeriodSec.ValueFloat64()
		} else {
			loadBalanceStatsPeriodSec1 = nil
		}
		maxConcurrentSenders := new(float64)
		if !r.OutputSplunkLb.MaxConcurrentSenders.IsUnknown() && !r.OutputSplunkLb.MaxConcurrentSenders.IsNull() {
			*maxConcurrentSenders = r.OutputSplunkLb.MaxConcurrentSenders.ValueFloat64()
		} else {
			maxConcurrentSenders = nil
		}
		nestedFields1 := new(shared.OutputSplunkLbNestedFieldSerialization)
		if !r.OutputSplunkLb.NestedFields.IsUnknown() && !r.OutputSplunkLb.NestedFields.IsNull() {
			*nestedFields1 = shared.OutputSplunkLbNestedFieldSerialization(r.OutputSplunkLb.NestedFields.ValueString())
		} else {
			nestedFields1 = nil
		}
		throttleRatePerSec2 := new(string)
		if !r.OutputSplunkLb.ThrottleRatePerSec.IsUnknown() && !r.OutputSplunkLb.ThrottleRatePerSec.IsNull() {
			*throttleRatePerSec2 = r.OutputSplunkLb.ThrottleRatePerSec.ValueString()
		} else {
			throttleRatePerSec2 = nil
		}
		connectionTimeout2 := new(float64)
		if !r.OutputSplunkLb.ConnectionTimeout.IsUnknown() && !r.OutputSplunkLb.ConnectionTimeout.IsNull() {
			*connectionTimeout2 = r.OutputSplunkLb.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout2 = nil
		}
		writeTimeout2 := new(float64)
		if !r.OutputSplunkLb.WriteTimeout.IsUnknown() && !r.OutputSplunkLb.WriteTimeout.IsNull() {
			*writeTimeout2 = r.OutputSplunkLb.WriteTimeout.ValueFloat64()
		} else {
			writeTimeout2 = nil
		}
		var tls3 *shared.OutputSplunkLbTLSSettingsClientSide
		if r.OutputSplunkLb.TLS != nil {
			disabled3 := new(bool)
			if !r.OutputSplunkLb.TLS.Disabled.IsUnknown() && !r.OutputSplunkLb.TLS.Disabled.IsNull() {
				*disabled3 = r.OutputSplunkLb.TLS.Disabled.ValueBool()
			} else {
				disabled3 = nil
			}
			rejectUnauthorized4 := new(bool)
			if !r.OutputSplunkLb.TLS.RejectUnauthorized.IsUnknown() && !r.OutputSplunkLb.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized4 = r.OutputSplunkLb.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized4 = nil
			}
			servername3 := new(string)
			if !r.OutputSplunkLb.TLS.Servername.IsUnknown() && !r.OutputSplunkLb.TLS.Servername.IsNull() {
				*servername3 = r.OutputSplunkLb.TLS.Servername.ValueString()
			} else {
				servername3 = nil
			}
			certificateName3 := new(string)
			if !r.OutputSplunkLb.TLS.CertificateName.IsUnknown() && !r.OutputSplunkLb.TLS.CertificateName.IsNull() {
				*certificateName3 = r.OutputSplunkLb.TLS.CertificateName.ValueString()
			} else {
				certificateName3 = nil
			}
			caPath3 := new(string)
			if !r.OutputSplunkLb.TLS.CaPath.IsUnknown() && !r.OutputSplunkLb.TLS.CaPath.IsNull() {
				*caPath3 = r.OutputSplunkLb.TLS.CaPath.ValueString()
			} else {
				caPath3 = nil
			}
			privKeyPath3 := new(string)
			if !r.OutputSplunkLb.TLS.PrivKeyPath.IsUnknown() && !r.OutputSplunkLb.TLS.PrivKeyPath.IsNull() {
				*privKeyPath3 = r.OutputSplunkLb.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath3 = nil
			}
			certPath3 := new(string)
			if !r.OutputSplunkLb.TLS.CertPath.IsUnknown() && !r.OutputSplunkLb.TLS.CertPath.IsNull() {
				*certPath3 = r.OutputSplunkLb.TLS.CertPath.ValueString()
			} else {
				certPath3 = nil
			}
			passphrase3 := new(string)
			if !r.OutputSplunkLb.TLS.Passphrase.IsUnknown() && !r.OutputSplunkLb.TLS.Passphrase.IsNull() {
				*passphrase3 = r.OutputSplunkLb.TLS.Passphrase.ValueString()
			} else {
				passphrase3 = nil
			}
			minVersion3 := new(shared.OutputSplunkLbMinimumTLSVersion)
			if !r.OutputSplunkLb.TLS.MinVersion.IsUnknown() && !r.OutputSplunkLb.TLS.MinVersion.IsNull() {
				*minVersion3 = shared.OutputSplunkLbMinimumTLSVersion(r.OutputSplunkLb.TLS.MinVersion.ValueString())
			} else {
				minVersion3 = nil
			}
			maxVersion3 := new(shared.OutputSplunkLbMaximumTLSVersion)
			if !r.OutputSplunkLb.TLS.MaxVersion.IsUnknown() && !r.OutputSplunkLb.TLS.MaxVersion.IsNull() {
				*maxVersion3 = shared.OutputSplunkLbMaximumTLSVersion(r.OutputSplunkLb.TLS.MaxVersion.ValueString())
			} else {
				maxVersion3 = nil
			}
			tls3 = &shared.OutputSplunkLbTLSSettingsClientSide{
				Disabled:           disabled3,
				RejectUnauthorized: rejectUnauthorized4,
				Servername:         servername3,
				CertificateName:    certificateName3,
				CaPath:             caPath3,
				PrivKeyPath:        privKeyPath3,
				CertPath:           certPath3,
				Passphrase:         passphrase3,
				MinVersion:         minVersion3,
				MaxVersion:         maxVersion3,
			}
		}
		enableMultiMetrics1 := new(bool)
		if !r.OutputSplunkLb.EnableMultiMetrics.IsUnknown() && !r.OutputSplunkLb.EnableMultiMetrics.IsNull() {
			*enableMultiMetrics1 = r.OutputSplunkLb.EnableMultiMetrics.ValueBool()
		} else {
			enableMultiMetrics1 = nil
		}
		enableAck1 := new(bool)
		if !r.OutputSplunkLb.EnableACK.IsUnknown() && !r.OutputSplunkLb.EnableACK.IsNull() {
			*enableAck1 = r.OutputSplunkLb.EnableACK.ValueBool()
		} else {
			enableAck1 = nil
		}
		logFailedRequests2 := new(bool)
		if !r.OutputSplunkLb.LogFailedRequests.IsUnknown() && !r.OutputSplunkLb.LogFailedRequests.IsNull() {
			*logFailedRequests2 = r.OutputSplunkLb.LogFailedRequests.ValueBool()
		} else {
			logFailedRequests2 = nil
		}
		maxS2Sversion1 := new(shared.OutputSplunkLbMaxS2SVersion)
		if !r.OutputSplunkLb.MaxS2Sversion.IsUnknown() && !r.OutputSplunkLb.MaxS2Sversion.IsNull() {
			*maxS2Sversion1 = shared.OutputSplunkLbMaxS2SVersion(r.OutputSplunkLb.MaxS2Sversion.ValueString())
		} else {
			maxS2Sversion1 = nil
		}
		onBackpressure4 := new(shared.OutputSplunkLbBackpressureBehavior)
		if !r.OutputSplunkLb.OnBackpressure.IsUnknown() && !r.OutputSplunkLb.OnBackpressure.IsNull() {
			*onBackpressure4 = shared.OutputSplunkLbBackpressureBehavior(r.OutputSplunkLb.OnBackpressure.ValueString())
		} else {
			onBackpressure4 = nil
		}
		indexerDiscovery := new(bool)
		if !r.OutputSplunkLb.IndexerDiscovery.IsUnknown() && !r.OutputSplunkLb.IndexerDiscovery.IsNull() {
			*indexerDiscovery = r.OutputSplunkLb.IndexerDiscovery.ValueBool()
		} else {
			indexerDiscovery = nil
		}
		senderUnhealthyTimeAllowance := new(float64)
		if !r.OutputSplunkLb.SenderUnhealthyTimeAllowance.IsUnknown() && !r.OutputSplunkLb.SenderUnhealthyTimeAllowance.IsNull() {
			*senderUnhealthyTimeAllowance = r.OutputSplunkLb.SenderUnhealthyTimeAllowance.ValueFloat64()
		} else {
			senderUnhealthyTimeAllowance = nil
		}
		authType3 := new(shared.OutputSplunkLbAuthenticationMethod)
		if !r.OutputSplunkLb.AuthType.IsUnknown() && !r.OutputSplunkLb.AuthType.IsNull() {
			*authType3 = shared.OutputSplunkLbAuthenticationMethod(r.OutputSplunkLb.AuthType.ValueString())
		} else {
			authType3 = nil
		}
		description4 := new(string)
		if !r.OutputSplunkLb.Description.IsUnknown() && !r.OutputSplunkLb.Description.IsNull() {
			*description4 = r.OutputSplunkLb.Description.ValueString()
		} else {
			description4 = nil
		}
		maxFailedHealthChecks1 := new(float64)
		if !r.OutputSplunkLb.MaxFailedHealthChecks.IsUnknown() && !r.OutputSplunkLb.MaxFailedHealthChecks.IsNull() {
			*maxFailedHealthChecks1 = r.OutputSplunkLb.MaxFailedHealthChecks.ValueFloat64()
		} else {
			maxFailedHealthChecks1 = nil
		}
		compress3 := new(shared.OutputSplunkLbCompression)
		if !r.OutputSplunkLb.Compress.IsUnknown() && !r.OutputSplunkLb.Compress.IsNull() {
			*compress3 = shared.OutputSplunkLbCompression(r.OutputSplunkLb.Compress.ValueString())
		} else {
			compress3 = nil
		}
		var indexerDiscoveryConfigs *shared.IndexerDiscoveryConfigs
		if r.OutputSplunkLb.IndexerDiscoveryConfigs != nil {
			site := new(string)
			if !r.OutputSplunkLb.IndexerDiscoveryConfigs.Site.IsUnknown() && !r.OutputSplunkLb.IndexerDiscoveryConfigs.Site.IsNull() {
				*site = r.OutputSplunkLb.IndexerDiscoveryConfigs.Site.ValueString()
			} else {
				site = nil
			}
			var masterURI string
			masterURI = r.OutputSplunkLb.IndexerDiscoveryConfigs.MasterURI.ValueString()

			refreshIntervalSec := new(float64)
			if !r.OutputSplunkLb.IndexerDiscoveryConfigs.RefreshIntervalSec.IsUnknown() && !r.OutputSplunkLb.IndexerDiscoveryConfigs.RefreshIntervalSec.IsNull() {
				*refreshIntervalSec = r.OutputSplunkLb.IndexerDiscoveryConfigs.RefreshIntervalSec.ValueFloat64()
			} else {
				refreshIntervalSec = nil
			}
			rejectUnauthorized5 := new(bool)
			if !r.OutputSplunkLb.IndexerDiscoveryConfigs.RejectUnauthorized.IsUnknown() && !r.OutputSplunkLb.IndexerDiscoveryConfigs.RejectUnauthorized.IsNull() {
				*rejectUnauthorized5 = r.OutputSplunkLb.IndexerDiscoveryConfigs.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized5 = nil
			}
			authTokens := make([]shared.OutputSplunkLbAuthTokens, 0, len(r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens))
			for _, authTokensItem := range r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens {
				authType4 := new(shared.OutputSplunkLbIndexerDiscoveryConfigsAuthTokensAuthenticationMethod)
				if !authTokensItem.AuthType.IsUnknown() && !authTokensItem.AuthType.IsNull() {
					*authType4 = shared.OutputSplunkLbIndexerDiscoveryConfigsAuthTokensAuthenticationMethod(authTokensItem.AuthType.ValueString())
				} else {
					authType4 = nil
				}
				authTokens = append(authTokens, shared.OutputSplunkLbAuthTokens{
					AuthType: authType4,
				})
			}
			authType5 := new(shared.OutputSplunkLbIndexerDiscoveryConfigsAuthenticationMethod)
			if !r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType.IsUnknown() && !r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType.IsNull() {
				*authType5 = shared.OutputSplunkLbIndexerDiscoveryConfigsAuthenticationMethod(r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType.ValueString())
			} else {
				authType5 = nil
			}
			authToken1 := new(string)
			if !r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthToken.IsUnknown() && !r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthToken.IsNull() {
				*authToken1 = r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthToken.ValueString()
			} else {
				authToken1 = nil
			}
			textSecret2 := new(string)
			if !r.OutputSplunkLb.IndexerDiscoveryConfigs.TextSecret.IsUnknown() && !r.OutputSplunkLb.IndexerDiscoveryConfigs.TextSecret.IsNull() {
				*textSecret2 = r.OutputSplunkLb.IndexerDiscoveryConfigs.TextSecret.ValueString()
			} else {
				textSecret2 = nil
			}
			indexerDiscoveryConfigs = &shared.IndexerDiscoveryConfigs{
				Site:               site,
				MasterURI:          masterURI,
				RefreshIntervalSec: refreshIntervalSec,
				RejectUnauthorized: rejectUnauthorized5,
				AuthTokens:         authTokens,
				AuthType:           authType5,
				AuthToken:          authToken1,
				TextSecret:         textSecret2,
			}
		}
		excludeSelf1 := new(bool)
		if !r.OutputSplunkLb.ExcludeSelf.IsUnknown() && !r.OutputSplunkLb.ExcludeSelf.IsNull() {
			*excludeSelf1 = r.OutputSplunkLb.ExcludeSelf.ValueBool()
		} else {
			excludeSelf1 = nil
		}
		hosts := make([]shared.Hosts, 0, len(r.OutputSplunkLb.Hosts))
		for _, hostsItem := range r.OutputSplunkLb.Hosts {
			var host2 string
			host2 = hostsItem.Host.ValueString()

			port2 := new(float64)
			if !hostsItem.Port.IsUnknown() && !hostsItem.Port.IsNull() {
				*port2 = hostsItem.Port.ValueFloat64()
			} else {
				port2 = nil
			}
			tls4 := new(shared.OutputSplunkLbTLS)
			if !hostsItem.TLS.IsUnknown() && !hostsItem.TLS.IsNull() {
				*tls4 = shared.OutputSplunkLbTLS(hostsItem.TLS.ValueString())
			} else {
				tls4 = nil
			}
			servername4 := new(string)
			if !hostsItem.Servername.IsUnknown() && !hostsItem.Servername.IsNull() {
				*servername4 = hostsItem.Servername.ValueString()
			} else {
				servername4 = nil
			}
			weight1 := new(float64)
			if !hostsItem.Weight.IsUnknown() && !hostsItem.Weight.IsNull() {
				*weight1 = hostsItem.Weight.ValueFloat64()
			} else {
				weight1 = nil
			}
			hosts = append(hosts, shared.Hosts{
				Host:       host2,
				Port:       port2,
				TLS:        tls4,
				Servername: servername4,
				Weight:     weight1,
			})
		}
		pqMaxFileSize4 := new(string)
		if !r.OutputSplunkLb.PqMaxFileSize.IsUnknown() && !r.OutputSplunkLb.PqMaxFileSize.IsNull() {
			*pqMaxFileSize4 = r.OutputSplunkLb.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize4 = nil
		}
		pqMaxSize4 := new(string)
		if !r.OutputSplunkLb.PqMaxSize.IsUnknown() && !r.OutputSplunkLb.PqMaxSize.IsNull() {
			*pqMaxSize4 = r.OutputSplunkLb.PqMaxSize.ValueString()
		} else {
			pqMaxSize4 = nil
		}
		pqPath4 := new(string)
		if !r.OutputSplunkLb.PqPath.IsUnknown() && !r.OutputSplunkLb.PqPath.IsNull() {
			*pqPath4 = r.OutputSplunkLb.PqPath.ValueString()
		} else {
			pqPath4 = nil
		}
		pqCompress4 := new(shared.OutputSplunkLbPqCompressCompression)
		if !r.OutputSplunkLb.PqCompress.IsUnknown() && !r.OutputSplunkLb.PqCompress.IsNull() {
			*pqCompress4 = shared.OutputSplunkLbPqCompressCompression(r.OutputSplunkLb.PqCompress.ValueString())
		} else {
			pqCompress4 = nil
		}
		pqOnBackpressure4 := new(shared.OutputSplunkLbQueueFullBehavior)
		if !r.OutputSplunkLb.PqOnBackpressure.IsUnknown() && !r.OutputSplunkLb.PqOnBackpressure.IsNull() {
			*pqOnBackpressure4 = shared.OutputSplunkLbQueueFullBehavior(r.OutputSplunkLb.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure4 = nil
		}
		pqMode4 := new(shared.OutputSplunkLbMode)
		if !r.OutputSplunkLb.PqMode.IsUnknown() && !r.OutputSplunkLb.PqMode.IsNull() {
			*pqMode4 = shared.OutputSplunkLbMode(r.OutputSplunkLb.PqMode.ValueString())
		} else {
			pqMode4 = nil
		}
		var pqControls4 *shared.OutputSplunkLbPqControls
		if r.OutputSplunkLb.PqControls != nil {
			pqControls4 = &shared.OutputSplunkLbPqControls{}
		}
		authToken2 := new(string)
		if !r.OutputSplunkLb.AuthToken.IsUnknown() && !r.OutputSplunkLb.AuthToken.IsNull() {
			*authToken2 = r.OutputSplunkLb.AuthToken.ValueString()
		} else {
			authToken2 = nil
		}
		textSecret3 := new(string)
		if !r.OutputSplunkLb.TextSecret.IsUnknown() && !r.OutputSplunkLb.TextSecret.IsNull() {
			*textSecret3 = r.OutputSplunkLb.TextSecret.ValueString()
		} else {
			textSecret3 = nil
		}
		outputSplunkLb = &shared.OutputSplunkLb{
			ID:                           id6,
			Type:                         typeVar6,
			Pipeline:                     pipeline6,
			SystemFields:                 systemFields6,
			Environment:                  environment6,
			Streamtags:                   streamtags6,
			DNSResolvePeriodSec:          dnsResolvePeriodSec1,
			LoadBalanceStatsPeriodSec:    loadBalanceStatsPeriodSec1,
			MaxConcurrentSenders:         maxConcurrentSenders,
			NestedFields:                 nestedFields1,
			ThrottleRatePerSec:           throttleRatePerSec2,
			ConnectionTimeout:            connectionTimeout2,
			WriteTimeout:                 writeTimeout2,
			TLS:                          tls3,
			EnableMultiMetrics:           enableMultiMetrics1,
			EnableACK:                    enableAck1,
			LogFailedRequests:            logFailedRequests2,
			MaxS2Sversion:                maxS2Sversion1,
			OnBackpressure:               onBackpressure4,
			IndexerDiscovery:             indexerDiscovery,
			SenderUnhealthyTimeAllowance: senderUnhealthyTimeAllowance,
			AuthType:                     authType3,
			Description:                  description4,
			MaxFailedHealthChecks:        maxFailedHealthChecks1,
			Compress:                     compress3,
			IndexerDiscoveryConfigs:      indexerDiscoveryConfigs,
			ExcludeSelf:                  excludeSelf1,
			Hosts:                        hosts,
			PqMaxFileSize:                pqMaxFileSize4,
			PqMaxSize:                    pqMaxSize4,
			PqPath:                       pqPath4,
			PqCompress:                   pqCompress4,
			PqOnBackpressure:             pqOnBackpressure4,
			PqMode:                       pqMode4,
			PqControls:                   pqControls4,
			AuthToken:                    authToken2,
			TextSecret:                   textSecret3,
		}
	}
	if outputSplunkLb != nil {
		out = shared.Output{
			OutputSplunkLb: outputSplunkLb,
		}
	}
	var outputSplunkHec *shared.OutputSplunkHec
	if r.OutputSplunkHec != nil {
		var id7 string
		id7 = r.OutputSplunkHec.ID.ValueString()

		typeVar7 := shared.OutputSplunkHecType(r.OutputSplunkHec.Type.ValueString())
		pipeline7 := new(string)
		if !r.OutputSplunkHec.Pipeline.IsUnknown() && !r.OutputSplunkHec.Pipeline.IsNull() {
			*pipeline7 = r.OutputSplunkHec.Pipeline.ValueString()
		} else {
			pipeline7 = nil
		}
		systemFields7 := make([]string, 0, len(r.OutputSplunkHec.SystemFields))
		for _, systemFieldsItem7 := range r.OutputSplunkHec.SystemFields {
			systemFields7 = append(systemFields7, systemFieldsItem7.ValueString())
		}
		environment7 := new(string)
		if !r.OutputSplunkHec.Environment.IsUnknown() && !r.OutputSplunkHec.Environment.IsNull() {
			*environment7 = r.OutputSplunkHec.Environment.ValueString()
		} else {
			environment7 = nil
		}
		streamtags7 := make([]string, 0, len(r.OutputSplunkHec.Streamtags))
		for _, streamtagsItem7 := range r.OutputSplunkHec.Streamtags {
			streamtags7 = append(streamtags7, streamtagsItem7.ValueString())
		}
		loadBalanced2 := new(bool)
		if !r.OutputSplunkHec.LoadBalanced.IsUnknown() && !r.OutputSplunkHec.LoadBalanced.IsNull() {
			*loadBalanced2 = r.OutputSplunkHec.LoadBalanced.ValueBool()
		} else {
			loadBalanced2 = nil
		}
		nextQueue := new(string)
		if !r.OutputSplunkHec.NextQueue.IsUnknown() && !r.OutputSplunkHec.NextQueue.IsNull() {
			*nextQueue = r.OutputSplunkHec.NextQueue.ValueString()
		} else {
			nextQueue = nil
		}
		tcpRouting := new(string)
		if !r.OutputSplunkHec.TCPRouting.IsUnknown() && !r.OutputSplunkHec.TCPRouting.IsNull() {
			*tcpRouting = r.OutputSplunkHec.TCPRouting.ValueString()
		} else {
			tcpRouting = nil
		}
		concurrency2 := new(float64)
		if !r.OutputSplunkHec.Concurrency.IsUnknown() && !r.OutputSplunkHec.Concurrency.IsNull() {
			*concurrency2 = r.OutputSplunkHec.Concurrency.ValueFloat64()
		} else {
			concurrency2 = nil
		}
		maxPayloadSizeKb2 := new(float64)
		if !r.OutputSplunkHec.MaxPayloadSizeKB.IsUnknown() && !r.OutputSplunkHec.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb2 = r.OutputSplunkHec.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb2 = nil
		}
		maxPayloadEvents2 := new(float64)
		if !r.OutputSplunkHec.MaxPayloadEvents.IsUnknown() && !r.OutputSplunkHec.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents2 = r.OutputSplunkHec.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents2 = nil
		}
		compress4 := new(bool)
		if !r.OutputSplunkHec.Compress.IsUnknown() && !r.OutputSplunkHec.Compress.IsNull() {
			*compress4 = r.OutputSplunkHec.Compress.ValueBool()
		} else {
			compress4 = nil
		}
		rejectUnauthorized6 := new(bool)
		if !r.OutputSplunkHec.RejectUnauthorized.IsUnknown() && !r.OutputSplunkHec.RejectUnauthorized.IsNull() {
			*rejectUnauthorized6 = r.OutputSplunkHec.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized6 = nil
		}
		timeoutSec2 := new(float64)
		if !r.OutputSplunkHec.TimeoutSec.IsUnknown() && !r.OutputSplunkHec.TimeoutSec.IsNull() {
			*timeoutSec2 = r.OutputSplunkHec.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec2 = nil
		}
		flushPeriodSec2 := new(float64)
		if !r.OutputSplunkHec.FlushPeriodSec.IsUnknown() && !r.OutputSplunkHec.FlushPeriodSec.IsNull() {
			*flushPeriodSec2 = r.OutputSplunkHec.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec2 = nil
		}
		extraHTTPHeaders2 := make([]shared.OutputSplunkHecExtraHTTPHeaders, 0, len(r.OutputSplunkHec.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem2 := range r.OutputSplunkHec.ExtraHTTPHeaders {
			name4 := new(string)
			if !extraHTTPHeadersItem2.Name.IsUnknown() && !extraHTTPHeadersItem2.Name.IsNull() {
				*name4 = extraHTTPHeadersItem2.Name.ValueString()
			} else {
				name4 = nil
			}
			var value4 string
			value4 = extraHTTPHeadersItem2.Value.ValueString()

			extraHTTPHeaders2 = append(extraHTTPHeaders2, shared.OutputSplunkHecExtraHTTPHeaders{
				Name:  name4,
				Value: value4,
			})
		}
		failedRequestLoggingMode2 := new(shared.OutputSplunkHecFailedRequestLoggingMode)
		if !r.OutputSplunkHec.FailedRequestLoggingMode.IsUnknown() && !r.OutputSplunkHec.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode2 = shared.OutputSplunkHecFailedRequestLoggingMode(r.OutputSplunkHec.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode2 = nil
		}
		safeHeaders2 := make([]string, 0, len(r.OutputSplunkHec.SafeHeaders))
		for _, safeHeadersItem2 := range r.OutputSplunkHec.SafeHeaders {
			safeHeaders2 = append(safeHeaders2, safeHeadersItem2.ValueString())
		}
		enableMultiMetrics2 := new(bool)
		if !r.OutputSplunkHec.EnableMultiMetrics.IsUnknown() && !r.OutputSplunkHec.EnableMultiMetrics.IsNull() {
			*enableMultiMetrics2 = r.OutputSplunkHec.EnableMultiMetrics.ValueBool()
		} else {
			enableMultiMetrics2 = nil
		}
		authType6 := new(shared.OutputSplunkHecAuthenticationMethod)
		if !r.OutputSplunkHec.AuthType.IsUnknown() && !r.OutputSplunkHec.AuthType.IsNull() {
			*authType6 = shared.OutputSplunkHecAuthenticationMethod(r.OutputSplunkHec.AuthType.ValueString())
		} else {
			authType6 = nil
		}
		responseRetrySettings2 := make([]shared.OutputSplunkHecResponseRetrySettings, 0, len(r.OutputSplunkHec.ResponseRetrySettings))
		for _, responseRetrySettingsItem2 := range r.OutputSplunkHec.ResponseRetrySettings {
			var httpStatus2 float64
			httpStatus2 = responseRetrySettingsItem2.HTTPStatus.ValueFloat64()

			initialBackoff4 := new(float64)
			if !responseRetrySettingsItem2.InitialBackoff.IsUnknown() && !responseRetrySettingsItem2.InitialBackoff.IsNull() {
				*initialBackoff4 = responseRetrySettingsItem2.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff4 = nil
			}
			backoffRate4 := new(float64)
			if !responseRetrySettingsItem2.BackoffRate.IsUnknown() && !responseRetrySettingsItem2.BackoffRate.IsNull() {
				*backoffRate4 = responseRetrySettingsItem2.BackoffRate.ValueFloat64()
			} else {
				backoffRate4 = nil
			}
			maxBackoff4 := new(float64)
			if !responseRetrySettingsItem2.MaxBackoff.IsUnknown() && !responseRetrySettingsItem2.MaxBackoff.IsNull() {
				*maxBackoff4 = responseRetrySettingsItem2.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff4 = nil
			}
			responseRetrySettings2 = append(responseRetrySettings2, shared.OutputSplunkHecResponseRetrySettings{
				HTTPStatus:     httpStatus2,
				InitialBackoff: initialBackoff4,
				BackoffRate:    backoffRate4,
				MaxBackoff:     maxBackoff4,
			})
		}
		var timeoutRetrySettings2 *shared.OutputSplunkHecTimeoutRetrySettings
		if r.OutputSplunkHec.TimeoutRetrySettings != nil {
			timeoutRetry2 := new(bool)
			if !r.OutputSplunkHec.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputSplunkHec.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry2 = r.OutputSplunkHec.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry2 = nil
			}
			initialBackoff5 := new(float64)
			if !r.OutputSplunkHec.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputSplunkHec.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff5 = r.OutputSplunkHec.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff5 = nil
			}
			backoffRate5 := new(float64)
			if !r.OutputSplunkHec.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputSplunkHec.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate5 = r.OutputSplunkHec.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate5 = nil
			}
			maxBackoff5 := new(float64)
			if !r.OutputSplunkHec.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputSplunkHec.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff5 = r.OutputSplunkHec.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff5 = nil
			}
			timeoutRetrySettings2 = &shared.OutputSplunkHecTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry2,
				InitialBackoff: initialBackoff5,
				BackoffRate:    backoffRate5,
				MaxBackoff:     maxBackoff5,
			}
		}
		responseHonorRetryAfterHeader2 := new(bool)
		if !r.OutputSplunkHec.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputSplunkHec.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader2 = r.OutputSplunkHec.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader2 = nil
		}
		onBackpressure5 := new(shared.OutputSplunkHecBackpressureBehavior)
		if !r.OutputSplunkHec.OnBackpressure.IsUnknown() && !r.OutputSplunkHec.OnBackpressure.IsNull() {
			*onBackpressure5 = shared.OutputSplunkHecBackpressureBehavior(r.OutputSplunkHec.OnBackpressure.ValueString())
		} else {
			onBackpressure5 = nil
		}
		description5 := new(string)
		if !r.OutputSplunkHec.Description.IsUnknown() && !r.OutputSplunkHec.Description.IsNull() {
			*description5 = r.OutputSplunkHec.Description.ValueString()
		} else {
			description5 = nil
		}
		url3 := new(string)
		if !r.OutputSplunkHec.URL.IsUnknown() && !r.OutputSplunkHec.URL.IsNull() {
			*url3 = r.OutputSplunkHec.URL.ValueString()
		} else {
			url3 = nil
		}
		useRoundRobinDns2 := new(bool)
		if !r.OutputSplunkHec.UseRoundRobinDNS.IsUnknown() && !r.OutputSplunkHec.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns2 = r.OutputSplunkHec.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns2 = nil
		}
		excludeSelf2 := new(bool)
		if !r.OutputSplunkHec.ExcludeSelf.IsUnknown() && !r.OutputSplunkHec.ExcludeSelf.IsNull() {
			*excludeSelf2 = r.OutputSplunkHec.ExcludeSelf.ValueBool()
		} else {
			excludeSelf2 = nil
		}
		urls1 := make([]shared.OutputSplunkHecUrls, 0, len(r.OutputSplunkHec.Urls))
		for _, urlsItem1 := range r.OutputSplunkHec.Urls {
			url4 := new(string)
			if !urlsItem1.URL.IsUnknown() && !urlsItem1.URL.IsNull() {
				*url4 = urlsItem1.URL.ValueString()
			} else {
				url4 = nil
			}
			weight2 := new(float64)
			if !urlsItem1.Weight.IsUnknown() && !urlsItem1.Weight.IsNull() {
				*weight2 = urlsItem1.Weight.ValueFloat64()
			} else {
				weight2 = nil
			}
			urls1 = append(urls1, shared.OutputSplunkHecUrls{
				URL:    url4,
				Weight: weight2,
			})
		}
		dnsResolvePeriodSec2 := new(float64)
		if !r.OutputSplunkHec.DNSResolvePeriodSec.IsUnknown() && !r.OutputSplunkHec.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec2 = r.OutputSplunkHec.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec2 = nil
		}
		loadBalanceStatsPeriodSec2 := new(float64)
		if !r.OutputSplunkHec.LoadBalanceStatsPeriodSec.IsUnknown() && !r.OutputSplunkHec.LoadBalanceStatsPeriodSec.IsNull() {
			*loadBalanceStatsPeriodSec2 = r.OutputSplunkHec.LoadBalanceStatsPeriodSec.ValueFloat64()
		} else {
			loadBalanceStatsPeriodSec2 = nil
		}
		token1 := new(string)
		if !r.OutputSplunkHec.Token.IsUnknown() && !r.OutputSplunkHec.Token.IsNull() {
			*token1 = r.OutputSplunkHec.Token.ValueString()
		} else {
			token1 = nil
		}
		textSecret4 := new(string)
		if !r.OutputSplunkHec.TextSecret.IsUnknown() && !r.OutputSplunkHec.TextSecret.IsNull() {
			*textSecret4 = r.OutputSplunkHec.TextSecret.ValueString()
		} else {
			textSecret4 = nil
		}
		pqMaxFileSize5 := new(string)
		if !r.OutputSplunkHec.PqMaxFileSize.IsUnknown() && !r.OutputSplunkHec.PqMaxFileSize.IsNull() {
			*pqMaxFileSize5 = r.OutputSplunkHec.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize5 = nil
		}
		pqMaxSize5 := new(string)
		if !r.OutputSplunkHec.PqMaxSize.IsUnknown() && !r.OutputSplunkHec.PqMaxSize.IsNull() {
			*pqMaxSize5 = r.OutputSplunkHec.PqMaxSize.ValueString()
		} else {
			pqMaxSize5 = nil
		}
		pqPath5 := new(string)
		if !r.OutputSplunkHec.PqPath.IsUnknown() && !r.OutputSplunkHec.PqPath.IsNull() {
			*pqPath5 = r.OutputSplunkHec.PqPath.ValueString()
		} else {
			pqPath5 = nil
		}
		pqCompress5 := new(shared.OutputSplunkHecCompression)
		if !r.OutputSplunkHec.PqCompress.IsUnknown() && !r.OutputSplunkHec.PqCompress.IsNull() {
			*pqCompress5 = shared.OutputSplunkHecCompression(r.OutputSplunkHec.PqCompress.ValueString())
		} else {
			pqCompress5 = nil
		}
		pqOnBackpressure5 := new(shared.OutputSplunkHecQueueFullBehavior)
		if !r.OutputSplunkHec.PqOnBackpressure.IsUnknown() && !r.OutputSplunkHec.PqOnBackpressure.IsNull() {
			*pqOnBackpressure5 = shared.OutputSplunkHecQueueFullBehavior(r.OutputSplunkHec.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure5 = nil
		}
		pqMode5 := new(shared.OutputSplunkHecMode)
		if !r.OutputSplunkHec.PqMode.IsUnknown() && !r.OutputSplunkHec.PqMode.IsNull() {
			*pqMode5 = shared.OutputSplunkHecMode(r.OutputSplunkHec.PqMode.ValueString())
		} else {
			pqMode5 = nil
		}
		var pqControls5 *shared.OutputSplunkHecPqControls
		if r.OutputSplunkHec.PqControls != nil {
			pqControls5 = &shared.OutputSplunkHecPqControls{}
		}
		outputSplunkHec = &shared.OutputSplunkHec{
			ID:                            id7,
			Type:                          typeVar7,
			Pipeline:                      pipeline7,
			SystemFields:                  systemFields7,
			Environment:                   environment7,
			Streamtags:                    streamtags7,
			LoadBalanced:                  loadBalanced2,
			NextQueue:                     nextQueue,
			TCPRouting:                    tcpRouting,
			Concurrency:                   concurrency2,
			MaxPayloadSizeKB:              maxPayloadSizeKb2,
			MaxPayloadEvents:              maxPayloadEvents2,
			Compress:                      compress4,
			RejectUnauthorized:            rejectUnauthorized6,
			TimeoutSec:                    timeoutSec2,
			FlushPeriodSec:                flushPeriodSec2,
			ExtraHTTPHeaders:              extraHTTPHeaders2,
			FailedRequestLoggingMode:      failedRequestLoggingMode2,
			SafeHeaders:                   safeHeaders2,
			EnableMultiMetrics:            enableMultiMetrics2,
			AuthType:                      authType6,
			ResponseRetrySettings:         responseRetrySettings2,
			TimeoutRetrySettings:          timeoutRetrySettings2,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader2,
			OnBackpressure:                onBackpressure5,
			Description:                   description5,
			URL:                           url3,
			UseRoundRobinDNS:              useRoundRobinDns2,
			ExcludeSelf:                   excludeSelf2,
			Urls:                          urls1,
			DNSResolvePeriodSec:           dnsResolvePeriodSec2,
			LoadBalanceStatsPeriodSec:     loadBalanceStatsPeriodSec2,
			Token:                         token1,
			TextSecret:                    textSecret4,
			PqMaxFileSize:                 pqMaxFileSize5,
			PqMaxSize:                     pqMaxSize5,
			PqPath:                        pqPath5,
			PqCompress:                    pqCompress5,
			PqOnBackpressure:              pqOnBackpressure5,
			PqMode:                        pqMode5,
			PqControls:                    pqControls5,
		}
	}
	if outputSplunkHec != nil {
		out = shared.Output{
			OutputSplunkHec: outputSplunkHec,
		}
	}
	var outputTcpjson *shared.OutputTcpjson
	if r.OutputTcpjson != nil {
		var id8 string
		id8 = r.OutputTcpjson.ID.ValueString()

		typeVar8 := shared.OutputTcpjsonType(r.OutputTcpjson.Type.ValueString())
		pipeline8 := new(string)
		if !r.OutputTcpjson.Pipeline.IsUnknown() && !r.OutputTcpjson.Pipeline.IsNull() {
			*pipeline8 = r.OutputTcpjson.Pipeline.ValueString()
		} else {
			pipeline8 = nil
		}
		systemFields8 := make([]string, 0, len(r.OutputTcpjson.SystemFields))
		for _, systemFieldsItem8 := range r.OutputTcpjson.SystemFields {
			systemFields8 = append(systemFields8, systemFieldsItem8.ValueString())
		}
		environment8 := new(string)
		if !r.OutputTcpjson.Environment.IsUnknown() && !r.OutputTcpjson.Environment.IsNull() {
			*environment8 = r.OutputTcpjson.Environment.ValueString()
		} else {
			environment8 = nil
		}
		streamtags8 := make([]string, 0, len(r.OutputTcpjson.Streamtags))
		for _, streamtagsItem8 := range r.OutputTcpjson.Streamtags {
			streamtags8 = append(streamtags8, streamtagsItem8.ValueString())
		}
		loadBalanced3 := new(bool)
		if !r.OutputTcpjson.LoadBalanced.IsUnknown() && !r.OutputTcpjson.LoadBalanced.IsNull() {
			*loadBalanced3 = r.OutputTcpjson.LoadBalanced.ValueBool()
		} else {
			loadBalanced3 = nil
		}
		compression := new(shared.OutputTcpjsonCompression)
		if !r.OutputTcpjson.Compression.IsUnknown() && !r.OutputTcpjson.Compression.IsNull() {
			*compression = shared.OutputTcpjsonCompression(r.OutputTcpjson.Compression.ValueString())
		} else {
			compression = nil
		}
		logFailedRequests3 := new(bool)
		if !r.OutputTcpjson.LogFailedRequests.IsUnknown() && !r.OutputTcpjson.LogFailedRequests.IsNull() {
			*logFailedRequests3 = r.OutputTcpjson.LogFailedRequests.ValueBool()
		} else {
			logFailedRequests3 = nil
		}
		throttleRatePerSec3 := new(string)
		if !r.OutputTcpjson.ThrottleRatePerSec.IsUnknown() && !r.OutputTcpjson.ThrottleRatePerSec.IsNull() {
			*throttleRatePerSec3 = r.OutputTcpjson.ThrottleRatePerSec.ValueString()
		} else {
			throttleRatePerSec3 = nil
		}
		var tls5 *shared.OutputTcpjsonTLSSettingsClientSide
		if r.OutputTcpjson.TLS != nil {
			disabled4 := new(bool)
			if !r.OutputTcpjson.TLS.Disabled.IsUnknown() && !r.OutputTcpjson.TLS.Disabled.IsNull() {
				*disabled4 = r.OutputTcpjson.TLS.Disabled.ValueBool()
			} else {
				disabled4 = nil
			}
			rejectUnauthorized7 := new(bool)
			if !r.OutputTcpjson.TLS.RejectUnauthorized.IsUnknown() && !r.OutputTcpjson.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized7 = r.OutputTcpjson.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized7 = nil
			}
			servername5 := new(string)
			if !r.OutputTcpjson.TLS.Servername.IsUnknown() && !r.OutputTcpjson.TLS.Servername.IsNull() {
				*servername5 = r.OutputTcpjson.TLS.Servername.ValueString()
			} else {
				servername5 = nil
			}
			certificateName4 := new(string)
			if !r.OutputTcpjson.TLS.CertificateName.IsUnknown() && !r.OutputTcpjson.TLS.CertificateName.IsNull() {
				*certificateName4 = r.OutputTcpjson.TLS.CertificateName.ValueString()
			} else {
				certificateName4 = nil
			}
			caPath4 := new(string)
			if !r.OutputTcpjson.TLS.CaPath.IsUnknown() && !r.OutputTcpjson.TLS.CaPath.IsNull() {
				*caPath4 = r.OutputTcpjson.TLS.CaPath.ValueString()
			} else {
				caPath4 = nil
			}
			privKeyPath4 := new(string)
			if !r.OutputTcpjson.TLS.PrivKeyPath.IsUnknown() && !r.OutputTcpjson.TLS.PrivKeyPath.IsNull() {
				*privKeyPath4 = r.OutputTcpjson.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath4 = nil
			}
			certPath4 := new(string)
			if !r.OutputTcpjson.TLS.CertPath.IsUnknown() && !r.OutputTcpjson.TLS.CertPath.IsNull() {
				*certPath4 = r.OutputTcpjson.TLS.CertPath.ValueString()
			} else {
				certPath4 = nil
			}
			passphrase4 := new(string)
			if !r.OutputTcpjson.TLS.Passphrase.IsUnknown() && !r.OutputTcpjson.TLS.Passphrase.IsNull() {
				*passphrase4 = r.OutputTcpjson.TLS.Passphrase.ValueString()
			} else {
				passphrase4 = nil
			}
			minVersion4 := new(shared.OutputTcpjsonMinimumTLSVersion)
			if !r.OutputTcpjson.TLS.MinVersion.IsUnknown() && !r.OutputTcpjson.TLS.MinVersion.IsNull() {
				*minVersion4 = shared.OutputTcpjsonMinimumTLSVersion(r.OutputTcpjson.TLS.MinVersion.ValueString())
			} else {
				minVersion4 = nil
			}
			maxVersion4 := new(shared.OutputTcpjsonMaximumTLSVersion)
			if !r.OutputTcpjson.TLS.MaxVersion.IsUnknown() && !r.OutputTcpjson.TLS.MaxVersion.IsNull() {
				*maxVersion4 = shared.OutputTcpjsonMaximumTLSVersion(r.OutputTcpjson.TLS.MaxVersion.ValueString())
			} else {
				maxVersion4 = nil
			}
			tls5 = &shared.OutputTcpjsonTLSSettingsClientSide{
				Disabled:           disabled4,
				RejectUnauthorized: rejectUnauthorized7,
				Servername:         servername5,
				CertificateName:    certificateName4,
				CaPath:             caPath4,
				PrivKeyPath:        privKeyPath4,
				CertPath:           certPath4,
				Passphrase:         passphrase4,
				MinVersion:         minVersion4,
				MaxVersion:         maxVersion4,
			}
		}
		connectionTimeout3 := new(float64)
		if !r.OutputTcpjson.ConnectionTimeout.IsUnknown() && !r.OutputTcpjson.ConnectionTimeout.IsNull() {
			*connectionTimeout3 = r.OutputTcpjson.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout3 = nil
		}
		writeTimeout3 := new(float64)
		if !r.OutputTcpjson.WriteTimeout.IsUnknown() && !r.OutputTcpjson.WriteTimeout.IsNull() {
			*writeTimeout3 = r.OutputTcpjson.WriteTimeout.ValueFloat64()
		} else {
			writeTimeout3 = nil
		}
		tokenTTLMinutes := new(float64)
		if !r.OutputTcpjson.TokenTTLMinutes.IsUnknown() && !r.OutputTcpjson.TokenTTLMinutes.IsNull() {
			*tokenTTLMinutes = r.OutputTcpjson.TokenTTLMinutes.ValueFloat64()
		} else {
			tokenTTLMinutes = nil
		}
		sendHeader := new(bool)
		if !r.OutputTcpjson.SendHeader.IsUnknown() && !r.OutputTcpjson.SendHeader.IsNull() {
			*sendHeader = r.OutputTcpjson.SendHeader.ValueBool()
		} else {
			sendHeader = nil
		}
		onBackpressure6 := new(shared.OutputTcpjsonBackpressureBehavior)
		if !r.OutputTcpjson.OnBackpressure.IsUnknown() && !r.OutputTcpjson.OnBackpressure.IsNull() {
			*onBackpressure6 = shared.OutputTcpjsonBackpressureBehavior(r.OutputTcpjson.OnBackpressure.ValueString())
		} else {
			onBackpressure6 = nil
		}
		authType7 := new(shared.OutputTcpjsonAuthenticationMethod)
		if !r.OutputTcpjson.AuthType.IsUnknown() && !r.OutputTcpjson.AuthType.IsNull() {
			*authType7 = shared.OutputTcpjsonAuthenticationMethod(r.OutputTcpjson.AuthType.ValueString())
		} else {
			authType7 = nil
		}
		description6 := new(string)
		if !r.OutputTcpjson.Description.IsUnknown() && !r.OutputTcpjson.Description.IsNull() {
			*description6 = r.OutputTcpjson.Description.ValueString()
		} else {
			description6 = nil
		}
		host3 := new(string)
		if !r.OutputTcpjson.Host.IsUnknown() && !r.OutputTcpjson.Host.IsNull() {
			*host3 = r.OutputTcpjson.Host.ValueString()
		} else {
			host3 = nil
		}
		port3 := new(float64)
		if !r.OutputTcpjson.Port.IsUnknown() && !r.OutputTcpjson.Port.IsNull() {
			*port3 = r.OutputTcpjson.Port.ValueFloat64()
		} else {
			port3 = nil
		}
		excludeSelf3 := new(bool)
		if !r.OutputTcpjson.ExcludeSelf.IsUnknown() && !r.OutputTcpjson.ExcludeSelf.IsNull() {
			*excludeSelf3 = r.OutputTcpjson.ExcludeSelf.ValueBool()
		} else {
			excludeSelf3 = nil
		}
		hosts1 := make([]shared.OutputTcpjsonHosts, 0, len(r.OutputTcpjson.Hosts))
		for _, hostsItem1 := range r.OutputTcpjson.Hosts {
			var host4 string
			host4 = hostsItem1.Host.ValueString()

			var port4 float64
			port4 = hostsItem1.Port.ValueFloat64()

			tls6 := new(shared.OutputTcpjsonTLS)
			if !hostsItem1.TLS.IsUnknown() && !hostsItem1.TLS.IsNull() {
				*tls6 = shared.OutputTcpjsonTLS(hostsItem1.TLS.ValueString())
			} else {
				tls6 = nil
			}
			servername6 := new(string)
			if !hostsItem1.Servername.IsUnknown() && !hostsItem1.Servername.IsNull() {
				*servername6 = hostsItem1.Servername.ValueString()
			} else {
				servername6 = nil
			}
			weight3 := new(float64)
			if !hostsItem1.Weight.IsUnknown() && !hostsItem1.Weight.IsNull() {
				*weight3 = hostsItem1.Weight.ValueFloat64()
			} else {
				weight3 = nil
			}
			hosts1 = append(hosts1, shared.OutputTcpjsonHosts{
				Host:       host4,
				Port:       port4,
				TLS:        tls6,
				Servername: servername6,
				Weight:     weight3,
			})
		}
		dnsResolvePeriodSec3 := new(float64)
		if !r.OutputTcpjson.DNSResolvePeriodSec.IsUnknown() && !r.OutputTcpjson.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec3 = r.OutputTcpjson.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec3 = nil
		}
		loadBalanceStatsPeriodSec3 := new(float64)
		if !r.OutputTcpjson.LoadBalanceStatsPeriodSec.IsUnknown() && !r.OutputTcpjson.LoadBalanceStatsPeriodSec.IsNull() {
			*loadBalanceStatsPeriodSec3 = r.OutputTcpjson.LoadBalanceStatsPeriodSec.ValueFloat64()
		} else {
			loadBalanceStatsPeriodSec3 = nil
		}
		maxConcurrentSenders1 := new(float64)
		if !r.OutputTcpjson.MaxConcurrentSenders.IsUnknown() && !r.OutputTcpjson.MaxConcurrentSenders.IsNull() {
			*maxConcurrentSenders1 = r.OutputTcpjson.MaxConcurrentSenders.ValueFloat64()
		} else {
			maxConcurrentSenders1 = nil
		}
		pqMaxFileSize6 := new(string)
		if !r.OutputTcpjson.PqMaxFileSize.IsUnknown() && !r.OutputTcpjson.PqMaxFileSize.IsNull() {
			*pqMaxFileSize6 = r.OutputTcpjson.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize6 = nil
		}
		pqMaxSize6 := new(string)
		if !r.OutputTcpjson.PqMaxSize.IsUnknown() && !r.OutputTcpjson.PqMaxSize.IsNull() {
			*pqMaxSize6 = r.OutputTcpjson.PqMaxSize.ValueString()
		} else {
			pqMaxSize6 = nil
		}
		pqPath6 := new(string)
		if !r.OutputTcpjson.PqPath.IsUnknown() && !r.OutputTcpjson.PqPath.IsNull() {
			*pqPath6 = r.OutputTcpjson.PqPath.ValueString()
		} else {
			pqPath6 = nil
		}
		pqCompress6 := new(shared.OutputTcpjsonPqCompressCompression)
		if !r.OutputTcpjson.PqCompress.IsUnknown() && !r.OutputTcpjson.PqCompress.IsNull() {
			*pqCompress6 = shared.OutputTcpjsonPqCompressCompression(r.OutputTcpjson.PqCompress.ValueString())
		} else {
			pqCompress6 = nil
		}
		pqOnBackpressure6 := new(shared.OutputTcpjsonQueueFullBehavior)
		if !r.OutputTcpjson.PqOnBackpressure.IsUnknown() && !r.OutputTcpjson.PqOnBackpressure.IsNull() {
			*pqOnBackpressure6 = shared.OutputTcpjsonQueueFullBehavior(r.OutputTcpjson.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure6 = nil
		}
		pqMode6 := new(shared.OutputTcpjsonMode)
		if !r.OutputTcpjson.PqMode.IsUnknown() && !r.OutputTcpjson.PqMode.IsNull() {
			*pqMode6 = shared.OutputTcpjsonMode(r.OutputTcpjson.PqMode.ValueString())
		} else {
			pqMode6 = nil
		}
		var pqControls6 *shared.OutputTcpjsonPqControls
		if r.OutputTcpjson.PqControls != nil {
			pqControls6 = &shared.OutputTcpjsonPqControls{}
		}
		authToken3 := new(string)
		if !r.OutputTcpjson.AuthToken.IsUnknown() && !r.OutputTcpjson.AuthToken.IsNull() {
			*authToken3 = r.OutputTcpjson.AuthToken.ValueString()
		} else {
			authToken3 = nil
		}
		textSecret5 := new(string)
		if !r.OutputTcpjson.TextSecret.IsUnknown() && !r.OutputTcpjson.TextSecret.IsNull() {
			*textSecret5 = r.OutputTcpjson.TextSecret.ValueString()
		} else {
			textSecret5 = nil
		}
		outputTcpjson = &shared.OutputTcpjson{
			ID:                        id8,
			Type:                      typeVar8,
			Pipeline:                  pipeline8,
			SystemFields:              systemFields8,
			Environment:               environment8,
			Streamtags:                streamtags8,
			LoadBalanced:              loadBalanced3,
			Compression:               compression,
			LogFailedRequests:         logFailedRequests3,
			ThrottleRatePerSec:        throttleRatePerSec3,
			TLS:                       tls5,
			ConnectionTimeout:         connectionTimeout3,
			WriteTimeout:              writeTimeout3,
			TokenTTLMinutes:           tokenTTLMinutes,
			SendHeader:                sendHeader,
			OnBackpressure:            onBackpressure6,
			AuthType:                  authType7,
			Description:               description6,
			Host:                      host3,
			Port:                      port3,
			ExcludeSelf:               excludeSelf3,
			Hosts:                     hosts1,
			DNSResolvePeriodSec:       dnsResolvePeriodSec3,
			LoadBalanceStatsPeriodSec: loadBalanceStatsPeriodSec3,
			MaxConcurrentSenders:      maxConcurrentSenders1,
			PqMaxFileSize:             pqMaxFileSize6,
			PqMaxSize:                 pqMaxSize6,
			PqPath:                    pqPath6,
			PqCompress:                pqCompress6,
			PqOnBackpressure:          pqOnBackpressure6,
			PqMode:                    pqMode6,
			PqControls:                pqControls6,
			AuthToken:                 authToken3,
			TextSecret:                textSecret5,
		}
	}
	if outputTcpjson != nil {
		out = shared.Output{
			OutputTcpjson: outputTcpjson,
		}
	}
	var outputWavefront *shared.OutputWavefront
	if r.OutputWavefront != nil {
		id9 := new(string)
		if !r.OutputWavefront.ID.IsUnknown() && !r.OutputWavefront.ID.IsNull() {
			*id9 = r.OutputWavefront.ID.ValueString()
		} else {
			id9 = nil
		}
		typeVar9 := shared.OutputWavefrontType(r.OutputWavefront.Type.ValueString())
		pipeline9 := new(string)
		if !r.OutputWavefront.Pipeline.IsUnknown() && !r.OutputWavefront.Pipeline.IsNull() {
			*pipeline9 = r.OutputWavefront.Pipeline.ValueString()
		} else {
			pipeline9 = nil
		}
		systemFields9 := make([]string, 0, len(r.OutputWavefront.SystemFields))
		for _, systemFieldsItem9 := range r.OutputWavefront.SystemFields {
			systemFields9 = append(systemFields9, systemFieldsItem9.ValueString())
		}
		environment9 := new(string)
		if !r.OutputWavefront.Environment.IsUnknown() && !r.OutputWavefront.Environment.IsNull() {
			*environment9 = r.OutputWavefront.Environment.ValueString()
		} else {
			environment9 = nil
		}
		streamtags9 := make([]string, 0, len(r.OutputWavefront.Streamtags))
		for _, streamtagsItem9 := range r.OutputWavefront.Streamtags {
			streamtags9 = append(streamtags9, streamtagsItem9.ValueString())
		}
		authType8 := new(shared.OutputWavefrontAuthenticationMethod)
		if !r.OutputWavefront.AuthType.IsUnknown() && !r.OutputWavefront.AuthType.IsNull() {
			*authType8 = shared.OutputWavefrontAuthenticationMethod(r.OutputWavefront.AuthType.ValueString())
		} else {
			authType8 = nil
		}
		domain := new(string)
		if !r.OutputWavefront.Domain.IsUnknown() && !r.OutputWavefront.Domain.IsNull() {
			*domain = r.OutputWavefront.Domain.ValueString()
		} else {
			domain = nil
		}
		concurrency3 := new(float64)
		if !r.OutputWavefront.Concurrency.IsUnknown() && !r.OutputWavefront.Concurrency.IsNull() {
			*concurrency3 = r.OutputWavefront.Concurrency.ValueFloat64()
		} else {
			concurrency3 = nil
		}
		maxPayloadSizeKb3 := new(float64)
		if !r.OutputWavefront.MaxPayloadSizeKB.IsUnknown() && !r.OutputWavefront.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb3 = r.OutputWavefront.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb3 = nil
		}
		maxPayloadEvents3 := new(float64)
		if !r.OutputWavefront.MaxPayloadEvents.IsUnknown() && !r.OutputWavefront.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents3 = r.OutputWavefront.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents3 = nil
		}
		compress5 := new(bool)
		if !r.OutputWavefront.Compress.IsUnknown() && !r.OutputWavefront.Compress.IsNull() {
			*compress5 = r.OutputWavefront.Compress.ValueBool()
		} else {
			compress5 = nil
		}
		rejectUnauthorized8 := new(bool)
		if !r.OutputWavefront.RejectUnauthorized.IsUnknown() && !r.OutputWavefront.RejectUnauthorized.IsNull() {
			*rejectUnauthorized8 = r.OutputWavefront.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized8 = nil
		}
		timeoutSec3 := new(float64)
		if !r.OutputWavefront.TimeoutSec.IsUnknown() && !r.OutputWavefront.TimeoutSec.IsNull() {
			*timeoutSec3 = r.OutputWavefront.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec3 = nil
		}
		flushPeriodSec3 := new(float64)
		if !r.OutputWavefront.FlushPeriodSec.IsUnknown() && !r.OutputWavefront.FlushPeriodSec.IsNull() {
			*flushPeriodSec3 = r.OutputWavefront.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec3 = nil
		}
		extraHTTPHeaders3 := make([]shared.OutputWavefrontExtraHTTPHeaders, 0, len(r.OutputWavefront.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem3 := range r.OutputWavefront.ExtraHTTPHeaders {
			name5 := new(string)
			if !extraHTTPHeadersItem3.Name.IsUnknown() && !extraHTTPHeadersItem3.Name.IsNull() {
				*name5 = extraHTTPHeadersItem3.Name.ValueString()
			} else {
				name5 = nil
			}
			var value5 string
			value5 = extraHTTPHeadersItem3.Value.ValueString()

			extraHTTPHeaders3 = append(extraHTTPHeaders3, shared.OutputWavefrontExtraHTTPHeaders{
				Name:  name5,
				Value: value5,
			})
		}
		useRoundRobinDns3 := new(bool)
		if !r.OutputWavefront.UseRoundRobinDNS.IsUnknown() && !r.OutputWavefront.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns3 = r.OutputWavefront.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns3 = nil
		}
		failedRequestLoggingMode3 := new(shared.OutputWavefrontFailedRequestLoggingMode)
		if !r.OutputWavefront.FailedRequestLoggingMode.IsUnknown() && !r.OutputWavefront.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode3 = shared.OutputWavefrontFailedRequestLoggingMode(r.OutputWavefront.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode3 = nil
		}
		safeHeaders3 := make([]string, 0, len(r.OutputWavefront.SafeHeaders))
		for _, safeHeadersItem3 := range r.OutputWavefront.SafeHeaders {
			safeHeaders3 = append(safeHeaders3, safeHeadersItem3.ValueString())
		}
		responseRetrySettings3 := make([]shared.OutputWavefrontResponseRetrySettings, 0, len(r.OutputWavefront.ResponseRetrySettings))
		for _, responseRetrySettingsItem3 := range r.OutputWavefront.ResponseRetrySettings {
			var httpStatus3 float64
			httpStatus3 = responseRetrySettingsItem3.HTTPStatus.ValueFloat64()

			initialBackoff6 := new(float64)
			if !responseRetrySettingsItem3.InitialBackoff.IsUnknown() && !responseRetrySettingsItem3.InitialBackoff.IsNull() {
				*initialBackoff6 = responseRetrySettingsItem3.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff6 = nil
			}
			backoffRate6 := new(float64)
			if !responseRetrySettingsItem3.BackoffRate.IsUnknown() && !responseRetrySettingsItem3.BackoffRate.IsNull() {
				*backoffRate6 = responseRetrySettingsItem3.BackoffRate.ValueFloat64()
			} else {
				backoffRate6 = nil
			}
			maxBackoff6 := new(float64)
			if !responseRetrySettingsItem3.MaxBackoff.IsUnknown() && !responseRetrySettingsItem3.MaxBackoff.IsNull() {
				*maxBackoff6 = responseRetrySettingsItem3.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff6 = nil
			}
			responseRetrySettings3 = append(responseRetrySettings3, shared.OutputWavefrontResponseRetrySettings{
				HTTPStatus:     httpStatus3,
				InitialBackoff: initialBackoff6,
				BackoffRate:    backoffRate6,
				MaxBackoff:     maxBackoff6,
			})
		}
		var timeoutRetrySettings3 *shared.OutputWavefrontTimeoutRetrySettings
		if r.OutputWavefront.TimeoutRetrySettings != nil {
			timeoutRetry3 := new(bool)
			if !r.OutputWavefront.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputWavefront.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry3 = r.OutputWavefront.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry3 = nil
			}
			initialBackoff7 := new(float64)
			if !r.OutputWavefront.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputWavefront.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff7 = r.OutputWavefront.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff7 = nil
			}
			backoffRate7 := new(float64)
			if !r.OutputWavefront.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputWavefront.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate7 = r.OutputWavefront.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate7 = nil
			}
			maxBackoff7 := new(float64)
			if !r.OutputWavefront.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputWavefront.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff7 = r.OutputWavefront.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff7 = nil
			}
			timeoutRetrySettings3 = &shared.OutputWavefrontTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry3,
				InitialBackoff: initialBackoff7,
				BackoffRate:    backoffRate7,
				MaxBackoff:     maxBackoff7,
			}
		}
		responseHonorRetryAfterHeader3 := new(bool)
		if !r.OutputWavefront.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputWavefront.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader3 = r.OutputWavefront.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader3 = nil
		}
		onBackpressure7 := new(shared.OutputWavefrontBackpressureBehavior)
		if !r.OutputWavefront.OnBackpressure.IsUnknown() && !r.OutputWavefront.OnBackpressure.IsNull() {
			*onBackpressure7 = shared.OutputWavefrontBackpressureBehavior(r.OutputWavefront.OnBackpressure.ValueString())
		} else {
			onBackpressure7 = nil
		}
		description7 := new(string)
		if !r.OutputWavefront.Description.IsUnknown() && !r.OutputWavefront.Description.IsNull() {
			*description7 = r.OutputWavefront.Description.ValueString()
		} else {
			description7 = nil
		}
		token2 := new(string)
		if !r.OutputWavefront.Token.IsUnknown() && !r.OutputWavefront.Token.IsNull() {
			*token2 = r.OutputWavefront.Token.ValueString()
		} else {
			token2 = nil
		}
		textSecret6 := new(string)
		if !r.OutputWavefront.TextSecret.IsUnknown() && !r.OutputWavefront.TextSecret.IsNull() {
			*textSecret6 = r.OutputWavefront.TextSecret.ValueString()
		} else {
			textSecret6 = nil
		}
		pqMaxFileSize7 := new(string)
		if !r.OutputWavefront.PqMaxFileSize.IsUnknown() && !r.OutputWavefront.PqMaxFileSize.IsNull() {
			*pqMaxFileSize7 = r.OutputWavefront.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize7 = nil
		}
		pqMaxSize7 := new(string)
		if !r.OutputWavefront.PqMaxSize.IsUnknown() && !r.OutputWavefront.PqMaxSize.IsNull() {
			*pqMaxSize7 = r.OutputWavefront.PqMaxSize.ValueString()
		} else {
			pqMaxSize7 = nil
		}
		pqPath7 := new(string)
		if !r.OutputWavefront.PqPath.IsUnknown() && !r.OutputWavefront.PqPath.IsNull() {
			*pqPath7 = r.OutputWavefront.PqPath.ValueString()
		} else {
			pqPath7 = nil
		}
		pqCompress7 := new(shared.OutputWavefrontCompression)
		if !r.OutputWavefront.PqCompress.IsUnknown() && !r.OutputWavefront.PqCompress.IsNull() {
			*pqCompress7 = shared.OutputWavefrontCompression(r.OutputWavefront.PqCompress.ValueString())
		} else {
			pqCompress7 = nil
		}
		pqOnBackpressure7 := new(shared.OutputWavefrontQueueFullBehavior)
		if !r.OutputWavefront.PqOnBackpressure.IsUnknown() && !r.OutputWavefront.PqOnBackpressure.IsNull() {
			*pqOnBackpressure7 = shared.OutputWavefrontQueueFullBehavior(r.OutputWavefront.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure7 = nil
		}
		pqMode7 := new(shared.OutputWavefrontMode)
		if !r.OutputWavefront.PqMode.IsUnknown() && !r.OutputWavefront.PqMode.IsNull() {
			*pqMode7 = shared.OutputWavefrontMode(r.OutputWavefront.PqMode.ValueString())
		} else {
			pqMode7 = nil
		}
		var pqControls7 *shared.OutputWavefrontPqControls
		if r.OutputWavefront.PqControls != nil {
			pqControls7 = &shared.OutputWavefrontPqControls{}
		}
		outputWavefront = &shared.OutputWavefront{
			ID:                            id9,
			Type:                          typeVar9,
			Pipeline:                      pipeline9,
			SystemFields:                  systemFields9,
			Environment:                   environment9,
			Streamtags:                    streamtags9,
			AuthType:                      authType8,
			Domain:                        domain,
			Concurrency:                   concurrency3,
			MaxPayloadSizeKB:              maxPayloadSizeKb3,
			MaxPayloadEvents:              maxPayloadEvents3,
			Compress:                      compress5,
			RejectUnauthorized:            rejectUnauthorized8,
			TimeoutSec:                    timeoutSec3,
			FlushPeriodSec:                flushPeriodSec3,
			ExtraHTTPHeaders:              extraHTTPHeaders3,
			UseRoundRobinDNS:              useRoundRobinDns3,
			FailedRequestLoggingMode:      failedRequestLoggingMode3,
			SafeHeaders:                   safeHeaders3,
			ResponseRetrySettings:         responseRetrySettings3,
			TimeoutRetrySettings:          timeoutRetrySettings3,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader3,
			OnBackpressure:                onBackpressure7,
			Description:                   description7,
			Token:                         token2,
			TextSecret:                    textSecret6,
			PqMaxFileSize:                 pqMaxFileSize7,
			PqMaxSize:                     pqMaxSize7,
			PqPath:                        pqPath7,
			PqCompress:                    pqCompress7,
			PqOnBackpressure:              pqOnBackpressure7,
			PqMode:                        pqMode7,
			PqControls:                    pqControls7,
		}
	}
	if outputWavefront != nil {
		out = shared.Output{
			OutputWavefront: outputWavefront,
		}
	}
	var outputSignalfx *shared.OutputSignalfx
	if r.OutputSignalfx != nil {
		id10 := new(string)
		if !r.OutputSignalfx.ID.IsUnknown() && !r.OutputSignalfx.ID.IsNull() {
			*id10 = r.OutputSignalfx.ID.ValueString()
		} else {
			id10 = nil
		}
		typeVar10 := shared.OutputSignalfxType(r.OutputSignalfx.Type.ValueString())
		pipeline10 := new(string)
		if !r.OutputSignalfx.Pipeline.IsUnknown() && !r.OutputSignalfx.Pipeline.IsNull() {
			*pipeline10 = r.OutputSignalfx.Pipeline.ValueString()
		} else {
			pipeline10 = nil
		}
		systemFields10 := make([]string, 0, len(r.OutputSignalfx.SystemFields))
		for _, systemFieldsItem10 := range r.OutputSignalfx.SystemFields {
			systemFields10 = append(systemFields10, systemFieldsItem10.ValueString())
		}
		environment10 := new(string)
		if !r.OutputSignalfx.Environment.IsUnknown() && !r.OutputSignalfx.Environment.IsNull() {
			*environment10 = r.OutputSignalfx.Environment.ValueString()
		} else {
			environment10 = nil
		}
		streamtags10 := make([]string, 0, len(r.OutputSignalfx.Streamtags))
		for _, streamtagsItem10 := range r.OutputSignalfx.Streamtags {
			streamtags10 = append(streamtags10, streamtagsItem10.ValueString())
		}
		authType9 := new(shared.OutputSignalfxAuthenticationMethod)
		if !r.OutputSignalfx.AuthType.IsUnknown() && !r.OutputSignalfx.AuthType.IsNull() {
			*authType9 = shared.OutputSignalfxAuthenticationMethod(r.OutputSignalfx.AuthType.ValueString())
		} else {
			authType9 = nil
		}
		realm := new(string)
		if !r.OutputSignalfx.Realm.IsUnknown() && !r.OutputSignalfx.Realm.IsNull() {
			*realm = r.OutputSignalfx.Realm.ValueString()
		} else {
			realm = nil
		}
		concurrency4 := new(float64)
		if !r.OutputSignalfx.Concurrency.IsUnknown() && !r.OutputSignalfx.Concurrency.IsNull() {
			*concurrency4 = r.OutputSignalfx.Concurrency.ValueFloat64()
		} else {
			concurrency4 = nil
		}
		maxPayloadSizeKb4 := new(float64)
		if !r.OutputSignalfx.MaxPayloadSizeKB.IsUnknown() && !r.OutputSignalfx.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb4 = r.OutputSignalfx.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb4 = nil
		}
		maxPayloadEvents4 := new(float64)
		if !r.OutputSignalfx.MaxPayloadEvents.IsUnknown() && !r.OutputSignalfx.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents4 = r.OutputSignalfx.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents4 = nil
		}
		compress6 := new(bool)
		if !r.OutputSignalfx.Compress.IsUnknown() && !r.OutputSignalfx.Compress.IsNull() {
			*compress6 = r.OutputSignalfx.Compress.ValueBool()
		} else {
			compress6 = nil
		}
		rejectUnauthorized9 := new(bool)
		if !r.OutputSignalfx.RejectUnauthorized.IsUnknown() && !r.OutputSignalfx.RejectUnauthorized.IsNull() {
			*rejectUnauthorized9 = r.OutputSignalfx.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized9 = nil
		}
		timeoutSec4 := new(float64)
		if !r.OutputSignalfx.TimeoutSec.IsUnknown() && !r.OutputSignalfx.TimeoutSec.IsNull() {
			*timeoutSec4 = r.OutputSignalfx.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec4 = nil
		}
		flushPeriodSec4 := new(float64)
		if !r.OutputSignalfx.FlushPeriodSec.IsUnknown() && !r.OutputSignalfx.FlushPeriodSec.IsNull() {
			*flushPeriodSec4 = r.OutputSignalfx.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec4 = nil
		}
		extraHTTPHeaders4 := make([]shared.OutputSignalfxExtraHTTPHeaders, 0, len(r.OutputSignalfx.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem4 := range r.OutputSignalfx.ExtraHTTPHeaders {
			name6 := new(string)
			if !extraHTTPHeadersItem4.Name.IsUnknown() && !extraHTTPHeadersItem4.Name.IsNull() {
				*name6 = extraHTTPHeadersItem4.Name.ValueString()
			} else {
				name6 = nil
			}
			var value6 string
			value6 = extraHTTPHeadersItem4.Value.ValueString()

			extraHTTPHeaders4 = append(extraHTTPHeaders4, shared.OutputSignalfxExtraHTTPHeaders{
				Name:  name6,
				Value: value6,
			})
		}
		useRoundRobinDns4 := new(bool)
		if !r.OutputSignalfx.UseRoundRobinDNS.IsUnknown() && !r.OutputSignalfx.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns4 = r.OutputSignalfx.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns4 = nil
		}
		failedRequestLoggingMode4 := new(shared.OutputSignalfxFailedRequestLoggingMode)
		if !r.OutputSignalfx.FailedRequestLoggingMode.IsUnknown() && !r.OutputSignalfx.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode4 = shared.OutputSignalfxFailedRequestLoggingMode(r.OutputSignalfx.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode4 = nil
		}
		safeHeaders4 := make([]string, 0, len(r.OutputSignalfx.SafeHeaders))
		for _, safeHeadersItem4 := range r.OutputSignalfx.SafeHeaders {
			safeHeaders4 = append(safeHeaders4, safeHeadersItem4.ValueString())
		}
		responseRetrySettings4 := make([]shared.OutputSignalfxResponseRetrySettings, 0, len(r.OutputSignalfx.ResponseRetrySettings))
		for _, responseRetrySettingsItem4 := range r.OutputSignalfx.ResponseRetrySettings {
			var httpStatus4 float64
			httpStatus4 = responseRetrySettingsItem4.HTTPStatus.ValueFloat64()

			initialBackoff8 := new(float64)
			if !responseRetrySettingsItem4.InitialBackoff.IsUnknown() && !responseRetrySettingsItem4.InitialBackoff.IsNull() {
				*initialBackoff8 = responseRetrySettingsItem4.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff8 = nil
			}
			backoffRate8 := new(float64)
			if !responseRetrySettingsItem4.BackoffRate.IsUnknown() && !responseRetrySettingsItem4.BackoffRate.IsNull() {
				*backoffRate8 = responseRetrySettingsItem4.BackoffRate.ValueFloat64()
			} else {
				backoffRate8 = nil
			}
			maxBackoff8 := new(float64)
			if !responseRetrySettingsItem4.MaxBackoff.IsUnknown() && !responseRetrySettingsItem4.MaxBackoff.IsNull() {
				*maxBackoff8 = responseRetrySettingsItem4.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff8 = nil
			}
			responseRetrySettings4 = append(responseRetrySettings4, shared.OutputSignalfxResponseRetrySettings{
				HTTPStatus:     httpStatus4,
				InitialBackoff: initialBackoff8,
				BackoffRate:    backoffRate8,
				MaxBackoff:     maxBackoff8,
			})
		}
		var timeoutRetrySettings4 *shared.OutputSignalfxTimeoutRetrySettings
		if r.OutputSignalfx.TimeoutRetrySettings != nil {
			timeoutRetry4 := new(bool)
			if !r.OutputSignalfx.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputSignalfx.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry4 = r.OutputSignalfx.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry4 = nil
			}
			initialBackoff9 := new(float64)
			if !r.OutputSignalfx.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputSignalfx.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff9 = r.OutputSignalfx.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff9 = nil
			}
			backoffRate9 := new(float64)
			if !r.OutputSignalfx.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputSignalfx.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate9 = r.OutputSignalfx.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate9 = nil
			}
			maxBackoff9 := new(float64)
			if !r.OutputSignalfx.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputSignalfx.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff9 = r.OutputSignalfx.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff9 = nil
			}
			timeoutRetrySettings4 = &shared.OutputSignalfxTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry4,
				InitialBackoff: initialBackoff9,
				BackoffRate:    backoffRate9,
				MaxBackoff:     maxBackoff9,
			}
		}
		responseHonorRetryAfterHeader4 := new(bool)
		if !r.OutputSignalfx.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputSignalfx.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader4 = r.OutputSignalfx.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader4 = nil
		}
		onBackpressure8 := new(shared.OutputSignalfxBackpressureBehavior)
		if !r.OutputSignalfx.OnBackpressure.IsUnknown() && !r.OutputSignalfx.OnBackpressure.IsNull() {
			*onBackpressure8 = shared.OutputSignalfxBackpressureBehavior(r.OutputSignalfx.OnBackpressure.ValueString())
		} else {
			onBackpressure8 = nil
		}
		description8 := new(string)
		if !r.OutputSignalfx.Description.IsUnknown() && !r.OutputSignalfx.Description.IsNull() {
			*description8 = r.OutputSignalfx.Description.ValueString()
		} else {
			description8 = nil
		}
		token3 := new(string)
		if !r.OutputSignalfx.Token.IsUnknown() && !r.OutputSignalfx.Token.IsNull() {
			*token3 = r.OutputSignalfx.Token.ValueString()
		} else {
			token3 = nil
		}
		textSecret7 := new(string)
		if !r.OutputSignalfx.TextSecret.IsUnknown() && !r.OutputSignalfx.TextSecret.IsNull() {
			*textSecret7 = r.OutputSignalfx.TextSecret.ValueString()
		} else {
			textSecret7 = nil
		}
		pqMaxFileSize8 := new(string)
		if !r.OutputSignalfx.PqMaxFileSize.IsUnknown() && !r.OutputSignalfx.PqMaxFileSize.IsNull() {
			*pqMaxFileSize8 = r.OutputSignalfx.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize8 = nil
		}
		pqMaxSize8 := new(string)
		if !r.OutputSignalfx.PqMaxSize.IsUnknown() && !r.OutputSignalfx.PqMaxSize.IsNull() {
			*pqMaxSize8 = r.OutputSignalfx.PqMaxSize.ValueString()
		} else {
			pqMaxSize8 = nil
		}
		pqPath8 := new(string)
		if !r.OutputSignalfx.PqPath.IsUnknown() && !r.OutputSignalfx.PqPath.IsNull() {
			*pqPath8 = r.OutputSignalfx.PqPath.ValueString()
		} else {
			pqPath8 = nil
		}
		pqCompress8 := new(shared.OutputSignalfxCompression)
		if !r.OutputSignalfx.PqCompress.IsUnknown() && !r.OutputSignalfx.PqCompress.IsNull() {
			*pqCompress8 = shared.OutputSignalfxCompression(r.OutputSignalfx.PqCompress.ValueString())
		} else {
			pqCompress8 = nil
		}
		pqOnBackpressure8 := new(shared.OutputSignalfxQueueFullBehavior)
		if !r.OutputSignalfx.PqOnBackpressure.IsUnknown() && !r.OutputSignalfx.PqOnBackpressure.IsNull() {
			*pqOnBackpressure8 = shared.OutputSignalfxQueueFullBehavior(r.OutputSignalfx.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure8 = nil
		}
		pqMode8 := new(shared.OutputSignalfxMode)
		if !r.OutputSignalfx.PqMode.IsUnknown() && !r.OutputSignalfx.PqMode.IsNull() {
			*pqMode8 = shared.OutputSignalfxMode(r.OutputSignalfx.PqMode.ValueString())
		} else {
			pqMode8 = nil
		}
		var pqControls8 *shared.OutputSignalfxPqControls
		if r.OutputSignalfx.PqControls != nil {
			pqControls8 = &shared.OutputSignalfxPqControls{}
		}
		outputSignalfx = &shared.OutputSignalfx{
			ID:                            id10,
			Type:                          typeVar10,
			Pipeline:                      pipeline10,
			SystemFields:                  systemFields10,
			Environment:                   environment10,
			Streamtags:                    streamtags10,
			AuthType:                      authType9,
			Realm:                         realm,
			Concurrency:                   concurrency4,
			MaxPayloadSizeKB:              maxPayloadSizeKb4,
			MaxPayloadEvents:              maxPayloadEvents4,
			Compress:                      compress6,
			RejectUnauthorized:            rejectUnauthorized9,
			TimeoutSec:                    timeoutSec4,
			FlushPeriodSec:                flushPeriodSec4,
			ExtraHTTPHeaders:              extraHTTPHeaders4,
			UseRoundRobinDNS:              useRoundRobinDns4,
			FailedRequestLoggingMode:      failedRequestLoggingMode4,
			SafeHeaders:                   safeHeaders4,
			ResponseRetrySettings:         responseRetrySettings4,
			TimeoutRetrySettings:          timeoutRetrySettings4,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader4,
			OnBackpressure:                onBackpressure8,
			Description:                   description8,
			Token:                         token3,
			TextSecret:                    textSecret7,
			PqMaxFileSize:                 pqMaxFileSize8,
			PqMaxSize:                     pqMaxSize8,
			PqPath:                        pqPath8,
			PqCompress:                    pqCompress8,
			PqOnBackpressure:              pqOnBackpressure8,
			PqMode:                        pqMode8,
			PqControls:                    pqControls8,
		}
	}
	if outputSignalfx != nil {
		out = shared.Output{
			OutputSignalfx: outputSignalfx,
		}
	}
	var outputFilesystem *shared.OutputFilesystem
	if r.OutputFilesystem != nil {
		id11 := new(string)
		if !r.OutputFilesystem.ID.IsUnknown() && !r.OutputFilesystem.ID.IsNull() {
			*id11 = r.OutputFilesystem.ID.ValueString()
		} else {
			id11 = nil
		}
		typeVar11 := shared.OutputFilesystemType(r.OutputFilesystem.Type.ValueString())
		pipeline11 := new(string)
		if !r.OutputFilesystem.Pipeline.IsUnknown() && !r.OutputFilesystem.Pipeline.IsNull() {
			*pipeline11 = r.OutputFilesystem.Pipeline.ValueString()
		} else {
			pipeline11 = nil
		}
		systemFields11 := make([]string, 0, len(r.OutputFilesystem.SystemFields))
		for _, systemFieldsItem11 := range r.OutputFilesystem.SystemFields {
			systemFields11 = append(systemFields11, systemFieldsItem11.ValueString())
		}
		environment11 := new(string)
		if !r.OutputFilesystem.Environment.IsUnknown() && !r.OutputFilesystem.Environment.IsNull() {
			*environment11 = r.OutputFilesystem.Environment.ValueString()
		} else {
			environment11 = nil
		}
		streamtags11 := make([]string, 0, len(r.OutputFilesystem.Streamtags))
		for _, streamtagsItem11 := range r.OutputFilesystem.Streamtags {
			streamtags11 = append(streamtags11, streamtagsItem11.ValueString())
		}
		var destPath string
		destPath = r.OutputFilesystem.DestPath.ValueString()

		stagePath := new(string)
		if !r.OutputFilesystem.StagePath.IsUnknown() && !r.OutputFilesystem.StagePath.IsNull() {
			*stagePath = r.OutputFilesystem.StagePath.ValueString()
		} else {
			stagePath = nil
		}
		addIDToStagePath := new(bool)
		if !r.OutputFilesystem.AddIDToStagePath.IsUnknown() && !r.OutputFilesystem.AddIDToStagePath.IsNull() {
			*addIDToStagePath = r.OutputFilesystem.AddIDToStagePath.ValueBool()
		} else {
			addIDToStagePath = nil
		}
		removeEmptyDirs := new(bool)
		if !r.OutputFilesystem.RemoveEmptyDirs.IsUnknown() && !r.OutputFilesystem.RemoveEmptyDirs.IsNull() {
			*removeEmptyDirs = r.OutputFilesystem.RemoveEmptyDirs.ValueBool()
		} else {
			removeEmptyDirs = nil
		}
		partitionExpr := new(string)
		if !r.OutputFilesystem.PartitionExpr.IsUnknown() && !r.OutputFilesystem.PartitionExpr.IsNull() {
			*partitionExpr = r.OutputFilesystem.PartitionExpr.ValueString()
		} else {
			partitionExpr = nil
		}
		format2 := new(shared.DataFormat)
		if !r.OutputFilesystem.Format.IsUnknown() && !r.OutputFilesystem.Format.IsNull() {
			*format2 = shared.DataFormat(r.OutputFilesystem.Format.ValueString())
		} else {
			format2 = nil
		}
		baseFileName := new(string)
		if !r.OutputFilesystem.BaseFileName.IsUnknown() && !r.OutputFilesystem.BaseFileName.IsNull() {
			*baseFileName = r.OutputFilesystem.BaseFileName.ValueString()
		} else {
			baseFileName = nil
		}
		fileNameSuffix := new(string)
		if !r.OutputFilesystem.FileNameSuffix.IsUnknown() && !r.OutputFilesystem.FileNameSuffix.IsNull() {
			*fileNameSuffix = r.OutputFilesystem.FileNameSuffix.ValueString()
		} else {
			fileNameSuffix = nil
		}
		maxFileSizeMB := new(float64)
		if !r.OutputFilesystem.MaxFileSizeMB.IsUnknown() && !r.OutputFilesystem.MaxFileSizeMB.IsNull() {
			*maxFileSizeMB = r.OutputFilesystem.MaxFileSizeMB.ValueFloat64()
		} else {
			maxFileSizeMB = nil
		}
		maxFileOpenTimeSec := new(float64)
		if !r.OutputFilesystem.MaxFileOpenTimeSec.IsUnknown() && !r.OutputFilesystem.MaxFileOpenTimeSec.IsNull() {
			*maxFileOpenTimeSec = r.OutputFilesystem.MaxFileOpenTimeSec.ValueFloat64()
		} else {
			maxFileOpenTimeSec = nil
		}
		maxFileIdleTimeSec := new(float64)
		if !r.OutputFilesystem.MaxFileIdleTimeSec.IsUnknown() && !r.OutputFilesystem.MaxFileIdleTimeSec.IsNull() {
			*maxFileIdleTimeSec = r.OutputFilesystem.MaxFileIdleTimeSec.ValueFloat64()
		} else {
			maxFileIdleTimeSec = nil
		}
		maxOpenFiles := new(float64)
		if !r.OutputFilesystem.MaxOpenFiles.IsUnknown() && !r.OutputFilesystem.MaxOpenFiles.IsNull() {
			*maxOpenFiles = r.OutputFilesystem.MaxOpenFiles.ValueFloat64()
		} else {
			maxOpenFiles = nil
		}
		headerLine := new(string)
		if !r.OutputFilesystem.HeaderLine.IsUnknown() && !r.OutputFilesystem.HeaderLine.IsNull() {
			*headerLine = r.OutputFilesystem.HeaderLine.ValueString()
		} else {
			headerLine = nil
		}
		writeHighWaterMark := new(float64)
		if !r.OutputFilesystem.WriteHighWaterMark.IsUnknown() && !r.OutputFilesystem.WriteHighWaterMark.IsNull() {
			*writeHighWaterMark = r.OutputFilesystem.WriteHighWaterMark.ValueFloat64()
		} else {
			writeHighWaterMark = nil
		}
		onBackpressure9 := new(shared.OutputFilesystemBackpressureBehavior)
		if !r.OutputFilesystem.OnBackpressure.IsUnknown() && !r.OutputFilesystem.OnBackpressure.IsNull() {
			*onBackpressure9 = shared.OutputFilesystemBackpressureBehavior(r.OutputFilesystem.OnBackpressure.ValueString())
		} else {
			onBackpressure9 = nil
		}
		deadletterEnabled := new(bool)
		if !r.OutputFilesystem.DeadletterEnabled.IsUnknown() && !r.OutputFilesystem.DeadletterEnabled.IsNull() {
			*deadletterEnabled = r.OutputFilesystem.DeadletterEnabled.ValueBool()
		} else {
			deadletterEnabled = nil
		}
		onDiskFullBackpressure := new(shared.DiskSpaceProtection)
		if !r.OutputFilesystem.OnDiskFullBackpressure.IsUnknown() && !r.OutputFilesystem.OnDiskFullBackpressure.IsNull() {
			*onDiskFullBackpressure = shared.DiskSpaceProtection(r.OutputFilesystem.OnDiskFullBackpressure.ValueString())
		} else {
			onDiskFullBackpressure = nil
		}
		description9 := new(string)
		if !r.OutputFilesystem.Description.IsUnknown() && !r.OutputFilesystem.Description.IsNull() {
			*description9 = r.OutputFilesystem.Description.ValueString()
		} else {
			description9 = nil
		}
		compress7 := new(shared.Compress)
		if !r.OutputFilesystem.Compress.IsUnknown() && !r.OutputFilesystem.Compress.IsNull() {
			*compress7 = shared.Compress(r.OutputFilesystem.Compress.ValueString())
		} else {
			compress7 = nil
		}
		compressionLevel := new(shared.CompressionLevel)
		if !r.OutputFilesystem.CompressionLevel.IsUnknown() && !r.OutputFilesystem.CompressionLevel.IsNull() {
			*compressionLevel = shared.CompressionLevel(r.OutputFilesystem.CompressionLevel.ValueString())
		} else {
			compressionLevel = nil
		}
		automaticSchema := new(bool)
		if !r.OutputFilesystem.AutomaticSchema.IsUnknown() && !r.OutputFilesystem.AutomaticSchema.IsNull() {
			*automaticSchema = r.OutputFilesystem.AutomaticSchema.ValueBool()
		} else {
			automaticSchema = nil
		}
		parquetVersion := new(shared.ParquetVersion)
		if !r.OutputFilesystem.ParquetVersion.IsUnknown() && !r.OutputFilesystem.ParquetVersion.IsNull() {
			*parquetVersion = shared.ParquetVersion(r.OutputFilesystem.ParquetVersion.ValueString())
		} else {
			parquetVersion = nil
		}
		parquetDataPageVersion := new(shared.DataPageVersion)
		if !r.OutputFilesystem.ParquetDataPageVersion.IsUnknown() && !r.OutputFilesystem.ParquetDataPageVersion.IsNull() {
			*parquetDataPageVersion = shared.DataPageVersion(r.OutputFilesystem.ParquetDataPageVersion.ValueString())
		} else {
			parquetDataPageVersion = nil
		}
		parquetRowGroupLength := new(float64)
		if !r.OutputFilesystem.ParquetRowGroupLength.IsUnknown() && !r.OutputFilesystem.ParquetRowGroupLength.IsNull() {
			*parquetRowGroupLength = r.OutputFilesystem.ParquetRowGroupLength.ValueFloat64()
		} else {
			parquetRowGroupLength = nil
		}
		parquetPageSize := new(string)
		if !r.OutputFilesystem.ParquetPageSize.IsUnknown() && !r.OutputFilesystem.ParquetPageSize.IsNull() {
			*parquetPageSize = r.OutputFilesystem.ParquetPageSize.ValueString()
		} else {
			parquetPageSize = nil
		}
		shouldLogInvalidRows := new(bool)
		if !r.OutputFilesystem.ShouldLogInvalidRows.IsUnknown() && !r.OutputFilesystem.ShouldLogInvalidRows.IsNull() {
			*shouldLogInvalidRows = r.OutputFilesystem.ShouldLogInvalidRows.ValueBool()
		} else {
			shouldLogInvalidRows = nil
		}
		keyValueMetadata := make([]shared.KeyValueMetadata, 0, len(r.OutputFilesystem.KeyValueMetadata))
		for _, keyValueMetadataItem := range r.OutputFilesystem.KeyValueMetadata {
			key := new(string)
			if !keyValueMetadataItem.Key.IsUnknown() && !keyValueMetadataItem.Key.IsNull() {
				*key = keyValueMetadataItem.Key.ValueString()
			} else {
				key = nil
			}
			var value7 string
			value7 = keyValueMetadataItem.Value.ValueString()

			keyValueMetadata = append(keyValueMetadata, shared.KeyValueMetadata{
				Key:   key,
				Value: value7,
			})
		}
		enableStatistics := new(bool)
		if !r.OutputFilesystem.EnableStatistics.IsUnknown() && !r.OutputFilesystem.EnableStatistics.IsNull() {
			*enableStatistics = r.OutputFilesystem.EnableStatistics.ValueBool()
		} else {
			enableStatistics = nil
		}
		enableWritePageIndex := new(bool)
		if !r.OutputFilesystem.EnableWritePageIndex.IsUnknown() && !r.OutputFilesystem.EnableWritePageIndex.IsNull() {
			*enableWritePageIndex = r.OutputFilesystem.EnableWritePageIndex.ValueBool()
		} else {
			enableWritePageIndex = nil
		}
		enablePageChecksum := new(bool)
		if !r.OutputFilesystem.EnablePageChecksum.IsUnknown() && !r.OutputFilesystem.EnablePageChecksum.IsNull() {
			*enablePageChecksum = r.OutputFilesystem.EnablePageChecksum.ValueBool()
		} else {
			enablePageChecksum = nil
		}
		emptyDirCleanupSec := new(float64)
		if !r.OutputFilesystem.EmptyDirCleanupSec.IsUnknown() && !r.OutputFilesystem.EmptyDirCleanupSec.IsNull() {
			*emptyDirCleanupSec = r.OutputFilesystem.EmptyDirCleanupSec.ValueFloat64()
		} else {
			emptyDirCleanupSec = nil
		}
		deadletterPath := new(string)
		if !r.OutputFilesystem.DeadletterPath.IsUnknown() && !r.OutputFilesystem.DeadletterPath.IsNull() {
			*deadletterPath = r.OutputFilesystem.DeadletterPath.ValueString()
		} else {
			deadletterPath = nil
		}
		maxRetryNum := new(float64)
		if !r.OutputFilesystem.MaxRetryNum.IsUnknown() && !r.OutputFilesystem.MaxRetryNum.IsNull() {
			*maxRetryNum = r.OutputFilesystem.MaxRetryNum.ValueFloat64()
		} else {
			maxRetryNum = nil
		}
		outputFilesystem = &shared.OutputFilesystem{
			ID:                     id11,
			Type:                   typeVar11,
			Pipeline:               pipeline11,
			SystemFields:           systemFields11,
			Environment:            environment11,
			Streamtags:             streamtags11,
			DestPath:               destPath,
			StagePath:              stagePath,
			AddIDToStagePath:       addIDToStagePath,
			RemoveEmptyDirs:        removeEmptyDirs,
			PartitionExpr:          partitionExpr,
			Format:                 format2,
			BaseFileName:           baseFileName,
			FileNameSuffix:         fileNameSuffix,
			MaxFileSizeMB:          maxFileSizeMB,
			MaxFileOpenTimeSec:     maxFileOpenTimeSec,
			MaxFileIdleTimeSec:     maxFileIdleTimeSec,
			MaxOpenFiles:           maxOpenFiles,
			HeaderLine:             headerLine,
			WriteHighWaterMark:     writeHighWaterMark,
			OnBackpressure:         onBackpressure9,
			DeadletterEnabled:      deadletterEnabled,
			OnDiskFullBackpressure: onDiskFullBackpressure,
			Description:            description9,
			Compress:               compress7,
			CompressionLevel:       compressionLevel,
			AutomaticSchema:        automaticSchema,
			ParquetVersion:         parquetVersion,
			ParquetDataPageVersion: parquetDataPageVersion,
			ParquetRowGroupLength:  parquetRowGroupLength,
			ParquetPageSize:        parquetPageSize,
			ShouldLogInvalidRows:   shouldLogInvalidRows,
			KeyValueMetadata:       keyValueMetadata,
			EnableStatistics:       enableStatistics,
			EnableWritePageIndex:   enableWritePageIndex,
			EnablePageChecksum:     enablePageChecksum,
			EmptyDirCleanupSec:     emptyDirCleanupSec,
			DeadletterPath:         deadletterPath,
			MaxRetryNum:            maxRetryNum,
		}
	}
	if outputFilesystem != nil {
		out = shared.Output{
			OutputFilesystem: outputFilesystem,
		}
	}
	var outputS3 *shared.OutputS3
	if r.OutputS3 != nil {
		id12 := new(string)
		if !r.OutputS3.ID.IsUnknown() && !r.OutputS3.ID.IsNull() {
			*id12 = r.OutputS3.ID.ValueString()
		} else {
			id12 = nil
		}
		typeVar12 := new(shared.OutputS3Type)
		if !r.OutputS3.Type.IsUnknown() && !r.OutputS3.Type.IsNull() {
			*typeVar12 = shared.OutputS3Type(r.OutputS3.Type.ValueString())
		} else {
			typeVar12 = nil
		}
		pipeline12 := new(string)
		if !r.OutputS3.Pipeline.IsUnknown() && !r.OutputS3.Pipeline.IsNull() {
			*pipeline12 = r.OutputS3.Pipeline.ValueString()
		} else {
			pipeline12 = nil
		}
		systemFields12 := make([]string, 0, len(r.OutputS3.SystemFields))
		for _, systemFieldsItem12 := range r.OutputS3.SystemFields {
			systemFields12 = append(systemFields12, systemFieldsItem12.ValueString())
		}
		environment12 := new(string)
		if !r.OutputS3.Environment.IsUnknown() && !r.OutputS3.Environment.IsNull() {
			*environment12 = r.OutputS3.Environment.ValueString()
		} else {
			environment12 = nil
		}
		streamtags12 := make([]string, 0, len(r.OutputS3.Streamtags))
		for _, streamtagsItem12 := range r.OutputS3.Streamtags {
			streamtags12 = append(streamtags12, streamtagsItem12.ValueString())
		}
		var bucket string
		bucket = r.OutputS3.Bucket.ValueString()

		region := new(string)
		if !r.OutputS3.Region.IsUnknown() && !r.OutputS3.Region.IsNull() {
			*region = r.OutputS3.Region.ValueString()
		} else {
			region = nil
		}
		awsSecretKey := new(string)
		if !r.OutputS3.AwsSecretKey.IsUnknown() && !r.OutputS3.AwsSecretKey.IsNull() {
			*awsSecretKey = r.OutputS3.AwsSecretKey.ValueString()
		} else {
			awsSecretKey = nil
		}
		awsAuthenticationMethod := new(shared.OutputS3AuthenticationMethod)
		if !r.OutputS3.AwsAuthenticationMethod.IsUnknown() && !r.OutputS3.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod = shared.OutputS3AuthenticationMethod(r.OutputS3.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod = nil
		}
		endpoint := new(string)
		if !r.OutputS3.Endpoint.IsUnknown() && !r.OutputS3.Endpoint.IsNull() {
			*endpoint = r.OutputS3.Endpoint.ValueString()
		} else {
			endpoint = nil
		}
		signatureVersion := new(shared.OutputS3SignatureVersion)
		if !r.OutputS3.SignatureVersion.IsUnknown() && !r.OutputS3.SignatureVersion.IsNull() {
			*signatureVersion = shared.OutputS3SignatureVersion(r.OutputS3.SignatureVersion.ValueString())
		} else {
			signatureVersion = nil
		}
		reuseConnections := new(bool)
		if !r.OutputS3.ReuseConnections.IsUnknown() && !r.OutputS3.ReuseConnections.IsNull() {
			*reuseConnections = r.OutputS3.ReuseConnections.ValueBool()
		} else {
			reuseConnections = nil
		}
		rejectUnauthorized10 := new(bool)
		if !r.OutputS3.RejectUnauthorized.IsUnknown() && !r.OutputS3.RejectUnauthorized.IsNull() {
			*rejectUnauthorized10 = r.OutputS3.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized10 = nil
		}
		enableAssumeRole := new(bool)
		if !r.OutputS3.EnableAssumeRole.IsUnknown() && !r.OutputS3.EnableAssumeRole.IsNull() {
			*enableAssumeRole = r.OutputS3.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole = nil
		}
		assumeRoleArn := new(string)
		if !r.OutputS3.AssumeRoleArn.IsUnknown() && !r.OutputS3.AssumeRoleArn.IsNull() {
			*assumeRoleArn = r.OutputS3.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn = nil
		}
		assumeRoleExternalID := new(string)
		if !r.OutputS3.AssumeRoleExternalID.IsUnknown() && !r.OutputS3.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalID = r.OutputS3.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalID = nil
		}
		durationSeconds := new(float64)
		if !r.OutputS3.DurationSeconds.IsUnknown() && !r.OutputS3.DurationSeconds.IsNull() {
			*durationSeconds = r.OutputS3.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds = nil
		}
		stagePath1 := new(string)
		if !r.OutputS3.StagePath.IsUnknown() && !r.OutputS3.StagePath.IsNull() {
			*stagePath1 = r.OutputS3.StagePath.ValueString()
		} else {
			stagePath1 = nil
		}
		addIDToStagePath1 := new(bool)
		if !r.OutputS3.AddIDToStagePath.IsUnknown() && !r.OutputS3.AddIDToStagePath.IsNull() {
			*addIDToStagePath1 = r.OutputS3.AddIDToStagePath.ValueBool()
		} else {
			addIDToStagePath1 = nil
		}
		destPath1 := new(string)
		if !r.OutputS3.DestPath.IsUnknown() && !r.OutputS3.DestPath.IsNull() {
			*destPath1 = r.OutputS3.DestPath.ValueString()
		} else {
			destPath1 = nil
		}
		objectACL := new(shared.ObjectACL)
		if !r.OutputS3.ObjectACL.IsUnknown() && !r.OutputS3.ObjectACL.IsNull() {
			*objectACL = shared.ObjectACL(r.OutputS3.ObjectACL.ValueString())
		} else {
			objectACL = nil
		}
		storageClass := new(shared.StorageClass)
		if !r.OutputS3.StorageClass.IsUnknown() && !r.OutputS3.StorageClass.IsNull() {
			*storageClass = shared.StorageClass(r.OutputS3.StorageClass.ValueString())
		} else {
			storageClass = nil
		}
		serverSideEncryption := new(shared.ServerSideEncryption)
		if !r.OutputS3.ServerSideEncryption.IsUnknown() && !r.OutputS3.ServerSideEncryption.IsNull() {
			*serverSideEncryption = shared.ServerSideEncryption(r.OutputS3.ServerSideEncryption.ValueString())
		} else {
			serverSideEncryption = nil
		}
		kmsKeyID := new(string)
		if !r.OutputS3.KmsKeyID.IsUnknown() && !r.OutputS3.KmsKeyID.IsNull() {
			*kmsKeyID = r.OutputS3.KmsKeyID.ValueString()
		} else {
			kmsKeyID = nil
		}
		removeEmptyDirs1 := new(bool)
		if !r.OutputS3.RemoveEmptyDirs.IsUnknown() && !r.OutputS3.RemoveEmptyDirs.IsNull() {
			*removeEmptyDirs1 = r.OutputS3.RemoveEmptyDirs.ValueBool()
		} else {
			removeEmptyDirs1 = nil
		}
		partitionExpr1 := new(string)
		if !r.OutputS3.PartitionExpr.IsUnknown() && !r.OutputS3.PartitionExpr.IsNull() {
			*partitionExpr1 = r.OutputS3.PartitionExpr.ValueString()
		} else {
			partitionExpr1 = nil
		}
		format3 := new(shared.OutputS3DataFormat)
		if !r.OutputS3.Format.IsUnknown() && !r.OutputS3.Format.IsNull() {
			*format3 = shared.OutputS3DataFormat(r.OutputS3.Format.ValueString())
		} else {
			format3 = nil
		}
		baseFileName1 := new(string)
		if !r.OutputS3.BaseFileName.IsUnknown() && !r.OutputS3.BaseFileName.IsNull() {
			*baseFileName1 = r.OutputS3.BaseFileName.ValueString()
		} else {
			baseFileName1 = nil
		}
		fileNameSuffix1 := new(string)
		if !r.OutputS3.FileNameSuffix.IsUnknown() && !r.OutputS3.FileNameSuffix.IsNull() {
			*fileNameSuffix1 = r.OutputS3.FileNameSuffix.ValueString()
		} else {
			fileNameSuffix1 = nil
		}
		maxFileSizeMb1 := new(float64)
		if !r.OutputS3.MaxFileSizeMB.IsUnknown() && !r.OutputS3.MaxFileSizeMB.IsNull() {
			*maxFileSizeMb1 = r.OutputS3.MaxFileSizeMB.ValueFloat64()
		} else {
			maxFileSizeMb1 = nil
		}
		maxOpenFiles1 := new(float64)
		if !r.OutputS3.MaxOpenFiles.IsUnknown() && !r.OutputS3.MaxOpenFiles.IsNull() {
			*maxOpenFiles1 = r.OutputS3.MaxOpenFiles.ValueFloat64()
		} else {
			maxOpenFiles1 = nil
		}
		headerLine1 := new(string)
		if !r.OutputS3.HeaderLine.IsUnknown() && !r.OutputS3.HeaderLine.IsNull() {
			*headerLine1 = r.OutputS3.HeaderLine.ValueString()
		} else {
			headerLine1 = nil
		}
		writeHighWaterMark1 := new(float64)
		if !r.OutputS3.WriteHighWaterMark.IsUnknown() && !r.OutputS3.WriteHighWaterMark.IsNull() {
			*writeHighWaterMark1 = r.OutputS3.WriteHighWaterMark.ValueFloat64()
		} else {
			writeHighWaterMark1 = nil
		}
		onBackpressure10 := new(shared.OutputS3BackpressureBehavior)
		if !r.OutputS3.OnBackpressure.IsUnknown() && !r.OutputS3.OnBackpressure.IsNull() {
			*onBackpressure10 = shared.OutputS3BackpressureBehavior(r.OutputS3.OnBackpressure.ValueString())
		} else {
			onBackpressure10 = nil
		}
		deadletterEnabled1 := new(bool)
		if !r.OutputS3.DeadletterEnabled.IsUnknown() && !r.OutputS3.DeadletterEnabled.IsNull() {
			*deadletterEnabled1 = r.OutputS3.DeadletterEnabled.ValueBool()
		} else {
			deadletterEnabled1 = nil
		}
		onDiskFullBackpressure1 := new(shared.OutputS3DiskSpaceProtection)
		if !r.OutputS3.OnDiskFullBackpressure.IsUnknown() && !r.OutputS3.OnDiskFullBackpressure.IsNull() {
			*onDiskFullBackpressure1 = shared.OutputS3DiskSpaceProtection(r.OutputS3.OnDiskFullBackpressure.ValueString())
		} else {
			onDiskFullBackpressure1 = nil
		}
		maxFileOpenTimeSec1 := new(float64)
		if !r.OutputS3.MaxFileOpenTimeSec.IsUnknown() && !r.OutputS3.MaxFileOpenTimeSec.IsNull() {
			*maxFileOpenTimeSec1 = r.OutputS3.MaxFileOpenTimeSec.ValueFloat64()
		} else {
			maxFileOpenTimeSec1 = nil
		}
		maxFileIdleTimeSec1 := new(float64)
		if !r.OutputS3.MaxFileIdleTimeSec.IsUnknown() && !r.OutputS3.MaxFileIdleTimeSec.IsNull() {
			*maxFileIdleTimeSec1 = r.OutputS3.MaxFileIdleTimeSec.ValueFloat64()
		} else {
			maxFileIdleTimeSec1 = nil
		}
		maxConcurrentFileParts := new(float64)
		if !r.OutputS3.MaxConcurrentFileParts.IsUnknown() && !r.OutputS3.MaxConcurrentFileParts.IsNull() {
			*maxConcurrentFileParts = r.OutputS3.MaxConcurrentFileParts.ValueFloat64()
		} else {
			maxConcurrentFileParts = nil
		}
		verifyPermissions := new(bool)
		if !r.OutputS3.VerifyPermissions.IsUnknown() && !r.OutputS3.VerifyPermissions.IsNull() {
			*verifyPermissions = r.OutputS3.VerifyPermissions.ValueBool()
		} else {
			verifyPermissions = nil
		}
		maxClosingFilesToBackpressure := new(float64)
		if !r.OutputS3.MaxClosingFilesToBackpressure.IsUnknown() && !r.OutputS3.MaxClosingFilesToBackpressure.IsNull() {
			*maxClosingFilesToBackpressure = r.OutputS3.MaxClosingFilesToBackpressure.ValueFloat64()
		} else {
			maxClosingFilesToBackpressure = nil
		}
		description10 := new(string)
		if !r.OutputS3.Description.IsUnknown() && !r.OutputS3.Description.IsNull() {
			*description10 = r.OutputS3.Description.ValueString()
		} else {
			description10 = nil
		}
		awsAPIKey := new(string)
		if !r.OutputS3.AwsAPIKey.IsUnknown() && !r.OutputS3.AwsAPIKey.IsNull() {
			*awsAPIKey = r.OutputS3.AwsAPIKey.ValueString()
		} else {
			awsAPIKey = nil
		}
		awsSecret := new(string)
		if !r.OutputS3.AwsSecret.IsUnknown() && !r.OutputS3.AwsSecret.IsNull() {
			*awsSecret = r.OutputS3.AwsSecret.ValueString()
		} else {
			awsSecret = nil
		}
		compress8 := new(shared.OutputS3Compress)
		if !r.OutputS3.Compress.IsUnknown() && !r.OutputS3.Compress.IsNull() {
			*compress8 = shared.OutputS3Compress(r.OutputS3.Compress.ValueString())
		} else {
			compress8 = nil
		}
		compressionLevel1 := new(shared.OutputS3CompressionLevel)
		if !r.OutputS3.CompressionLevel.IsUnknown() && !r.OutputS3.CompressionLevel.IsNull() {
			*compressionLevel1 = shared.OutputS3CompressionLevel(r.OutputS3.CompressionLevel.ValueString())
		} else {
			compressionLevel1 = nil
		}
		automaticSchema1 := new(bool)
		if !r.OutputS3.AutomaticSchema.IsUnknown() && !r.OutputS3.AutomaticSchema.IsNull() {
			*automaticSchema1 = r.OutputS3.AutomaticSchema.ValueBool()
		} else {
			automaticSchema1 = nil
		}
		parquetVersion1 := new(shared.OutputS3ParquetVersion)
		if !r.OutputS3.ParquetVersion.IsUnknown() && !r.OutputS3.ParquetVersion.IsNull() {
			*parquetVersion1 = shared.OutputS3ParquetVersion(r.OutputS3.ParquetVersion.ValueString())
		} else {
			parquetVersion1 = nil
		}
		parquetDataPageVersion1 := new(shared.OutputS3DataPageVersion)
		if !r.OutputS3.ParquetDataPageVersion.IsUnknown() && !r.OutputS3.ParquetDataPageVersion.IsNull() {
			*parquetDataPageVersion1 = shared.OutputS3DataPageVersion(r.OutputS3.ParquetDataPageVersion.ValueString())
		} else {
			parquetDataPageVersion1 = nil
		}
		parquetRowGroupLength1 := new(float64)
		if !r.OutputS3.ParquetRowGroupLength.IsUnknown() && !r.OutputS3.ParquetRowGroupLength.IsNull() {
			*parquetRowGroupLength1 = r.OutputS3.ParquetRowGroupLength.ValueFloat64()
		} else {
			parquetRowGroupLength1 = nil
		}
		parquetPageSize1 := new(string)
		if !r.OutputS3.ParquetPageSize.IsUnknown() && !r.OutputS3.ParquetPageSize.IsNull() {
			*parquetPageSize1 = r.OutputS3.ParquetPageSize.ValueString()
		} else {
			parquetPageSize1 = nil
		}
		shouldLogInvalidRows1 := new(bool)
		if !r.OutputS3.ShouldLogInvalidRows.IsUnknown() && !r.OutputS3.ShouldLogInvalidRows.IsNull() {
			*shouldLogInvalidRows1 = r.OutputS3.ShouldLogInvalidRows.ValueBool()
		} else {
			shouldLogInvalidRows1 = nil
		}
		keyValueMetadata1 := make([]shared.OutputS3KeyValueMetadata, 0, len(r.OutputS3.KeyValueMetadata))
		for _, keyValueMetadataItem1 := range r.OutputS3.KeyValueMetadata {
			key1 := new(string)
			if !keyValueMetadataItem1.Key.IsUnknown() && !keyValueMetadataItem1.Key.IsNull() {
				*key1 = keyValueMetadataItem1.Key.ValueString()
			} else {
				key1 = nil
			}
			var value8 string
			value8 = keyValueMetadataItem1.Value.ValueString()

			keyValueMetadata1 = append(keyValueMetadata1, shared.OutputS3KeyValueMetadata{
				Key:   key1,
				Value: value8,
			})
		}
		enableStatistics1 := new(bool)
		if !r.OutputS3.EnableStatistics.IsUnknown() && !r.OutputS3.EnableStatistics.IsNull() {
			*enableStatistics1 = r.OutputS3.EnableStatistics.ValueBool()
		} else {
			enableStatistics1 = nil
		}
		enableWritePageIndex1 := new(bool)
		if !r.OutputS3.EnableWritePageIndex.IsUnknown() && !r.OutputS3.EnableWritePageIndex.IsNull() {
			*enableWritePageIndex1 = r.OutputS3.EnableWritePageIndex.ValueBool()
		} else {
			enableWritePageIndex1 = nil
		}
		enablePageChecksum1 := new(bool)
		if !r.OutputS3.EnablePageChecksum.IsUnknown() && !r.OutputS3.EnablePageChecksum.IsNull() {
			*enablePageChecksum1 = r.OutputS3.EnablePageChecksum.ValueBool()
		} else {
			enablePageChecksum1 = nil
		}
		emptyDirCleanupSec1 := new(float64)
		if !r.OutputS3.EmptyDirCleanupSec.IsUnknown() && !r.OutputS3.EmptyDirCleanupSec.IsNull() {
			*emptyDirCleanupSec1 = r.OutputS3.EmptyDirCleanupSec.ValueFloat64()
		} else {
			emptyDirCleanupSec1 = nil
		}
		deadletterPath1 := new(string)
		if !r.OutputS3.DeadletterPath.IsUnknown() && !r.OutputS3.DeadletterPath.IsNull() {
			*deadletterPath1 = r.OutputS3.DeadletterPath.ValueString()
		} else {
			deadletterPath1 = nil
		}
		maxRetryNum1 := new(float64)
		if !r.OutputS3.MaxRetryNum.IsUnknown() && !r.OutputS3.MaxRetryNum.IsNull() {
			*maxRetryNum1 = r.OutputS3.MaxRetryNum.ValueFloat64()
		} else {
			maxRetryNum1 = nil
		}
		outputS3 = &shared.OutputS3{
			ID:                            id12,
			Type:                          typeVar12,
			Pipeline:                      pipeline12,
			SystemFields:                  systemFields12,
			Environment:                   environment12,
			Streamtags:                    streamtags12,
			Bucket:                        bucket,
			Region:                        region,
			AwsSecretKey:                  awsSecretKey,
			AwsAuthenticationMethod:       awsAuthenticationMethod,
			Endpoint:                      endpoint,
			SignatureVersion:              signatureVersion,
			ReuseConnections:              reuseConnections,
			RejectUnauthorized:            rejectUnauthorized10,
			EnableAssumeRole:              enableAssumeRole,
			AssumeRoleArn:                 assumeRoleArn,
			AssumeRoleExternalID:          assumeRoleExternalID,
			DurationSeconds:               durationSeconds,
			StagePath:                     stagePath1,
			AddIDToStagePath:              addIDToStagePath1,
			DestPath:                      destPath1,
			ObjectACL:                     objectACL,
			StorageClass:                  storageClass,
			ServerSideEncryption:          serverSideEncryption,
			KmsKeyID:                      kmsKeyID,
			RemoveEmptyDirs:               removeEmptyDirs1,
			PartitionExpr:                 partitionExpr1,
			Format:                        format3,
			BaseFileName:                  baseFileName1,
			FileNameSuffix:                fileNameSuffix1,
			MaxFileSizeMB:                 maxFileSizeMb1,
			MaxOpenFiles:                  maxOpenFiles1,
			HeaderLine:                    headerLine1,
			WriteHighWaterMark:            writeHighWaterMark1,
			OnBackpressure:                onBackpressure10,
			DeadletterEnabled:             deadletterEnabled1,
			OnDiskFullBackpressure:        onDiskFullBackpressure1,
			MaxFileOpenTimeSec:            maxFileOpenTimeSec1,
			MaxFileIdleTimeSec:            maxFileIdleTimeSec1,
			MaxConcurrentFileParts:        maxConcurrentFileParts,
			VerifyPermissions:             verifyPermissions,
			MaxClosingFilesToBackpressure: maxClosingFilesToBackpressure,
			Description:                   description10,
			AwsAPIKey:                     awsAPIKey,
			AwsSecret:                     awsSecret,
			Compress:                      compress8,
			CompressionLevel:              compressionLevel1,
			AutomaticSchema:               automaticSchema1,
			ParquetVersion:                parquetVersion1,
			ParquetDataPageVersion:        parquetDataPageVersion1,
			ParquetRowGroupLength:         parquetRowGroupLength1,
			ParquetPageSize:               parquetPageSize1,
			ShouldLogInvalidRows:          shouldLogInvalidRows1,
			KeyValueMetadata:              keyValueMetadata1,
			EnableStatistics:              enableStatistics1,
			EnableWritePageIndex:          enableWritePageIndex1,
			EnablePageChecksum:            enablePageChecksum1,
			EmptyDirCleanupSec:            emptyDirCleanupSec1,
			DeadletterPath:                deadletterPath1,
			MaxRetryNum:                   maxRetryNum1,
		}
	}
	if outputS3 != nil {
		out = shared.Output{
			OutputS3: outputS3,
		}
	}
	var outputAzureBlob *shared.OutputAzureBlob
	if r.OutputAzureBlob != nil {
		id13 := new(string)
		if !r.OutputAzureBlob.ID.IsUnknown() && !r.OutputAzureBlob.ID.IsNull() {
			*id13 = r.OutputAzureBlob.ID.ValueString()
		} else {
			id13 = nil
		}
		typeVar13 := new(shared.OutputAzureBlobType)
		if !r.OutputAzureBlob.Type.IsUnknown() && !r.OutputAzureBlob.Type.IsNull() {
			*typeVar13 = shared.OutputAzureBlobType(r.OutputAzureBlob.Type.ValueString())
		} else {
			typeVar13 = nil
		}
		pipeline13 := new(string)
		if !r.OutputAzureBlob.Pipeline.IsUnknown() && !r.OutputAzureBlob.Pipeline.IsNull() {
			*pipeline13 = r.OutputAzureBlob.Pipeline.ValueString()
		} else {
			pipeline13 = nil
		}
		systemFields13 := make([]string, 0, len(r.OutputAzureBlob.SystemFields))
		for _, systemFieldsItem13 := range r.OutputAzureBlob.SystemFields {
			systemFields13 = append(systemFields13, systemFieldsItem13.ValueString())
		}
		environment13 := new(string)
		if !r.OutputAzureBlob.Environment.IsUnknown() && !r.OutputAzureBlob.Environment.IsNull() {
			*environment13 = r.OutputAzureBlob.Environment.ValueString()
		} else {
			environment13 = nil
		}
		streamtags13 := make([]string, 0, len(r.OutputAzureBlob.Streamtags))
		for _, streamtagsItem13 := range r.OutputAzureBlob.Streamtags {
			streamtags13 = append(streamtags13, streamtagsItem13.ValueString())
		}
		var containerName string
		containerName = r.OutputAzureBlob.ContainerName.ValueString()

		createContainer := new(bool)
		if !r.OutputAzureBlob.CreateContainer.IsUnknown() && !r.OutputAzureBlob.CreateContainer.IsNull() {
			*createContainer = r.OutputAzureBlob.CreateContainer.ValueBool()
		} else {
			createContainer = nil
		}
		destPath2 := new(string)
		if !r.OutputAzureBlob.DestPath.IsUnknown() && !r.OutputAzureBlob.DestPath.IsNull() {
			*destPath2 = r.OutputAzureBlob.DestPath.ValueString()
		} else {
			destPath2 = nil
		}
		stagePath2 := new(string)
		if !r.OutputAzureBlob.StagePath.IsUnknown() && !r.OutputAzureBlob.StagePath.IsNull() {
			*stagePath2 = r.OutputAzureBlob.StagePath.ValueString()
		} else {
			stagePath2 = nil
		}
		addIDToStagePath2 := new(bool)
		if !r.OutputAzureBlob.AddIDToStagePath.IsUnknown() && !r.OutputAzureBlob.AddIDToStagePath.IsNull() {
			*addIDToStagePath2 = r.OutputAzureBlob.AddIDToStagePath.ValueBool()
		} else {
			addIDToStagePath2 = nil
		}
		maxConcurrentFileParts1 := new(float64)
		if !r.OutputAzureBlob.MaxConcurrentFileParts.IsUnknown() && !r.OutputAzureBlob.MaxConcurrentFileParts.IsNull() {
			*maxConcurrentFileParts1 = r.OutputAzureBlob.MaxConcurrentFileParts.ValueFloat64()
		} else {
			maxConcurrentFileParts1 = nil
		}
		removeEmptyDirs2 := new(bool)
		if !r.OutputAzureBlob.RemoveEmptyDirs.IsUnknown() && !r.OutputAzureBlob.RemoveEmptyDirs.IsNull() {
			*removeEmptyDirs2 = r.OutputAzureBlob.RemoveEmptyDirs.ValueBool()
		} else {
			removeEmptyDirs2 = nil
		}
		partitionExpr2 := new(string)
		if !r.OutputAzureBlob.PartitionExpr.IsUnknown() && !r.OutputAzureBlob.PartitionExpr.IsNull() {
			*partitionExpr2 = r.OutputAzureBlob.PartitionExpr.ValueString()
		} else {
			partitionExpr2 = nil
		}
		format4 := new(shared.OutputAzureBlobDataFormat)
		if !r.OutputAzureBlob.Format.IsUnknown() && !r.OutputAzureBlob.Format.IsNull() {
			*format4 = shared.OutputAzureBlobDataFormat(r.OutputAzureBlob.Format.ValueString())
		} else {
			format4 = nil
		}
		baseFileName2 := new(string)
		if !r.OutputAzureBlob.BaseFileName.IsUnknown() && !r.OutputAzureBlob.BaseFileName.IsNull() {
			*baseFileName2 = r.OutputAzureBlob.BaseFileName.ValueString()
		} else {
			baseFileName2 = nil
		}
		fileNameSuffix2 := new(string)
		if !r.OutputAzureBlob.FileNameSuffix.IsUnknown() && !r.OutputAzureBlob.FileNameSuffix.IsNull() {
			*fileNameSuffix2 = r.OutputAzureBlob.FileNameSuffix.ValueString()
		} else {
			fileNameSuffix2 = nil
		}
		maxFileSizeMb2 := new(float64)
		if !r.OutputAzureBlob.MaxFileSizeMB.IsUnknown() && !r.OutputAzureBlob.MaxFileSizeMB.IsNull() {
			*maxFileSizeMb2 = r.OutputAzureBlob.MaxFileSizeMB.ValueFloat64()
		} else {
			maxFileSizeMb2 = nil
		}
		maxFileOpenTimeSec2 := new(float64)
		if !r.OutputAzureBlob.MaxFileOpenTimeSec.IsUnknown() && !r.OutputAzureBlob.MaxFileOpenTimeSec.IsNull() {
			*maxFileOpenTimeSec2 = r.OutputAzureBlob.MaxFileOpenTimeSec.ValueFloat64()
		} else {
			maxFileOpenTimeSec2 = nil
		}
		maxFileIdleTimeSec2 := new(float64)
		if !r.OutputAzureBlob.MaxFileIdleTimeSec.IsUnknown() && !r.OutputAzureBlob.MaxFileIdleTimeSec.IsNull() {
			*maxFileIdleTimeSec2 = r.OutputAzureBlob.MaxFileIdleTimeSec.ValueFloat64()
		} else {
			maxFileIdleTimeSec2 = nil
		}
		maxOpenFiles2 := new(float64)
		if !r.OutputAzureBlob.MaxOpenFiles.IsUnknown() && !r.OutputAzureBlob.MaxOpenFiles.IsNull() {
			*maxOpenFiles2 = r.OutputAzureBlob.MaxOpenFiles.ValueFloat64()
		} else {
			maxOpenFiles2 = nil
		}
		headerLine2 := new(string)
		if !r.OutputAzureBlob.HeaderLine.IsUnknown() && !r.OutputAzureBlob.HeaderLine.IsNull() {
			*headerLine2 = r.OutputAzureBlob.HeaderLine.ValueString()
		} else {
			headerLine2 = nil
		}
		writeHighWaterMark2 := new(float64)
		if !r.OutputAzureBlob.WriteHighWaterMark.IsUnknown() && !r.OutputAzureBlob.WriteHighWaterMark.IsNull() {
			*writeHighWaterMark2 = r.OutputAzureBlob.WriteHighWaterMark.ValueFloat64()
		} else {
			writeHighWaterMark2 = nil
		}
		onBackpressure11 := new(shared.OutputAzureBlobBackpressureBehavior)
		if !r.OutputAzureBlob.OnBackpressure.IsUnknown() && !r.OutputAzureBlob.OnBackpressure.IsNull() {
			*onBackpressure11 = shared.OutputAzureBlobBackpressureBehavior(r.OutputAzureBlob.OnBackpressure.ValueString())
		} else {
			onBackpressure11 = nil
		}
		deadletterEnabled2 := new(bool)
		if !r.OutputAzureBlob.DeadletterEnabled.IsUnknown() && !r.OutputAzureBlob.DeadletterEnabled.IsNull() {
			*deadletterEnabled2 = r.OutputAzureBlob.DeadletterEnabled.ValueBool()
		} else {
			deadletterEnabled2 = nil
		}
		onDiskFullBackpressure2 := new(shared.OutputAzureBlobDiskSpaceProtection)
		if !r.OutputAzureBlob.OnDiskFullBackpressure.IsUnknown() && !r.OutputAzureBlob.OnDiskFullBackpressure.IsNull() {
			*onDiskFullBackpressure2 = shared.OutputAzureBlobDiskSpaceProtection(r.OutputAzureBlob.OnDiskFullBackpressure.ValueString())
		} else {
			onDiskFullBackpressure2 = nil
		}
		authType10 := new(shared.OutputAzureBlobAuthenticationMethod)
		if !r.OutputAzureBlob.AuthType.IsUnknown() && !r.OutputAzureBlob.AuthType.IsNull() {
			*authType10 = shared.OutputAzureBlobAuthenticationMethod(r.OutputAzureBlob.AuthType.ValueString())
		} else {
			authType10 = nil
		}
		storageClass1 := new(shared.BlobAccessTier)
		if !r.OutputAzureBlob.StorageClass.IsUnknown() && !r.OutputAzureBlob.StorageClass.IsNull() {
			*storageClass1 = shared.BlobAccessTier(r.OutputAzureBlob.StorageClass.ValueString())
		} else {
			storageClass1 = nil
		}
		description11 := new(string)
		if !r.OutputAzureBlob.Description.IsUnknown() && !r.OutputAzureBlob.Description.IsNull() {
			*description11 = r.OutputAzureBlob.Description.ValueString()
		} else {
			description11 = nil
		}
		compress9 := new(shared.OutputAzureBlobCompress)
		if !r.OutputAzureBlob.Compress.IsUnknown() && !r.OutputAzureBlob.Compress.IsNull() {
			*compress9 = shared.OutputAzureBlobCompress(r.OutputAzureBlob.Compress.ValueString())
		} else {
			compress9 = nil
		}
		compressionLevel2 := new(shared.OutputAzureBlobCompressionLevel)
		if !r.OutputAzureBlob.CompressionLevel.IsUnknown() && !r.OutputAzureBlob.CompressionLevel.IsNull() {
			*compressionLevel2 = shared.OutputAzureBlobCompressionLevel(r.OutputAzureBlob.CompressionLevel.ValueString())
		} else {
			compressionLevel2 = nil
		}
		automaticSchema2 := new(bool)
		if !r.OutputAzureBlob.AutomaticSchema.IsUnknown() && !r.OutputAzureBlob.AutomaticSchema.IsNull() {
			*automaticSchema2 = r.OutputAzureBlob.AutomaticSchema.ValueBool()
		} else {
			automaticSchema2 = nil
		}
		parquetVersion2 := new(shared.OutputAzureBlobParquetVersion)
		if !r.OutputAzureBlob.ParquetVersion.IsUnknown() && !r.OutputAzureBlob.ParquetVersion.IsNull() {
			*parquetVersion2 = shared.OutputAzureBlobParquetVersion(r.OutputAzureBlob.ParquetVersion.ValueString())
		} else {
			parquetVersion2 = nil
		}
		parquetDataPageVersion2 := new(shared.OutputAzureBlobDataPageVersion)
		if !r.OutputAzureBlob.ParquetDataPageVersion.IsUnknown() && !r.OutputAzureBlob.ParquetDataPageVersion.IsNull() {
			*parquetDataPageVersion2 = shared.OutputAzureBlobDataPageVersion(r.OutputAzureBlob.ParquetDataPageVersion.ValueString())
		} else {
			parquetDataPageVersion2 = nil
		}
		parquetRowGroupLength2 := new(float64)
		if !r.OutputAzureBlob.ParquetRowGroupLength.IsUnknown() && !r.OutputAzureBlob.ParquetRowGroupLength.IsNull() {
			*parquetRowGroupLength2 = r.OutputAzureBlob.ParquetRowGroupLength.ValueFloat64()
		} else {
			parquetRowGroupLength2 = nil
		}
		parquetPageSize2 := new(string)
		if !r.OutputAzureBlob.ParquetPageSize.IsUnknown() && !r.OutputAzureBlob.ParquetPageSize.IsNull() {
			*parquetPageSize2 = r.OutputAzureBlob.ParquetPageSize.ValueString()
		} else {
			parquetPageSize2 = nil
		}
		shouldLogInvalidRows2 := new(bool)
		if !r.OutputAzureBlob.ShouldLogInvalidRows.IsUnknown() && !r.OutputAzureBlob.ShouldLogInvalidRows.IsNull() {
			*shouldLogInvalidRows2 = r.OutputAzureBlob.ShouldLogInvalidRows.ValueBool()
		} else {
			shouldLogInvalidRows2 = nil
		}
		keyValueMetadata2 := make([]shared.OutputAzureBlobKeyValueMetadata, 0, len(r.OutputAzureBlob.KeyValueMetadata))
		for _, keyValueMetadataItem2 := range r.OutputAzureBlob.KeyValueMetadata {
			key2 := new(string)
			if !keyValueMetadataItem2.Key.IsUnknown() && !keyValueMetadataItem2.Key.IsNull() {
				*key2 = keyValueMetadataItem2.Key.ValueString()
			} else {
				key2 = nil
			}
			var value9 string
			value9 = keyValueMetadataItem2.Value.ValueString()

			keyValueMetadata2 = append(keyValueMetadata2, shared.OutputAzureBlobKeyValueMetadata{
				Key:   key2,
				Value: value9,
			})
		}
		enableStatistics2 := new(bool)
		if !r.OutputAzureBlob.EnableStatistics.IsUnknown() && !r.OutputAzureBlob.EnableStatistics.IsNull() {
			*enableStatistics2 = r.OutputAzureBlob.EnableStatistics.ValueBool()
		} else {
			enableStatistics2 = nil
		}
		enableWritePageIndex2 := new(bool)
		if !r.OutputAzureBlob.EnableWritePageIndex.IsUnknown() && !r.OutputAzureBlob.EnableWritePageIndex.IsNull() {
			*enableWritePageIndex2 = r.OutputAzureBlob.EnableWritePageIndex.ValueBool()
		} else {
			enableWritePageIndex2 = nil
		}
		enablePageChecksum2 := new(bool)
		if !r.OutputAzureBlob.EnablePageChecksum.IsUnknown() && !r.OutputAzureBlob.EnablePageChecksum.IsNull() {
			*enablePageChecksum2 = r.OutputAzureBlob.EnablePageChecksum.ValueBool()
		} else {
			enablePageChecksum2 = nil
		}
		emptyDirCleanupSec2 := new(float64)
		if !r.OutputAzureBlob.EmptyDirCleanupSec.IsUnknown() && !r.OutputAzureBlob.EmptyDirCleanupSec.IsNull() {
			*emptyDirCleanupSec2 = r.OutputAzureBlob.EmptyDirCleanupSec.ValueFloat64()
		} else {
			emptyDirCleanupSec2 = nil
		}
		deadletterPath2 := new(string)
		if !r.OutputAzureBlob.DeadletterPath.IsUnknown() && !r.OutputAzureBlob.DeadletterPath.IsNull() {
			*deadletterPath2 = r.OutputAzureBlob.DeadletterPath.ValueString()
		} else {
			deadletterPath2 = nil
		}
		maxRetryNum2 := new(float64)
		if !r.OutputAzureBlob.MaxRetryNum.IsUnknown() && !r.OutputAzureBlob.MaxRetryNum.IsNull() {
			*maxRetryNum2 = r.OutputAzureBlob.MaxRetryNum.ValueFloat64()
		} else {
			maxRetryNum2 = nil
		}
		connectionString := new(string)
		if !r.OutputAzureBlob.ConnectionString.IsUnknown() && !r.OutputAzureBlob.ConnectionString.IsNull() {
			*connectionString = r.OutputAzureBlob.ConnectionString.ValueString()
		} else {
			connectionString = nil
		}
		textSecret8 := new(string)
		if !r.OutputAzureBlob.TextSecret.IsUnknown() && !r.OutputAzureBlob.TextSecret.IsNull() {
			*textSecret8 = r.OutputAzureBlob.TextSecret.ValueString()
		} else {
			textSecret8 = nil
		}
		storageAccountName := new(string)
		if !r.OutputAzureBlob.StorageAccountName.IsUnknown() && !r.OutputAzureBlob.StorageAccountName.IsNull() {
			*storageAccountName = r.OutputAzureBlob.StorageAccountName.ValueString()
		} else {
			storageAccountName = nil
		}
		tenantID := new(string)
		if !r.OutputAzureBlob.TenantID.IsUnknown() && !r.OutputAzureBlob.TenantID.IsNull() {
			*tenantID = r.OutputAzureBlob.TenantID.ValueString()
		} else {
			tenantID = nil
		}
		clientId1 := new(string)
		if !r.OutputAzureBlob.ClientID.IsUnknown() && !r.OutputAzureBlob.ClientID.IsNull() {
			*clientId1 = r.OutputAzureBlob.ClientID.ValueString()
		} else {
			clientId1 = nil
		}
		endpointSuffix := new(string)
		if !r.OutputAzureBlob.EndpointSuffix.IsUnknown() && !r.OutputAzureBlob.EndpointSuffix.IsNull() {
			*endpointSuffix = r.OutputAzureBlob.EndpointSuffix.ValueString()
		} else {
			endpointSuffix = nil
		}
		clientTextSecret := new(string)
		if !r.OutputAzureBlob.ClientTextSecret.IsUnknown() && !r.OutputAzureBlob.ClientTextSecret.IsNull() {
			*clientTextSecret = r.OutputAzureBlob.ClientTextSecret.ValueString()
		} else {
			clientTextSecret = nil
		}
		var certificate *shared.OutputAzureBlobCertificate
		if r.OutputAzureBlob.Certificate != nil {
			var certificateName5 string
			certificateName5 = r.OutputAzureBlob.Certificate.CertificateName.ValueString()

			certificate = &shared.OutputAzureBlobCertificate{
				CertificateName: certificateName5,
			}
		}
		outputAzureBlob = &shared.OutputAzureBlob{
			ID:                     id13,
			Type:                   typeVar13,
			Pipeline:               pipeline13,
			SystemFields:           systemFields13,
			Environment:            environment13,
			Streamtags:             streamtags13,
			ContainerName:          containerName,
			CreateContainer:        createContainer,
			DestPath:               destPath2,
			StagePath:              stagePath2,
			AddIDToStagePath:       addIDToStagePath2,
			MaxConcurrentFileParts: maxConcurrentFileParts1,
			RemoveEmptyDirs:        removeEmptyDirs2,
			PartitionExpr:          partitionExpr2,
			Format:                 format4,
			BaseFileName:           baseFileName2,
			FileNameSuffix:         fileNameSuffix2,
			MaxFileSizeMB:          maxFileSizeMb2,
			MaxFileOpenTimeSec:     maxFileOpenTimeSec2,
			MaxFileIdleTimeSec:     maxFileIdleTimeSec2,
			MaxOpenFiles:           maxOpenFiles2,
			HeaderLine:             headerLine2,
			WriteHighWaterMark:     writeHighWaterMark2,
			OnBackpressure:         onBackpressure11,
			DeadletterEnabled:      deadletterEnabled2,
			OnDiskFullBackpressure: onDiskFullBackpressure2,
			AuthType:               authType10,
			StorageClass:           storageClass1,
			Description:            description11,
			Compress:               compress9,
			CompressionLevel:       compressionLevel2,
			AutomaticSchema:        automaticSchema2,
			ParquetVersion:         parquetVersion2,
			ParquetDataPageVersion: parquetDataPageVersion2,
			ParquetRowGroupLength:  parquetRowGroupLength2,
			ParquetPageSize:        parquetPageSize2,
			ShouldLogInvalidRows:   shouldLogInvalidRows2,
			KeyValueMetadata:       keyValueMetadata2,
			EnableStatistics:       enableStatistics2,
			EnableWritePageIndex:   enableWritePageIndex2,
			EnablePageChecksum:     enablePageChecksum2,
			EmptyDirCleanupSec:     emptyDirCleanupSec2,
			DeadletterPath:         deadletterPath2,
			MaxRetryNum:            maxRetryNum2,
			ConnectionString:       connectionString,
			TextSecret:             textSecret8,
			StorageAccountName:     storageAccountName,
			TenantID:               tenantID,
			ClientID:               clientId1,
			EndpointSuffix:         endpointSuffix,
			ClientTextSecret:       clientTextSecret,
			Certificate:            certificate,
		}
	}
	if outputAzureBlob != nil {
		out = shared.Output{
			OutputAzureBlob: outputAzureBlob,
		}
	}
	var outputAzureDataExplorer *shared.OutputAzureDataExplorer
	if r.OutputAzureDataExplorer != nil {
		id14 := new(string)
		if !r.OutputAzureDataExplorer.ID.IsUnknown() && !r.OutputAzureDataExplorer.ID.IsNull() {
			*id14 = r.OutputAzureDataExplorer.ID.ValueString()
		} else {
			id14 = nil
		}
		typeVar14 := new(shared.OutputAzureDataExplorerType)
		if !r.OutputAzureDataExplorer.Type.IsUnknown() && !r.OutputAzureDataExplorer.Type.IsNull() {
			*typeVar14 = shared.OutputAzureDataExplorerType(r.OutputAzureDataExplorer.Type.ValueString())
		} else {
			typeVar14 = nil
		}
		pipeline14 := new(string)
		if !r.OutputAzureDataExplorer.Pipeline.IsUnknown() && !r.OutputAzureDataExplorer.Pipeline.IsNull() {
			*pipeline14 = r.OutputAzureDataExplorer.Pipeline.ValueString()
		} else {
			pipeline14 = nil
		}
		systemFields14 := make([]string, 0, len(r.OutputAzureDataExplorer.SystemFields))
		for _, systemFieldsItem14 := range r.OutputAzureDataExplorer.SystemFields {
			systemFields14 = append(systemFields14, systemFieldsItem14.ValueString())
		}
		environment14 := new(string)
		if !r.OutputAzureDataExplorer.Environment.IsUnknown() && !r.OutputAzureDataExplorer.Environment.IsNull() {
			*environment14 = r.OutputAzureDataExplorer.Environment.ValueString()
		} else {
			environment14 = nil
		}
		streamtags14 := make([]string, 0, len(r.OutputAzureDataExplorer.Streamtags))
		for _, streamtagsItem14 := range r.OutputAzureDataExplorer.Streamtags {
			streamtags14 = append(streamtags14, streamtagsItem14.ValueString())
		}
		var clusterURL string
		clusterURL = r.OutputAzureDataExplorer.ClusterURL.ValueString()

		var database string
		database = r.OutputAzureDataExplorer.Database.ValueString()

		var table string
		table = r.OutputAzureDataExplorer.Table.ValueString()

		validateDatabaseSettings := new(bool)
		if !r.OutputAzureDataExplorer.ValidateDatabaseSettings.IsUnknown() && !r.OutputAzureDataExplorer.ValidateDatabaseSettings.IsNull() {
			*validateDatabaseSettings = r.OutputAzureDataExplorer.ValidateDatabaseSettings.ValueBool()
		} else {
			validateDatabaseSettings = nil
		}
		ingestMode := new(shared.IngestionMode)
		if !r.OutputAzureDataExplorer.IngestMode.IsUnknown() && !r.OutputAzureDataExplorer.IngestMode.IsNull() {
			*ingestMode = shared.IngestionMode(r.OutputAzureDataExplorer.IngestMode.ValueString())
		} else {
			ingestMode = nil
		}
		oauthEndpoint := new(shared.AzureADAuthenticationEndpoint)
		if !r.OutputAzureDataExplorer.OauthEndpoint.IsUnknown() && !r.OutputAzureDataExplorer.OauthEndpoint.IsNull() {
			*oauthEndpoint = shared.AzureADAuthenticationEndpoint(r.OutputAzureDataExplorer.OauthEndpoint.ValueString())
		} else {
			oauthEndpoint = nil
		}
		var tenantId1 string
		tenantId1 = r.OutputAzureDataExplorer.TenantID.ValueString()

		var clientId2 string
		clientId2 = r.OutputAzureDataExplorer.ClientID.ValueString()

		var scope1 string
		scope1 = r.OutputAzureDataExplorer.Scope.ValueString()

		oauthType := new(shared.OutputAzureDataExplorerAuthenticationMethod)
		if !r.OutputAzureDataExplorer.OauthType.IsUnknown() && !r.OutputAzureDataExplorer.OauthType.IsNull() {
			*oauthType = shared.OutputAzureDataExplorerAuthenticationMethod(r.OutputAzureDataExplorer.OauthType.ValueString())
		} else {
			oauthType = nil
		}
		description12 := new(string)
		if !r.OutputAzureDataExplorer.Description.IsUnknown() && !r.OutputAzureDataExplorer.Description.IsNull() {
			*description12 = r.OutputAzureDataExplorer.Description.ValueString()
		} else {
			description12 = nil
		}
		clientSecret := new(string)
		if !r.OutputAzureDataExplorer.ClientSecret.IsUnknown() && !r.OutputAzureDataExplorer.ClientSecret.IsNull() {
			*clientSecret = r.OutputAzureDataExplorer.ClientSecret.ValueString()
		} else {
			clientSecret = nil
		}
		textSecret9 := new(string)
		if !r.OutputAzureDataExplorer.TextSecret.IsUnknown() && !r.OutputAzureDataExplorer.TextSecret.IsNull() {
			*textSecret9 = r.OutputAzureDataExplorer.TextSecret.ValueString()
		} else {
			textSecret9 = nil
		}
		var certificate1 *shared.OutputAzureDataExplorerCertificate
		if r.OutputAzureDataExplorer.Certificate != nil {
			certificateName6 := new(string)
			if !r.OutputAzureDataExplorer.Certificate.CertificateName.IsUnknown() && !r.OutputAzureDataExplorer.Certificate.CertificateName.IsNull() {
				*certificateName6 = r.OutputAzureDataExplorer.Certificate.CertificateName.ValueString()
			} else {
				certificateName6 = nil
			}
			certificate1 = &shared.OutputAzureDataExplorerCertificate{
				CertificateName: certificateName6,
			}
		}
		ingestURL := new(string)
		if !r.OutputAzureDataExplorer.IngestURL.IsUnknown() && !r.OutputAzureDataExplorer.IngestURL.IsNull() {
			*ingestURL = r.OutputAzureDataExplorer.IngestURL.ValueString()
		} else {
			ingestURL = nil
		}
		onBackpressure12 := new(shared.OutputAzureDataExplorerBackpressureBehavior)
		if !r.OutputAzureDataExplorer.OnBackpressure.IsUnknown() && !r.OutputAzureDataExplorer.OnBackpressure.IsNull() {
			*onBackpressure12 = shared.OutputAzureDataExplorerBackpressureBehavior(r.OutputAzureDataExplorer.OnBackpressure.ValueString())
		} else {
			onBackpressure12 = nil
		}
		isMappingObj := new(bool)
		if !r.OutputAzureDataExplorer.IsMappingObj.IsUnknown() && !r.OutputAzureDataExplorer.IsMappingObj.IsNull() {
			*isMappingObj = r.OutputAzureDataExplorer.IsMappingObj.ValueBool()
		} else {
			isMappingObj = nil
		}
		format5 := new(shared.OutputAzureDataExplorerDataFormat)
		if !r.OutputAzureDataExplorer.Format.IsUnknown() && !r.OutputAzureDataExplorer.Format.IsNull() {
			*format5 = shared.OutputAzureDataExplorerDataFormat(r.OutputAzureDataExplorer.Format.ValueString())
		} else {
			format5 = nil
		}
		stagePath3 := new(string)
		if !r.OutputAzureDataExplorer.StagePath.IsUnknown() && !r.OutputAzureDataExplorer.StagePath.IsNull() {
			*stagePath3 = r.OutputAzureDataExplorer.StagePath.ValueString()
		} else {
			stagePath3 = nil
		}
		fileNameSuffix3 := new(string)
		if !r.OutputAzureDataExplorer.FileNameSuffix.IsUnknown() && !r.OutputAzureDataExplorer.FileNameSuffix.IsNull() {
			*fileNameSuffix3 = r.OutputAzureDataExplorer.FileNameSuffix.ValueString()
		} else {
			fileNameSuffix3 = nil
		}
		maxFileSizeMb3 := new(float64)
		if !r.OutputAzureDataExplorer.MaxFileSizeMB.IsUnknown() && !r.OutputAzureDataExplorer.MaxFileSizeMB.IsNull() {
			*maxFileSizeMb3 = r.OutputAzureDataExplorer.MaxFileSizeMB.ValueFloat64()
		} else {
			maxFileSizeMb3 = nil
		}
		maxFileOpenTimeSec3 := new(float64)
		if !r.OutputAzureDataExplorer.MaxFileOpenTimeSec.IsUnknown() && !r.OutputAzureDataExplorer.MaxFileOpenTimeSec.IsNull() {
			*maxFileOpenTimeSec3 = r.OutputAzureDataExplorer.MaxFileOpenTimeSec.ValueFloat64()
		} else {
			maxFileOpenTimeSec3 = nil
		}
		maxFileIdleTimeSec3 := new(float64)
		if !r.OutputAzureDataExplorer.MaxFileIdleTimeSec.IsUnknown() && !r.OutputAzureDataExplorer.MaxFileIdleTimeSec.IsNull() {
			*maxFileIdleTimeSec3 = r.OutputAzureDataExplorer.MaxFileIdleTimeSec.ValueFloat64()
		} else {
			maxFileIdleTimeSec3 = nil
		}
		maxOpenFiles3 := new(float64)
		if !r.OutputAzureDataExplorer.MaxOpenFiles.IsUnknown() && !r.OutputAzureDataExplorer.MaxOpenFiles.IsNull() {
			*maxOpenFiles3 = r.OutputAzureDataExplorer.MaxOpenFiles.ValueFloat64()
		} else {
			maxOpenFiles3 = nil
		}
		maxConcurrentFileParts2 := new(float64)
		if !r.OutputAzureDataExplorer.MaxConcurrentFileParts.IsUnknown() && !r.OutputAzureDataExplorer.MaxConcurrentFileParts.IsNull() {
			*maxConcurrentFileParts2 = r.OutputAzureDataExplorer.MaxConcurrentFileParts.ValueFloat64()
		} else {
			maxConcurrentFileParts2 = nil
		}
		onDiskFullBackpressure3 := new(shared.OutputAzureDataExplorerDiskSpaceProtection)
		if !r.OutputAzureDataExplorer.OnDiskFullBackpressure.IsUnknown() && !r.OutputAzureDataExplorer.OnDiskFullBackpressure.IsNull() {
			*onDiskFullBackpressure3 = shared.OutputAzureDataExplorerDiskSpaceProtection(r.OutputAzureDataExplorer.OnDiskFullBackpressure.ValueString())
		} else {
			onDiskFullBackpressure3 = nil
		}
		addIDToStagePath3 := new(bool)
		if !r.OutputAzureDataExplorer.AddIDToStagePath.IsUnknown() && !r.OutputAzureDataExplorer.AddIDToStagePath.IsNull() {
			*addIDToStagePath3 = r.OutputAzureDataExplorer.AddIDToStagePath.ValueBool()
		} else {
			addIDToStagePath3 = nil
		}
		removeEmptyDirs3 := new(bool)
		if !r.OutputAzureDataExplorer.RemoveEmptyDirs.IsUnknown() && !r.OutputAzureDataExplorer.RemoveEmptyDirs.IsNull() {
			*removeEmptyDirs3 = r.OutputAzureDataExplorer.RemoveEmptyDirs.ValueBool()
		} else {
			removeEmptyDirs3 = nil
		}
		deadletterEnabled3 := new(bool)
		if !r.OutputAzureDataExplorer.DeadletterEnabled.IsUnknown() && !r.OutputAzureDataExplorer.DeadletterEnabled.IsNull() {
			*deadletterEnabled3 = r.OutputAzureDataExplorer.DeadletterEnabled.ValueBool()
		} else {
			deadletterEnabled3 = nil
		}
		timeoutSec5 := new(float64)
		if !r.OutputAzureDataExplorer.TimeoutSec.IsUnknown() && !r.OutputAzureDataExplorer.TimeoutSec.IsNull() {
			*timeoutSec5 = r.OutputAzureDataExplorer.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec5 = nil
		}
		flushImmediately := new(bool)
		if !r.OutputAzureDataExplorer.FlushImmediately.IsUnknown() && !r.OutputAzureDataExplorer.FlushImmediately.IsNull() {
			*flushImmediately = r.OutputAzureDataExplorer.FlushImmediately.ValueBool()
		} else {
			flushImmediately = nil
		}
		retainBlobOnSuccess := new(bool)
		if !r.OutputAzureDataExplorer.RetainBlobOnSuccess.IsUnknown() && !r.OutputAzureDataExplorer.RetainBlobOnSuccess.IsNull() {
			*retainBlobOnSuccess = r.OutputAzureDataExplorer.RetainBlobOnSuccess.ValueBool()
		} else {
			retainBlobOnSuccess = nil
		}
		extentTags := make([]shared.ExtentTags, 0, len(r.OutputAzureDataExplorer.ExtentTags))
		for _, extentTagsItem := range r.OutputAzureDataExplorer.ExtentTags {
			prefix := new(shared.PrefixOptional)
			if !extentTagsItem.Prefix.IsUnknown() && !extentTagsItem.Prefix.IsNull() {
				*prefix = shared.PrefixOptional(extentTagsItem.Prefix.ValueString())
			} else {
				prefix = nil
			}
			var value10 string
			value10 = extentTagsItem.Value.ValueString()

			extentTags = append(extentTags, shared.ExtentTags{
				Prefix: prefix,
				Value:  value10,
			})
		}
		ingestIfNotExists := make([]shared.IngestIfNotExists, 0, len(r.OutputAzureDataExplorer.IngestIfNotExists))
		for _, ingestIfNotExistsItem := range r.OutputAzureDataExplorer.IngestIfNotExists {
			var value11 string
			value11 = ingestIfNotExistsItem.Value.ValueString()

			ingestIfNotExists = append(ingestIfNotExists, shared.IngestIfNotExists{
				Value: value11,
			})
		}
		reportLevel := new(shared.ReportLevel)
		if !r.OutputAzureDataExplorer.ReportLevel.IsUnknown() && !r.OutputAzureDataExplorer.ReportLevel.IsNull() {
			*reportLevel = shared.ReportLevel(r.OutputAzureDataExplorer.ReportLevel.ValueString())
		} else {
			reportLevel = nil
		}
		reportMethod := new(shared.ReportMethod)
		if !r.OutputAzureDataExplorer.ReportMethod.IsUnknown() && !r.OutputAzureDataExplorer.ReportMethod.IsNull() {
			*reportMethod = shared.ReportMethod(r.OutputAzureDataExplorer.ReportMethod.ValueString())
		} else {
			reportMethod = nil
		}
		additionalProperties := make([]shared.AdditionalProperties, 0, len(r.OutputAzureDataExplorer.AdditionalProperties))
		for _, additionalPropertiesItem := range r.OutputAzureDataExplorer.AdditionalProperties {
			var key3 string
			key3 = additionalPropertiesItem.Key.ValueString()

			var value12 string
			value12 = additionalPropertiesItem.Value.ValueString()

			additionalProperties = append(additionalProperties, shared.AdditionalProperties{
				Key:   key3,
				Value: value12,
			})
		}
		responseRetrySettings5 := make([]shared.OutputAzureDataExplorerResponseRetrySettings, 0, len(r.OutputAzureDataExplorer.ResponseRetrySettings))
		for _, responseRetrySettingsItem5 := range r.OutputAzureDataExplorer.ResponseRetrySettings {
			var httpStatus5 float64
			httpStatus5 = responseRetrySettingsItem5.HTTPStatus.ValueFloat64()

			initialBackoff10 := new(float64)
			if !responseRetrySettingsItem5.InitialBackoff.IsUnknown() && !responseRetrySettingsItem5.InitialBackoff.IsNull() {
				*initialBackoff10 = responseRetrySettingsItem5.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff10 = nil
			}
			backoffRate10 := new(float64)
			if !responseRetrySettingsItem5.BackoffRate.IsUnknown() && !responseRetrySettingsItem5.BackoffRate.IsNull() {
				*backoffRate10 = responseRetrySettingsItem5.BackoffRate.ValueFloat64()
			} else {
				backoffRate10 = nil
			}
			maxBackoff10 := new(float64)
			if !responseRetrySettingsItem5.MaxBackoff.IsUnknown() && !responseRetrySettingsItem5.MaxBackoff.IsNull() {
				*maxBackoff10 = responseRetrySettingsItem5.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff10 = nil
			}
			responseRetrySettings5 = append(responseRetrySettings5, shared.OutputAzureDataExplorerResponseRetrySettings{
				HTTPStatus:     httpStatus5,
				InitialBackoff: initialBackoff10,
				BackoffRate:    backoffRate10,
				MaxBackoff:     maxBackoff10,
			})
		}
		var timeoutRetrySettings5 *shared.OutputAzureDataExplorerTimeoutRetrySettings
		if r.OutputAzureDataExplorer.TimeoutRetrySettings != nil {
			timeoutRetry5 := new(bool)
			if !r.OutputAzureDataExplorer.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputAzureDataExplorer.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry5 = r.OutputAzureDataExplorer.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry5 = nil
			}
			initialBackoff11 := new(float64)
			if !r.OutputAzureDataExplorer.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputAzureDataExplorer.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff11 = r.OutputAzureDataExplorer.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff11 = nil
			}
			backoffRate11 := new(float64)
			if !r.OutputAzureDataExplorer.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputAzureDataExplorer.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate11 = r.OutputAzureDataExplorer.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate11 = nil
			}
			maxBackoff11 := new(float64)
			if !r.OutputAzureDataExplorer.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputAzureDataExplorer.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff11 = r.OutputAzureDataExplorer.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff11 = nil
			}
			timeoutRetrySettings5 = &shared.OutputAzureDataExplorerTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry5,
				InitialBackoff: initialBackoff11,
				BackoffRate:    backoffRate11,
				MaxBackoff:     maxBackoff11,
			}
		}
		responseHonorRetryAfterHeader5 := new(bool)
		if !r.OutputAzureDataExplorer.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputAzureDataExplorer.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader5 = r.OutputAzureDataExplorer.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader5 = nil
		}
		compress10 := new(shared.OutputAzureDataExplorerCompress)
		if !r.OutputAzureDataExplorer.Compress.IsUnknown() && !r.OutputAzureDataExplorer.Compress.IsNull() {
			*compress10 = shared.OutputAzureDataExplorerCompress(r.OutputAzureDataExplorer.Compress.ValueString())
		} else {
			compress10 = nil
		}
		mappingRef := new(string)
		if !r.OutputAzureDataExplorer.MappingRef.IsUnknown() && !r.OutputAzureDataExplorer.MappingRef.IsNull() {
			*mappingRef = r.OutputAzureDataExplorer.MappingRef.ValueString()
		} else {
			mappingRef = nil
		}
		concurrency5 := new(float64)
		if !r.OutputAzureDataExplorer.Concurrency.IsUnknown() && !r.OutputAzureDataExplorer.Concurrency.IsNull() {
			*concurrency5 = r.OutputAzureDataExplorer.Concurrency.ValueFloat64()
		} else {
			concurrency5 = nil
		}
		maxPayloadSizeKb5 := new(float64)
		if !r.OutputAzureDataExplorer.MaxPayloadSizeKB.IsUnknown() && !r.OutputAzureDataExplorer.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb5 = r.OutputAzureDataExplorer.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb5 = nil
		}
		maxPayloadEvents5 := new(float64)
		if !r.OutputAzureDataExplorer.MaxPayloadEvents.IsUnknown() && !r.OutputAzureDataExplorer.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents5 = r.OutputAzureDataExplorer.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents5 = nil
		}
		flushPeriodSec5 := new(float64)
		if !r.OutputAzureDataExplorer.FlushPeriodSec.IsUnknown() && !r.OutputAzureDataExplorer.FlushPeriodSec.IsNull() {
			*flushPeriodSec5 = r.OutputAzureDataExplorer.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec5 = nil
		}
		rejectUnauthorized11 := new(bool)
		if !r.OutputAzureDataExplorer.RejectUnauthorized.IsUnknown() && !r.OutputAzureDataExplorer.RejectUnauthorized.IsNull() {
			*rejectUnauthorized11 = r.OutputAzureDataExplorer.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized11 = nil
		}
		useRoundRobinDns5 := new(bool)
		if !r.OutputAzureDataExplorer.UseRoundRobinDNS.IsUnknown() && !r.OutputAzureDataExplorer.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns5 = r.OutputAzureDataExplorer.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns5 = nil
		}
		keepAlive2 := new(bool)
		if !r.OutputAzureDataExplorer.KeepAlive.IsUnknown() && !r.OutputAzureDataExplorer.KeepAlive.IsNull() {
			*keepAlive2 = r.OutputAzureDataExplorer.KeepAlive.ValueBool()
		} else {
			keepAlive2 = nil
		}
		pqMaxFileSize9 := new(string)
		if !r.OutputAzureDataExplorer.PqMaxFileSize.IsUnknown() && !r.OutputAzureDataExplorer.PqMaxFileSize.IsNull() {
			*pqMaxFileSize9 = r.OutputAzureDataExplorer.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize9 = nil
		}
		pqMaxSize9 := new(string)
		if !r.OutputAzureDataExplorer.PqMaxSize.IsUnknown() && !r.OutputAzureDataExplorer.PqMaxSize.IsNull() {
			*pqMaxSize9 = r.OutputAzureDataExplorer.PqMaxSize.ValueString()
		} else {
			pqMaxSize9 = nil
		}
		pqPath9 := new(string)
		if !r.OutputAzureDataExplorer.PqPath.IsUnknown() && !r.OutputAzureDataExplorer.PqPath.IsNull() {
			*pqPath9 = r.OutputAzureDataExplorer.PqPath.ValueString()
		} else {
			pqPath9 = nil
		}
		pqCompress9 := new(shared.OutputAzureDataExplorerCompression)
		if !r.OutputAzureDataExplorer.PqCompress.IsUnknown() && !r.OutputAzureDataExplorer.PqCompress.IsNull() {
			*pqCompress9 = shared.OutputAzureDataExplorerCompression(r.OutputAzureDataExplorer.PqCompress.ValueString())
		} else {
			pqCompress9 = nil
		}
		pqOnBackpressure9 := new(shared.OutputAzureDataExplorerQueueFullBehavior)
		if !r.OutputAzureDataExplorer.PqOnBackpressure.IsUnknown() && !r.OutputAzureDataExplorer.PqOnBackpressure.IsNull() {
			*pqOnBackpressure9 = shared.OutputAzureDataExplorerQueueFullBehavior(r.OutputAzureDataExplorer.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure9 = nil
		}
		pqMode9 := new(shared.OutputAzureDataExplorerMode)
		if !r.OutputAzureDataExplorer.PqMode.IsUnknown() && !r.OutputAzureDataExplorer.PqMode.IsNull() {
			*pqMode9 = shared.OutputAzureDataExplorerMode(r.OutputAzureDataExplorer.PqMode.ValueString())
		} else {
			pqMode9 = nil
		}
		var pqControls9 *shared.OutputAzureDataExplorerPqControls
		if r.OutputAzureDataExplorer.PqControls != nil {
			pqControls9 = &shared.OutputAzureDataExplorerPqControls{}
		}
		outputAzureDataExplorer = &shared.OutputAzureDataExplorer{
			ID:                            id14,
			Type:                          typeVar14,
			Pipeline:                      pipeline14,
			SystemFields:                  systemFields14,
			Environment:                   environment14,
			Streamtags:                    streamtags14,
			ClusterURL:                    clusterURL,
			Database:                      database,
			Table:                         table,
			ValidateDatabaseSettings:      validateDatabaseSettings,
			IngestMode:                    ingestMode,
			OauthEndpoint:                 oauthEndpoint,
			TenantID:                      tenantId1,
			ClientID:                      clientId2,
			Scope:                         scope1,
			OauthType:                     oauthType,
			Description:                   description12,
			ClientSecret:                  clientSecret,
			TextSecret:                    textSecret9,
			Certificate:                   certificate1,
			IngestURL:                     ingestURL,
			OnBackpressure:                onBackpressure12,
			IsMappingObj:                  isMappingObj,
			Format:                        format5,
			StagePath:                     stagePath3,
			FileNameSuffix:                fileNameSuffix3,
			MaxFileSizeMB:                 maxFileSizeMb3,
			MaxFileOpenTimeSec:            maxFileOpenTimeSec3,
			MaxFileIdleTimeSec:            maxFileIdleTimeSec3,
			MaxOpenFiles:                  maxOpenFiles3,
			MaxConcurrentFileParts:        maxConcurrentFileParts2,
			OnDiskFullBackpressure:        onDiskFullBackpressure3,
			AddIDToStagePath:              addIDToStagePath3,
			RemoveEmptyDirs:               removeEmptyDirs3,
			DeadletterEnabled:             deadletterEnabled3,
			TimeoutSec:                    timeoutSec5,
			FlushImmediately:              flushImmediately,
			RetainBlobOnSuccess:           retainBlobOnSuccess,
			ExtentTags:                    extentTags,
			IngestIfNotExists:             ingestIfNotExists,
			ReportLevel:                   reportLevel,
			ReportMethod:                  reportMethod,
			AdditionalProperties:          additionalProperties,
			ResponseRetrySettings:         responseRetrySettings5,
			TimeoutRetrySettings:          timeoutRetrySettings5,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader5,
			Compress:                      compress10,
			MappingRef:                    mappingRef,
			Concurrency:                   concurrency5,
			MaxPayloadSizeKB:              maxPayloadSizeKb5,
			MaxPayloadEvents:              maxPayloadEvents5,
			FlushPeriodSec:                flushPeriodSec5,
			RejectUnauthorized:            rejectUnauthorized11,
			UseRoundRobinDNS:              useRoundRobinDns5,
			KeepAlive:                     keepAlive2,
			PqMaxFileSize:                 pqMaxFileSize9,
			PqMaxSize:                     pqMaxSize9,
			PqPath:                        pqPath9,
			PqCompress:                    pqCompress9,
			PqOnBackpressure:              pqOnBackpressure9,
			PqMode:                        pqMode9,
			PqControls:                    pqControls9,
		}
	}
	if outputAzureDataExplorer != nil {
		out = shared.Output{
			OutputAzureDataExplorer: outputAzureDataExplorer,
		}
	}
	var outputAzureLogs *shared.OutputAzureLogs
	if r.OutputAzureLogs != nil {
		id15 := new(string)
		if !r.OutputAzureLogs.ID.IsUnknown() && !r.OutputAzureLogs.ID.IsNull() {
			*id15 = r.OutputAzureLogs.ID.ValueString()
		} else {
			id15 = nil
		}
		typeVar15 := shared.OutputAzureLogsType(r.OutputAzureLogs.Type.ValueString())
		pipeline15 := new(string)
		if !r.OutputAzureLogs.Pipeline.IsUnknown() && !r.OutputAzureLogs.Pipeline.IsNull() {
			*pipeline15 = r.OutputAzureLogs.Pipeline.ValueString()
		} else {
			pipeline15 = nil
		}
		systemFields15 := make([]string, 0, len(r.OutputAzureLogs.SystemFields))
		for _, systemFieldsItem15 := range r.OutputAzureLogs.SystemFields {
			systemFields15 = append(systemFields15, systemFieldsItem15.ValueString())
		}
		environment15 := new(string)
		if !r.OutputAzureLogs.Environment.IsUnknown() && !r.OutputAzureLogs.Environment.IsNull() {
			*environment15 = r.OutputAzureLogs.Environment.ValueString()
		} else {
			environment15 = nil
		}
		streamtags15 := make([]string, 0, len(r.OutputAzureLogs.Streamtags))
		for _, streamtagsItem15 := range r.OutputAzureLogs.Streamtags {
			streamtags15 = append(streamtags15, streamtagsItem15.ValueString())
		}
		logType := new(string)
		if !r.OutputAzureLogs.LogType.IsUnknown() && !r.OutputAzureLogs.LogType.IsNull() {
			*logType = r.OutputAzureLogs.LogType.ValueString()
		} else {
			logType = nil
		}
		resourceID := new(string)
		if !r.OutputAzureLogs.ResourceID.IsUnknown() && !r.OutputAzureLogs.ResourceID.IsNull() {
			*resourceID = r.OutputAzureLogs.ResourceID.ValueString()
		} else {
			resourceID = nil
		}
		concurrency6 := new(float64)
		if !r.OutputAzureLogs.Concurrency.IsUnknown() && !r.OutputAzureLogs.Concurrency.IsNull() {
			*concurrency6 = r.OutputAzureLogs.Concurrency.ValueFloat64()
		} else {
			concurrency6 = nil
		}
		maxPayloadSizeKb6 := new(float64)
		if !r.OutputAzureLogs.MaxPayloadSizeKB.IsUnknown() && !r.OutputAzureLogs.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb6 = r.OutputAzureLogs.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb6 = nil
		}
		maxPayloadEvents6 := new(float64)
		if !r.OutputAzureLogs.MaxPayloadEvents.IsUnknown() && !r.OutputAzureLogs.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents6 = r.OutputAzureLogs.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents6 = nil
		}
		compress11 := new(bool)
		if !r.OutputAzureLogs.Compress.IsUnknown() && !r.OutputAzureLogs.Compress.IsNull() {
			*compress11 = r.OutputAzureLogs.Compress.ValueBool()
		} else {
			compress11 = nil
		}
		rejectUnauthorized12 := new(bool)
		if !r.OutputAzureLogs.RejectUnauthorized.IsUnknown() && !r.OutputAzureLogs.RejectUnauthorized.IsNull() {
			*rejectUnauthorized12 = r.OutputAzureLogs.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized12 = nil
		}
		timeoutSec6 := new(float64)
		if !r.OutputAzureLogs.TimeoutSec.IsUnknown() && !r.OutputAzureLogs.TimeoutSec.IsNull() {
			*timeoutSec6 = r.OutputAzureLogs.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec6 = nil
		}
		flushPeriodSec6 := new(float64)
		if !r.OutputAzureLogs.FlushPeriodSec.IsUnknown() && !r.OutputAzureLogs.FlushPeriodSec.IsNull() {
			*flushPeriodSec6 = r.OutputAzureLogs.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec6 = nil
		}
		extraHTTPHeaders5 := make([]shared.OutputAzureLogsExtraHTTPHeaders, 0, len(r.OutputAzureLogs.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem5 := range r.OutputAzureLogs.ExtraHTTPHeaders {
			name7 := new(string)
			if !extraHTTPHeadersItem5.Name.IsUnknown() && !extraHTTPHeadersItem5.Name.IsNull() {
				*name7 = extraHTTPHeadersItem5.Name.ValueString()
			} else {
				name7 = nil
			}
			var value13 string
			value13 = extraHTTPHeadersItem5.Value.ValueString()

			extraHTTPHeaders5 = append(extraHTTPHeaders5, shared.OutputAzureLogsExtraHTTPHeaders{
				Name:  name7,
				Value: value13,
			})
		}
		useRoundRobinDns6 := new(bool)
		if !r.OutputAzureLogs.UseRoundRobinDNS.IsUnknown() && !r.OutputAzureLogs.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns6 = r.OutputAzureLogs.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns6 = nil
		}
		failedRequestLoggingMode5 := new(shared.OutputAzureLogsFailedRequestLoggingMode)
		if !r.OutputAzureLogs.FailedRequestLoggingMode.IsUnknown() && !r.OutputAzureLogs.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode5 = shared.OutputAzureLogsFailedRequestLoggingMode(r.OutputAzureLogs.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode5 = nil
		}
		safeHeaders5 := make([]string, 0, len(r.OutputAzureLogs.SafeHeaders))
		for _, safeHeadersItem5 := range r.OutputAzureLogs.SafeHeaders {
			safeHeaders5 = append(safeHeaders5, safeHeadersItem5.ValueString())
		}
		apiURL := new(string)
		if !r.OutputAzureLogs.APIURL.IsUnknown() && !r.OutputAzureLogs.APIURL.IsNull() {
			*apiURL = r.OutputAzureLogs.APIURL.ValueString()
		} else {
			apiURL = nil
		}
		responseRetrySettings6 := make([]shared.OutputAzureLogsResponseRetrySettings, 0, len(r.OutputAzureLogs.ResponseRetrySettings))
		for _, responseRetrySettingsItem6 := range r.OutputAzureLogs.ResponseRetrySettings {
			var httpStatus6 float64
			httpStatus6 = responseRetrySettingsItem6.HTTPStatus.ValueFloat64()

			initialBackoff12 := new(float64)
			if !responseRetrySettingsItem6.InitialBackoff.IsUnknown() && !responseRetrySettingsItem6.InitialBackoff.IsNull() {
				*initialBackoff12 = responseRetrySettingsItem6.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff12 = nil
			}
			backoffRate12 := new(float64)
			if !responseRetrySettingsItem6.BackoffRate.IsUnknown() && !responseRetrySettingsItem6.BackoffRate.IsNull() {
				*backoffRate12 = responseRetrySettingsItem6.BackoffRate.ValueFloat64()
			} else {
				backoffRate12 = nil
			}
			maxBackoff12 := new(float64)
			if !responseRetrySettingsItem6.MaxBackoff.IsUnknown() && !responseRetrySettingsItem6.MaxBackoff.IsNull() {
				*maxBackoff12 = responseRetrySettingsItem6.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff12 = nil
			}
			responseRetrySettings6 = append(responseRetrySettings6, shared.OutputAzureLogsResponseRetrySettings{
				HTTPStatus:     httpStatus6,
				InitialBackoff: initialBackoff12,
				BackoffRate:    backoffRate12,
				MaxBackoff:     maxBackoff12,
			})
		}
		var timeoutRetrySettings6 *shared.OutputAzureLogsTimeoutRetrySettings
		if r.OutputAzureLogs.TimeoutRetrySettings != nil {
			timeoutRetry6 := new(bool)
			if !r.OutputAzureLogs.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputAzureLogs.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry6 = r.OutputAzureLogs.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry6 = nil
			}
			initialBackoff13 := new(float64)
			if !r.OutputAzureLogs.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputAzureLogs.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff13 = r.OutputAzureLogs.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff13 = nil
			}
			backoffRate13 := new(float64)
			if !r.OutputAzureLogs.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputAzureLogs.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate13 = r.OutputAzureLogs.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate13 = nil
			}
			maxBackoff13 := new(float64)
			if !r.OutputAzureLogs.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputAzureLogs.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff13 = r.OutputAzureLogs.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff13 = nil
			}
			timeoutRetrySettings6 = &shared.OutputAzureLogsTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry6,
				InitialBackoff: initialBackoff13,
				BackoffRate:    backoffRate13,
				MaxBackoff:     maxBackoff13,
			}
		}
		responseHonorRetryAfterHeader6 := new(bool)
		if !r.OutputAzureLogs.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputAzureLogs.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader6 = r.OutputAzureLogs.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader6 = nil
		}
		onBackpressure13 := new(shared.OutputAzureLogsBackpressureBehavior)
		if !r.OutputAzureLogs.OnBackpressure.IsUnknown() && !r.OutputAzureLogs.OnBackpressure.IsNull() {
			*onBackpressure13 = shared.OutputAzureLogsBackpressureBehavior(r.OutputAzureLogs.OnBackpressure.ValueString())
		} else {
			onBackpressure13 = nil
		}
		authType11 := new(shared.OutputAzureLogsAuthenticationMethod)
		if !r.OutputAzureLogs.AuthType.IsUnknown() && !r.OutputAzureLogs.AuthType.IsNull() {
			*authType11 = shared.OutputAzureLogsAuthenticationMethod(r.OutputAzureLogs.AuthType.ValueString())
		} else {
			authType11 = nil
		}
		description13 := new(string)
		if !r.OutputAzureLogs.Description.IsUnknown() && !r.OutputAzureLogs.Description.IsNull() {
			*description13 = r.OutputAzureLogs.Description.ValueString()
		} else {
			description13 = nil
		}
		pqMaxFileSize10 := new(string)
		if !r.OutputAzureLogs.PqMaxFileSize.IsUnknown() && !r.OutputAzureLogs.PqMaxFileSize.IsNull() {
			*pqMaxFileSize10 = r.OutputAzureLogs.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize10 = nil
		}
		pqMaxSize10 := new(string)
		if !r.OutputAzureLogs.PqMaxSize.IsUnknown() && !r.OutputAzureLogs.PqMaxSize.IsNull() {
			*pqMaxSize10 = r.OutputAzureLogs.PqMaxSize.ValueString()
		} else {
			pqMaxSize10 = nil
		}
		pqPath10 := new(string)
		if !r.OutputAzureLogs.PqPath.IsUnknown() && !r.OutputAzureLogs.PqPath.IsNull() {
			*pqPath10 = r.OutputAzureLogs.PqPath.ValueString()
		} else {
			pqPath10 = nil
		}
		pqCompress10 := new(shared.OutputAzureLogsCompression)
		if !r.OutputAzureLogs.PqCompress.IsUnknown() && !r.OutputAzureLogs.PqCompress.IsNull() {
			*pqCompress10 = shared.OutputAzureLogsCompression(r.OutputAzureLogs.PqCompress.ValueString())
		} else {
			pqCompress10 = nil
		}
		pqOnBackpressure10 := new(shared.OutputAzureLogsQueueFullBehavior)
		if !r.OutputAzureLogs.PqOnBackpressure.IsUnknown() && !r.OutputAzureLogs.PqOnBackpressure.IsNull() {
			*pqOnBackpressure10 = shared.OutputAzureLogsQueueFullBehavior(r.OutputAzureLogs.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure10 = nil
		}
		pqMode10 := new(shared.OutputAzureLogsMode)
		if !r.OutputAzureLogs.PqMode.IsUnknown() && !r.OutputAzureLogs.PqMode.IsNull() {
			*pqMode10 = shared.OutputAzureLogsMode(r.OutputAzureLogs.PqMode.ValueString())
		} else {
			pqMode10 = nil
		}
		var pqControls10 *shared.OutputAzureLogsPqControls
		if r.OutputAzureLogs.PqControls != nil {
			pqControls10 = &shared.OutputAzureLogsPqControls{}
		}
		workspaceID := new(string)
		if !r.OutputAzureLogs.WorkspaceID.IsUnknown() && !r.OutputAzureLogs.WorkspaceID.IsNull() {
			*workspaceID = r.OutputAzureLogs.WorkspaceID.ValueString()
		} else {
			workspaceID = nil
		}
		workspaceKey := new(string)
		if !r.OutputAzureLogs.WorkspaceKey.IsUnknown() && !r.OutputAzureLogs.WorkspaceKey.IsNull() {
			*workspaceKey = r.OutputAzureLogs.WorkspaceKey.ValueString()
		} else {
			workspaceKey = nil
		}
		keypairSecret := new(string)
		if !r.OutputAzureLogs.KeypairSecret.IsUnknown() && !r.OutputAzureLogs.KeypairSecret.IsNull() {
			*keypairSecret = r.OutputAzureLogs.KeypairSecret.ValueString()
		} else {
			keypairSecret = nil
		}
		outputAzureLogs = &shared.OutputAzureLogs{
			ID:                            id15,
			Type:                          typeVar15,
			Pipeline:                      pipeline15,
			SystemFields:                  systemFields15,
			Environment:                   environment15,
			Streamtags:                    streamtags15,
			LogType:                       logType,
			ResourceID:                    resourceID,
			Concurrency:                   concurrency6,
			MaxPayloadSizeKB:              maxPayloadSizeKb6,
			MaxPayloadEvents:              maxPayloadEvents6,
			Compress:                      compress11,
			RejectUnauthorized:            rejectUnauthorized12,
			TimeoutSec:                    timeoutSec6,
			FlushPeriodSec:                flushPeriodSec6,
			ExtraHTTPHeaders:              extraHTTPHeaders5,
			UseRoundRobinDNS:              useRoundRobinDns6,
			FailedRequestLoggingMode:      failedRequestLoggingMode5,
			SafeHeaders:                   safeHeaders5,
			APIURL:                        apiURL,
			ResponseRetrySettings:         responseRetrySettings6,
			TimeoutRetrySettings:          timeoutRetrySettings6,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader6,
			OnBackpressure:                onBackpressure13,
			AuthType:                      authType11,
			Description:                   description13,
			PqMaxFileSize:                 pqMaxFileSize10,
			PqMaxSize:                     pqMaxSize10,
			PqPath:                        pqPath10,
			PqCompress:                    pqCompress10,
			PqOnBackpressure:              pqOnBackpressure10,
			PqMode:                        pqMode10,
			PqControls:                    pqControls10,
			WorkspaceID:                   workspaceID,
			WorkspaceKey:                  workspaceKey,
			KeypairSecret:                 keypairSecret,
		}
	}
	if outputAzureLogs != nil {
		out = shared.Output{
			OutputAzureLogs: outputAzureLogs,
		}
	}
	var outputKinesis *shared.OutputKinesis
	if r.OutputKinesis != nil {
		id16 := new(string)
		if !r.OutputKinesis.ID.IsUnknown() && !r.OutputKinesis.ID.IsNull() {
			*id16 = r.OutputKinesis.ID.ValueString()
		} else {
			id16 = nil
		}
		typeVar16 := new(shared.OutputKinesisType)
		if !r.OutputKinesis.Type.IsUnknown() && !r.OutputKinesis.Type.IsNull() {
			*typeVar16 = shared.OutputKinesisType(r.OutputKinesis.Type.ValueString())
		} else {
			typeVar16 = nil
		}
		pipeline16 := new(string)
		if !r.OutputKinesis.Pipeline.IsUnknown() && !r.OutputKinesis.Pipeline.IsNull() {
			*pipeline16 = r.OutputKinesis.Pipeline.ValueString()
		} else {
			pipeline16 = nil
		}
		systemFields16 := make([]string, 0, len(r.OutputKinesis.SystemFields))
		for _, systemFieldsItem16 := range r.OutputKinesis.SystemFields {
			systemFields16 = append(systemFields16, systemFieldsItem16.ValueString())
		}
		environment16 := new(string)
		if !r.OutputKinesis.Environment.IsUnknown() && !r.OutputKinesis.Environment.IsNull() {
			*environment16 = r.OutputKinesis.Environment.ValueString()
		} else {
			environment16 = nil
		}
		streamtags16 := make([]string, 0, len(r.OutputKinesis.Streamtags))
		for _, streamtagsItem16 := range r.OutputKinesis.Streamtags {
			streamtags16 = append(streamtags16, streamtagsItem16.ValueString())
		}
		var streamName1 string
		streamName1 = r.OutputKinesis.StreamName.ValueString()

		awsAuthenticationMethod1 := new(shared.OutputKinesisAuthenticationMethod)
		if !r.OutputKinesis.AwsAuthenticationMethod.IsUnknown() && !r.OutputKinesis.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod1 = shared.OutputKinesisAuthenticationMethod(r.OutputKinesis.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod1 = nil
		}
		awsSecretKey1 := new(string)
		if !r.OutputKinesis.AwsSecretKey.IsUnknown() && !r.OutputKinesis.AwsSecretKey.IsNull() {
			*awsSecretKey1 = r.OutputKinesis.AwsSecretKey.ValueString()
		} else {
			awsSecretKey1 = nil
		}
		var region1 string
		region1 = r.OutputKinesis.Region.ValueString()

		endpoint1 := new(string)
		if !r.OutputKinesis.Endpoint.IsUnknown() && !r.OutputKinesis.Endpoint.IsNull() {
			*endpoint1 = r.OutputKinesis.Endpoint.ValueString()
		} else {
			endpoint1 = nil
		}
		signatureVersion1 := new(shared.OutputKinesisSignatureVersion)
		if !r.OutputKinesis.SignatureVersion.IsUnknown() && !r.OutputKinesis.SignatureVersion.IsNull() {
			*signatureVersion1 = shared.OutputKinesisSignatureVersion(r.OutputKinesis.SignatureVersion.ValueString())
		} else {
			signatureVersion1 = nil
		}
		reuseConnections1 := new(bool)
		if !r.OutputKinesis.ReuseConnections.IsUnknown() && !r.OutputKinesis.ReuseConnections.IsNull() {
			*reuseConnections1 = r.OutputKinesis.ReuseConnections.ValueBool()
		} else {
			reuseConnections1 = nil
		}
		rejectUnauthorized13 := new(bool)
		if !r.OutputKinesis.RejectUnauthorized.IsUnknown() && !r.OutputKinesis.RejectUnauthorized.IsNull() {
			*rejectUnauthorized13 = r.OutputKinesis.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized13 = nil
		}
		enableAssumeRole1 := new(bool)
		if !r.OutputKinesis.EnableAssumeRole.IsUnknown() && !r.OutputKinesis.EnableAssumeRole.IsNull() {
			*enableAssumeRole1 = r.OutputKinesis.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole1 = nil
		}
		assumeRoleArn1 := new(string)
		if !r.OutputKinesis.AssumeRoleArn.IsUnknown() && !r.OutputKinesis.AssumeRoleArn.IsNull() {
			*assumeRoleArn1 = r.OutputKinesis.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn1 = nil
		}
		assumeRoleExternalId1 := new(string)
		if !r.OutputKinesis.AssumeRoleExternalID.IsUnknown() && !r.OutputKinesis.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId1 = r.OutputKinesis.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId1 = nil
		}
		durationSeconds1 := new(float64)
		if !r.OutputKinesis.DurationSeconds.IsUnknown() && !r.OutputKinesis.DurationSeconds.IsNull() {
			*durationSeconds1 = r.OutputKinesis.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds1 = nil
		}
		concurrency7 := new(float64)
		if !r.OutputKinesis.Concurrency.IsUnknown() && !r.OutputKinesis.Concurrency.IsNull() {
			*concurrency7 = r.OutputKinesis.Concurrency.ValueFloat64()
		} else {
			concurrency7 = nil
		}
		maxRecordSizeKB := new(float64)
		if !r.OutputKinesis.MaxRecordSizeKB.IsUnknown() && !r.OutputKinesis.MaxRecordSizeKB.IsNull() {
			*maxRecordSizeKB = r.OutputKinesis.MaxRecordSizeKB.ValueFloat64()
		} else {
			maxRecordSizeKB = nil
		}
		flushPeriodSec7 := new(float64)
		if !r.OutputKinesis.FlushPeriodSec.IsUnknown() && !r.OutputKinesis.FlushPeriodSec.IsNull() {
			*flushPeriodSec7 = r.OutputKinesis.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec7 = nil
		}
		compression1 := new(shared.OutputKinesisCompression)
		if !r.OutputKinesis.Compression.IsUnknown() && !r.OutputKinesis.Compression.IsNull() {
			*compression1 = shared.OutputKinesisCompression(r.OutputKinesis.Compression.ValueString())
		} else {
			compression1 = nil
		}
		useListShards := new(bool)
		if !r.OutputKinesis.UseListShards.IsUnknown() && !r.OutputKinesis.UseListShards.IsNull() {
			*useListShards = r.OutputKinesis.UseListShards.ValueBool()
		} else {
			useListShards = nil
		}
		asNdjson := new(bool)
		if !r.OutputKinesis.AsNdjson.IsUnknown() && !r.OutputKinesis.AsNdjson.IsNull() {
			*asNdjson = r.OutputKinesis.AsNdjson.ValueBool()
		} else {
			asNdjson = nil
		}
		onBackpressure14 := new(shared.OutputKinesisBackpressureBehavior)
		if !r.OutputKinesis.OnBackpressure.IsUnknown() && !r.OutputKinesis.OnBackpressure.IsNull() {
			*onBackpressure14 = shared.OutputKinesisBackpressureBehavior(r.OutputKinesis.OnBackpressure.ValueString())
		} else {
			onBackpressure14 = nil
		}
		description14 := new(string)
		if !r.OutputKinesis.Description.IsUnknown() && !r.OutputKinesis.Description.IsNull() {
			*description14 = r.OutputKinesis.Description.ValueString()
		} else {
			description14 = nil
		}
		awsAPIKey1 := new(string)
		if !r.OutputKinesis.AwsAPIKey.IsUnknown() && !r.OutputKinesis.AwsAPIKey.IsNull() {
			*awsAPIKey1 = r.OutputKinesis.AwsAPIKey.ValueString()
		} else {
			awsAPIKey1 = nil
		}
		awsSecret1 := new(string)
		if !r.OutputKinesis.AwsSecret.IsUnknown() && !r.OutputKinesis.AwsSecret.IsNull() {
			*awsSecret1 = r.OutputKinesis.AwsSecret.ValueString()
		} else {
			awsSecret1 = nil
		}
		pqMaxFileSize11 := new(string)
		if !r.OutputKinesis.PqMaxFileSize.IsUnknown() && !r.OutputKinesis.PqMaxFileSize.IsNull() {
			*pqMaxFileSize11 = r.OutputKinesis.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize11 = nil
		}
		pqMaxSize11 := new(string)
		if !r.OutputKinesis.PqMaxSize.IsUnknown() && !r.OutputKinesis.PqMaxSize.IsNull() {
			*pqMaxSize11 = r.OutputKinesis.PqMaxSize.ValueString()
		} else {
			pqMaxSize11 = nil
		}
		pqPath11 := new(string)
		if !r.OutputKinesis.PqPath.IsUnknown() && !r.OutputKinesis.PqPath.IsNull() {
			*pqPath11 = r.OutputKinesis.PqPath.ValueString()
		} else {
			pqPath11 = nil
		}
		pqCompress11 := new(shared.OutputKinesisPqCompressCompression)
		if !r.OutputKinesis.PqCompress.IsUnknown() && !r.OutputKinesis.PqCompress.IsNull() {
			*pqCompress11 = shared.OutputKinesisPqCompressCompression(r.OutputKinesis.PqCompress.ValueString())
		} else {
			pqCompress11 = nil
		}
		pqOnBackpressure11 := new(shared.OutputKinesisQueueFullBehavior)
		if !r.OutputKinesis.PqOnBackpressure.IsUnknown() && !r.OutputKinesis.PqOnBackpressure.IsNull() {
			*pqOnBackpressure11 = shared.OutputKinesisQueueFullBehavior(r.OutputKinesis.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure11 = nil
		}
		pqMode11 := new(shared.OutputKinesisMode)
		if !r.OutputKinesis.PqMode.IsUnknown() && !r.OutputKinesis.PqMode.IsNull() {
			*pqMode11 = shared.OutputKinesisMode(r.OutputKinesis.PqMode.ValueString())
		} else {
			pqMode11 = nil
		}
		var pqControls11 *shared.OutputKinesisPqControls
		if r.OutputKinesis.PqControls != nil {
			pqControls11 = &shared.OutputKinesisPqControls{}
		}
		outputKinesis = &shared.OutputKinesis{
			ID:                      id16,
			Type:                    typeVar16,
			Pipeline:                pipeline16,
			SystemFields:            systemFields16,
			Environment:             environment16,
			Streamtags:              streamtags16,
			StreamName:              streamName1,
			AwsAuthenticationMethod: awsAuthenticationMethod1,
			AwsSecretKey:            awsSecretKey1,
			Region:                  region1,
			Endpoint:                endpoint1,
			SignatureVersion:        signatureVersion1,
			ReuseConnections:        reuseConnections1,
			RejectUnauthorized:      rejectUnauthorized13,
			EnableAssumeRole:        enableAssumeRole1,
			AssumeRoleArn:           assumeRoleArn1,
			AssumeRoleExternalID:    assumeRoleExternalId1,
			DurationSeconds:         durationSeconds1,
			Concurrency:             concurrency7,
			MaxRecordSizeKB:         maxRecordSizeKB,
			FlushPeriodSec:          flushPeriodSec7,
			Compression:             compression1,
			UseListShards:           useListShards,
			AsNdjson:                asNdjson,
			OnBackpressure:          onBackpressure14,
			Description:             description14,
			AwsAPIKey:               awsAPIKey1,
			AwsSecret:               awsSecret1,
			PqMaxFileSize:           pqMaxFileSize11,
			PqMaxSize:               pqMaxSize11,
			PqPath:                  pqPath11,
			PqCompress:              pqCompress11,
			PqOnBackpressure:        pqOnBackpressure11,
			PqMode:                  pqMode11,
			PqControls:              pqControls11,
		}
	}
	if outputKinesis != nil {
		out = shared.Output{
			OutputKinesis: outputKinesis,
		}
	}
	var outputHoneycomb *shared.OutputHoneycomb
	if r.OutputHoneycomb != nil {
		id17 := new(string)
		if !r.OutputHoneycomb.ID.IsUnknown() && !r.OutputHoneycomb.ID.IsNull() {
			*id17 = r.OutputHoneycomb.ID.ValueString()
		} else {
			id17 = nil
		}
		typeVar17 := shared.OutputHoneycombType(r.OutputHoneycomb.Type.ValueString())
		pipeline17 := new(string)
		if !r.OutputHoneycomb.Pipeline.IsUnknown() && !r.OutputHoneycomb.Pipeline.IsNull() {
			*pipeline17 = r.OutputHoneycomb.Pipeline.ValueString()
		} else {
			pipeline17 = nil
		}
		systemFields17 := make([]string, 0, len(r.OutputHoneycomb.SystemFields))
		for _, systemFieldsItem17 := range r.OutputHoneycomb.SystemFields {
			systemFields17 = append(systemFields17, systemFieldsItem17.ValueString())
		}
		environment17 := new(string)
		if !r.OutputHoneycomb.Environment.IsUnknown() && !r.OutputHoneycomb.Environment.IsNull() {
			*environment17 = r.OutputHoneycomb.Environment.ValueString()
		} else {
			environment17 = nil
		}
		streamtags17 := make([]string, 0, len(r.OutputHoneycomb.Streamtags))
		for _, streamtagsItem17 := range r.OutputHoneycomb.Streamtags {
			streamtags17 = append(streamtags17, streamtagsItem17.ValueString())
		}
		var dataset string
		dataset = r.OutputHoneycomb.Dataset.ValueString()

		concurrency8 := new(float64)
		if !r.OutputHoneycomb.Concurrency.IsUnknown() && !r.OutputHoneycomb.Concurrency.IsNull() {
			*concurrency8 = r.OutputHoneycomb.Concurrency.ValueFloat64()
		} else {
			concurrency8 = nil
		}
		maxPayloadSizeKb7 := new(float64)
		if !r.OutputHoneycomb.MaxPayloadSizeKB.IsUnknown() && !r.OutputHoneycomb.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb7 = r.OutputHoneycomb.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb7 = nil
		}
		maxPayloadEvents7 := new(float64)
		if !r.OutputHoneycomb.MaxPayloadEvents.IsUnknown() && !r.OutputHoneycomb.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents7 = r.OutputHoneycomb.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents7 = nil
		}
		compress12 := new(bool)
		if !r.OutputHoneycomb.Compress.IsUnknown() && !r.OutputHoneycomb.Compress.IsNull() {
			*compress12 = r.OutputHoneycomb.Compress.ValueBool()
		} else {
			compress12 = nil
		}
		rejectUnauthorized14 := new(bool)
		if !r.OutputHoneycomb.RejectUnauthorized.IsUnknown() && !r.OutputHoneycomb.RejectUnauthorized.IsNull() {
			*rejectUnauthorized14 = r.OutputHoneycomb.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized14 = nil
		}
		timeoutSec7 := new(float64)
		if !r.OutputHoneycomb.TimeoutSec.IsUnknown() && !r.OutputHoneycomb.TimeoutSec.IsNull() {
			*timeoutSec7 = r.OutputHoneycomb.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec7 = nil
		}
		flushPeriodSec8 := new(float64)
		if !r.OutputHoneycomb.FlushPeriodSec.IsUnknown() && !r.OutputHoneycomb.FlushPeriodSec.IsNull() {
			*flushPeriodSec8 = r.OutputHoneycomb.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec8 = nil
		}
		extraHTTPHeaders6 := make([]shared.OutputHoneycombExtraHTTPHeaders, 0, len(r.OutputHoneycomb.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem6 := range r.OutputHoneycomb.ExtraHTTPHeaders {
			name8 := new(string)
			if !extraHTTPHeadersItem6.Name.IsUnknown() && !extraHTTPHeadersItem6.Name.IsNull() {
				*name8 = extraHTTPHeadersItem6.Name.ValueString()
			} else {
				name8 = nil
			}
			var value14 string
			value14 = extraHTTPHeadersItem6.Value.ValueString()

			extraHTTPHeaders6 = append(extraHTTPHeaders6, shared.OutputHoneycombExtraHTTPHeaders{
				Name:  name8,
				Value: value14,
			})
		}
		useRoundRobinDns7 := new(bool)
		if !r.OutputHoneycomb.UseRoundRobinDNS.IsUnknown() && !r.OutputHoneycomb.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns7 = r.OutputHoneycomb.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns7 = nil
		}
		failedRequestLoggingMode6 := new(shared.OutputHoneycombFailedRequestLoggingMode)
		if !r.OutputHoneycomb.FailedRequestLoggingMode.IsUnknown() && !r.OutputHoneycomb.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode6 = shared.OutputHoneycombFailedRequestLoggingMode(r.OutputHoneycomb.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode6 = nil
		}
		safeHeaders6 := make([]string, 0, len(r.OutputHoneycomb.SafeHeaders))
		for _, safeHeadersItem6 := range r.OutputHoneycomb.SafeHeaders {
			safeHeaders6 = append(safeHeaders6, safeHeadersItem6.ValueString())
		}
		responseRetrySettings7 := make([]shared.OutputHoneycombResponseRetrySettings, 0, len(r.OutputHoneycomb.ResponseRetrySettings))
		for _, responseRetrySettingsItem7 := range r.OutputHoneycomb.ResponseRetrySettings {
			var httpStatus7 float64
			httpStatus7 = responseRetrySettingsItem7.HTTPStatus.ValueFloat64()

			initialBackoff14 := new(float64)
			if !responseRetrySettingsItem7.InitialBackoff.IsUnknown() && !responseRetrySettingsItem7.InitialBackoff.IsNull() {
				*initialBackoff14 = responseRetrySettingsItem7.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff14 = nil
			}
			backoffRate14 := new(float64)
			if !responseRetrySettingsItem7.BackoffRate.IsUnknown() && !responseRetrySettingsItem7.BackoffRate.IsNull() {
				*backoffRate14 = responseRetrySettingsItem7.BackoffRate.ValueFloat64()
			} else {
				backoffRate14 = nil
			}
			maxBackoff14 := new(float64)
			if !responseRetrySettingsItem7.MaxBackoff.IsUnknown() && !responseRetrySettingsItem7.MaxBackoff.IsNull() {
				*maxBackoff14 = responseRetrySettingsItem7.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff14 = nil
			}
			responseRetrySettings7 = append(responseRetrySettings7, shared.OutputHoneycombResponseRetrySettings{
				HTTPStatus:     httpStatus7,
				InitialBackoff: initialBackoff14,
				BackoffRate:    backoffRate14,
				MaxBackoff:     maxBackoff14,
			})
		}
		var timeoutRetrySettings7 *shared.OutputHoneycombTimeoutRetrySettings
		if r.OutputHoneycomb.TimeoutRetrySettings != nil {
			timeoutRetry7 := new(bool)
			if !r.OutputHoneycomb.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputHoneycomb.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry7 = r.OutputHoneycomb.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry7 = nil
			}
			initialBackoff15 := new(float64)
			if !r.OutputHoneycomb.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputHoneycomb.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff15 = r.OutputHoneycomb.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff15 = nil
			}
			backoffRate15 := new(float64)
			if !r.OutputHoneycomb.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputHoneycomb.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate15 = r.OutputHoneycomb.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate15 = nil
			}
			maxBackoff15 := new(float64)
			if !r.OutputHoneycomb.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputHoneycomb.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff15 = r.OutputHoneycomb.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff15 = nil
			}
			timeoutRetrySettings7 = &shared.OutputHoneycombTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry7,
				InitialBackoff: initialBackoff15,
				BackoffRate:    backoffRate15,
				MaxBackoff:     maxBackoff15,
			}
		}
		responseHonorRetryAfterHeader7 := new(bool)
		if !r.OutputHoneycomb.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputHoneycomb.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader7 = r.OutputHoneycomb.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader7 = nil
		}
		onBackpressure15 := new(shared.OutputHoneycombBackpressureBehavior)
		if !r.OutputHoneycomb.OnBackpressure.IsUnknown() && !r.OutputHoneycomb.OnBackpressure.IsNull() {
			*onBackpressure15 = shared.OutputHoneycombBackpressureBehavior(r.OutputHoneycomb.OnBackpressure.ValueString())
		} else {
			onBackpressure15 = nil
		}
		authType12 := new(shared.OutputHoneycombAuthenticationMethod)
		if !r.OutputHoneycomb.AuthType.IsUnknown() && !r.OutputHoneycomb.AuthType.IsNull() {
			*authType12 = shared.OutputHoneycombAuthenticationMethod(r.OutputHoneycomb.AuthType.ValueString())
		} else {
			authType12 = nil
		}
		description15 := new(string)
		if !r.OutputHoneycomb.Description.IsUnknown() && !r.OutputHoneycomb.Description.IsNull() {
			*description15 = r.OutputHoneycomb.Description.ValueString()
		} else {
			description15 = nil
		}
		pqMaxFileSize12 := new(string)
		if !r.OutputHoneycomb.PqMaxFileSize.IsUnknown() && !r.OutputHoneycomb.PqMaxFileSize.IsNull() {
			*pqMaxFileSize12 = r.OutputHoneycomb.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize12 = nil
		}
		pqMaxSize12 := new(string)
		if !r.OutputHoneycomb.PqMaxSize.IsUnknown() && !r.OutputHoneycomb.PqMaxSize.IsNull() {
			*pqMaxSize12 = r.OutputHoneycomb.PqMaxSize.ValueString()
		} else {
			pqMaxSize12 = nil
		}
		pqPath12 := new(string)
		if !r.OutputHoneycomb.PqPath.IsUnknown() && !r.OutputHoneycomb.PqPath.IsNull() {
			*pqPath12 = r.OutputHoneycomb.PqPath.ValueString()
		} else {
			pqPath12 = nil
		}
		pqCompress12 := new(shared.OutputHoneycombCompression)
		if !r.OutputHoneycomb.PqCompress.IsUnknown() && !r.OutputHoneycomb.PqCompress.IsNull() {
			*pqCompress12 = shared.OutputHoneycombCompression(r.OutputHoneycomb.PqCompress.ValueString())
		} else {
			pqCompress12 = nil
		}
		pqOnBackpressure12 := new(shared.OutputHoneycombQueueFullBehavior)
		if !r.OutputHoneycomb.PqOnBackpressure.IsUnknown() && !r.OutputHoneycomb.PqOnBackpressure.IsNull() {
			*pqOnBackpressure12 = shared.OutputHoneycombQueueFullBehavior(r.OutputHoneycomb.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure12 = nil
		}
		pqMode12 := new(shared.OutputHoneycombMode)
		if !r.OutputHoneycomb.PqMode.IsUnknown() && !r.OutputHoneycomb.PqMode.IsNull() {
			*pqMode12 = shared.OutputHoneycombMode(r.OutputHoneycomb.PqMode.ValueString())
		} else {
			pqMode12 = nil
		}
		var pqControls12 *shared.OutputHoneycombPqControls
		if r.OutputHoneycomb.PqControls != nil {
			pqControls12 = &shared.OutputHoneycombPqControls{}
		}
		team := new(string)
		if !r.OutputHoneycomb.Team.IsUnknown() && !r.OutputHoneycomb.Team.IsNull() {
			*team = r.OutputHoneycomb.Team.ValueString()
		} else {
			team = nil
		}
		textSecret10 := new(string)
		if !r.OutputHoneycomb.TextSecret.IsUnknown() && !r.OutputHoneycomb.TextSecret.IsNull() {
			*textSecret10 = r.OutputHoneycomb.TextSecret.ValueString()
		} else {
			textSecret10 = nil
		}
		outputHoneycomb = &shared.OutputHoneycomb{
			ID:                            id17,
			Type:                          typeVar17,
			Pipeline:                      pipeline17,
			SystemFields:                  systemFields17,
			Environment:                   environment17,
			Streamtags:                    streamtags17,
			Dataset:                       dataset,
			Concurrency:                   concurrency8,
			MaxPayloadSizeKB:              maxPayloadSizeKb7,
			MaxPayloadEvents:              maxPayloadEvents7,
			Compress:                      compress12,
			RejectUnauthorized:            rejectUnauthorized14,
			TimeoutSec:                    timeoutSec7,
			FlushPeriodSec:                flushPeriodSec8,
			ExtraHTTPHeaders:              extraHTTPHeaders6,
			UseRoundRobinDNS:              useRoundRobinDns7,
			FailedRequestLoggingMode:      failedRequestLoggingMode6,
			SafeHeaders:                   safeHeaders6,
			ResponseRetrySettings:         responseRetrySettings7,
			TimeoutRetrySettings:          timeoutRetrySettings7,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader7,
			OnBackpressure:                onBackpressure15,
			AuthType:                      authType12,
			Description:                   description15,
			PqMaxFileSize:                 pqMaxFileSize12,
			PqMaxSize:                     pqMaxSize12,
			PqPath:                        pqPath12,
			PqCompress:                    pqCompress12,
			PqOnBackpressure:              pqOnBackpressure12,
			PqMode:                        pqMode12,
			PqControls:                    pqControls12,
			Team:                          team,
			TextSecret:                    textSecret10,
		}
	}
	if outputHoneycomb != nil {
		out = shared.Output{
			OutputHoneycomb: outputHoneycomb,
		}
	}
	var outputAzureEventhub *shared.OutputAzureEventhub
	if r.OutputAzureEventhub != nil {
		id18 := new(string)
		if !r.OutputAzureEventhub.ID.IsUnknown() && !r.OutputAzureEventhub.ID.IsNull() {
			*id18 = r.OutputAzureEventhub.ID.ValueString()
		} else {
			id18 = nil
		}
		typeVar18 := new(shared.OutputAzureEventhubType)
		if !r.OutputAzureEventhub.Type.IsUnknown() && !r.OutputAzureEventhub.Type.IsNull() {
			*typeVar18 = shared.OutputAzureEventhubType(r.OutputAzureEventhub.Type.ValueString())
		} else {
			typeVar18 = nil
		}
		pipeline18 := new(string)
		if !r.OutputAzureEventhub.Pipeline.IsUnknown() && !r.OutputAzureEventhub.Pipeline.IsNull() {
			*pipeline18 = r.OutputAzureEventhub.Pipeline.ValueString()
		} else {
			pipeline18 = nil
		}
		systemFields18 := make([]string, 0, len(r.OutputAzureEventhub.SystemFields))
		for _, systemFieldsItem18 := range r.OutputAzureEventhub.SystemFields {
			systemFields18 = append(systemFields18, systemFieldsItem18.ValueString())
		}
		environment18 := new(string)
		if !r.OutputAzureEventhub.Environment.IsUnknown() && !r.OutputAzureEventhub.Environment.IsNull() {
			*environment18 = r.OutputAzureEventhub.Environment.ValueString()
		} else {
			environment18 = nil
		}
		streamtags18 := make([]string, 0, len(r.OutputAzureEventhub.Streamtags))
		for _, streamtagsItem18 := range r.OutputAzureEventhub.Streamtags {
			streamtags18 = append(streamtags18, streamtagsItem18.ValueString())
		}
		brokers := make([]string, 0, len(r.OutputAzureEventhub.Brokers))
		for _, brokersItem := range r.OutputAzureEventhub.Brokers {
			brokers = append(brokers, brokersItem.ValueString())
		}
		var topic string
		topic = r.OutputAzureEventhub.Topic.ValueString()

		ack := new(shared.Acknowledgments)
		if !r.OutputAzureEventhub.Ack.IsUnknown() && !r.OutputAzureEventhub.Ack.IsNull() {
			*ack = shared.Acknowledgments(r.OutputAzureEventhub.Ack.ValueInt64())
		} else {
			ack = nil
		}
		format6 := new(shared.OutputAzureEventhubRecordDataFormat)
		if !r.OutputAzureEventhub.Format.IsUnknown() && !r.OutputAzureEventhub.Format.IsNull() {
			*format6 = shared.OutputAzureEventhubRecordDataFormat(r.OutputAzureEventhub.Format.ValueString())
		} else {
			format6 = nil
		}
		maxRecordSizeKb1 := new(float64)
		if !r.OutputAzureEventhub.MaxRecordSizeKB.IsUnknown() && !r.OutputAzureEventhub.MaxRecordSizeKB.IsNull() {
			*maxRecordSizeKb1 = r.OutputAzureEventhub.MaxRecordSizeKB.ValueFloat64()
		} else {
			maxRecordSizeKb1 = nil
		}
		flushEventCount := new(float64)
		if !r.OutputAzureEventhub.FlushEventCount.IsUnknown() && !r.OutputAzureEventhub.FlushEventCount.IsNull() {
			*flushEventCount = r.OutputAzureEventhub.FlushEventCount.ValueFloat64()
		} else {
			flushEventCount = nil
		}
		flushPeriodSec9 := new(float64)
		if !r.OutputAzureEventhub.FlushPeriodSec.IsUnknown() && !r.OutputAzureEventhub.FlushPeriodSec.IsNull() {
			*flushPeriodSec9 = r.OutputAzureEventhub.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec9 = nil
		}
		connectionTimeout4 := new(float64)
		if !r.OutputAzureEventhub.ConnectionTimeout.IsUnknown() && !r.OutputAzureEventhub.ConnectionTimeout.IsNull() {
			*connectionTimeout4 = r.OutputAzureEventhub.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout4 = nil
		}
		requestTimeout := new(float64)
		if !r.OutputAzureEventhub.RequestTimeout.IsUnknown() && !r.OutputAzureEventhub.RequestTimeout.IsNull() {
			*requestTimeout = r.OutputAzureEventhub.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout = nil
		}
		maxRetries := new(float64)
		if !r.OutputAzureEventhub.MaxRetries.IsUnknown() && !r.OutputAzureEventhub.MaxRetries.IsNull() {
			*maxRetries = r.OutputAzureEventhub.MaxRetries.ValueFloat64()
		} else {
			maxRetries = nil
		}
		maxBackOff := new(float64)
		if !r.OutputAzureEventhub.MaxBackOff.IsUnknown() && !r.OutputAzureEventhub.MaxBackOff.IsNull() {
			*maxBackOff = r.OutputAzureEventhub.MaxBackOff.ValueFloat64()
		} else {
			maxBackOff = nil
		}
		initialBackoff16 := new(float64)
		if !r.OutputAzureEventhub.InitialBackoff.IsUnknown() && !r.OutputAzureEventhub.InitialBackoff.IsNull() {
			*initialBackoff16 = r.OutputAzureEventhub.InitialBackoff.ValueFloat64()
		} else {
			initialBackoff16 = nil
		}
		backoffRate16 := new(float64)
		if !r.OutputAzureEventhub.BackoffRate.IsUnknown() && !r.OutputAzureEventhub.BackoffRate.IsNull() {
			*backoffRate16 = r.OutputAzureEventhub.BackoffRate.ValueFloat64()
		} else {
			backoffRate16 = nil
		}
		authenticationTimeout := new(float64)
		if !r.OutputAzureEventhub.AuthenticationTimeout.IsUnknown() && !r.OutputAzureEventhub.AuthenticationTimeout.IsNull() {
			*authenticationTimeout = r.OutputAzureEventhub.AuthenticationTimeout.ValueFloat64()
		} else {
			authenticationTimeout = nil
		}
		reauthenticationThreshold := new(float64)
		if !r.OutputAzureEventhub.ReauthenticationThreshold.IsUnknown() && !r.OutputAzureEventhub.ReauthenticationThreshold.IsNull() {
			*reauthenticationThreshold = r.OutputAzureEventhub.ReauthenticationThreshold.ValueFloat64()
		} else {
			reauthenticationThreshold = nil
		}
		var sasl *shared.OutputAzureEventhubAuthentication
		if r.OutputAzureEventhub.Sasl != nil {
			disabled5 := new(bool)
			if !r.OutputAzureEventhub.Sasl.Disabled.IsUnknown() && !r.OutputAzureEventhub.Sasl.Disabled.IsNull() {
				*disabled5 = r.OutputAzureEventhub.Sasl.Disabled.ValueBool()
			} else {
				disabled5 = nil
			}
			mechanism := new(shared.OutputAzureEventhubSASLMechanism)
			if !r.OutputAzureEventhub.Sasl.Mechanism.IsUnknown() && !r.OutputAzureEventhub.Sasl.Mechanism.IsNull() {
				*mechanism = shared.OutputAzureEventhubSASLMechanism(r.OutputAzureEventhub.Sasl.Mechanism.ValueString())
			} else {
				mechanism = nil
			}
			sasl = &shared.OutputAzureEventhubAuthentication{
				Disabled:  disabled5,
				Mechanism: mechanism,
			}
		}
		var tls7 *shared.OutputAzureEventhubTLSSettingsClientSide
		if r.OutputAzureEventhub.TLS != nil {
			disabled6 := new(bool)
			if !r.OutputAzureEventhub.TLS.Disabled.IsUnknown() && !r.OutputAzureEventhub.TLS.Disabled.IsNull() {
				*disabled6 = r.OutputAzureEventhub.TLS.Disabled.ValueBool()
			} else {
				disabled6 = nil
			}
			rejectUnauthorized15 := new(bool)
			if !r.OutputAzureEventhub.TLS.RejectUnauthorized.IsUnknown() && !r.OutputAzureEventhub.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized15 = r.OutputAzureEventhub.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized15 = nil
			}
			tls7 = &shared.OutputAzureEventhubTLSSettingsClientSide{
				Disabled:           disabled6,
				RejectUnauthorized: rejectUnauthorized15,
			}
		}
		onBackpressure16 := new(shared.OutputAzureEventhubBackpressureBehavior)
		if !r.OutputAzureEventhub.OnBackpressure.IsUnknown() && !r.OutputAzureEventhub.OnBackpressure.IsNull() {
			*onBackpressure16 = shared.OutputAzureEventhubBackpressureBehavior(r.OutputAzureEventhub.OnBackpressure.ValueString())
		} else {
			onBackpressure16 = nil
		}
		description16 := new(string)
		if !r.OutputAzureEventhub.Description.IsUnknown() && !r.OutputAzureEventhub.Description.IsNull() {
			*description16 = r.OutputAzureEventhub.Description.ValueString()
		} else {
			description16 = nil
		}
		pqMaxFileSize13 := new(string)
		if !r.OutputAzureEventhub.PqMaxFileSize.IsUnknown() && !r.OutputAzureEventhub.PqMaxFileSize.IsNull() {
			*pqMaxFileSize13 = r.OutputAzureEventhub.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize13 = nil
		}
		pqMaxSize13 := new(string)
		if !r.OutputAzureEventhub.PqMaxSize.IsUnknown() && !r.OutputAzureEventhub.PqMaxSize.IsNull() {
			*pqMaxSize13 = r.OutputAzureEventhub.PqMaxSize.ValueString()
		} else {
			pqMaxSize13 = nil
		}
		pqPath13 := new(string)
		if !r.OutputAzureEventhub.PqPath.IsUnknown() && !r.OutputAzureEventhub.PqPath.IsNull() {
			*pqPath13 = r.OutputAzureEventhub.PqPath.ValueString()
		} else {
			pqPath13 = nil
		}
		pqCompress13 := new(shared.OutputAzureEventhubCompression)
		if !r.OutputAzureEventhub.PqCompress.IsUnknown() && !r.OutputAzureEventhub.PqCompress.IsNull() {
			*pqCompress13 = shared.OutputAzureEventhubCompression(r.OutputAzureEventhub.PqCompress.ValueString())
		} else {
			pqCompress13 = nil
		}
		pqOnBackpressure13 := new(shared.OutputAzureEventhubQueueFullBehavior)
		if !r.OutputAzureEventhub.PqOnBackpressure.IsUnknown() && !r.OutputAzureEventhub.PqOnBackpressure.IsNull() {
			*pqOnBackpressure13 = shared.OutputAzureEventhubQueueFullBehavior(r.OutputAzureEventhub.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure13 = nil
		}
		pqMode13 := new(shared.OutputAzureEventhubMode)
		if !r.OutputAzureEventhub.PqMode.IsUnknown() && !r.OutputAzureEventhub.PqMode.IsNull() {
			*pqMode13 = shared.OutputAzureEventhubMode(r.OutputAzureEventhub.PqMode.ValueString())
		} else {
			pqMode13 = nil
		}
		var pqControls13 *shared.OutputAzureEventhubPqControls
		if r.OutputAzureEventhub.PqControls != nil {
			pqControls13 = &shared.OutputAzureEventhubPqControls{}
		}
		outputAzureEventhub = &shared.OutputAzureEventhub{
			ID:                        id18,
			Type:                      typeVar18,
			Pipeline:                  pipeline18,
			SystemFields:              systemFields18,
			Environment:               environment18,
			Streamtags:                streamtags18,
			Brokers:                   brokers,
			Topic:                     topic,
			Ack:                       ack,
			Format:                    format6,
			MaxRecordSizeKB:           maxRecordSizeKb1,
			FlushEventCount:           flushEventCount,
			FlushPeriodSec:            flushPeriodSec9,
			ConnectionTimeout:         connectionTimeout4,
			RequestTimeout:            requestTimeout,
			MaxRetries:                maxRetries,
			MaxBackOff:                maxBackOff,
			InitialBackoff:            initialBackoff16,
			BackoffRate:               backoffRate16,
			AuthenticationTimeout:     authenticationTimeout,
			ReauthenticationThreshold: reauthenticationThreshold,
			Sasl:                      sasl,
			TLS:                       tls7,
			OnBackpressure:            onBackpressure16,
			Description:               description16,
			PqMaxFileSize:             pqMaxFileSize13,
			PqMaxSize:                 pqMaxSize13,
			PqPath:                    pqPath13,
			PqCompress:                pqCompress13,
			PqOnBackpressure:          pqOnBackpressure13,
			PqMode:                    pqMode13,
			PqControls:                pqControls13,
		}
	}
	if outputAzureEventhub != nil {
		out = shared.Output{
			OutputAzureEventhub: outputAzureEventhub,
		}
	}
	var outputGoogleChronicle *shared.OutputGoogleChronicle
	if r.OutputGoogleChronicle != nil {
		id19 := new(string)
		if !r.OutputGoogleChronicle.ID.IsUnknown() && !r.OutputGoogleChronicle.ID.IsNull() {
			*id19 = r.OutputGoogleChronicle.ID.ValueString()
		} else {
			id19 = nil
		}
		typeVar19 := shared.OutputGoogleChronicleType(r.OutputGoogleChronicle.Type.ValueString())
		pipeline19 := new(string)
		if !r.OutputGoogleChronicle.Pipeline.IsUnknown() && !r.OutputGoogleChronicle.Pipeline.IsNull() {
			*pipeline19 = r.OutputGoogleChronicle.Pipeline.ValueString()
		} else {
			pipeline19 = nil
		}
		systemFields19 := make([]string, 0, len(r.OutputGoogleChronicle.SystemFields))
		for _, systemFieldsItem19 := range r.OutputGoogleChronicle.SystemFields {
			systemFields19 = append(systemFields19, systemFieldsItem19.ValueString())
		}
		environment19 := new(string)
		if !r.OutputGoogleChronicle.Environment.IsUnknown() && !r.OutputGoogleChronicle.Environment.IsNull() {
			*environment19 = r.OutputGoogleChronicle.Environment.ValueString()
		} else {
			environment19 = nil
		}
		streamtags19 := make([]string, 0, len(r.OutputGoogleChronicle.Streamtags))
		for _, streamtagsItem19 := range r.OutputGoogleChronicle.Streamtags {
			streamtags19 = append(streamtags19, streamtagsItem19.ValueString())
		}
		apiVersion := new(shared.OutputGoogleChronicleAPIVersion)
		if !r.OutputGoogleChronicle.APIVersion.IsUnknown() && !r.OutputGoogleChronicle.APIVersion.IsNull() {
			*apiVersion = shared.OutputGoogleChronicleAPIVersion(r.OutputGoogleChronicle.APIVersion.ValueString())
		} else {
			apiVersion = nil
		}
		authenticationMethod := new(shared.OutputGoogleChronicleAuthenticationMethod)
		if !r.OutputGoogleChronicle.AuthenticationMethod.IsUnknown() && !r.OutputGoogleChronicle.AuthenticationMethod.IsNull() {
			*authenticationMethod = shared.OutputGoogleChronicleAuthenticationMethod(r.OutputGoogleChronicle.AuthenticationMethod.ValueString())
		} else {
			authenticationMethod = nil
		}
		responseRetrySettings8 := make([]shared.OutputGoogleChronicleResponseRetrySettings, 0, len(r.OutputGoogleChronicle.ResponseRetrySettings))
		for _, responseRetrySettingsItem8 := range r.OutputGoogleChronicle.ResponseRetrySettings {
			var httpStatus8 float64
			httpStatus8 = responseRetrySettingsItem8.HTTPStatus.ValueFloat64()

			initialBackoff17 := new(float64)
			if !responseRetrySettingsItem8.InitialBackoff.IsUnknown() && !responseRetrySettingsItem8.InitialBackoff.IsNull() {
				*initialBackoff17 = responseRetrySettingsItem8.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff17 = nil
			}
			backoffRate17 := new(float64)
			if !responseRetrySettingsItem8.BackoffRate.IsUnknown() && !responseRetrySettingsItem8.BackoffRate.IsNull() {
				*backoffRate17 = responseRetrySettingsItem8.BackoffRate.ValueFloat64()
			} else {
				backoffRate17 = nil
			}
			maxBackoff16 := new(float64)
			if !responseRetrySettingsItem8.MaxBackoff.IsUnknown() && !responseRetrySettingsItem8.MaxBackoff.IsNull() {
				*maxBackoff16 = responseRetrySettingsItem8.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff16 = nil
			}
			responseRetrySettings8 = append(responseRetrySettings8, shared.OutputGoogleChronicleResponseRetrySettings{
				HTTPStatus:     httpStatus8,
				InitialBackoff: initialBackoff17,
				BackoffRate:    backoffRate17,
				MaxBackoff:     maxBackoff16,
			})
		}
		var timeoutRetrySettings8 *shared.OutputGoogleChronicleTimeoutRetrySettings
		if r.OutputGoogleChronicle.TimeoutRetrySettings != nil {
			timeoutRetry8 := new(bool)
			if !r.OutputGoogleChronicle.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputGoogleChronicle.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry8 = r.OutputGoogleChronicle.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry8 = nil
			}
			initialBackoff18 := new(float64)
			if !r.OutputGoogleChronicle.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputGoogleChronicle.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff18 = r.OutputGoogleChronicle.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff18 = nil
			}
			backoffRate18 := new(float64)
			if !r.OutputGoogleChronicle.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputGoogleChronicle.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate18 = r.OutputGoogleChronicle.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate18 = nil
			}
			maxBackoff17 := new(float64)
			if !r.OutputGoogleChronicle.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputGoogleChronicle.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff17 = r.OutputGoogleChronicle.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff17 = nil
			}
			timeoutRetrySettings8 = &shared.OutputGoogleChronicleTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry8,
				InitialBackoff: initialBackoff18,
				BackoffRate:    backoffRate18,
				MaxBackoff:     maxBackoff17,
			}
		}
		responseHonorRetryAfterHeader8 := new(bool)
		if !r.OutputGoogleChronicle.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputGoogleChronicle.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader8 = r.OutputGoogleChronicle.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader8 = nil
		}
		logFormatType := new(shared.SendEventsAs)
		if !r.OutputGoogleChronicle.LogFormatType.IsUnknown() && !r.OutputGoogleChronicle.LogFormatType.IsNull() {
			*logFormatType = shared.SendEventsAs(r.OutputGoogleChronicle.LogFormatType.ValueString())
		} else {
			logFormatType = nil
		}
		region2 := new(string)
		if !r.OutputGoogleChronicle.Region.IsUnknown() && !r.OutputGoogleChronicle.Region.IsNull() {
			*region2 = r.OutputGoogleChronicle.Region.ValueString()
		} else {
			region2 = nil
		}
		concurrency9 := new(float64)
		if !r.OutputGoogleChronicle.Concurrency.IsUnknown() && !r.OutputGoogleChronicle.Concurrency.IsNull() {
			*concurrency9 = r.OutputGoogleChronicle.Concurrency.ValueFloat64()
		} else {
			concurrency9 = nil
		}
		maxPayloadSizeKb8 := new(float64)
		if !r.OutputGoogleChronicle.MaxPayloadSizeKB.IsUnknown() && !r.OutputGoogleChronicle.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb8 = r.OutputGoogleChronicle.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb8 = nil
		}
		maxPayloadEvents8 := new(float64)
		if !r.OutputGoogleChronicle.MaxPayloadEvents.IsUnknown() && !r.OutputGoogleChronicle.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents8 = r.OutputGoogleChronicle.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents8 = nil
		}
		compress13 := new(bool)
		if !r.OutputGoogleChronicle.Compress.IsUnknown() && !r.OutputGoogleChronicle.Compress.IsNull() {
			*compress13 = r.OutputGoogleChronicle.Compress.ValueBool()
		} else {
			compress13 = nil
		}
		rejectUnauthorized16 := new(bool)
		if !r.OutputGoogleChronicle.RejectUnauthorized.IsUnknown() && !r.OutputGoogleChronicle.RejectUnauthorized.IsNull() {
			*rejectUnauthorized16 = r.OutputGoogleChronicle.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized16 = nil
		}
		timeoutSec8 := new(float64)
		if !r.OutputGoogleChronicle.TimeoutSec.IsUnknown() && !r.OutputGoogleChronicle.TimeoutSec.IsNull() {
			*timeoutSec8 = r.OutputGoogleChronicle.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec8 = nil
		}
		flushPeriodSec10 := new(float64)
		if !r.OutputGoogleChronicle.FlushPeriodSec.IsUnknown() && !r.OutputGoogleChronicle.FlushPeriodSec.IsNull() {
			*flushPeriodSec10 = r.OutputGoogleChronicle.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec10 = nil
		}
		extraHTTPHeaders7 := make([]shared.OutputGoogleChronicleExtraHTTPHeaders, 0, len(r.OutputGoogleChronicle.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem7 := range r.OutputGoogleChronicle.ExtraHTTPHeaders {
			name9 := new(string)
			if !extraHTTPHeadersItem7.Name.IsUnknown() && !extraHTTPHeadersItem7.Name.IsNull() {
				*name9 = extraHTTPHeadersItem7.Name.ValueString()
			} else {
				name9 = nil
			}
			var value15 string
			value15 = extraHTTPHeadersItem7.Value.ValueString()

			extraHTTPHeaders7 = append(extraHTTPHeaders7, shared.OutputGoogleChronicleExtraHTTPHeaders{
				Name:  name9,
				Value: value15,
			})
		}
		failedRequestLoggingMode7 := new(shared.OutputGoogleChronicleFailedRequestLoggingMode)
		if !r.OutputGoogleChronicle.FailedRequestLoggingMode.IsUnknown() && !r.OutputGoogleChronicle.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode7 = shared.OutputGoogleChronicleFailedRequestLoggingMode(r.OutputGoogleChronicle.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode7 = nil
		}
		safeHeaders7 := make([]string, 0, len(r.OutputGoogleChronicle.SafeHeaders))
		for _, safeHeadersItem7 := range r.OutputGoogleChronicle.SafeHeaders {
			safeHeaders7 = append(safeHeaders7, safeHeadersItem7.ValueString())
		}
		useRoundRobinDns8 := new(bool)
		if !r.OutputGoogleChronicle.UseRoundRobinDNS.IsUnknown() && !r.OutputGoogleChronicle.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns8 = r.OutputGoogleChronicle.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns8 = nil
		}
		onBackpressure17 := new(shared.OutputGoogleChronicleBackpressureBehavior)
		if !r.OutputGoogleChronicle.OnBackpressure.IsUnknown() && !r.OutputGoogleChronicle.OnBackpressure.IsNull() {
			*onBackpressure17 = shared.OutputGoogleChronicleBackpressureBehavior(r.OutputGoogleChronicle.OnBackpressure.ValueString())
		} else {
			onBackpressure17 = nil
		}
		totalMemoryLimitKb2 := new(float64)
		if !r.OutputGoogleChronicle.TotalMemoryLimitKB.IsUnknown() && !r.OutputGoogleChronicle.TotalMemoryLimitKB.IsNull() {
			*totalMemoryLimitKb2 = r.OutputGoogleChronicle.TotalMemoryLimitKB.ValueFloat64()
		} else {
			totalMemoryLimitKb2 = nil
		}
		description17 := new(string)
		if !r.OutputGoogleChronicle.Description.IsUnknown() && !r.OutputGoogleChronicle.Description.IsNull() {
			*description17 = r.OutputGoogleChronicle.Description.ValueString()
		} else {
			description17 = nil
		}
		extraLogTypes := make([]shared.ExtraLogTypes, 0, len(r.OutputGoogleChronicle.ExtraLogTypes))
		for _, extraLogTypesItem := range r.OutputGoogleChronicle.ExtraLogTypes {
			var logType1 string
			logType1 = extraLogTypesItem.LogType.ValueString()

			description18 := new(string)
			if !extraLogTypesItem.Description.IsUnknown() && !extraLogTypesItem.Description.IsNull() {
				*description18 = extraLogTypesItem.Description.ValueString()
			} else {
				description18 = nil
			}
			extraLogTypes = append(extraLogTypes, shared.ExtraLogTypes{
				LogType:     logType1,
				Description: description18,
			})
		}
		logType2 := new(string)
		if !r.OutputGoogleChronicle.LogType.IsUnknown() && !r.OutputGoogleChronicle.LogType.IsNull() {
			*logType2 = r.OutputGoogleChronicle.LogType.ValueString()
		} else {
			logType2 = nil
		}
		logTextField := new(string)
		if !r.OutputGoogleChronicle.LogTextField.IsUnknown() && !r.OutputGoogleChronicle.LogTextField.IsNull() {
			*logTextField = r.OutputGoogleChronicle.LogTextField.ValueString()
		} else {
			logTextField = nil
		}
		customerID := new(string)
		if !r.OutputGoogleChronicle.CustomerID.IsUnknown() && !r.OutputGoogleChronicle.CustomerID.IsNull() {
			*customerID = r.OutputGoogleChronicle.CustomerID.ValueString()
		} else {
			customerID = nil
		}
		namespace := new(string)
		if !r.OutputGoogleChronicle.Namespace.IsUnknown() && !r.OutputGoogleChronicle.Namespace.IsNull() {
			*namespace = r.OutputGoogleChronicle.Namespace.ValueString()
		} else {
			namespace = nil
		}
		customLabels := make([]shared.CustomLabels, 0, len(r.OutputGoogleChronicle.CustomLabels))
		for _, customLabelsItem := range r.OutputGoogleChronicle.CustomLabels {
			var key4 string
			key4 = customLabelsItem.Key.ValueString()

			var value16 string
			value16 = customLabelsItem.Value.ValueString()

			customLabels = append(customLabels, shared.CustomLabels{
				Key:   key4,
				Value: value16,
			})
		}
		apiKey := new(string)
		if !r.OutputGoogleChronicle.APIKey.IsUnknown() && !r.OutputGoogleChronicle.APIKey.IsNull() {
			*apiKey = r.OutputGoogleChronicle.APIKey.ValueString()
		} else {
			apiKey = nil
		}
		apiKeySecret := new(string)
		if !r.OutputGoogleChronicle.APIKeySecret.IsUnknown() && !r.OutputGoogleChronicle.APIKeySecret.IsNull() {
			*apiKeySecret = r.OutputGoogleChronicle.APIKeySecret.ValueString()
		} else {
			apiKeySecret = nil
		}
		serviceAccountCredentials := new(string)
		if !r.OutputGoogleChronicle.ServiceAccountCredentials.IsUnknown() && !r.OutputGoogleChronicle.ServiceAccountCredentials.IsNull() {
			*serviceAccountCredentials = r.OutputGoogleChronicle.ServiceAccountCredentials.ValueString()
		} else {
			serviceAccountCredentials = nil
		}
		serviceAccountCredentialsSecret := new(string)
		if !r.OutputGoogleChronicle.ServiceAccountCredentialsSecret.IsUnknown() && !r.OutputGoogleChronicle.ServiceAccountCredentialsSecret.IsNull() {
			*serviceAccountCredentialsSecret = r.OutputGoogleChronicle.ServiceAccountCredentialsSecret.ValueString()
		} else {
			serviceAccountCredentialsSecret = nil
		}
		pqMaxFileSize14 := new(string)
		if !r.OutputGoogleChronicle.PqMaxFileSize.IsUnknown() && !r.OutputGoogleChronicle.PqMaxFileSize.IsNull() {
			*pqMaxFileSize14 = r.OutputGoogleChronicle.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize14 = nil
		}
		pqMaxSize14 := new(string)
		if !r.OutputGoogleChronicle.PqMaxSize.IsUnknown() && !r.OutputGoogleChronicle.PqMaxSize.IsNull() {
			*pqMaxSize14 = r.OutputGoogleChronicle.PqMaxSize.ValueString()
		} else {
			pqMaxSize14 = nil
		}
		pqPath14 := new(string)
		if !r.OutputGoogleChronicle.PqPath.IsUnknown() && !r.OutputGoogleChronicle.PqPath.IsNull() {
			*pqPath14 = r.OutputGoogleChronicle.PqPath.ValueString()
		} else {
			pqPath14 = nil
		}
		pqCompress14 := new(shared.OutputGoogleChronicleCompression)
		if !r.OutputGoogleChronicle.PqCompress.IsUnknown() && !r.OutputGoogleChronicle.PqCompress.IsNull() {
			*pqCompress14 = shared.OutputGoogleChronicleCompression(r.OutputGoogleChronicle.PqCompress.ValueString())
		} else {
			pqCompress14 = nil
		}
		pqOnBackpressure14 := new(shared.OutputGoogleChronicleQueueFullBehavior)
		if !r.OutputGoogleChronicle.PqOnBackpressure.IsUnknown() && !r.OutputGoogleChronicle.PqOnBackpressure.IsNull() {
			*pqOnBackpressure14 = shared.OutputGoogleChronicleQueueFullBehavior(r.OutputGoogleChronicle.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure14 = nil
		}
		pqMode14 := new(shared.OutputGoogleChronicleMode)
		if !r.OutputGoogleChronicle.PqMode.IsUnknown() && !r.OutputGoogleChronicle.PqMode.IsNull() {
			*pqMode14 = shared.OutputGoogleChronicleMode(r.OutputGoogleChronicle.PqMode.ValueString())
		} else {
			pqMode14 = nil
		}
		var pqControls14 *shared.OutputGoogleChroniclePqControls
		if r.OutputGoogleChronicle.PqControls != nil {
			pqControls14 = &shared.OutputGoogleChroniclePqControls{}
		}
		outputGoogleChronicle = &shared.OutputGoogleChronicle{
			ID:                              id19,
			Type:                            typeVar19,
			Pipeline:                        pipeline19,
			SystemFields:                    systemFields19,
			Environment:                     environment19,
			Streamtags:                      streamtags19,
			APIVersion:                      apiVersion,
			AuthenticationMethod:            authenticationMethod,
			ResponseRetrySettings:           responseRetrySettings8,
			TimeoutRetrySettings:            timeoutRetrySettings8,
			ResponseHonorRetryAfterHeader:   responseHonorRetryAfterHeader8,
			LogFormatType:                   logFormatType,
			Region:                          region2,
			Concurrency:                     concurrency9,
			MaxPayloadSizeKB:                maxPayloadSizeKb8,
			MaxPayloadEvents:                maxPayloadEvents8,
			Compress:                        compress13,
			RejectUnauthorized:              rejectUnauthorized16,
			TimeoutSec:                      timeoutSec8,
			FlushPeriodSec:                  flushPeriodSec10,
			ExtraHTTPHeaders:                extraHTTPHeaders7,
			FailedRequestLoggingMode:        failedRequestLoggingMode7,
			SafeHeaders:                     safeHeaders7,
			UseRoundRobinDNS:                useRoundRobinDns8,
			OnBackpressure:                  onBackpressure17,
			TotalMemoryLimitKB:              totalMemoryLimitKb2,
			Description:                     description17,
			ExtraLogTypes:                   extraLogTypes,
			LogType:                         logType2,
			LogTextField:                    logTextField,
			CustomerID:                      customerID,
			Namespace:                       namespace,
			CustomLabels:                    customLabels,
			APIKey:                          apiKey,
			APIKeySecret:                    apiKeySecret,
			ServiceAccountCredentials:       serviceAccountCredentials,
			ServiceAccountCredentialsSecret: serviceAccountCredentialsSecret,
			PqMaxFileSize:                   pqMaxFileSize14,
			PqMaxSize:                       pqMaxSize14,
			PqPath:                          pqPath14,
			PqCompress:                      pqCompress14,
			PqOnBackpressure:                pqOnBackpressure14,
			PqMode:                          pqMode14,
			PqControls:                      pqControls14,
		}
	}
	if outputGoogleChronicle != nil {
		out = shared.Output{
			OutputGoogleChronicle: outputGoogleChronicle,
		}
	}
	var outputGoogleCloudStorage *shared.OutputGoogleCloudStorage
	if r.OutputGoogleCloudStorage != nil {
		id20 := new(string)
		if !r.OutputGoogleCloudStorage.ID.IsUnknown() && !r.OutputGoogleCloudStorage.ID.IsNull() {
			*id20 = r.OutputGoogleCloudStorage.ID.ValueString()
		} else {
			id20 = nil
		}
		typeVar20 := new(shared.OutputGoogleCloudStorageType)
		if !r.OutputGoogleCloudStorage.Type.IsUnknown() && !r.OutputGoogleCloudStorage.Type.IsNull() {
			*typeVar20 = shared.OutputGoogleCloudStorageType(r.OutputGoogleCloudStorage.Type.ValueString())
		} else {
			typeVar20 = nil
		}
		pipeline20 := new(string)
		if !r.OutputGoogleCloudStorage.Pipeline.IsUnknown() && !r.OutputGoogleCloudStorage.Pipeline.IsNull() {
			*pipeline20 = r.OutputGoogleCloudStorage.Pipeline.ValueString()
		} else {
			pipeline20 = nil
		}
		systemFields20 := make([]string, 0, len(r.OutputGoogleCloudStorage.SystemFields))
		for _, systemFieldsItem20 := range r.OutputGoogleCloudStorage.SystemFields {
			systemFields20 = append(systemFields20, systemFieldsItem20.ValueString())
		}
		environment20 := new(string)
		if !r.OutputGoogleCloudStorage.Environment.IsUnknown() && !r.OutputGoogleCloudStorage.Environment.IsNull() {
			*environment20 = r.OutputGoogleCloudStorage.Environment.ValueString()
		} else {
			environment20 = nil
		}
		streamtags20 := make([]string, 0, len(r.OutputGoogleCloudStorage.Streamtags))
		for _, streamtagsItem20 := range r.OutputGoogleCloudStorage.Streamtags {
			streamtags20 = append(streamtags20, streamtagsItem20.ValueString())
		}
		var bucket1 string
		bucket1 = r.OutputGoogleCloudStorage.Bucket.ValueString()

		var region3 string
		region3 = r.OutputGoogleCloudStorage.Region.ValueString()

		endpoint2 := new(string)
		if !r.OutputGoogleCloudStorage.Endpoint.IsUnknown() && !r.OutputGoogleCloudStorage.Endpoint.IsNull() {
			*endpoint2 = r.OutputGoogleCloudStorage.Endpoint.ValueString()
		} else {
			endpoint2 = nil
		}
		signatureVersion2 := new(shared.OutputGoogleCloudStorageSignatureVersion)
		if !r.OutputGoogleCloudStorage.SignatureVersion.IsUnknown() && !r.OutputGoogleCloudStorage.SignatureVersion.IsNull() {
			*signatureVersion2 = shared.OutputGoogleCloudStorageSignatureVersion(r.OutputGoogleCloudStorage.SignatureVersion.ValueString())
		} else {
			signatureVersion2 = nil
		}
		awsAuthenticationMethod2 := new(shared.OutputGoogleCloudStorageAuthenticationMethod)
		if !r.OutputGoogleCloudStorage.AwsAuthenticationMethod.IsUnknown() && !r.OutputGoogleCloudStorage.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod2 = shared.OutputGoogleCloudStorageAuthenticationMethod(r.OutputGoogleCloudStorage.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod2 = nil
		}
		stagePath4 := new(string)
		if !r.OutputGoogleCloudStorage.StagePath.IsUnknown() && !r.OutputGoogleCloudStorage.StagePath.IsNull() {
			*stagePath4 = r.OutputGoogleCloudStorage.StagePath.ValueString()
		} else {
			stagePath4 = nil
		}
		destPath3 := new(string)
		if !r.OutputGoogleCloudStorage.DestPath.IsUnknown() && !r.OutputGoogleCloudStorage.DestPath.IsNull() {
			*destPath3 = r.OutputGoogleCloudStorage.DestPath.ValueString()
		} else {
			destPath3 = nil
		}
		verifyPermissions1 := new(bool)
		if !r.OutputGoogleCloudStorage.VerifyPermissions.IsUnknown() && !r.OutputGoogleCloudStorage.VerifyPermissions.IsNull() {
			*verifyPermissions1 = r.OutputGoogleCloudStorage.VerifyPermissions.ValueBool()
		} else {
			verifyPermissions1 = nil
		}
		objectAcl1 := new(shared.OutputGoogleCloudStorageObjectACL)
		if !r.OutputGoogleCloudStorage.ObjectACL.IsUnknown() && !r.OutputGoogleCloudStorage.ObjectACL.IsNull() {
			*objectAcl1 = shared.OutputGoogleCloudStorageObjectACL(r.OutputGoogleCloudStorage.ObjectACL.ValueString())
		} else {
			objectAcl1 = nil
		}
		storageClass2 := new(shared.OutputGoogleCloudStorageStorageClass)
		if !r.OutputGoogleCloudStorage.StorageClass.IsUnknown() && !r.OutputGoogleCloudStorage.StorageClass.IsNull() {
			*storageClass2 = shared.OutputGoogleCloudStorageStorageClass(r.OutputGoogleCloudStorage.StorageClass.ValueString())
		} else {
			storageClass2 = nil
		}
		reuseConnections2 := new(bool)
		if !r.OutputGoogleCloudStorage.ReuseConnections.IsUnknown() && !r.OutputGoogleCloudStorage.ReuseConnections.IsNull() {
			*reuseConnections2 = r.OutputGoogleCloudStorage.ReuseConnections.ValueBool()
		} else {
			reuseConnections2 = nil
		}
		rejectUnauthorized17 := new(bool)
		if !r.OutputGoogleCloudStorage.RejectUnauthorized.IsUnknown() && !r.OutputGoogleCloudStorage.RejectUnauthorized.IsNull() {
			*rejectUnauthorized17 = r.OutputGoogleCloudStorage.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized17 = nil
		}
		addIDToStagePath4 := new(bool)
		if !r.OutputGoogleCloudStorage.AddIDToStagePath.IsUnknown() && !r.OutputGoogleCloudStorage.AddIDToStagePath.IsNull() {
			*addIDToStagePath4 = r.OutputGoogleCloudStorage.AddIDToStagePath.ValueBool()
		} else {
			addIDToStagePath4 = nil
		}
		removeEmptyDirs4 := new(bool)
		if !r.OutputGoogleCloudStorage.RemoveEmptyDirs.IsUnknown() && !r.OutputGoogleCloudStorage.RemoveEmptyDirs.IsNull() {
			*removeEmptyDirs4 = r.OutputGoogleCloudStorage.RemoveEmptyDirs.ValueBool()
		} else {
			removeEmptyDirs4 = nil
		}
		partitionExpr3 := new(string)
		if !r.OutputGoogleCloudStorage.PartitionExpr.IsUnknown() && !r.OutputGoogleCloudStorage.PartitionExpr.IsNull() {
			*partitionExpr3 = r.OutputGoogleCloudStorage.PartitionExpr.ValueString()
		} else {
			partitionExpr3 = nil
		}
		format7 := new(shared.OutputGoogleCloudStorageDataFormat)
		if !r.OutputGoogleCloudStorage.Format.IsUnknown() && !r.OutputGoogleCloudStorage.Format.IsNull() {
			*format7 = shared.OutputGoogleCloudStorageDataFormat(r.OutputGoogleCloudStorage.Format.ValueString())
		} else {
			format7 = nil
		}
		baseFileName3 := new(string)
		if !r.OutputGoogleCloudStorage.BaseFileName.IsUnknown() && !r.OutputGoogleCloudStorage.BaseFileName.IsNull() {
			*baseFileName3 = r.OutputGoogleCloudStorage.BaseFileName.ValueString()
		} else {
			baseFileName3 = nil
		}
		fileNameSuffix4 := new(string)
		if !r.OutputGoogleCloudStorage.FileNameSuffix.IsUnknown() && !r.OutputGoogleCloudStorage.FileNameSuffix.IsNull() {
			*fileNameSuffix4 = r.OutputGoogleCloudStorage.FileNameSuffix.ValueString()
		} else {
			fileNameSuffix4 = nil
		}
		maxFileSizeMb4 := new(float64)
		if !r.OutputGoogleCloudStorage.MaxFileSizeMB.IsUnknown() && !r.OutputGoogleCloudStorage.MaxFileSizeMB.IsNull() {
			*maxFileSizeMb4 = r.OutputGoogleCloudStorage.MaxFileSizeMB.ValueFloat64()
		} else {
			maxFileSizeMb4 = nil
		}
		maxFileOpenTimeSec4 := new(float64)
		if !r.OutputGoogleCloudStorage.MaxFileOpenTimeSec.IsUnknown() && !r.OutputGoogleCloudStorage.MaxFileOpenTimeSec.IsNull() {
			*maxFileOpenTimeSec4 = r.OutputGoogleCloudStorage.MaxFileOpenTimeSec.ValueFloat64()
		} else {
			maxFileOpenTimeSec4 = nil
		}
		maxFileIdleTimeSec4 := new(float64)
		if !r.OutputGoogleCloudStorage.MaxFileIdleTimeSec.IsUnknown() && !r.OutputGoogleCloudStorage.MaxFileIdleTimeSec.IsNull() {
			*maxFileIdleTimeSec4 = r.OutputGoogleCloudStorage.MaxFileIdleTimeSec.ValueFloat64()
		} else {
			maxFileIdleTimeSec4 = nil
		}
		maxOpenFiles4 := new(float64)
		if !r.OutputGoogleCloudStorage.MaxOpenFiles.IsUnknown() && !r.OutputGoogleCloudStorage.MaxOpenFiles.IsNull() {
			*maxOpenFiles4 = r.OutputGoogleCloudStorage.MaxOpenFiles.ValueFloat64()
		} else {
			maxOpenFiles4 = nil
		}
		headerLine3 := new(string)
		if !r.OutputGoogleCloudStorage.HeaderLine.IsUnknown() && !r.OutputGoogleCloudStorage.HeaderLine.IsNull() {
			*headerLine3 = r.OutputGoogleCloudStorage.HeaderLine.ValueString()
		} else {
			headerLine3 = nil
		}
		writeHighWaterMark3 := new(float64)
		if !r.OutputGoogleCloudStorage.WriteHighWaterMark.IsUnknown() && !r.OutputGoogleCloudStorage.WriteHighWaterMark.IsNull() {
			*writeHighWaterMark3 = r.OutputGoogleCloudStorage.WriteHighWaterMark.ValueFloat64()
		} else {
			writeHighWaterMark3 = nil
		}
		onBackpressure18 := new(shared.OutputGoogleCloudStorageBackpressureBehavior)
		if !r.OutputGoogleCloudStorage.OnBackpressure.IsUnknown() && !r.OutputGoogleCloudStorage.OnBackpressure.IsNull() {
			*onBackpressure18 = shared.OutputGoogleCloudStorageBackpressureBehavior(r.OutputGoogleCloudStorage.OnBackpressure.ValueString())
		} else {
			onBackpressure18 = nil
		}
		deadletterEnabled4 := new(bool)
		if !r.OutputGoogleCloudStorage.DeadletterEnabled.IsUnknown() && !r.OutputGoogleCloudStorage.DeadletterEnabled.IsNull() {
			*deadletterEnabled4 = r.OutputGoogleCloudStorage.DeadletterEnabled.ValueBool()
		} else {
			deadletterEnabled4 = nil
		}
		onDiskFullBackpressure4 := new(shared.OutputGoogleCloudStorageDiskSpaceProtection)
		if !r.OutputGoogleCloudStorage.OnDiskFullBackpressure.IsUnknown() && !r.OutputGoogleCloudStorage.OnDiskFullBackpressure.IsNull() {
			*onDiskFullBackpressure4 = shared.OutputGoogleCloudStorageDiskSpaceProtection(r.OutputGoogleCloudStorage.OnDiskFullBackpressure.ValueString())
		} else {
			onDiskFullBackpressure4 = nil
		}
		description19 := new(string)
		if !r.OutputGoogleCloudStorage.Description.IsUnknown() && !r.OutputGoogleCloudStorage.Description.IsNull() {
			*description19 = r.OutputGoogleCloudStorage.Description.ValueString()
		} else {
			description19 = nil
		}
		compress14 := new(shared.OutputGoogleCloudStorageCompress)
		if !r.OutputGoogleCloudStorage.Compress.IsUnknown() && !r.OutputGoogleCloudStorage.Compress.IsNull() {
			*compress14 = shared.OutputGoogleCloudStorageCompress(r.OutputGoogleCloudStorage.Compress.ValueString())
		} else {
			compress14 = nil
		}
		compressionLevel3 := new(shared.OutputGoogleCloudStorageCompressionLevel)
		if !r.OutputGoogleCloudStorage.CompressionLevel.IsUnknown() && !r.OutputGoogleCloudStorage.CompressionLevel.IsNull() {
			*compressionLevel3 = shared.OutputGoogleCloudStorageCompressionLevel(r.OutputGoogleCloudStorage.CompressionLevel.ValueString())
		} else {
			compressionLevel3 = nil
		}
		automaticSchema3 := new(bool)
		if !r.OutputGoogleCloudStorage.AutomaticSchema.IsUnknown() && !r.OutputGoogleCloudStorage.AutomaticSchema.IsNull() {
			*automaticSchema3 = r.OutputGoogleCloudStorage.AutomaticSchema.ValueBool()
		} else {
			automaticSchema3 = nil
		}
		parquetVersion3 := new(shared.OutputGoogleCloudStorageParquetVersion)
		if !r.OutputGoogleCloudStorage.ParquetVersion.IsUnknown() && !r.OutputGoogleCloudStorage.ParquetVersion.IsNull() {
			*parquetVersion3 = shared.OutputGoogleCloudStorageParquetVersion(r.OutputGoogleCloudStorage.ParquetVersion.ValueString())
		} else {
			parquetVersion3 = nil
		}
		parquetDataPageVersion3 := new(shared.OutputGoogleCloudStorageDataPageVersion)
		if !r.OutputGoogleCloudStorage.ParquetDataPageVersion.IsUnknown() && !r.OutputGoogleCloudStorage.ParquetDataPageVersion.IsNull() {
			*parquetDataPageVersion3 = shared.OutputGoogleCloudStorageDataPageVersion(r.OutputGoogleCloudStorage.ParquetDataPageVersion.ValueString())
		} else {
			parquetDataPageVersion3 = nil
		}
		parquetRowGroupLength3 := new(float64)
		if !r.OutputGoogleCloudStorage.ParquetRowGroupLength.IsUnknown() && !r.OutputGoogleCloudStorage.ParquetRowGroupLength.IsNull() {
			*parquetRowGroupLength3 = r.OutputGoogleCloudStorage.ParquetRowGroupLength.ValueFloat64()
		} else {
			parquetRowGroupLength3 = nil
		}
		parquetPageSize3 := new(string)
		if !r.OutputGoogleCloudStorage.ParquetPageSize.IsUnknown() && !r.OutputGoogleCloudStorage.ParquetPageSize.IsNull() {
			*parquetPageSize3 = r.OutputGoogleCloudStorage.ParquetPageSize.ValueString()
		} else {
			parquetPageSize3 = nil
		}
		shouldLogInvalidRows3 := new(bool)
		if !r.OutputGoogleCloudStorage.ShouldLogInvalidRows.IsUnknown() && !r.OutputGoogleCloudStorage.ShouldLogInvalidRows.IsNull() {
			*shouldLogInvalidRows3 = r.OutputGoogleCloudStorage.ShouldLogInvalidRows.ValueBool()
		} else {
			shouldLogInvalidRows3 = nil
		}
		keyValueMetadata3 := make([]shared.OutputGoogleCloudStorageKeyValueMetadata, 0, len(r.OutputGoogleCloudStorage.KeyValueMetadata))
		for _, keyValueMetadataItem3 := range r.OutputGoogleCloudStorage.KeyValueMetadata {
			key5 := new(string)
			if !keyValueMetadataItem3.Key.IsUnknown() && !keyValueMetadataItem3.Key.IsNull() {
				*key5 = keyValueMetadataItem3.Key.ValueString()
			} else {
				key5 = nil
			}
			var value17 string
			value17 = keyValueMetadataItem3.Value.ValueString()

			keyValueMetadata3 = append(keyValueMetadata3, shared.OutputGoogleCloudStorageKeyValueMetadata{
				Key:   key5,
				Value: value17,
			})
		}
		enableStatistics3 := new(bool)
		if !r.OutputGoogleCloudStorage.EnableStatistics.IsUnknown() && !r.OutputGoogleCloudStorage.EnableStatistics.IsNull() {
			*enableStatistics3 = r.OutputGoogleCloudStorage.EnableStatistics.ValueBool()
		} else {
			enableStatistics3 = nil
		}
		enableWritePageIndex3 := new(bool)
		if !r.OutputGoogleCloudStorage.EnableWritePageIndex.IsUnknown() && !r.OutputGoogleCloudStorage.EnableWritePageIndex.IsNull() {
			*enableWritePageIndex3 = r.OutputGoogleCloudStorage.EnableWritePageIndex.ValueBool()
		} else {
			enableWritePageIndex3 = nil
		}
		enablePageChecksum3 := new(bool)
		if !r.OutputGoogleCloudStorage.EnablePageChecksum.IsUnknown() && !r.OutputGoogleCloudStorage.EnablePageChecksum.IsNull() {
			*enablePageChecksum3 = r.OutputGoogleCloudStorage.EnablePageChecksum.ValueBool()
		} else {
			enablePageChecksum3 = nil
		}
		emptyDirCleanupSec3 := new(float64)
		if !r.OutputGoogleCloudStorage.EmptyDirCleanupSec.IsUnknown() && !r.OutputGoogleCloudStorage.EmptyDirCleanupSec.IsNull() {
			*emptyDirCleanupSec3 = r.OutputGoogleCloudStorage.EmptyDirCleanupSec.ValueFloat64()
		} else {
			emptyDirCleanupSec3 = nil
		}
		deadletterPath3 := new(string)
		if !r.OutputGoogleCloudStorage.DeadletterPath.IsUnknown() && !r.OutputGoogleCloudStorage.DeadletterPath.IsNull() {
			*deadletterPath3 = r.OutputGoogleCloudStorage.DeadletterPath.ValueString()
		} else {
			deadletterPath3 = nil
		}
		maxRetryNum3 := new(float64)
		if !r.OutputGoogleCloudStorage.MaxRetryNum.IsUnknown() && !r.OutputGoogleCloudStorage.MaxRetryNum.IsNull() {
			*maxRetryNum3 = r.OutputGoogleCloudStorage.MaxRetryNum.ValueFloat64()
		} else {
			maxRetryNum3 = nil
		}
		awsAPIKey2 := new(string)
		if !r.OutputGoogleCloudStorage.AwsAPIKey.IsUnknown() && !r.OutputGoogleCloudStorage.AwsAPIKey.IsNull() {
			*awsAPIKey2 = r.OutputGoogleCloudStorage.AwsAPIKey.ValueString()
		} else {
			awsAPIKey2 = nil
		}
		awsSecretKey2 := new(string)
		if !r.OutputGoogleCloudStorage.AwsSecretKey.IsUnknown() && !r.OutputGoogleCloudStorage.AwsSecretKey.IsNull() {
			*awsSecretKey2 = r.OutputGoogleCloudStorage.AwsSecretKey.ValueString()
		} else {
			awsSecretKey2 = nil
		}
		awsSecret2 := new(string)
		if !r.OutputGoogleCloudStorage.AwsSecret.IsUnknown() && !r.OutputGoogleCloudStorage.AwsSecret.IsNull() {
			*awsSecret2 = r.OutputGoogleCloudStorage.AwsSecret.ValueString()
		} else {
			awsSecret2 = nil
		}
		outputGoogleCloudStorage = &shared.OutputGoogleCloudStorage{
			ID:                      id20,
			Type:                    typeVar20,
			Pipeline:                pipeline20,
			SystemFields:            systemFields20,
			Environment:             environment20,
			Streamtags:              streamtags20,
			Bucket:                  bucket1,
			Region:                  region3,
			Endpoint:                endpoint2,
			SignatureVersion:        signatureVersion2,
			AwsAuthenticationMethod: awsAuthenticationMethod2,
			StagePath:               stagePath4,
			DestPath:                destPath3,
			VerifyPermissions:       verifyPermissions1,
			ObjectACL:               objectAcl1,
			StorageClass:            storageClass2,
			ReuseConnections:        reuseConnections2,
			RejectUnauthorized:      rejectUnauthorized17,
			AddIDToStagePath:        addIDToStagePath4,
			RemoveEmptyDirs:         removeEmptyDirs4,
			PartitionExpr:           partitionExpr3,
			Format:                  format7,
			BaseFileName:            baseFileName3,
			FileNameSuffix:          fileNameSuffix4,
			MaxFileSizeMB:           maxFileSizeMb4,
			MaxFileOpenTimeSec:      maxFileOpenTimeSec4,
			MaxFileIdleTimeSec:      maxFileIdleTimeSec4,
			MaxOpenFiles:            maxOpenFiles4,
			HeaderLine:              headerLine3,
			WriteHighWaterMark:      writeHighWaterMark3,
			OnBackpressure:          onBackpressure18,
			DeadletterEnabled:       deadletterEnabled4,
			OnDiskFullBackpressure:  onDiskFullBackpressure4,
			Description:             description19,
			Compress:                compress14,
			CompressionLevel:        compressionLevel3,
			AutomaticSchema:         automaticSchema3,
			ParquetVersion:          parquetVersion3,
			ParquetDataPageVersion:  parquetDataPageVersion3,
			ParquetRowGroupLength:   parquetRowGroupLength3,
			ParquetPageSize:         parquetPageSize3,
			ShouldLogInvalidRows:    shouldLogInvalidRows3,
			KeyValueMetadata:        keyValueMetadata3,
			EnableStatistics:        enableStatistics3,
			EnableWritePageIndex:    enableWritePageIndex3,
			EnablePageChecksum:      enablePageChecksum3,
			EmptyDirCleanupSec:      emptyDirCleanupSec3,
			DeadletterPath:          deadletterPath3,
			MaxRetryNum:             maxRetryNum3,
			AwsAPIKey:               awsAPIKey2,
			AwsSecretKey:            awsSecretKey2,
			AwsSecret:               awsSecret2,
		}
	}
	if outputGoogleCloudStorage != nil {
		out = shared.Output{
			OutputGoogleCloudStorage: outputGoogleCloudStorage,
		}
	}
	var outputGoogleCloudLogging *shared.OutputGoogleCloudLogging
	if r.OutputGoogleCloudLogging != nil {
		id21 := new(string)
		if !r.OutputGoogleCloudLogging.ID.IsUnknown() && !r.OutputGoogleCloudLogging.ID.IsNull() {
			*id21 = r.OutputGoogleCloudLogging.ID.ValueString()
		} else {
			id21 = nil
		}
		typeVar21 := new(shared.OutputGoogleCloudLoggingType)
		if !r.OutputGoogleCloudLogging.Type.IsUnknown() && !r.OutputGoogleCloudLogging.Type.IsNull() {
			*typeVar21 = shared.OutputGoogleCloudLoggingType(r.OutputGoogleCloudLogging.Type.ValueString())
		} else {
			typeVar21 = nil
		}
		pipeline21 := new(string)
		if !r.OutputGoogleCloudLogging.Pipeline.IsUnknown() && !r.OutputGoogleCloudLogging.Pipeline.IsNull() {
			*pipeline21 = r.OutputGoogleCloudLogging.Pipeline.ValueString()
		} else {
			pipeline21 = nil
		}
		systemFields21 := make([]string, 0, len(r.OutputGoogleCloudLogging.SystemFields))
		for _, systemFieldsItem21 := range r.OutputGoogleCloudLogging.SystemFields {
			systemFields21 = append(systemFields21, systemFieldsItem21.ValueString())
		}
		environment21 := new(string)
		if !r.OutputGoogleCloudLogging.Environment.IsUnknown() && !r.OutputGoogleCloudLogging.Environment.IsNull() {
			*environment21 = r.OutputGoogleCloudLogging.Environment.ValueString()
		} else {
			environment21 = nil
		}
		streamtags21 := make([]string, 0, len(r.OutputGoogleCloudLogging.Streamtags))
		for _, streamtagsItem21 := range r.OutputGoogleCloudLogging.Streamtags {
			streamtags21 = append(streamtags21, streamtagsItem21.ValueString())
		}
		logLocationType := shared.LogLocationType(r.OutputGoogleCloudLogging.LogLocationType.ValueString())
		var logNameExpression string
		logNameExpression = r.OutputGoogleCloudLogging.LogNameExpression.ValueString()

		payloadFormat := new(shared.PayloadFormat)
		if !r.OutputGoogleCloudLogging.PayloadFormat.IsUnknown() && !r.OutputGoogleCloudLogging.PayloadFormat.IsNull() {
			*payloadFormat = shared.PayloadFormat(r.OutputGoogleCloudLogging.PayloadFormat.ValueString())
		} else {
			payloadFormat = nil
		}
		logLabels := make([]shared.LogLabels, 0, len(r.OutputGoogleCloudLogging.LogLabels))
		for _, logLabelsItem := range r.OutputGoogleCloudLogging.LogLabels {
			var label string
			label = logLabelsItem.Label.ValueString()

			var valueExpression string
			valueExpression = logLabelsItem.ValueExpression.ValueString()

			logLabels = append(logLabels, shared.LogLabels{
				Label:           label,
				ValueExpression: valueExpression,
			})
		}
		resourceTypeExpression := new(string)
		if !r.OutputGoogleCloudLogging.ResourceTypeExpression.IsUnknown() && !r.OutputGoogleCloudLogging.ResourceTypeExpression.IsNull() {
			*resourceTypeExpression = r.OutputGoogleCloudLogging.ResourceTypeExpression.ValueString()
		} else {
			resourceTypeExpression = nil
		}
		resourceTypeLabels := make([]shared.ResourceTypeLabels, 0, len(r.OutputGoogleCloudLogging.ResourceTypeLabels))
		for _, resourceTypeLabelsItem := range r.OutputGoogleCloudLogging.ResourceTypeLabels {
			var label1 string
			label1 = resourceTypeLabelsItem.Label.ValueString()

			var valueExpression1 string
			valueExpression1 = resourceTypeLabelsItem.ValueExpression.ValueString()

			resourceTypeLabels = append(resourceTypeLabels, shared.ResourceTypeLabels{
				Label:           label1,
				ValueExpression: valueExpression1,
			})
		}
		severityExpression := new(string)
		if !r.OutputGoogleCloudLogging.SeverityExpression.IsUnknown() && !r.OutputGoogleCloudLogging.SeverityExpression.IsNull() {
			*severityExpression = r.OutputGoogleCloudLogging.SeverityExpression.ValueString()
		} else {
			severityExpression = nil
		}
		insertIDExpression := new(string)
		if !r.OutputGoogleCloudLogging.InsertIDExpression.IsUnknown() && !r.OutputGoogleCloudLogging.InsertIDExpression.IsNull() {
			*insertIDExpression = r.OutputGoogleCloudLogging.InsertIDExpression.ValueString()
		} else {
			insertIDExpression = nil
		}
		googleAuthMethod := new(shared.OutputGoogleCloudLoggingAuthenticationMethod)
		if !r.OutputGoogleCloudLogging.GoogleAuthMethod.IsUnknown() && !r.OutputGoogleCloudLogging.GoogleAuthMethod.IsNull() {
			*googleAuthMethod = shared.OutputGoogleCloudLoggingAuthenticationMethod(r.OutputGoogleCloudLogging.GoogleAuthMethod.ValueString())
		} else {
			googleAuthMethod = nil
		}
		serviceAccountCredentials1 := new(string)
		if !r.OutputGoogleCloudLogging.ServiceAccountCredentials.IsUnknown() && !r.OutputGoogleCloudLogging.ServiceAccountCredentials.IsNull() {
			*serviceAccountCredentials1 = r.OutputGoogleCloudLogging.ServiceAccountCredentials.ValueString()
		} else {
			serviceAccountCredentials1 = nil
		}
		secret2 := new(string)
		if !r.OutputGoogleCloudLogging.Secret.IsUnknown() && !r.OutputGoogleCloudLogging.Secret.IsNull() {
			*secret2 = r.OutputGoogleCloudLogging.Secret.ValueString()
		} else {
			secret2 = nil
		}
		maxPayloadSizeKb9 := new(float64)
		if !r.OutputGoogleCloudLogging.MaxPayloadSizeKB.IsUnknown() && !r.OutputGoogleCloudLogging.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb9 = r.OutputGoogleCloudLogging.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb9 = nil
		}
		maxPayloadEvents9 := new(float64)
		if !r.OutputGoogleCloudLogging.MaxPayloadEvents.IsUnknown() && !r.OutputGoogleCloudLogging.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents9 = r.OutputGoogleCloudLogging.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents9 = nil
		}
		flushPeriodSec11 := new(float64)
		if !r.OutputGoogleCloudLogging.FlushPeriodSec.IsUnknown() && !r.OutputGoogleCloudLogging.FlushPeriodSec.IsNull() {
			*flushPeriodSec11 = r.OutputGoogleCloudLogging.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec11 = nil
		}
		concurrency10 := new(float64)
		if !r.OutputGoogleCloudLogging.Concurrency.IsUnknown() && !r.OutputGoogleCloudLogging.Concurrency.IsNull() {
			*concurrency10 = r.OutputGoogleCloudLogging.Concurrency.ValueFloat64()
		} else {
			concurrency10 = nil
		}
		connectionTimeout5 := new(float64)
		if !r.OutputGoogleCloudLogging.ConnectionTimeout.IsUnknown() && !r.OutputGoogleCloudLogging.ConnectionTimeout.IsNull() {
			*connectionTimeout5 = r.OutputGoogleCloudLogging.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout5 = nil
		}
		timeoutSec9 := new(float64)
		if !r.OutputGoogleCloudLogging.TimeoutSec.IsUnknown() && !r.OutputGoogleCloudLogging.TimeoutSec.IsNull() {
			*timeoutSec9 = r.OutputGoogleCloudLogging.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec9 = nil
		}
		throttleRateReqPerSec := new(int64)
		if !r.OutputGoogleCloudLogging.ThrottleRateReqPerSec.IsUnknown() && !r.OutputGoogleCloudLogging.ThrottleRateReqPerSec.IsNull() {
			*throttleRateReqPerSec = r.OutputGoogleCloudLogging.ThrottleRateReqPerSec.ValueInt64()
		} else {
			throttleRateReqPerSec = nil
		}
		requestMethodExpression := new(string)
		if !r.OutputGoogleCloudLogging.RequestMethodExpression.IsUnknown() && !r.OutputGoogleCloudLogging.RequestMethodExpression.IsNull() {
			*requestMethodExpression = r.OutputGoogleCloudLogging.RequestMethodExpression.ValueString()
		} else {
			requestMethodExpression = nil
		}
		requestURLExpression := new(string)
		if !r.OutputGoogleCloudLogging.RequestURLExpression.IsUnknown() && !r.OutputGoogleCloudLogging.RequestURLExpression.IsNull() {
			*requestURLExpression = r.OutputGoogleCloudLogging.RequestURLExpression.ValueString()
		} else {
			requestURLExpression = nil
		}
		requestSizeExpression := new(string)
		if !r.OutputGoogleCloudLogging.RequestSizeExpression.IsUnknown() && !r.OutputGoogleCloudLogging.RequestSizeExpression.IsNull() {
			*requestSizeExpression = r.OutputGoogleCloudLogging.RequestSizeExpression.ValueString()
		} else {
			requestSizeExpression = nil
		}
		statusExpression := new(string)
		if !r.OutputGoogleCloudLogging.StatusExpression.IsUnknown() && !r.OutputGoogleCloudLogging.StatusExpression.IsNull() {
			*statusExpression = r.OutputGoogleCloudLogging.StatusExpression.ValueString()
		} else {
			statusExpression = nil
		}
		responseSizeExpression := new(string)
		if !r.OutputGoogleCloudLogging.ResponseSizeExpression.IsUnknown() && !r.OutputGoogleCloudLogging.ResponseSizeExpression.IsNull() {
			*responseSizeExpression = r.OutputGoogleCloudLogging.ResponseSizeExpression.ValueString()
		} else {
			responseSizeExpression = nil
		}
		userAgentExpression := new(string)
		if !r.OutputGoogleCloudLogging.UserAgentExpression.IsUnknown() && !r.OutputGoogleCloudLogging.UserAgentExpression.IsNull() {
			*userAgentExpression = r.OutputGoogleCloudLogging.UserAgentExpression.ValueString()
		} else {
			userAgentExpression = nil
		}
		remoteIPExpression := new(string)
		if !r.OutputGoogleCloudLogging.RemoteIPExpression.IsUnknown() && !r.OutputGoogleCloudLogging.RemoteIPExpression.IsNull() {
			*remoteIPExpression = r.OutputGoogleCloudLogging.RemoteIPExpression.ValueString()
		} else {
			remoteIPExpression = nil
		}
		serverIPExpression := new(string)
		if !r.OutputGoogleCloudLogging.ServerIPExpression.IsUnknown() && !r.OutputGoogleCloudLogging.ServerIPExpression.IsNull() {
			*serverIPExpression = r.OutputGoogleCloudLogging.ServerIPExpression.ValueString()
		} else {
			serverIPExpression = nil
		}
		refererExpression := new(string)
		if !r.OutputGoogleCloudLogging.RefererExpression.IsUnknown() && !r.OutputGoogleCloudLogging.RefererExpression.IsNull() {
			*refererExpression = r.OutputGoogleCloudLogging.RefererExpression.ValueString()
		} else {
			refererExpression = nil
		}
		latencyExpression := new(string)
		if !r.OutputGoogleCloudLogging.LatencyExpression.IsUnknown() && !r.OutputGoogleCloudLogging.LatencyExpression.IsNull() {
			*latencyExpression = r.OutputGoogleCloudLogging.LatencyExpression.ValueString()
		} else {
			latencyExpression = nil
		}
		cacheLookupExpression := new(string)
		if !r.OutputGoogleCloudLogging.CacheLookupExpression.IsUnknown() && !r.OutputGoogleCloudLogging.CacheLookupExpression.IsNull() {
			*cacheLookupExpression = r.OutputGoogleCloudLogging.CacheLookupExpression.ValueString()
		} else {
			cacheLookupExpression = nil
		}
		cacheHitExpression := new(string)
		if !r.OutputGoogleCloudLogging.CacheHitExpression.IsUnknown() && !r.OutputGoogleCloudLogging.CacheHitExpression.IsNull() {
			*cacheHitExpression = r.OutputGoogleCloudLogging.CacheHitExpression.ValueString()
		} else {
			cacheHitExpression = nil
		}
		cacheValidatedExpression := new(string)
		if !r.OutputGoogleCloudLogging.CacheValidatedExpression.IsUnknown() && !r.OutputGoogleCloudLogging.CacheValidatedExpression.IsNull() {
			*cacheValidatedExpression = r.OutputGoogleCloudLogging.CacheValidatedExpression.ValueString()
		} else {
			cacheValidatedExpression = nil
		}
		cacheFillBytesExpression := new(string)
		if !r.OutputGoogleCloudLogging.CacheFillBytesExpression.IsUnknown() && !r.OutputGoogleCloudLogging.CacheFillBytesExpression.IsNull() {
			*cacheFillBytesExpression = r.OutputGoogleCloudLogging.CacheFillBytesExpression.ValueString()
		} else {
			cacheFillBytesExpression = nil
		}
		protocolExpression := new(string)
		if !r.OutputGoogleCloudLogging.ProtocolExpression.IsUnknown() && !r.OutputGoogleCloudLogging.ProtocolExpression.IsNull() {
			*protocolExpression = r.OutputGoogleCloudLogging.ProtocolExpression.ValueString()
		} else {
			protocolExpression = nil
		}
		idExpression := new(string)
		if !r.OutputGoogleCloudLogging.IDExpression.IsUnknown() && !r.OutputGoogleCloudLogging.IDExpression.IsNull() {
			*idExpression = r.OutputGoogleCloudLogging.IDExpression.ValueString()
		} else {
			idExpression = nil
		}
		producerExpression := new(string)
		if !r.OutputGoogleCloudLogging.ProducerExpression.IsUnknown() && !r.OutputGoogleCloudLogging.ProducerExpression.IsNull() {
			*producerExpression = r.OutputGoogleCloudLogging.ProducerExpression.ValueString()
		} else {
			producerExpression = nil
		}
		firstExpression := new(string)
		if !r.OutputGoogleCloudLogging.FirstExpression.IsUnknown() && !r.OutputGoogleCloudLogging.FirstExpression.IsNull() {
			*firstExpression = r.OutputGoogleCloudLogging.FirstExpression.ValueString()
		} else {
			firstExpression = nil
		}
		lastExpression := new(string)
		if !r.OutputGoogleCloudLogging.LastExpression.IsUnknown() && !r.OutputGoogleCloudLogging.LastExpression.IsNull() {
			*lastExpression = r.OutputGoogleCloudLogging.LastExpression.ValueString()
		} else {
			lastExpression = nil
		}
		fileExpression := new(string)
		if !r.OutputGoogleCloudLogging.FileExpression.IsUnknown() && !r.OutputGoogleCloudLogging.FileExpression.IsNull() {
			*fileExpression = r.OutputGoogleCloudLogging.FileExpression.ValueString()
		} else {
			fileExpression = nil
		}
		lineExpression := new(string)
		if !r.OutputGoogleCloudLogging.LineExpression.IsUnknown() && !r.OutputGoogleCloudLogging.LineExpression.IsNull() {
			*lineExpression = r.OutputGoogleCloudLogging.LineExpression.ValueString()
		} else {
			lineExpression = nil
		}
		functionExpression := new(string)
		if !r.OutputGoogleCloudLogging.FunctionExpression.IsUnknown() && !r.OutputGoogleCloudLogging.FunctionExpression.IsNull() {
			*functionExpression = r.OutputGoogleCloudLogging.FunctionExpression.ValueString()
		} else {
			functionExpression = nil
		}
		uidExpression := new(string)
		if !r.OutputGoogleCloudLogging.UIDExpression.IsUnknown() && !r.OutputGoogleCloudLogging.UIDExpression.IsNull() {
			*uidExpression = r.OutputGoogleCloudLogging.UIDExpression.ValueString()
		} else {
			uidExpression = nil
		}
		indexExpression := new(string)
		if !r.OutputGoogleCloudLogging.IndexExpression.IsUnknown() && !r.OutputGoogleCloudLogging.IndexExpression.IsNull() {
			*indexExpression = r.OutputGoogleCloudLogging.IndexExpression.ValueString()
		} else {
			indexExpression = nil
		}
		totalSplitsExpression := new(string)
		if !r.OutputGoogleCloudLogging.TotalSplitsExpression.IsUnknown() && !r.OutputGoogleCloudLogging.TotalSplitsExpression.IsNull() {
			*totalSplitsExpression = r.OutputGoogleCloudLogging.TotalSplitsExpression.ValueString()
		} else {
			totalSplitsExpression = nil
		}
		traceExpression := new(string)
		if !r.OutputGoogleCloudLogging.TraceExpression.IsUnknown() && !r.OutputGoogleCloudLogging.TraceExpression.IsNull() {
			*traceExpression = r.OutputGoogleCloudLogging.TraceExpression.ValueString()
		} else {
			traceExpression = nil
		}
		spanIDExpression := new(string)
		if !r.OutputGoogleCloudLogging.SpanIDExpression.IsUnknown() && !r.OutputGoogleCloudLogging.SpanIDExpression.IsNull() {
			*spanIDExpression = r.OutputGoogleCloudLogging.SpanIDExpression.ValueString()
		} else {
			spanIDExpression = nil
		}
		traceSampledExpression := new(string)
		if !r.OutputGoogleCloudLogging.TraceSampledExpression.IsUnknown() && !r.OutputGoogleCloudLogging.TraceSampledExpression.IsNull() {
			*traceSampledExpression = r.OutputGoogleCloudLogging.TraceSampledExpression.ValueString()
		} else {
			traceSampledExpression = nil
		}
		onBackpressure19 := new(shared.OutputGoogleCloudLoggingBackpressureBehavior)
		if !r.OutputGoogleCloudLogging.OnBackpressure.IsUnknown() && !r.OutputGoogleCloudLogging.OnBackpressure.IsNull() {
			*onBackpressure19 = shared.OutputGoogleCloudLoggingBackpressureBehavior(r.OutputGoogleCloudLogging.OnBackpressure.ValueString())
		} else {
			onBackpressure19 = nil
		}
		totalMemoryLimitKb3 := new(float64)
		if !r.OutputGoogleCloudLogging.TotalMemoryLimitKB.IsUnknown() && !r.OutputGoogleCloudLogging.TotalMemoryLimitKB.IsNull() {
			*totalMemoryLimitKb3 = r.OutputGoogleCloudLogging.TotalMemoryLimitKB.ValueFloat64()
		} else {
			totalMemoryLimitKb3 = nil
		}
		description20 := new(string)
		if !r.OutputGoogleCloudLogging.Description.IsUnknown() && !r.OutputGoogleCloudLogging.Description.IsNull() {
			*description20 = r.OutputGoogleCloudLogging.Description.ValueString()
		} else {
			description20 = nil
		}
		var logLocationExpression string
		logLocationExpression = r.OutputGoogleCloudLogging.LogLocationExpression.ValueString()

		payloadExpression := new(string)
		if !r.OutputGoogleCloudLogging.PayloadExpression.IsUnknown() && !r.OutputGoogleCloudLogging.PayloadExpression.IsNull() {
			*payloadExpression = r.OutputGoogleCloudLogging.PayloadExpression.ValueString()
		} else {
			payloadExpression = nil
		}
		pqMaxFileSize15 := new(string)
		if !r.OutputGoogleCloudLogging.PqMaxFileSize.IsUnknown() && !r.OutputGoogleCloudLogging.PqMaxFileSize.IsNull() {
			*pqMaxFileSize15 = r.OutputGoogleCloudLogging.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize15 = nil
		}
		pqMaxSize15 := new(string)
		if !r.OutputGoogleCloudLogging.PqMaxSize.IsUnknown() && !r.OutputGoogleCloudLogging.PqMaxSize.IsNull() {
			*pqMaxSize15 = r.OutputGoogleCloudLogging.PqMaxSize.ValueString()
		} else {
			pqMaxSize15 = nil
		}
		pqPath15 := new(string)
		if !r.OutputGoogleCloudLogging.PqPath.IsUnknown() && !r.OutputGoogleCloudLogging.PqPath.IsNull() {
			*pqPath15 = r.OutputGoogleCloudLogging.PqPath.ValueString()
		} else {
			pqPath15 = nil
		}
		pqCompress15 := new(shared.OutputGoogleCloudLoggingCompression)
		if !r.OutputGoogleCloudLogging.PqCompress.IsUnknown() && !r.OutputGoogleCloudLogging.PqCompress.IsNull() {
			*pqCompress15 = shared.OutputGoogleCloudLoggingCompression(r.OutputGoogleCloudLogging.PqCompress.ValueString())
		} else {
			pqCompress15 = nil
		}
		pqOnBackpressure15 := new(shared.OutputGoogleCloudLoggingQueueFullBehavior)
		if !r.OutputGoogleCloudLogging.PqOnBackpressure.IsUnknown() && !r.OutputGoogleCloudLogging.PqOnBackpressure.IsNull() {
			*pqOnBackpressure15 = shared.OutputGoogleCloudLoggingQueueFullBehavior(r.OutputGoogleCloudLogging.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure15 = nil
		}
		pqMode15 := new(shared.OutputGoogleCloudLoggingMode)
		if !r.OutputGoogleCloudLogging.PqMode.IsUnknown() && !r.OutputGoogleCloudLogging.PqMode.IsNull() {
			*pqMode15 = shared.OutputGoogleCloudLoggingMode(r.OutputGoogleCloudLogging.PqMode.ValueString())
		} else {
			pqMode15 = nil
		}
		var pqControls15 *shared.OutputGoogleCloudLoggingPqControls
		if r.OutputGoogleCloudLogging.PqControls != nil {
			pqControls15 = &shared.OutputGoogleCloudLoggingPqControls{}
		}
		outputGoogleCloudLogging = &shared.OutputGoogleCloudLogging{
			ID:                        id21,
			Type:                      typeVar21,
			Pipeline:                  pipeline21,
			SystemFields:              systemFields21,
			Environment:               environment21,
			Streamtags:                streamtags21,
			LogLocationType:           logLocationType,
			LogNameExpression:         logNameExpression,
			PayloadFormat:             payloadFormat,
			LogLabels:                 logLabels,
			ResourceTypeExpression:    resourceTypeExpression,
			ResourceTypeLabels:        resourceTypeLabels,
			SeverityExpression:        severityExpression,
			InsertIDExpression:        insertIDExpression,
			GoogleAuthMethod:          googleAuthMethod,
			ServiceAccountCredentials: serviceAccountCredentials1,
			Secret:                    secret2,
			MaxPayloadSizeKB:          maxPayloadSizeKb9,
			MaxPayloadEvents:          maxPayloadEvents9,
			FlushPeriodSec:            flushPeriodSec11,
			Concurrency:               concurrency10,
			ConnectionTimeout:         connectionTimeout5,
			TimeoutSec:                timeoutSec9,
			ThrottleRateReqPerSec:     throttleRateReqPerSec,
			RequestMethodExpression:   requestMethodExpression,
			RequestURLExpression:      requestURLExpression,
			RequestSizeExpression:     requestSizeExpression,
			StatusExpression:          statusExpression,
			ResponseSizeExpression:    responseSizeExpression,
			UserAgentExpression:       userAgentExpression,
			RemoteIPExpression:        remoteIPExpression,
			ServerIPExpression:        serverIPExpression,
			RefererExpression:         refererExpression,
			LatencyExpression:         latencyExpression,
			CacheLookupExpression:     cacheLookupExpression,
			CacheHitExpression:        cacheHitExpression,
			CacheValidatedExpression:  cacheValidatedExpression,
			CacheFillBytesExpression:  cacheFillBytesExpression,
			ProtocolExpression:        protocolExpression,
			IDExpression:              idExpression,
			ProducerExpression:        producerExpression,
			FirstExpression:           firstExpression,
			LastExpression:            lastExpression,
			FileExpression:            fileExpression,
			LineExpression:            lineExpression,
			FunctionExpression:        functionExpression,
			UIDExpression:             uidExpression,
			IndexExpression:           indexExpression,
			TotalSplitsExpression:     totalSplitsExpression,
			TraceExpression:           traceExpression,
			SpanIDExpression:          spanIDExpression,
			TraceSampledExpression:    traceSampledExpression,
			OnBackpressure:            onBackpressure19,
			TotalMemoryLimitKB:        totalMemoryLimitKb3,
			Description:               description20,
			LogLocationExpression:     logLocationExpression,
			PayloadExpression:         payloadExpression,
			PqMaxFileSize:             pqMaxFileSize15,
			PqMaxSize:                 pqMaxSize15,
			PqPath:                    pqPath15,
			PqCompress:                pqCompress15,
			PqOnBackpressure:          pqOnBackpressure15,
			PqMode:                    pqMode15,
			PqControls:                pqControls15,
		}
	}
	if outputGoogleCloudLogging != nil {
		out = shared.Output{
			OutputGoogleCloudLogging: outputGoogleCloudLogging,
		}
	}
	var outputGooglePubsub *shared.OutputGooglePubsub
	if r.OutputGooglePubsub != nil {
		id22 := new(string)
		if !r.OutputGooglePubsub.ID.IsUnknown() && !r.OutputGooglePubsub.ID.IsNull() {
			*id22 = r.OutputGooglePubsub.ID.ValueString()
		} else {
			id22 = nil
		}
		typeVar22 := shared.OutputGooglePubsubType(r.OutputGooglePubsub.Type.ValueString())
		pipeline22 := new(string)
		if !r.OutputGooglePubsub.Pipeline.IsUnknown() && !r.OutputGooglePubsub.Pipeline.IsNull() {
			*pipeline22 = r.OutputGooglePubsub.Pipeline.ValueString()
		} else {
			pipeline22 = nil
		}
		systemFields22 := make([]string, 0, len(r.OutputGooglePubsub.SystemFields))
		for _, systemFieldsItem22 := range r.OutputGooglePubsub.SystemFields {
			systemFields22 = append(systemFields22, systemFieldsItem22.ValueString())
		}
		environment22 := new(string)
		if !r.OutputGooglePubsub.Environment.IsUnknown() && !r.OutputGooglePubsub.Environment.IsNull() {
			*environment22 = r.OutputGooglePubsub.Environment.ValueString()
		} else {
			environment22 = nil
		}
		streamtags22 := make([]string, 0, len(r.OutputGooglePubsub.Streamtags))
		for _, streamtagsItem22 := range r.OutputGooglePubsub.Streamtags {
			streamtags22 = append(streamtags22, streamtagsItem22.ValueString())
		}
		var topicName string
		topicName = r.OutputGooglePubsub.TopicName.ValueString()

		createTopic := new(bool)
		if !r.OutputGooglePubsub.CreateTopic.IsUnknown() && !r.OutputGooglePubsub.CreateTopic.IsNull() {
			*createTopic = r.OutputGooglePubsub.CreateTopic.ValueBool()
		} else {
			createTopic = nil
		}
		orderedDelivery := new(bool)
		if !r.OutputGooglePubsub.OrderedDelivery.IsUnknown() && !r.OutputGooglePubsub.OrderedDelivery.IsNull() {
			*orderedDelivery = r.OutputGooglePubsub.OrderedDelivery.ValueBool()
		} else {
			orderedDelivery = nil
		}
		region4 := new(string)
		if !r.OutputGooglePubsub.Region.IsUnknown() && !r.OutputGooglePubsub.Region.IsNull() {
			*region4 = r.OutputGooglePubsub.Region.ValueString()
		} else {
			region4 = nil
		}
		googleAuthMethod1 := new(shared.OutputGooglePubsubAuthenticationMethod)
		if !r.OutputGooglePubsub.GoogleAuthMethod.IsUnknown() && !r.OutputGooglePubsub.GoogleAuthMethod.IsNull() {
			*googleAuthMethod1 = shared.OutputGooglePubsubAuthenticationMethod(r.OutputGooglePubsub.GoogleAuthMethod.ValueString())
		} else {
			googleAuthMethod1 = nil
		}
		serviceAccountCredentials2 := new(string)
		if !r.OutputGooglePubsub.ServiceAccountCredentials.IsUnknown() && !r.OutputGooglePubsub.ServiceAccountCredentials.IsNull() {
			*serviceAccountCredentials2 = r.OutputGooglePubsub.ServiceAccountCredentials.ValueString()
		} else {
			serviceAccountCredentials2 = nil
		}
		secret3 := new(string)
		if !r.OutputGooglePubsub.Secret.IsUnknown() && !r.OutputGooglePubsub.Secret.IsNull() {
			*secret3 = r.OutputGooglePubsub.Secret.ValueString()
		} else {
			secret3 = nil
		}
		batchSize := new(float64)
		if !r.OutputGooglePubsub.BatchSize.IsUnknown() && !r.OutputGooglePubsub.BatchSize.IsNull() {
			*batchSize = r.OutputGooglePubsub.BatchSize.ValueFloat64()
		} else {
			batchSize = nil
		}
		batchTimeout := new(float64)
		if !r.OutputGooglePubsub.BatchTimeout.IsUnknown() && !r.OutputGooglePubsub.BatchTimeout.IsNull() {
			*batchTimeout = r.OutputGooglePubsub.BatchTimeout.ValueFloat64()
		} else {
			batchTimeout = nil
		}
		maxQueueSize := new(float64)
		if !r.OutputGooglePubsub.MaxQueueSize.IsUnknown() && !r.OutputGooglePubsub.MaxQueueSize.IsNull() {
			*maxQueueSize = r.OutputGooglePubsub.MaxQueueSize.ValueFloat64()
		} else {
			maxQueueSize = nil
		}
		maxRecordSizeKb2 := new(float64)
		if !r.OutputGooglePubsub.MaxRecordSizeKB.IsUnknown() && !r.OutputGooglePubsub.MaxRecordSizeKB.IsNull() {
			*maxRecordSizeKb2 = r.OutputGooglePubsub.MaxRecordSizeKB.ValueFloat64()
		} else {
			maxRecordSizeKb2 = nil
		}
		flushPeriodSec12 := new(float64)
		if !r.OutputGooglePubsub.FlushPeriodSec.IsUnknown() && !r.OutputGooglePubsub.FlushPeriodSec.IsNull() {
			*flushPeriodSec12 = r.OutputGooglePubsub.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec12 = nil
		}
		maxInProgress := new(float64)
		if !r.OutputGooglePubsub.MaxInProgress.IsUnknown() && !r.OutputGooglePubsub.MaxInProgress.IsNull() {
			*maxInProgress = r.OutputGooglePubsub.MaxInProgress.ValueFloat64()
		} else {
			maxInProgress = nil
		}
		onBackpressure20 := new(shared.OutputGooglePubsubBackpressureBehavior)
		if !r.OutputGooglePubsub.OnBackpressure.IsUnknown() && !r.OutputGooglePubsub.OnBackpressure.IsNull() {
			*onBackpressure20 = shared.OutputGooglePubsubBackpressureBehavior(r.OutputGooglePubsub.OnBackpressure.ValueString())
		} else {
			onBackpressure20 = nil
		}
		description21 := new(string)
		if !r.OutputGooglePubsub.Description.IsUnknown() && !r.OutputGooglePubsub.Description.IsNull() {
			*description21 = r.OutputGooglePubsub.Description.ValueString()
		} else {
			description21 = nil
		}
		pqMaxFileSize16 := new(string)
		if !r.OutputGooglePubsub.PqMaxFileSize.IsUnknown() && !r.OutputGooglePubsub.PqMaxFileSize.IsNull() {
			*pqMaxFileSize16 = r.OutputGooglePubsub.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize16 = nil
		}
		pqMaxSize16 := new(string)
		if !r.OutputGooglePubsub.PqMaxSize.IsUnknown() && !r.OutputGooglePubsub.PqMaxSize.IsNull() {
			*pqMaxSize16 = r.OutputGooglePubsub.PqMaxSize.ValueString()
		} else {
			pqMaxSize16 = nil
		}
		pqPath16 := new(string)
		if !r.OutputGooglePubsub.PqPath.IsUnknown() && !r.OutputGooglePubsub.PqPath.IsNull() {
			*pqPath16 = r.OutputGooglePubsub.PqPath.ValueString()
		} else {
			pqPath16 = nil
		}
		pqCompress16 := new(shared.OutputGooglePubsubCompression)
		if !r.OutputGooglePubsub.PqCompress.IsUnknown() && !r.OutputGooglePubsub.PqCompress.IsNull() {
			*pqCompress16 = shared.OutputGooglePubsubCompression(r.OutputGooglePubsub.PqCompress.ValueString())
		} else {
			pqCompress16 = nil
		}
		pqOnBackpressure16 := new(shared.OutputGooglePubsubQueueFullBehavior)
		if !r.OutputGooglePubsub.PqOnBackpressure.IsUnknown() && !r.OutputGooglePubsub.PqOnBackpressure.IsNull() {
			*pqOnBackpressure16 = shared.OutputGooglePubsubQueueFullBehavior(r.OutputGooglePubsub.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure16 = nil
		}
		pqMode16 := new(shared.OutputGooglePubsubMode)
		if !r.OutputGooglePubsub.PqMode.IsUnknown() && !r.OutputGooglePubsub.PqMode.IsNull() {
			*pqMode16 = shared.OutputGooglePubsubMode(r.OutputGooglePubsub.PqMode.ValueString())
		} else {
			pqMode16 = nil
		}
		var pqControls16 *shared.OutputGooglePubsubPqControls
		if r.OutputGooglePubsub.PqControls != nil {
			pqControls16 = &shared.OutputGooglePubsubPqControls{}
		}
		outputGooglePubsub = &shared.OutputGooglePubsub{
			ID:                        id22,
			Type:                      typeVar22,
			Pipeline:                  pipeline22,
			SystemFields:              systemFields22,
			Environment:               environment22,
			Streamtags:                streamtags22,
			TopicName:                 topicName,
			CreateTopic:               createTopic,
			OrderedDelivery:           orderedDelivery,
			Region:                    region4,
			GoogleAuthMethod:          googleAuthMethod1,
			ServiceAccountCredentials: serviceAccountCredentials2,
			Secret:                    secret3,
			BatchSize:                 batchSize,
			BatchTimeout:              batchTimeout,
			MaxQueueSize:              maxQueueSize,
			MaxRecordSizeKB:           maxRecordSizeKb2,
			FlushPeriodSec:            flushPeriodSec12,
			MaxInProgress:             maxInProgress,
			OnBackpressure:            onBackpressure20,
			Description:               description21,
			PqMaxFileSize:             pqMaxFileSize16,
			PqMaxSize:                 pqMaxSize16,
			PqPath:                    pqPath16,
			PqCompress:                pqCompress16,
			PqOnBackpressure:          pqOnBackpressure16,
			PqMode:                    pqMode16,
			PqControls:                pqControls16,
		}
	}
	if outputGooglePubsub != nil {
		out = shared.Output{
			OutputGooglePubsub: outputGooglePubsub,
		}
	}
	var outputExabeam *shared.OutputExabeam
	if r.OutputExabeam != nil {
		id23 := new(string)
		if !r.OutputExabeam.ID.IsUnknown() && !r.OutputExabeam.ID.IsNull() {
			*id23 = r.OutputExabeam.ID.ValueString()
		} else {
			id23 = nil
		}
		typeVar23 := new(shared.OutputExabeamType)
		if !r.OutputExabeam.Type.IsUnknown() && !r.OutputExabeam.Type.IsNull() {
			*typeVar23 = shared.OutputExabeamType(r.OutputExabeam.Type.ValueString())
		} else {
			typeVar23 = nil
		}
		pipeline23 := new(string)
		if !r.OutputExabeam.Pipeline.IsUnknown() && !r.OutputExabeam.Pipeline.IsNull() {
			*pipeline23 = r.OutputExabeam.Pipeline.ValueString()
		} else {
			pipeline23 = nil
		}
		systemFields23 := make([]string, 0, len(r.OutputExabeam.SystemFields))
		for _, systemFieldsItem23 := range r.OutputExabeam.SystemFields {
			systemFields23 = append(systemFields23, systemFieldsItem23.ValueString())
		}
		environment23 := new(string)
		if !r.OutputExabeam.Environment.IsUnknown() && !r.OutputExabeam.Environment.IsNull() {
			*environment23 = r.OutputExabeam.Environment.ValueString()
		} else {
			environment23 = nil
		}
		streamtags23 := make([]string, 0, len(r.OutputExabeam.Streamtags))
		for _, streamtagsItem23 := range r.OutputExabeam.Streamtags {
			streamtags23 = append(streamtags23, streamtagsItem23.ValueString())
		}
		var bucket2 string
		bucket2 = r.OutputExabeam.Bucket.ValueString()

		var region5 string
		region5 = r.OutputExabeam.Region.ValueString()

		stagePath5 := new(string)
		if !r.OutputExabeam.StagePath.IsUnknown() && !r.OutputExabeam.StagePath.IsNull() {
			*stagePath5 = r.OutputExabeam.StagePath.ValueString()
		} else {
			stagePath5 = nil
		}
		endpoint3 := new(string)
		if !r.OutputExabeam.Endpoint.IsUnknown() && !r.OutputExabeam.Endpoint.IsNull() {
			*endpoint3 = r.OutputExabeam.Endpoint.ValueString()
		} else {
			endpoint3 = nil
		}
		signatureVersion3 := new(shared.OutputExabeamSignatureVersion)
		if !r.OutputExabeam.SignatureVersion.IsUnknown() && !r.OutputExabeam.SignatureVersion.IsNull() {
			*signatureVersion3 = shared.OutputExabeamSignatureVersion(r.OutputExabeam.SignatureVersion.ValueString())
		} else {
			signatureVersion3 = nil
		}
		objectAcl2 := new(shared.OutputExabeamObjectACL)
		if !r.OutputExabeam.ObjectACL.IsUnknown() && !r.OutputExabeam.ObjectACL.IsNull() {
			*objectAcl2 = shared.OutputExabeamObjectACL(r.OutputExabeam.ObjectACL.ValueString())
		} else {
			objectAcl2 = nil
		}
		storageClass3 := new(shared.OutputExabeamStorageClass)
		if !r.OutputExabeam.StorageClass.IsUnknown() && !r.OutputExabeam.StorageClass.IsNull() {
			*storageClass3 = shared.OutputExabeamStorageClass(r.OutputExabeam.StorageClass.ValueString())
		} else {
			storageClass3 = nil
		}
		reuseConnections3 := new(bool)
		if !r.OutputExabeam.ReuseConnections.IsUnknown() && !r.OutputExabeam.ReuseConnections.IsNull() {
			*reuseConnections3 = r.OutputExabeam.ReuseConnections.ValueBool()
		} else {
			reuseConnections3 = nil
		}
		rejectUnauthorized18 := new(bool)
		if !r.OutputExabeam.RejectUnauthorized.IsUnknown() && !r.OutputExabeam.RejectUnauthorized.IsNull() {
			*rejectUnauthorized18 = r.OutputExabeam.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized18 = nil
		}
		addIDToStagePath5 := new(bool)
		if !r.OutputExabeam.AddIDToStagePath.IsUnknown() && !r.OutputExabeam.AddIDToStagePath.IsNull() {
			*addIDToStagePath5 = r.OutputExabeam.AddIDToStagePath.ValueBool()
		} else {
			addIDToStagePath5 = nil
		}
		removeEmptyDirs5 := new(bool)
		if !r.OutputExabeam.RemoveEmptyDirs.IsUnknown() && !r.OutputExabeam.RemoveEmptyDirs.IsNull() {
			*removeEmptyDirs5 = r.OutputExabeam.RemoveEmptyDirs.ValueBool()
		} else {
			removeEmptyDirs5 = nil
		}
		maxFileOpenTimeSec5 := new(float64)
		if !r.OutputExabeam.MaxFileOpenTimeSec.IsUnknown() && !r.OutputExabeam.MaxFileOpenTimeSec.IsNull() {
			*maxFileOpenTimeSec5 = r.OutputExabeam.MaxFileOpenTimeSec.ValueFloat64()
		} else {
			maxFileOpenTimeSec5 = nil
		}
		maxFileIdleTimeSec5 := new(float64)
		if !r.OutputExabeam.MaxFileIdleTimeSec.IsUnknown() && !r.OutputExabeam.MaxFileIdleTimeSec.IsNull() {
			*maxFileIdleTimeSec5 = r.OutputExabeam.MaxFileIdleTimeSec.ValueFloat64()
		} else {
			maxFileIdleTimeSec5 = nil
		}
		maxOpenFiles5 := new(float64)
		if !r.OutputExabeam.MaxOpenFiles.IsUnknown() && !r.OutputExabeam.MaxOpenFiles.IsNull() {
			*maxOpenFiles5 = r.OutputExabeam.MaxOpenFiles.ValueFloat64()
		} else {
			maxOpenFiles5 = nil
		}
		onBackpressure21 := new(shared.OutputExabeamBackpressureBehavior)
		if !r.OutputExabeam.OnBackpressure.IsUnknown() && !r.OutputExabeam.OnBackpressure.IsNull() {
			*onBackpressure21 = shared.OutputExabeamBackpressureBehavior(r.OutputExabeam.OnBackpressure.ValueString())
		} else {
			onBackpressure21 = nil
		}
		deadletterEnabled5 := new(bool)
		if !r.OutputExabeam.DeadletterEnabled.IsUnknown() && !r.OutputExabeam.DeadletterEnabled.IsNull() {
			*deadletterEnabled5 = r.OutputExabeam.DeadletterEnabled.ValueBool()
		} else {
			deadletterEnabled5 = nil
		}
		onDiskFullBackpressure5 := new(shared.OutputExabeamDiskSpaceProtection)
		if !r.OutputExabeam.OnDiskFullBackpressure.IsUnknown() && !r.OutputExabeam.OnDiskFullBackpressure.IsNull() {
			*onDiskFullBackpressure5 = shared.OutputExabeamDiskSpaceProtection(r.OutputExabeam.OnDiskFullBackpressure.ValueString())
		} else {
			onDiskFullBackpressure5 = nil
		}
		maxFileSizeMb5 := new(float64)
		if !r.OutputExabeam.MaxFileSizeMB.IsUnknown() && !r.OutputExabeam.MaxFileSizeMB.IsNull() {
			*maxFileSizeMb5 = r.OutputExabeam.MaxFileSizeMB.ValueFloat64()
		} else {
			maxFileSizeMb5 = nil
		}
		encodedConfiguration := new(string)
		if !r.OutputExabeam.EncodedConfiguration.IsUnknown() && !r.OutputExabeam.EncodedConfiguration.IsNull() {
			*encodedConfiguration = r.OutputExabeam.EncodedConfiguration.ValueString()
		} else {
			encodedConfiguration = nil
		}
		var collectorInstanceID string
		collectorInstanceID = r.OutputExabeam.CollectorInstanceID.ValueString()

		siteName := new(string)
		if !r.OutputExabeam.SiteName.IsUnknown() && !r.OutputExabeam.SiteName.IsNull() {
			*siteName = r.OutputExabeam.SiteName.ValueString()
		} else {
			siteName = nil
		}
		siteID := new(string)
		if !r.OutputExabeam.SiteID.IsUnknown() && !r.OutputExabeam.SiteID.IsNull() {
			*siteID = r.OutputExabeam.SiteID.ValueString()
		} else {
			siteID = nil
		}
		timezoneOffset := new(string)
		if !r.OutputExabeam.TimezoneOffset.IsUnknown() && !r.OutputExabeam.TimezoneOffset.IsNull() {
			*timezoneOffset = r.OutputExabeam.TimezoneOffset.ValueString()
		} else {
			timezoneOffset = nil
		}
		awsAPIKey3 := new(string)
		if !r.OutputExabeam.AwsAPIKey.IsUnknown() && !r.OutputExabeam.AwsAPIKey.IsNull() {
			*awsAPIKey3 = r.OutputExabeam.AwsAPIKey.ValueString()
		} else {
			awsAPIKey3 = nil
		}
		awsSecretKey3 := new(string)
		if !r.OutputExabeam.AwsSecretKey.IsUnknown() && !r.OutputExabeam.AwsSecretKey.IsNull() {
			*awsSecretKey3 = r.OutputExabeam.AwsSecretKey.ValueString()
		} else {
			awsSecretKey3 = nil
		}
		description22 := new(string)
		if !r.OutputExabeam.Description.IsUnknown() && !r.OutputExabeam.Description.IsNull() {
			*description22 = r.OutputExabeam.Description.ValueString()
		} else {
			description22 = nil
		}
		emptyDirCleanupSec4 := new(float64)
		if !r.OutputExabeam.EmptyDirCleanupSec.IsUnknown() && !r.OutputExabeam.EmptyDirCleanupSec.IsNull() {
			*emptyDirCleanupSec4 = r.OutputExabeam.EmptyDirCleanupSec.ValueFloat64()
		} else {
			emptyDirCleanupSec4 = nil
		}
		deadletterPath4 := new(string)
		if !r.OutputExabeam.DeadletterPath.IsUnknown() && !r.OutputExabeam.DeadletterPath.IsNull() {
			*deadletterPath4 = r.OutputExabeam.DeadletterPath.ValueString()
		} else {
			deadletterPath4 = nil
		}
		maxRetryNum4 := new(float64)
		if !r.OutputExabeam.MaxRetryNum.IsUnknown() && !r.OutputExabeam.MaxRetryNum.IsNull() {
			*maxRetryNum4 = r.OutputExabeam.MaxRetryNum.ValueFloat64()
		} else {
			maxRetryNum4 = nil
		}
		outputExabeam = &shared.OutputExabeam{
			ID:                     id23,
			Type:                   typeVar23,
			Pipeline:               pipeline23,
			SystemFields:           systemFields23,
			Environment:            environment23,
			Streamtags:             streamtags23,
			Bucket:                 bucket2,
			Region:                 region5,
			StagePath:              stagePath5,
			Endpoint:               endpoint3,
			SignatureVersion:       signatureVersion3,
			ObjectACL:              objectAcl2,
			StorageClass:           storageClass3,
			ReuseConnections:       reuseConnections3,
			RejectUnauthorized:     rejectUnauthorized18,
			AddIDToStagePath:       addIDToStagePath5,
			RemoveEmptyDirs:        removeEmptyDirs5,
			MaxFileOpenTimeSec:     maxFileOpenTimeSec5,
			MaxFileIdleTimeSec:     maxFileIdleTimeSec5,
			MaxOpenFiles:           maxOpenFiles5,
			OnBackpressure:         onBackpressure21,
			DeadletterEnabled:      deadletterEnabled5,
			OnDiskFullBackpressure: onDiskFullBackpressure5,
			MaxFileSizeMB:          maxFileSizeMb5,
			EncodedConfiguration:   encodedConfiguration,
			CollectorInstanceID:    collectorInstanceID,
			SiteName:               siteName,
			SiteID:                 siteID,
			TimezoneOffset:         timezoneOffset,
			AwsAPIKey:              awsAPIKey3,
			AwsSecretKey:           awsSecretKey3,
			Description:            description22,
			EmptyDirCleanupSec:     emptyDirCleanupSec4,
			DeadletterPath:         deadletterPath4,
			MaxRetryNum:            maxRetryNum4,
		}
	}
	if outputExabeam != nil {
		out = shared.Output{
			OutputExabeam: outputExabeam,
		}
	}
	var outputKafka *shared.OutputKafka
	if r.OutputKafka != nil {
		id24 := new(string)
		if !r.OutputKafka.ID.IsUnknown() && !r.OutputKafka.ID.IsNull() {
			*id24 = r.OutputKafka.ID.ValueString()
		} else {
			id24 = nil
		}
		typeVar24 := new(shared.OutputKafkaType)
		if !r.OutputKafka.Type.IsUnknown() && !r.OutputKafka.Type.IsNull() {
			*typeVar24 = shared.OutputKafkaType(r.OutputKafka.Type.ValueString())
		} else {
			typeVar24 = nil
		}
		pipeline24 := new(string)
		if !r.OutputKafka.Pipeline.IsUnknown() && !r.OutputKafka.Pipeline.IsNull() {
			*pipeline24 = r.OutputKafka.Pipeline.ValueString()
		} else {
			pipeline24 = nil
		}
		systemFields24 := make([]string, 0, len(r.OutputKafka.SystemFields))
		for _, systemFieldsItem24 := range r.OutputKafka.SystemFields {
			systemFields24 = append(systemFields24, systemFieldsItem24.ValueString())
		}
		environment24 := new(string)
		if !r.OutputKafka.Environment.IsUnknown() && !r.OutputKafka.Environment.IsNull() {
			*environment24 = r.OutputKafka.Environment.ValueString()
		} else {
			environment24 = nil
		}
		streamtags24 := make([]string, 0, len(r.OutputKafka.Streamtags))
		for _, streamtagsItem24 := range r.OutputKafka.Streamtags {
			streamtags24 = append(streamtags24, streamtagsItem24.ValueString())
		}
		brokers1 := make([]string, 0, len(r.OutputKafka.Brokers))
		for _, brokersItem1 := range r.OutputKafka.Brokers {
			brokers1 = append(brokers1, brokersItem1.ValueString())
		}
		var topic1 string
		topic1 = r.OutputKafka.Topic.ValueString()

		ack1 := new(shared.OutputKafkaAcknowledgments)
		if !r.OutputKafka.Ack.IsUnknown() && !r.OutputKafka.Ack.IsNull() {
			*ack1 = shared.OutputKafkaAcknowledgments(r.OutputKafka.Ack.ValueInt64())
		} else {
			ack1 = nil
		}
		format8 := new(shared.OutputKafkaRecordDataFormat)
		if !r.OutputKafka.Format.IsUnknown() && !r.OutputKafka.Format.IsNull() {
			*format8 = shared.OutputKafkaRecordDataFormat(r.OutputKafka.Format.ValueString())
		} else {
			format8 = nil
		}
		compression2 := new(shared.OutputKafkaCompression)
		if !r.OutputKafka.Compression.IsUnknown() && !r.OutputKafka.Compression.IsNull() {
			*compression2 = shared.OutputKafkaCompression(r.OutputKafka.Compression.ValueString())
		} else {
			compression2 = nil
		}
		maxRecordSizeKb3 := new(float64)
		if !r.OutputKafka.MaxRecordSizeKB.IsUnknown() && !r.OutputKafka.MaxRecordSizeKB.IsNull() {
			*maxRecordSizeKb3 = r.OutputKafka.MaxRecordSizeKB.ValueFloat64()
		} else {
			maxRecordSizeKb3 = nil
		}
		flushEventCount1 := new(float64)
		if !r.OutputKafka.FlushEventCount.IsUnknown() && !r.OutputKafka.FlushEventCount.IsNull() {
			*flushEventCount1 = r.OutputKafka.FlushEventCount.ValueFloat64()
		} else {
			flushEventCount1 = nil
		}
		flushPeriodSec13 := new(float64)
		if !r.OutputKafka.FlushPeriodSec.IsUnknown() && !r.OutputKafka.FlushPeriodSec.IsNull() {
			*flushPeriodSec13 = r.OutputKafka.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec13 = nil
		}
		var kafkaSchemaRegistry *shared.OutputKafkaKafkaSchemaRegistryAuthentication
		if r.OutputKafka.KafkaSchemaRegistry != nil {
			disabled7 := new(bool)
			if !r.OutputKafka.KafkaSchemaRegistry.Disabled.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.Disabled.IsNull() {
				*disabled7 = r.OutputKafka.KafkaSchemaRegistry.Disabled.ValueBool()
			} else {
				disabled7 = nil
			}
			schemaRegistryURL := new(string)
			if !r.OutputKafka.KafkaSchemaRegistry.SchemaRegistryURL.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.SchemaRegistryURL.IsNull() {
				*schemaRegistryURL = r.OutputKafka.KafkaSchemaRegistry.SchemaRegistryURL.ValueString()
			} else {
				schemaRegistryURL = nil
			}
			connectionTimeout6 := new(float64)
			if !r.OutputKafka.KafkaSchemaRegistry.ConnectionTimeout.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.ConnectionTimeout.IsNull() {
				*connectionTimeout6 = r.OutputKafka.KafkaSchemaRegistry.ConnectionTimeout.ValueFloat64()
			} else {
				connectionTimeout6 = nil
			}
			requestTimeout1 := new(float64)
			if !r.OutputKafka.KafkaSchemaRegistry.RequestTimeout.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.RequestTimeout.IsNull() {
				*requestTimeout1 = r.OutputKafka.KafkaSchemaRegistry.RequestTimeout.ValueFloat64()
			} else {
				requestTimeout1 = nil
			}
			maxRetries1 := new(float64)
			if !r.OutputKafka.KafkaSchemaRegistry.MaxRetries.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.MaxRetries.IsNull() {
				*maxRetries1 = r.OutputKafka.KafkaSchemaRegistry.MaxRetries.ValueFloat64()
			} else {
				maxRetries1 = nil
			}
			var auth *shared.OutputKafkaAuth
			if r.OutputKafka.KafkaSchemaRegistry.Auth != nil {
				disabled8 := new(bool)
				if !r.OutputKafka.KafkaSchemaRegistry.Auth.Disabled.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.Auth.Disabled.IsNull() {
					*disabled8 = r.OutputKafka.KafkaSchemaRegistry.Auth.Disabled.ValueBool()
				} else {
					disabled8 = nil
				}
				credentialsSecret1 := new(string)
				if !r.OutputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret.IsNull() {
					*credentialsSecret1 = r.OutputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret1 = nil
				}
				auth = &shared.OutputKafkaAuth{
					Disabled:          disabled8,
					CredentialsSecret: credentialsSecret1,
				}
			}
			var tls8 *shared.OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide
			if r.OutputKafka.KafkaSchemaRegistry.TLS != nil {
				disabled9 := new(bool)
				if !r.OutputKafka.KafkaSchemaRegistry.TLS.Disabled.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.TLS.Disabled.IsNull() {
					*disabled9 = r.OutputKafka.KafkaSchemaRegistry.TLS.Disabled.ValueBool()
				} else {
					disabled9 = nil
				}
				rejectUnauthorized19 := new(bool)
				if !r.OutputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsNull() {
					*rejectUnauthorized19 = r.OutputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized.ValueBool()
				} else {
					rejectUnauthorized19 = nil
				}
				servername7 := new(string)
				if !r.OutputKafka.KafkaSchemaRegistry.TLS.Servername.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.TLS.Servername.IsNull() {
					*servername7 = r.OutputKafka.KafkaSchemaRegistry.TLS.Servername.ValueString()
				} else {
					servername7 = nil
				}
				certificateName7 := new(string)
				if !r.OutputKafka.KafkaSchemaRegistry.TLS.CertificateName.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.TLS.CertificateName.IsNull() {
					*certificateName7 = r.OutputKafka.KafkaSchemaRegistry.TLS.CertificateName.ValueString()
				} else {
					certificateName7 = nil
				}
				caPath5 := new(string)
				if !r.OutputKafka.KafkaSchemaRegistry.TLS.CaPath.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.TLS.CaPath.IsNull() {
					*caPath5 = r.OutputKafka.KafkaSchemaRegistry.TLS.CaPath.ValueString()
				} else {
					caPath5 = nil
				}
				privKeyPath5 := new(string)
				if !r.OutputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath.IsNull() {
					*privKeyPath5 = r.OutputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath.ValueString()
				} else {
					privKeyPath5 = nil
				}
				certPath5 := new(string)
				if !r.OutputKafka.KafkaSchemaRegistry.TLS.CertPath.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.TLS.CertPath.IsNull() {
					*certPath5 = r.OutputKafka.KafkaSchemaRegistry.TLS.CertPath.ValueString()
				} else {
					certPath5 = nil
				}
				passphrase5 := new(string)
				if !r.OutputKafka.KafkaSchemaRegistry.TLS.Passphrase.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.TLS.Passphrase.IsNull() {
					*passphrase5 = r.OutputKafka.KafkaSchemaRegistry.TLS.Passphrase.ValueString()
				} else {
					passphrase5 = nil
				}
				minVersion5 := new(shared.OutputKafkaKafkaSchemaRegistryMinimumTLSVersion)
				if !r.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion.IsNull() {
					*minVersion5 = shared.OutputKafkaKafkaSchemaRegistryMinimumTLSVersion(r.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion.ValueString())
				} else {
					minVersion5 = nil
				}
				maxVersion5 := new(shared.OutputKafkaKafkaSchemaRegistryMaximumTLSVersion)
				if !r.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion.IsNull() {
					*maxVersion5 = shared.OutputKafkaKafkaSchemaRegistryMaximumTLSVersion(r.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion.ValueString())
				} else {
					maxVersion5 = nil
				}
				tls8 = &shared.OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide{
					Disabled:           disabled9,
					RejectUnauthorized: rejectUnauthorized19,
					Servername:         servername7,
					CertificateName:    certificateName7,
					CaPath:             caPath5,
					PrivKeyPath:        privKeyPath5,
					CertPath:           certPath5,
					Passphrase:         passphrase5,
					MinVersion:         minVersion5,
					MaxVersion:         maxVersion5,
				}
			}
			defaultKeySchemaID := new(float64)
			if !r.OutputKafka.KafkaSchemaRegistry.DefaultKeySchemaID.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.DefaultKeySchemaID.IsNull() {
				*defaultKeySchemaID = r.OutputKafka.KafkaSchemaRegistry.DefaultKeySchemaID.ValueFloat64()
			} else {
				defaultKeySchemaID = nil
			}
			defaultValueSchemaID := new(float64)
			if !r.OutputKafka.KafkaSchemaRegistry.DefaultValueSchemaID.IsUnknown() && !r.OutputKafka.KafkaSchemaRegistry.DefaultValueSchemaID.IsNull() {
				*defaultValueSchemaID = r.OutputKafka.KafkaSchemaRegistry.DefaultValueSchemaID.ValueFloat64()
			} else {
				defaultValueSchemaID = nil
			}
			kafkaSchemaRegistry = &shared.OutputKafkaKafkaSchemaRegistryAuthentication{
				Disabled:             disabled7,
				SchemaRegistryURL:    schemaRegistryURL,
				ConnectionTimeout:    connectionTimeout6,
				RequestTimeout:       requestTimeout1,
				MaxRetries:           maxRetries1,
				Auth:                 auth,
				TLS:                  tls8,
				DefaultKeySchemaID:   defaultKeySchemaID,
				DefaultValueSchemaID: defaultValueSchemaID,
			}
		}
		connectionTimeout7 := new(float64)
		if !r.OutputKafka.ConnectionTimeout.IsUnknown() && !r.OutputKafka.ConnectionTimeout.IsNull() {
			*connectionTimeout7 = r.OutputKafka.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout7 = nil
		}
		requestTimeout2 := new(float64)
		if !r.OutputKafka.RequestTimeout.IsUnknown() && !r.OutputKafka.RequestTimeout.IsNull() {
			*requestTimeout2 = r.OutputKafka.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout2 = nil
		}
		maxRetries2 := new(float64)
		if !r.OutputKafka.MaxRetries.IsUnknown() && !r.OutputKafka.MaxRetries.IsNull() {
			*maxRetries2 = r.OutputKafka.MaxRetries.ValueFloat64()
		} else {
			maxRetries2 = nil
		}
		maxBackOff1 := new(float64)
		if !r.OutputKafka.MaxBackOff.IsUnknown() && !r.OutputKafka.MaxBackOff.IsNull() {
			*maxBackOff1 = r.OutputKafka.MaxBackOff.ValueFloat64()
		} else {
			maxBackOff1 = nil
		}
		initialBackoff19 := new(float64)
		if !r.OutputKafka.InitialBackoff.IsUnknown() && !r.OutputKafka.InitialBackoff.IsNull() {
			*initialBackoff19 = r.OutputKafka.InitialBackoff.ValueFloat64()
		} else {
			initialBackoff19 = nil
		}
		backoffRate19 := new(float64)
		if !r.OutputKafka.BackoffRate.IsUnknown() && !r.OutputKafka.BackoffRate.IsNull() {
			*backoffRate19 = r.OutputKafka.BackoffRate.ValueFloat64()
		} else {
			backoffRate19 = nil
		}
		authenticationTimeout1 := new(float64)
		if !r.OutputKafka.AuthenticationTimeout.IsUnknown() && !r.OutputKafka.AuthenticationTimeout.IsNull() {
			*authenticationTimeout1 = r.OutputKafka.AuthenticationTimeout.ValueFloat64()
		} else {
			authenticationTimeout1 = nil
		}
		reauthenticationThreshold1 := new(float64)
		if !r.OutputKafka.ReauthenticationThreshold.IsUnknown() && !r.OutputKafka.ReauthenticationThreshold.IsNull() {
			*reauthenticationThreshold1 = r.OutputKafka.ReauthenticationThreshold.ValueFloat64()
		} else {
			reauthenticationThreshold1 = nil
		}
		var sasl1 *shared.OutputKafkaAuthentication
		if r.OutputKafka.Sasl != nil {
			disabled10 := new(bool)
			if !r.OutputKafka.Sasl.Disabled.IsUnknown() && !r.OutputKafka.Sasl.Disabled.IsNull() {
				*disabled10 = r.OutputKafka.Sasl.Disabled.ValueBool()
			} else {
				disabled10 = nil
			}
			mechanism1 := new(shared.OutputKafkaSASLMechanism)
			if !r.OutputKafka.Sasl.Mechanism.IsUnknown() && !r.OutputKafka.Sasl.Mechanism.IsNull() {
				*mechanism1 = shared.OutputKafkaSASLMechanism(r.OutputKafka.Sasl.Mechanism.ValueString())
			} else {
				mechanism1 = nil
			}
			sasl1 = &shared.OutputKafkaAuthentication{
				Disabled:  disabled10,
				Mechanism: mechanism1,
			}
		}
		var tls9 *shared.OutputKafkaTLSSettingsClientSide
		if r.OutputKafka.TLS != nil {
			disabled11 := new(bool)
			if !r.OutputKafka.TLS.Disabled.IsUnknown() && !r.OutputKafka.TLS.Disabled.IsNull() {
				*disabled11 = r.OutputKafka.TLS.Disabled.ValueBool()
			} else {
				disabled11 = nil
			}
			rejectUnauthorized20 := new(bool)
			if !r.OutputKafka.TLS.RejectUnauthorized.IsUnknown() && !r.OutputKafka.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized20 = r.OutputKafka.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized20 = nil
			}
			servername8 := new(string)
			if !r.OutputKafka.TLS.Servername.IsUnknown() && !r.OutputKafka.TLS.Servername.IsNull() {
				*servername8 = r.OutputKafka.TLS.Servername.ValueString()
			} else {
				servername8 = nil
			}
			certificateName8 := new(string)
			if !r.OutputKafka.TLS.CertificateName.IsUnknown() && !r.OutputKafka.TLS.CertificateName.IsNull() {
				*certificateName8 = r.OutputKafka.TLS.CertificateName.ValueString()
			} else {
				certificateName8 = nil
			}
			caPath6 := new(string)
			if !r.OutputKafka.TLS.CaPath.IsUnknown() && !r.OutputKafka.TLS.CaPath.IsNull() {
				*caPath6 = r.OutputKafka.TLS.CaPath.ValueString()
			} else {
				caPath6 = nil
			}
			privKeyPath6 := new(string)
			if !r.OutputKafka.TLS.PrivKeyPath.IsUnknown() && !r.OutputKafka.TLS.PrivKeyPath.IsNull() {
				*privKeyPath6 = r.OutputKafka.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath6 = nil
			}
			certPath6 := new(string)
			if !r.OutputKafka.TLS.CertPath.IsUnknown() && !r.OutputKafka.TLS.CertPath.IsNull() {
				*certPath6 = r.OutputKafka.TLS.CertPath.ValueString()
			} else {
				certPath6 = nil
			}
			passphrase6 := new(string)
			if !r.OutputKafka.TLS.Passphrase.IsUnknown() && !r.OutputKafka.TLS.Passphrase.IsNull() {
				*passphrase6 = r.OutputKafka.TLS.Passphrase.ValueString()
			} else {
				passphrase6 = nil
			}
			minVersion6 := new(shared.OutputKafkaMinimumTLSVersion)
			if !r.OutputKafka.TLS.MinVersion.IsUnknown() && !r.OutputKafka.TLS.MinVersion.IsNull() {
				*minVersion6 = shared.OutputKafkaMinimumTLSVersion(r.OutputKafka.TLS.MinVersion.ValueString())
			} else {
				minVersion6 = nil
			}
			maxVersion6 := new(shared.OutputKafkaMaximumTLSVersion)
			if !r.OutputKafka.TLS.MaxVersion.IsUnknown() && !r.OutputKafka.TLS.MaxVersion.IsNull() {
				*maxVersion6 = shared.OutputKafkaMaximumTLSVersion(r.OutputKafka.TLS.MaxVersion.ValueString())
			} else {
				maxVersion6 = nil
			}
			tls9 = &shared.OutputKafkaTLSSettingsClientSide{
				Disabled:           disabled11,
				RejectUnauthorized: rejectUnauthorized20,
				Servername:         servername8,
				CertificateName:    certificateName8,
				CaPath:             caPath6,
				PrivKeyPath:        privKeyPath6,
				CertPath:           certPath6,
				Passphrase:         passphrase6,
				MinVersion:         minVersion6,
				MaxVersion:         maxVersion6,
			}
		}
		onBackpressure22 := new(shared.OutputKafkaBackpressureBehavior)
		if !r.OutputKafka.OnBackpressure.IsUnknown() && !r.OutputKafka.OnBackpressure.IsNull() {
			*onBackpressure22 = shared.OutputKafkaBackpressureBehavior(r.OutputKafka.OnBackpressure.ValueString())
		} else {
			onBackpressure22 = nil
		}
		description23 := new(string)
		if !r.OutputKafka.Description.IsUnknown() && !r.OutputKafka.Description.IsNull() {
			*description23 = r.OutputKafka.Description.ValueString()
		} else {
			description23 = nil
		}
		protobufLibraryID := new(string)
		if !r.OutputKafka.ProtobufLibraryID.IsUnknown() && !r.OutputKafka.ProtobufLibraryID.IsNull() {
			*protobufLibraryID = r.OutputKafka.ProtobufLibraryID.ValueString()
		} else {
			protobufLibraryID = nil
		}
		pqMaxFileSize17 := new(string)
		if !r.OutputKafka.PqMaxFileSize.IsUnknown() && !r.OutputKafka.PqMaxFileSize.IsNull() {
			*pqMaxFileSize17 = r.OutputKafka.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize17 = nil
		}
		pqMaxSize17 := new(string)
		if !r.OutputKafka.PqMaxSize.IsUnknown() && !r.OutputKafka.PqMaxSize.IsNull() {
			*pqMaxSize17 = r.OutputKafka.PqMaxSize.ValueString()
		} else {
			pqMaxSize17 = nil
		}
		pqPath17 := new(string)
		if !r.OutputKafka.PqPath.IsUnknown() && !r.OutputKafka.PqPath.IsNull() {
			*pqPath17 = r.OutputKafka.PqPath.ValueString()
		} else {
			pqPath17 = nil
		}
		pqCompress17 := new(shared.OutputKafkaPqCompressCompression)
		if !r.OutputKafka.PqCompress.IsUnknown() && !r.OutputKafka.PqCompress.IsNull() {
			*pqCompress17 = shared.OutputKafkaPqCompressCompression(r.OutputKafka.PqCompress.ValueString())
		} else {
			pqCompress17 = nil
		}
		pqOnBackpressure17 := new(shared.OutputKafkaQueueFullBehavior)
		if !r.OutputKafka.PqOnBackpressure.IsUnknown() && !r.OutputKafka.PqOnBackpressure.IsNull() {
			*pqOnBackpressure17 = shared.OutputKafkaQueueFullBehavior(r.OutputKafka.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure17 = nil
		}
		pqMode17 := new(shared.OutputKafkaMode)
		if !r.OutputKafka.PqMode.IsUnknown() && !r.OutputKafka.PqMode.IsNull() {
			*pqMode17 = shared.OutputKafkaMode(r.OutputKafka.PqMode.ValueString())
		} else {
			pqMode17 = nil
		}
		var pqControls17 *shared.OutputKafkaPqControls
		if r.OutputKafka.PqControls != nil {
			pqControls17 = &shared.OutputKafkaPqControls{}
		}
		outputKafka = &shared.OutputKafka{
			ID:                        id24,
			Type:                      typeVar24,
			Pipeline:                  pipeline24,
			SystemFields:              systemFields24,
			Environment:               environment24,
			Streamtags:                streamtags24,
			Brokers:                   brokers1,
			Topic:                     topic1,
			Ack:                       ack1,
			Format:                    format8,
			Compression:               compression2,
			MaxRecordSizeKB:           maxRecordSizeKb3,
			FlushEventCount:           flushEventCount1,
			FlushPeriodSec:            flushPeriodSec13,
			KafkaSchemaRegistry:       kafkaSchemaRegistry,
			ConnectionTimeout:         connectionTimeout7,
			RequestTimeout:            requestTimeout2,
			MaxRetries:                maxRetries2,
			MaxBackOff:                maxBackOff1,
			InitialBackoff:            initialBackoff19,
			BackoffRate:               backoffRate19,
			AuthenticationTimeout:     authenticationTimeout1,
			ReauthenticationThreshold: reauthenticationThreshold1,
			Sasl:                      sasl1,
			TLS:                       tls9,
			OnBackpressure:            onBackpressure22,
			Description:               description23,
			ProtobufLibraryID:         protobufLibraryID,
			PqMaxFileSize:             pqMaxFileSize17,
			PqMaxSize:                 pqMaxSize17,
			PqPath:                    pqPath17,
			PqCompress:                pqCompress17,
			PqOnBackpressure:          pqOnBackpressure17,
			PqMode:                    pqMode17,
			PqControls:                pqControls17,
		}
	}
	if outputKafka != nil {
		out = shared.Output{
			OutputKafka: outputKafka,
		}
	}
	var outputConfluentCloud *shared.OutputConfluentCloud
	if r.OutputConfluentCloud != nil {
		id25 := new(string)
		if !r.OutputConfluentCloud.ID.IsUnknown() && !r.OutputConfluentCloud.ID.IsNull() {
			*id25 = r.OutputConfluentCloud.ID.ValueString()
		} else {
			id25 = nil
		}
		typeVar25 := new(shared.OutputConfluentCloudType)
		if !r.OutputConfluentCloud.Type.IsUnknown() && !r.OutputConfluentCloud.Type.IsNull() {
			*typeVar25 = shared.OutputConfluentCloudType(r.OutputConfluentCloud.Type.ValueString())
		} else {
			typeVar25 = nil
		}
		pipeline25 := new(string)
		if !r.OutputConfluentCloud.Pipeline.IsUnknown() && !r.OutputConfluentCloud.Pipeline.IsNull() {
			*pipeline25 = r.OutputConfluentCloud.Pipeline.ValueString()
		} else {
			pipeline25 = nil
		}
		systemFields25 := make([]string, 0, len(r.OutputConfluentCloud.SystemFields))
		for _, systemFieldsItem25 := range r.OutputConfluentCloud.SystemFields {
			systemFields25 = append(systemFields25, systemFieldsItem25.ValueString())
		}
		environment25 := new(string)
		if !r.OutputConfluentCloud.Environment.IsUnknown() && !r.OutputConfluentCloud.Environment.IsNull() {
			*environment25 = r.OutputConfluentCloud.Environment.ValueString()
		} else {
			environment25 = nil
		}
		streamtags25 := make([]string, 0, len(r.OutputConfluentCloud.Streamtags))
		for _, streamtagsItem25 := range r.OutputConfluentCloud.Streamtags {
			streamtags25 = append(streamtags25, streamtagsItem25.ValueString())
		}
		brokers2 := make([]string, 0, len(r.OutputConfluentCloud.Brokers))
		for _, brokersItem2 := range r.OutputConfluentCloud.Brokers {
			brokers2 = append(brokers2, brokersItem2.ValueString())
		}
		var tls10 *shared.OutputConfluentCloudTLSSettingsClientSide
		if r.OutputConfluentCloud.TLS != nil {
			disabled12 := new(bool)
			if !r.OutputConfluentCloud.TLS.Disabled.IsUnknown() && !r.OutputConfluentCloud.TLS.Disabled.IsNull() {
				*disabled12 = r.OutputConfluentCloud.TLS.Disabled.ValueBool()
			} else {
				disabled12 = nil
			}
			rejectUnauthorized21 := new(bool)
			if !r.OutputConfluentCloud.TLS.RejectUnauthorized.IsUnknown() && !r.OutputConfluentCloud.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized21 = r.OutputConfluentCloud.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized21 = nil
			}
			servername9 := new(string)
			if !r.OutputConfluentCloud.TLS.Servername.IsUnknown() && !r.OutputConfluentCloud.TLS.Servername.IsNull() {
				*servername9 = r.OutputConfluentCloud.TLS.Servername.ValueString()
			} else {
				servername9 = nil
			}
			certificateName9 := new(string)
			if !r.OutputConfluentCloud.TLS.CertificateName.IsUnknown() && !r.OutputConfluentCloud.TLS.CertificateName.IsNull() {
				*certificateName9 = r.OutputConfluentCloud.TLS.CertificateName.ValueString()
			} else {
				certificateName9 = nil
			}
			caPath7 := new(string)
			if !r.OutputConfluentCloud.TLS.CaPath.IsUnknown() && !r.OutputConfluentCloud.TLS.CaPath.IsNull() {
				*caPath7 = r.OutputConfluentCloud.TLS.CaPath.ValueString()
			} else {
				caPath7 = nil
			}
			privKeyPath7 := new(string)
			if !r.OutputConfluentCloud.TLS.PrivKeyPath.IsUnknown() && !r.OutputConfluentCloud.TLS.PrivKeyPath.IsNull() {
				*privKeyPath7 = r.OutputConfluentCloud.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath7 = nil
			}
			certPath7 := new(string)
			if !r.OutputConfluentCloud.TLS.CertPath.IsUnknown() && !r.OutputConfluentCloud.TLS.CertPath.IsNull() {
				*certPath7 = r.OutputConfluentCloud.TLS.CertPath.ValueString()
			} else {
				certPath7 = nil
			}
			passphrase7 := new(string)
			if !r.OutputConfluentCloud.TLS.Passphrase.IsUnknown() && !r.OutputConfluentCloud.TLS.Passphrase.IsNull() {
				*passphrase7 = r.OutputConfluentCloud.TLS.Passphrase.ValueString()
			} else {
				passphrase7 = nil
			}
			minVersion7 := new(shared.OutputConfluentCloudMinimumTLSVersion)
			if !r.OutputConfluentCloud.TLS.MinVersion.IsUnknown() && !r.OutputConfluentCloud.TLS.MinVersion.IsNull() {
				*minVersion7 = shared.OutputConfluentCloudMinimumTLSVersion(r.OutputConfluentCloud.TLS.MinVersion.ValueString())
			} else {
				minVersion7 = nil
			}
			maxVersion7 := new(shared.OutputConfluentCloudMaximumTLSVersion)
			if !r.OutputConfluentCloud.TLS.MaxVersion.IsUnknown() && !r.OutputConfluentCloud.TLS.MaxVersion.IsNull() {
				*maxVersion7 = shared.OutputConfluentCloudMaximumTLSVersion(r.OutputConfluentCloud.TLS.MaxVersion.ValueString())
			} else {
				maxVersion7 = nil
			}
			tls10 = &shared.OutputConfluentCloudTLSSettingsClientSide{
				Disabled:           disabled12,
				RejectUnauthorized: rejectUnauthorized21,
				Servername:         servername9,
				CertificateName:    certificateName9,
				CaPath:             caPath7,
				PrivKeyPath:        privKeyPath7,
				CertPath:           certPath7,
				Passphrase:         passphrase7,
				MinVersion:         minVersion7,
				MaxVersion:         maxVersion7,
			}
		}
		var topic2 string
		topic2 = r.OutputConfluentCloud.Topic.ValueString()

		ack2 := new(shared.OutputConfluentCloudAcknowledgments)
		if !r.OutputConfluentCloud.Ack.IsUnknown() && !r.OutputConfluentCloud.Ack.IsNull() {
			*ack2 = shared.OutputConfluentCloudAcknowledgments(r.OutputConfluentCloud.Ack.ValueInt64())
		} else {
			ack2 = nil
		}
		format9 := new(shared.OutputConfluentCloudRecordDataFormat)
		if !r.OutputConfluentCloud.Format.IsUnknown() && !r.OutputConfluentCloud.Format.IsNull() {
			*format9 = shared.OutputConfluentCloudRecordDataFormat(r.OutputConfluentCloud.Format.ValueString())
		} else {
			format9 = nil
		}
		compression3 := new(shared.OutputConfluentCloudCompression)
		if !r.OutputConfluentCloud.Compression.IsUnknown() && !r.OutputConfluentCloud.Compression.IsNull() {
			*compression3 = shared.OutputConfluentCloudCompression(r.OutputConfluentCloud.Compression.ValueString())
		} else {
			compression3 = nil
		}
		maxRecordSizeKb4 := new(float64)
		if !r.OutputConfluentCloud.MaxRecordSizeKB.IsUnknown() && !r.OutputConfluentCloud.MaxRecordSizeKB.IsNull() {
			*maxRecordSizeKb4 = r.OutputConfluentCloud.MaxRecordSizeKB.ValueFloat64()
		} else {
			maxRecordSizeKb4 = nil
		}
		flushEventCount2 := new(float64)
		if !r.OutputConfluentCloud.FlushEventCount.IsUnknown() && !r.OutputConfluentCloud.FlushEventCount.IsNull() {
			*flushEventCount2 = r.OutputConfluentCloud.FlushEventCount.ValueFloat64()
		} else {
			flushEventCount2 = nil
		}
		flushPeriodSec14 := new(float64)
		if !r.OutputConfluentCloud.FlushPeriodSec.IsUnknown() && !r.OutputConfluentCloud.FlushPeriodSec.IsNull() {
			*flushPeriodSec14 = r.OutputConfluentCloud.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec14 = nil
		}
		var kafkaSchemaRegistry1 *shared.OutputConfluentCloudKafkaSchemaRegistryAuthentication
		if r.OutputConfluentCloud.KafkaSchemaRegistry != nil {
			disabled13 := new(bool)
			if !r.OutputConfluentCloud.KafkaSchemaRegistry.Disabled.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.Disabled.IsNull() {
				*disabled13 = r.OutputConfluentCloud.KafkaSchemaRegistry.Disabled.ValueBool()
			} else {
				disabled13 = nil
			}
			schemaRegistryUrl1 := new(string)
			if !r.OutputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL.IsNull() {
				*schemaRegistryUrl1 = r.OutputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL.ValueString()
			} else {
				schemaRegistryUrl1 = nil
			}
			connectionTimeout8 := new(float64)
			if !r.OutputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout.IsNull() {
				*connectionTimeout8 = r.OutputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout.ValueFloat64()
			} else {
				connectionTimeout8 = nil
			}
			requestTimeout3 := new(float64)
			if !r.OutputConfluentCloud.KafkaSchemaRegistry.RequestTimeout.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.RequestTimeout.IsNull() {
				*requestTimeout3 = r.OutputConfluentCloud.KafkaSchemaRegistry.RequestTimeout.ValueFloat64()
			} else {
				requestTimeout3 = nil
			}
			maxRetries3 := new(float64)
			if !r.OutputConfluentCloud.KafkaSchemaRegistry.MaxRetries.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.MaxRetries.IsNull() {
				*maxRetries3 = r.OutputConfluentCloud.KafkaSchemaRegistry.MaxRetries.ValueFloat64()
			} else {
				maxRetries3 = nil
			}
			var auth1 *shared.OutputConfluentCloudAuth
			if r.OutputConfluentCloud.KafkaSchemaRegistry.Auth != nil {
				disabled14 := new(bool)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled.IsNull() {
					*disabled14 = r.OutputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled.ValueBool()
				} else {
					disabled14 = nil
				}
				credentialsSecret2 := new(string)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret.IsNull() {
					*credentialsSecret2 = r.OutputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret2 = nil
				}
				auth1 = &shared.OutputConfluentCloudAuth{
					Disabled:          disabled14,
					CredentialsSecret: credentialsSecret2,
				}
			}
			var tls11 *shared.OutputConfluentCloudKafkaSchemaRegistryTLSSettingsClientSide
			if r.OutputConfluentCloud.KafkaSchemaRegistry.TLS != nil {
				disabled15 := new(bool)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled.IsNull() {
					*disabled15 = r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled.ValueBool()
				} else {
					disabled15 = nil
				}
				rejectUnauthorized22 := new(bool)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsNull() {
					*rejectUnauthorized22 = r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized.ValueBool()
				} else {
					rejectUnauthorized22 = nil
				}
				servername10 := new(string)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Servername.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Servername.IsNull() {
					*servername10 = r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Servername.ValueString()
				} else {
					servername10 = nil
				}
				certificateName10 := new(string)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName.IsNull() {
					*certificateName10 = r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName.ValueString()
				} else {
					certificateName10 = nil
				}
				caPath8 := new(string)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath.IsNull() {
					*caPath8 = r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath.ValueString()
				} else {
					caPath8 = nil
				}
				privKeyPath8 := new(string)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath.IsNull() {
					*privKeyPath8 = r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath.ValueString()
				} else {
					privKeyPath8 = nil
				}
				certPath8 := new(string)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath.IsNull() {
					*certPath8 = r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath.ValueString()
				} else {
					certPath8 = nil
				}
				passphrase8 := new(string)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase.IsNull() {
					*passphrase8 = r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase.ValueString()
				} else {
					passphrase8 = nil
				}
				minVersion8 := new(shared.OutputConfluentCloudKafkaSchemaRegistryMinimumTLSVersion)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion.IsNull() {
					*minVersion8 = shared.OutputConfluentCloudKafkaSchemaRegistryMinimumTLSVersion(r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion.ValueString())
				} else {
					minVersion8 = nil
				}
				maxVersion8 := new(shared.OutputConfluentCloudKafkaSchemaRegistryMaximumTLSVersion)
				if !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion.IsNull() {
					*maxVersion8 = shared.OutputConfluentCloudKafkaSchemaRegistryMaximumTLSVersion(r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion.ValueString())
				} else {
					maxVersion8 = nil
				}
				tls11 = &shared.OutputConfluentCloudKafkaSchemaRegistryTLSSettingsClientSide{
					Disabled:           disabled15,
					RejectUnauthorized: rejectUnauthorized22,
					Servername:         servername10,
					CertificateName:    certificateName10,
					CaPath:             caPath8,
					PrivKeyPath:        privKeyPath8,
					CertPath:           certPath8,
					Passphrase:         passphrase8,
					MinVersion:         minVersion8,
					MaxVersion:         maxVersion8,
				}
			}
			defaultKeySchemaId1 := new(float64)
			if !r.OutputConfluentCloud.KafkaSchemaRegistry.DefaultKeySchemaID.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.DefaultKeySchemaID.IsNull() {
				*defaultKeySchemaId1 = r.OutputConfluentCloud.KafkaSchemaRegistry.DefaultKeySchemaID.ValueFloat64()
			} else {
				defaultKeySchemaId1 = nil
			}
			defaultValueSchemaId1 := new(float64)
			if !r.OutputConfluentCloud.KafkaSchemaRegistry.DefaultValueSchemaID.IsUnknown() && !r.OutputConfluentCloud.KafkaSchemaRegistry.DefaultValueSchemaID.IsNull() {
				*defaultValueSchemaId1 = r.OutputConfluentCloud.KafkaSchemaRegistry.DefaultValueSchemaID.ValueFloat64()
			} else {
				defaultValueSchemaId1 = nil
			}
			kafkaSchemaRegistry1 = &shared.OutputConfluentCloudKafkaSchemaRegistryAuthentication{
				Disabled:             disabled13,
				SchemaRegistryURL:    schemaRegistryUrl1,
				ConnectionTimeout:    connectionTimeout8,
				RequestTimeout:       requestTimeout3,
				MaxRetries:           maxRetries3,
				Auth:                 auth1,
				TLS:                  tls11,
				DefaultKeySchemaID:   defaultKeySchemaId1,
				DefaultValueSchemaID: defaultValueSchemaId1,
			}
		}
		connectionTimeout9 := new(float64)
		if !r.OutputConfluentCloud.ConnectionTimeout.IsUnknown() && !r.OutputConfluentCloud.ConnectionTimeout.IsNull() {
			*connectionTimeout9 = r.OutputConfluentCloud.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout9 = nil
		}
		requestTimeout4 := new(float64)
		if !r.OutputConfluentCloud.RequestTimeout.IsUnknown() && !r.OutputConfluentCloud.RequestTimeout.IsNull() {
			*requestTimeout4 = r.OutputConfluentCloud.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout4 = nil
		}
		maxRetries4 := new(float64)
		if !r.OutputConfluentCloud.MaxRetries.IsUnknown() && !r.OutputConfluentCloud.MaxRetries.IsNull() {
			*maxRetries4 = r.OutputConfluentCloud.MaxRetries.ValueFloat64()
		} else {
			maxRetries4 = nil
		}
		maxBackOff2 := new(float64)
		if !r.OutputConfluentCloud.MaxBackOff.IsUnknown() && !r.OutputConfluentCloud.MaxBackOff.IsNull() {
			*maxBackOff2 = r.OutputConfluentCloud.MaxBackOff.ValueFloat64()
		} else {
			maxBackOff2 = nil
		}
		initialBackoff20 := new(float64)
		if !r.OutputConfluentCloud.InitialBackoff.IsUnknown() && !r.OutputConfluentCloud.InitialBackoff.IsNull() {
			*initialBackoff20 = r.OutputConfluentCloud.InitialBackoff.ValueFloat64()
		} else {
			initialBackoff20 = nil
		}
		backoffRate20 := new(float64)
		if !r.OutputConfluentCloud.BackoffRate.IsUnknown() && !r.OutputConfluentCloud.BackoffRate.IsNull() {
			*backoffRate20 = r.OutputConfluentCloud.BackoffRate.ValueFloat64()
		} else {
			backoffRate20 = nil
		}
		authenticationTimeout2 := new(float64)
		if !r.OutputConfluentCloud.AuthenticationTimeout.IsUnknown() && !r.OutputConfluentCloud.AuthenticationTimeout.IsNull() {
			*authenticationTimeout2 = r.OutputConfluentCloud.AuthenticationTimeout.ValueFloat64()
		} else {
			authenticationTimeout2 = nil
		}
		reauthenticationThreshold2 := new(float64)
		if !r.OutputConfluentCloud.ReauthenticationThreshold.IsUnknown() && !r.OutputConfluentCloud.ReauthenticationThreshold.IsNull() {
			*reauthenticationThreshold2 = r.OutputConfluentCloud.ReauthenticationThreshold.ValueFloat64()
		} else {
			reauthenticationThreshold2 = nil
		}
		var sasl2 *shared.OutputConfluentCloudAuthentication
		if r.OutputConfluentCloud.Sasl != nil {
			disabled16 := new(bool)
			if !r.OutputConfluentCloud.Sasl.Disabled.IsUnknown() && !r.OutputConfluentCloud.Sasl.Disabled.IsNull() {
				*disabled16 = r.OutputConfluentCloud.Sasl.Disabled.ValueBool()
			} else {
				disabled16 = nil
			}
			mechanism2 := new(shared.OutputConfluentCloudSASLMechanism)
			if !r.OutputConfluentCloud.Sasl.Mechanism.IsUnknown() && !r.OutputConfluentCloud.Sasl.Mechanism.IsNull() {
				*mechanism2 = shared.OutputConfluentCloudSASLMechanism(r.OutputConfluentCloud.Sasl.Mechanism.ValueString())
			} else {
				mechanism2 = nil
			}
			sasl2 = &shared.OutputConfluentCloudAuthentication{
				Disabled:  disabled16,
				Mechanism: mechanism2,
			}
		}
		onBackpressure23 := new(shared.OutputConfluentCloudBackpressureBehavior)
		if !r.OutputConfluentCloud.OnBackpressure.IsUnknown() && !r.OutputConfluentCloud.OnBackpressure.IsNull() {
			*onBackpressure23 = shared.OutputConfluentCloudBackpressureBehavior(r.OutputConfluentCloud.OnBackpressure.ValueString())
		} else {
			onBackpressure23 = nil
		}
		description24 := new(string)
		if !r.OutputConfluentCloud.Description.IsUnknown() && !r.OutputConfluentCloud.Description.IsNull() {
			*description24 = r.OutputConfluentCloud.Description.ValueString()
		} else {
			description24 = nil
		}
		protobufLibraryId1 := new(string)
		if !r.OutputConfluentCloud.ProtobufLibraryID.IsUnknown() && !r.OutputConfluentCloud.ProtobufLibraryID.IsNull() {
			*protobufLibraryId1 = r.OutputConfluentCloud.ProtobufLibraryID.ValueString()
		} else {
			protobufLibraryId1 = nil
		}
		pqMaxFileSize18 := new(string)
		if !r.OutputConfluentCloud.PqMaxFileSize.IsUnknown() && !r.OutputConfluentCloud.PqMaxFileSize.IsNull() {
			*pqMaxFileSize18 = r.OutputConfluentCloud.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize18 = nil
		}
		pqMaxSize18 := new(string)
		if !r.OutputConfluentCloud.PqMaxSize.IsUnknown() && !r.OutputConfluentCloud.PqMaxSize.IsNull() {
			*pqMaxSize18 = r.OutputConfluentCloud.PqMaxSize.ValueString()
		} else {
			pqMaxSize18 = nil
		}
		pqPath18 := new(string)
		if !r.OutputConfluentCloud.PqPath.IsUnknown() && !r.OutputConfluentCloud.PqPath.IsNull() {
			*pqPath18 = r.OutputConfluentCloud.PqPath.ValueString()
		} else {
			pqPath18 = nil
		}
		pqCompress18 := new(shared.OutputConfluentCloudPqCompressCompression)
		if !r.OutputConfluentCloud.PqCompress.IsUnknown() && !r.OutputConfluentCloud.PqCompress.IsNull() {
			*pqCompress18 = shared.OutputConfluentCloudPqCompressCompression(r.OutputConfluentCloud.PqCompress.ValueString())
		} else {
			pqCompress18 = nil
		}
		pqOnBackpressure18 := new(shared.OutputConfluentCloudQueueFullBehavior)
		if !r.OutputConfluentCloud.PqOnBackpressure.IsUnknown() && !r.OutputConfluentCloud.PqOnBackpressure.IsNull() {
			*pqOnBackpressure18 = shared.OutputConfluentCloudQueueFullBehavior(r.OutputConfluentCloud.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure18 = nil
		}
		pqMode18 := new(shared.OutputConfluentCloudMode)
		if !r.OutputConfluentCloud.PqMode.IsUnknown() && !r.OutputConfluentCloud.PqMode.IsNull() {
			*pqMode18 = shared.OutputConfluentCloudMode(r.OutputConfluentCloud.PqMode.ValueString())
		} else {
			pqMode18 = nil
		}
		var pqControls18 *shared.OutputConfluentCloudPqControls
		if r.OutputConfluentCloud.PqControls != nil {
			pqControls18 = &shared.OutputConfluentCloudPqControls{}
		}
		outputConfluentCloud = &shared.OutputConfluentCloud{
			ID:                        id25,
			Type:                      typeVar25,
			Pipeline:                  pipeline25,
			SystemFields:              systemFields25,
			Environment:               environment25,
			Streamtags:                streamtags25,
			Brokers:                   brokers2,
			TLS:                       tls10,
			Topic:                     topic2,
			Ack:                       ack2,
			Format:                    format9,
			Compression:               compression3,
			MaxRecordSizeKB:           maxRecordSizeKb4,
			FlushEventCount:           flushEventCount2,
			FlushPeriodSec:            flushPeriodSec14,
			KafkaSchemaRegistry:       kafkaSchemaRegistry1,
			ConnectionTimeout:         connectionTimeout9,
			RequestTimeout:            requestTimeout4,
			MaxRetries:                maxRetries4,
			MaxBackOff:                maxBackOff2,
			InitialBackoff:            initialBackoff20,
			BackoffRate:               backoffRate20,
			AuthenticationTimeout:     authenticationTimeout2,
			ReauthenticationThreshold: reauthenticationThreshold2,
			Sasl:                      sasl2,
			OnBackpressure:            onBackpressure23,
			Description:               description24,
			ProtobufLibraryID:         protobufLibraryId1,
			PqMaxFileSize:             pqMaxFileSize18,
			PqMaxSize:                 pqMaxSize18,
			PqPath:                    pqPath18,
			PqCompress:                pqCompress18,
			PqOnBackpressure:          pqOnBackpressure18,
			PqMode:                    pqMode18,
			PqControls:                pqControls18,
		}
	}
	if outputConfluentCloud != nil {
		out = shared.Output{
			OutputConfluentCloud: outputConfluentCloud,
		}
	}
	var outputMsk *shared.OutputMsk
	if r.OutputMsk != nil {
		id26 := new(string)
		if !r.OutputMsk.ID.IsUnknown() && !r.OutputMsk.ID.IsNull() {
			*id26 = r.OutputMsk.ID.ValueString()
		} else {
			id26 = nil
		}
		typeVar26 := new(shared.OutputMskType)
		if !r.OutputMsk.Type.IsUnknown() && !r.OutputMsk.Type.IsNull() {
			*typeVar26 = shared.OutputMskType(r.OutputMsk.Type.ValueString())
		} else {
			typeVar26 = nil
		}
		pipeline26 := new(string)
		if !r.OutputMsk.Pipeline.IsUnknown() && !r.OutputMsk.Pipeline.IsNull() {
			*pipeline26 = r.OutputMsk.Pipeline.ValueString()
		} else {
			pipeline26 = nil
		}
		systemFields26 := make([]string, 0, len(r.OutputMsk.SystemFields))
		for _, systemFieldsItem26 := range r.OutputMsk.SystemFields {
			systemFields26 = append(systemFields26, systemFieldsItem26.ValueString())
		}
		environment26 := new(string)
		if !r.OutputMsk.Environment.IsUnknown() && !r.OutputMsk.Environment.IsNull() {
			*environment26 = r.OutputMsk.Environment.ValueString()
		} else {
			environment26 = nil
		}
		streamtags26 := make([]string, 0, len(r.OutputMsk.Streamtags))
		for _, streamtagsItem26 := range r.OutputMsk.Streamtags {
			streamtags26 = append(streamtags26, streamtagsItem26.ValueString())
		}
		brokers3 := make([]string, 0, len(r.OutputMsk.Brokers))
		for _, brokersItem3 := range r.OutputMsk.Brokers {
			brokers3 = append(brokers3, brokersItem3.ValueString())
		}
		var topic3 string
		topic3 = r.OutputMsk.Topic.ValueString()

		ack3 := new(shared.OutputMskAcknowledgments)
		if !r.OutputMsk.Ack.IsUnknown() && !r.OutputMsk.Ack.IsNull() {
			*ack3 = shared.OutputMskAcknowledgments(r.OutputMsk.Ack.ValueInt64())
		} else {
			ack3 = nil
		}
		format10 := new(shared.OutputMskRecordDataFormat)
		if !r.OutputMsk.Format.IsUnknown() && !r.OutputMsk.Format.IsNull() {
			*format10 = shared.OutputMskRecordDataFormat(r.OutputMsk.Format.ValueString())
		} else {
			format10 = nil
		}
		compression4 := new(shared.OutputMskCompression)
		if !r.OutputMsk.Compression.IsUnknown() && !r.OutputMsk.Compression.IsNull() {
			*compression4 = shared.OutputMskCompression(r.OutputMsk.Compression.ValueString())
		} else {
			compression4 = nil
		}
		maxRecordSizeKb5 := new(float64)
		if !r.OutputMsk.MaxRecordSizeKB.IsUnknown() && !r.OutputMsk.MaxRecordSizeKB.IsNull() {
			*maxRecordSizeKb5 = r.OutputMsk.MaxRecordSizeKB.ValueFloat64()
		} else {
			maxRecordSizeKb5 = nil
		}
		flushEventCount3 := new(float64)
		if !r.OutputMsk.FlushEventCount.IsUnknown() && !r.OutputMsk.FlushEventCount.IsNull() {
			*flushEventCount3 = r.OutputMsk.FlushEventCount.ValueFloat64()
		} else {
			flushEventCount3 = nil
		}
		flushPeriodSec15 := new(float64)
		if !r.OutputMsk.FlushPeriodSec.IsUnknown() && !r.OutputMsk.FlushPeriodSec.IsNull() {
			*flushPeriodSec15 = r.OutputMsk.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec15 = nil
		}
		var kafkaSchemaRegistry2 *shared.OutputMskKafkaSchemaRegistryAuthentication
		if r.OutputMsk.KafkaSchemaRegistry != nil {
			disabled17 := new(bool)
			if !r.OutputMsk.KafkaSchemaRegistry.Disabled.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.Disabled.IsNull() {
				*disabled17 = r.OutputMsk.KafkaSchemaRegistry.Disabled.ValueBool()
			} else {
				disabled17 = nil
			}
			schemaRegistryUrl2 := new(string)
			if !r.OutputMsk.KafkaSchemaRegistry.SchemaRegistryURL.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.SchemaRegistryURL.IsNull() {
				*schemaRegistryUrl2 = r.OutputMsk.KafkaSchemaRegistry.SchemaRegistryURL.ValueString()
			} else {
				schemaRegistryUrl2 = nil
			}
			connectionTimeout10 := new(float64)
			if !r.OutputMsk.KafkaSchemaRegistry.ConnectionTimeout.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.ConnectionTimeout.IsNull() {
				*connectionTimeout10 = r.OutputMsk.KafkaSchemaRegistry.ConnectionTimeout.ValueFloat64()
			} else {
				connectionTimeout10 = nil
			}
			requestTimeout5 := new(float64)
			if !r.OutputMsk.KafkaSchemaRegistry.RequestTimeout.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.RequestTimeout.IsNull() {
				*requestTimeout5 = r.OutputMsk.KafkaSchemaRegistry.RequestTimeout.ValueFloat64()
			} else {
				requestTimeout5 = nil
			}
			maxRetries5 := new(float64)
			if !r.OutputMsk.KafkaSchemaRegistry.MaxRetries.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.MaxRetries.IsNull() {
				*maxRetries5 = r.OutputMsk.KafkaSchemaRegistry.MaxRetries.ValueFloat64()
			} else {
				maxRetries5 = nil
			}
			var auth2 *shared.OutputMskAuth
			if r.OutputMsk.KafkaSchemaRegistry.Auth != nil {
				disabled18 := new(bool)
				if !r.OutputMsk.KafkaSchemaRegistry.Auth.Disabled.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.Auth.Disabled.IsNull() {
					*disabled18 = r.OutputMsk.KafkaSchemaRegistry.Auth.Disabled.ValueBool()
				} else {
					disabled18 = nil
				}
				credentialsSecret3 := new(string)
				if !r.OutputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret.IsNull() {
					*credentialsSecret3 = r.OutputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret3 = nil
				}
				auth2 = &shared.OutputMskAuth{
					Disabled:          disabled18,
					CredentialsSecret: credentialsSecret3,
				}
			}
			var tls12 *shared.OutputMskKafkaSchemaRegistryTLSSettingsClientSide
			if r.OutputMsk.KafkaSchemaRegistry.TLS != nil {
				disabled19 := new(bool)
				if !r.OutputMsk.KafkaSchemaRegistry.TLS.Disabled.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.TLS.Disabled.IsNull() {
					*disabled19 = r.OutputMsk.KafkaSchemaRegistry.TLS.Disabled.ValueBool()
				} else {
					disabled19 = nil
				}
				rejectUnauthorized23 := new(bool)
				if !r.OutputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsNull() {
					*rejectUnauthorized23 = r.OutputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized.ValueBool()
				} else {
					rejectUnauthorized23 = nil
				}
				servername11 := new(string)
				if !r.OutputMsk.KafkaSchemaRegistry.TLS.Servername.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.TLS.Servername.IsNull() {
					*servername11 = r.OutputMsk.KafkaSchemaRegistry.TLS.Servername.ValueString()
				} else {
					servername11 = nil
				}
				certificateName11 := new(string)
				if !r.OutputMsk.KafkaSchemaRegistry.TLS.CertificateName.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.TLS.CertificateName.IsNull() {
					*certificateName11 = r.OutputMsk.KafkaSchemaRegistry.TLS.CertificateName.ValueString()
				} else {
					certificateName11 = nil
				}
				caPath9 := new(string)
				if !r.OutputMsk.KafkaSchemaRegistry.TLS.CaPath.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.TLS.CaPath.IsNull() {
					*caPath9 = r.OutputMsk.KafkaSchemaRegistry.TLS.CaPath.ValueString()
				} else {
					caPath9 = nil
				}
				privKeyPath9 := new(string)
				if !r.OutputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath.IsNull() {
					*privKeyPath9 = r.OutputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath.ValueString()
				} else {
					privKeyPath9 = nil
				}
				certPath9 := new(string)
				if !r.OutputMsk.KafkaSchemaRegistry.TLS.CertPath.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.TLS.CertPath.IsNull() {
					*certPath9 = r.OutputMsk.KafkaSchemaRegistry.TLS.CertPath.ValueString()
				} else {
					certPath9 = nil
				}
				passphrase9 := new(string)
				if !r.OutputMsk.KafkaSchemaRegistry.TLS.Passphrase.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.TLS.Passphrase.IsNull() {
					*passphrase9 = r.OutputMsk.KafkaSchemaRegistry.TLS.Passphrase.ValueString()
				} else {
					passphrase9 = nil
				}
				minVersion9 := new(shared.OutputMskKafkaSchemaRegistryMinimumTLSVersion)
				if !r.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion.IsNull() {
					*minVersion9 = shared.OutputMskKafkaSchemaRegistryMinimumTLSVersion(r.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion.ValueString())
				} else {
					minVersion9 = nil
				}
				maxVersion9 := new(shared.OutputMskKafkaSchemaRegistryMaximumTLSVersion)
				if !r.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion.IsNull() {
					*maxVersion9 = shared.OutputMskKafkaSchemaRegistryMaximumTLSVersion(r.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion.ValueString())
				} else {
					maxVersion9 = nil
				}
				tls12 = &shared.OutputMskKafkaSchemaRegistryTLSSettingsClientSide{
					Disabled:           disabled19,
					RejectUnauthorized: rejectUnauthorized23,
					Servername:         servername11,
					CertificateName:    certificateName11,
					CaPath:             caPath9,
					PrivKeyPath:        privKeyPath9,
					CertPath:           certPath9,
					Passphrase:         passphrase9,
					MinVersion:         minVersion9,
					MaxVersion:         maxVersion9,
				}
			}
			defaultKeySchemaId2 := new(float64)
			if !r.OutputMsk.KafkaSchemaRegistry.DefaultKeySchemaID.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.DefaultKeySchemaID.IsNull() {
				*defaultKeySchemaId2 = r.OutputMsk.KafkaSchemaRegistry.DefaultKeySchemaID.ValueFloat64()
			} else {
				defaultKeySchemaId2 = nil
			}
			defaultValueSchemaId2 := new(float64)
			if !r.OutputMsk.KafkaSchemaRegistry.DefaultValueSchemaID.IsUnknown() && !r.OutputMsk.KafkaSchemaRegistry.DefaultValueSchemaID.IsNull() {
				*defaultValueSchemaId2 = r.OutputMsk.KafkaSchemaRegistry.DefaultValueSchemaID.ValueFloat64()
			} else {
				defaultValueSchemaId2 = nil
			}
			kafkaSchemaRegistry2 = &shared.OutputMskKafkaSchemaRegistryAuthentication{
				Disabled:             disabled17,
				SchemaRegistryURL:    schemaRegistryUrl2,
				ConnectionTimeout:    connectionTimeout10,
				RequestTimeout:       requestTimeout5,
				MaxRetries:           maxRetries5,
				Auth:                 auth2,
				TLS:                  tls12,
				DefaultKeySchemaID:   defaultKeySchemaId2,
				DefaultValueSchemaID: defaultValueSchemaId2,
			}
		}
		connectionTimeout11 := new(float64)
		if !r.OutputMsk.ConnectionTimeout.IsUnknown() && !r.OutputMsk.ConnectionTimeout.IsNull() {
			*connectionTimeout11 = r.OutputMsk.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout11 = nil
		}
		requestTimeout6 := new(float64)
		if !r.OutputMsk.RequestTimeout.IsUnknown() && !r.OutputMsk.RequestTimeout.IsNull() {
			*requestTimeout6 = r.OutputMsk.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout6 = nil
		}
		maxRetries6 := new(float64)
		if !r.OutputMsk.MaxRetries.IsUnknown() && !r.OutputMsk.MaxRetries.IsNull() {
			*maxRetries6 = r.OutputMsk.MaxRetries.ValueFloat64()
		} else {
			maxRetries6 = nil
		}
		maxBackOff3 := new(float64)
		if !r.OutputMsk.MaxBackOff.IsUnknown() && !r.OutputMsk.MaxBackOff.IsNull() {
			*maxBackOff3 = r.OutputMsk.MaxBackOff.ValueFloat64()
		} else {
			maxBackOff3 = nil
		}
		initialBackoff21 := new(float64)
		if !r.OutputMsk.InitialBackoff.IsUnknown() && !r.OutputMsk.InitialBackoff.IsNull() {
			*initialBackoff21 = r.OutputMsk.InitialBackoff.ValueFloat64()
		} else {
			initialBackoff21 = nil
		}
		backoffRate21 := new(float64)
		if !r.OutputMsk.BackoffRate.IsUnknown() && !r.OutputMsk.BackoffRate.IsNull() {
			*backoffRate21 = r.OutputMsk.BackoffRate.ValueFloat64()
		} else {
			backoffRate21 = nil
		}
		authenticationTimeout3 := new(float64)
		if !r.OutputMsk.AuthenticationTimeout.IsUnknown() && !r.OutputMsk.AuthenticationTimeout.IsNull() {
			*authenticationTimeout3 = r.OutputMsk.AuthenticationTimeout.ValueFloat64()
		} else {
			authenticationTimeout3 = nil
		}
		reauthenticationThreshold3 := new(float64)
		if !r.OutputMsk.ReauthenticationThreshold.IsUnknown() && !r.OutputMsk.ReauthenticationThreshold.IsNull() {
			*reauthenticationThreshold3 = r.OutputMsk.ReauthenticationThreshold.ValueFloat64()
		} else {
			reauthenticationThreshold3 = nil
		}
		awsAuthenticationMethod3 := new(shared.OutputMskAuthenticationMethod)
		if !r.OutputMsk.AwsAuthenticationMethod.IsUnknown() && !r.OutputMsk.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod3 = shared.OutputMskAuthenticationMethod(r.OutputMsk.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod3 = nil
		}
		awsSecretKey4 := new(string)
		if !r.OutputMsk.AwsSecretKey.IsUnknown() && !r.OutputMsk.AwsSecretKey.IsNull() {
			*awsSecretKey4 = r.OutputMsk.AwsSecretKey.ValueString()
		} else {
			awsSecretKey4 = nil
		}
		var region6 string
		region6 = r.OutputMsk.Region.ValueString()

		endpoint4 := new(string)
		if !r.OutputMsk.Endpoint.IsUnknown() && !r.OutputMsk.Endpoint.IsNull() {
			*endpoint4 = r.OutputMsk.Endpoint.ValueString()
		} else {
			endpoint4 = nil
		}
		signatureVersion4 := new(shared.OutputMskSignatureVersion)
		if !r.OutputMsk.SignatureVersion.IsUnknown() && !r.OutputMsk.SignatureVersion.IsNull() {
			*signatureVersion4 = shared.OutputMskSignatureVersion(r.OutputMsk.SignatureVersion.ValueString())
		} else {
			signatureVersion4 = nil
		}
		reuseConnections4 := new(bool)
		if !r.OutputMsk.ReuseConnections.IsUnknown() && !r.OutputMsk.ReuseConnections.IsNull() {
			*reuseConnections4 = r.OutputMsk.ReuseConnections.ValueBool()
		} else {
			reuseConnections4 = nil
		}
		rejectUnauthorized24 := new(bool)
		if !r.OutputMsk.RejectUnauthorized.IsUnknown() && !r.OutputMsk.RejectUnauthorized.IsNull() {
			*rejectUnauthorized24 = r.OutputMsk.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized24 = nil
		}
		enableAssumeRole2 := new(bool)
		if !r.OutputMsk.EnableAssumeRole.IsUnknown() && !r.OutputMsk.EnableAssumeRole.IsNull() {
			*enableAssumeRole2 = r.OutputMsk.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole2 = nil
		}
		assumeRoleArn2 := new(string)
		if !r.OutputMsk.AssumeRoleArn.IsUnknown() && !r.OutputMsk.AssumeRoleArn.IsNull() {
			*assumeRoleArn2 = r.OutputMsk.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn2 = nil
		}
		assumeRoleExternalId2 := new(string)
		if !r.OutputMsk.AssumeRoleExternalID.IsUnknown() && !r.OutputMsk.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId2 = r.OutputMsk.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId2 = nil
		}
		durationSeconds2 := new(float64)
		if !r.OutputMsk.DurationSeconds.IsUnknown() && !r.OutputMsk.DurationSeconds.IsNull() {
			*durationSeconds2 = r.OutputMsk.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds2 = nil
		}
		var tls13 *shared.OutputMskTLSSettingsClientSide
		if r.OutputMsk.TLS != nil {
			disabled20 := new(bool)
			if !r.OutputMsk.TLS.Disabled.IsUnknown() && !r.OutputMsk.TLS.Disabled.IsNull() {
				*disabled20 = r.OutputMsk.TLS.Disabled.ValueBool()
			} else {
				disabled20 = nil
			}
			rejectUnauthorized25 := new(bool)
			if !r.OutputMsk.TLS.RejectUnauthorized.IsUnknown() && !r.OutputMsk.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized25 = r.OutputMsk.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized25 = nil
			}
			servername12 := new(string)
			if !r.OutputMsk.TLS.Servername.IsUnknown() && !r.OutputMsk.TLS.Servername.IsNull() {
				*servername12 = r.OutputMsk.TLS.Servername.ValueString()
			} else {
				servername12 = nil
			}
			certificateName12 := new(string)
			if !r.OutputMsk.TLS.CertificateName.IsUnknown() && !r.OutputMsk.TLS.CertificateName.IsNull() {
				*certificateName12 = r.OutputMsk.TLS.CertificateName.ValueString()
			} else {
				certificateName12 = nil
			}
			caPath10 := new(string)
			if !r.OutputMsk.TLS.CaPath.IsUnknown() && !r.OutputMsk.TLS.CaPath.IsNull() {
				*caPath10 = r.OutputMsk.TLS.CaPath.ValueString()
			} else {
				caPath10 = nil
			}
			privKeyPath10 := new(string)
			if !r.OutputMsk.TLS.PrivKeyPath.IsUnknown() && !r.OutputMsk.TLS.PrivKeyPath.IsNull() {
				*privKeyPath10 = r.OutputMsk.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath10 = nil
			}
			certPath10 := new(string)
			if !r.OutputMsk.TLS.CertPath.IsUnknown() && !r.OutputMsk.TLS.CertPath.IsNull() {
				*certPath10 = r.OutputMsk.TLS.CertPath.ValueString()
			} else {
				certPath10 = nil
			}
			passphrase10 := new(string)
			if !r.OutputMsk.TLS.Passphrase.IsUnknown() && !r.OutputMsk.TLS.Passphrase.IsNull() {
				*passphrase10 = r.OutputMsk.TLS.Passphrase.ValueString()
			} else {
				passphrase10 = nil
			}
			minVersion10 := new(shared.OutputMskMinimumTLSVersion)
			if !r.OutputMsk.TLS.MinVersion.IsUnknown() && !r.OutputMsk.TLS.MinVersion.IsNull() {
				*minVersion10 = shared.OutputMskMinimumTLSVersion(r.OutputMsk.TLS.MinVersion.ValueString())
			} else {
				minVersion10 = nil
			}
			maxVersion10 := new(shared.OutputMskMaximumTLSVersion)
			if !r.OutputMsk.TLS.MaxVersion.IsUnknown() && !r.OutputMsk.TLS.MaxVersion.IsNull() {
				*maxVersion10 = shared.OutputMskMaximumTLSVersion(r.OutputMsk.TLS.MaxVersion.ValueString())
			} else {
				maxVersion10 = nil
			}
			tls13 = &shared.OutputMskTLSSettingsClientSide{
				Disabled:           disabled20,
				RejectUnauthorized: rejectUnauthorized25,
				Servername:         servername12,
				CertificateName:    certificateName12,
				CaPath:             caPath10,
				PrivKeyPath:        privKeyPath10,
				CertPath:           certPath10,
				Passphrase:         passphrase10,
				MinVersion:         minVersion10,
				MaxVersion:         maxVersion10,
			}
		}
		onBackpressure24 := new(shared.OutputMskBackpressureBehavior)
		if !r.OutputMsk.OnBackpressure.IsUnknown() && !r.OutputMsk.OnBackpressure.IsNull() {
			*onBackpressure24 = shared.OutputMskBackpressureBehavior(r.OutputMsk.OnBackpressure.ValueString())
		} else {
			onBackpressure24 = nil
		}
		description25 := new(string)
		if !r.OutputMsk.Description.IsUnknown() && !r.OutputMsk.Description.IsNull() {
			*description25 = r.OutputMsk.Description.ValueString()
		} else {
			description25 = nil
		}
		awsAPIKey4 := new(string)
		if !r.OutputMsk.AwsAPIKey.IsUnknown() && !r.OutputMsk.AwsAPIKey.IsNull() {
			*awsAPIKey4 = r.OutputMsk.AwsAPIKey.ValueString()
		} else {
			awsAPIKey4 = nil
		}
		awsSecret3 := new(string)
		if !r.OutputMsk.AwsSecret.IsUnknown() && !r.OutputMsk.AwsSecret.IsNull() {
			*awsSecret3 = r.OutputMsk.AwsSecret.ValueString()
		} else {
			awsSecret3 = nil
		}
		protobufLibraryId2 := new(string)
		if !r.OutputMsk.ProtobufLibraryID.IsUnknown() && !r.OutputMsk.ProtobufLibraryID.IsNull() {
			*protobufLibraryId2 = r.OutputMsk.ProtobufLibraryID.ValueString()
		} else {
			protobufLibraryId2 = nil
		}
		pqMaxFileSize19 := new(string)
		if !r.OutputMsk.PqMaxFileSize.IsUnknown() && !r.OutputMsk.PqMaxFileSize.IsNull() {
			*pqMaxFileSize19 = r.OutputMsk.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize19 = nil
		}
		pqMaxSize19 := new(string)
		if !r.OutputMsk.PqMaxSize.IsUnknown() && !r.OutputMsk.PqMaxSize.IsNull() {
			*pqMaxSize19 = r.OutputMsk.PqMaxSize.ValueString()
		} else {
			pqMaxSize19 = nil
		}
		pqPath19 := new(string)
		if !r.OutputMsk.PqPath.IsUnknown() && !r.OutputMsk.PqPath.IsNull() {
			*pqPath19 = r.OutputMsk.PqPath.ValueString()
		} else {
			pqPath19 = nil
		}
		pqCompress19 := new(shared.OutputMskPqCompressCompression)
		if !r.OutputMsk.PqCompress.IsUnknown() && !r.OutputMsk.PqCompress.IsNull() {
			*pqCompress19 = shared.OutputMskPqCompressCompression(r.OutputMsk.PqCompress.ValueString())
		} else {
			pqCompress19 = nil
		}
		pqOnBackpressure19 := new(shared.OutputMskQueueFullBehavior)
		if !r.OutputMsk.PqOnBackpressure.IsUnknown() && !r.OutputMsk.PqOnBackpressure.IsNull() {
			*pqOnBackpressure19 = shared.OutputMskQueueFullBehavior(r.OutputMsk.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure19 = nil
		}
		pqMode19 := new(shared.OutputMskMode)
		if !r.OutputMsk.PqMode.IsUnknown() && !r.OutputMsk.PqMode.IsNull() {
			*pqMode19 = shared.OutputMskMode(r.OutputMsk.PqMode.ValueString())
		} else {
			pqMode19 = nil
		}
		var pqControls19 *shared.OutputMskPqControls
		if r.OutputMsk.PqControls != nil {
			pqControls19 = &shared.OutputMskPqControls{}
		}
		outputMsk = &shared.OutputMsk{
			ID:                        id26,
			Type:                      typeVar26,
			Pipeline:                  pipeline26,
			SystemFields:              systemFields26,
			Environment:               environment26,
			Streamtags:                streamtags26,
			Brokers:                   brokers3,
			Topic:                     topic3,
			Ack:                       ack3,
			Format:                    format10,
			Compression:               compression4,
			MaxRecordSizeKB:           maxRecordSizeKb5,
			FlushEventCount:           flushEventCount3,
			FlushPeriodSec:            flushPeriodSec15,
			KafkaSchemaRegistry:       kafkaSchemaRegistry2,
			ConnectionTimeout:         connectionTimeout11,
			RequestTimeout:            requestTimeout6,
			MaxRetries:                maxRetries6,
			MaxBackOff:                maxBackOff3,
			InitialBackoff:            initialBackoff21,
			BackoffRate:               backoffRate21,
			AuthenticationTimeout:     authenticationTimeout3,
			ReauthenticationThreshold: reauthenticationThreshold3,
			AwsAuthenticationMethod:   awsAuthenticationMethod3,
			AwsSecretKey:              awsSecretKey4,
			Region:                    region6,
			Endpoint:                  endpoint4,
			SignatureVersion:          signatureVersion4,
			ReuseConnections:          reuseConnections4,
			RejectUnauthorized:        rejectUnauthorized24,
			EnableAssumeRole:          enableAssumeRole2,
			AssumeRoleArn:             assumeRoleArn2,
			AssumeRoleExternalID:      assumeRoleExternalId2,
			DurationSeconds:           durationSeconds2,
			TLS:                       tls13,
			OnBackpressure:            onBackpressure24,
			Description:               description25,
			AwsAPIKey:                 awsAPIKey4,
			AwsSecret:                 awsSecret3,
			ProtobufLibraryID:         protobufLibraryId2,
			PqMaxFileSize:             pqMaxFileSize19,
			PqMaxSize:                 pqMaxSize19,
			PqPath:                    pqPath19,
			PqCompress:                pqCompress19,
			PqOnBackpressure:          pqOnBackpressure19,
			PqMode:                    pqMode19,
			PqControls:                pqControls19,
		}
	}
	if outputMsk != nil {
		out = shared.Output{
			OutputMsk: outputMsk,
		}
	}
	var outputElastic *shared.OutputElastic
	if r.OutputElastic != nil {
		id27 := new(string)
		if !r.OutputElastic.ID.IsUnknown() && !r.OutputElastic.ID.IsNull() {
			*id27 = r.OutputElastic.ID.ValueString()
		} else {
			id27 = nil
		}
		typeVar27 := shared.OutputElasticType(r.OutputElastic.Type.ValueString())
		pipeline27 := new(string)
		if !r.OutputElastic.Pipeline.IsUnknown() && !r.OutputElastic.Pipeline.IsNull() {
			*pipeline27 = r.OutputElastic.Pipeline.ValueString()
		} else {
			pipeline27 = nil
		}
		systemFields27 := make([]string, 0, len(r.OutputElastic.SystemFields))
		for _, systemFieldsItem27 := range r.OutputElastic.SystemFields {
			systemFields27 = append(systemFields27, systemFieldsItem27.ValueString())
		}
		environment27 := new(string)
		if !r.OutputElastic.Environment.IsUnknown() && !r.OutputElastic.Environment.IsNull() {
			*environment27 = r.OutputElastic.Environment.ValueString()
		} else {
			environment27 = nil
		}
		streamtags27 := make([]string, 0, len(r.OutputElastic.Streamtags))
		for _, streamtagsItem27 := range r.OutputElastic.Streamtags {
			streamtags27 = append(streamtags27, streamtagsItem27.ValueString())
		}
		loadBalanced4 := new(bool)
		if !r.OutputElastic.LoadBalanced.IsUnknown() && !r.OutputElastic.LoadBalanced.IsNull() {
			*loadBalanced4 = r.OutputElastic.LoadBalanced.ValueBool()
		} else {
			loadBalanced4 = nil
		}
		var index string
		index = r.OutputElastic.Index.ValueString()

		docType := new(string)
		if !r.OutputElastic.DocType.IsUnknown() && !r.OutputElastic.DocType.IsNull() {
			*docType = r.OutputElastic.DocType.ValueString()
		} else {
			docType = nil
		}
		concurrency11 := new(float64)
		if !r.OutputElastic.Concurrency.IsUnknown() && !r.OutputElastic.Concurrency.IsNull() {
			*concurrency11 = r.OutputElastic.Concurrency.ValueFloat64()
		} else {
			concurrency11 = nil
		}
		maxPayloadSizeKb10 := new(float64)
		if !r.OutputElastic.MaxPayloadSizeKB.IsUnknown() && !r.OutputElastic.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb10 = r.OutputElastic.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb10 = nil
		}
		maxPayloadEvents10 := new(float64)
		if !r.OutputElastic.MaxPayloadEvents.IsUnknown() && !r.OutputElastic.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents10 = r.OutputElastic.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents10 = nil
		}
		compress15 := new(bool)
		if !r.OutputElastic.Compress.IsUnknown() && !r.OutputElastic.Compress.IsNull() {
			*compress15 = r.OutputElastic.Compress.ValueBool()
		} else {
			compress15 = nil
		}
		rejectUnauthorized26 := new(bool)
		if !r.OutputElastic.RejectUnauthorized.IsUnknown() && !r.OutputElastic.RejectUnauthorized.IsNull() {
			*rejectUnauthorized26 = r.OutputElastic.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized26 = nil
		}
		timeoutSec10 := new(float64)
		if !r.OutputElastic.TimeoutSec.IsUnknown() && !r.OutputElastic.TimeoutSec.IsNull() {
			*timeoutSec10 = r.OutputElastic.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec10 = nil
		}
		flushPeriodSec16 := new(float64)
		if !r.OutputElastic.FlushPeriodSec.IsUnknown() && !r.OutputElastic.FlushPeriodSec.IsNull() {
			*flushPeriodSec16 = r.OutputElastic.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec16 = nil
		}
		extraHTTPHeaders8 := make([]shared.OutputElasticExtraHTTPHeaders, 0, len(r.OutputElastic.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem8 := range r.OutputElastic.ExtraHTTPHeaders {
			name10 := new(string)
			if !extraHTTPHeadersItem8.Name.IsUnknown() && !extraHTTPHeadersItem8.Name.IsNull() {
				*name10 = extraHTTPHeadersItem8.Name.ValueString()
			} else {
				name10 = nil
			}
			var value18 string
			value18 = extraHTTPHeadersItem8.Value.ValueString()

			extraHTTPHeaders8 = append(extraHTTPHeaders8, shared.OutputElasticExtraHTTPHeaders{
				Name:  name10,
				Value: value18,
			})
		}
		failedRequestLoggingMode8 := new(shared.OutputElasticFailedRequestLoggingMode)
		if !r.OutputElastic.FailedRequestLoggingMode.IsUnknown() && !r.OutputElastic.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode8 = shared.OutputElasticFailedRequestLoggingMode(r.OutputElastic.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode8 = nil
		}
		safeHeaders8 := make([]string, 0, len(r.OutputElastic.SafeHeaders))
		for _, safeHeadersItem8 := range r.OutputElastic.SafeHeaders {
			safeHeaders8 = append(safeHeaders8, safeHeadersItem8.ValueString())
		}
		responseRetrySettings9 := make([]shared.OutputElasticResponseRetrySettings, 0, len(r.OutputElastic.ResponseRetrySettings))
		for _, responseRetrySettingsItem9 := range r.OutputElastic.ResponseRetrySettings {
			var httpStatus9 float64
			httpStatus9 = responseRetrySettingsItem9.HTTPStatus.ValueFloat64()

			initialBackoff22 := new(float64)
			if !responseRetrySettingsItem9.InitialBackoff.IsUnknown() && !responseRetrySettingsItem9.InitialBackoff.IsNull() {
				*initialBackoff22 = responseRetrySettingsItem9.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff22 = nil
			}
			backoffRate22 := new(float64)
			if !responseRetrySettingsItem9.BackoffRate.IsUnknown() && !responseRetrySettingsItem9.BackoffRate.IsNull() {
				*backoffRate22 = responseRetrySettingsItem9.BackoffRate.ValueFloat64()
			} else {
				backoffRate22 = nil
			}
			maxBackoff18 := new(float64)
			if !responseRetrySettingsItem9.MaxBackoff.IsUnknown() && !responseRetrySettingsItem9.MaxBackoff.IsNull() {
				*maxBackoff18 = responseRetrySettingsItem9.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff18 = nil
			}
			responseRetrySettings9 = append(responseRetrySettings9, shared.OutputElasticResponseRetrySettings{
				HTTPStatus:     httpStatus9,
				InitialBackoff: initialBackoff22,
				BackoffRate:    backoffRate22,
				MaxBackoff:     maxBackoff18,
			})
		}
		var timeoutRetrySettings9 *shared.OutputElasticTimeoutRetrySettings
		if r.OutputElastic.TimeoutRetrySettings != nil {
			timeoutRetry9 := new(bool)
			if !r.OutputElastic.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputElastic.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry9 = r.OutputElastic.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry9 = nil
			}
			initialBackoff23 := new(float64)
			if !r.OutputElastic.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputElastic.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff23 = r.OutputElastic.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff23 = nil
			}
			backoffRate23 := new(float64)
			if !r.OutputElastic.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputElastic.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate23 = r.OutputElastic.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate23 = nil
			}
			maxBackoff19 := new(float64)
			if !r.OutputElastic.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputElastic.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff19 = r.OutputElastic.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff19 = nil
			}
			timeoutRetrySettings9 = &shared.OutputElasticTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry9,
				InitialBackoff: initialBackoff23,
				BackoffRate:    backoffRate23,
				MaxBackoff:     maxBackoff19,
			}
		}
		responseHonorRetryAfterHeader9 := new(bool)
		if !r.OutputElastic.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputElastic.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader9 = r.OutputElastic.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader9 = nil
		}
		extraParams := make([]shared.ExtraParams, 0, len(r.OutputElastic.ExtraParams))
		for _, extraParamsItem := range r.OutputElastic.ExtraParams {
			var name11 string
			name11 = extraParamsItem.Name.ValueString()

			var value19 string
			value19 = extraParamsItem.Value.ValueString()

			extraParams = append(extraParams, shared.ExtraParams{
				Name:  name11,
				Value: value19,
			})
		}
		var auth3 *shared.Auth
		if r.OutputElastic.Auth != nil {
			disabled21 := new(bool)
			if !r.OutputElastic.Auth.Disabled.IsUnknown() && !r.OutputElastic.Auth.Disabled.IsNull() {
				*disabled21 = r.OutputElastic.Auth.Disabled.ValueBool()
			} else {
				disabled21 = nil
			}
			authType13 := new(shared.OutputElasticAuthenticationMethod)
			if !r.OutputElastic.Auth.AuthType.IsUnknown() && !r.OutputElastic.Auth.AuthType.IsNull() {
				*authType13 = shared.OutputElasticAuthenticationMethod(r.OutputElastic.Auth.AuthType.ValueString())
			} else {
				authType13 = nil
			}
			auth3 = &shared.Auth{
				Disabled: disabled21,
				AuthType: authType13,
			}
		}
		elasticVersion := new(shared.ElasticVersion)
		if !r.OutputElastic.ElasticVersion.IsUnknown() && !r.OutputElastic.ElasticVersion.IsNull() {
			*elasticVersion = shared.ElasticVersion(r.OutputElastic.ElasticVersion.ValueString())
		} else {
			elasticVersion = nil
		}
		elasticPipeline := new(string)
		if !r.OutputElastic.ElasticPipeline.IsUnknown() && !r.OutputElastic.ElasticPipeline.IsNull() {
			*elasticPipeline = r.OutputElastic.ElasticPipeline.ValueString()
		} else {
			elasticPipeline = nil
		}
		includeDocID := new(bool)
		if !r.OutputElastic.IncludeDocID.IsUnknown() && !r.OutputElastic.IncludeDocID.IsNull() {
			*includeDocID = r.OutputElastic.IncludeDocID.ValueBool()
		} else {
			includeDocID = nil
		}
		writeAction := new(shared.WriteAction)
		if !r.OutputElastic.WriteAction.IsUnknown() && !r.OutputElastic.WriteAction.IsNull() {
			*writeAction = shared.WriteAction(r.OutputElastic.WriteAction.ValueString())
		} else {
			writeAction = nil
		}
		retryPartialErrors := new(bool)
		if !r.OutputElastic.RetryPartialErrors.IsUnknown() && !r.OutputElastic.RetryPartialErrors.IsNull() {
			*retryPartialErrors = r.OutputElastic.RetryPartialErrors.ValueBool()
		} else {
			retryPartialErrors = nil
		}
		onBackpressure25 := new(shared.OutputElasticBackpressureBehavior)
		if !r.OutputElastic.OnBackpressure.IsUnknown() && !r.OutputElastic.OnBackpressure.IsNull() {
			*onBackpressure25 = shared.OutputElasticBackpressureBehavior(r.OutputElastic.OnBackpressure.ValueString())
		} else {
			onBackpressure25 = nil
		}
		description26 := new(string)
		if !r.OutputElastic.Description.IsUnknown() && !r.OutputElastic.Description.IsNull() {
			*description26 = r.OutputElastic.Description.ValueString()
		} else {
			description26 = nil
		}
		url5 := new(string)
		if !r.OutputElastic.URL.IsUnknown() && !r.OutputElastic.URL.IsNull() {
			*url5 = r.OutputElastic.URL.ValueString()
		} else {
			url5 = nil
		}
		useRoundRobinDns9 := new(bool)
		if !r.OutputElastic.UseRoundRobinDNS.IsUnknown() && !r.OutputElastic.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns9 = r.OutputElastic.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns9 = nil
		}
		excludeSelf4 := new(bool)
		if !r.OutputElastic.ExcludeSelf.IsUnknown() && !r.OutputElastic.ExcludeSelf.IsNull() {
			*excludeSelf4 = r.OutputElastic.ExcludeSelf.ValueBool()
		} else {
			excludeSelf4 = nil
		}
		urls2 := make([]shared.OutputElasticUrls, 0, len(r.OutputElastic.Urls))
		for _, urlsItem2 := range r.OutputElastic.Urls {
			var url6 string
			url6 = urlsItem2.URL.ValueString()

			weight4 := new(float64)
			if !urlsItem2.Weight.IsUnknown() && !urlsItem2.Weight.IsNull() {
				*weight4 = urlsItem2.Weight.ValueFloat64()
			} else {
				weight4 = nil
			}
			urls2 = append(urls2, shared.OutputElasticUrls{
				URL:    url6,
				Weight: weight4,
			})
		}
		dnsResolvePeriodSec4 := new(float64)
		if !r.OutputElastic.DNSResolvePeriodSec.IsUnknown() && !r.OutputElastic.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec4 = r.OutputElastic.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec4 = nil
		}
		loadBalanceStatsPeriodSec4 := new(float64)
		if !r.OutputElastic.LoadBalanceStatsPeriodSec.IsUnknown() && !r.OutputElastic.LoadBalanceStatsPeriodSec.IsNull() {
			*loadBalanceStatsPeriodSec4 = r.OutputElastic.LoadBalanceStatsPeriodSec.ValueFloat64()
		} else {
			loadBalanceStatsPeriodSec4 = nil
		}
		pqMaxFileSize20 := new(string)
		if !r.OutputElastic.PqMaxFileSize.IsUnknown() && !r.OutputElastic.PqMaxFileSize.IsNull() {
			*pqMaxFileSize20 = r.OutputElastic.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize20 = nil
		}
		pqMaxSize20 := new(string)
		if !r.OutputElastic.PqMaxSize.IsUnknown() && !r.OutputElastic.PqMaxSize.IsNull() {
			*pqMaxSize20 = r.OutputElastic.PqMaxSize.ValueString()
		} else {
			pqMaxSize20 = nil
		}
		pqPath20 := new(string)
		if !r.OutputElastic.PqPath.IsUnknown() && !r.OutputElastic.PqPath.IsNull() {
			*pqPath20 = r.OutputElastic.PqPath.ValueString()
		} else {
			pqPath20 = nil
		}
		pqCompress20 := new(shared.OutputElasticCompression)
		if !r.OutputElastic.PqCompress.IsUnknown() && !r.OutputElastic.PqCompress.IsNull() {
			*pqCompress20 = shared.OutputElasticCompression(r.OutputElastic.PqCompress.ValueString())
		} else {
			pqCompress20 = nil
		}
		pqOnBackpressure20 := new(shared.OutputElasticQueueFullBehavior)
		if !r.OutputElastic.PqOnBackpressure.IsUnknown() && !r.OutputElastic.PqOnBackpressure.IsNull() {
			*pqOnBackpressure20 = shared.OutputElasticQueueFullBehavior(r.OutputElastic.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure20 = nil
		}
		pqMode20 := new(shared.OutputElasticMode)
		if !r.OutputElastic.PqMode.IsUnknown() && !r.OutputElastic.PqMode.IsNull() {
			*pqMode20 = shared.OutputElasticMode(r.OutputElastic.PqMode.ValueString())
		} else {
			pqMode20 = nil
		}
		var pqControls20 *shared.OutputElasticPqControls
		if r.OutputElastic.PqControls != nil {
			pqControls20 = &shared.OutputElasticPqControls{}
		}
		outputElastic = &shared.OutputElastic{
			ID:                            id27,
			Type:                          typeVar27,
			Pipeline:                      pipeline27,
			SystemFields:                  systemFields27,
			Environment:                   environment27,
			Streamtags:                    streamtags27,
			LoadBalanced:                  loadBalanced4,
			Index:                         index,
			DocType:                       docType,
			Concurrency:                   concurrency11,
			MaxPayloadSizeKB:              maxPayloadSizeKb10,
			MaxPayloadEvents:              maxPayloadEvents10,
			Compress:                      compress15,
			RejectUnauthorized:            rejectUnauthorized26,
			TimeoutSec:                    timeoutSec10,
			FlushPeriodSec:                flushPeriodSec16,
			ExtraHTTPHeaders:              extraHTTPHeaders8,
			FailedRequestLoggingMode:      failedRequestLoggingMode8,
			SafeHeaders:                   safeHeaders8,
			ResponseRetrySettings:         responseRetrySettings9,
			TimeoutRetrySettings:          timeoutRetrySettings9,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader9,
			ExtraParams:                   extraParams,
			Auth:                          auth3,
			ElasticVersion:                elasticVersion,
			ElasticPipeline:               elasticPipeline,
			IncludeDocID:                  includeDocID,
			WriteAction:                   writeAction,
			RetryPartialErrors:            retryPartialErrors,
			OnBackpressure:                onBackpressure25,
			Description:                   description26,
			URL:                           url5,
			UseRoundRobinDNS:              useRoundRobinDns9,
			ExcludeSelf:                   excludeSelf4,
			Urls:                          urls2,
			DNSResolvePeriodSec:           dnsResolvePeriodSec4,
			LoadBalanceStatsPeriodSec:     loadBalanceStatsPeriodSec4,
			PqMaxFileSize:                 pqMaxFileSize20,
			PqMaxSize:                     pqMaxSize20,
			PqPath:                        pqPath20,
			PqCompress:                    pqCompress20,
			PqOnBackpressure:              pqOnBackpressure20,
			PqMode:                        pqMode20,
			PqControls:                    pqControls20,
		}
	}
	if outputElastic != nil {
		out = shared.Output{
			OutputElastic: outputElastic,
		}
	}
	var outputElasticCloud *shared.OutputElasticCloud
	if r.OutputElasticCloud != nil {
		id28 := new(string)
		if !r.OutputElasticCloud.ID.IsUnknown() && !r.OutputElasticCloud.ID.IsNull() {
			*id28 = r.OutputElasticCloud.ID.ValueString()
		} else {
			id28 = nil
		}
		typeVar28 := new(shared.OutputElasticCloudType)
		if !r.OutputElasticCloud.Type.IsUnknown() && !r.OutputElasticCloud.Type.IsNull() {
			*typeVar28 = shared.OutputElasticCloudType(r.OutputElasticCloud.Type.ValueString())
		} else {
			typeVar28 = nil
		}
		pipeline28 := new(string)
		if !r.OutputElasticCloud.Pipeline.IsUnknown() && !r.OutputElasticCloud.Pipeline.IsNull() {
			*pipeline28 = r.OutputElasticCloud.Pipeline.ValueString()
		} else {
			pipeline28 = nil
		}
		systemFields28 := make([]string, 0, len(r.OutputElasticCloud.SystemFields))
		for _, systemFieldsItem28 := range r.OutputElasticCloud.SystemFields {
			systemFields28 = append(systemFields28, systemFieldsItem28.ValueString())
		}
		environment28 := new(string)
		if !r.OutputElasticCloud.Environment.IsUnknown() && !r.OutputElasticCloud.Environment.IsNull() {
			*environment28 = r.OutputElasticCloud.Environment.ValueString()
		} else {
			environment28 = nil
		}
		streamtags28 := make([]string, 0, len(r.OutputElasticCloud.Streamtags))
		for _, streamtagsItem28 := range r.OutputElasticCloud.Streamtags {
			streamtags28 = append(streamtags28, streamtagsItem28.ValueString())
		}
		var url7 string
		url7 = r.OutputElasticCloud.URL.ValueString()

		var index1 string
		index1 = r.OutputElasticCloud.Index.ValueString()

		concurrency12 := new(float64)
		if !r.OutputElasticCloud.Concurrency.IsUnknown() && !r.OutputElasticCloud.Concurrency.IsNull() {
			*concurrency12 = r.OutputElasticCloud.Concurrency.ValueFloat64()
		} else {
			concurrency12 = nil
		}
		maxPayloadSizeKb11 := new(float64)
		if !r.OutputElasticCloud.MaxPayloadSizeKB.IsUnknown() && !r.OutputElasticCloud.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb11 = r.OutputElasticCloud.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb11 = nil
		}
		maxPayloadEvents11 := new(float64)
		if !r.OutputElasticCloud.MaxPayloadEvents.IsUnknown() && !r.OutputElasticCloud.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents11 = r.OutputElasticCloud.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents11 = nil
		}
		compress16 := new(bool)
		if !r.OutputElasticCloud.Compress.IsUnknown() && !r.OutputElasticCloud.Compress.IsNull() {
			*compress16 = r.OutputElasticCloud.Compress.ValueBool()
		} else {
			compress16 = nil
		}
		rejectUnauthorized27 := new(bool)
		if !r.OutputElasticCloud.RejectUnauthorized.IsUnknown() && !r.OutputElasticCloud.RejectUnauthorized.IsNull() {
			*rejectUnauthorized27 = r.OutputElasticCloud.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized27 = nil
		}
		timeoutSec11 := new(float64)
		if !r.OutputElasticCloud.TimeoutSec.IsUnknown() && !r.OutputElasticCloud.TimeoutSec.IsNull() {
			*timeoutSec11 = r.OutputElasticCloud.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec11 = nil
		}
		flushPeriodSec17 := new(float64)
		if !r.OutputElasticCloud.FlushPeriodSec.IsUnknown() && !r.OutputElasticCloud.FlushPeriodSec.IsNull() {
			*flushPeriodSec17 = r.OutputElasticCloud.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec17 = nil
		}
		extraHTTPHeaders9 := make([]shared.OutputElasticCloudExtraHTTPHeaders, 0, len(r.OutputElasticCloud.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem9 := range r.OutputElasticCloud.ExtraHTTPHeaders {
			name12 := new(string)
			if !extraHTTPHeadersItem9.Name.IsUnknown() && !extraHTTPHeadersItem9.Name.IsNull() {
				*name12 = extraHTTPHeadersItem9.Name.ValueString()
			} else {
				name12 = nil
			}
			var value20 string
			value20 = extraHTTPHeadersItem9.Value.ValueString()

			extraHTTPHeaders9 = append(extraHTTPHeaders9, shared.OutputElasticCloudExtraHTTPHeaders{
				Name:  name12,
				Value: value20,
			})
		}
		failedRequestLoggingMode9 := new(shared.OutputElasticCloudFailedRequestLoggingMode)
		if !r.OutputElasticCloud.FailedRequestLoggingMode.IsUnknown() && !r.OutputElasticCloud.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode9 = shared.OutputElasticCloudFailedRequestLoggingMode(r.OutputElasticCloud.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode9 = nil
		}
		safeHeaders9 := make([]string, 0, len(r.OutputElasticCloud.SafeHeaders))
		for _, safeHeadersItem9 := range r.OutputElasticCloud.SafeHeaders {
			safeHeaders9 = append(safeHeaders9, safeHeadersItem9.ValueString())
		}
		extraParams1 := make([]shared.OutputElasticCloudExtraParams, 0, len(r.OutputElasticCloud.ExtraParams))
		for _, extraParamsItem1 := range r.OutputElasticCloud.ExtraParams {
			var name13 string
			name13 = extraParamsItem1.Name.ValueString()

			var value21 string
			value21 = extraParamsItem1.Value.ValueString()

			extraParams1 = append(extraParams1, shared.OutputElasticCloudExtraParams{
				Name:  name13,
				Value: value21,
			})
		}
		var auth4 *shared.OutputElasticCloudAuth
		if r.OutputElasticCloud.Auth != nil {
			disabled22 := new(bool)
			if !r.OutputElasticCloud.Auth.Disabled.IsUnknown() && !r.OutputElasticCloud.Auth.Disabled.IsNull() {
				*disabled22 = r.OutputElasticCloud.Auth.Disabled.ValueBool()
			} else {
				disabled22 = nil
			}
			authType14 := new(shared.OutputElasticCloudAuthenticationMethod)
			if !r.OutputElasticCloud.Auth.AuthType.IsUnknown() && !r.OutputElasticCloud.Auth.AuthType.IsNull() {
				*authType14 = shared.OutputElasticCloudAuthenticationMethod(r.OutputElasticCloud.Auth.AuthType.ValueString())
			} else {
				authType14 = nil
			}
			auth4 = &shared.OutputElasticCloudAuth{
				Disabled: disabled22,
				AuthType: authType14,
			}
		}
		elasticPipeline1 := new(string)
		if !r.OutputElasticCloud.ElasticPipeline.IsUnknown() && !r.OutputElasticCloud.ElasticPipeline.IsNull() {
			*elasticPipeline1 = r.OutputElasticCloud.ElasticPipeline.ValueString()
		} else {
			elasticPipeline1 = nil
		}
		includeDocId1 := new(bool)
		if !r.OutputElasticCloud.IncludeDocID.IsUnknown() && !r.OutputElasticCloud.IncludeDocID.IsNull() {
			*includeDocId1 = r.OutputElasticCloud.IncludeDocID.ValueBool()
		} else {
			includeDocId1 = nil
		}
		responseRetrySettings10 := make([]shared.OutputElasticCloudResponseRetrySettings, 0, len(r.OutputElasticCloud.ResponseRetrySettings))
		for _, responseRetrySettingsItem10 := range r.OutputElasticCloud.ResponseRetrySettings {
			var httpStatus10 float64
			httpStatus10 = responseRetrySettingsItem10.HTTPStatus.ValueFloat64()

			initialBackoff24 := new(float64)
			if !responseRetrySettingsItem10.InitialBackoff.IsUnknown() && !responseRetrySettingsItem10.InitialBackoff.IsNull() {
				*initialBackoff24 = responseRetrySettingsItem10.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff24 = nil
			}
			backoffRate24 := new(float64)
			if !responseRetrySettingsItem10.BackoffRate.IsUnknown() && !responseRetrySettingsItem10.BackoffRate.IsNull() {
				*backoffRate24 = responseRetrySettingsItem10.BackoffRate.ValueFloat64()
			} else {
				backoffRate24 = nil
			}
			maxBackoff20 := new(float64)
			if !responseRetrySettingsItem10.MaxBackoff.IsUnknown() && !responseRetrySettingsItem10.MaxBackoff.IsNull() {
				*maxBackoff20 = responseRetrySettingsItem10.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff20 = nil
			}
			responseRetrySettings10 = append(responseRetrySettings10, shared.OutputElasticCloudResponseRetrySettings{
				HTTPStatus:     httpStatus10,
				InitialBackoff: initialBackoff24,
				BackoffRate:    backoffRate24,
				MaxBackoff:     maxBackoff20,
			})
		}
		var timeoutRetrySettings10 *shared.OutputElasticCloudTimeoutRetrySettings
		if r.OutputElasticCloud.TimeoutRetrySettings != nil {
			timeoutRetry10 := new(bool)
			if !r.OutputElasticCloud.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputElasticCloud.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry10 = r.OutputElasticCloud.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry10 = nil
			}
			initialBackoff25 := new(float64)
			if !r.OutputElasticCloud.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputElasticCloud.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff25 = r.OutputElasticCloud.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff25 = nil
			}
			backoffRate25 := new(float64)
			if !r.OutputElasticCloud.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputElasticCloud.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate25 = r.OutputElasticCloud.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate25 = nil
			}
			maxBackoff21 := new(float64)
			if !r.OutputElasticCloud.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputElasticCloud.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff21 = r.OutputElasticCloud.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff21 = nil
			}
			timeoutRetrySettings10 = &shared.OutputElasticCloudTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry10,
				InitialBackoff: initialBackoff25,
				BackoffRate:    backoffRate25,
				MaxBackoff:     maxBackoff21,
			}
		}
		responseHonorRetryAfterHeader10 := new(bool)
		if !r.OutputElasticCloud.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputElasticCloud.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader10 = r.OutputElasticCloud.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader10 = nil
		}
		onBackpressure26 := new(shared.OutputElasticCloudBackpressureBehavior)
		if !r.OutputElasticCloud.OnBackpressure.IsUnknown() && !r.OutputElasticCloud.OnBackpressure.IsNull() {
			*onBackpressure26 = shared.OutputElasticCloudBackpressureBehavior(r.OutputElasticCloud.OnBackpressure.ValueString())
		} else {
			onBackpressure26 = nil
		}
		description27 := new(string)
		if !r.OutputElasticCloud.Description.IsUnknown() && !r.OutputElasticCloud.Description.IsNull() {
			*description27 = r.OutputElasticCloud.Description.ValueString()
		} else {
			description27 = nil
		}
		pqMaxFileSize21 := new(string)
		if !r.OutputElasticCloud.PqMaxFileSize.IsUnknown() && !r.OutputElasticCloud.PqMaxFileSize.IsNull() {
			*pqMaxFileSize21 = r.OutputElasticCloud.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize21 = nil
		}
		pqMaxSize21 := new(string)
		if !r.OutputElasticCloud.PqMaxSize.IsUnknown() && !r.OutputElasticCloud.PqMaxSize.IsNull() {
			*pqMaxSize21 = r.OutputElasticCloud.PqMaxSize.ValueString()
		} else {
			pqMaxSize21 = nil
		}
		pqPath21 := new(string)
		if !r.OutputElasticCloud.PqPath.IsUnknown() && !r.OutputElasticCloud.PqPath.IsNull() {
			*pqPath21 = r.OutputElasticCloud.PqPath.ValueString()
		} else {
			pqPath21 = nil
		}
		pqCompress21 := new(shared.OutputElasticCloudCompression)
		if !r.OutputElasticCloud.PqCompress.IsUnknown() && !r.OutputElasticCloud.PqCompress.IsNull() {
			*pqCompress21 = shared.OutputElasticCloudCompression(r.OutputElasticCloud.PqCompress.ValueString())
		} else {
			pqCompress21 = nil
		}
		pqOnBackpressure21 := new(shared.OutputElasticCloudQueueFullBehavior)
		if !r.OutputElasticCloud.PqOnBackpressure.IsUnknown() && !r.OutputElasticCloud.PqOnBackpressure.IsNull() {
			*pqOnBackpressure21 = shared.OutputElasticCloudQueueFullBehavior(r.OutputElasticCloud.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure21 = nil
		}
		pqMode21 := new(shared.OutputElasticCloudMode)
		if !r.OutputElasticCloud.PqMode.IsUnknown() && !r.OutputElasticCloud.PqMode.IsNull() {
			*pqMode21 = shared.OutputElasticCloudMode(r.OutputElasticCloud.PqMode.ValueString())
		} else {
			pqMode21 = nil
		}
		var pqControls21 *shared.OutputElasticCloudPqControls
		if r.OutputElasticCloud.PqControls != nil {
			pqControls21 = &shared.OutputElasticCloudPqControls{}
		}
		outputElasticCloud = &shared.OutputElasticCloud{
			ID:                            id28,
			Type:                          typeVar28,
			Pipeline:                      pipeline28,
			SystemFields:                  systemFields28,
			Environment:                   environment28,
			Streamtags:                    streamtags28,
			URL:                           url7,
			Index:                         index1,
			Concurrency:                   concurrency12,
			MaxPayloadSizeKB:              maxPayloadSizeKb11,
			MaxPayloadEvents:              maxPayloadEvents11,
			Compress:                      compress16,
			RejectUnauthorized:            rejectUnauthorized27,
			TimeoutSec:                    timeoutSec11,
			FlushPeriodSec:                flushPeriodSec17,
			ExtraHTTPHeaders:              extraHTTPHeaders9,
			FailedRequestLoggingMode:      failedRequestLoggingMode9,
			SafeHeaders:                   safeHeaders9,
			ExtraParams:                   extraParams1,
			Auth:                          auth4,
			ElasticPipeline:               elasticPipeline1,
			IncludeDocID:                  includeDocId1,
			ResponseRetrySettings:         responseRetrySettings10,
			TimeoutRetrySettings:          timeoutRetrySettings10,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader10,
			OnBackpressure:                onBackpressure26,
			Description:                   description27,
			PqMaxFileSize:                 pqMaxFileSize21,
			PqMaxSize:                     pqMaxSize21,
			PqPath:                        pqPath21,
			PqCompress:                    pqCompress21,
			PqOnBackpressure:              pqOnBackpressure21,
			PqMode:                        pqMode21,
			PqControls:                    pqControls21,
		}
	}
	if outputElasticCloud != nil {
		out = shared.Output{
			OutputElasticCloud: outputElasticCloud,
		}
	}
	var outputNewrelic *shared.OutputNewrelic
	if r.OutputNewrelic != nil {
		var id29 string
		id29 = r.OutputNewrelic.ID.ValueString()

		typeVar29 := shared.OutputNewrelicType(r.OutputNewrelic.Type.ValueString())
		pipeline29 := new(string)
		if !r.OutputNewrelic.Pipeline.IsUnknown() && !r.OutputNewrelic.Pipeline.IsNull() {
			*pipeline29 = r.OutputNewrelic.Pipeline.ValueString()
		} else {
			pipeline29 = nil
		}
		systemFields29 := make([]string, 0, len(r.OutputNewrelic.SystemFields))
		for _, systemFieldsItem29 := range r.OutputNewrelic.SystemFields {
			systemFields29 = append(systemFields29, systemFieldsItem29.ValueString())
		}
		environment29 := new(string)
		if !r.OutputNewrelic.Environment.IsUnknown() && !r.OutputNewrelic.Environment.IsNull() {
			*environment29 = r.OutputNewrelic.Environment.ValueString()
		} else {
			environment29 = nil
		}
		streamtags29 := make([]string, 0, len(r.OutputNewrelic.Streamtags))
		for _, streamtagsItem29 := range r.OutputNewrelic.Streamtags {
			streamtags29 = append(streamtags29, streamtagsItem29.ValueString())
		}
		region7 := new(shared.OutputNewrelicRegion)
		if !r.OutputNewrelic.Region.IsUnknown() && !r.OutputNewrelic.Region.IsNull() {
			*region7 = shared.OutputNewrelicRegion(r.OutputNewrelic.Region.ValueString())
		} else {
			region7 = nil
		}
		logType3 := new(string)
		if !r.OutputNewrelic.LogType.IsUnknown() && !r.OutputNewrelic.LogType.IsNull() {
			*logType3 = r.OutputNewrelic.LogType.ValueString()
		} else {
			logType3 = nil
		}
		messageField := new(string)
		if !r.OutputNewrelic.MessageField.IsUnknown() && !r.OutputNewrelic.MessageField.IsNull() {
			*messageField = r.OutputNewrelic.MessageField.ValueString()
		} else {
			messageField = nil
		}
		metadata := make([]shared.OutputNewrelicMetadata, 0, len(r.OutputNewrelic.Metadata))
		for _, metadataItem := range r.OutputNewrelic.Metadata {
			name14 := shared.FieldName(metadataItem.Name.ValueString())
			var value22 string
			value22 = metadataItem.Value.ValueString()

			metadata = append(metadata, shared.OutputNewrelicMetadata{
				Name:  name14,
				Value: value22,
			})
		}
		concurrency13 := new(float64)
		if !r.OutputNewrelic.Concurrency.IsUnknown() && !r.OutputNewrelic.Concurrency.IsNull() {
			*concurrency13 = r.OutputNewrelic.Concurrency.ValueFloat64()
		} else {
			concurrency13 = nil
		}
		maxPayloadSizeKb12 := new(float64)
		if !r.OutputNewrelic.MaxPayloadSizeKB.IsUnknown() && !r.OutputNewrelic.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb12 = r.OutputNewrelic.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb12 = nil
		}
		maxPayloadEvents12 := new(float64)
		if !r.OutputNewrelic.MaxPayloadEvents.IsUnknown() && !r.OutputNewrelic.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents12 = r.OutputNewrelic.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents12 = nil
		}
		compress17 := new(bool)
		if !r.OutputNewrelic.Compress.IsUnknown() && !r.OutputNewrelic.Compress.IsNull() {
			*compress17 = r.OutputNewrelic.Compress.ValueBool()
		} else {
			compress17 = nil
		}
		rejectUnauthorized28 := new(bool)
		if !r.OutputNewrelic.RejectUnauthorized.IsUnknown() && !r.OutputNewrelic.RejectUnauthorized.IsNull() {
			*rejectUnauthorized28 = r.OutputNewrelic.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized28 = nil
		}
		timeoutSec12 := new(float64)
		if !r.OutputNewrelic.TimeoutSec.IsUnknown() && !r.OutputNewrelic.TimeoutSec.IsNull() {
			*timeoutSec12 = r.OutputNewrelic.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec12 = nil
		}
		flushPeriodSec18 := new(float64)
		if !r.OutputNewrelic.FlushPeriodSec.IsUnknown() && !r.OutputNewrelic.FlushPeriodSec.IsNull() {
			*flushPeriodSec18 = r.OutputNewrelic.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec18 = nil
		}
		extraHTTPHeaders10 := make([]shared.OutputNewrelicExtraHTTPHeaders, 0, len(r.OutputNewrelic.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem10 := range r.OutputNewrelic.ExtraHTTPHeaders {
			name15 := new(string)
			if !extraHTTPHeadersItem10.Name.IsUnknown() && !extraHTTPHeadersItem10.Name.IsNull() {
				*name15 = extraHTTPHeadersItem10.Name.ValueString()
			} else {
				name15 = nil
			}
			var value23 string
			value23 = extraHTTPHeadersItem10.Value.ValueString()

			extraHTTPHeaders10 = append(extraHTTPHeaders10, shared.OutputNewrelicExtraHTTPHeaders{
				Name:  name15,
				Value: value23,
			})
		}
		useRoundRobinDns10 := new(bool)
		if !r.OutputNewrelic.UseRoundRobinDNS.IsUnknown() && !r.OutputNewrelic.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns10 = r.OutputNewrelic.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns10 = nil
		}
		failedRequestLoggingMode10 := new(shared.OutputNewrelicFailedRequestLoggingMode)
		if !r.OutputNewrelic.FailedRequestLoggingMode.IsUnknown() && !r.OutputNewrelic.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode10 = shared.OutputNewrelicFailedRequestLoggingMode(r.OutputNewrelic.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode10 = nil
		}
		safeHeaders10 := make([]string, 0, len(r.OutputNewrelic.SafeHeaders))
		for _, safeHeadersItem10 := range r.OutputNewrelic.SafeHeaders {
			safeHeaders10 = append(safeHeaders10, safeHeadersItem10.ValueString())
		}
		responseRetrySettings11 := make([]shared.OutputNewrelicResponseRetrySettings, 0, len(r.OutputNewrelic.ResponseRetrySettings))
		for _, responseRetrySettingsItem11 := range r.OutputNewrelic.ResponseRetrySettings {
			var httpStatus11 float64
			httpStatus11 = responseRetrySettingsItem11.HTTPStatus.ValueFloat64()

			initialBackoff26 := new(float64)
			if !responseRetrySettingsItem11.InitialBackoff.IsUnknown() && !responseRetrySettingsItem11.InitialBackoff.IsNull() {
				*initialBackoff26 = responseRetrySettingsItem11.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff26 = nil
			}
			backoffRate26 := new(float64)
			if !responseRetrySettingsItem11.BackoffRate.IsUnknown() && !responseRetrySettingsItem11.BackoffRate.IsNull() {
				*backoffRate26 = responseRetrySettingsItem11.BackoffRate.ValueFloat64()
			} else {
				backoffRate26 = nil
			}
			maxBackoff22 := new(float64)
			if !responseRetrySettingsItem11.MaxBackoff.IsUnknown() && !responseRetrySettingsItem11.MaxBackoff.IsNull() {
				*maxBackoff22 = responseRetrySettingsItem11.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff22 = nil
			}
			responseRetrySettings11 = append(responseRetrySettings11, shared.OutputNewrelicResponseRetrySettings{
				HTTPStatus:     httpStatus11,
				InitialBackoff: initialBackoff26,
				BackoffRate:    backoffRate26,
				MaxBackoff:     maxBackoff22,
			})
		}
		var timeoutRetrySettings11 *shared.OutputNewrelicTimeoutRetrySettings
		if r.OutputNewrelic.TimeoutRetrySettings != nil {
			timeoutRetry11 := new(bool)
			if !r.OutputNewrelic.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputNewrelic.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry11 = r.OutputNewrelic.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry11 = nil
			}
			initialBackoff27 := new(float64)
			if !r.OutputNewrelic.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputNewrelic.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff27 = r.OutputNewrelic.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff27 = nil
			}
			backoffRate27 := new(float64)
			if !r.OutputNewrelic.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputNewrelic.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate27 = r.OutputNewrelic.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate27 = nil
			}
			maxBackoff23 := new(float64)
			if !r.OutputNewrelic.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputNewrelic.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff23 = r.OutputNewrelic.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff23 = nil
			}
			timeoutRetrySettings11 = &shared.OutputNewrelicTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry11,
				InitialBackoff: initialBackoff27,
				BackoffRate:    backoffRate27,
				MaxBackoff:     maxBackoff23,
			}
		}
		responseHonorRetryAfterHeader11 := new(bool)
		if !r.OutputNewrelic.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputNewrelic.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader11 = r.OutputNewrelic.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader11 = nil
		}
		onBackpressure27 := new(shared.OutputNewrelicBackpressureBehavior)
		if !r.OutputNewrelic.OnBackpressure.IsUnknown() && !r.OutputNewrelic.OnBackpressure.IsNull() {
			*onBackpressure27 = shared.OutputNewrelicBackpressureBehavior(r.OutputNewrelic.OnBackpressure.ValueString())
		} else {
			onBackpressure27 = nil
		}
		authType15 := new(shared.OutputNewrelicAuthenticationMethod)
		if !r.OutputNewrelic.AuthType.IsUnknown() && !r.OutputNewrelic.AuthType.IsNull() {
			*authType15 = shared.OutputNewrelicAuthenticationMethod(r.OutputNewrelic.AuthType.ValueString())
		} else {
			authType15 = nil
		}
		totalMemoryLimitKb4 := new(float64)
		if !r.OutputNewrelic.TotalMemoryLimitKB.IsUnknown() && !r.OutputNewrelic.TotalMemoryLimitKB.IsNull() {
			*totalMemoryLimitKb4 = r.OutputNewrelic.TotalMemoryLimitKB.ValueFloat64()
		} else {
			totalMemoryLimitKb4 = nil
		}
		description28 := new(string)
		if !r.OutputNewrelic.Description.IsUnknown() && !r.OutputNewrelic.Description.IsNull() {
			*description28 = r.OutputNewrelic.Description.ValueString()
		} else {
			description28 = nil
		}
		customURL := new(string)
		if !r.OutputNewrelic.CustomURL.IsUnknown() && !r.OutputNewrelic.CustomURL.IsNull() {
			*customURL = r.OutputNewrelic.CustomURL.ValueString()
		} else {
			customURL = nil
		}
		pqMaxFileSize22 := new(string)
		if !r.OutputNewrelic.PqMaxFileSize.IsUnknown() && !r.OutputNewrelic.PqMaxFileSize.IsNull() {
			*pqMaxFileSize22 = r.OutputNewrelic.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize22 = nil
		}
		pqMaxSize22 := new(string)
		if !r.OutputNewrelic.PqMaxSize.IsUnknown() && !r.OutputNewrelic.PqMaxSize.IsNull() {
			*pqMaxSize22 = r.OutputNewrelic.PqMaxSize.ValueString()
		} else {
			pqMaxSize22 = nil
		}
		pqPath22 := new(string)
		if !r.OutputNewrelic.PqPath.IsUnknown() && !r.OutputNewrelic.PqPath.IsNull() {
			*pqPath22 = r.OutputNewrelic.PqPath.ValueString()
		} else {
			pqPath22 = nil
		}
		pqCompress22 := new(shared.OutputNewrelicCompression)
		if !r.OutputNewrelic.PqCompress.IsUnknown() && !r.OutputNewrelic.PqCompress.IsNull() {
			*pqCompress22 = shared.OutputNewrelicCompression(r.OutputNewrelic.PqCompress.ValueString())
		} else {
			pqCompress22 = nil
		}
		pqOnBackpressure22 := new(shared.OutputNewrelicQueueFullBehavior)
		if !r.OutputNewrelic.PqOnBackpressure.IsUnknown() && !r.OutputNewrelic.PqOnBackpressure.IsNull() {
			*pqOnBackpressure22 = shared.OutputNewrelicQueueFullBehavior(r.OutputNewrelic.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure22 = nil
		}
		pqMode22 := new(shared.OutputNewrelicMode)
		if !r.OutputNewrelic.PqMode.IsUnknown() && !r.OutputNewrelic.PqMode.IsNull() {
			*pqMode22 = shared.OutputNewrelicMode(r.OutputNewrelic.PqMode.ValueString())
		} else {
			pqMode22 = nil
		}
		var pqControls22 *shared.OutputNewrelicPqControls
		if r.OutputNewrelic.PqControls != nil {
			pqControls22 = &shared.OutputNewrelicPqControls{}
		}
		apiKey1 := new(string)
		if !r.OutputNewrelic.APIKey.IsUnknown() && !r.OutputNewrelic.APIKey.IsNull() {
			*apiKey1 = r.OutputNewrelic.APIKey.ValueString()
		} else {
			apiKey1 = nil
		}
		textSecret11 := new(string)
		if !r.OutputNewrelic.TextSecret.IsUnknown() && !r.OutputNewrelic.TextSecret.IsNull() {
			*textSecret11 = r.OutputNewrelic.TextSecret.ValueString()
		} else {
			textSecret11 = nil
		}
		outputNewrelic = &shared.OutputNewrelic{
			ID:                            id29,
			Type:                          typeVar29,
			Pipeline:                      pipeline29,
			SystemFields:                  systemFields29,
			Environment:                   environment29,
			Streamtags:                    streamtags29,
			Region:                        region7,
			LogType:                       logType3,
			MessageField:                  messageField,
			Metadata:                      metadata,
			Concurrency:                   concurrency13,
			MaxPayloadSizeKB:              maxPayloadSizeKb12,
			MaxPayloadEvents:              maxPayloadEvents12,
			Compress:                      compress17,
			RejectUnauthorized:            rejectUnauthorized28,
			TimeoutSec:                    timeoutSec12,
			FlushPeriodSec:                flushPeriodSec18,
			ExtraHTTPHeaders:              extraHTTPHeaders10,
			UseRoundRobinDNS:              useRoundRobinDns10,
			FailedRequestLoggingMode:      failedRequestLoggingMode10,
			SafeHeaders:                   safeHeaders10,
			ResponseRetrySettings:         responseRetrySettings11,
			TimeoutRetrySettings:          timeoutRetrySettings11,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader11,
			OnBackpressure:                onBackpressure27,
			AuthType:                      authType15,
			TotalMemoryLimitKB:            totalMemoryLimitKb4,
			Description:                   description28,
			CustomURL:                     customURL,
			PqMaxFileSize:                 pqMaxFileSize22,
			PqMaxSize:                     pqMaxSize22,
			PqPath:                        pqPath22,
			PqCompress:                    pqCompress22,
			PqOnBackpressure:              pqOnBackpressure22,
			PqMode:                        pqMode22,
			PqControls:                    pqControls22,
			APIKey:                        apiKey1,
			TextSecret:                    textSecret11,
		}
	}
	if outputNewrelic != nil {
		out = shared.Output{
			OutputNewrelic: outputNewrelic,
		}
	}
	var outputNewrelicEvents *shared.OutputNewrelicEvents
	if r.OutputNewrelicEvents != nil {
		id30 := new(string)
		if !r.OutputNewrelicEvents.ID.IsUnknown() && !r.OutputNewrelicEvents.ID.IsNull() {
			*id30 = r.OutputNewrelicEvents.ID.ValueString()
		} else {
			id30 = nil
		}
		typeVar30 := new(shared.OutputNewrelicEventsType)
		if !r.OutputNewrelicEvents.Type.IsUnknown() && !r.OutputNewrelicEvents.Type.IsNull() {
			*typeVar30 = shared.OutputNewrelicEventsType(r.OutputNewrelicEvents.Type.ValueString())
		} else {
			typeVar30 = nil
		}
		pipeline30 := new(string)
		if !r.OutputNewrelicEvents.Pipeline.IsUnknown() && !r.OutputNewrelicEvents.Pipeline.IsNull() {
			*pipeline30 = r.OutputNewrelicEvents.Pipeline.ValueString()
		} else {
			pipeline30 = nil
		}
		systemFields30 := make([]string, 0, len(r.OutputNewrelicEvents.SystemFields))
		for _, systemFieldsItem30 := range r.OutputNewrelicEvents.SystemFields {
			systemFields30 = append(systemFields30, systemFieldsItem30.ValueString())
		}
		environment30 := new(string)
		if !r.OutputNewrelicEvents.Environment.IsUnknown() && !r.OutputNewrelicEvents.Environment.IsNull() {
			*environment30 = r.OutputNewrelicEvents.Environment.ValueString()
		} else {
			environment30 = nil
		}
		streamtags30 := make([]string, 0, len(r.OutputNewrelicEvents.Streamtags))
		for _, streamtagsItem30 := range r.OutputNewrelicEvents.Streamtags {
			streamtags30 = append(streamtags30, streamtagsItem30.ValueString())
		}
		region8 := new(shared.OutputNewrelicEventsRegion)
		if !r.OutputNewrelicEvents.Region.IsUnknown() && !r.OutputNewrelicEvents.Region.IsNull() {
			*region8 = shared.OutputNewrelicEventsRegion(r.OutputNewrelicEvents.Region.ValueString())
		} else {
			region8 = nil
		}
		var accountID string
		accountID = r.OutputNewrelicEvents.AccountID.ValueString()

		var eventType string
		eventType = r.OutputNewrelicEvents.EventType.ValueString()

		concurrency14 := new(float64)
		if !r.OutputNewrelicEvents.Concurrency.IsUnknown() && !r.OutputNewrelicEvents.Concurrency.IsNull() {
			*concurrency14 = r.OutputNewrelicEvents.Concurrency.ValueFloat64()
		} else {
			concurrency14 = nil
		}
		maxPayloadSizeKb13 := new(float64)
		if !r.OutputNewrelicEvents.MaxPayloadSizeKB.IsUnknown() && !r.OutputNewrelicEvents.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb13 = r.OutputNewrelicEvents.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb13 = nil
		}
		maxPayloadEvents13 := new(float64)
		if !r.OutputNewrelicEvents.MaxPayloadEvents.IsUnknown() && !r.OutputNewrelicEvents.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents13 = r.OutputNewrelicEvents.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents13 = nil
		}
		compress18 := new(bool)
		if !r.OutputNewrelicEvents.Compress.IsUnknown() && !r.OutputNewrelicEvents.Compress.IsNull() {
			*compress18 = r.OutputNewrelicEvents.Compress.ValueBool()
		} else {
			compress18 = nil
		}
		rejectUnauthorized29 := new(bool)
		if !r.OutputNewrelicEvents.RejectUnauthorized.IsUnknown() && !r.OutputNewrelicEvents.RejectUnauthorized.IsNull() {
			*rejectUnauthorized29 = r.OutputNewrelicEvents.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized29 = nil
		}
		timeoutSec13 := new(float64)
		if !r.OutputNewrelicEvents.TimeoutSec.IsUnknown() && !r.OutputNewrelicEvents.TimeoutSec.IsNull() {
			*timeoutSec13 = r.OutputNewrelicEvents.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec13 = nil
		}
		flushPeriodSec19 := new(float64)
		if !r.OutputNewrelicEvents.FlushPeriodSec.IsUnknown() && !r.OutputNewrelicEvents.FlushPeriodSec.IsNull() {
			*flushPeriodSec19 = r.OutputNewrelicEvents.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec19 = nil
		}
		extraHTTPHeaders11 := make([]shared.OutputNewrelicEventsExtraHTTPHeaders, 0, len(r.OutputNewrelicEvents.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem11 := range r.OutputNewrelicEvents.ExtraHTTPHeaders {
			name16 := new(string)
			if !extraHTTPHeadersItem11.Name.IsUnknown() && !extraHTTPHeadersItem11.Name.IsNull() {
				*name16 = extraHTTPHeadersItem11.Name.ValueString()
			} else {
				name16 = nil
			}
			var value24 string
			value24 = extraHTTPHeadersItem11.Value.ValueString()

			extraHTTPHeaders11 = append(extraHTTPHeaders11, shared.OutputNewrelicEventsExtraHTTPHeaders{
				Name:  name16,
				Value: value24,
			})
		}
		useRoundRobinDns11 := new(bool)
		if !r.OutputNewrelicEvents.UseRoundRobinDNS.IsUnknown() && !r.OutputNewrelicEvents.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns11 = r.OutputNewrelicEvents.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns11 = nil
		}
		failedRequestLoggingMode11 := new(shared.OutputNewrelicEventsFailedRequestLoggingMode)
		if !r.OutputNewrelicEvents.FailedRequestLoggingMode.IsUnknown() && !r.OutputNewrelicEvents.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode11 = shared.OutputNewrelicEventsFailedRequestLoggingMode(r.OutputNewrelicEvents.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode11 = nil
		}
		safeHeaders11 := make([]string, 0, len(r.OutputNewrelicEvents.SafeHeaders))
		for _, safeHeadersItem11 := range r.OutputNewrelicEvents.SafeHeaders {
			safeHeaders11 = append(safeHeaders11, safeHeadersItem11.ValueString())
		}
		responseRetrySettings12 := make([]shared.OutputNewrelicEventsResponseRetrySettings, 0, len(r.OutputNewrelicEvents.ResponseRetrySettings))
		for _, responseRetrySettingsItem12 := range r.OutputNewrelicEvents.ResponseRetrySettings {
			var httpStatus12 float64
			httpStatus12 = responseRetrySettingsItem12.HTTPStatus.ValueFloat64()

			initialBackoff28 := new(float64)
			if !responseRetrySettingsItem12.InitialBackoff.IsUnknown() && !responseRetrySettingsItem12.InitialBackoff.IsNull() {
				*initialBackoff28 = responseRetrySettingsItem12.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff28 = nil
			}
			backoffRate28 := new(float64)
			if !responseRetrySettingsItem12.BackoffRate.IsUnknown() && !responseRetrySettingsItem12.BackoffRate.IsNull() {
				*backoffRate28 = responseRetrySettingsItem12.BackoffRate.ValueFloat64()
			} else {
				backoffRate28 = nil
			}
			maxBackoff24 := new(float64)
			if !responseRetrySettingsItem12.MaxBackoff.IsUnknown() && !responseRetrySettingsItem12.MaxBackoff.IsNull() {
				*maxBackoff24 = responseRetrySettingsItem12.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff24 = nil
			}
			responseRetrySettings12 = append(responseRetrySettings12, shared.OutputNewrelicEventsResponseRetrySettings{
				HTTPStatus:     httpStatus12,
				InitialBackoff: initialBackoff28,
				BackoffRate:    backoffRate28,
				MaxBackoff:     maxBackoff24,
			})
		}
		var timeoutRetrySettings12 *shared.OutputNewrelicEventsTimeoutRetrySettings
		if r.OutputNewrelicEvents.TimeoutRetrySettings != nil {
			timeoutRetry12 := new(bool)
			if !r.OutputNewrelicEvents.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputNewrelicEvents.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry12 = r.OutputNewrelicEvents.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry12 = nil
			}
			initialBackoff29 := new(float64)
			if !r.OutputNewrelicEvents.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputNewrelicEvents.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff29 = r.OutputNewrelicEvents.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff29 = nil
			}
			backoffRate29 := new(float64)
			if !r.OutputNewrelicEvents.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputNewrelicEvents.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate29 = r.OutputNewrelicEvents.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate29 = nil
			}
			maxBackoff25 := new(float64)
			if !r.OutputNewrelicEvents.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputNewrelicEvents.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff25 = r.OutputNewrelicEvents.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff25 = nil
			}
			timeoutRetrySettings12 = &shared.OutputNewrelicEventsTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry12,
				InitialBackoff: initialBackoff29,
				BackoffRate:    backoffRate29,
				MaxBackoff:     maxBackoff25,
			}
		}
		responseHonorRetryAfterHeader12 := new(bool)
		if !r.OutputNewrelicEvents.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputNewrelicEvents.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader12 = r.OutputNewrelicEvents.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader12 = nil
		}
		onBackpressure28 := new(shared.OutputNewrelicEventsBackpressureBehavior)
		if !r.OutputNewrelicEvents.OnBackpressure.IsUnknown() && !r.OutputNewrelicEvents.OnBackpressure.IsNull() {
			*onBackpressure28 = shared.OutputNewrelicEventsBackpressureBehavior(r.OutputNewrelicEvents.OnBackpressure.ValueString())
		} else {
			onBackpressure28 = nil
		}
		authType16 := new(shared.OutputNewrelicEventsAuthenticationMethod)
		if !r.OutputNewrelicEvents.AuthType.IsUnknown() && !r.OutputNewrelicEvents.AuthType.IsNull() {
			*authType16 = shared.OutputNewrelicEventsAuthenticationMethod(r.OutputNewrelicEvents.AuthType.ValueString())
		} else {
			authType16 = nil
		}
		description29 := new(string)
		if !r.OutputNewrelicEvents.Description.IsUnknown() && !r.OutputNewrelicEvents.Description.IsNull() {
			*description29 = r.OutputNewrelicEvents.Description.ValueString()
		} else {
			description29 = nil
		}
		customUrl1 := new(string)
		if !r.OutputNewrelicEvents.CustomURL.IsUnknown() && !r.OutputNewrelicEvents.CustomURL.IsNull() {
			*customUrl1 = r.OutputNewrelicEvents.CustomURL.ValueString()
		} else {
			customUrl1 = nil
		}
		pqMaxFileSize23 := new(string)
		if !r.OutputNewrelicEvents.PqMaxFileSize.IsUnknown() && !r.OutputNewrelicEvents.PqMaxFileSize.IsNull() {
			*pqMaxFileSize23 = r.OutputNewrelicEvents.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize23 = nil
		}
		pqMaxSize23 := new(string)
		if !r.OutputNewrelicEvents.PqMaxSize.IsUnknown() && !r.OutputNewrelicEvents.PqMaxSize.IsNull() {
			*pqMaxSize23 = r.OutputNewrelicEvents.PqMaxSize.ValueString()
		} else {
			pqMaxSize23 = nil
		}
		pqPath23 := new(string)
		if !r.OutputNewrelicEvents.PqPath.IsUnknown() && !r.OutputNewrelicEvents.PqPath.IsNull() {
			*pqPath23 = r.OutputNewrelicEvents.PqPath.ValueString()
		} else {
			pqPath23 = nil
		}
		pqCompress23 := new(shared.OutputNewrelicEventsCompression)
		if !r.OutputNewrelicEvents.PqCompress.IsUnknown() && !r.OutputNewrelicEvents.PqCompress.IsNull() {
			*pqCompress23 = shared.OutputNewrelicEventsCompression(r.OutputNewrelicEvents.PqCompress.ValueString())
		} else {
			pqCompress23 = nil
		}
		pqOnBackpressure23 := new(shared.OutputNewrelicEventsQueueFullBehavior)
		if !r.OutputNewrelicEvents.PqOnBackpressure.IsUnknown() && !r.OutputNewrelicEvents.PqOnBackpressure.IsNull() {
			*pqOnBackpressure23 = shared.OutputNewrelicEventsQueueFullBehavior(r.OutputNewrelicEvents.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure23 = nil
		}
		pqMode23 := new(shared.OutputNewrelicEventsMode)
		if !r.OutputNewrelicEvents.PqMode.IsUnknown() && !r.OutputNewrelicEvents.PqMode.IsNull() {
			*pqMode23 = shared.OutputNewrelicEventsMode(r.OutputNewrelicEvents.PqMode.ValueString())
		} else {
			pqMode23 = nil
		}
		var pqControls23 *shared.OutputNewrelicEventsPqControls
		if r.OutputNewrelicEvents.PqControls != nil {
			pqControls23 = &shared.OutputNewrelicEventsPqControls{}
		}
		apiKey2 := new(string)
		if !r.OutputNewrelicEvents.APIKey.IsUnknown() && !r.OutputNewrelicEvents.APIKey.IsNull() {
			*apiKey2 = r.OutputNewrelicEvents.APIKey.ValueString()
		} else {
			apiKey2 = nil
		}
		textSecret12 := new(string)
		if !r.OutputNewrelicEvents.TextSecret.IsUnknown() && !r.OutputNewrelicEvents.TextSecret.IsNull() {
			*textSecret12 = r.OutputNewrelicEvents.TextSecret.ValueString()
		} else {
			textSecret12 = nil
		}
		outputNewrelicEvents = &shared.OutputNewrelicEvents{
			ID:                            id30,
			Type:                          typeVar30,
			Pipeline:                      pipeline30,
			SystemFields:                  systemFields30,
			Environment:                   environment30,
			Streamtags:                    streamtags30,
			Region:                        region8,
			AccountID:                     accountID,
			EventType:                     eventType,
			Concurrency:                   concurrency14,
			MaxPayloadSizeKB:              maxPayloadSizeKb13,
			MaxPayloadEvents:              maxPayloadEvents13,
			Compress:                      compress18,
			RejectUnauthorized:            rejectUnauthorized29,
			TimeoutSec:                    timeoutSec13,
			FlushPeriodSec:                flushPeriodSec19,
			ExtraHTTPHeaders:              extraHTTPHeaders11,
			UseRoundRobinDNS:              useRoundRobinDns11,
			FailedRequestLoggingMode:      failedRequestLoggingMode11,
			SafeHeaders:                   safeHeaders11,
			ResponseRetrySettings:         responseRetrySettings12,
			TimeoutRetrySettings:          timeoutRetrySettings12,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader12,
			OnBackpressure:                onBackpressure28,
			AuthType:                      authType16,
			Description:                   description29,
			CustomURL:                     customUrl1,
			PqMaxFileSize:                 pqMaxFileSize23,
			PqMaxSize:                     pqMaxSize23,
			PqPath:                        pqPath23,
			PqCompress:                    pqCompress23,
			PqOnBackpressure:              pqOnBackpressure23,
			PqMode:                        pqMode23,
			PqControls:                    pqControls23,
			APIKey:                        apiKey2,
			TextSecret:                    textSecret12,
		}
	}
	if outputNewrelicEvents != nil {
		out = shared.Output{
			OutputNewrelicEvents: outputNewrelicEvents,
		}
	}
	var outputInfluxdb *shared.OutputInfluxdb
	if r.OutputInfluxdb != nil {
		id31 := new(string)
		if !r.OutputInfluxdb.ID.IsUnknown() && !r.OutputInfluxdb.ID.IsNull() {
			*id31 = r.OutputInfluxdb.ID.ValueString()
		} else {
			id31 = nil
		}
		typeVar31 := shared.OutputInfluxdbType(r.OutputInfluxdb.Type.ValueString())
		pipeline31 := new(string)
		if !r.OutputInfluxdb.Pipeline.IsUnknown() && !r.OutputInfluxdb.Pipeline.IsNull() {
			*pipeline31 = r.OutputInfluxdb.Pipeline.ValueString()
		} else {
			pipeline31 = nil
		}
		systemFields31 := make([]string, 0, len(r.OutputInfluxdb.SystemFields))
		for _, systemFieldsItem31 := range r.OutputInfluxdb.SystemFields {
			systemFields31 = append(systemFields31, systemFieldsItem31.ValueString())
		}
		environment31 := new(string)
		if !r.OutputInfluxdb.Environment.IsUnknown() && !r.OutputInfluxdb.Environment.IsNull() {
			*environment31 = r.OutputInfluxdb.Environment.ValueString()
		} else {
			environment31 = nil
		}
		streamtags31 := make([]string, 0, len(r.OutputInfluxdb.Streamtags))
		for _, streamtagsItem31 := range r.OutputInfluxdb.Streamtags {
			streamtags31 = append(streamtags31, streamtagsItem31.ValueString())
		}
		var url8 string
		url8 = r.OutputInfluxdb.URL.ValueString()

		useV2API := new(bool)
		if !r.OutputInfluxdb.UseV2API.IsUnknown() && !r.OutputInfluxdb.UseV2API.IsNull() {
			*useV2API = r.OutputInfluxdb.UseV2API.ValueBool()
		} else {
			useV2API = nil
		}
		timestampPrecision := new(shared.TimestampPrecision)
		if !r.OutputInfluxdb.TimestampPrecision.IsUnknown() && !r.OutputInfluxdb.TimestampPrecision.IsNull() {
			*timestampPrecision = shared.TimestampPrecision(r.OutputInfluxdb.TimestampPrecision.ValueString())
		} else {
			timestampPrecision = nil
		}
		dynamicValueFieldName := new(bool)
		if !r.OutputInfluxdb.DynamicValueFieldName.IsUnknown() && !r.OutputInfluxdb.DynamicValueFieldName.IsNull() {
			*dynamicValueFieldName = r.OutputInfluxdb.DynamicValueFieldName.ValueBool()
		} else {
			dynamicValueFieldName = nil
		}
		valueFieldName := new(string)
		if !r.OutputInfluxdb.ValueFieldName.IsUnknown() && !r.OutputInfluxdb.ValueFieldName.IsNull() {
			*valueFieldName = r.OutputInfluxdb.ValueFieldName.ValueString()
		} else {
			valueFieldName = nil
		}
		concurrency15 := new(float64)
		if !r.OutputInfluxdb.Concurrency.IsUnknown() && !r.OutputInfluxdb.Concurrency.IsNull() {
			*concurrency15 = r.OutputInfluxdb.Concurrency.ValueFloat64()
		} else {
			concurrency15 = nil
		}
		maxPayloadSizeKb14 := new(float64)
		if !r.OutputInfluxdb.MaxPayloadSizeKB.IsUnknown() && !r.OutputInfluxdb.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb14 = r.OutputInfluxdb.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb14 = nil
		}
		maxPayloadEvents14 := new(float64)
		if !r.OutputInfluxdb.MaxPayloadEvents.IsUnknown() && !r.OutputInfluxdb.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents14 = r.OutputInfluxdb.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents14 = nil
		}
		compress19 := new(bool)
		if !r.OutputInfluxdb.Compress.IsUnknown() && !r.OutputInfluxdb.Compress.IsNull() {
			*compress19 = r.OutputInfluxdb.Compress.ValueBool()
		} else {
			compress19 = nil
		}
		rejectUnauthorized30 := new(bool)
		if !r.OutputInfluxdb.RejectUnauthorized.IsUnknown() && !r.OutputInfluxdb.RejectUnauthorized.IsNull() {
			*rejectUnauthorized30 = r.OutputInfluxdb.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized30 = nil
		}
		timeoutSec14 := new(float64)
		if !r.OutputInfluxdb.TimeoutSec.IsUnknown() && !r.OutputInfluxdb.TimeoutSec.IsNull() {
			*timeoutSec14 = r.OutputInfluxdb.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec14 = nil
		}
		flushPeriodSec20 := new(float64)
		if !r.OutputInfluxdb.FlushPeriodSec.IsUnknown() && !r.OutputInfluxdb.FlushPeriodSec.IsNull() {
			*flushPeriodSec20 = r.OutputInfluxdb.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec20 = nil
		}
		extraHTTPHeaders12 := make([]shared.OutputInfluxdbExtraHTTPHeaders, 0, len(r.OutputInfluxdb.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem12 := range r.OutputInfluxdb.ExtraHTTPHeaders {
			name17 := new(string)
			if !extraHTTPHeadersItem12.Name.IsUnknown() && !extraHTTPHeadersItem12.Name.IsNull() {
				*name17 = extraHTTPHeadersItem12.Name.ValueString()
			} else {
				name17 = nil
			}
			var value25 string
			value25 = extraHTTPHeadersItem12.Value.ValueString()

			extraHTTPHeaders12 = append(extraHTTPHeaders12, shared.OutputInfluxdbExtraHTTPHeaders{
				Name:  name17,
				Value: value25,
			})
		}
		useRoundRobinDns12 := new(bool)
		if !r.OutputInfluxdb.UseRoundRobinDNS.IsUnknown() && !r.OutputInfluxdb.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns12 = r.OutputInfluxdb.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns12 = nil
		}
		failedRequestLoggingMode12 := new(shared.OutputInfluxdbFailedRequestLoggingMode)
		if !r.OutputInfluxdb.FailedRequestLoggingMode.IsUnknown() && !r.OutputInfluxdb.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode12 = shared.OutputInfluxdbFailedRequestLoggingMode(r.OutputInfluxdb.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode12 = nil
		}
		safeHeaders12 := make([]string, 0, len(r.OutputInfluxdb.SafeHeaders))
		for _, safeHeadersItem12 := range r.OutputInfluxdb.SafeHeaders {
			safeHeaders12 = append(safeHeaders12, safeHeadersItem12.ValueString())
		}
		responseRetrySettings13 := make([]shared.OutputInfluxdbResponseRetrySettings, 0, len(r.OutputInfluxdb.ResponseRetrySettings))
		for _, responseRetrySettingsItem13 := range r.OutputInfluxdb.ResponseRetrySettings {
			var httpStatus13 float64
			httpStatus13 = responseRetrySettingsItem13.HTTPStatus.ValueFloat64()

			initialBackoff30 := new(float64)
			if !responseRetrySettingsItem13.InitialBackoff.IsUnknown() && !responseRetrySettingsItem13.InitialBackoff.IsNull() {
				*initialBackoff30 = responseRetrySettingsItem13.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff30 = nil
			}
			backoffRate30 := new(float64)
			if !responseRetrySettingsItem13.BackoffRate.IsUnknown() && !responseRetrySettingsItem13.BackoffRate.IsNull() {
				*backoffRate30 = responseRetrySettingsItem13.BackoffRate.ValueFloat64()
			} else {
				backoffRate30 = nil
			}
			maxBackoff26 := new(float64)
			if !responseRetrySettingsItem13.MaxBackoff.IsUnknown() && !responseRetrySettingsItem13.MaxBackoff.IsNull() {
				*maxBackoff26 = responseRetrySettingsItem13.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff26 = nil
			}
			responseRetrySettings13 = append(responseRetrySettings13, shared.OutputInfluxdbResponseRetrySettings{
				HTTPStatus:     httpStatus13,
				InitialBackoff: initialBackoff30,
				BackoffRate:    backoffRate30,
				MaxBackoff:     maxBackoff26,
			})
		}
		var timeoutRetrySettings13 *shared.OutputInfluxdbTimeoutRetrySettings
		if r.OutputInfluxdb.TimeoutRetrySettings != nil {
			timeoutRetry13 := new(bool)
			if !r.OutputInfluxdb.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputInfluxdb.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry13 = r.OutputInfluxdb.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry13 = nil
			}
			initialBackoff31 := new(float64)
			if !r.OutputInfluxdb.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputInfluxdb.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff31 = r.OutputInfluxdb.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff31 = nil
			}
			backoffRate31 := new(float64)
			if !r.OutputInfluxdb.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputInfluxdb.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate31 = r.OutputInfluxdb.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate31 = nil
			}
			maxBackoff27 := new(float64)
			if !r.OutputInfluxdb.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputInfluxdb.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff27 = r.OutputInfluxdb.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff27 = nil
			}
			timeoutRetrySettings13 = &shared.OutputInfluxdbTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry13,
				InitialBackoff: initialBackoff31,
				BackoffRate:    backoffRate31,
				MaxBackoff:     maxBackoff27,
			}
		}
		responseHonorRetryAfterHeader13 := new(bool)
		if !r.OutputInfluxdb.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputInfluxdb.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader13 = r.OutputInfluxdb.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader13 = nil
		}
		onBackpressure29 := new(shared.OutputInfluxdbBackpressureBehavior)
		if !r.OutputInfluxdb.OnBackpressure.IsUnknown() && !r.OutputInfluxdb.OnBackpressure.IsNull() {
			*onBackpressure29 = shared.OutputInfluxdbBackpressureBehavior(r.OutputInfluxdb.OnBackpressure.ValueString())
		} else {
			onBackpressure29 = nil
		}
		authType17 := new(shared.OutputInfluxdbAuthenticationType)
		if !r.OutputInfluxdb.AuthType.IsUnknown() && !r.OutputInfluxdb.AuthType.IsNull() {
			*authType17 = shared.OutputInfluxdbAuthenticationType(r.OutputInfluxdb.AuthType.ValueString())
		} else {
			authType17 = nil
		}
		description30 := new(string)
		if !r.OutputInfluxdb.Description.IsUnknown() && !r.OutputInfluxdb.Description.IsNull() {
			*description30 = r.OutputInfluxdb.Description.ValueString()
		} else {
			description30 = nil
		}
		database1 := new(string)
		if !r.OutputInfluxdb.Database.IsUnknown() && !r.OutputInfluxdb.Database.IsNull() {
			*database1 = r.OutputInfluxdb.Database.ValueString()
		} else {
			database1 = nil
		}
		bucket3 := new(string)
		if !r.OutputInfluxdb.Bucket.IsUnknown() && !r.OutputInfluxdb.Bucket.IsNull() {
			*bucket3 = r.OutputInfluxdb.Bucket.ValueString()
		} else {
			bucket3 = nil
		}
		org := new(string)
		if !r.OutputInfluxdb.Org.IsUnknown() && !r.OutputInfluxdb.Org.IsNull() {
			*org = r.OutputInfluxdb.Org.ValueString()
		} else {
			org = nil
		}
		pqMaxFileSize24 := new(string)
		if !r.OutputInfluxdb.PqMaxFileSize.IsUnknown() && !r.OutputInfluxdb.PqMaxFileSize.IsNull() {
			*pqMaxFileSize24 = r.OutputInfluxdb.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize24 = nil
		}
		pqMaxSize24 := new(string)
		if !r.OutputInfluxdb.PqMaxSize.IsUnknown() && !r.OutputInfluxdb.PqMaxSize.IsNull() {
			*pqMaxSize24 = r.OutputInfluxdb.PqMaxSize.ValueString()
		} else {
			pqMaxSize24 = nil
		}
		pqPath24 := new(string)
		if !r.OutputInfluxdb.PqPath.IsUnknown() && !r.OutputInfluxdb.PqPath.IsNull() {
			*pqPath24 = r.OutputInfluxdb.PqPath.ValueString()
		} else {
			pqPath24 = nil
		}
		pqCompress24 := new(shared.OutputInfluxdbCompression)
		if !r.OutputInfluxdb.PqCompress.IsUnknown() && !r.OutputInfluxdb.PqCompress.IsNull() {
			*pqCompress24 = shared.OutputInfluxdbCompression(r.OutputInfluxdb.PqCompress.ValueString())
		} else {
			pqCompress24 = nil
		}
		pqOnBackpressure24 := new(shared.OutputInfluxdbQueueFullBehavior)
		if !r.OutputInfluxdb.PqOnBackpressure.IsUnknown() && !r.OutputInfluxdb.PqOnBackpressure.IsNull() {
			*pqOnBackpressure24 = shared.OutputInfluxdbQueueFullBehavior(r.OutputInfluxdb.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure24 = nil
		}
		pqMode24 := new(shared.OutputInfluxdbMode)
		if !r.OutputInfluxdb.PqMode.IsUnknown() && !r.OutputInfluxdb.PqMode.IsNull() {
			*pqMode24 = shared.OutputInfluxdbMode(r.OutputInfluxdb.PqMode.ValueString())
		} else {
			pqMode24 = nil
		}
		var pqControls24 *shared.OutputInfluxdbPqControls
		if r.OutputInfluxdb.PqControls != nil {
			pqControls24 = &shared.OutputInfluxdbPqControls{}
		}
		username1 := new(string)
		if !r.OutputInfluxdb.Username.IsUnknown() && !r.OutputInfluxdb.Username.IsNull() {
			*username1 = r.OutputInfluxdb.Username.ValueString()
		} else {
			username1 = nil
		}
		password1 := new(string)
		if !r.OutputInfluxdb.Password.IsUnknown() && !r.OutputInfluxdb.Password.IsNull() {
			*password1 = r.OutputInfluxdb.Password.ValueString()
		} else {
			password1 = nil
		}
		token4 := new(string)
		if !r.OutputInfluxdb.Token.IsUnknown() && !r.OutputInfluxdb.Token.IsNull() {
			*token4 = r.OutputInfluxdb.Token.ValueString()
		} else {
			token4 = nil
		}
		credentialsSecret4 := new(string)
		if !r.OutputInfluxdb.CredentialsSecret.IsUnknown() && !r.OutputInfluxdb.CredentialsSecret.IsNull() {
			*credentialsSecret4 = r.OutputInfluxdb.CredentialsSecret.ValueString()
		} else {
			credentialsSecret4 = nil
		}
		textSecret13 := new(string)
		if !r.OutputInfluxdb.TextSecret.IsUnknown() && !r.OutputInfluxdb.TextSecret.IsNull() {
			*textSecret13 = r.OutputInfluxdb.TextSecret.ValueString()
		} else {
			textSecret13 = nil
		}
		loginUrl2 := new(string)
		if !r.OutputInfluxdb.LoginURL.IsUnknown() && !r.OutputInfluxdb.LoginURL.IsNull() {
			*loginUrl2 = r.OutputInfluxdb.LoginURL.ValueString()
		} else {
			loginUrl2 = nil
		}
		secretParamName1 := new(string)
		if !r.OutputInfluxdb.SecretParamName.IsUnknown() && !r.OutputInfluxdb.SecretParamName.IsNull() {
			*secretParamName1 = r.OutputInfluxdb.SecretParamName.ValueString()
		} else {
			secretParamName1 = nil
		}
		secret4 := new(string)
		if !r.OutputInfluxdb.Secret.IsUnknown() && !r.OutputInfluxdb.Secret.IsNull() {
			*secret4 = r.OutputInfluxdb.Secret.ValueString()
		} else {
			secret4 = nil
		}
		tokenAttributeName1 := new(string)
		if !r.OutputInfluxdb.TokenAttributeName.IsUnknown() && !r.OutputInfluxdb.TokenAttributeName.IsNull() {
			*tokenAttributeName1 = r.OutputInfluxdb.TokenAttributeName.ValueString()
		} else {
			tokenAttributeName1 = nil
		}
		authHeaderExpr1 := new(string)
		if !r.OutputInfluxdb.AuthHeaderExpr.IsUnknown() && !r.OutputInfluxdb.AuthHeaderExpr.IsNull() {
			*authHeaderExpr1 = r.OutputInfluxdb.AuthHeaderExpr.ValueString()
		} else {
			authHeaderExpr1 = nil
		}
		tokenTimeoutSecs1 := new(float64)
		if !r.OutputInfluxdb.TokenTimeoutSecs.IsUnknown() && !r.OutputInfluxdb.TokenTimeoutSecs.IsNull() {
			*tokenTimeoutSecs1 = r.OutputInfluxdb.TokenTimeoutSecs.ValueFloat64()
		} else {
			tokenTimeoutSecs1 = nil
		}
		oauthParams1 := make([]shared.OutputInfluxdbOauthParams, 0, len(r.OutputInfluxdb.OauthParams))
		for _, oauthParamsItem1 := range r.OutputInfluxdb.OauthParams {
			var name18 string
			name18 = oauthParamsItem1.Name.ValueString()

			var value26 string
			value26 = oauthParamsItem1.Value.ValueString()

			oauthParams1 = append(oauthParams1, shared.OutputInfluxdbOauthParams{
				Name:  name18,
				Value: value26,
			})
		}
		oauthHeaders1 := make([]shared.OutputInfluxdbOauthHeaders, 0, len(r.OutputInfluxdb.OauthHeaders))
		for _, oauthHeadersItem1 := range r.OutputInfluxdb.OauthHeaders {
			var name19 string
			name19 = oauthHeadersItem1.Name.ValueString()

			var value27 string
			value27 = oauthHeadersItem1.Value.ValueString()

			oauthHeaders1 = append(oauthHeaders1, shared.OutputInfluxdbOauthHeaders{
				Name:  name19,
				Value: value27,
			})
		}
		outputInfluxdb = &shared.OutputInfluxdb{
			ID:                            id31,
			Type:                          typeVar31,
			Pipeline:                      pipeline31,
			SystemFields:                  systemFields31,
			Environment:                   environment31,
			Streamtags:                    streamtags31,
			URL:                           url8,
			UseV2API:                      useV2API,
			TimestampPrecision:            timestampPrecision,
			DynamicValueFieldName:         dynamicValueFieldName,
			ValueFieldName:                valueFieldName,
			Concurrency:                   concurrency15,
			MaxPayloadSizeKB:              maxPayloadSizeKb14,
			MaxPayloadEvents:              maxPayloadEvents14,
			Compress:                      compress19,
			RejectUnauthorized:            rejectUnauthorized30,
			TimeoutSec:                    timeoutSec14,
			FlushPeriodSec:                flushPeriodSec20,
			ExtraHTTPHeaders:              extraHTTPHeaders12,
			UseRoundRobinDNS:              useRoundRobinDns12,
			FailedRequestLoggingMode:      failedRequestLoggingMode12,
			SafeHeaders:                   safeHeaders12,
			ResponseRetrySettings:         responseRetrySettings13,
			TimeoutRetrySettings:          timeoutRetrySettings13,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader13,
			OnBackpressure:                onBackpressure29,
			AuthType:                      authType17,
			Description:                   description30,
			Database:                      database1,
			Bucket:                        bucket3,
			Org:                           org,
			PqMaxFileSize:                 pqMaxFileSize24,
			PqMaxSize:                     pqMaxSize24,
			PqPath:                        pqPath24,
			PqCompress:                    pqCompress24,
			PqOnBackpressure:              pqOnBackpressure24,
			PqMode:                        pqMode24,
			PqControls:                    pqControls24,
			Username:                      username1,
			Password:                      password1,
			Token:                         token4,
			CredentialsSecret:             credentialsSecret4,
			TextSecret:                    textSecret13,
			LoginURL:                      loginUrl2,
			SecretParamName:               secretParamName1,
			Secret:                        secret4,
			TokenAttributeName:            tokenAttributeName1,
			AuthHeaderExpr:                authHeaderExpr1,
			TokenTimeoutSecs:              tokenTimeoutSecs1,
			OauthParams:                   oauthParams1,
			OauthHeaders:                  oauthHeaders1,
		}
	}
	if outputInfluxdb != nil {
		out = shared.Output{
			OutputInfluxdb: outputInfluxdb,
		}
	}
	var outputCloudwatch *shared.OutputCloudwatch
	if r.OutputCloudwatch != nil {
		id32 := new(string)
		if !r.OutputCloudwatch.ID.IsUnknown() && !r.OutputCloudwatch.ID.IsNull() {
			*id32 = r.OutputCloudwatch.ID.ValueString()
		} else {
			id32 = nil
		}
		typeVar32 := new(shared.OutputCloudwatchType)
		if !r.OutputCloudwatch.Type.IsUnknown() && !r.OutputCloudwatch.Type.IsNull() {
			*typeVar32 = shared.OutputCloudwatchType(r.OutputCloudwatch.Type.ValueString())
		} else {
			typeVar32 = nil
		}
		pipeline32 := new(string)
		if !r.OutputCloudwatch.Pipeline.IsUnknown() && !r.OutputCloudwatch.Pipeline.IsNull() {
			*pipeline32 = r.OutputCloudwatch.Pipeline.ValueString()
		} else {
			pipeline32 = nil
		}
		systemFields32 := make([]string, 0, len(r.OutputCloudwatch.SystemFields))
		for _, systemFieldsItem32 := range r.OutputCloudwatch.SystemFields {
			systemFields32 = append(systemFields32, systemFieldsItem32.ValueString())
		}
		environment32 := new(string)
		if !r.OutputCloudwatch.Environment.IsUnknown() && !r.OutputCloudwatch.Environment.IsNull() {
			*environment32 = r.OutputCloudwatch.Environment.ValueString()
		} else {
			environment32 = nil
		}
		streamtags32 := make([]string, 0, len(r.OutputCloudwatch.Streamtags))
		for _, streamtagsItem32 := range r.OutputCloudwatch.Streamtags {
			streamtags32 = append(streamtags32, streamtagsItem32.ValueString())
		}
		var logGroupName string
		logGroupName = r.OutputCloudwatch.LogGroupName.ValueString()

		var logStreamName string
		logStreamName = r.OutputCloudwatch.LogStreamName.ValueString()

		awsAuthenticationMethod4 := new(shared.OutputCloudwatchAuthenticationMethod)
		if !r.OutputCloudwatch.AwsAuthenticationMethod.IsUnknown() && !r.OutputCloudwatch.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod4 = shared.OutputCloudwatchAuthenticationMethod(r.OutputCloudwatch.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod4 = nil
		}
		awsSecretKey5 := new(string)
		if !r.OutputCloudwatch.AwsSecretKey.IsUnknown() && !r.OutputCloudwatch.AwsSecretKey.IsNull() {
			*awsSecretKey5 = r.OutputCloudwatch.AwsSecretKey.ValueString()
		} else {
			awsSecretKey5 = nil
		}
		var region9 string
		region9 = r.OutputCloudwatch.Region.ValueString()

		endpoint5 := new(string)
		if !r.OutputCloudwatch.Endpoint.IsUnknown() && !r.OutputCloudwatch.Endpoint.IsNull() {
			*endpoint5 = r.OutputCloudwatch.Endpoint.ValueString()
		} else {
			endpoint5 = nil
		}
		reuseConnections5 := new(bool)
		if !r.OutputCloudwatch.ReuseConnections.IsUnknown() && !r.OutputCloudwatch.ReuseConnections.IsNull() {
			*reuseConnections5 = r.OutputCloudwatch.ReuseConnections.ValueBool()
		} else {
			reuseConnections5 = nil
		}
		rejectUnauthorized31 := new(bool)
		if !r.OutputCloudwatch.RejectUnauthorized.IsUnknown() && !r.OutputCloudwatch.RejectUnauthorized.IsNull() {
			*rejectUnauthorized31 = r.OutputCloudwatch.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized31 = nil
		}
		enableAssumeRole3 := new(bool)
		if !r.OutputCloudwatch.EnableAssumeRole.IsUnknown() && !r.OutputCloudwatch.EnableAssumeRole.IsNull() {
			*enableAssumeRole3 = r.OutputCloudwatch.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole3 = nil
		}
		assumeRoleArn3 := new(string)
		if !r.OutputCloudwatch.AssumeRoleArn.IsUnknown() && !r.OutputCloudwatch.AssumeRoleArn.IsNull() {
			*assumeRoleArn3 = r.OutputCloudwatch.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn3 = nil
		}
		assumeRoleExternalId3 := new(string)
		if !r.OutputCloudwatch.AssumeRoleExternalID.IsUnknown() && !r.OutputCloudwatch.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId3 = r.OutputCloudwatch.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId3 = nil
		}
		durationSeconds3 := new(float64)
		if !r.OutputCloudwatch.DurationSeconds.IsUnknown() && !r.OutputCloudwatch.DurationSeconds.IsNull() {
			*durationSeconds3 = r.OutputCloudwatch.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds3 = nil
		}
		maxQueueSize1 := new(float64)
		if !r.OutputCloudwatch.MaxQueueSize.IsUnknown() && !r.OutputCloudwatch.MaxQueueSize.IsNull() {
			*maxQueueSize1 = r.OutputCloudwatch.MaxQueueSize.ValueFloat64()
		} else {
			maxQueueSize1 = nil
		}
		maxRecordSizeKb6 := new(float64)
		if !r.OutputCloudwatch.MaxRecordSizeKB.IsUnknown() && !r.OutputCloudwatch.MaxRecordSizeKB.IsNull() {
			*maxRecordSizeKb6 = r.OutputCloudwatch.MaxRecordSizeKB.ValueFloat64()
		} else {
			maxRecordSizeKb6 = nil
		}
		flushPeriodSec21 := new(float64)
		if !r.OutputCloudwatch.FlushPeriodSec.IsUnknown() && !r.OutputCloudwatch.FlushPeriodSec.IsNull() {
			*flushPeriodSec21 = r.OutputCloudwatch.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec21 = nil
		}
		onBackpressure30 := new(shared.OutputCloudwatchBackpressureBehavior)
		if !r.OutputCloudwatch.OnBackpressure.IsUnknown() && !r.OutputCloudwatch.OnBackpressure.IsNull() {
			*onBackpressure30 = shared.OutputCloudwatchBackpressureBehavior(r.OutputCloudwatch.OnBackpressure.ValueString())
		} else {
			onBackpressure30 = nil
		}
		description31 := new(string)
		if !r.OutputCloudwatch.Description.IsUnknown() && !r.OutputCloudwatch.Description.IsNull() {
			*description31 = r.OutputCloudwatch.Description.ValueString()
		} else {
			description31 = nil
		}
		awsAPIKey5 := new(string)
		if !r.OutputCloudwatch.AwsAPIKey.IsUnknown() && !r.OutputCloudwatch.AwsAPIKey.IsNull() {
			*awsAPIKey5 = r.OutputCloudwatch.AwsAPIKey.ValueString()
		} else {
			awsAPIKey5 = nil
		}
		awsSecret4 := new(string)
		if !r.OutputCloudwatch.AwsSecret.IsUnknown() && !r.OutputCloudwatch.AwsSecret.IsNull() {
			*awsSecret4 = r.OutputCloudwatch.AwsSecret.ValueString()
		} else {
			awsSecret4 = nil
		}
		pqMaxFileSize25 := new(string)
		if !r.OutputCloudwatch.PqMaxFileSize.IsUnknown() && !r.OutputCloudwatch.PqMaxFileSize.IsNull() {
			*pqMaxFileSize25 = r.OutputCloudwatch.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize25 = nil
		}
		pqMaxSize25 := new(string)
		if !r.OutputCloudwatch.PqMaxSize.IsUnknown() && !r.OutputCloudwatch.PqMaxSize.IsNull() {
			*pqMaxSize25 = r.OutputCloudwatch.PqMaxSize.ValueString()
		} else {
			pqMaxSize25 = nil
		}
		pqPath25 := new(string)
		if !r.OutputCloudwatch.PqPath.IsUnknown() && !r.OutputCloudwatch.PqPath.IsNull() {
			*pqPath25 = r.OutputCloudwatch.PqPath.ValueString()
		} else {
			pqPath25 = nil
		}
		pqCompress25 := new(shared.OutputCloudwatchCompression)
		if !r.OutputCloudwatch.PqCompress.IsUnknown() && !r.OutputCloudwatch.PqCompress.IsNull() {
			*pqCompress25 = shared.OutputCloudwatchCompression(r.OutputCloudwatch.PqCompress.ValueString())
		} else {
			pqCompress25 = nil
		}
		pqOnBackpressure25 := new(shared.OutputCloudwatchQueueFullBehavior)
		if !r.OutputCloudwatch.PqOnBackpressure.IsUnknown() && !r.OutputCloudwatch.PqOnBackpressure.IsNull() {
			*pqOnBackpressure25 = shared.OutputCloudwatchQueueFullBehavior(r.OutputCloudwatch.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure25 = nil
		}
		pqMode25 := new(shared.OutputCloudwatchMode)
		if !r.OutputCloudwatch.PqMode.IsUnknown() && !r.OutputCloudwatch.PqMode.IsNull() {
			*pqMode25 = shared.OutputCloudwatchMode(r.OutputCloudwatch.PqMode.ValueString())
		} else {
			pqMode25 = nil
		}
		var pqControls25 *shared.OutputCloudwatchPqControls
		if r.OutputCloudwatch.PqControls != nil {
			pqControls25 = &shared.OutputCloudwatchPqControls{}
		}
		outputCloudwatch = &shared.OutputCloudwatch{
			ID:                      id32,
			Type:                    typeVar32,
			Pipeline:                pipeline32,
			SystemFields:            systemFields32,
			Environment:             environment32,
			Streamtags:              streamtags32,
			LogGroupName:            logGroupName,
			LogStreamName:           logStreamName,
			AwsAuthenticationMethod: awsAuthenticationMethod4,
			AwsSecretKey:            awsSecretKey5,
			Region:                  region9,
			Endpoint:                endpoint5,
			ReuseConnections:        reuseConnections5,
			RejectUnauthorized:      rejectUnauthorized31,
			EnableAssumeRole:        enableAssumeRole3,
			AssumeRoleArn:           assumeRoleArn3,
			AssumeRoleExternalID:    assumeRoleExternalId3,
			DurationSeconds:         durationSeconds3,
			MaxQueueSize:            maxQueueSize1,
			MaxRecordSizeKB:         maxRecordSizeKb6,
			FlushPeriodSec:          flushPeriodSec21,
			OnBackpressure:          onBackpressure30,
			Description:             description31,
			AwsAPIKey:               awsAPIKey5,
			AwsSecret:               awsSecret4,
			PqMaxFileSize:           pqMaxFileSize25,
			PqMaxSize:               pqMaxSize25,
			PqPath:                  pqPath25,
			PqCompress:              pqCompress25,
			PqOnBackpressure:        pqOnBackpressure25,
			PqMode:                  pqMode25,
			PqControls:              pqControls25,
		}
	}
	if outputCloudwatch != nil {
		out = shared.Output{
			OutputCloudwatch: outputCloudwatch,
		}
	}
	var outputMinio *shared.OutputMinio
	if r.OutputMinio != nil {
		id33 := new(string)
		if !r.OutputMinio.ID.IsUnknown() && !r.OutputMinio.ID.IsNull() {
			*id33 = r.OutputMinio.ID.ValueString()
		} else {
			id33 = nil
		}
		typeVar33 := new(shared.OutputMinioType)
		if !r.OutputMinio.Type.IsUnknown() && !r.OutputMinio.Type.IsNull() {
			*typeVar33 = shared.OutputMinioType(r.OutputMinio.Type.ValueString())
		} else {
			typeVar33 = nil
		}
		pipeline33 := new(string)
		if !r.OutputMinio.Pipeline.IsUnknown() && !r.OutputMinio.Pipeline.IsNull() {
			*pipeline33 = r.OutputMinio.Pipeline.ValueString()
		} else {
			pipeline33 = nil
		}
		systemFields33 := make([]string, 0, len(r.OutputMinio.SystemFields))
		for _, systemFieldsItem33 := range r.OutputMinio.SystemFields {
			systemFields33 = append(systemFields33, systemFieldsItem33.ValueString())
		}
		environment33 := new(string)
		if !r.OutputMinio.Environment.IsUnknown() && !r.OutputMinio.Environment.IsNull() {
			*environment33 = r.OutputMinio.Environment.ValueString()
		} else {
			environment33 = nil
		}
		streamtags33 := make([]string, 0, len(r.OutputMinio.Streamtags))
		for _, streamtagsItem33 := range r.OutputMinio.Streamtags {
			streamtags33 = append(streamtags33, streamtagsItem33.ValueString())
		}
		var endpoint6 string
		endpoint6 = r.OutputMinio.Endpoint.ValueString()

		var bucket4 string
		bucket4 = r.OutputMinio.Bucket.ValueString()

		awsAuthenticationMethod5 := new(shared.OutputMinioAuthenticationMethod)
		if !r.OutputMinio.AwsAuthenticationMethod.IsUnknown() && !r.OutputMinio.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod5 = shared.OutputMinioAuthenticationMethod(r.OutputMinio.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod5 = nil
		}
		awsSecretKey6 := new(string)
		if !r.OutputMinio.AwsSecretKey.IsUnknown() && !r.OutputMinio.AwsSecretKey.IsNull() {
			*awsSecretKey6 = r.OutputMinio.AwsSecretKey.ValueString()
		} else {
			awsSecretKey6 = nil
		}
		region10 := new(string)
		if !r.OutputMinio.Region.IsUnknown() && !r.OutputMinio.Region.IsNull() {
			*region10 = r.OutputMinio.Region.ValueString()
		} else {
			region10 = nil
		}
		stagePath6 := new(string)
		if !r.OutputMinio.StagePath.IsUnknown() && !r.OutputMinio.StagePath.IsNull() {
			*stagePath6 = r.OutputMinio.StagePath.ValueString()
		} else {
			stagePath6 = nil
		}
		addIDToStagePath6 := new(bool)
		if !r.OutputMinio.AddIDToStagePath.IsUnknown() && !r.OutputMinio.AddIDToStagePath.IsNull() {
			*addIDToStagePath6 = r.OutputMinio.AddIDToStagePath.ValueBool()
		} else {
			addIDToStagePath6 = nil
		}
		destPath4 := new(string)
		if !r.OutputMinio.DestPath.IsUnknown() && !r.OutputMinio.DestPath.IsNull() {
			*destPath4 = r.OutputMinio.DestPath.ValueString()
		} else {
			destPath4 = nil
		}
		signatureVersion5 := new(shared.OutputMinioSignatureVersion)
		if !r.OutputMinio.SignatureVersion.IsUnknown() && !r.OutputMinio.SignatureVersion.IsNull() {
			*signatureVersion5 = shared.OutputMinioSignatureVersion(r.OutputMinio.SignatureVersion.ValueString())
		} else {
			signatureVersion5 = nil
		}
		objectAcl3 := new(shared.OutputMinioObjectACL)
		if !r.OutputMinio.ObjectACL.IsUnknown() && !r.OutputMinio.ObjectACL.IsNull() {
			*objectAcl3 = shared.OutputMinioObjectACL(r.OutputMinio.ObjectACL.ValueString())
		} else {
			objectAcl3 = nil
		}
		storageClass4 := new(shared.OutputMinioStorageClass)
		if !r.OutputMinio.StorageClass.IsUnknown() && !r.OutputMinio.StorageClass.IsNull() {
			*storageClass4 = shared.OutputMinioStorageClass(r.OutputMinio.StorageClass.ValueString())
		} else {
			storageClass4 = nil
		}
		serverSideEncryption1 := new(shared.OutputMinioServerSideEncryption)
		if !r.OutputMinio.ServerSideEncryption.IsUnknown() && !r.OutputMinio.ServerSideEncryption.IsNull() {
			*serverSideEncryption1 = shared.OutputMinioServerSideEncryption(r.OutputMinio.ServerSideEncryption.ValueString())
		} else {
			serverSideEncryption1 = nil
		}
		reuseConnections6 := new(bool)
		if !r.OutputMinio.ReuseConnections.IsUnknown() && !r.OutputMinio.ReuseConnections.IsNull() {
			*reuseConnections6 = r.OutputMinio.ReuseConnections.ValueBool()
		} else {
			reuseConnections6 = nil
		}
		rejectUnauthorized32 := new(bool)
		if !r.OutputMinio.RejectUnauthorized.IsUnknown() && !r.OutputMinio.RejectUnauthorized.IsNull() {
			*rejectUnauthorized32 = r.OutputMinio.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized32 = nil
		}
		verifyPermissions2 := new(bool)
		if !r.OutputMinio.VerifyPermissions.IsUnknown() && !r.OutputMinio.VerifyPermissions.IsNull() {
			*verifyPermissions2 = r.OutputMinio.VerifyPermissions.ValueBool()
		} else {
			verifyPermissions2 = nil
		}
		removeEmptyDirs6 := new(bool)
		if !r.OutputMinio.RemoveEmptyDirs.IsUnknown() && !r.OutputMinio.RemoveEmptyDirs.IsNull() {
			*removeEmptyDirs6 = r.OutputMinio.RemoveEmptyDirs.ValueBool()
		} else {
			removeEmptyDirs6 = nil
		}
		partitionExpr4 := new(string)
		if !r.OutputMinio.PartitionExpr.IsUnknown() && !r.OutputMinio.PartitionExpr.IsNull() {
			*partitionExpr4 = r.OutputMinio.PartitionExpr.ValueString()
		} else {
			partitionExpr4 = nil
		}
		format11 := new(shared.OutputMinioDataFormat)
		if !r.OutputMinio.Format.IsUnknown() && !r.OutputMinio.Format.IsNull() {
			*format11 = shared.OutputMinioDataFormat(r.OutputMinio.Format.ValueString())
		} else {
			format11 = nil
		}
		baseFileName4 := new(string)
		if !r.OutputMinio.BaseFileName.IsUnknown() && !r.OutputMinio.BaseFileName.IsNull() {
			*baseFileName4 = r.OutputMinio.BaseFileName.ValueString()
		} else {
			baseFileName4 = nil
		}
		fileNameSuffix5 := new(string)
		if !r.OutputMinio.FileNameSuffix.IsUnknown() && !r.OutputMinio.FileNameSuffix.IsNull() {
			*fileNameSuffix5 = r.OutputMinio.FileNameSuffix.ValueString()
		} else {
			fileNameSuffix5 = nil
		}
		maxFileSizeMb6 := new(float64)
		if !r.OutputMinio.MaxFileSizeMB.IsUnknown() && !r.OutputMinio.MaxFileSizeMB.IsNull() {
			*maxFileSizeMb6 = r.OutputMinio.MaxFileSizeMB.ValueFloat64()
		} else {
			maxFileSizeMb6 = nil
		}
		maxOpenFiles6 := new(float64)
		if !r.OutputMinio.MaxOpenFiles.IsUnknown() && !r.OutputMinio.MaxOpenFiles.IsNull() {
			*maxOpenFiles6 = r.OutputMinio.MaxOpenFiles.ValueFloat64()
		} else {
			maxOpenFiles6 = nil
		}
		headerLine4 := new(string)
		if !r.OutputMinio.HeaderLine.IsUnknown() && !r.OutputMinio.HeaderLine.IsNull() {
			*headerLine4 = r.OutputMinio.HeaderLine.ValueString()
		} else {
			headerLine4 = nil
		}
		writeHighWaterMark4 := new(float64)
		if !r.OutputMinio.WriteHighWaterMark.IsUnknown() && !r.OutputMinio.WriteHighWaterMark.IsNull() {
			*writeHighWaterMark4 = r.OutputMinio.WriteHighWaterMark.ValueFloat64()
		} else {
			writeHighWaterMark4 = nil
		}
		onBackpressure31 := new(shared.OutputMinioBackpressureBehavior)
		if !r.OutputMinio.OnBackpressure.IsUnknown() && !r.OutputMinio.OnBackpressure.IsNull() {
			*onBackpressure31 = shared.OutputMinioBackpressureBehavior(r.OutputMinio.OnBackpressure.ValueString())
		} else {
			onBackpressure31 = nil
		}
		deadletterEnabled6 := new(bool)
		if !r.OutputMinio.DeadletterEnabled.IsUnknown() && !r.OutputMinio.DeadletterEnabled.IsNull() {
			*deadletterEnabled6 = r.OutputMinio.DeadletterEnabled.ValueBool()
		} else {
			deadletterEnabled6 = nil
		}
		onDiskFullBackpressure6 := new(shared.OutputMinioDiskSpaceProtection)
		if !r.OutputMinio.OnDiskFullBackpressure.IsUnknown() && !r.OutputMinio.OnDiskFullBackpressure.IsNull() {
			*onDiskFullBackpressure6 = shared.OutputMinioDiskSpaceProtection(r.OutputMinio.OnDiskFullBackpressure.ValueString())
		} else {
			onDiskFullBackpressure6 = nil
		}
		maxFileOpenTimeSec6 := new(float64)
		if !r.OutputMinio.MaxFileOpenTimeSec.IsUnknown() && !r.OutputMinio.MaxFileOpenTimeSec.IsNull() {
			*maxFileOpenTimeSec6 = r.OutputMinio.MaxFileOpenTimeSec.ValueFloat64()
		} else {
			maxFileOpenTimeSec6 = nil
		}
		maxFileIdleTimeSec6 := new(float64)
		if !r.OutputMinio.MaxFileIdleTimeSec.IsUnknown() && !r.OutputMinio.MaxFileIdleTimeSec.IsNull() {
			*maxFileIdleTimeSec6 = r.OutputMinio.MaxFileIdleTimeSec.ValueFloat64()
		} else {
			maxFileIdleTimeSec6 = nil
		}
		maxConcurrentFileParts3 := new(float64)
		if !r.OutputMinio.MaxConcurrentFileParts.IsUnknown() && !r.OutputMinio.MaxConcurrentFileParts.IsNull() {
			*maxConcurrentFileParts3 = r.OutputMinio.MaxConcurrentFileParts.ValueFloat64()
		} else {
			maxConcurrentFileParts3 = nil
		}
		description32 := new(string)
		if !r.OutputMinio.Description.IsUnknown() && !r.OutputMinio.Description.IsNull() {
			*description32 = r.OutputMinio.Description.ValueString()
		} else {
			description32 = nil
		}
		awsAPIKey6 := new(string)
		if !r.OutputMinio.AwsAPIKey.IsUnknown() && !r.OutputMinio.AwsAPIKey.IsNull() {
			*awsAPIKey6 = r.OutputMinio.AwsAPIKey.ValueString()
		} else {
			awsAPIKey6 = nil
		}
		awsSecret5 := new(string)
		if !r.OutputMinio.AwsSecret.IsUnknown() && !r.OutputMinio.AwsSecret.IsNull() {
			*awsSecret5 = r.OutputMinio.AwsSecret.ValueString()
		} else {
			awsSecret5 = nil
		}
		compress20 := new(shared.OutputMinioCompress)
		if !r.OutputMinio.Compress.IsUnknown() && !r.OutputMinio.Compress.IsNull() {
			*compress20 = shared.OutputMinioCompress(r.OutputMinio.Compress.ValueString())
		} else {
			compress20 = nil
		}
		compressionLevel4 := new(shared.OutputMinioCompressionLevel)
		if !r.OutputMinio.CompressionLevel.IsUnknown() && !r.OutputMinio.CompressionLevel.IsNull() {
			*compressionLevel4 = shared.OutputMinioCompressionLevel(r.OutputMinio.CompressionLevel.ValueString())
		} else {
			compressionLevel4 = nil
		}
		automaticSchema4 := new(bool)
		if !r.OutputMinio.AutomaticSchema.IsUnknown() && !r.OutputMinio.AutomaticSchema.IsNull() {
			*automaticSchema4 = r.OutputMinio.AutomaticSchema.ValueBool()
		} else {
			automaticSchema4 = nil
		}
		parquetVersion4 := new(shared.OutputMinioParquetVersion)
		if !r.OutputMinio.ParquetVersion.IsUnknown() && !r.OutputMinio.ParquetVersion.IsNull() {
			*parquetVersion4 = shared.OutputMinioParquetVersion(r.OutputMinio.ParquetVersion.ValueString())
		} else {
			parquetVersion4 = nil
		}
		parquetDataPageVersion4 := new(shared.OutputMinioDataPageVersion)
		if !r.OutputMinio.ParquetDataPageVersion.IsUnknown() && !r.OutputMinio.ParquetDataPageVersion.IsNull() {
			*parquetDataPageVersion4 = shared.OutputMinioDataPageVersion(r.OutputMinio.ParquetDataPageVersion.ValueString())
		} else {
			parquetDataPageVersion4 = nil
		}
		parquetRowGroupLength4 := new(float64)
		if !r.OutputMinio.ParquetRowGroupLength.IsUnknown() && !r.OutputMinio.ParquetRowGroupLength.IsNull() {
			*parquetRowGroupLength4 = r.OutputMinio.ParquetRowGroupLength.ValueFloat64()
		} else {
			parquetRowGroupLength4 = nil
		}
		parquetPageSize4 := new(string)
		if !r.OutputMinio.ParquetPageSize.IsUnknown() && !r.OutputMinio.ParquetPageSize.IsNull() {
			*parquetPageSize4 = r.OutputMinio.ParquetPageSize.ValueString()
		} else {
			parquetPageSize4 = nil
		}
		shouldLogInvalidRows4 := new(bool)
		if !r.OutputMinio.ShouldLogInvalidRows.IsUnknown() && !r.OutputMinio.ShouldLogInvalidRows.IsNull() {
			*shouldLogInvalidRows4 = r.OutputMinio.ShouldLogInvalidRows.ValueBool()
		} else {
			shouldLogInvalidRows4 = nil
		}
		keyValueMetadata4 := make([]shared.OutputMinioKeyValueMetadata, 0, len(r.OutputMinio.KeyValueMetadata))
		for _, keyValueMetadataItem4 := range r.OutputMinio.KeyValueMetadata {
			key6 := new(string)
			if !keyValueMetadataItem4.Key.IsUnknown() && !keyValueMetadataItem4.Key.IsNull() {
				*key6 = keyValueMetadataItem4.Key.ValueString()
			} else {
				key6 = nil
			}
			var value28 string
			value28 = keyValueMetadataItem4.Value.ValueString()

			keyValueMetadata4 = append(keyValueMetadata4, shared.OutputMinioKeyValueMetadata{
				Key:   key6,
				Value: value28,
			})
		}
		enableStatistics4 := new(bool)
		if !r.OutputMinio.EnableStatistics.IsUnknown() && !r.OutputMinio.EnableStatistics.IsNull() {
			*enableStatistics4 = r.OutputMinio.EnableStatistics.ValueBool()
		} else {
			enableStatistics4 = nil
		}
		enableWritePageIndex4 := new(bool)
		if !r.OutputMinio.EnableWritePageIndex.IsUnknown() && !r.OutputMinio.EnableWritePageIndex.IsNull() {
			*enableWritePageIndex4 = r.OutputMinio.EnableWritePageIndex.ValueBool()
		} else {
			enableWritePageIndex4 = nil
		}
		enablePageChecksum4 := new(bool)
		if !r.OutputMinio.EnablePageChecksum.IsUnknown() && !r.OutputMinio.EnablePageChecksum.IsNull() {
			*enablePageChecksum4 = r.OutputMinio.EnablePageChecksum.ValueBool()
		} else {
			enablePageChecksum4 = nil
		}
		emptyDirCleanupSec5 := new(float64)
		if !r.OutputMinio.EmptyDirCleanupSec.IsUnknown() && !r.OutputMinio.EmptyDirCleanupSec.IsNull() {
			*emptyDirCleanupSec5 = r.OutputMinio.EmptyDirCleanupSec.ValueFloat64()
		} else {
			emptyDirCleanupSec5 = nil
		}
		deadletterPath5 := new(string)
		if !r.OutputMinio.DeadletterPath.IsUnknown() && !r.OutputMinio.DeadletterPath.IsNull() {
			*deadletterPath5 = r.OutputMinio.DeadletterPath.ValueString()
		} else {
			deadletterPath5 = nil
		}
		maxRetryNum5 := new(float64)
		if !r.OutputMinio.MaxRetryNum.IsUnknown() && !r.OutputMinio.MaxRetryNum.IsNull() {
			*maxRetryNum5 = r.OutputMinio.MaxRetryNum.ValueFloat64()
		} else {
			maxRetryNum5 = nil
		}
		outputMinio = &shared.OutputMinio{
			ID:                      id33,
			Type:                    typeVar33,
			Pipeline:                pipeline33,
			SystemFields:            systemFields33,
			Environment:             environment33,
			Streamtags:              streamtags33,
			Endpoint:                endpoint6,
			Bucket:                  bucket4,
			AwsAuthenticationMethod: awsAuthenticationMethod5,
			AwsSecretKey:            awsSecretKey6,
			Region:                  region10,
			StagePath:               stagePath6,
			AddIDToStagePath:        addIDToStagePath6,
			DestPath:                destPath4,
			SignatureVersion:        signatureVersion5,
			ObjectACL:               objectAcl3,
			StorageClass:            storageClass4,
			ServerSideEncryption:    serverSideEncryption1,
			ReuseConnections:        reuseConnections6,
			RejectUnauthorized:      rejectUnauthorized32,
			VerifyPermissions:       verifyPermissions2,
			RemoveEmptyDirs:         removeEmptyDirs6,
			PartitionExpr:           partitionExpr4,
			Format:                  format11,
			BaseFileName:            baseFileName4,
			FileNameSuffix:          fileNameSuffix5,
			MaxFileSizeMB:           maxFileSizeMb6,
			MaxOpenFiles:            maxOpenFiles6,
			HeaderLine:              headerLine4,
			WriteHighWaterMark:      writeHighWaterMark4,
			OnBackpressure:          onBackpressure31,
			DeadletterEnabled:       deadletterEnabled6,
			OnDiskFullBackpressure:  onDiskFullBackpressure6,
			MaxFileOpenTimeSec:      maxFileOpenTimeSec6,
			MaxFileIdleTimeSec:      maxFileIdleTimeSec6,
			MaxConcurrentFileParts:  maxConcurrentFileParts3,
			Description:             description32,
			AwsAPIKey:               awsAPIKey6,
			AwsSecret:               awsSecret5,
			Compress:                compress20,
			CompressionLevel:        compressionLevel4,
			AutomaticSchema:         automaticSchema4,
			ParquetVersion:          parquetVersion4,
			ParquetDataPageVersion:  parquetDataPageVersion4,
			ParquetRowGroupLength:   parquetRowGroupLength4,
			ParquetPageSize:         parquetPageSize4,
			ShouldLogInvalidRows:    shouldLogInvalidRows4,
			KeyValueMetadata:        keyValueMetadata4,
			EnableStatistics:        enableStatistics4,
			EnableWritePageIndex:    enableWritePageIndex4,
			EnablePageChecksum:      enablePageChecksum4,
			EmptyDirCleanupSec:      emptyDirCleanupSec5,
			DeadletterPath:          deadletterPath5,
			MaxRetryNum:             maxRetryNum5,
		}
	}
	if outputMinio != nil {
		out = shared.Output{
			OutputMinio: outputMinio,
		}
	}
	var outputStatsd *shared.OutputStatsd
	if r.OutputStatsd != nil {
		id34 := new(string)
		if !r.OutputStatsd.ID.IsUnknown() && !r.OutputStatsd.ID.IsNull() {
			*id34 = r.OutputStatsd.ID.ValueString()
		} else {
			id34 = nil
		}
		typeVar34 := new(shared.OutputStatsdType)
		if !r.OutputStatsd.Type.IsUnknown() && !r.OutputStatsd.Type.IsNull() {
			*typeVar34 = shared.OutputStatsdType(r.OutputStatsd.Type.ValueString())
		} else {
			typeVar34 = nil
		}
		pipeline34 := new(string)
		if !r.OutputStatsd.Pipeline.IsUnknown() && !r.OutputStatsd.Pipeline.IsNull() {
			*pipeline34 = r.OutputStatsd.Pipeline.ValueString()
		} else {
			pipeline34 = nil
		}
		systemFields34 := make([]string, 0, len(r.OutputStatsd.SystemFields))
		for _, systemFieldsItem34 := range r.OutputStatsd.SystemFields {
			systemFields34 = append(systemFields34, systemFieldsItem34.ValueString())
		}
		environment34 := new(string)
		if !r.OutputStatsd.Environment.IsUnknown() && !r.OutputStatsd.Environment.IsNull() {
			*environment34 = r.OutputStatsd.Environment.ValueString()
		} else {
			environment34 = nil
		}
		streamtags34 := make([]string, 0, len(r.OutputStatsd.Streamtags))
		for _, streamtagsItem34 := range r.OutputStatsd.Streamtags {
			streamtags34 = append(streamtags34, streamtagsItem34.ValueString())
		}
		protocol1 := new(shared.DestinationProtocol)
		if !r.OutputStatsd.Protocol.IsUnknown() && !r.OutputStatsd.Protocol.IsNull() {
			*protocol1 = shared.DestinationProtocol(r.OutputStatsd.Protocol.ValueString())
		} else {
			protocol1 = nil
		}
		var host5 string
		host5 = r.OutputStatsd.Host.ValueString()

		port5 := new(float64)
		if !r.OutputStatsd.Port.IsUnknown() && !r.OutputStatsd.Port.IsNull() {
			*port5 = r.OutputStatsd.Port.ValueFloat64()
		} else {
			port5 = nil
		}
		mtu := new(float64)
		if !r.OutputStatsd.Mtu.IsUnknown() && !r.OutputStatsd.Mtu.IsNull() {
			*mtu = r.OutputStatsd.Mtu.ValueFloat64()
		} else {
			mtu = nil
		}
		flushPeriodSec22 := new(float64)
		if !r.OutputStatsd.FlushPeriodSec.IsUnknown() && !r.OutputStatsd.FlushPeriodSec.IsNull() {
			*flushPeriodSec22 = r.OutputStatsd.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec22 = nil
		}
		dnsResolvePeriodSec5 := new(float64)
		if !r.OutputStatsd.DNSResolvePeriodSec.IsUnknown() && !r.OutputStatsd.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec5 = r.OutputStatsd.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec5 = nil
		}
		description33 := new(string)
		if !r.OutputStatsd.Description.IsUnknown() && !r.OutputStatsd.Description.IsNull() {
			*description33 = r.OutputStatsd.Description.ValueString()
		} else {
			description33 = nil
		}
		throttleRatePerSec4 := new(string)
		if !r.OutputStatsd.ThrottleRatePerSec.IsUnknown() && !r.OutputStatsd.ThrottleRatePerSec.IsNull() {
			*throttleRatePerSec4 = r.OutputStatsd.ThrottleRatePerSec.ValueString()
		} else {
			throttleRatePerSec4 = nil
		}
		connectionTimeout12 := new(float64)
		if !r.OutputStatsd.ConnectionTimeout.IsUnknown() && !r.OutputStatsd.ConnectionTimeout.IsNull() {
			*connectionTimeout12 = r.OutputStatsd.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout12 = nil
		}
		writeTimeout4 := new(float64)
		if !r.OutputStatsd.WriteTimeout.IsUnknown() && !r.OutputStatsd.WriteTimeout.IsNull() {
			*writeTimeout4 = r.OutputStatsd.WriteTimeout.ValueFloat64()
		} else {
			writeTimeout4 = nil
		}
		onBackpressure32 := new(shared.OutputStatsdBackpressureBehavior)
		if !r.OutputStatsd.OnBackpressure.IsUnknown() && !r.OutputStatsd.OnBackpressure.IsNull() {
			*onBackpressure32 = shared.OutputStatsdBackpressureBehavior(r.OutputStatsd.OnBackpressure.ValueString())
		} else {
			onBackpressure32 = nil
		}
		pqMaxFileSize26 := new(string)
		if !r.OutputStatsd.PqMaxFileSize.IsUnknown() && !r.OutputStatsd.PqMaxFileSize.IsNull() {
			*pqMaxFileSize26 = r.OutputStatsd.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize26 = nil
		}
		pqMaxSize26 := new(string)
		if !r.OutputStatsd.PqMaxSize.IsUnknown() && !r.OutputStatsd.PqMaxSize.IsNull() {
			*pqMaxSize26 = r.OutputStatsd.PqMaxSize.ValueString()
		} else {
			pqMaxSize26 = nil
		}
		pqPath26 := new(string)
		if !r.OutputStatsd.PqPath.IsUnknown() && !r.OutputStatsd.PqPath.IsNull() {
			*pqPath26 = r.OutputStatsd.PqPath.ValueString()
		} else {
			pqPath26 = nil
		}
		pqCompress26 := new(shared.OutputStatsdCompression)
		if !r.OutputStatsd.PqCompress.IsUnknown() && !r.OutputStatsd.PqCompress.IsNull() {
			*pqCompress26 = shared.OutputStatsdCompression(r.OutputStatsd.PqCompress.ValueString())
		} else {
			pqCompress26 = nil
		}
		pqOnBackpressure26 := new(shared.OutputStatsdQueueFullBehavior)
		if !r.OutputStatsd.PqOnBackpressure.IsUnknown() && !r.OutputStatsd.PqOnBackpressure.IsNull() {
			*pqOnBackpressure26 = shared.OutputStatsdQueueFullBehavior(r.OutputStatsd.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure26 = nil
		}
		pqMode26 := new(shared.OutputStatsdMode)
		if !r.OutputStatsd.PqMode.IsUnknown() && !r.OutputStatsd.PqMode.IsNull() {
			*pqMode26 = shared.OutputStatsdMode(r.OutputStatsd.PqMode.ValueString())
		} else {
			pqMode26 = nil
		}
		var pqControls26 *shared.OutputStatsdPqControls
		if r.OutputStatsd.PqControls != nil {
			pqControls26 = &shared.OutputStatsdPqControls{}
		}
		outputStatsd = &shared.OutputStatsd{
			ID:                  id34,
			Type:                typeVar34,
			Pipeline:            pipeline34,
			SystemFields:        systemFields34,
			Environment:         environment34,
			Streamtags:          streamtags34,
			Protocol:            protocol1,
			Host:                host5,
			Port:                port5,
			Mtu:                 mtu,
			FlushPeriodSec:      flushPeriodSec22,
			DNSResolvePeriodSec: dnsResolvePeriodSec5,
			Description:         description33,
			ThrottleRatePerSec:  throttleRatePerSec4,
			ConnectionTimeout:   connectionTimeout12,
			WriteTimeout:        writeTimeout4,
			OnBackpressure:      onBackpressure32,
			PqMaxFileSize:       pqMaxFileSize26,
			PqMaxSize:           pqMaxSize26,
			PqPath:              pqPath26,
			PqCompress:          pqCompress26,
			PqOnBackpressure:    pqOnBackpressure26,
			PqMode:              pqMode26,
			PqControls:          pqControls26,
		}
	}
	if outputStatsd != nil {
		out = shared.Output{
			OutputStatsd: outputStatsd,
		}
	}
	var outputStatsdExt *shared.OutputStatsdExt
	if r.OutputStatsdExt != nil {
		id35 := new(string)
		if !r.OutputStatsdExt.ID.IsUnknown() && !r.OutputStatsdExt.ID.IsNull() {
			*id35 = r.OutputStatsdExt.ID.ValueString()
		} else {
			id35 = nil
		}
		typeVar35 := new(shared.OutputStatsdExtType)
		if !r.OutputStatsdExt.Type.IsUnknown() && !r.OutputStatsdExt.Type.IsNull() {
			*typeVar35 = shared.OutputStatsdExtType(r.OutputStatsdExt.Type.ValueString())
		} else {
			typeVar35 = nil
		}
		pipeline35 := new(string)
		if !r.OutputStatsdExt.Pipeline.IsUnknown() && !r.OutputStatsdExt.Pipeline.IsNull() {
			*pipeline35 = r.OutputStatsdExt.Pipeline.ValueString()
		} else {
			pipeline35 = nil
		}
		systemFields35 := make([]string, 0, len(r.OutputStatsdExt.SystemFields))
		for _, systemFieldsItem35 := range r.OutputStatsdExt.SystemFields {
			systemFields35 = append(systemFields35, systemFieldsItem35.ValueString())
		}
		environment35 := new(string)
		if !r.OutputStatsdExt.Environment.IsUnknown() && !r.OutputStatsdExt.Environment.IsNull() {
			*environment35 = r.OutputStatsdExt.Environment.ValueString()
		} else {
			environment35 = nil
		}
		streamtags35 := make([]string, 0, len(r.OutputStatsdExt.Streamtags))
		for _, streamtagsItem35 := range r.OutputStatsdExt.Streamtags {
			streamtags35 = append(streamtags35, streamtagsItem35.ValueString())
		}
		protocol2 := new(shared.OutputStatsdExtDestinationProtocol)
		if !r.OutputStatsdExt.Protocol.IsUnknown() && !r.OutputStatsdExt.Protocol.IsNull() {
			*protocol2 = shared.OutputStatsdExtDestinationProtocol(r.OutputStatsdExt.Protocol.ValueString())
		} else {
			protocol2 = nil
		}
		var host6 string
		host6 = r.OutputStatsdExt.Host.ValueString()

		port6 := new(float64)
		if !r.OutputStatsdExt.Port.IsUnknown() && !r.OutputStatsdExt.Port.IsNull() {
			*port6 = r.OutputStatsdExt.Port.ValueFloat64()
		} else {
			port6 = nil
		}
		mtu1 := new(float64)
		if !r.OutputStatsdExt.Mtu.IsUnknown() && !r.OutputStatsdExt.Mtu.IsNull() {
			*mtu1 = r.OutputStatsdExt.Mtu.ValueFloat64()
		} else {
			mtu1 = nil
		}
		flushPeriodSec23 := new(float64)
		if !r.OutputStatsdExt.FlushPeriodSec.IsUnknown() && !r.OutputStatsdExt.FlushPeriodSec.IsNull() {
			*flushPeriodSec23 = r.OutputStatsdExt.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec23 = nil
		}
		dnsResolvePeriodSec6 := new(float64)
		if !r.OutputStatsdExt.DNSResolvePeriodSec.IsUnknown() && !r.OutputStatsdExt.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec6 = r.OutputStatsdExt.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec6 = nil
		}
		description34 := new(string)
		if !r.OutputStatsdExt.Description.IsUnknown() && !r.OutputStatsdExt.Description.IsNull() {
			*description34 = r.OutputStatsdExt.Description.ValueString()
		} else {
			description34 = nil
		}
		throttleRatePerSec5 := new(string)
		if !r.OutputStatsdExt.ThrottleRatePerSec.IsUnknown() && !r.OutputStatsdExt.ThrottleRatePerSec.IsNull() {
			*throttleRatePerSec5 = r.OutputStatsdExt.ThrottleRatePerSec.ValueString()
		} else {
			throttleRatePerSec5 = nil
		}
		connectionTimeout13 := new(float64)
		if !r.OutputStatsdExt.ConnectionTimeout.IsUnknown() && !r.OutputStatsdExt.ConnectionTimeout.IsNull() {
			*connectionTimeout13 = r.OutputStatsdExt.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout13 = nil
		}
		writeTimeout5 := new(float64)
		if !r.OutputStatsdExt.WriteTimeout.IsUnknown() && !r.OutputStatsdExt.WriteTimeout.IsNull() {
			*writeTimeout5 = r.OutputStatsdExt.WriteTimeout.ValueFloat64()
		} else {
			writeTimeout5 = nil
		}
		onBackpressure33 := new(shared.OutputStatsdExtBackpressureBehavior)
		if !r.OutputStatsdExt.OnBackpressure.IsUnknown() && !r.OutputStatsdExt.OnBackpressure.IsNull() {
			*onBackpressure33 = shared.OutputStatsdExtBackpressureBehavior(r.OutputStatsdExt.OnBackpressure.ValueString())
		} else {
			onBackpressure33 = nil
		}
		pqMaxFileSize27 := new(string)
		if !r.OutputStatsdExt.PqMaxFileSize.IsUnknown() && !r.OutputStatsdExt.PqMaxFileSize.IsNull() {
			*pqMaxFileSize27 = r.OutputStatsdExt.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize27 = nil
		}
		pqMaxSize27 := new(string)
		if !r.OutputStatsdExt.PqMaxSize.IsUnknown() && !r.OutputStatsdExt.PqMaxSize.IsNull() {
			*pqMaxSize27 = r.OutputStatsdExt.PqMaxSize.ValueString()
		} else {
			pqMaxSize27 = nil
		}
		pqPath27 := new(string)
		if !r.OutputStatsdExt.PqPath.IsUnknown() && !r.OutputStatsdExt.PqPath.IsNull() {
			*pqPath27 = r.OutputStatsdExt.PqPath.ValueString()
		} else {
			pqPath27 = nil
		}
		pqCompress27 := new(shared.OutputStatsdExtCompression)
		if !r.OutputStatsdExt.PqCompress.IsUnknown() && !r.OutputStatsdExt.PqCompress.IsNull() {
			*pqCompress27 = shared.OutputStatsdExtCompression(r.OutputStatsdExt.PqCompress.ValueString())
		} else {
			pqCompress27 = nil
		}
		pqOnBackpressure27 := new(shared.OutputStatsdExtQueueFullBehavior)
		if !r.OutputStatsdExt.PqOnBackpressure.IsUnknown() && !r.OutputStatsdExt.PqOnBackpressure.IsNull() {
			*pqOnBackpressure27 = shared.OutputStatsdExtQueueFullBehavior(r.OutputStatsdExt.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure27 = nil
		}
		pqMode27 := new(shared.OutputStatsdExtMode)
		if !r.OutputStatsdExt.PqMode.IsUnknown() && !r.OutputStatsdExt.PqMode.IsNull() {
			*pqMode27 = shared.OutputStatsdExtMode(r.OutputStatsdExt.PqMode.ValueString())
		} else {
			pqMode27 = nil
		}
		var pqControls27 *shared.OutputStatsdExtPqControls
		if r.OutputStatsdExt.PqControls != nil {
			pqControls27 = &shared.OutputStatsdExtPqControls{}
		}
		outputStatsdExt = &shared.OutputStatsdExt{
			ID:                  id35,
			Type:                typeVar35,
			Pipeline:            pipeline35,
			SystemFields:        systemFields35,
			Environment:         environment35,
			Streamtags:          streamtags35,
			Protocol:            protocol2,
			Host:                host6,
			Port:                port6,
			Mtu:                 mtu1,
			FlushPeriodSec:      flushPeriodSec23,
			DNSResolvePeriodSec: dnsResolvePeriodSec6,
			Description:         description34,
			ThrottleRatePerSec:  throttleRatePerSec5,
			ConnectionTimeout:   connectionTimeout13,
			WriteTimeout:        writeTimeout5,
			OnBackpressure:      onBackpressure33,
			PqMaxFileSize:       pqMaxFileSize27,
			PqMaxSize:           pqMaxSize27,
			PqPath:              pqPath27,
			PqCompress:          pqCompress27,
			PqOnBackpressure:    pqOnBackpressure27,
			PqMode:              pqMode27,
			PqControls:          pqControls27,
		}
	}
	if outputStatsdExt != nil {
		out = shared.Output{
			OutputStatsdExt: outputStatsdExt,
		}
	}
	var outputGraphite *shared.OutputGraphite
	if r.OutputGraphite != nil {
		id36 := new(string)
		if !r.OutputGraphite.ID.IsUnknown() && !r.OutputGraphite.ID.IsNull() {
			*id36 = r.OutputGraphite.ID.ValueString()
		} else {
			id36 = nil
		}
		typeVar36 := new(shared.OutputGraphiteType)
		if !r.OutputGraphite.Type.IsUnknown() && !r.OutputGraphite.Type.IsNull() {
			*typeVar36 = shared.OutputGraphiteType(r.OutputGraphite.Type.ValueString())
		} else {
			typeVar36 = nil
		}
		pipeline36 := new(string)
		if !r.OutputGraphite.Pipeline.IsUnknown() && !r.OutputGraphite.Pipeline.IsNull() {
			*pipeline36 = r.OutputGraphite.Pipeline.ValueString()
		} else {
			pipeline36 = nil
		}
		systemFields36 := make([]string, 0, len(r.OutputGraphite.SystemFields))
		for _, systemFieldsItem36 := range r.OutputGraphite.SystemFields {
			systemFields36 = append(systemFields36, systemFieldsItem36.ValueString())
		}
		environment36 := new(string)
		if !r.OutputGraphite.Environment.IsUnknown() && !r.OutputGraphite.Environment.IsNull() {
			*environment36 = r.OutputGraphite.Environment.ValueString()
		} else {
			environment36 = nil
		}
		streamtags36 := make([]string, 0, len(r.OutputGraphite.Streamtags))
		for _, streamtagsItem36 := range r.OutputGraphite.Streamtags {
			streamtags36 = append(streamtags36, streamtagsItem36.ValueString())
		}
		protocol3 := new(shared.OutputGraphiteDestinationProtocol)
		if !r.OutputGraphite.Protocol.IsUnknown() && !r.OutputGraphite.Protocol.IsNull() {
			*protocol3 = shared.OutputGraphiteDestinationProtocol(r.OutputGraphite.Protocol.ValueString())
		} else {
			protocol3 = nil
		}
		var host7 string
		host7 = r.OutputGraphite.Host.ValueString()

		port7 := new(float64)
		if !r.OutputGraphite.Port.IsUnknown() && !r.OutputGraphite.Port.IsNull() {
			*port7 = r.OutputGraphite.Port.ValueFloat64()
		} else {
			port7 = nil
		}
		mtu2 := new(float64)
		if !r.OutputGraphite.Mtu.IsUnknown() && !r.OutputGraphite.Mtu.IsNull() {
			*mtu2 = r.OutputGraphite.Mtu.ValueFloat64()
		} else {
			mtu2 = nil
		}
		flushPeriodSec24 := new(float64)
		if !r.OutputGraphite.FlushPeriodSec.IsUnknown() && !r.OutputGraphite.FlushPeriodSec.IsNull() {
			*flushPeriodSec24 = r.OutputGraphite.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec24 = nil
		}
		dnsResolvePeriodSec7 := new(float64)
		if !r.OutputGraphite.DNSResolvePeriodSec.IsUnknown() && !r.OutputGraphite.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec7 = r.OutputGraphite.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec7 = nil
		}
		description35 := new(string)
		if !r.OutputGraphite.Description.IsUnknown() && !r.OutputGraphite.Description.IsNull() {
			*description35 = r.OutputGraphite.Description.ValueString()
		} else {
			description35 = nil
		}
		throttleRatePerSec6 := new(string)
		if !r.OutputGraphite.ThrottleRatePerSec.IsUnknown() && !r.OutputGraphite.ThrottleRatePerSec.IsNull() {
			*throttleRatePerSec6 = r.OutputGraphite.ThrottleRatePerSec.ValueString()
		} else {
			throttleRatePerSec6 = nil
		}
		connectionTimeout14 := new(float64)
		if !r.OutputGraphite.ConnectionTimeout.IsUnknown() && !r.OutputGraphite.ConnectionTimeout.IsNull() {
			*connectionTimeout14 = r.OutputGraphite.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout14 = nil
		}
		writeTimeout6 := new(float64)
		if !r.OutputGraphite.WriteTimeout.IsUnknown() && !r.OutputGraphite.WriteTimeout.IsNull() {
			*writeTimeout6 = r.OutputGraphite.WriteTimeout.ValueFloat64()
		} else {
			writeTimeout6 = nil
		}
		onBackpressure34 := new(shared.OutputGraphiteBackpressureBehavior)
		if !r.OutputGraphite.OnBackpressure.IsUnknown() && !r.OutputGraphite.OnBackpressure.IsNull() {
			*onBackpressure34 = shared.OutputGraphiteBackpressureBehavior(r.OutputGraphite.OnBackpressure.ValueString())
		} else {
			onBackpressure34 = nil
		}
		pqMaxFileSize28 := new(string)
		if !r.OutputGraphite.PqMaxFileSize.IsUnknown() && !r.OutputGraphite.PqMaxFileSize.IsNull() {
			*pqMaxFileSize28 = r.OutputGraphite.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize28 = nil
		}
		pqMaxSize28 := new(string)
		if !r.OutputGraphite.PqMaxSize.IsUnknown() && !r.OutputGraphite.PqMaxSize.IsNull() {
			*pqMaxSize28 = r.OutputGraphite.PqMaxSize.ValueString()
		} else {
			pqMaxSize28 = nil
		}
		pqPath28 := new(string)
		if !r.OutputGraphite.PqPath.IsUnknown() && !r.OutputGraphite.PqPath.IsNull() {
			*pqPath28 = r.OutputGraphite.PqPath.ValueString()
		} else {
			pqPath28 = nil
		}
		pqCompress28 := new(shared.OutputGraphiteCompression)
		if !r.OutputGraphite.PqCompress.IsUnknown() && !r.OutputGraphite.PqCompress.IsNull() {
			*pqCompress28 = shared.OutputGraphiteCompression(r.OutputGraphite.PqCompress.ValueString())
		} else {
			pqCompress28 = nil
		}
		pqOnBackpressure28 := new(shared.OutputGraphiteQueueFullBehavior)
		if !r.OutputGraphite.PqOnBackpressure.IsUnknown() && !r.OutputGraphite.PqOnBackpressure.IsNull() {
			*pqOnBackpressure28 = shared.OutputGraphiteQueueFullBehavior(r.OutputGraphite.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure28 = nil
		}
		pqMode28 := new(shared.OutputGraphiteMode)
		if !r.OutputGraphite.PqMode.IsUnknown() && !r.OutputGraphite.PqMode.IsNull() {
			*pqMode28 = shared.OutputGraphiteMode(r.OutputGraphite.PqMode.ValueString())
		} else {
			pqMode28 = nil
		}
		var pqControls28 *shared.OutputGraphitePqControls
		if r.OutputGraphite.PqControls != nil {
			pqControls28 = &shared.OutputGraphitePqControls{}
		}
		outputGraphite = &shared.OutputGraphite{
			ID:                  id36,
			Type:                typeVar36,
			Pipeline:            pipeline36,
			SystemFields:        systemFields36,
			Environment:         environment36,
			Streamtags:          streamtags36,
			Protocol:            protocol3,
			Host:                host7,
			Port:                port7,
			Mtu:                 mtu2,
			FlushPeriodSec:      flushPeriodSec24,
			DNSResolvePeriodSec: dnsResolvePeriodSec7,
			Description:         description35,
			ThrottleRatePerSec:  throttleRatePerSec6,
			ConnectionTimeout:   connectionTimeout14,
			WriteTimeout:        writeTimeout6,
			OnBackpressure:      onBackpressure34,
			PqMaxFileSize:       pqMaxFileSize28,
			PqMaxSize:           pqMaxSize28,
			PqPath:              pqPath28,
			PqCompress:          pqCompress28,
			PqOnBackpressure:    pqOnBackpressure28,
			PqMode:              pqMode28,
			PqControls:          pqControls28,
		}
	}
	if outputGraphite != nil {
		out = shared.Output{
			OutputGraphite: outputGraphite,
		}
	}
	var outputRouter *shared.OutputRouter
	if r.OutputRouter != nil {
		id37 := new(string)
		if !r.OutputRouter.ID.IsUnknown() && !r.OutputRouter.ID.IsNull() {
			*id37 = r.OutputRouter.ID.ValueString()
		} else {
			id37 = nil
		}
		typeVar37 := shared.OutputRouterType(r.OutputRouter.Type.ValueString())
		pipeline37 := new(string)
		if !r.OutputRouter.Pipeline.IsUnknown() && !r.OutputRouter.Pipeline.IsNull() {
			*pipeline37 = r.OutputRouter.Pipeline.ValueString()
		} else {
			pipeline37 = nil
		}
		systemFields37 := make([]string, 0, len(r.OutputRouter.SystemFields))
		for _, systemFieldsItem37 := range r.OutputRouter.SystemFields {
			systemFields37 = append(systemFields37, systemFieldsItem37.ValueString())
		}
		environment37 := new(string)
		if !r.OutputRouter.Environment.IsUnknown() && !r.OutputRouter.Environment.IsNull() {
			*environment37 = r.OutputRouter.Environment.ValueString()
		} else {
			environment37 = nil
		}
		streamtags37 := make([]string, 0, len(r.OutputRouter.Streamtags))
		for _, streamtagsItem37 := range r.OutputRouter.Streamtags {
			streamtags37 = append(streamtags37, streamtagsItem37.ValueString())
		}
		rules := make([]shared.OutputRouterRules, 0, len(r.OutputRouter.Rules))
		for _, rulesItem := range r.OutputRouter.Rules {
			var filter string
			filter = rulesItem.Filter.ValueString()

			var output string
			output = rulesItem.Output.ValueString()

			description36 := new(string)
			if !rulesItem.Description.IsUnknown() && !rulesItem.Description.IsNull() {
				*description36 = rulesItem.Description.ValueString()
			} else {
				description36 = nil
			}
			final := new(bool)
			if !rulesItem.Final.IsUnknown() && !rulesItem.Final.IsNull() {
				*final = rulesItem.Final.ValueBool()
			} else {
				final = nil
			}
			rules = append(rules, shared.OutputRouterRules{
				Filter:      filter,
				Output:      output,
				Description: description36,
				Final:       final,
			})
		}
		description37 := new(string)
		if !r.OutputRouter.Description.IsUnknown() && !r.OutputRouter.Description.IsNull() {
			*description37 = r.OutputRouter.Description.ValueString()
		} else {
			description37 = nil
		}
		outputRouter = &shared.OutputRouter{
			ID:           id37,
			Type:         typeVar37,
			Pipeline:     pipeline37,
			SystemFields: systemFields37,
			Environment:  environment37,
			Streamtags:   streamtags37,
			Rules:        rules,
			Description:  description37,
		}
	}
	if outputRouter != nil {
		out = shared.Output{
			OutputRouter: outputRouter,
		}
	}
	var outputSns *shared.OutputSns
	if r.OutputSns != nil {
		id38 := new(string)
		if !r.OutputSns.ID.IsUnknown() && !r.OutputSns.ID.IsNull() {
			*id38 = r.OutputSns.ID.ValueString()
		} else {
			id38 = nil
		}
		typeVar38 := new(shared.OutputSnsType)
		if !r.OutputSns.Type.IsUnknown() && !r.OutputSns.Type.IsNull() {
			*typeVar38 = shared.OutputSnsType(r.OutputSns.Type.ValueString())
		} else {
			typeVar38 = nil
		}
		pipeline38 := new(string)
		if !r.OutputSns.Pipeline.IsUnknown() && !r.OutputSns.Pipeline.IsNull() {
			*pipeline38 = r.OutputSns.Pipeline.ValueString()
		} else {
			pipeline38 = nil
		}
		systemFields38 := make([]string, 0, len(r.OutputSns.SystemFields))
		for _, systemFieldsItem38 := range r.OutputSns.SystemFields {
			systemFields38 = append(systemFields38, systemFieldsItem38.ValueString())
		}
		environment38 := new(string)
		if !r.OutputSns.Environment.IsUnknown() && !r.OutputSns.Environment.IsNull() {
			*environment38 = r.OutputSns.Environment.ValueString()
		} else {
			environment38 = nil
		}
		streamtags38 := make([]string, 0, len(r.OutputSns.Streamtags))
		for _, streamtagsItem38 := range r.OutputSns.Streamtags {
			streamtags38 = append(streamtags38, streamtagsItem38.ValueString())
		}
		var topicArn string
		topicArn = r.OutputSns.TopicArn.ValueString()

		var messageGroupID string
		messageGroupID = r.OutputSns.MessageGroupID.ValueString()

		maxRetries7 := new(float64)
		if !r.OutputSns.MaxRetries.IsUnknown() && !r.OutputSns.MaxRetries.IsNull() {
			*maxRetries7 = r.OutputSns.MaxRetries.ValueFloat64()
		} else {
			maxRetries7 = nil
		}
		awsAuthenticationMethod6 := new(shared.OutputSnsAuthenticationMethod)
		if !r.OutputSns.AwsAuthenticationMethod.IsUnknown() && !r.OutputSns.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod6 = shared.OutputSnsAuthenticationMethod(r.OutputSns.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod6 = nil
		}
		awsSecretKey7 := new(string)
		if !r.OutputSns.AwsSecretKey.IsUnknown() && !r.OutputSns.AwsSecretKey.IsNull() {
			*awsSecretKey7 = r.OutputSns.AwsSecretKey.ValueString()
		} else {
			awsSecretKey7 = nil
		}
		region11 := new(string)
		if !r.OutputSns.Region.IsUnknown() && !r.OutputSns.Region.IsNull() {
			*region11 = r.OutputSns.Region.ValueString()
		} else {
			region11 = nil
		}
		endpoint7 := new(string)
		if !r.OutputSns.Endpoint.IsUnknown() && !r.OutputSns.Endpoint.IsNull() {
			*endpoint7 = r.OutputSns.Endpoint.ValueString()
		} else {
			endpoint7 = nil
		}
		signatureVersion6 := new(shared.OutputSnsSignatureVersion)
		if !r.OutputSns.SignatureVersion.IsUnknown() && !r.OutputSns.SignatureVersion.IsNull() {
			*signatureVersion6 = shared.OutputSnsSignatureVersion(r.OutputSns.SignatureVersion.ValueString())
		} else {
			signatureVersion6 = nil
		}
		reuseConnections7 := new(bool)
		if !r.OutputSns.ReuseConnections.IsUnknown() && !r.OutputSns.ReuseConnections.IsNull() {
			*reuseConnections7 = r.OutputSns.ReuseConnections.ValueBool()
		} else {
			reuseConnections7 = nil
		}
		rejectUnauthorized33 := new(bool)
		if !r.OutputSns.RejectUnauthorized.IsUnknown() && !r.OutputSns.RejectUnauthorized.IsNull() {
			*rejectUnauthorized33 = r.OutputSns.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized33 = nil
		}
		enableAssumeRole4 := new(bool)
		if !r.OutputSns.EnableAssumeRole.IsUnknown() && !r.OutputSns.EnableAssumeRole.IsNull() {
			*enableAssumeRole4 = r.OutputSns.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole4 = nil
		}
		assumeRoleArn4 := new(string)
		if !r.OutputSns.AssumeRoleArn.IsUnknown() && !r.OutputSns.AssumeRoleArn.IsNull() {
			*assumeRoleArn4 = r.OutputSns.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn4 = nil
		}
		assumeRoleExternalId4 := new(string)
		if !r.OutputSns.AssumeRoleExternalID.IsUnknown() && !r.OutputSns.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId4 = r.OutputSns.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId4 = nil
		}
		durationSeconds4 := new(float64)
		if !r.OutputSns.DurationSeconds.IsUnknown() && !r.OutputSns.DurationSeconds.IsNull() {
			*durationSeconds4 = r.OutputSns.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds4 = nil
		}
		onBackpressure35 := new(shared.OutputSnsBackpressureBehavior)
		if !r.OutputSns.OnBackpressure.IsUnknown() && !r.OutputSns.OnBackpressure.IsNull() {
			*onBackpressure35 = shared.OutputSnsBackpressureBehavior(r.OutputSns.OnBackpressure.ValueString())
		} else {
			onBackpressure35 = nil
		}
		description38 := new(string)
		if !r.OutputSns.Description.IsUnknown() && !r.OutputSns.Description.IsNull() {
			*description38 = r.OutputSns.Description.ValueString()
		} else {
			description38 = nil
		}
		awsAPIKey7 := new(string)
		if !r.OutputSns.AwsAPIKey.IsUnknown() && !r.OutputSns.AwsAPIKey.IsNull() {
			*awsAPIKey7 = r.OutputSns.AwsAPIKey.ValueString()
		} else {
			awsAPIKey7 = nil
		}
		awsSecret6 := new(string)
		if !r.OutputSns.AwsSecret.IsUnknown() && !r.OutputSns.AwsSecret.IsNull() {
			*awsSecret6 = r.OutputSns.AwsSecret.ValueString()
		} else {
			awsSecret6 = nil
		}
		pqMaxFileSize29 := new(string)
		if !r.OutputSns.PqMaxFileSize.IsUnknown() && !r.OutputSns.PqMaxFileSize.IsNull() {
			*pqMaxFileSize29 = r.OutputSns.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize29 = nil
		}
		pqMaxSize29 := new(string)
		if !r.OutputSns.PqMaxSize.IsUnknown() && !r.OutputSns.PqMaxSize.IsNull() {
			*pqMaxSize29 = r.OutputSns.PqMaxSize.ValueString()
		} else {
			pqMaxSize29 = nil
		}
		pqPath29 := new(string)
		if !r.OutputSns.PqPath.IsUnknown() && !r.OutputSns.PqPath.IsNull() {
			*pqPath29 = r.OutputSns.PqPath.ValueString()
		} else {
			pqPath29 = nil
		}
		pqCompress29 := new(shared.OutputSnsCompression)
		if !r.OutputSns.PqCompress.IsUnknown() && !r.OutputSns.PqCompress.IsNull() {
			*pqCompress29 = shared.OutputSnsCompression(r.OutputSns.PqCompress.ValueString())
		} else {
			pqCompress29 = nil
		}
		pqOnBackpressure29 := new(shared.OutputSnsQueueFullBehavior)
		if !r.OutputSns.PqOnBackpressure.IsUnknown() && !r.OutputSns.PqOnBackpressure.IsNull() {
			*pqOnBackpressure29 = shared.OutputSnsQueueFullBehavior(r.OutputSns.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure29 = nil
		}
		pqMode29 := new(shared.OutputSnsMode)
		if !r.OutputSns.PqMode.IsUnknown() && !r.OutputSns.PqMode.IsNull() {
			*pqMode29 = shared.OutputSnsMode(r.OutputSns.PqMode.ValueString())
		} else {
			pqMode29 = nil
		}
		var pqControls29 *shared.OutputSnsPqControls
		if r.OutputSns.PqControls != nil {
			pqControls29 = &shared.OutputSnsPqControls{}
		}
		outputSns = &shared.OutputSns{
			ID:                      id38,
			Type:                    typeVar38,
			Pipeline:                pipeline38,
			SystemFields:            systemFields38,
			Environment:             environment38,
			Streamtags:              streamtags38,
			TopicArn:                topicArn,
			MessageGroupID:          messageGroupID,
			MaxRetries:              maxRetries7,
			AwsAuthenticationMethod: awsAuthenticationMethod6,
			AwsSecretKey:            awsSecretKey7,
			Region:                  region11,
			Endpoint:                endpoint7,
			SignatureVersion:        signatureVersion6,
			ReuseConnections:        reuseConnections7,
			RejectUnauthorized:      rejectUnauthorized33,
			EnableAssumeRole:        enableAssumeRole4,
			AssumeRoleArn:           assumeRoleArn4,
			AssumeRoleExternalID:    assumeRoleExternalId4,
			DurationSeconds:         durationSeconds4,
			OnBackpressure:          onBackpressure35,
			Description:             description38,
			AwsAPIKey:               awsAPIKey7,
			AwsSecret:               awsSecret6,
			PqMaxFileSize:           pqMaxFileSize29,
			PqMaxSize:               pqMaxSize29,
			PqPath:                  pqPath29,
			PqCompress:              pqCompress29,
			PqOnBackpressure:        pqOnBackpressure29,
			PqMode:                  pqMode29,
			PqControls:              pqControls29,
		}
	}
	if outputSns != nil {
		out = shared.Output{
			OutputSns: outputSns,
		}
	}
	var outputSqs *shared.OutputSqs
	if r.OutputSqs != nil {
		id39 := new(string)
		if !r.OutputSqs.ID.IsUnknown() && !r.OutputSqs.ID.IsNull() {
			*id39 = r.OutputSqs.ID.ValueString()
		} else {
			id39 = nil
		}
		typeVar39 := new(shared.OutputSqsType)
		if !r.OutputSqs.Type.IsUnknown() && !r.OutputSqs.Type.IsNull() {
			*typeVar39 = shared.OutputSqsType(r.OutputSqs.Type.ValueString())
		} else {
			typeVar39 = nil
		}
		pipeline39 := new(string)
		if !r.OutputSqs.Pipeline.IsUnknown() && !r.OutputSqs.Pipeline.IsNull() {
			*pipeline39 = r.OutputSqs.Pipeline.ValueString()
		} else {
			pipeline39 = nil
		}
		systemFields39 := make([]string, 0, len(r.OutputSqs.SystemFields))
		for _, systemFieldsItem39 := range r.OutputSqs.SystemFields {
			systemFields39 = append(systemFields39, systemFieldsItem39.ValueString())
		}
		environment39 := new(string)
		if !r.OutputSqs.Environment.IsUnknown() && !r.OutputSqs.Environment.IsNull() {
			*environment39 = r.OutputSqs.Environment.ValueString()
		} else {
			environment39 = nil
		}
		streamtags39 := make([]string, 0, len(r.OutputSqs.Streamtags))
		for _, streamtagsItem39 := range r.OutputSqs.Streamtags {
			streamtags39 = append(streamtags39, streamtagsItem39.ValueString())
		}
		var queueName string
		queueName = r.OutputSqs.QueueName.ValueString()

		queueType := new(shared.OutputSqsQueueType)
		if !r.OutputSqs.QueueType.IsUnknown() && !r.OutputSqs.QueueType.IsNull() {
			*queueType = shared.OutputSqsQueueType(r.OutputSqs.QueueType.ValueString())
		} else {
			queueType = nil
		}
		awsAccountID := new(string)
		if !r.OutputSqs.AwsAccountID.IsUnknown() && !r.OutputSqs.AwsAccountID.IsNull() {
			*awsAccountID = r.OutputSqs.AwsAccountID.ValueString()
		} else {
			awsAccountID = nil
		}
		messageGroupId1 := new(string)
		if !r.OutputSqs.MessageGroupID.IsUnknown() && !r.OutputSqs.MessageGroupID.IsNull() {
			*messageGroupId1 = r.OutputSqs.MessageGroupID.ValueString()
		} else {
			messageGroupId1 = nil
		}
		createQueue := new(bool)
		if !r.OutputSqs.CreateQueue.IsUnknown() && !r.OutputSqs.CreateQueue.IsNull() {
			*createQueue = r.OutputSqs.CreateQueue.ValueBool()
		} else {
			createQueue = nil
		}
		awsAuthenticationMethod7 := new(shared.OutputSqsAuthenticationMethod)
		if !r.OutputSqs.AwsAuthenticationMethod.IsUnknown() && !r.OutputSqs.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod7 = shared.OutputSqsAuthenticationMethod(r.OutputSqs.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod7 = nil
		}
		awsSecretKey8 := new(string)
		if !r.OutputSqs.AwsSecretKey.IsUnknown() && !r.OutputSqs.AwsSecretKey.IsNull() {
			*awsSecretKey8 = r.OutputSqs.AwsSecretKey.ValueString()
		} else {
			awsSecretKey8 = nil
		}
		region12 := new(string)
		if !r.OutputSqs.Region.IsUnknown() && !r.OutputSqs.Region.IsNull() {
			*region12 = r.OutputSqs.Region.ValueString()
		} else {
			region12 = nil
		}
		endpoint8 := new(string)
		if !r.OutputSqs.Endpoint.IsUnknown() && !r.OutputSqs.Endpoint.IsNull() {
			*endpoint8 = r.OutputSqs.Endpoint.ValueString()
		} else {
			endpoint8 = nil
		}
		signatureVersion7 := new(shared.OutputSqsSignatureVersion)
		if !r.OutputSqs.SignatureVersion.IsUnknown() && !r.OutputSqs.SignatureVersion.IsNull() {
			*signatureVersion7 = shared.OutputSqsSignatureVersion(r.OutputSqs.SignatureVersion.ValueString())
		} else {
			signatureVersion7 = nil
		}
		reuseConnections8 := new(bool)
		if !r.OutputSqs.ReuseConnections.IsUnknown() && !r.OutputSqs.ReuseConnections.IsNull() {
			*reuseConnections8 = r.OutputSqs.ReuseConnections.ValueBool()
		} else {
			reuseConnections8 = nil
		}
		rejectUnauthorized34 := new(bool)
		if !r.OutputSqs.RejectUnauthorized.IsUnknown() && !r.OutputSqs.RejectUnauthorized.IsNull() {
			*rejectUnauthorized34 = r.OutputSqs.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized34 = nil
		}
		enableAssumeRole5 := new(bool)
		if !r.OutputSqs.EnableAssumeRole.IsUnknown() && !r.OutputSqs.EnableAssumeRole.IsNull() {
			*enableAssumeRole5 = r.OutputSqs.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole5 = nil
		}
		assumeRoleArn5 := new(string)
		if !r.OutputSqs.AssumeRoleArn.IsUnknown() && !r.OutputSqs.AssumeRoleArn.IsNull() {
			*assumeRoleArn5 = r.OutputSqs.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn5 = nil
		}
		assumeRoleExternalId5 := new(string)
		if !r.OutputSqs.AssumeRoleExternalID.IsUnknown() && !r.OutputSqs.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId5 = r.OutputSqs.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId5 = nil
		}
		durationSeconds5 := new(float64)
		if !r.OutputSqs.DurationSeconds.IsUnknown() && !r.OutputSqs.DurationSeconds.IsNull() {
			*durationSeconds5 = r.OutputSqs.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds5 = nil
		}
		maxQueueSize2 := new(float64)
		if !r.OutputSqs.MaxQueueSize.IsUnknown() && !r.OutputSqs.MaxQueueSize.IsNull() {
			*maxQueueSize2 = r.OutputSqs.MaxQueueSize.ValueFloat64()
		} else {
			maxQueueSize2 = nil
		}
		maxRecordSizeKb7 := new(float64)
		if !r.OutputSqs.MaxRecordSizeKB.IsUnknown() && !r.OutputSqs.MaxRecordSizeKB.IsNull() {
			*maxRecordSizeKb7 = r.OutputSqs.MaxRecordSizeKB.ValueFloat64()
		} else {
			maxRecordSizeKb7 = nil
		}
		flushPeriodSec25 := new(float64)
		if !r.OutputSqs.FlushPeriodSec.IsUnknown() && !r.OutputSqs.FlushPeriodSec.IsNull() {
			*flushPeriodSec25 = r.OutputSqs.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec25 = nil
		}
		maxInProgress1 := new(float64)
		if !r.OutputSqs.MaxInProgress.IsUnknown() && !r.OutputSqs.MaxInProgress.IsNull() {
			*maxInProgress1 = r.OutputSqs.MaxInProgress.ValueFloat64()
		} else {
			maxInProgress1 = nil
		}
		onBackpressure36 := new(shared.OutputSqsBackpressureBehavior)
		if !r.OutputSqs.OnBackpressure.IsUnknown() && !r.OutputSqs.OnBackpressure.IsNull() {
			*onBackpressure36 = shared.OutputSqsBackpressureBehavior(r.OutputSqs.OnBackpressure.ValueString())
		} else {
			onBackpressure36 = nil
		}
		description39 := new(string)
		if !r.OutputSqs.Description.IsUnknown() && !r.OutputSqs.Description.IsNull() {
			*description39 = r.OutputSqs.Description.ValueString()
		} else {
			description39 = nil
		}
		awsAPIKey8 := new(string)
		if !r.OutputSqs.AwsAPIKey.IsUnknown() && !r.OutputSqs.AwsAPIKey.IsNull() {
			*awsAPIKey8 = r.OutputSqs.AwsAPIKey.ValueString()
		} else {
			awsAPIKey8 = nil
		}
		awsSecret7 := new(string)
		if !r.OutputSqs.AwsSecret.IsUnknown() && !r.OutputSqs.AwsSecret.IsNull() {
			*awsSecret7 = r.OutputSqs.AwsSecret.ValueString()
		} else {
			awsSecret7 = nil
		}
		pqMaxFileSize30 := new(string)
		if !r.OutputSqs.PqMaxFileSize.IsUnknown() && !r.OutputSqs.PqMaxFileSize.IsNull() {
			*pqMaxFileSize30 = r.OutputSqs.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize30 = nil
		}
		pqMaxSize30 := new(string)
		if !r.OutputSqs.PqMaxSize.IsUnknown() && !r.OutputSqs.PqMaxSize.IsNull() {
			*pqMaxSize30 = r.OutputSqs.PqMaxSize.ValueString()
		} else {
			pqMaxSize30 = nil
		}
		pqPath30 := new(string)
		if !r.OutputSqs.PqPath.IsUnknown() && !r.OutputSqs.PqPath.IsNull() {
			*pqPath30 = r.OutputSqs.PqPath.ValueString()
		} else {
			pqPath30 = nil
		}
		pqCompress30 := new(shared.OutputSqsCompression)
		if !r.OutputSqs.PqCompress.IsUnknown() && !r.OutputSqs.PqCompress.IsNull() {
			*pqCompress30 = shared.OutputSqsCompression(r.OutputSqs.PqCompress.ValueString())
		} else {
			pqCompress30 = nil
		}
		pqOnBackpressure30 := new(shared.OutputSqsQueueFullBehavior)
		if !r.OutputSqs.PqOnBackpressure.IsUnknown() && !r.OutputSqs.PqOnBackpressure.IsNull() {
			*pqOnBackpressure30 = shared.OutputSqsQueueFullBehavior(r.OutputSqs.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure30 = nil
		}
		pqMode30 := new(shared.OutputSqsMode)
		if !r.OutputSqs.PqMode.IsUnknown() && !r.OutputSqs.PqMode.IsNull() {
			*pqMode30 = shared.OutputSqsMode(r.OutputSqs.PqMode.ValueString())
		} else {
			pqMode30 = nil
		}
		var pqControls30 *shared.OutputSqsPqControls
		if r.OutputSqs.PqControls != nil {
			pqControls30 = &shared.OutputSqsPqControls{}
		}
		outputSqs = &shared.OutputSqs{
			ID:                      id39,
			Type:                    typeVar39,
			Pipeline:                pipeline39,
			SystemFields:            systemFields39,
			Environment:             environment39,
			Streamtags:              streamtags39,
			QueueName:               queueName,
			QueueType:               queueType,
			AwsAccountID:            awsAccountID,
			MessageGroupID:          messageGroupId1,
			CreateQueue:             createQueue,
			AwsAuthenticationMethod: awsAuthenticationMethod7,
			AwsSecretKey:            awsSecretKey8,
			Region:                  region12,
			Endpoint:                endpoint8,
			SignatureVersion:        signatureVersion7,
			ReuseConnections:        reuseConnections8,
			RejectUnauthorized:      rejectUnauthorized34,
			EnableAssumeRole:        enableAssumeRole5,
			AssumeRoleArn:           assumeRoleArn5,
			AssumeRoleExternalID:    assumeRoleExternalId5,
			DurationSeconds:         durationSeconds5,
			MaxQueueSize:            maxQueueSize2,
			MaxRecordSizeKB:         maxRecordSizeKb7,
			FlushPeriodSec:          flushPeriodSec25,
			MaxInProgress:           maxInProgress1,
			OnBackpressure:          onBackpressure36,
			Description:             description39,
			AwsAPIKey:               awsAPIKey8,
			AwsSecret:               awsSecret7,
			PqMaxFileSize:           pqMaxFileSize30,
			PqMaxSize:               pqMaxSize30,
			PqPath:                  pqPath30,
			PqCompress:              pqCompress30,
			PqOnBackpressure:        pqOnBackpressure30,
			PqMode:                  pqMode30,
			PqControls:              pqControls30,
		}
	}
	if outputSqs != nil {
		out = shared.Output{
			OutputSqs: outputSqs,
		}
	}
	var outputSnmp *shared.OutputSnmp
	if r.OutputSnmp != nil {
		id40 := new(string)
		if !r.OutputSnmp.ID.IsUnknown() && !r.OutputSnmp.ID.IsNull() {
			*id40 = r.OutputSnmp.ID.ValueString()
		} else {
			id40 = nil
		}
		typeVar40 := shared.OutputSnmpType(r.OutputSnmp.Type.ValueString())
		pipeline40 := new(string)
		if !r.OutputSnmp.Pipeline.IsUnknown() && !r.OutputSnmp.Pipeline.IsNull() {
			*pipeline40 = r.OutputSnmp.Pipeline.ValueString()
		} else {
			pipeline40 = nil
		}
		systemFields40 := make([]string, 0, len(r.OutputSnmp.SystemFields))
		for _, systemFieldsItem40 := range r.OutputSnmp.SystemFields {
			systemFields40 = append(systemFields40, systemFieldsItem40.ValueString())
		}
		environment40 := new(string)
		if !r.OutputSnmp.Environment.IsUnknown() && !r.OutputSnmp.Environment.IsNull() {
			*environment40 = r.OutputSnmp.Environment.ValueString()
		} else {
			environment40 = nil
		}
		streamtags40 := make([]string, 0, len(r.OutputSnmp.Streamtags))
		for _, streamtagsItem40 := range r.OutputSnmp.Streamtags {
			streamtags40 = append(streamtags40, streamtagsItem40.ValueString())
		}
		hosts2 := make([]shared.OutputSnmpHosts, 0, len(r.OutputSnmp.Hosts))
		for _, hostsItem2 := range r.OutputSnmp.Hosts {
			var host8 string
			host8 = hostsItem2.Host.ValueString()

			port8 := new(float64)
			if !hostsItem2.Port.IsUnknown() && !hostsItem2.Port.IsNull() {
				*port8 = hostsItem2.Port.ValueFloat64()
			} else {
				port8 = nil
			}
			hosts2 = append(hosts2, shared.OutputSnmpHosts{
				Host: host8,
				Port: port8,
			})
		}
		dnsResolvePeriodSec8 := new(float64)
		if !r.OutputSnmp.DNSResolvePeriodSec.IsUnknown() && !r.OutputSnmp.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec8 = r.OutputSnmp.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec8 = nil
		}
		description40 := new(string)
		if !r.OutputSnmp.Description.IsUnknown() && !r.OutputSnmp.Description.IsNull() {
			*description40 = r.OutputSnmp.Description.ValueString()
		} else {
			description40 = nil
		}
		outputSnmp = &shared.OutputSnmp{
			ID:                  id40,
			Type:                typeVar40,
			Pipeline:            pipeline40,
			SystemFields:        systemFields40,
			Environment:         environment40,
			Streamtags:          streamtags40,
			Hosts:               hosts2,
			DNSResolvePeriodSec: dnsResolvePeriodSec8,
			Description:         description40,
		}
	}
	if outputSnmp != nil {
		out = shared.Output{
			OutputSnmp: outputSnmp,
		}
	}
	var outputSumoLogic *shared.OutputSumoLogic
	if r.OutputSumoLogic != nil {
		id41 := new(string)
		if !r.OutputSumoLogic.ID.IsUnknown() && !r.OutputSumoLogic.ID.IsNull() {
			*id41 = r.OutputSumoLogic.ID.ValueString()
		} else {
			id41 = nil
		}
		typeVar41 := shared.OutputSumoLogicType(r.OutputSumoLogic.Type.ValueString())
		pipeline41 := new(string)
		if !r.OutputSumoLogic.Pipeline.IsUnknown() && !r.OutputSumoLogic.Pipeline.IsNull() {
			*pipeline41 = r.OutputSumoLogic.Pipeline.ValueString()
		} else {
			pipeline41 = nil
		}
		systemFields41 := make([]string, 0, len(r.OutputSumoLogic.SystemFields))
		for _, systemFieldsItem41 := range r.OutputSumoLogic.SystemFields {
			systemFields41 = append(systemFields41, systemFieldsItem41.ValueString())
		}
		environment41 := new(string)
		if !r.OutputSumoLogic.Environment.IsUnknown() && !r.OutputSumoLogic.Environment.IsNull() {
			*environment41 = r.OutputSumoLogic.Environment.ValueString()
		} else {
			environment41 = nil
		}
		streamtags41 := make([]string, 0, len(r.OutputSumoLogic.Streamtags))
		for _, streamtagsItem41 := range r.OutputSumoLogic.Streamtags {
			streamtags41 = append(streamtags41, streamtagsItem41.ValueString())
		}
		var url9 string
		url9 = r.OutputSumoLogic.URL.ValueString()

		customSource := new(string)
		if !r.OutputSumoLogic.CustomSource.IsUnknown() && !r.OutputSumoLogic.CustomSource.IsNull() {
			*customSource = r.OutputSumoLogic.CustomSource.ValueString()
		} else {
			customSource = nil
		}
		customCategory := new(string)
		if !r.OutputSumoLogic.CustomCategory.IsUnknown() && !r.OutputSumoLogic.CustomCategory.IsNull() {
			*customCategory = r.OutputSumoLogic.CustomCategory.ValueString()
		} else {
			customCategory = nil
		}
		format12 := new(shared.OutputSumoLogicDataFormat)
		if !r.OutputSumoLogic.Format.IsUnknown() && !r.OutputSumoLogic.Format.IsNull() {
			*format12 = shared.OutputSumoLogicDataFormat(r.OutputSumoLogic.Format.ValueString())
		} else {
			format12 = nil
		}
		concurrency16 := new(float64)
		if !r.OutputSumoLogic.Concurrency.IsUnknown() && !r.OutputSumoLogic.Concurrency.IsNull() {
			*concurrency16 = r.OutputSumoLogic.Concurrency.ValueFloat64()
		} else {
			concurrency16 = nil
		}
		maxPayloadSizeKb15 := new(float64)
		if !r.OutputSumoLogic.MaxPayloadSizeKB.IsUnknown() && !r.OutputSumoLogic.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb15 = r.OutputSumoLogic.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb15 = nil
		}
		maxPayloadEvents15 := new(float64)
		if !r.OutputSumoLogic.MaxPayloadEvents.IsUnknown() && !r.OutputSumoLogic.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents15 = r.OutputSumoLogic.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents15 = nil
		}
		compress21 := new(bool)
		if !r.OutputSumoLogic.Compress.IsUnknown() && !r.OutputSumoLogic.Compress.IsNull() {
			*compress21 = r.OutputSumoLogic.Compress.ValueBool()
		} else {
			compress21 = nil
		}
		rejectUnauthorized35 := new(bool)
		if !r.OutputSumoLogic.RejectUnauthorized.IsUnknown() && !r.OutputSumoLogic.RejectUnauthorized.IsNull() {
			*rejectUnauthorized35 = r.OutputSumoLogic.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized35 = nil
		}
		timeoutSec15 := new(float64)
		if !r.OutputSumoLogic.TimeoutSec.IsUnknown() && !r.OutputSumoLogic.TimeoutSec.IsNull() {
			*timeoutSec15 = r.OutputSumoLogic.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec15 = nil
		}
		flushPeriodSec26 := new(float64)
		if !r.OutputSumoLogic.FlushPeriodSec.IsUnknown() && !r.OutputSumoLogic.FlushPeriodSec.IsNull() {
			*flushPeriodSec26 = r.OutputSumoLogic.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec26 = nil
		}
		extraHTTPHeaders13 := make([]shared.OutputSumoLogicExtraHTTPHeaders, 0, len(r.OutputSumoLogic.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem13 := range r.OutputSumoLogic.ExtraHTTPHeaders {
			name20 := new(string)
			if !extraHTTPHeadersItem13.Name.IsUnknown() && !extraHTTPHeadersItem13.Name.IsNull() {
				*name20 = extraHTTPHeadersItem13.Name.ValueString()
			} else {
				name20 = nil
			}
			var value29 string
			value29 = extraHTTPHeadersItem13.Value.ValueString()

			extraHTTPHeaders13 = append(extraHTTPHeaders13, shared.OutputSumoLogicExtraHTTPHeaders{
				Name:  name20,
				Value: value29,
			})
		}
		useRoundRobinDns13 := new(bool)
		if !r.OutputSumoLogic.UseRoundRobinDNS.IsUnknown() && !r.OutputSumoLogic.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns13 = r.OutputSumoLogic.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns13 = nil
		}
		failedRequestLoggingMode13 := new(shared.OutputSumoLogicFailedRequestLoggingMode)
		if !r.OutputSumoLogic.FailedRequestLoggingMode.IsUnknown() && !r.OutputSumoLogic.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode13 = shared.OutputSumoLogicFailedRequestLoggingMode(r.OutputSumoLogic.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode13 = nil
		}
		safeHeaders13 := make([]string, 0, len(r.OutputSumoLogic.SafeHeaders))
		for _, safeHeadersItem13 := range r.OutputSumoLogic.SafeHeaders {
			safeHeaders13 = append(safeHeaders13, safeHeadersItem13.ValueString())
		}
		responseRetrySettings14 := make([]shared.OutputSumoLogicResponseRetrySettings, 0, len(r.OutputSumoLogic.ResponseRetrySettings))
		for _, responseRetrySettingsItem14 := range r.OutputSumoLogic.ResponseRetrySettings {
			var httpStatus14 float64
			httpStatus14 = responseRetrySettingsItem14.HTTPStatus.ValueFloat64()

			initialBackoff32 := new(float64)
			if !responseRetrySettingsItem14.InitialBackoff.IsUnknown() && !responseRetrySettingsItem14.InitialBackoff.IsNull() {
				*initialBackoff32 = responseRetrySettingsItem14.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff32 = nil
			}
			backoffRate32 := new(float64)
			if !responseRetrySettingsItem14.BackoffRate.IsUnknown() && !responseRetrySettingsItem14.BackoffRate.IsNull() {
				*backoffRate32 = responseRetrySettingsItem14.BackoffRate.ValueFloat64()
			} else {
				backoffRate32 = nil
			}
			maxBackoff28 := new(float64)
			if !responseRetrySettingsItem14.MaxBackoff.IsUnknown() && !responseRetrySettingsItem14.MaxBackoff.IsNull() {
				*maxBackoff28 = responseRetrySettingsItem14.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff28 = nil
			}
			responseRetrySettings14 = append(responseRetrySettings14, shared.OutputSumoLogicResponseRetrySettings{
				HTTPStatus:     httpStatus14,
				InitialBackoff: initialBackoff32,
				BackoffRate:    backoffRate32,
				MaxBackoff:     maxBackoff28,
			})
		}
		var timeoutRetrySettings14 *shared.OutputSumoLogicTimeoutRetrySettings
		if r.OutputSumoLogic.TimeoutRetrySettings != nil {
			timeoutRetry14 := new(bool)
			if !r.OutputSumoLogic.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputSumoLogic.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry14 = r.OutputSumoLogic.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry14 = nil
			}
			initialBackoff33 := new(float64)
			if !r.OutputSumoLogic.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputSumoLogic.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff33 = r.OutputSumoLogic.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff33 = nil
			}
			backoffRate33 := new(float64)
			if !r.OutputSumoLogic.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputSumoLogic.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate33 = r.OutputSumoLogic.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate33 = nil
			}
			maxBackoff29 := new(float64)
			if !r.OutputSumoLogic.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputSumoLogic.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff29 = r.OutputSumoLogic.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff29 = nil
			}
			timeoutRetrySettings14 = &shared.OutputSumoLogicTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry14,
				InitialBackoff: initialBackoff33,
				BackoffRate:    backoffRate33,
				MaxBackoff:     maxBackoff29,
			}
		}
		responseHonorRetryAfterHeader14 := new(bool)
		if !r.OutputSumoLogic.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputSumoLogic.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader14 = r.OutputSumoLogic.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader14 = nil
		}
		onBackpressure37 := new(shared.OutputSumoLogicBackpressureBehavior)
		if !r.OutputSumoLogic.OnBackpressure.IsUnknown() && !r.OutputSumoLogic.OnBackpressure.IsNull() {
			*onBackpressure37 = shared.OutputSumoLogicBackpressureBehavior(r.OutputSumoLogic.OnBackpressure.ValueString())
		} else {
			onBackpressure37 = nil
		}
		totalMemoryLimitKb5 := new(float64)
		if !r.OutputSumoLogic.TotalMemoryLimitKB.IsUnknown() && !r.OutputSumoLogic.TotalMemoryLimitKB.IsNull() {
			*totalMemoryLimitKb5 = r.OutputSumoLogic.TotalMemoryLimitKB.ValueFloat64()
		} else {
			totalMemoryLimitKb5 = nil
		}
		description41 := new(string)
		if !r.OutputSumoLogic.Description.IsUnknown() && !r.OutputSumoLogic.Description.IsNull() {
			*description41 = r.OutputSumoLogic.Description.ValueString()
		} else {
			description41 = nil
		}
		pqMaxFileSize31 := new(string)
		if !r.OutputSumoLogic.PqMaxFileSize.IsUnknown() && !r.OutputSumoLogic.PqMaxFileSize.IsNull() {
			*pqMaxFileSize31 = r.OutputSumoLogic.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize31 = nil
		}
		pqMaxSize31 := new(string)
		if !r.OutputSumoLogic.PqMaxSize.IsUnknown() && !r.OutputSumoLogic.PqMaxSize.IsNull() {
			*pqMaxSize31 = r.OutputSumoLogic.PqMaxSize.ValueString()
		} else {
			pqMaxSize31 = nil
		}
		pqPath31 := new(string)
		if !r.OutputSumoLogic.PqPath.IsUnknown() && !r.OutputSumoLogic.PqPath.IsNull() {
			*pqPath31 = r.OutputSumoLogic.PqPath.ValueString()
		} else {
			pqPath31 = nil
		}
		pqCompress31 := new(shared.OutputSumoLogicCompression)
		if !r.OutputSumoLogic.PqCompress.IsUnknown() && !r.OutputSumoLogic.PqCompress.IsNull() {
			*pqCompress31 = shared.OutputSumoLogicCompression(r.OutputSumoLogic.PqCompress.ValueString())
		} else {
			pqCompress31 = nil
		}
		pqOnBackpressure31 := new(shared.OutputSumoLogicQueueFullBehavior)
		if !r.OutputSumoLogic.PqOnBackpressure.IsUnknown() && !r.OutputSumoLogic.PqOnBackpressure.IsNull() {
			*pqOnBackpressure31 = shared.OutputSumoLogicQueueFullBehavior(r.OutputSumoLogic.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure31 = nil
		}
		pqMode31 := new(shared.OutputSumoLogicMode)
		if !r.OutputSumoLogic.PqMode.IsUnknown() && !r.OutputSumoLogic.PqMode.IsNull() {
			*pqMode31 = shared.OutputSumoLogicMode(r.OutputSumoLogic.PqMode.ValueString())
		} else {
			pqMode31 = nil
		}
		var pqControls31 *shared.OutputSumoLogicPqControls
		if r.OutputSumoLogic.PqControls != nil {
			pqControls31 = &shared.OutputSumoLogicPqControls{}
		}
		outputSumoLogic = &shared.OutputSumoLogic{
			ID:                            id41,
			Type:                          typeVar41,
			Pipeline:                      pipeline41,
			SystemFields:                  systemFields41,
			Environment:                   environment41,
			Streamtags:                    streamtags41,
			URL:                           url9,
			CustomSource:                  customSource,
			CustomCategory:                customCategory,
			Format:                        format12,
			Concurrency:                   concurrency16,
			MaxPayloadSizeKB:              maxPayloadSizeKb15,
			MaxPayloadEvents:              maxPayloadEvents15,
			Compress:                      compress21,
			RejectUnauthorized:            rejectUnauthorized35,
			TimeoutSec:                    timeoutSec15,
			FlushPeriodSec:                flushPeriodSec26,
			ExtraHTTPHeaders:              extraHTTPHeaders13,
			UseRoundRobinDNS:              useRoundRobinDns13,
			FailedRequestLoggingMode:      failedRequestLoggingMode13,
			SafeHeaders:                   safeHeaders13,
			ResponseRetrySettings:         responseRetrySettings14,
			TimeoutRetrySettings:          timeoutRetrySettings14,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader14,
			OnBackpressure:                onBackpressure37,
			TotalMemoryLimitKB:            totalMemoryLimitKb5,
			Description:                   description41,
			PqMaxFileSize:                 pqMaxFileSize31,
			PqMaxSize:                     pqMaxSize31,
			PqPath:                        pqPath31,
			PqCompress:                    pqCompress31,
			PqOnBackpressure:              pqOnBackpressure31,
			PqMode:                        pqMode31,
			PqControls:                    pqControls31,
		}
	}
	if outputSumoLogic != nil {
		out = shared.Output{
			OutputSumoLogic: outputSumoLogic,
		}
	}
	var outputDatadog *shared.OutputDatadog
	if r.OutputDatadog != nil {
		var id42 string
		id42 = r.OutputDatadog.ID.ValueString()

		typeVar42 := shared.OutputDatadogType(r.OutputDatadog.Type.ValueString())
		pipeline42 := new(string)
		if !r.OutputDatadog.Pipeline.IsUnknown() && !r.OutputDatadog.Pipeline.IsNull() {
			*pipeline42 = r.OutputDatadog.Pipeline.ValueString()
		} else {
			pipeline42 = nil
		}
		systemFields42 := make([]string, 0, len(r.OutputDatadog.SystemFields))
		for _, systemFieldsItem42 := range r.OutputDatadog.SystemFields {
			systemFields42 = append(systemFields42, systemFieldsItem42.ValueString())
		}
		environment42 := new(string)
		if !r.OutputDatadog.Environment.IsUnknown() && !r.OutputDatadog.Environment.IsNull() {
			*environment42 = r.OutputDatadog.Environment.ValueString()
		} else {
			environment42 = nil
		}
		streamtags42 := make([]string, 0, len(r.OutputDatadog.Streamtags))
		for _, streamtagsItem42 := range r.OutputDatadog.Streamtags {
			streamtags42 = append(streamtags42, streamtagsItem42.ValueString())
		}
		contentType := new(shared.SendLogsAs)
		if !r.OutputDatadog.ContentType.IsUnknown() && !r.OutputDatadog.ContentType.IsNull() {
			*contentType = shared.SendLogsAs(r.OutputDatadog.ContentType.ValueString())
		} else {
			contentType = nil
		}
		message := new(string)
		if !r.OutputDatadog.Message.IsUnknown() && !r.OutputDatadog.Message.IsNull() {
			*message = r.OutputDatadog.Message.ValueString()
		} else {
			message = nil
		}
		source := new(string)
		if !r.OutputDatadog.Source.IsUnknown() && !r.OutputDatadog.Source.IsNull() {
			*source = r.OutputDatadog.Source.ValueString()
		} else {
			source = nil
		}
		host9 := new(string)
		if !r.OutputDatadog.Host.IsUnknown() && !r.OutputDatadog.Host.IsNull() {
			*host9 = r.OutputDatadog.Host.ValueString()
		} else {
			host9 = nil
		}
		service := new(string)
		if !r.OutputDatadog.Service.IsUnknown() && !r.OutputDatadog.Service.IsNull() {
			*service = r.OutputDatadog.Service.ValueString()
		} else {
			service = nil
		}
		tags := make([]string, 0, len(r.OutputDatadog.Tags))
		for _, tagsItem := range r.OutputDatadog.Tags {
			tags = append(tags, tagsItem.ValueString())
		}
		batchByTags := new(bool)
		if !r.OutputDatadog.BatchByTags.IsUnknown() && !r.OutputDatadog.BatchByTags.IsNull() {
			*batchByTags = r.OutputDatadog.BatchByTags.ValueBool()
		} else {
			batchByTags = nil
		}
		allowAPIKeyFromEvents := new(bool)
		if !r.OutputDatadog.AllowAPIKeyFromEvents.IsUnknown() && !r.OutputDatadog.AllowAPIKeyFromEvents.IsNull() {
			*allowAPIKeyFromEvents = r.OutputDatadog.AllowAPIKeyFromEvents.ValueBool()
		} else {
			allowAPIKeyFromEvents = nil
		}
		severity1 := new(shared.OutputDatadogSeverity)
		if !r.OutputDatadog.Severity.IsUnknown() && !r.OutputDatadog.Severity.IsNull() {
			*severity1 = shared.OutputDatadogSeverity(r.OutputDatadog.Severity.ValueString())
		} else {
			severity1 = nil
		}
		site1 := new(shared.DatadogSite)
		if !r.OutputDatadog.Site.IsUnknown() && !r.OutputDatadog.Site.IsNull() {
			*site1 = shared.DatadogSite(r.OutputDatadog.Site.ValueString())
		} else {
			site1 = nil
		}
		sendCountersAsCount := new(bool)
		if !r.OutputDatadog.SendCountersAsCount.IsUnknown() && !r.OutputDatadog.SendCountersAsCount.IsNull() {
			*sendCountersAsCount = r.OutputDatadog.SendCountersAsCount.ValueBool()
		} else {
			sendCountersAsCount = nil
		}
		concurrency17 := new(float64)
		if !r.OutputDatadog.Concurrency.IsUnknown() && !r.OutputDatadog.Concurrency.IsNull() {
			*concurrency17 = r.OutputDatadog.Concurrency.ValueFloat64()
		} else {
			concurrency17 = nil
		}
		maxPayloadSizeKb16 := new(float64)
		if !r.OutputDatadog.MaxPayloadSizeKB.IsUnknown() && !r.OutputDatadog.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb16 = r.OutputDatadog.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb16 = nil
		}
		maxPayloadEvents16 := new(float64)
		if !r.OutputDatadog.MaxPayloadEvents.IsUnknown() && !r.OutputDatadog.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents16 = r.OutputDatadog.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents16 = nil
		}
		compress22 := new(bool)
		if !r.OutputDatadog.Compress.IsUnknown() && !r.OutputDatadog.Compress.IsNull() {
			*compress22 = r.OutputDatadog.Compress.ValueBool()
		} else {
			compress22 = nil
		}
		rejectUnauthorized36 := new(bool)
		if !r.OutputDatadog.RejectUnauthorized.IsUnknown() && !r.OutputDatadog.RejectUnauthorized.IsNull() {
			*rejectUnauthorized36 = r.OutputDatadog.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized36 = nil
		}
		timeoutSec16 := new(float64)
		if !r.OutputDatadog.TimeoutSec.IsUnknown() && !r.OutputDatadog.TimeoutSec.IsNull() {
			*timeoutSec16 = r.OutputDatadog.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec16 = nil
		}
		flushPeriodSec27 := new(float64)
		if !r.OutputDatadog.FlushPeriodSec.IsUnknown() && !r.OutputDatadog.FlushPeriodSec.IsNull() {
			*flushPeriodSec27 = r.OutputDatadog.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec27 = nil
		}
		extraHTTPHeaders14 := make([]shared.OutputDatadogExtraHTTPHeaders, 0, len(r.OutputDatadog.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem14 := range r.OutputDatadog.ExtraHTTPHeaders {
			name21 := new(string)
			if !extraHTTPHeadersItem14.Name.IsUnknown() && !extraHTTPHeadersItem14.Name.IsNull() {
				*name21 = extraHTTPHeadersItem14.Name.ValueString()
			} else {
				name21 = nil
			}
			var value30 string
			value30 = extraHTTPHeadersItem14.Value.ValueString()

			extraHTTPHeaders14 = append(extraHTTPHeaders14, shared.OutputDatadogExtraHTTPHeaders{
				Name:  name21,
				Value: value30,
			})
		}
		useRoundRobinDns14 := new(bool)
		if !r.OutputDatadog.UseRoundRobinDNS.IsUnknown() && !r.OutputDatadog.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns14 = r.OutputDatadog.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns14 = nil
		}
		failedRequestLoggingMode14 := new(shared.OutputDatadogFailedRequestLoggingMode)
		if !r.OutputDatadog.FailedRequestLoggingMode.IsUnknown() && !r.OutputDatadog.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode14 = shared.OutputDatadogFailedRequestLoggingMode(r.OutputDatadog.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode14 = nil
		}
		safeHeaders14 := make([]string, 0, len(r.OutputDatadog.SafeHeaders))
		for _, safeHeadersItem14 := range r.OutputDatadog.SafeHeaders {
			safeHeaders14 = append(safeHeaders14, safeHeadersItem14.ValueString())
		}
		responseRetrySettings15 := make([]shared.OutputDatadogResponseRetrySettings, 0, len(r.OutputDatadog.ResponseRetrySettings))
		for _, responseRetrySettingsItem15 := range r.OutputDatadog.ResponseRetrySettings {
			var httpStatus15 float64
			httpStatus15 = responseRetrySettingsItem15.HTTPStatus.ValueFloat64()

			initialBackoff34 := new(float64)
			if !responseRetrySettingsItem15.InitialBackoff.IsUnknown() && !responseRetrySettingsItem15.InitialBackoff.IsNull() {
				*initialBackoff34 = responseRetrySettingsItem15.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff34 = nil
			}
			backoffRate34 := new(float64)
			if !responseRetrySettingsItem15.BackoffRate.IsUnknown() && !responseRetrySettingsItem15.BackoffRate.IsNull() {
				*backoffRate34 = responseRetrySettingsItem15.BackoffRate.ValueFloat64()
			} else {
				backoffRate34 = nil
			}
			maxBackoff30 := new(float64)
			if !responseRetrySettingsItem15.MaxBackoff.IsUnknown() && !responseRetrySettingsItem15.MaxBackoff.IsNull() {
				*maxBackoff30 = responseRetrySettingsItem15.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff30 = nil
			}
			responseRetrySettings15 = append(responseRetrySettings15, shared.OutputDatadogResponseRetrySettings{
				HTTPStatus:     httpStatus15,
				InitialBackoff: initialBackoff34,
				BackoffRate:    backoffRate34,
				MaxBackoff:     maxBackoff30,
			})
		}
		var timeoutRetrySettings15 *shared.OutputDatadogTimeoutRetrySettings
		if r.OutputDatadog.TimeoutRetrySettings != nil {
			timeoutRetry15 := new(bool)
			if !r.OutputDatadog.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputDatadog.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry15 = r.OutputDatadog.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry15 = nil
			}
			initialBackoff35 := new(float64)
			if !r.OutputDatadog.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputDatadog.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff35 = r.OutputDatadog.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff35 = nil
			}
			backoffRate35 := new(float64)
			if !r.OutputDatadog.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputDatadog.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate35 = r.OutputDatadog.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate35 = nil
			}
			maxBackoff31 := new(float64)
			if !r.OutputDatadog.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputDatadog.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff31 = r.OutputDatadog.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff31 = nil
			}
			timeoutRetrySettings15 = &shared.OutputDatadogTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry15,
				InitialBackoff: initialBackoff35,
				BackoffRate:    backoffRate35,
				MaxBackoff:     maxBackoff31,
			}
		}
		responseHonorRetryAfterHeader15 := new(bool)
		if !r.OutputDatadog.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputDatadog.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader15 = r.OutputDatadog.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader15 = nil
		}
		onBackpressure38 := new(shared.OutputDatadogBackpressureBehavior)
		if !r.OutputDatadog.OnBackpressure.IsUnknown() && !r.OutputDatadog.OnBackpressure.IsNull() {
			*onBackpressure38 = shared.OutputDatadogBackpressureBehavior(r.OutputDatadog.OnBackpressure.ValueString())
		} else {
			onBackpressure38 = nil
		}
		authType18 := new(shared.OutputDatadogAuthenticationMethod)
		if !r.OutputDatadog.AuthType.IsUnknown() && !r.OutputDatadog.AuthType.IsNull() {
			*authType18 = shared.OutputDatadogAuthenticationMethod(r.OutputDatadog.AuthType.ValueString())
		} else {
			authType18 = nil
		}
		totalMemoryLimitKb6 := new(float64)
		if !r.OutputDatadog.TotalMemoryLimitKB.IsUnknown() && !r.OutputDatadog.TotalMemoryLimitKB.IsNull() {
			*totalMemoryLimitKb6 = r.OutputDatadog.TotalMemoryLimitKB.ValueFloat64()
		} else {
			totalMemoryLimitKb6 = nil
		}
		description42 := new(string)
		if !r.OutputDatadog.Description.IsUnknown() && !r.OutputDatadog.Description.IsNull() {
			*description42 = r.OutputDatadog.Description.ValueString()
		} else {
			description42 = nil
		}
		customUrl2 := new(string)
		if !r.OutputDatadog.CustomURL.IsUnknown() && !r.OutputDatadog.CustomURL.IsNull() {
			*customUrl2 = r.OutputDatadog.CustomURL.ValueString()
		} else {
			customUrl2 = nil
		}
		pqMaxFileSize32 := new(string)
		if !r.OutputDatadog.PqMaxFileSize.IsUnknown() && !r.OutputDatadog.PqMaxFileSize.IsNull() {
			*pqMaxFileSize32 = r.OutputDatadog.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize32 = nil
		}
		pqMaxSize32 := new(string)
		if !r.OutputDatadog.PqMaxSize.IsUnknown() && !r.OutputDatadog.PqMaxSize.IsNull() {
			*pqMaxSize32 = r.OutputDatadog.PqMaxSize.ValueString()
		} else {
			pqMaxSize32 = nil
		}
		pqPath32 := new(string)
		if !r.OutputDatadog.PqPath.IsUnknown() && !r.OutputDatadog.PqPath.IsNull() {
			*pqPath32 = r.OutputDatadog.PqPath.ValueString()
		} else {
			pqPath32 = nil
		}
		pqCompress32 := new(shared.OutputDatadogCompression)
		if !r.OutputDatadog.PqCompress.IsUnknown() && !r.OutputDatadog.PqCompress.IsNull() {
			*pqCompress32 = shared.OutputDatadogCompression(r.OutputDatadog.PqCompress.ValueString())
		} else {
			pqCompress32 = nil
		}
		pqOnBackpressure32 := new(shared.OutputDatadogQueueFullBehavior)
		if !r.OutputDatadog.PqOnBackpressure.IsUnknown() && !r.OutputDatadog.PqOnBackpressure.IsNull() {
			*pqOnBackpressure32 = shared.OutputDatadogQueueFullBehavior(r.OutputDatadog.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure32 = nil
		}
		pqMode32 := new(shared.OutputDatadogMode)
		if !r.OutputDatadog.PqMode.IsUnknown() && !r.OutputDatadog.PqMode.IsNull() {
			*pqMode32 = shared.OutputDatadogMode(r.OutputDatadog.PqMode.ValueString())
		} else {
			pqMode32 = nil
		}
		var pqControls32 *shared.OutputDatadogPqControls
		if r.OutputDatadog.PqControls != nil {
			pqControls32 = &shared.OutputDatadogPqControls{}
		}
		apiKey3 := new(string)
		if !r.OutputDatadog.APIKey.IsUnknown() && !r.OutputDatadog.APIKey.IsNull() {
			*apiKey3 = r.OutputDatadog.APIKey.ValueString()
		} else {
			apiKey3 = nil
		}
		textSecret14 := new(string)
		if !r.OutputDatadog.TextSecret.IsUnknown() && !r.OutputDatadog.TextSecret.IsNull() {
			*textSecret14 = r.OutputDatadog.TextSecret.ValueString()
		} else {
			textSecret14 = nil
		}
		outputDatadog = &shared.OutputDatadog{
			ID:                            id42,
			Type:                          typeVar42,
			Pipeline:                      pipeline42,
			SystemFields:                  systemFields42,
			Environment:                   environment42,
			Streamtags:                    streamtags42,
			ContentType:                   contentType,
			Message:                       message,
			Source:                        source,
			Host:                          host9,
			Service:                       service,
			Tags:                          tags,
			BatchByTags:                   batchByTags,
			AllowAPIKeyFromEvents:         allowAPIKeyFromEvents,
			Severity:                      severity1,
			Site:                          site1,
			SendCountersAsCount:           sendCountersAsCount,
			Concurrency:                   concurrency17,
			MaxPayloadSizeKB:              maxPayloadSizeKb16,
			MaxPayloadEvents:              maxPayloadEvents16,
			Compress:                      compress22,
			RejectUnauthorized:            rejectUnauthorized36,
			TimeoutSec:                    timeoutSec16,
			FlushPeriodSec:                flushPeriodSec27,
			ExtraHTTPHeaders:              extraHTTPHeaders14,
			UseRoundRobinDNS:              useRoundRobinDns14,
			FailedRequestLoggingMode:      failedRequestLoggingMode14,
			SafeHeaders:                   safeHeaders14,
			ResponseRetrySettings:         responseRetrySettings15,
			TimeoutRetrySettings:          timeoutRetrySettings15,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader15,
			OnBackpressure:                onBackpressure38,
			AuthType:                      authType18,
			TotalMemoryLimitKB:            totalMemoryLimitKb6,
			Description:                   description42,
			CustomURL:                     customUrl2,
			PqMaxFileSize:                 pqMaxFileSize32,
			PqMaxSize:                     pqMaxSize32,
			PqPath:                        pqPath32,
			PqCompress:                    pqCompress32,
			PqOnBackpressure:              pqOnBackpressure32,
			PqMode:                        pqMode32,
			PqControls:                    pqControls32,
			APIKey:                        apiKey3,
			TextSecret:                    textSecret14,
		}
	}
	if outputDatadog != nil {
		out = shared.Output{
			OutputDatadog: outputDatadog,
		}
	}
	var outputGrafanaCloud *shared.OutputGrafanaCloud
	if r.OutputGrafanaCloud != nil {
		var outputGrafanaCloud1 *shared.OutputGrafanaCloud1
		if r.OutputGrafanaCloud.One != nil {
			var id43 string
			id43 = r.OutputGrafanaCloud.One.ID.ValueString()

			typeVar43 := shared.OutputGrafanaCloudType(r.OutputGrafanaCloud.One.Type.ValueString())
			pipeline43 := new(string)
			if !r.OutputGrafanaCloud.One.Pipeline.IsUnknown() && !r.OutputGrafanaCloud.One.Pipeline.IsNull() {
				*pipeline43 = r.OutputGrafanaCloud.One.Pipeline.ValueString()
			} else {
				pipeline43 = nil
			}
			systemFields43 := make([]string, 0, len(r.OutputGrafanaCloud.One.SystemFields))
			for _, systemFieldsItem43 := range r.OutputGrafanaCloud.One.SystemFields {
				systemFields43 = append(systemFields43, systemFieldsItem43.ValueString())
			}
			environment43 := new(string)
			if !r.OutputGrafanaCloud.One.Environment.IsUnknown() && !r.OutputGrafanaCloud.One.Environment.IsNull() {
				*environment43 = r.OutputGrafanaCloud.One.Environment.ValueString()
			} else {
				environment43 = nil
			}
			streamtags43 := make([]string, 0, len(r.OutputGrafanaCloud.One.Streamtags))
			for _, streamtagsItem43 := range r.OutputGrafanaCloud.One.Streamtags {
				streamtags43 = append(streamtags43, streamtagsItem43.ValueString())
			}
			var lokiURL string
			lokiURL = r.OutputGrafanaCloud.One.LokiURL.ValueString()

			prometheusURL := new(string)
			if !r.OutputGrafanaCloud.One.PrometheusURL.IsUnknown() && !r.OutputGrafanaCloud.One.PrometheusURL.IsNull() {
				*prometheusURL = r.OutputGrafanaCloud.One.PrometheusURL.ValueString()
			} else {
				prometheusURL = nil
			}
			message1 := new(string)
			if !r.OutputGrafanaCloud.One.Message.IsUnknown() && !r.OutputGrafanaCloud.One.Message.IsNull() {
				*message1 = r.OutputGrafanaCloud.One.Message.ValueString()
			} else {
				message1 = nil
			}
			messageFormat1 := new(shared.OutputGrafanaCloudMessageFormat)
			if !r.OutputGrafanaCloud.One.MessageFormat.IsUnknown() && !r.OutputGrafanaCloud.One.MessageFormat.IsNull() {
				*messageFormat1 = shared.OutputGrafanaCloudMessageFormat(r.OutputGrafanaCloud.One.MessageFormat.ValueString())
			} else {
				messageFormat1 = nil
			}
			labels := make([]shared.OutputGrafanaCloud1Labels, 0, len(r.OutputGrafanaCloud.One.Labels))
			for _, labelsItem := range r.OutputGrafanaCloud.One.Labels {
				name22 := new(string)
				if !labelsItem.Name.IsUnknown() && !labelsItem.Name.IsNull() {
					*name22 = labelsItem.Name.ValueString()
				} else {
					name22 = nil
				}
				var value31 string
				value31 = labelsItem.Value.ValueString()

				labels = append(labels, shared.OutputGrafanaCloud1Labels{
					Name:  name22,
					Value: value31,
				})
			}
			metricRenameExpr := new(string)
			if !r.OutputGrafanaCloud.One.MetricRenameExpr.IsUnknown() && !r.OutputGrafanaCloud.One.MetricRenameExpr.IsNull() {
				*metricRenameExpr = r.OutputGrafanaCloud.One.MetricRenameExpr.ValueString()
			} else {
				metricRenameExpr = nil
			}
			var prometheusAuth *shared.OutputGrafanaCloudPrometheusAuth
			if r.OutputGrafanaCloud.One.PrometheusAuth != nil {
				authType19 := new(shared.OutputGrafanaCloudAuthenticationType)
				if !r.OutputGrafanaCloud.One.PrometheusAuth.AuthType.IsUnknown() && !r.OutputGrafanaCloud.One.PrometheusAuth.AuthType.IsNull() {
					*authType19 = shared.OutputGrafanaCloudAuthenticationType(r.OutputGrafanaCloud.One.PrometheusAuth.AuthType.ValueString())
				} else {
					authType19 = nil
				}
				token5 := new(string)
				if !r.OutputGrafanaCloud.One.PrometheusAuth.Token.IsUnknown() && !r.OutputGrafanaCloud.One.PrometheusAuth.Token.IsNull() {
					*token5 = r.OutputGrafanaCloud.One.PrometheusAuth.Token.ValueString()
				} else {
					token5 = nil
				}
				textSecret15 := new(string)
				if !r.OutputGrafanaCloud.One.PrometheusAuth.TextSecret.IsUnknown() && !r.OutputGrafanaCloud.One.PrometheusAuth.TextSecret.IsNull() {
					*textSecret15 = r.OutputGrafanaCloud.One.PrometheusAuth.TextSecret.ValueString()
				} else {
					textSecret15 = nil
				}
				username2 := new(string)
				if !r.OutputGrafanaCloud.One.PrometheusAuth.Username.IsUnknown() && !r.OutputGrafanaCloud.One.PrometheusAuth.Username.IsNull() {
					*username2 = r.OutputGrafanaCloud.One.PrometheusAuth.Username.ValueString()
				} else {
					username2 = nil
				}
				password2 := new(string)
				if !r.OutputGrafanaCloud.One.PrometheusAuth.Password.IsUnknown() && !r.OutputGrafanaCloud.One.PrometheusAuth.Password.IsNull() {
					*password2 = r.OutputGrafanaCloud.One.PrometheusAuth.Password.ValueString()
				} else {
					password2 = nil
				}
				credentialsSecret5 := new(string)
				if !r.OutputGrafanaCloud.One.PrometheusAuth.CredentialsSecret.IsUnknown() && !r.OutputGrafanaCloud.One.PrometheusAuth.CredentialsSecret.IsNull() {
					*credentialsSecret5 = r.OutputGrafanaCloud.One.PrometheusAuth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret5 = nil
				}
				prometheusAuth = &shared.OutputGrafanaCloudPrometheusAuth{
					AuthType:          authType19,
					Token:             token5,
					TextSecret:        textSecret15,
					Username:          username2,
					Password:          password2,
					CredentialsSecret: credentialsSecret5,
				}
			}
			var lokiAuth *shared.OutputGrafanaCloudLokiAuth
			if r.OutputGrafanaCloud.One.LokiAuth != nil {
				authType20 := new(shared.OutputGrafanaCloud1AuthenticationType)
				if !r.OutputGrafanaCloud.One.LokiAuth.AuthType.IsUnknown() && !r.OutputGrafanaCloud.One.LokiAuth.AuthType.IsNull() {
					*authType20 = shared.OutputGrafanaCloud1AuthenticationType(r.OutputGrafanaCloud.One.LokiAuth.AuthType.ValueString())
				} else {
					authType20 = nil
				}
				token6 := new(string)
				if !r.OutputGrafanaCloud.One.LokiAuth.Token.IsUnknown() && !r.OutputGrafanaCloud.One.LokiAuth.Token.IsNull() {
					*token6 = r.OutputGrafanaCloud.One.LokiAuth.Token.ValueString()
				} else {
					token6 = nil
				}
				textSecret16 := new(string)
				if !r.OutputGrafanaCloud.One.LokiAuth.TextSecret.IsUnknown() && !r.OutputGrafanaCloud.One.LokiAuth.TextSecret.IsNull() {
					*textSecret16 = r.OutputGrafanaCloud.One.LokiAuth.TextSecret.ValueString()
				} else {
					textSecret16 = nil
				}
				username3 := new(string)
				if !r.OutputGrafanaCloud.One.LokiAuth.Username.IsUnknown() && !r.OutputGrafanaCloud.One.LokiAuth.Username.IsNull() {
					*username3 = r.OutputGrafanaCloud.One.LokiAuth.Username.ValueString()
				} else {
					username3 = nil
				}
				password3 := new(string)
				if !r.OutputGrafanaCloud.One.LokiAuth.Password.IsUnknown() && !r.OutputGrafanaCloud.One.LokiAuth.Password.IsNull() {
					*password3 = r.OutputGrafanaCloud.One.LokiAuth.Password.ValueString()
				} else {
					password3 = nil
				}
				credentialsSecret6 := new(string)
				if !r.OutputGrafanaCloud.One.LokiAuth.CredentialsSecret.IsUnknown() && !r.OutputGrafanaCloud.One.LokiAuth.CredentialsSecret.IsNull() {
					*credentialsSecret6 = r.OutputGrafanaCloud.One.LokiAuth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret6 = nil
				}
				lokiAuth = &shared.OutputGrafanaCloudLokiAuth{
					AuthType:          authType20,
					Token:             token6,
					TextSecret:        textSecret16,
					Username:          username3,
					Password:          password3,
					CredentialsSecret: credentialsSecret6,
				}
			}
			concurrency18 := new(float64)
			if !r.OutputGrafanaCloud.One.Concurrency.IsUnknown() && !r.OutputGrafanaCloud.One.Concurrency.IsNull() {
				*concurrency18 = r.OutputGrafanaCloud.One.Concurrency.ValueFloat64()
			} else {
				concurrency18 = nil
			}
			maxPayloadSizeKb17 := new(float64)
			if !r.OutputGrafanaCloud.One.MaxPayloadSizeKB.IsUnknown() && !r.OutputGrafanaCloud.One.MaxPayloadSizeKB.IsNull() {
				*maxPayloadSizeKb17 = r.OutputGrafanaCloud.One.MaxPayloadSizeKB.ValueFloat64()
			} else {
				maxPayloadSizeKb17 = nil
			}
			maxPayloadEvents17 := new(float64)
			if !r.OutputGrafanaCloud.One.MaxPayloadEvents.IsUnknown() && !r.OutputGrafanaCloud.One.MaxPayloadEvents.IsNull() {
				*maxPayloadEvents17 = r.OutputGrafanaCloud.One.MaxPayloadEvents.ValueFloat64()
			} else {
				maxPayloadEvents17 = nil
			}
			rejectUnauthorized37 := new(bool)
			if !r.OutputGrafanaCloud.One.RejectUnauthorized.IsUnknown() && !r.OutputGrafanaCloud.One.RejectUnauthorized.IsNull() {
				*rejectUnauthorized37 = r.OutputGrafanaCloud.One.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized37 = nil
			}
			timeoutSec17 := new(float64)
			if !r.OutputGrafanaCloud.One.TimeoutSec.IsUnknown() && !r.OutputGrafanaCloud.One.TimeoutSec.IsNull() {
				*timeoutSec17 = r.OutputGrafanaCloud.One.TimeoutSec.ValueFloat64()
			} else {
				timeoutSec17 = nil
			}
			flushPeriodSec28 := new(float64)
			if !r.OutputGrafanaCloud.One.FlushPeriodSec.IsUnknown() && !r.OutputGrafanaCloud.One.FlushPeriodSec.IsNull() {
				*flushPeriodSec28 = r.OutputGrafanaCloud.One.FlushPeriodSec.ValueFloat64()
			} else {
				flushPeriodSec28 = nil
			}
			extraHTTPHeaders15 := make([]shared.OutputGrafanaCloudExtraHTTPHeaders, 0, len(r.OutputGrafanaCloud.One.ExtraHTTPHeaders))
			for _, extraHTTPHeadersItem15 := range r.OutputGrafanaCloud.One.ExtraHTTPHeaders {
				name23 := new(string)
				if !extraHTTPHeadersItem15.Name.IsUnknown() && !extraHTTPHeadersItem15.Name.IsNull() {
					*name23 = extraHTTPHeadersItem15.Name.ValueString()
				} else {
					name23 = nil
				}
				var value32 string
				value32 = extraHTTPHeadersItem15.Value.ValueString()

				extraHTTPHeaders15 = append(extraHTTPHeaders15, shared.OutputGrafanaCloudExtraHTTPHeaders{
					Name:  name23,
					Value: value32,
				})
			}
			useRoundRobinDns15 := new(bool)
			if !r.OutputGrafanaCloud.One.UseRoundRobinDNS.IsUnknown() && !r.OutputGrafanaCloud.One.UseRoundRobinDNS.IsNull() {
				*useRoundRobinDns15 = r.OutputGrafanaCloud.One.UseRoundRobinDNS.ValueBool()
			} else {
				useRoundRobinDns15 = nil
			}
			failedRequestLoggingMode15 := new(shared.OutputGrafanaCloudFailedRequestLoggingMode)
			if !r.OutputGrafanaCloud.One.FailedRequestLoggingMode.IsUnknown() && !r.OutputGrafanaCloud.One.FailedRequestLoggingMode.IsNull() {
				*failedRequestLoggingMode15 = shared.OutputGrafanaCloudFailedRequestLoggingMode(r.OutputGrafanaCloud.One.FailedRequestLoggingMode.ValueString())
			} else {
				failedRequestLoggingMode15 = nil
			}
			safeHeaders15 := make([]string, 0, len(r.OutputGrafanaCloud.One.SafeHeaders))
			for _, safeHeadersItem15 := range r.OutputGrafanaCloud.One.SafeHeaders {
				safeHeaders15 = append(safeHeaders15, safeHeadersItem15.ValueString())
			}
			responseRetrySettings16 := make([]shared.OutputGrafanaCloudResponseRetrySettings, 0, len(r.OutputGrafanaCloud.One.ResponseRetrySettings))
			for _, responseRetrySettingsItem16 := range r.OutputGrafanaCloud.One.ResponseRetrySettings {
				var httpStatus16 float64
				httpStatus16 = responseRetrySettingsItem16.HTTPStatus.ValueFloat64()

				initialBackoff36 := new(float64)
				if !responseRetrySettingsItem16.InitialBackoff.IsUnknown() && !responseRetrySettingsItem16.InitialBackoff.IsNull() {
					*initialBackoff36 = responseRetrySettingsItem16.InitialBackoff.ValueFloat64()
				} else {
					initialBackoff36 = nil
				}
				backoffRate36 := new(float64)
				if !responseRetrySettingsItem16.BackoffRate.IsUnknown() && !responseRetrySettingsItem16.BackoffRate.IsNull() {
					*backoffRate36 = responseRetrySettingsItem16.BackoffRate.ValueFloat64()
				} else {
					backoffRate36 = nil
				}
				maxBackoff32 := new(float64)
				if !responseRetrySettingsItem16.MaxBackoff.IsUnknown() && !responseRetrySettingsItem16.MaxBackoff.IsNull() {
					*maxBackoff32 = responseRetrySettingsItem16.MaxBackoff.ValueFloat64()
				} else {
					maxBackoff32 = nil
				}
				responseRetrySettings16 = append(responseRetrySettings16, shared.OutputGrafanaCloudResponseRetrySettings{
					HTTPStatus:     httpStatus16,
					InitialBackoff: initialBackoff36,
					BackoffRate:    backoffRate36,
					MaxBackoff:     maxBackoff32,
				})
			}
			var timeoutRetrySettings16 *shared.OutputGrafanaCloudTimeoutRetrySettings
			if r.OutputGrafanaCloud.One.TimeoutRetrySettings != nil {
				timeoutRetry16 := new(bool)
				if !r.OutputGrafanaCloud.One.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputGrafanaCloud.One.TimeoutRetrySettings.TimeoutRetry.IsNull() {
					*timeoutRetry16 = r.OutputGrafanaCloud.One.TimeoutRetrySettings.TimeoutRetry.ValueBool()
				} else {
					timeoutRetry16 = nil
				}
				initialBackoff37 := new(float64)
				if !r.OutputGrafanaCloud.One.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputGrafanaCloud.One.TimeoutRetrySettings.InitialBackoff.IsNull() {
					*initialBackoff37 = r.OutputGrafanaCloud.One.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
				} else {
					initialBackoff37 = nil
				}
				backoffRate37 := new(float64)
				if !r.OutputGrafanaCloud.One.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputGrafanaCloud.One.TimeoutRetrySettings.BackoffRate.IsNull() {
					*backoffRate37 = r.OutputGrafanaCloud.One.TimeoutRetrySettings.BackoffRate.ValueFloat64()
				} else {
					backoffRate37 = nil
				}
				maxBackoff33 := new(float64)
				if !r.OutputGrafanaCloud.One.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputGrafanaCloud.One.TimeoutRetrySettings.MaxBackoff.IsNull() {
					*maxBackoff33 = r.OutputGrafanaCloud.One.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
				} else {
					maxBackoff33 = nil
				}
				timeoutRetrySettings16 = &shared.OutputGrafanaCloudTimeoutRetrySettings{
					TimeoutRetry:   timeoutRetry16,
					InitialBackoff: initialBackoff37,
					BackoffRate:    backoffRate37,
					MaxBackoff:     maxBackoff33,
				}
			}
			responseHonorRetryAfterHeader16 := new(bool)
			if !r.OutputGrafanaCloud.One.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputGrafanaCloud.One.ResponseHonorRetryAfterHeader.IsNull() {
				*responseHonorRetryAfterHeader16 = r.OutputGrafanaCloud.One.ResponseHonorRetryAfterHeader.ValueBool()
			} else {
				responseHonorRetryAfterHeader16 = nil
			}
			onBackpressure39 := new(shared.OutputGrafanaCloudBackpressureBehavior)
			if !r.OutputGrafanaCloud.One.OnBackpressure.IsUnknown() && !r.OutputGrafanaCloud.One.OnBackpressure.IsNull() {
				*onBackpressure39 = shared.OutputGrafanaCloudBackpressureBehavior(r.OutputGrafanaCloud.One.OnBackpressure.ValueString())
			} else {
				onBackpressure39 = nil
			}
			description43 := new(string)
			if !r.OutputGrafanaCloud.One.Description.IsUnknown() && !r.OutputGrafanaCloud.One.Description.IsNull() {
				*description43 = r.OutputGrafanaCloud.One.Description.ValueString()
			} else {
				description43 = nil
			}
			compress23 := new(bool)
			if !r.OutputGrafanaCloud.One.Compress.IsUnknown() && !r.OutputGrafanaCloud.One.Compress.IsNull() {
				*compress23 = r.OutputGrafanaCloud.One.Compress.ValueBool()
			} else {
				compress23 = nil
			}
			pqMaxFileSize33 := new(string)
			if !r.OutputGrafanaCloud.One.PqMaxFileSize.IsUnknown() && !r.OutputGrafanaCloud.One.PqMaxFileSize.IsNull() {
				*pqMaxFileSize33 = r.OutputGrafanaCloud.One.PqMaxFileSize.ValueString()
			} else {
				pqMaxFileSize33 = nil
			}
			pqMaxSize33 := new(string)
			if !r.OutputGrafanaCloud.One.PqMaxSize.IsUnknown() && !r.OutputGrafanaCloud.One.PqMaxSize.IsNull() {
				*pqMaxSize33 = r.OutputGrafanaCloud.One.PqMaxSize.ValueString()
			} else {
				pqMaxSize33 = nil
			}
			pqPath33 := new(string)
			if !r.OutputGrafanaCloud.One.PqPath.IsUnknown() && !r.OutputGrafanaCloud.One.PqPath.IsNull() {
				*pqPath33 = r.OutputGrafanaCloud.One.PqPath.ValueString()
			} else {
				pqPath33 = nil
			}
			pqCompress33 := new(shared.OutputGrafanaCloudCompression)
			if !r.OutputGrafanaCloud.One.PqCompress.IsUnknown() && !r.OutputGrafanaCloud.One.PqCompress.IsNull() {
				*pqCompress33 = shared.OutputGrafanaCloudCompression(r.OutputGrafanaCloud.One.PqCompress.ValueString())
			} else {
				pqCompress33 = nil
			}
			pqOnBackpressure33 := new(shared.OutputGrafanaCloudQueueFullBehavior)
			if !r.OutputGrafanaCloud.One.PqOnBackpressure.IsUnknown() && !r.OutputGrafanaCloud.One.PqOnBackpressure.IsNull() {
				*pqOnBackpressure33 = shared.OutputGrafanaCloudQueueFullBehavior(r.OutputGrafanaCloud.One.PqOnBackpressure.ValueString())
			} else {
				pqOnBackpressure33 = nil
			}
			pqMode33 := new(shared.OutputGrafanaCloudMode)
			if !r.OutputGrafanaCloud.One.PqMode.IsUnknown() && !r.OutputGrafanaCloud.One.PqMode.IsNull() {
				*pqMode33 = shared.OutputGrafanaCloudMode(r.OutputGrafanaCloud.One.PqMode.ValueString())
			} else {
				pqMode33 = nil
			}
			var pqControls33 *shared.OutputGrafanaCloudPqControls
			if r.OutputGrafanaCloud.One.PqControls != nil {
				pqControls33 = &shared.OutputGrafanaCloudPqControls{}
			}
			outputGrafanaCloud1 = &shared.OutputGrafanaCloud1{
				ID:                            id43,
				Type:                          typeVar43,
				Pipeline:                      pipeline43,
				SystemFields:                  systemFields43,
				Environment:                   environment43,
				Streamtags:                    streamtags43,
				LokiURL:                       lokiURL,
				PrometheusURL:                 prometheusURL,
				Message:                       message1,
				MessageFormat:                 messageFormat1,
				Labels:                        labels,
				MetricRenameExpr:              metricRenameExpr,
				PrometheusAuth:                prometheusAuth,
				LokiAuth:                      lokiAuth,
				Concurrency:                   concurrency18,
				MaxPayloadSizeKB:              maxPayloadSizeKb17,
				MaxPayloadEvents:              maxPayloadEvents17,
				RejectUnauthorized:            rejectUnauthorized37,
				TimeoutSec:                    timeoutSec17,
				FlushPeriodSec:                flushPeriodSec28,
				ExtraHTTPHeaders:              extraHTTPHeaders15,
				UseRoundRobinDNS:              useRoundRobinDns15,
				FailedRequestLoggingMode:      failedRequestLoggingMode15,
				SafeHeaders:                   safeHeaders15,
				ResponseRetrySettings:         responseRetrySettings16,
				TimeoutRetrySettings:          timeoutRetrySettings16,
				ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader16,
				OnBackpressure:                onBackpressure39,
				Description:                   description43,
				Compress:                      compress23,
				PqMaxFileSize:                 pqMaxFileSize33,
				PqMaxSize:                     pqMaxSize33,
				PqPath:                        pqPath33,
				PqCompress:                    pqCompress33,
				PqOnBackpressure:              pqOnBackpressure33,
				PqMode:                        pqMode33,
				PqControls:                    pqControls33,
			}
		}
		if outputGrafanaCloud1 != nil {
			outputGrafanaCloud = &shared.OutputGrafanaCloud{
				OutputGrafanaCloud1: outputGrafanaCloud1,
			}
		}
		var outputGrafanaCloud2 *shared.OutputGrafanaCloud2
		if r.OutputGrafanaCloud.Two != nil {
			var id44 string
			id44 = r.OutputGrafanaCloud.Two.ID.ValueString()

			typeVar44 := shared.OutputGrafanaCloud2Type(r.OutputGrafanaCloud.Two.Type.ValueString())
			pipeline44 := new(string)
			if !r.OutputGrafanaCloud.Two.Pipeline.IsUnknown() && !r.OutputGrafanaCloud.Two.Pipeline.IsNull() {
				*pipeline44 = r.OutputGrafanaCloud.Two.Pipeline.ValueString()
			} else {
				pipeline44 = nil
			}
			systemFields44 := make([]string, 0, len(r.OutputGrafanaCloud.Two.SystemFields))
			for _, systemFieldsItem44 := range r.OutputGrafanaCloud.Two.SystemFields {
				systemFields44 = append(systemFields44, systemFieldsItem44.ValueString())
			}
			environment44 := new(string)
			if !r.OutputGrafanaCloud.Two.Environment.IsUnknown() && !r.OutputGrafanaCloud.Two.Environment.IsNull() {
				*environment44 = r.OutputGrafanaCloud.Two.Environment.ValueString()
			} else {
				environment44 = nil
			}
			streamtags44 := make([]string, 0, len(r.OutputGrafanaCloud.Two.Streamtags))
			for _, streamtagsItem44 := range r.OutputGrafanaCloud.Two.Streamtags {
				streamtags44 = append(streamtags44, streamtagsItem44.ValueString())
			}
			lokiUrl1 := new(string)
			if !r.OutputGrafanaCloud.Two.LokiURL.IsUnknown() && !r.OutputGrafanaCloud.Two.LokiURL.IsNull() {
				*lokiUrl1 = r.OutputGrafanaCloud.Two.LokiURL.ValueString()
			} else {
				lokiUrl1 = nil
			}
			var prometheusUrl1 string
			prometheusUrl1 = r.OutputGrafanaCloud.Two.PrometheusURL.ValueString()

			message2 := new(string)
			if !r.OutputGrafanaCloud.Two.Message.IsUnknown() && !r.OutputGrafanaCloud.Two.Message.IsNull() {
				*message2 = r.OutputGrafanaCloud.Two.Message.ValueString()
			} else {
				message2 = nil
			}
			messageFormat2 := new(shared.OutputGrafanaCloud2MessageFormat)
			if !r.OutputGrafanaCloud.Two.MessageFormat.IsUnknown() && !r.OutputGrafanaCloud.Two.MessageFormat.IsNull() {
				*messageFormat2 = shared.OutputGrafanaCloud2MessageFormat(r.OutputGrafanaCloud.Two.MessageFormat.ValueString())
			} else {
				messageFormat2 = nil
			}
			labels1 := make([]shared.OutputGrafanaCloudLabels, 0, len(r.OutputGrafanaCloud.Two.Labels))
			for _, labelsItem1 := range r.OutputGrafanaCloud.Two.Labels {
				name24 := new(string)
				if !labelsItem1.Name.IsUnknown() && !labelsItem1.Name.IsNull() {
					*name24 = labelsItem1.Name.ValueString()
				} else {
					name24 = nil
				}
				var value33 string
				value33 = labelsItem1.Value.ValueString()

				labels1 = append(labels1, shared.OutputGrafanaCloudLabels{
					Name:  name24,
					Value: value33,
				})
			}
			metricRenameExpr1 := new(string)
			if !r.OutputGrafanaCloud.Two.MetricRenameExpr.IsUnknown() && !r.OutputGrafanaCloud.Two.MetricRenameExpr.IsNull() {
				*metricRenameExpr1 = r.OutputGrafanaCloud.Two.MetricRenameExpr.ValueString()
			} else {
				metricRenameExpr1 = nil
			}
			var prometheusAuth1 *shared.OutputGrafanaCloud2PrometheusAuth
			if r.OutputGrafanaCloud.Two.PrometheusAuth != nil {
				authType21 := new(shared.OutputGrafanaCloud2AuthenticationType)
				if !r.OutputGrafanaCloud.Two.PrometheusAuth.AuthType.IsUnknown() && !r.OutputGrafanaCloud.Two.PrometheusAuth.AuthType.IsNull() {
					*authType21 = shared.OutputGrafanaCloud2AuthenticationType(r.OutputGrafanaCloud.Two.PrometheusAuth.AuthType.ValueString())
				} else {
					authType21 = nil
				}
				token7 := new(string)
				if !r.OutputGrafanaCloud.Two.PrometheusAuth.Token.IsUnknown() && !r.OutputGrafanaCloud.Two.PrometheusAuth.Token.IsNull() {
					*token7 = r.OutputGrafanaCloud.Two.PrometheusAuth.Token.ValueString()
				} else {
					token7 = nil
				}
				textSecret17 := new(string)
				if !r.OutputGrafanaCloud.Two.PrometheusAuth.TextSecret.IsUnknown() && !r.OutputGrafanaCloud.Two.PrometheusAuth.TextSecret.IsNull() {
					*textSecret17 = r.OutputGrafanaCloud.Two.PrometheusAuth.TextSecret.ValueString()
				} else {
					textSecret17 = nil
				}
				username4 := new(string)
				if !r.OutputGrafanaCloud.Two.PrometheusAuth.Username.IsUnknown() && !r.OutputGrafanaCloud.Two.PrometheusAuth.Username.IsNull() {
					*username4 = r.OutputGrafanaCloud.Two.PrometheusAuth.Username.ValueString()
				} else {
					username4 = nil
				}
				password4 := new(string)
				if !r.OutputGrafanaCloud.Two.PrometheusAuth.Password.IsUnknown() && !r.OutputGrafanaCloud.Two.PrometheusAuth.Password.IsNull() {
					*password4 = r.OutputGrafanaCloud.Two.PrometheusAuth.Password.ValueString()
				} else {
					password4 = nil
				}
				credentialsSecret7 := new(string)
				if !r.OutputGrafanaCloud.Two.PrometheusAuth.CredentialsSecret.IsUnknown() && !r.OutputGrafanaCloud.Two.PrometheusAuth.CredentialsSecret.IsNull() {
					*credentialsSecret7 = r.OutputGrafanaCloud.Two.PrometheusAuth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret7 = nil
				}
				prometheusAuth1 = &shared.OutputGrafanaCloud2PrometheusAuth{
					AuthType:          authType21,
					Token:             token7,
					TextSecret:        textSecret17,
					Username:          username4,
					Password:          password4,
					CredentialsSecret: credentialsSecret7,
				}
			}
			var lokiAuth1 *shared.OutputGrafanaCloud2LokiAuth
			if r.OutputGrafanaCloud.Two.LokiAuth != nil {
				authType22 := new(shared.OutputGrafanaCloud2LokiAuthAuthenticationType)
				if !r.OutputGrafanaCloud.Two.LokiAuth.AuthType.IsUnknown() && !r.OutputGrafanaCloud.Two.LokiAuth.AuthType.IsNull() {
					*authType22 = shared.OutputGrafanaCloud2LokiAuthAuthenticationType(r.OutputGrafanaCloud.Two.LokiAuth.AuthType.ValueString())
				} else {
					authType22 = nil
				}
				token8 := new(string)
				if !r.OutputGrafanaCloud.Two.LokiAuth.Token.IsUnknown() && !r.OutputGrafanaCloud.Two.LokiAuth.Token.IsNull() {
					*token8 = r.OutputGrafanaCloud.Two.LokiAuth.Token.ValueString()
				} else {
					token8 = nil
				}
				textSecret18 := new(string)
				if !r.OutputGrafanaCloud.Two.LokiAuth.TextSecret.IsUnknown() && !r.OutputGrafanaCloud.Two.LokiAuth.TextSecret.IsNull() {
					*textSecret18 = r.OutputGrafanaCloud.Two.LokiAuth.TextSecret.ValueString()
				} else {
					textSecret18 = nil
				}
				username5 := new(string)
				if !r.OutputGrafanaCloud.Two.LokiAuth.Username.IsUnknown() && !r.OutputGrafanaCloud.Two.LokiAuth.Username.IsNull() {
					*username5 = r.OutputGrafanaCloud.Two.LokiAuth.Username.ValueString()
				} else {
					username5 = nil
				}
				password5 := new(string)
				if !r.OutputGrafanaCloud.Two.LokiAuth.Password.IsUnknown() && !r.OutputGrafanaCloud.Two.LokiAuth.Password.IsNull() {
					*password5 = r.OutputGrafanaCloud.Two.LokiAuth.Password.ValueString()
				} else {
					password5 = nil
				}
				credentialsSecret8 := new(string)
				if !r.OutputGrafanaCloud.Two.LokiAuth.CredentialsSecret.IsUnknown() && !r.OutputGrafanaCloud.Two.LokiAuth.CredentialsSecret.IsNull() {
					*credentialsSecret8 = r.OutputGrafanaCloud.Two.LokiAuth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret8 = nil
				}
				lokiAuth1 = &shared.OutputGrafanaCloud2LokiAuth{
					AuthType:          authType22,
					Token:             token8,
					TextSecret:        textSecret18,
					Username:          username5,
					Password:          password5,
					CredentialsSecret: credentialsSecret8,
				}
			}
			concurrency19 := new(float64)
			if !r.OutputGrafanaCloud.Two.Concurrency.IsUnknown() && !r.OutputGrafanaCloud.Two.Concurrency.IsNull() {
				*concurrency19 = r.OutputGrafanaCloud.Two.Concurrency.ValueFloat64()
			} else {
				concurrency19 = nil
			}
			maxPayloadSizeKb18 := new(float64)
			if !r.OutputGrafanaCloud.Two.MaxPayloadSizeKB.IsUnknown() && !r.OutputGrafanaCloud.Two.MaxPayloadSizeKB.IsNull() {
				*maxPayloadSizeKb18 = r.OutputGrafanaCloud.Two.MaxPayloadSizeKB.ValueFloat64()
			} else {
				maxPayloadSizeKb18 = nil
			}
			maxPayloadEvents18 := new(float64)
			if !r.OutputGrafanaCloud.Two.MaxPayloadEvents.IsUnknown() && !r.OutputGrafanaCloud.Two.MaxPayloadEvents.IsNull() {
				*maxPayloadEvents18 = r.OutputGrafanaCloud.Two.MaxPayloadEvents.ValueFloat64()
			} else {
				maxPayloadEvents18 = nil
			}
			rejectUnauthorized38 := new(bool)
			if !r.OutputGrafanaCloud.Two.RejectUnauthorized.IsUnknown() && !r.OutputGrafanaCloud.Two.RejectUnauthorized.IsNull() {
				*rejectUnauthorized38 = r.OutputGrafanaCloud.Two.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized38 = nil
			}
			timeoutSec18 := new(float64)
			if !r.OutputGrafanaCloud.Two.TimeoutSec.IsUnknown() && !r.OutputGrafanaCloud.Two.TimeoutSec.IsNull() {
				*timeoutSec18 = r.OutputGrafanaCloud.Two.TimeoutSec.ValueFloat64()
			} else {
				timeoutSec18 = nil
			}
			flushPeriodSec29 := new(float64)
			if !r.OutputGrafanaCloud.Two.FlushPeriodSec.IsUnknown() && !r.OutputGrafanaCloud.Two.FlushPeriodSec.IsNull() {
				*flushPeriodSec29 = r.OutputGrafanaCloud.Two.FlushPeriodSec.ValueFloat64()
			} else {
				flushPeriodSec29 = nil
			}
			extraHTTPHeaders16 := make([]shared.OutputGrafanaCloud2ExtraHTTPHeaders, 0, len(r.OutputGrafanaCloud.Two.ExtraHTTPHeaders))
			for _, extraHTTPHeadersItem16 := range r.OutputGrafanaCloud.Two.ExtraHTTPHeaders {
				name25 := new(string)
				if !extraHTTPHeadersItem16.Name.IsUnknown() && !extraHTTPHeadersItem16.Name.IsNull() {
					*name25 = extraHTTPHeadersItem16.Name.ValueString()
				} else {
					name25 = nil
				}
				var value34 string
				value34 = extraHTTPHeadersItem16.Value.ValueString()

				extraHTTPHeaders16 = append(extraHTTPHeaders16, shared.OutputGrafanaCloud2ExtraHTTPHeaders{
					Name:  name25,
					Value: value34,
				})
			}
			useRoundRobinDns16 := new(bool)
			if !r.OutputGrafanaCloud.Two.UseRoundRobinDNS.IsUnknown() && !r.OutputGrafanaCloud.Two.UseRoundRobinDNS.IsNull() {
				*useRoundRobinDns16 = r.OutputGrafanaCloud.Two.UseRoundRobinDNS.ValueBool()
			} else {
				useRoundRobinDns16 = nil
			}
			failedRequestLoggingMode16 := new(shared.OutputGrafanaCloud2FailedRequestLoggingMode)
			if !r.OutputGrafanaCloud.Two.FailedRequestLoggingMode.IsUnknown() && !r.OutputGrafanaCloud.Two.FailedRequestLoggingMode.IsNull() {
				*failedRequestLoggingMode16 = shared.OutputGrafanaCloud2FailedRequestLoggingMode(r.OutputGrafanaCloud.Two.FailedRequestLoggingMode.ValueString())
			} else {
				failedRequestLoggingMode16 = nil
			}
			safeHeaders16 := make([]string, 0, len(r.OutputGrafanaCloud.Two.SafeHeaders))
			for _, safeHeadersItem16 := range r.OutputGrafanaCloud.Two.SafeHeaders {
				safeHeaders16 = append(safeHeaders16, safeHeadersItem16.ValueString())
			}
			responseRetrySettings17 := make([]shared.OutputGrafanaCloud2ResponseRetrySettings, 0, len(r.OutputGrafanaCloud.Two.ResponseRetrySettings))
			for _, responseRetrySettingsItem17 := range r.OutputGrafanaCloud.Two.ResponseRetrySettings {
				var httpStatus17 float64
				httpStatus17 = responseRetrySettingsItem17.HTTPStatus.ValueFloat64()

				initialBackoff38 := new(float64)
				if !responseRetrySettingsItem17.InitialBackoff.IsUnknown() && !responseRetrySettingsItem17.InitialBackoff.IsNull() {
					*initialBackoff38 = responseRetrySettingsItem17.InitialBackoff.ValueFloat64()
				} else {
					initialBackoff38 = nil
				}
				backoffRate38 := new(float64)
				if !responseRetrySettingsItem17.BackoffRate.IsUnknown() && !responseRetrySettingsItem17.BackoffRate.IsNull() {
					*backoffRate38 = responseRetrySettingsItem17.BackoffRate.ValueFloat64()
				} else {
					backoffRate38 = nil
				}
				maxBackoff34 := new(float64)
				if !responseRetrySettingsItem17.MaxBackoff.IsUnknown() && !responseRetrySettingsItem17.MaxBackoff.IsNull() {
					*maxBackoff34 = responseRetrySettingsItem17.MaxBackoff.ValueFloat64()
				} else {
					maxBackoff34 = nil
				}
				responseRetrySettings17 = append(responseRetrySettings17, shared.OutputGrafanaCloud2ResponseRetrySettings{
					HTTPStatus:     httpStatus17,
					InitialBackoff: initialBackoff38,
					BackoffRate:    backoffRate38,
					MaxBackoff:     maxBackoff34,
				})
			}
			var timeoutRetrySettings17 *shared.OutputGrafanaCloud2TimeoutRetrySettings
			if r.OutputGrafanaCloud.Two.TimeoutRetrySettings != nil {
				timeoutRetry17 := new(bool)
				if !r.OutputGrafanaCloud.Two.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputGrafanaCloud.Two.TimeoutRetrySettings.TimeoutRetry.IsNull() {
					*timeoutRetry17 = r.OutputGrafanaCloud.Two.TimeoutRetrySettings.TimeoutRetry.ValueBool()
				} else {
					timeoutRetry17 = nil
				}
				initialBackoff39 := new(float64)
				if !r.OutputGrafanaCloud.Two.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputGrafanaCloud.Two.TimeoutRetrySettings.InitialBackoff.IsNull() {
					*initialBackoff39 = r.OutputGrafanaCloud.Two.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
				} else {
					initialBackoff39 = nil
				}
				backoffRate39 := new(float64)
				if !r.OutputGrafanaCloud.Two.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputGrafanaCloud.Two.TimeoutRetrySettings.BackoffRate.IsNull() {
					*backoffRate39 = r.OutputGrafanaCloud.Two.TimeoutRetrySettings.BackoffRate.ValueFloat64()
				} else {
					backoffRate39 = nil
				}
				maxBackoff35 := new(float64)
				if !r.OutputGrafanaCloud.Two.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputGrafanaCloud.Two.TimeoutRetrySettings.MaxBackoff.IsNull() {
					*maxBackoff35 = r.OutputGrafanaCloud.Two.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
				} else {
					maxBackoff35 = nil
				}
				timeoutRetrySettings17 = &shared.OutputGrafanaCloud2TimeoutRetrySettings{
					TimeoutRetry:   timeoutRetry17,
					InitialBackoff: initialBackoff39,
					BackoffRate:    backoffRate39,
					MaxBackoff:     maxBackoff35,
				}
			}
			responseHonorRetryAfterHeader17 := new(bool)
			if !r.OutputGrafanaCloud.Two.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputGrafanaCloud.Two.ResponseHonorRetryAfterHeader.IsNull() {
				*responseHonorRetryAfterHeader17 = r.OutputGrafanaCloud.Two.ResponseHonorRetryAfterHeader.ValueBool()
			} else {
				responseHonorRetryAfterHeader17 = nil
			}
			onBackpressure40 := new(shared.OutputGrafanaCloud2BackpressureBehavior)
			if !r.OutputGrafanaCloud.Two.OnBackpressure.IsUnknown() && !r.OutputGrafanaCloud.Two.OnBackpressure.IsNull() {
				*onBackpressure40 = shared.OutputGrafanaCloud2BackpressureBehavior(r.OutputGrafanaCloud.Two.OnBackpressure.ValueString())
			} else {
				onBackpressure40 = nil
			}
			description44 := new(string)
			if !r.OutputGrafanaCloud.Two.Description.IsUnknown() && !r.OutputGrafanaCloud.Two.Description.IsNull() {
				*description44 = r.OutputGrafanaCloud.Two.Description.ValueString()
			} else {
				description44 = nil
			}
			compress24 := new(bool)
			if !r.OutputGrafanaCloud.Two.Compress.IsUnknown() && !r.OutputGrafanaCloud.Two.Compress.IsNull() {
				*compress24 = r.OutputGrafanaCloud.Two.Compress.ValueBool()
			} else {
				compress24 = nil
			}
			pqMaxFileSize34 := new(string)
			if !r.OutputGrafanaCloud.Two.PqMaxFileSize.IsUnknown() && !r.OutputGrafanaCloud.Two.PqMaxFileSize.IsNull() {
				*pqMaxFileSize34 = r.OutputGrafanaCloud.Two.PqMaxFileSize.ValueString()
			} else {
				pqMaxFileSize34 = nil
			}
			pqMaxSize34 := new(string)
			if !r.OutputGrafanaCloud.Two.PqMaxSize.IsUnknown() && !r.OutputGrafanaCloud.Two.PqMaxSize.IsNull() {
				*pqMaxSize34 = r.OutputGrafanaCloud.Two.PqMaxSize.ValueString()
			} else {
				pqMaxSize34 = nil
			}
			pqPath34 := new(string)
			if !r.OutputGrafanaCloud.Two.PqPath.IsUnknown() && !r.OutputGrafanaCloud.Two.PqPath.IsNull() {
				*pqPath34 = r.OutputGrafanaCloud.Two.PqPath.ValueString()
			} else {
				pqPath34 = nil
			}
			pqCompress34 := new(shared.OutputGrafanaCloud2Compression)
			if !r.OutputGrafanaCloud.Two.PqCompress.IsUnknown() && !r.OutputGrafanaCloud.Two.PqCompress.IsNull() {
				*pqCompress34 = shared.OutputGrafanaCloud2Compression(r.OutputGrafanaCloud.Two.PqCompress.ValueString())
			} else {
				pqCompress34 = nil
			}
			pqOnBackpressure34 := new(shared.OutputGrafanaCloud2QueueFullBehavior)
			if !r.OutputGrafanaCloud.Two.PqOnBackpressure.IsUnknown() && !r.OutputGrafanaCloud.Two.PqOnBackpressure.IsNull() {
				*pqOnBackpressure34 = shared.OutputGrafanaCloud2QueueFullBehavior(r.OutputGrafanaCloud.Two.PqOnBackpressure.ValueString())
			} else {
				pqOnBackpressure34 = nil
			}
			pqMode34 := new(shared.OutputGrafanaCloud2Mode)
			if !r.OutputGrafanaCloud.Two.PqMode.IsUnknown() && !r.OutputGrafanaCloud.Two.PqMode.IsNull() {
				*pqMode34 = shared.OutputGrafanaCloud2Mode(r.OutputGrafanaCloud.Two.PqMode.ValueString())
			} else {
				pqMode34 = nil
			}
			var pqControls34 *shared.OutputGrafanaCloud2PqControls
			if r.OutputGrafanaCloud.Two.PqControls != nil {
				pqControls34 = &shared.OutputGrafanaCloud2PqControls{}
			}
			outputGrafanaCloud2 = &shared.OutputGrafanaCloud2{
				ID:                            id44,
				Type:                          typeVar44,
				Pipeline:                      pipeline44,
				SystemFields:                  systemFields44,
				Environment:                   environment44,
				Streamtags:                    streamtags44,
				LokiURL:                       lokiUrl1,
				PrometheusURL:                 prometheusUrl1,
				Message:                       message2,
				MessageFormat:                 messageFormat2,
				Labels:                        labels1,
				MetricRenameExpr:              metricRenameExpr1,
				PrometheusAuth:                prometheusAuth1,
				LokiAuth:                      lokiAuth1,
				Concurrency:                   concurrency19,
				MaxPayloadSizeKB:              maxPayloadSizeKb18,
				MaxPayloadEvents:              maxPayloadEvents18,
				RejectUnauthorized:            rejectUnauthorized38,
				TimeoutSec:                    timeoutSec18,
				FlushPeriodSec:                flushPeriodSec29,
				ExtraHTTPHeaders:              extraHTTPHeaders16,
				UseRoundRobinDNS:              useRoundRobinDns16,
				FailedRequestLoggingMode:      failedRequestLoggingMode16,
				SafeHeaders:                   safeHeaders16,
				ResponseRetrySettings:         responseRetrySettings17,
				TimeoutRetrySettings:          timeoutRetrySettings17,
				ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader17,
				OnBackpressure:                onBackpressure40,
				Description:                   description44,
				Compress:                      compress24,
				PqMaxFileSize:                 pqMaxFileSize34,
				PqMaxSize:                     pqMaxSize34,
				PqPath:                        pqPath34,
				PqCompress:                    pqCompress34,
				PqOnBackpressure:              pqOnBackpressure34,
				PqMode:                        pqMode34,
				PqControls:                    pqControls34,
			}
		}
		if outputGrafanaCloud2 != nil {
			outputGrafanaCloud = &shared.OutputGrafanaCloud{
				OutputGrafanaCloud2: outputGrafanaCloud2,
			}
		}
	}
	if outputGrafanaCloud != nil {
		out = shared.Output{
			OutputGrafanaCloud: outputGrafanaCloud,
		}
	}
	var outputLoki *shared.OutputLoki
	if r.OutputLoki != nil {
		id45 := new(string)
		if !r.OutputLoki.ID.IsUnknown() && !r.OutputLoki.ID.IsNull() {
			*id45 = r.OutputLoki.ID.ValueString()
		} else {
			id45 = nil
		}
		typeVar45 := shared.OutputLokiType(r.OutputLoki.Type.ValueString())
		pipeline45 := new(string)
		if !r.OutputLoki.Pipeline.IsUnknown() && !r.OutputLoki.Pipeline.IsNull() {
			*pipeline45 = r.OutputLoki.Pipeline.ValueString()
		} else {
			pipeline45 = nil
		}
		systemFields45 := make([]string, 0, len(r.OutputLoki.SystemFields))
		for _, systemFieldsItem45 := range r.OutputLoki.SystemFields {
			systemFields45 = append(systemFields45, systemFieldsItem45.ValueString())
		}
		environment45 := new(string)
		if !r.OutputLoki.Environment.IsUnknown() && !r.OutputLoki.Environment.IsNull() {
			*environment45 = r.OutputLoki.Environment.ValueString()
		} else {
			environment45 = nil
		}
		streamtags45 := make([]string, 0, len(r.OutputLoki.Streamtags))
		for _, streamtagsItem45 := range r.OutputLoki.Streamtags {
			streamtags45 = append(streamtags45, streamtagsItem45.ValueString())
		}
		var url10 string
		url10 = r.OutputLoki.URL.ValueString()

		message3 := new(string)
		if !r.OutputLoki.Message.IsUnknown() && !r.OutputLoki.Message.IsNull() {
			*message3 = r.OutputLoki.Message.ValueString()
		} else {
			message3 = nil
		}
		messageFormat3 := new(shared.OutputLokiMessageFormat)
		if !r.OutputLoki.MessageFormat.IsUnknown() && !r.OutputLoki.MessageFormat.IsNull() {
			*messageFormat3 = shared.OutputLokiMessageFormat(r.OutputLoki.MessageFormat.ValueString())
		} else {
			messageFormat3 = nil
		}
		labels2 := make([]shared.Labels, 0, len(r.OutputLoki.Labels))
		for _, labelsItem2 := range r.OutputLoki.Labels {
			name26 := new(string)
			if !labelsItem2.Name.IsUnknown() && !labelsItem2.Name.IsNull() {
				*name26 = labelsItem2.Name.ValueString()
			} else {
				name26 = nil
			}
			var value35 string
			value35 = labelsItem2.Value.ValueString()

			labels2 = append(labels2, shared.Labels{
				Name:  name26,
				Value: value35,
			})
		}
		authType23 := new(shared.OutputLokiAuthenticationType)
		if !r.OutputLoki.AuthType.IsUnknown() && !r.OutputLoki.AuthType.IsNull() {
			*authType23 = shared.OutputLokiAuthenticationType(r.OutputLoki.AuthType.ValueString())
		} else {
			authType23 = nil
		}
		concurrency20 := new(float64)
		if !r.OutputLoki.Concurrency.IsUnknown() && !r.OutputLoki.Concurrency.IsNull() {
			*concurrency20 = r.OutputLoki.Concurrency.ValueFloat64()
		} else {
			concurrency20 = nil
		}
		maxPayloadSizeKb19 := new(float64)
		if !r.OutputLoki.MaxPayloadSizeKB.IsUnknown() && !r.OutputLoki.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb19 = r.OutputLoki.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb19 = nil
		}
		maxPayloadEvents19 := new(float64)
		if !r.OutputLoki.MaxPayloadEvents.IsUnknown() && !r.OutputLoki.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents19 = r.OutputLoki.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents19 = nil
		}
		rejectUnauthorized39 := new(bool)
		if !r.OutputLoki.RejectUnauthorized.IsUnknown() && !r.OutputLoki.RejectUnauthorized.IsNull() {
			*rejectUnauthorized39 = r.OutputLoki.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized39 = nil
		}
		timeoutSec19 := new(float64)
		if !r.OutputLoki.TimeoutSec.IsUnknown() && !r.OutputLoki.TimeoutSec.IsNull() {
			*timeoutSec19 = r.OutputLoki.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec19 = nil
		}
		flushPeriodSec30 := new(float64)
		if !r.OutputLoki.FlushPeriodSec.IsUnknown() && !r.OutputLoki.FlushPeriodSec.IsNull() {
			*flushPeriodSec30 = r.OutputLoki.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec30 = nil
		}
		extraHTTPHeaders17 := make([]shared.OutputLokiExtraHTTPHeaders, 0, len(r.OutputLoki.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem17 := range r.OutputLoki.ExtraHTTPHeaders {
			name27 := new(string)
			if !extraHTTPHeadersItem17.Name.IsUnknown() && !extraHTTPHeadersItem17.Name.IsNull() {
				*name27 = extraHTTPHeadersItem17.Name.ValueString()
			} else {
				name27 = nil
			}
			var value36 string
			value36 = extraHTTPHeadersItem17.Value.ValueString()

			extraHTTPHeaders17 = append(extraHTTPHeaders17, shared.OutputLokiExtraHTTPHeaders{
				Name:  name27,
				Value: value36,
			})
		}
		useRoundRobinDns17 := new(bool)
		if !r.OutputLoki.UseRoundRobinDNS.IsUnknown() && !r.OutputLoki.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns17 = r.OutputLoki.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns17 = nil
		}
		failedRequestLoggingMode17 := new(shared.OutputLokiFailedRequestLoggingMode)
		if !r.OutputLoki.FailedRequestLoggingMode.IsUnknown() && !r.OutputLoki.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode17 = shared.OutputLokiFailedRequestLoggingMode(r.OutputLoki.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode17 = nil
		}
		safeHeaders17 := make([]string, 0, len(r.OutputLoki.SafeHeaders))
		for _, safeHeadersItem17 := range r.OutputLoki.SafeHeaders {
			safeHeaders17 = append(safeHeaders17, safeHeadersItem17.ValueString())
		}
		responseRetrySettings18 := make([]shared.OutputLokiResponseRetrySettings, 0, len(r.OutputLoki.ResponseRetrySettings))
		for _, responseRetrySettingsItem18 := range r.OutputLoki.ResponseRetrySettings {
			var httpStatus18 float64
			httpStatus18 = responseRetrySettingsItem18.HTTPStatus.ValueFloat64()

			initialBackoff40 := new(float64)
			if !responseRetrySettingsItem18.InitialBackoff.IsUnknown() && !responseRetrySettingsItem18.InitialBackoff.IsNull() {
				*initialBackoff40 = responseRetrySettingsItem18.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff40 = nil
			}
			backoffRate40 := new(float64)
			if !responseRetrySettingsItem18.BackoffRate.IsUnknown() && !responseRetrySettingsItem18.BackoffRate.IsNull() {
				*backoffRate40 = responseRetrySettingsItem18.BackoffRate.ValueFloat64()
			} else {
				backoffRate40 = nil
			}
			maxBackoff36 := new(float64)
			if !responseRetrySettingsItem18.MaxBackoff.IsUnknown() && !responseRetrySettingsItem18.MaxBackoff.IsNull() {
				*maxBackoff36 = responseRetrySettingsItem18.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff36 = nil
			}
			responseRetrySettings18 = append(responseRetrySettings18, shared.OutputLokiResponseRetrySettings{
				HTTPStatus:     httpStatus18,
				InitialBackoff: initialBackoff40,
				BackoffRate:    backoffRate40,
				MaxBackoff:     maxBackoff36,
			})
		}
		var timeoutRetrySettings18 *shared.OutputLokiTimeoutRetrySettings
		if r.OutputLoki.TimeoutRetrySettings != nil {
			timeoutRetry18 := new(bool)
			if !r.OutputLoki.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputLoki.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry18 = r.OutputLoki.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry18 = nil
			}
			initialBackoff41 := new(float64)
			if !r.OutputLoki.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputLoki.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff41 = r.OutputLoki.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff41 = nil
			}
			backoffRate41 := new(float64)
			if !r.OutputLoki.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputLoki.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate41 = r.OutputLoki.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate41 = nil
			}
			maxBackoff37 := new(float64)
			if !r.OutputLoki.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputLoki.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff37 = r.OutputLoki.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff37 = nil
			}
			timeoutRetrySettings18 = &shared.OutputLokiTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry18,
				InitialBackoff: initialBackoff41,
				BackoffRate:    backoffRate41,
				MaxBackoff:     maxBackoff37,
			}
		}
		responseHonorRetryAfterHeader18 := new(bool)
		if !r.OutputLoki.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputLoki.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader18 = r.OutputLoki.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader18 = nil
		}
		onBackpressure41 := new(shared.OutputLokiBackpressureBehavior)
		if !r.OutputLoki.OnBackpressure.IsUnknown() && !r.OutputLoki.OnBackpressure.IsNull() {
			*onBackpressure41 = shared.OutputLokiBackpressureBehavior(r.OutputLoki.OnBackpressure.ValueString())
		} else {
			onBackpressure41 = nil
		}
		totalMemoryLimitKb7 := new(float64)
		if !r.OutputLoki.TotalMemoryLimitKB.IsUnknown() && !r.OutputLoki.TotalMemoryLimitKB.IsNull() {
			*totalMemoryLimitKb7 = r.OutputLoki.TotalMemoryLimitKB.ValueFloat64()
		} else {
			totalMemoryLimitKb7 = nil
		}
		description45 := new(string)
		if !r.OutputLoki.Description.IsUnknown() && !r.OutputLoki.Description.IsNull() {
			*description45 = r.OutputLoki.Description.ValueString()
		} else {
			description45 = nil
		}
		compress25 := new(bool)
		if !r.OutputLoki.Compress.IsUnknown() && !r.OutputLoki.Compress.IsNull() {
			*compress25 = r.OutputLoki.Compress.ValueBool()
		} else {
			compress25 = nil
		}
		token9 := new(string)
		if !r.OutputLoki.Token.IsUnknown() && !r.OutputLoki.Token.IsNull() {
			*token9 = r.OutputLoki.Token.ValueString()
		} else {
			token9 = nil
		}
		textSecret19 := new(string)
		if !r.OutputLoki.TextSecret.IsUnknown() && !r.OutputLoki.TextSecret.IsNull() {
			*textSecret19 = r.OutputLoki.TextSecret.ValueString()
		} else {
			textSecret19 = nil
		}
		username6 := new(string)
		if !r.OutputLoki.Username.IsUnknown() && !r.OutputLoki.Username.IsNull() {
			*username6 = r.OutputLoki.Username.ValueString()
		} else {
			username6 = nil
		}
		password6 := new(string)
		if !r.OutputLoki.Password.IsUnknown() && !r.OutputLoki.Password.IsNull() {
			*password6 = r.OutputLoki.Password.ValueString()
		} else {
			password6 = nil
		}
		credentialsSecret9 := new(string)
		if !r.OutputLoki.CredentialsSecret.IsUnknown() && !r.OutputLoki.CredentialsSecret.IsNull() {
			*credentialsSecret9 = r.OutputLoki.CredentialsSecret.ValueString()
		} else {
			credentialsSecret9 = nil
		}
		pqMaxFileSize35 := new(string)
		if !r.OutputLoki.PqMaxFileSize.IsUnknown() && !r.OutputLoki.PqMaxFileSize.IsNull() {
			*pqMaxFileSize35 = r.OutputLoki.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize35 = nil
		}
		pqMaxSize35 := new(string)
		if !r.OutputLoki.PqMaxSize.IsUnknown() && !r.OutputLoki.PqMaxSize.IsNull() {
			*pqMaxSize35 = r.OutputLoki.PqMaxSize.ValueString()
		} else {
			pqMaxSize35 = nil
		}
		pqPath35 := new(string)
		if !r.OutputLoki.PqPath.IsUnknown() && !r.OutputLoki.PqPath.IsNull() {
			*pqPath35 = r.OutputLoki.PqPath.ValueString()
		} else {
			pqPath35 = nil
		}
		pqCompress35 := new(shared.OutputLokiCompression)
		if !r.OutputLoki.PqCompress.IsUnknown() && !r.OutputLoki.PqCompress.IsNull() {
			*pqCompress35 = shared.OutputLokiCompression(r.OutputLoki.PqCompress.ValueString())
		} else {
			pqCompress35 = nil
		}
		pqOnBackpressure35 := new(shared.OutputLokiQueueFullBehavior)
		if !r.OutputLoki.PqOnBackpressure.IsUnknown() && !r.OutputLoki.PqOnBackpressure.IsNull() {
			*pqOnBackpressure35 = shared.OutputLokiQueueFullBehavior(r.OutputLoki.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure35 = nil
		}
		pqMode35 := new(shared.OutputLokiMode)
		if !r.OutputLoki.PqMode.IsUnknown() && !r.OutputLoki.PqMode.IsNull() {
			*pqMode35 = shared.OutputLokiMode(r.OutputLoki.PqMode.ValueString())
		} else {
			pqMode35 = nil
		}
		var pqControls35 *shared.OutputLokiPqControls
		if r.OutputLoki.PqControls != nil {
			pqControls35 = &shared.OutputLokiPqControls{}
		}
		outputLoki = &shared.OutputLoki{
			ID:                            id45,
			Type:                          typeVar45,
			Pipeline:                      pipeline45,
			SystemFields:                  systemFields45,
			Environment:                   environment45,
			Streamtags:                    streamtags45,
			URL:                           url10,
			Message:                       message3,
			MessageFormat:                 messageFormat3,
			Labels:                        labels2,
			AuthType:                      authType23,
			Concurrency:                   concurrency20,
			MaxPayloadSizeKB:              maxPayloadSizeKb19,
			MaxPayloadEvents:              maxPayloadEvents19,
			RejectUnauthorized:            rejectUnauthorized39,
			TimeoutSec:                    timeoutSec19,
			FlushPeriodSec:                flushPeriodSec30,
			ExtraHTTPHeaders:              extraHTTPHeaders17,
			UseRoundRobinDNS:              useRoundRobinDns17,
			FailedRequestLoggingMode:      failedRequestLoggingMode17,
			SafeHeaders:                   safeHeaders17,
			ResponseRetrySettings:         responseRetrySettings18,
			TimeoutRetrySettings:          timeoutRetrySettings18,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader18,
			OnBackpressure:                onBackpressure41,
			TotalMemoryLimitKB:            totalMemoryLimitKb7,
			Description:                   description45,
			Compress:                      compress25,
			Token:                         token9,
			TextSecret:                    textSecret19,
			Username:                      username6,
			Password:                      password6,
			CredentialsSecret:             credentialsSecret9,
			PqMaxFileSize:                 pqMaxFileSize35,
			PqMaxSize:                     pqMaxSize35,
			PqPath:                        pqPath35,
			PqCompress:                    pqCompress35,
			PqOnBackpressure:              pqOnBackpressure35,
			PqMode:                        pqMode35,
			PqControls:                    pqControls35,
		}
	}
	if outputLoki != nil {
		out = shared.Output{
			OutputLoki: outputLoki,
		}
	}
	var outputPrometheus *shared.OutputPrometheus
	if r.OutputPrometheus != nil {
		id46 := new(string)
		if !r.OutputPrometheus.ID.IsUnknown() && !r.OutputPrometheus.ID.IsNull() {
			*id46 = r.OutputPrometheus.ID.ValueString()
		} else {
			id46 = nil
		}
		typeVar46 := shared.OutputPrometheusType(r.OutputPrometheus.Type.ValueString())
		pipeline46 := new(string)
		if !r.OutputPrometheus.Pipeline.IsUnknown() && !r.OutputPrometheus.Pipeline.IsNull() {
			*pipeline46 = r.OutputPrometheus.Pipeline.ValueString()
		} else {
			pipeline46 = nil
		}
		systemFields46 := make([]string, 0, len(r.OutputPrometheus.SystemFields))
		for _, systemFieldsItem46 := range r.OutputPrometheus.SystemFields {
			systemFields46 = append(systemFields46, systemFieldsItem46.ValueString())
		}
		environment46 := new(string)
		if !r.OutputPrometheus.Environment.IsUnknown() && !r.OutputPrometheus.Environment.IsNull() {
			*environment46 = r.OutputPrometheus.Environment.ValueString()
		} else {
			environment46 = nil
		}
		streamtags46 := make([]string, 0, len(r.OutputPrometheus.Streamtags))
		for _, streamtagsItem46 := range r.OutputPrometheus.Streamtags {
			streamtags46 = append(streamtags46, streamtagsItem46.ValueString())
		}
		var url11 string
		url11 = r.OutputPrometheus.URL.ValueString()

		metricRenameExpr2 := new(string)
		if !r.OutputPrometheus.MetricRenameExpr.IsUnknown() && !r.OutputPrometheus.MetricRenameExpr.IsNull() {
			*metricRenameExpr2 = r.OutputPrometheus.MetricRenameExpr.ValueString()
		} else {
			metricRenameExpr2 = nil
		}
		sendMetadata := new(bool)
		if !r.OutputPrometheus.SendMetadata.IsUnknown() && !r.OutputPrometheus.SendMetadata.IsNull() {
			*sendMetadata = r.OutputPrometheus.SendMetadata.ValueBool()
		} else {
			sendMetadata = nil
		}
		concurrency21 := new(float64)
		if !r.OutputPrometheus.Concurrency.IsUnknown() && !r.OutputPrometheus.Concurrency.IsNull() {
			*concurrency21 = r.OutputPrometheus.Concurrency.ValueFloat64()
		} else {
			concurrency21 = nil
		}
		maxPayloadSizeKb20 := new(float64)
		if !r.OutputPrometheus.MaxPayloadSizeKB.IsUnknown() && !r.OutputPrometheus.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb20 = r.OutputPrometheus.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb20 = nil
		}
		maxPayloadEvents20 := new(float64)
		if !r.OutputPrometheus.MaxPayloadEvents.IsUnknown() && !r.OutputPrometheus.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents20 = r.OutputPrometheus.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents20 = nil
		}
		rejectUnauthorized40 := new(bool)
		if !r.OutputPrometheus.RejectUnauthorized.IsUnknown() && !r.OutputPrometheus.RejectUnauthorized.IsNull() {
			*rejectUnauthorized40 = r.OutputPrometheus.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized40 = nil
		}
		timeoutSec20 := new(float64)
		if !r.OutputPrometheus.TimeoutSec.IsUnknown() && !r.OutputPrometheus.TimeoutSec.IsNull() {
			*timeoutSec20 = r.OutputPrometheus.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec20 = nil
		}
		flushPeriodSec31 := new(float64)
		if !r.OutputPrometheus.FlushPeriodSec.IsUnknown() && !r.OutputPrometheus.FlushPeriodSec.IsNull() {
			*flushPeriodSec31 = r.OutputPrometheus.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec31 = nil
		}
		extraHTTPHeaders18 := make([]shared.OutputPrometheusExtraHTTPHeaders, 0, len(r.OutputPrometheus.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem18 := range r.OutputPrometheus.ExtraHTTPHeaders {
			name28 := new(string)
			if !extraHTTPHeadersItem18.Name.IsUnknown() && !extraHTTPHeadersItem18.Name.IsNull() {
				*name28 = extraHTTPHeadersItem18.Name.ValueString()
			} else {
				name28 = nil
			}
			var value37 string
			value37 = extraHTTPHeadersItem18.Value.ValueString()

			extraHTTPHeaders18 = append(extraHTTPHeaders18, shared.OutputPrometheusExtraHTTPHeaders{
				Name:  name28,
				Value: value37,
			})
		}
		useRoundRobinDns18 := new(bool)
		if !r.OutputPrometheus.UseRoundRobinDNS.IsUnknown() && !r.OutputPrometheus.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns18 = r.OutputPrometheus.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns18 = nil
		}
		failedRequestLoggingMode18 := new(shared.OutputPrometheusFailedRequestLoggingMode)
		if !r.OutputPrometheus.FailedRequestLoggingMode.IsUnknown() && !r.OutputPrometheus.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode18 = shared.OutputPrometheusFailedRequestLoggingMode(r.OutputPrometheus.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode18 = nil
		}
		safeHeaders18 := make([]string, 0, len(r.OutputPrometheus.SafeHeaders))
		for _, safeHeadersItem18 := range r.OutputPrometheus.SafeHeaders {
			safeHeaders18 = append(safeHeaders18, safeHeadersItem18.ValueString())
		}
		responseRetrySettings19 := make([]shared.OutputPrometheusResponseRetrySettings, 0, len(r.OutputPrometheus.ResponseRetrySettings))
		for _, responseRetrySettingsItem19 := range r.OutputPrometheus.ResponseRetrySettings {
			var httpStatus19 float64
			httpStatus19 = responseRetrySettingsItem19.HTTPStatus.ValueFloat64()

			initialBackoff42 := new(float64)
			if !responseRetrySettingsItem19.InitialBackoff.IsUnknown() && !responseRetrySettingsItem19.InitialBackoff.IsNull() {
				*initialBackoff42 = responseRetrySettingsItem19.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff42 = nil
			}
			backoffRate42 := new(float64)
			if !responseRetrySettingsItem19.BackoffRate.IsUnknown() && !responseRetrySettingsItem19.BackoffRate.IsNull() {
				*backoffRate42 = responseRetrySettingsItem19.BackoffRate.ValueFloat64()
			} else {
				backoffRate42 = nil
			}
			maxBackoff38 := new(float64)
			if !responseRetrySettingsItem19.MaxBackoff.IsUnknown() && !responseRetrySettingsItem19.MaxBackoff.IsNull() {
				*maxBackoff38 = responseRetrySettingsItem19.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff38 = nil
			}
			responseRetrySettings19 = append(responseRetrySettings19, shared.OutputPrometheusResponseRetrySettings{
				HTTPStatus:     httpStatus19,
				InitialBackoff: initialBackoff42,
				BackoffRate:    backoffRate42,
				MaxBackoff:     maxBackoff38,
			})
		}
		var timeoutRetrySettings19 *shared.OutputPrometheusTimeoutRetrySettings
		if r.OutputPrometheus.TimeoutRetrySettings != nil {
			timeoutRetry19 := new(bool)
			if !r.OutputPrometheus.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputPrometheus.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry19 = r.OutputPrometheus.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry19 = nil
			}
			initialBackoff43 := new(float64)
			if !r.OutputPrometheus.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputPrometheus.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff43 = r.OutputPrometheus.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff43 = nil
			}
			backoffRate43 := new(float64)
			if !r.OutputPrometheus.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputPrometheus.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate43 = r.OutputPrometheus.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate43 = nil
			}
			maxBackoff39 := new(float64)
			if !r.OutputPrometheus.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputPrometheus.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff39 = r.OutputPrometheus.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff39 = nil
			}
			timeoutRetrySettings19 = &shared.OutputPrometheusTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry19,
				InitialBackoff: initialBackoff43,
				BackoffRate:    backoffRate43,
				MaxBackoff:     maxBackoff39,
			}
		}
		responseHonorRetryAfterHeader19 := new(bool)
		if !r.OutputPrometheus.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputPrometheus.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader19 = r.OutputPrometheus.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader19 = nil
		}
		onBackpressure42 := new(shared.OutputPrometheusBackpressureBehavior)
		if !r.OutputPrometheus.OnBackpressure.IsUnknown() && !r.OutputPrometheus.OnBackpressure.IsNull() {
			*onBackpressure42 = shared.OutputPrometheusBackpressureBehavior(r.OutputPrometheus.OnBackpressure.ValueString())
		} else {
			onBackpressure42 = nil
		}
		authType24 := new(shared.OutputPrometheusAuthenticationType)
		if !r.OutputPrometheus.AuthType.IsUnknown() && !r.OutputPrometheus.AuthType.IsNull() {
			*authType24 = shared.OutputPrometheusAuthenticationType(r.OutputPrometheus.AuthType.ValueString())
		} else {
			authType24 = nil
		}
		description46 := new(string)
		if !r.OutputPrometheus.Description.IsUnknown() && !r.OutputPrometheus.Description.IsNull() {
			*description46 = r.OutputPrometheus.Description.ValueString()
		} else {
			description46 = nil
		}
		metricsFlushPeriodSec := new(float64)
		if !r.OutputPrometheus.MetricsFlushPeriodSec.IsUnknown() && !r.OutputPrometheus.MetricsFlushPeriodSec.IsNull() {
			*metricsFlushPeriodSec = r.OutputPrometheus.MetricsFlushPeriodSec.ValueFloat64()
		} else {
			metricsFlushPeriodSec = nil
		}
		pqMaxFileSize36 := new(string)
		if !r.OutputPrometheus.PqMaxFileSize.IsUnknown() && !r.OutputPrometheus.PqMaxFileSize.IsNull() {
			*pqMaxFileSize36 = r.OutputPrometheus.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize36 = nil
		}
		pqMaxSize36 := new(string)
		if !r.OutputPrometheus.PqMaxSize.IsUnknown() && !r.OutputPrometheus.PqMaxSize.IsNull() {
			*pqMaxSize36 = r.OutputPrometheus.PqMaxSize.ValueString()
		} else {
			pqMaxSize36 = nil
		}
		pqPath36 := new(string)
		if !r.OutputPrometheus.PqPath.IsUnknown() && !r.OutputPrometheus.PqPath.IsNull() {
			*pqPath36 = r.OutputPrometheus.PqPath.ValueString()
		} else {
			pqPath36 = nil
		}
		pqCompress36 := new(shared.OutputPrometheusCompression)
		if !r.OutputPrometheus.PqCompress.IsUnknown() && !r.OutputPrometheus.PqCompress.IsNull() {
			*pqCompress36 = shared.OutputPrometheusCompression(r.OutputPrometheus.PqCompress.ValueString())
		} else {
			pqCompress36 = nil
		}
		pqOnBackpressure36 := new(shared.OutputPrometheusQueueFullBehavior)
		if !r.OutputPrometheus.PqOnBackpressure.IsUnknown() && !r.OutputPrometheus.PqOnBackpressure.IsNull() {
			*pqOnBackpressure36 = shared.OutputPrometheusQueueFullBehavior(r.OutputPrometheus.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure36 = nil
		}
		pqMode36 := new(shared.OutputPrometheusMode)
		if !r.OutputPrometheus.PqMode.IsUnknown() && !r.OutputPrometheus.PqMode.IsNull() {
			*pqMode36 = shared.OutputPrometheusMode(r.OutputPrometheus.PqMode.ValueString())
		} else {
			pqMode36 = nil
		}
		var pqControls36 *shared.OutputPrometheusPqControls
		if r.OutputPrometheus.PqControls != nil {
			pqControls36 = &shared.OutputPrometheusPqControls{}
		}
		username7 := new(string)
		if !r.OutputPrometheus.Username.IsUnknown() && !r.OutputPrometheus.Username.IsNull() {
			*username7 = r.OutputPrometheus.Username.ValueString()
		} else {
			username7 = nil
		}
		password7 := new(string)
		if !r.OutputPrometheus.Password.IsUnknown() && !r.OutputPrometheus.Password.IsNull() {
			*password7 = r.OutputPrometheus.Password.ValueString()
		} else {
			password7 = nil
		}
		token10 := new(string)
		if !r.OutputPrometheus.Token.IsUnknown() && !r.OutputPrometheus.Token.IsNull() {
			*token10 = r.OutputPrometheus.Token.ValueString()
		} else {
			token10 = nil
		}
		credentialsSecret10 := new(string)
		if !r.OutputPrometheus.CredentialsSecret.IsUnknown() && !r.OutputPrometheus.CredentialsSecret.IsNull() {
			*credentialsSecret10 = r.OutputPrometheus.CredentialsSecret.ValueString()
		} else {
			credentialsSecret10 = nil
		}
		textSecret20 := new(string)
		if !r.OutputPrometheus.TextSecret.IsUnknown() && !r.OutputPrometheus.TextSecret.IsNull() {
			*textSecret20 = r.OutputPrometheus.TextSecret.ValueString()
		} else {
			textSecret20 = nil
		}
		loginUrl3 := new(string)
		if !r.OutputPrometheus.LoginURL.IsUnknown() && !r.OutputPrometheus.LoginURL.IsNull() {
			*loginUrl3 = r.OutputPrometheus.LoginURL.ValueString()
		} else {
			loginUrl3 = nil
		}
		secretParamName2 := new(string)
		if !r.OutputPrometheus.SecretParamName.IsUnknown() && !r.OutputPrometheus.SecretParamName.IsNull() {
			*secretParamName2 = r.OutputPrometheus.SecretParamName.ValueString()
		} else {
			secretParamName2 = nil
		}
		secret5 := new(string)
		if !r.OutputPrometheus.Secret.IsUnknown() && !r.OutputPrometheus.Secret.IsNull() {
			*secret5 = r.OutputPrometheus.Secret.ValueString()
		} else {
			secret5 = nil
		}
		tokenAttributeName2 := new(string)
		if !r.OutputPrometheus.TokenAttributeName.IsUnknown() && !r.OutputPrometheus.TokenAttributeName.IsNull() {
			*tokenAttributeName2 = r.OutputPrometheus.TokenAttributeName.ValueString()
		} else {
			tokenAttributeName2 = nil
		}
		authHeaderExpr2 := new(string)
		if !r.OutputPrometheus.AuthHeaderExpr.IsUnknown() && !r.OutputPrometheus.AuthHeaderExpr.IsNull() {
			*authHeaderExpr2 = r.OutputPrometheus.AuthHeaderExpr.ValueString()
		} else {
			authHeaderExpr2 = nil
		}
		tokenTimeoutSecs2 := new(float64)
		if !r.OutputPrometheus.TokenTimeoutSecs.IsUnknown() && !r.OutputPrometheus.TokenTimeoutSecs.IsNull() {
			*tokenTimeoutSecs2 = r.OutputPrometheus.TokenTimeoutSecs.ValueFloat64()
		} else {
			tokenTimeoutSecs2 = nil
		}
		oauthParams2 := make([]shared.OutputPrometheusOauthParams, 0, len(r.OutputPrometheus.OauthParams))
		for _, oauthParamsItem2 := range r.OutputPrometheus.OauthParams {
			var name29 string
			name29 = oauthParamsItem2.Name.ValueString()

			var value38 string
			value38 = oauthParamsItem2.Value.ValueString()

			oauthParams2 = append(oauthParams2, shared.OutputPrometheusOauthParams{
				Name:  name29,
				Value: value38,
			})
		}
		oauthHeaders2 := make([]shared.OutputPrometheusOauthHeaders, 0, len(r.OutputPrometheus.OauthHeaders))
		for _, oauthHeadersItem2 := range r.OutputPrometheus.OauthHeaders {
			var name30 string
			name30 = oauthHeadersItem2.Name.ValueString()

			var value39 string
			value39 = oauthHeadersItem2.Value.ValueString()

			oauthHeaders2 = append(oauthHeaders2, shared.OutputPrometheusOauthHeaders{
				Name:  name30,
				Value: value39,
			})
		}
		outputPrometheus = &shared.OutputPrometheus{
			ID:                            id46,
			Type:                          typeVar46,
			Pipeline:                      pipeline46,
			SystemFields:                  systemFields46,
			Environment:                   environment46,
			Streamtags:                    streamtags46,
			URL:                           url11,
			MetricRenameExpr:              metricRenameExpr2,
			SendMetadata:                  sendMetadata,
			Concurrency:                   concurrency21,
			MaxPayloadSizeKB:              maxPayloadSizeKb20,
			MaxPayloadEvents:              maxPayloadEvents20,
			RejectUnauthorized:            rejectUnauthorized40,
			TimeoutSec:                    timeoutSec20,
			FlushPeriodSec:                flushPeriodSec31,
			ExtraHTTPHeaders:              extraHTTPHeaders18,
			UseRoundRobinDNS:              useRoundRobinDns18,
			FailedRequestLoggingMode:      failedRequestLoggingMode18,
			SafeHeaders:                   safeHeaders18,
			ResponseRetrySettings:         responseRetrySettings19,
			TimeoutRetrySettings:          timeoutRetrySettings19,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader19,
			OnBackpressure:                onBackpressure42,
			AuthType:                      authType24,
			Description:                   description46,
			MetricsFlushPeriodSec:         metricsFlushPeriodSec,
			PqMaxFileSize:                 pqMaxFileSize36,
			PqMaxSize:                     pqMaxSize36,
			PqPath:                        pqPath36,
			PqCompress:                    pqCompress36,
			PqOnBackpressure:              pqOnBackpressure36,
			PqMode:                        pqMode36,
			PqControls:                    pqControls36,
			Username:                      username7,
			Password:                      password7,
			Token:                         token10,
			CredentialsSecret:             credentialsSecret10,
			TextSecret:                    textSecret20,
			LoginURL:                      loginUrl3,
			SecretParamName:               secretParamName2,
			Secret:                        secret5,
			TokenAttributeName:            tokenAttributeName2,
			AuthHeaderExpr:                authHeaderExpr2,
			TokenTimeoutSecs:              tokenTimeoutSecs2,
			OauthParams:                   oauthParams2,
			OauthHeaders:                  oauthHeaders2,
		}
	}
	if outputPrometheus != nil {
		out = shared.Output{
			OutputPrometheus: outputPrometheus,
		}
	}
	var outputRing *shared.OutputRing
	if r.OutputRing != nil {
		var id47 string
		id47 = r.OutputRing.ID.ValueString()

		typeVar47 := shared.OutputRingType(r.OutputRing.Type.ValueString())
		pipeline47 := new(string)
		if !r.OutputRing.Pipeline.IsUnknown() && !r.OutputRing.Pipeline.IsNull() {
			*pipeline47 = r.OutputRing.Pipeline.ValueString()
		} else {
			pipeline47 = nil
		}
		systemFields47 := make([]string, 0, len(r.OutputRing.SystemFields))
		for _, systemFieldsItem47 := range r.OutputRing.SystemFields {
			systemFields47 = append(systemFields47, systemFieldsItem47.ValueString())
		}
		environment47 := new(string)
		if !r.OutputRing.Environment.IsUnknown() && !r.OutputRing.Environment.IsNull() {
			*environment47 = r.OutputRing.Environment.ValueString()
		} else {
			environment47 = nil
		}
		streamtags47 := make([]string, 0, len(r.OutputRing.Streamtags))
		for _, streamtagsItem47 := range r.OutputRing.Streamtags {
			streamtags47 = append(streamtags47, streamtagsItem47.ValueString())
		}
		format13 := new(shared.OutputRingDataFormat)
		if !r.OutputRing.Format.IsUnknown() && !r.OutputRing.Format.IsNull() {
			*format13 = shared.OutputRingDataFormat(r.OutputRing.Format.ValueString())
		} else {
			format13 = nil
		}
		partitionExpr5 := new(string)
		if !r.OutputRing.PartitionExpr.IsUnknown() && !r.OutputRing.PartitionExpr.IsNull() {
			*partitionExpr5 = r.OutputRing.PartitionExpr.ValueString()
		} else {
			partitionExpr5 = nil
		}
		maxDataSize := new(string)
		if !r.OutputRing.MaxDataSize.IsUnknown() && !r.OutputRing.MaxDataSize.IsNull() {
			*maxDataSize = r.OutputRing.MaxDataSize.ValueString()
		} else {
			maxDataSize = nil
		}
		maxDataTime := new(string)
		if !r.OutputRing.MaxDataTime.IsUnknown() && !r.OutputRing.MaxDataTime.IsNull() {
			*maxDataTime = r.OutputRing.MaxDataTime.ValueString()
		} else {
			maxDataTime = nil
		}
		compress26 := new(shared.DataCompressionFormat)
		if !r.OutputRing.Compress.IsUnknown() && !r.OutputRing.Compress.IsNull() {
			*compress26 = shared.DataCompressionFormat(r.OutputRing.Compress.ValueString())
		} else {
			compress26 = nil
		}
		destPath5 := new(string)
		if !r.OutputRing.DestPath.IsUnknown() && !r.OutputRing.DestPath.IsNull() {
			*destPath5 = r.OutputRing.DestPath.ValueString()
		} else {
			destPath5 = nil
		}
		onBackpressure43 := new(shared.OutputRingBackpressureBehavior)
		if !r.OutputRing.OnBackpressure.IsUnknown() && !r.OutputRing.OnBackpressure.IsNull() {
			*onBackpressure43 = shared.OutputRingBackpressureBehavior(r.OutputRing.OnBackpressure.ValueString())
		} else {
			onBackpressure43 = nil
		}
		description47 := new(string)
		if !r.OutputRing.Description.IsUnknown() && !r.OutputRing.Description.IsNull() {
			*description47 = r.OutputRing.Description.ValueString()
		} else {
			description47 = nil
		}
		outputRing = &shared.OutputRing{
			ID:             id47,
			Type:           typeVar47,
			Pipeline:       pipeline47,
			SystemFields:   systemFields47,
			Environment:    environment47,
			Streamtags:     streamtags47,
			Format:         format13,
			PartitionExpr:  partitionExpr5,
			MaxDataSize:    maxDataSize,
			MaxDataTime:    maxDataTime,
			Compress:       compress26,
			DestPath:       destPath5,
			OnBackpressure: onBackpressure43,
			Description:    description47,
		}
	}
	if outputRing != nil {
		out = shared.Output{
			OutputRing: outputRing,
		}
	}
	var outputOpenTelemetry *shared.OutputOpenTelemetry
	if r.OutputOpenTelemetry != nil {
		id48 := new(string)
		if !r.OutputOpenTelemetry.ID.IsUnknown() && !r.OutputOpenTelemetry.ID.IsNull() {
			*id48 = r.OutputOpenTelemetry.ID.ValueString()
		} else {
			id48 = nil
		}
		typeVar48 := shared.OutputOpenTelemetryType(r.OutputOpenTelemetry.Type.ValueString())
		pipeline48 := new(string)
		if !r.OutputOpenTelemetry.Pipeline.IsUnknown() && !r.OutputOpenTelemetry.Pipeline.IsNull() {
			*pipeline48 = r.OutputOpenTelemetry.Pipeline.ValueString()
		} else {
			pipeline48 = nil
		}
		systemFields48 := make([]string, 0, len(r.OutputOpenTelemetry.SystemFields))
		for _, systemFieldsItem48 := range r.OutputOpenTelemetry.SystemFields {
			systemFields48 = append(systemFields48, systemFieldsItem48.ValueString())
		}
		environment48 := new(string)
		if !r.OutputOpenTelemetry.Environment.IsUnknown() && !r.OutputOpenTelemetry.Environment.IsNull() {
			*environment48 = r.OutputOpenTelemetry.Environment.ValueString()
		} else {
			environment48 = nil
		}
		streamtags48 := make([]string, 0, len(r.OutputOpenTelemetry.Streamtags))
		for _, streamtagsItem48 := range r.OutputOpenTelemetry.Streamtags {
			streamtags48 = append(streamtags48, streamtagsItem48.ValueString())
		}
		protocol4 := new(shared.OutputOpenTelemetryProtocol)
		if !r.OutputOpenTelemetry.Protocol.IsUnknown() && !r.OutputOpenTelemetry.Protocol.IsNull() {
			*protocol4 = shared.OutputOpenTelemetryProtocol(r.OutputOpenTelemetry.Protocol.ValueString())
		} else {
			protocol4 = nil
		}
		var endpoint9 string
		endpoint9 = r.OutputOpenTelemetry.Endpoint.ValueString()

		otlpVersion := new(shared.OutputOpenTelemetryOTLPVersion)
		if !r.OutputOpenTelemetry.OtlpVersion.IsUnknown() && !r.OutputOpenTelemetry.OtlpVersion.IsNull() {
			*otlpVersion = shared.OutputOpenTelemetryOTLPVersion(r.OutputOpenTelemetry.OtlpVersion.ValueString())
		} else {
			otlpVersion = nil
		}
		compress27 := new(shared.OutputOpenTelemetryCompression)
		if !r.OutputOpenTelemetry.Compress.IsUnknown() && !r.OutputOpenTelemetry.Compress.IsNull() {
			*compress27 = shared.OutputOpenTelemetryCompression(r.OutputOpenTelemetry.Compress.ValueString())
		} else {
			compress27 = nil
		}
		httpCompress := new(shared.OutputOpenTelemetryHTTPCompressCompression)
		if !r.OutputOpenTelemetry.HTTPCompress.IsUnknown() && !r.OutputOpenTelemetry.HTTPCompress.IsNull() {
			*httpCompress = shared.OutputOpenTelemetryHTTPCompressCompression(r.OutputOpenTelemetry.HTTPCompress.ValueString())
		} else {
			httpCompress = nil
		}
		authType25 := new(shared.OutputOpenTelemetryAuthenticationType)
		if !r.OutputOpenTelemetry.AuthType.IsUnknown() && !r.OutputOpenTelemetry.AuthType.IsNull() {
			*authType25 = shared.OutputOpenTelemetryAuthenticationType(r.OutputOpenTelemetry.AuthType.ValueString())
		} else {
			authType25 = nil
		}
		httpTracesEndpointOverride := new(string)
		if !r.OutputOpenTelemetry.HTTPTracesEndpointOverride.IsUnknown() && !r.OutputOpenTelemetry.HTTPTracesEndpointOverride.IsNull() {
			*httpTracesEndpointOverride = r.OutputOpenTelemetry.HTTPTracesEndpointOverride.ValueString()
		} else {
			httpTracesEndpointOverride = nil
		}
		httpMetricsEndpointOverride := new(string)
		if !r.OutputOpenTelemetry.HTTPMetricsEndpointOverride.IsUnknown() && !r.OutputOpenTelemetry.HTTPMetricsEndpointOverride.IsNull() {
			*httpMetricsEndpointOverride = r.OutputOpenTelemetry.HTTPMetricsEndpointOverride.ValueString()
		} else {
			httpMetricsEndpointOverride = nil
		}
		httpLogsEndpointOverride := new(string)
		if !r.OutputOpenTelemetry.HTTPLogsEndpointOverride.IsUnknown() && !r.OutputOpenTelemetry.HTTPLogsEndpointOverride.IsNull() {
			*httpLogsEndpointOverride = r.OutputOpenTelemetry.HTTPLogsEndpointOverride.ValueString()
		} else {
			httpLogsEndpointOverride = nil
		}
		metadata1 := make([]shared.OutputOpenTelemetryMetadata, 0, len(r.OutputOpenTelemetry.Metadata))
		for _, metadataItem1 := range r.OutputOpenTelemetry.Metadata {
			key7 := new(string)
			if !metadataItem1.Key.IsUnknown() && !metadataItem1.Key.IsNull() {
				*key7 = metadataItem1.Key.ValueString()
			} else {
				key7 = nil
			}
			var value40 string
			value40 = metadataItem1.Value.ValueString()

			metadata1 = append(metadata1, shared.OutputOpenTelemetryMetadata{
				Key:   key7,
				Value: value40,
			})
		}
		concurrency22 := new(float64)
		if !r.OutputOpenTelemetry.Concurrency.IsUnknown() && !r.OutputOpenTelemetry.Concurrency.IsNull() {
			*concurrency22 = r.OutputOpenTelemetry.Concurrency.ValueFloat64()
		} else {
			concurrency22 = nil
		}
		maxPayloadSizeKb21 := new(float64)
		if !r.OutputOpenTelemetry.MaxPayloadSizeKB.IsUnknown() && !r.OutputOpenTelemetry.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb21 = r.OutputOpenTelemetry.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb21 = nil
		}
		timeoutSec21 := new(float64)
		if !r.OutputOpenTelemetry.TimeoutSec.IsUnknown() && !r.OutputOpenTelemetry.TimeoutSec.IsNull() {
			*timeoutSec21 = r.OutputOpenTelemetry.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec21 = nil
		}
		flushPeriodSec32 := new(float64)
		if !r.OutputOpenTelemetry.FlushPeriodSec.IsUnknown() && !r.OutputOpenTelemetry.FlushPeriodSec.IsNull() {
			*flushPeriodSec32 = r.OutputOpenTelemetry.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec32 = nil
		}
		failedRequestLoggingMode19 := new(shared.OutputOpenTelemetryFailedRequestLoggingMode)
		if !r.OutputOpenTelemetry.FailedRequestLoggingMode.IsUnknown() && !r.OutputOpenTelemetry.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode19 = shared.OutputOpenTelemetryFailedRequestLoggingMode(r.OutputOpenTelemetry.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode19 = nil
		}
		connectionTimeout15 := new(float64)
		if !r.OutputOpenTelemetry.ConnectionTimeout.IsUnknown() && !r.OutputOpenTelemetry.ConnectionTimeout.IsNull() {
			*connectionTimeout15 = r.OutputOpenTelemetry.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout15 = nil
		}
		keepAliveTime := new(float64)
		if !r.OutputOpenTelemetry.KeepAliveTime.IsUnknown() && !r.OutputOpenTelemetry.KeepAliveTime.IsNull() {
			*keepAliveTime = r.OutputOpenTelemetry.KeepAliveTime.ValueFloat64()
		} else {
			keepAliveTime = nil
		}
		keepAlive3 := new(bool)
		if !r.OutputOpenTelemetry.KeepAlive.IsUnknown() && !r.OutputOpenTelemetry.KeepAlive.IsNull() {
			*keepAlive3 = r.OutputOpenTelemetry.KeepAlive.ValueBool()
		} else {
			keepAlive3 = nil
		}
		onBackpressure44 := new(shared.OutputOpenTelemetryBackpressureBehavior)
		if !r.OutputOpenTelemetry.OnBackpressure.IsUnknown() && !r.OutputOpenTelemetry.OnBackpressure.IsNull() {
			*onBackpressure44 = shared.OutputOpenTelemetryBackpressureBehavior(r.OutputOpenTelemetry.OnBackpressure.ValueString())
		} else {
			onBackpressure44 = nil
		}
		description48 := new(string)
		if !r.OutputOpenTelemetry.Description.IsUnknown() && !r.OutputOpenTelemetry.Description.IsNull() {
			*description48 = r.OutputOpenTelemetry.Description.ValueString()
		} else {
			description48 = nil
		}
		username8 := new(string)
		if !r.OutputOpenTelemetry.Username.IsUnknown() && !r.OutputOpenTelemetry.Username.IsNull() {
			*username8 = r.OutputOpenTelemetry.Username.ValueString()
		} else {
			username8 = nil
		}
		password8 := new(string)
		if !r.OutputOpenTelemetry.Password.IsUnknown() && !r.OutputOpenTelemetry.Password.IsNull() {
			*password8 = r.OutputOpenTelemetry.Password.ValueString()
		} else {
			password8 = nil
		}
		token11 := new(string)
		if !r.OutputOpenTelemetry.Token.IsUnknown() && !r.OutputOpenTelemetry.Token.IsNull() {
			*token11 = r.OutputOpenTelemetry.Token.ValueString()
		} else {
			token11 = nil
		}
		credentialsSecret11 := new(string)
		if !r.OutputOpenTelemetry.CredentialsSecret.IsUnknown() && !r.OutputOpenTelemetry.CredentialsSecret.IsNull() {
			*credentialsSecret11 = r.OutputOpenTelemetry.CredentialsSecret.ValueString()
		} else {
			credentialsSecret11 = nil
		}
		textSecret21 := new(string)
		if !r.OutputOpenTelemetry.TextSecret.IsUnknown() && !r.OutputOpenTelemetry.TextSecret.IsNull() {
			*textSecret21 = r.OutputOpenTelemetry.TextSecret.ValueString()
		} else {
			textSecret21 = nil
		}
		loginUrl4 := new(string)
		if !r.OutputOpenTelemetry.LoginURL.IsUnknown() && !r.OutputOpenTelemetry.LoginURL.IsNull() {
			*loginUrl4 = r.OutputOpenTelemetry.LoginURL.ValueString()
		} else {
			loginUrl4 = nil
		}
		secretParamName3 := new(string)
		if !r.OutputOpenTelemetry.SecretParamName.IsUnknown() && !r.OutputOpenTelemetry.SecretParamName.IsNull() {
			*secretParamName3 = r.OutputOpenTelemetry.SecretParamName.ValueString()
		} else {
			secretParamName3 = nil
		}
		secret6 := new(string)
		if !r.OutputOpenTelemetry.Secret.IsUnknown() && !r.OutputOpenTelemetry.Secret.IsNull() {
			*secret6 = r.OutputOpenTelemetry.Secret.ValueString()
		} else {
			secret6 = nil
		}
		tokenAttributeName3 := new(string)
		if !r.OutputOpenTelemetry.TokenAttributeName.IsUnknown() && !r.OutputOpenTelemetry.TokenAttributeName.IsNull() {
			*tokenAttributeName3 = r.OutputOpenTelemetry.TokenAttributeName.ValueString()
		} else {
			tokenAttributeName3 = nil
		}
		authHeaderExpr3 := new(string)
		if !r.OutputOpenTelemetry.AuthHeaderExpr.IsUnknown() && !r.OutputOpenTelemetry.AuthHeaderExpr.IsNull() {
			*authHeaderExpr3 = r.OutputOpenTelemetry.AuthHeaderExpr.ValueString()
		} else {
			authHeaderExpr3 = nil
		}
		tokenTimeoutSecs3 := new(float64)
		if !r.OutputOpenTelemetry.TokenTimeoutSecs.IsUnknown() && !r.OutputOpenTelemetry.TokenTimeoutSecs.IsNull() {
			*tokenTimeoutSecs3 = r.OutputOpenTelemetry.TokenTimeoutSecs.ValueFloat64()
		} else {
			tokenTimeoutSecs3 = nil
		}
		oauthParams3 := make([]shared.OutputOpenTelemetryOauthParams, 0, len(r.OutputOpenTelemetry.OauthParams))
		for _, oauthParamsItem3 := range r.OutputOpenTelemetry.OauthParams {
			var name31 string
			name31 = oauthParamsItem3.Name.ValueString()

			var value41 string
			value41 = oauthParamsItem3.Value.ValueString()

			oauthParams3 = append(oauthParams3, shared.OutputOpenTelemetryOauthParams{
				Name:  name31,
				Value: value41,
			})
		}
		oauthHeaders3 := make([]shared.OutputOpenTelemetryOauthHeaders, 0, len(r.OutputOpenTelemetry.OauthHeaders))
		for _, oauthHeadersItem3 := range r.OutputOpenTelemetry.OauthHeaders {
			var name32 string
			name32 = oauthHeadersItem3.Name.ValueString()

			var value42 string
			value42 = oauthHeadersItem3.Value.ValueString()

			oauthHeaders3 = append(oauthHeaders3, shared.OutputOpenTelemetryOauthHeaders{
				Name:  name32,
				Value: value42,
			})
		}
		rejectUnauthorized41 := new(bool)
		if !r.OutputOpenTelemetry.RejectUnauthorized.IsUnknown() && !r.OutputOpenTelemetry.RejectUnauthorized.IsNull() {
			*rejectUnauthorized41 = r.OutputOpenTelemetry.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized41 = nil
		}
		useRoundRobinDns19 := new(bool)
		if !r.OutputOpenTelemetry.UseRoundRobinDNS.IsUnknown() && !r.OutputOpenTelemetry.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns19 = r.OutputOpenTelemetry.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns19 = nil
		}
		extraHTTPHeaders19 := make([]shared.OutputOpenTelemetryExtraHTTPHeaders, 0, len(r.OutputOpenTelemetry.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem19 := range r.OutputOpenTelemetry.ExtraHTTPHeaders {
			name33 := new(string)
			if !extraHTTPHeadersItem19.Name.IsUnknown() && !extraHTTPHeadersItem19.Name.IsNull() {
				*name33 = extraHTTPHeadersItem19.Name.ValueString()
			} else {
				name33 = nil
			}
			var value43 string
			value43 = extraHTTPHeadersItem19.Value.ValueString()

			extraHTTPHeaders19 = append(extraHTTPHeaders19, shared.OutputOpenTelemetryExtraHTTPHeaders{
				Name:  name33,
				Value: value43,
			})
		}
		safeHeaders19 := make([]string, 0, len(r.OutputOpenTelemetry.SafeHeaders))
		for _, safeHeadersItem19 := range r.OutputOpenTelemetry.SafeHeaders {
			safeHeaders19 = append(safeHeaders19, safeHeadersItem19.ValueString())
		}
		responseRetrySettings20 := make([]shared.OutputOpenTelemetryResponseRetrySettings, 0, len(r.OutputOpenTelemetry.ResponseRetrySettings))
		for _, responseRetrySettingsItem20 := range r.OutputOpenTelemetry.ResponseRetrySettings {
			var httpStatus20 float64
			httpStatus20 = responseRetrySettingsItem20.HTTPStatus.ValueFloat64()

			initialBackoff44 := new(float64)
			if !responseRetrySettingsItem20.InitialBackoff.IsUnknown() && !responseRetrySettingsItem20.InitialBackoff.IsNull() {
				*initialBackoff44 = responseRetrySettingsItem20.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff44 = nil
			}
			backoffRate44 := new(float64)
			if !responseRetrySettingsItem20.BackoffRate.IsUnknown() && !responseRetrySettingsItem20.BackoffRate.IsNull() {
				*backoffRate44 = responseRetrySettingsItem20.BackoffRate.ValueFloat64()
			} else {
				backoffRate44 = nil
			}
			maxBackoff40 := new(float64)
			if !responseRetrySettingsItem20.MaxBackoff.IsUnknown() && !responseRetrySettingsItem20.MaxBackoff.IsNull() {
				*maxBackoff40 = responseRetrySettingsItem20.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff40 = nil
			}
			responseRetrySettings20 = append(responseRetrySettings20, shared.OutputOpenTelemetryResponseRetrySettings{
				HTTPStatus:     httpStatus20,
				InitialBackoff: initialBackoff44,
				BackoffRate:    backoffRate44,
				MaxBackoff:     maxBackoff40,
			})
		}
		var timeoutRetrySettings20 *shared.OutputOpenTelemetryTimeoutRetrySettings
		if r.OutputOpenTelemetry.TimeoutRetrySettings != nil {
			timeoutRetry20 := new(bool)
			if !r.OutputOpenTelemetry.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputOpenTelemetry.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry20 = r.OutputOpenTelemetry.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry20 = nil
			}
			initialBackoff45 := new(float64)
			if !r.OutputOpenTelemetry.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputOpenTelemetry.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff45 = r.OutputOpenTelemetry.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff45 = nil
			}
			backoffRate45 := new(float64)
			if !r.OutputOpenTelemetry.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputOpenTelemetry.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate45 = r.OutputOpenTelemetry.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate45 = nil
			}
			maxBackoff41 := new(float64)
			if !r.OutputOpenTelemetry.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputOpenTelemetry.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff41 = r.OutputOpenTelemetry.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff41 = nil
			}
			timeoutRetrySettings20 = &shared.OutputOpenTelemetryTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry20,
				InitialBackoff: initialBackoff45,
				BackoffRate:    backoffRate45,
				MaxBackoff:     maxBackoff41,
			}
		}
		responseHonorRetryAfterHeader20 := new(bool)
		if !r.OutputOpenTelemetry.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputOpenTelemetry.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader20 = r.OutputOpenTelemetry.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader20 = nil
		}
		var tls14 *shared.OutputOpenTelemetryTLSSettingsClientSide
		if r.OutputOpenTelemetry.TLS != nil {
			disabled23 := new(bool)
			if !r.OutputOpenTelemetry.TLS.Disabled.IsUnknown() && !r.OutputOpenTelemetry.TLS.Disabled.IsNull() {
				*disabled23 = r.OutputOpenTelemetry.TLS.Disabled.ValueBool()
			} else {
				disabled23 = nil
			}
			rejectUnauthorized42 := new(bool)
			if !r.OutputOpenTelemetry.TLS.RejectUnauthorized.IsUnknown() && !r.OutputOpenTelemetry.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized42 = r.OutputOpenTelemetry.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized42 = nil
			}
			certificateName13 := new(string)
			if !r.OutputOpenTelemetry.TLS.CertificateName.IsUnknown() && !r.OutputOpenTelemetry.TLS.CertificateName.IsNull() {
				*certificateName13 = r.OutputOpenTelemetry.TLS.CertificateName.ValueString()
			} else {
				certificateName13 = nil
			}
			caPath11 := new(string)
			if !r.OutputOpenTelemetry.TLS.CaPath.IsUnknown() && !r.OutputOpenTelemetry.TLS.CaPath.IsNull() {
				*caPath11 = r.OutputOpenTelemetry.TLS.CaPath.ValueString()
			} else {
				caPath11 = nil
			}
			privKeyPath11 := new(string)
			if !r.OutputOpenTelemetry.TLS.PrivKeyPath.IsUnknown() && !r.OutputOpenTelemetry.TLS.PrivKeyPath.IsNull() {
				*privKeyPath11 = r.OutputOpenTelemetry.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath11 = nil
			}
			certPath11 := new(string)
			if !r.OutputOpenTelemetry.TLS.CertPath.IsUnknown() && !r.OutputOpenTelemetry.TLS.CertPath.IsNull() {
				*certPath11 = r.OutputOpenTelemetry.TLS.CertPath.ValueString()
			} else {
				certPath11 = nil
			}
			passphrase11 := new(string)
			if !r.OutputOpenTelemetry.TLS.Passphrase.IsUnknown() && !r.OutputOpenTelemetry.TLS.Passphrase.IsNull() {
				*passphrase11 = r.OutputOpenTelemetry.TLS.Passphrase.ValueString()
			} else {
				passphrase11 = nil
			}
			minVersion11 := new(shared.OutputOpenTelemetryMinimumTLSVersion)
			if !r.OutputOpenTelemetry.TLS.MinVersion.IsUnknown() && !r.OutputOpenTelemetry.TLS.MinVersion.IsNull() {
				*minVersion11 = shared.OutputOpenTelemetryMinimumTLSVersion(r.OutputOpenTelemetry.TLS.MinVersion.ValueString())
			} else {
				minVersion11 = nil
			}
			maxVersion11 := new(shared.OutputOpenTelemetryMaximumTLSVersion)
			if !r.OutputOpenTelemetry.TLS.MaxVersion.IsUnknown() && !r.OutputOpenTelemetry.TLS.MaxVersion.IsNull() {
				*maxVersion11 = shared.OutputOpenTelemetryMaximumTLSVersion(r.OutputOpenTelemetry.TLS.MaxVersion.ValueString())
			} else {
				maxVersion11 = nil
			}
			tls14 = &shared.OutputOpenTelemetryTLSSettingsClientSide{
				Disabled:           disabled23,
				RejectUnauthorized: rejectUnauthorized42,
				CertificateName:    certificateName13,
				CaPath:             caPath11,
				PrivKeyPath:        privKeyPath11,
				CertPath:           certPath11,
				Passphrase:         passphrase11,
				MinVersion:         minVersion11,
				MaxVersion:         maxVersion11,
			}
		}
		pqMaxFileSize37 := new(string)
		if !r.OutputOpenTelemetry.PqMaxFileSize.IsUnknown() && !r.OutputOpenTelemetry.PqMaxFileSize.IsNull() {
			*pqMaxFileSize37 = r.OutputOpenTelemetry.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize37 = nil
		}
		pqMaxSize37 := new(string)
		if !r.OutputOpenTelemetry.PqMaxSize.IsUnknown() && !r.OutputOpenTelemetry.PqMaxSize.IsNull() {
			*pqMaxSize37 = r.OutputOpenTelemetry.PqMaxSize.ValueString()
		} else {
			pqMaxSize37 = nil
		}
		pqPath37 := new(string)
		if !r.OutputOpenTelemetry.PqPath.IsUnknown() && !r.OutputOpenTelemetry.PqPath.IsNull() {
			*pqPath37 = r.OutputOpenTelemetry.PqPath.ValueString()
		} else {
			pqPath37 = nil
		}
		pqCompress37 := new(shared.OutputOpenTelemetryPqCompressCompression)
		if !r.OutputOpenTelemetry.PqCompress.IsUnknown() && !r.OutputOpenTelemetry.PqCompress.IsNull() {
			*pqCompress37 = shared.OutputOpenTelemetryPqCompressCompression(r.OutputOpenTelemetry.PqCompress.ValueString())
		} else {
			pqCompress37 = nil
		}
		pqOnBackpressure37 := new(shared.OutputOpenTelemetryQueueFullBehavior)
		if !r.OutputOpenTelemetry.PqOnBackpressure.IsUnknown() && !r.OutputOpenTelemetry.PqOnBackpressure.IsNull() {
			*pqOnBackpressure37 = shared.OutputOpenTelemetryQueueFullBehavior(r.OutputOpenTelemetry.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure37 = nil
		}
		pqMode37 := new(shared.OutputOpenTelemetryMode)
		if !r.OutputOpenTelemetry.PqMode.IsUnknown() && !r.OutputOpenTelemetry.PqMode.IsNull() {
			*pqMode37 = shared.OutputOpenTelemetryMode(r.OutputOpenTelemetry.PqMode.ValueString())
		} else {
			pqMode37 = nil
		}
		var pqControls37 *shared.OutputOpenTelemetryPqControls
		if r.OutputOpenTelemetry.PqControls != nil {
			pqControls37 = &shared.OutputOpenTelemetryPqControls{}
		}
		outputOpenTelemetry = &shared.OutputOpenTelemetry{
			ID:                            id48,
			Type:                          typeVar48,
			Pipeline:                      pipeline48,
			SystemFields:                  systemFields48,
			Environment:                   environment48,
			Streamtags:                    streamtags48,
			Protocol:                      protocol4,
			Endpoint:                      endpoint9,
			OtlpVersion:                   otlpVersion,
			Compress:                      compress27,
			HTTPCompress:                  httpCompress,
			AuthType:                      authType25,
			HTTPTracesEndpointOverride:    httpTracesEndpointOverride,
			HTTPMetricsEndpointOverride:   httpMetricsEndpointOverride,
			HTTPLogsEndpointOverride:      httpLogsEndpointOverride,
			Metadata:                      metadata1,
			Concurrency:                   concurrency22,
			MaxPayloadSizeKB:              maxPayloadSizeKb21,
			TimeoutSec:                    timeoutSec21,
			FlushPeriodSec:                flushPeriodSec32,
			FailedRequestLoggingMode:      failedRequestLoggingMode19,
			ConnectionTimeout:             connectionTimeout15,
			KeepAliveTime:                 keepAliveTime,
			KeepAlive:                     keepAlive3,
			OnBackpressure:                onBackpressure44,
			Description:                   description48,
			Username:                      username8,
			Password:                      password8,
			Token:                         token11,
			CredentialsSecret:             credentialsSecret11,
			TextSecret:                    textSecret21,
			LoginURL:                      loginUrl4,
			SecretParamName:               secretParamName3,
			Secret:                        secret6,
			TokenAttributeName:            tokenAttributeName3,
			AuthHeaderExpr:                authHeaderExpr3,
			TokenTimeoutSecs:              tokenTimeoutSecs3,
			OauthParams:                   oauthParams3,
			OauthHeaders:                  oauthHeaders3,
			RejectUnauthorized:            rejectUnauthorized41,
			UseRoundRobinDNS:              useRoundRobinDns19,
			ExtraHTTPHeaders:              extraHTTPHeaders19,
			SafeHeaders:                   safeHeaders19,
			ResponseRetrySettings:         responseRetrySettings20,
			TimeoutRetrySettings:          timeoutRetrySettings20,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader20,
			TLS:                           tls14,
			PqMaxFileSize:                 pqMaxFileSize37,
			PqMaxSize:                     pqMaxSize37,
			PqPath:                        pqPath37,
			PqCompress:                    pqCompress37,
			PqOnBackpressure:              pqOnBackpressure37,
			PqMode:                        pqMode37,
			PqControls:                    pqControls37,
		}
	}
	if outputOpenTelemetry != nil {
		out = shared.Output{
			OutputOpenTelemetry: outputOpenTelemetry,
		}
	}
	var outputServiceNow *shared.OutputServiceNow
	if r.OutputServiceNow != nil {
		id49 := new(string)
		if !r.OutputServiceNow.ID.IsUnknown() && !r.OutputServiceNow.ID.IsNull() {
			*id49 = r.OutputServiceNow.ID.ValueString()
		} else {
			id49 = nil
		}
		typeVar49 := new(shared.OutputServiceNowType)
		if !r.OutputServiceNow.Type.IsUnknown() && !r.OutputServiceNow.Type.IsNull() {
			*typeVar49 = shared.OutputServiceNowType(r.OutputServiceNow.Type.ValueString())
		} else {
			typeVar49 = nil
		}
		pipeline49 := new(string)
		if !r.OutputServiceNow.Pipeline.IsUnknown() && !r.OutputServiceNow.Pipeline.IsNull() {
			*pipeline49 = r.OutputServiceNow.Pipeline.ValueString()
		} else {
			pipeline49 = nil
		}
		systemFields49 := make([]string, 0, len(r.OutputServiceNow.SystemFields))
		for _, systemFieldsItem49 := range r.OutputServiceNow.SystemFields {
			systemFields49 = append(systemFields49, systemFieldsItem49.ValueString())
		}
		environment49 := new(string)
		if !r.OutputServiceNow.Environment.IsUnknown() && !r.OutputServiceNow.Environment.IsNull() {
			*environment49 = r.OutputServiceNow.Environment.ValueString()
		} else {
			environment49 = nil
		}
		streamtags49 := make([]string, 0, len(r.OutputServiceNow.Streamtags))
		for _, streamtagsItem49 := range r.OutputServiceNow.Streamtags {
			streamtags49 = append(streamtags49, streamtagsItem49.ValueString())
		}
		endpoint10 := new(string)
		if !r.OutputServiceNow.Endpoint.IsUnknown() && !r.OutputServiceNow.Endpoint.IsNull() {
			*endpoint10 = r.OutputServiceNow.Endpoint.ValueString()
		} else {
			endpoint10 = nil
		}
		var tokenSecret string
		tokenSecret = r.OutputServiceNow.TokenSecret.ValueString()

		authTokenName := new(string)
		if !r.OutputServiceNow.AuthTokenName.IsUnknown() && !r.OutputServiceNow.AuthTokenName.IsNull() {
			*authTokenName = r.OutputServiceNow.AuthTokenName.ValueString()
		} else {
			authTokenName = nil
		}
		otlpVersion1 := new(shared.OutputServiceNowOTLPVersion)
		if !r.OutputServiceNow.OtlpVersion.IsUnknown() && !r.OutputServiceNow.OtlpVersion.IsNull() {
			*otlpVersion1 = shared.OutputServiceNowOTLPVersion(r.OutputServiceNow.OtlpVersion.ValueString())
		} else {
			otlpVersion1 = nil
		}
		maxPayloadSizeKb22 := new(float64)
		if !r.OutputServiceNow.MaxPayloadSizeKB.IsUnknown() && !r.OutputServiceNow.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb22 = r.OutputServiceNow.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb22 = nil
		}
		protocol5 := new(shared.OutputServiceNowProtocol)
		if !r.OutputServiceNow.Protocol.IsUnknown() && !r.OutputServiceNow.Protocol.IsNull() {
			*protocol5 = shared.OutputServiceNowProtocol(r.OutputServiceNow.Protocol.ValueString())
		} else {
			protocol5 = nil
		}
		compress28 := new(shared.OutputServiceNowCompression)
		if !r.OutputServiceNow.Compress.IsUnknown() && !r.OutputServiceNow.Compress.IsNull() {
			*compress28 = shared.OutputServiceNowCompression(r.OutputServiceNow.Compress.ValueString())
		} else {
			compress28 = nil
		}
		httpCompress1 := new(shared.OutputServiceNowHTTPCompressCompression)
		if !r.OutputServiceNow.HTTPCompress.IsUnknown() && !r.OutputServiceNow.HTTPCompress.IsNull() {
			*httpCompress1 = shared.OutputServiceNowHTTPCompressCompression(r.OutputServiceNow.HTTPCompress.ValueString())
		} else {
			httpCompress1 = nil
		}
		httpTracesEndpointOverride1 := new(string)
		if !r.OutputServiceNow.HTTPTracesEndpointOverride.IsUnknown() && !r.OutputServiceNow.HTTPTracesEndpointOverride.IsNull() {
			*httpTracesEndpointOverride1 = r.OutputServiceNow.HTTPTracesEndpointOverride.ValueString()
		} else {
			httpTracesEndpointOverride1 = nil
		}
		httpMetricsEndpointOverride1 := new(string)
		if !r.OutputServiceNow.HTTPMetricsEndpointOverride.IsUnknown() && !r.OutputServiceNow.HTTPMetricsEndpointOverride.IsNull() {
			*httpMetricsEndpointOverride1 = r.OutputServiceNow.HTTPMetricsEndpointOverride.ValueString()
		} else {
			httpMetricsEndpointOverride1 = nil
		}
		httpLogsEndpointOverride1 := new(string)
		if !r.OutputServiceNow.HTTPLogsEndpointOverride.IsUnknown() && !r.OutputServiceNow.HTTPLogsEndpointOverride.IsNull() {
			*httpLogsEndpointOverride1 = r.OutputServiceNow.HTTPLogsEndpointOverride.ValueString()
		} else {
			httpLogsEndpointOverride1 = nil
		}
		metadata2 := make([]shared.OutputServiceNowMetadata, 0, len(r.OutputServiceNow.Metadata))
		for _, metadataItem2 := range r.OutputServiceNow.Metadata {
			key8 := new(string)
			if !metadataItem2.Key.IsUnknown() && !metadataItem2.Key.IsNull() {
				*key8 = metadataItem2.Key.ValueString()
			} else {
				key8 = nil
			}
			var value44 string
			value44 = metadataItem2.Value.ValueString()

			metadata2 = append(metadata2, shared.OutputServiceNowMetadata{
				Key:   key8,
				Value: value44,
			})
		}
		concurrency23 := new(float64)
		if !r.OutputServiceNow.Concurrency.IsUnknown() && !r.OutputServiceNow.Concurrency.IsNull() {
			*concurrency23 = r.OutputServiceNow.Concurrency.ValueFloat64()
		} else {
			concurrency23 = nil
		}
		timeoutSec22 := new(float64)
		if !r.OutputServiceNow.TimeoutSec.IsUnknown() && !r.OutputServiceNow.TimeoutSec.IsNull() {
			*timeoutSec22 = r.OutputServiceNow.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec22 = nil
		}
		flushPeriodSec33 := new(float64)
		if !r.OutputServiceNow.FlushPeriodSec.IsUnknown() && !r.OutputServiceNow.FlushPeriodSec.IsNull() {
			*flushPeriodSec33 = r.OutputServiceNow.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec33 = nil
		}
		failedRequestLoggingMode20 := new(shared.OutputServiceNowFailedRequestLoggingMode)
		if !r.OutputServiceNow.FailedRequestLoggingMode.IsUnknown() && !r.OutputServiceNow.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode20 = shared.OutputServiceNowFailedRequestLoggingMode(r.OutputServiceNow.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode20 = nil
		}
		connectionTimeout16 := new(float64)
		if !r.OutputServiceNow.ConnectionTimeout.IsUnknown() && !r.OutputServiceNow.ConnectionTimeout.IsNull() {
			*connectionTimeout16 = r.OutputServiceNow.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout16 = nil
		}
		keepAliveTime1 := new(float64)
		if !r.OutputServiceNow.KeepAliveTime.IsUnknown() && !r.OutputServiceNow.KeepAliveTime.IsNull() {
			*keepAliveTime1 = r.OutputServiceNow.KeepAliveTime.ValueFloat64()
		} else {
			keepAliveTime1 = nil
		}
		keepAlive4 := new(bool)
		if !r.OutputServiceNow.KeepAlive.IsUnknown() && !r.OutputServiceNow.KeepAlive.IsNull() {
			*keepAlive4 = r.OutputServiceNow.KeepAlive.ValueBool()
		} else {
			keepAlive4 = nil
		}
		onBackpressure45 := new(shared.OutputServiceNowBackpressureBehavior)
		if !r.OutputServiceNow.OnBackpressure.IsUnknown() && !r.OutputServiceNow.OnBackpressure.IsNull() {
			*onBackpressure45 = shared.OutputServiceNowBackpressureBehavior(r.OutputServiceNow.OnBackpressure.ValueString())
		} else {
			onBackpressure45 = nil
		}
		description49 := new(string)
		if !r.OutputServiceNow.Description.IsUnknown() && !r.OutputServiceNow.Description.IsNull() {
			*description49 = r.OutputServiceNow.Description.ValueString()
		} else {
			description49 = nil
		}
		rejectUnauthorized43 := new(bool)
		if !r.OutputServiceNow.RejectUnauthorized.IsUnknown() && !r.OutputServiceNow.RejectUnauthorized.IsNull() {
			*rejectUnauthorized43 = r.OutputServiceNow.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized43 = nil
		}
		useRoundRobinDns20 := new(bool)
		if !r.OutputServiceNow.UseRoundRobinDNS.IsUnknown() && !r.OutputServiceNow.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns20 = r.OutputServiceNow.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns20 = nil
		}
		extraHTTPHeaders20 := make([]shared.OutputServiceNowExtraHTTPHeaders, 0, len(r.OutputServiceNow.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem20 := range r.OutputServiceNow.ExtraHTTPHeaders {
			name34 := new(string)
			if !extraHTTPHeadersItem20.Name.IsUnknown() && !extraHTTPHeadersItem20.Name.IsNull() {
				*name34 = extraHTTPHeadersItem20.Name.ValueString()
			} else {
				name34 = nil
			}
			var value45 string
			value45 = extraHTTPHeadersItem20.Value.ValueString()

			extraHTTPHeaders20 = append(extraHTTPHeaders20, shared.OutputServiceNowExtraHTTPHeaders{
				Name:  name34,
				Value: value45,
			})
		}
		safeHeaders20 := make([]string, 0, len(r.OutputServiceNow.SafeHeaders))
		for _, safeHeadersItem20 := range r.OutputServiceNow.SafeHeaders {
			safeHeaders20 = append(safeHeaders20, safeHeadersItem20.ValueString())
		}
		responseRetrySettings21 := make([]shared.OutputServiceNowResponseRetrySettings, 0, len(r.OutputServiceNow.ResponseRetrySettings))
		for _, responseRetrySettingsItem21 := range r.OutputServiceNow.ResponseRetrySettings {
			var httpStatus21 float64
			httpStatus21 = responseRetrySettingsItem21.HTTPStatus.ValueFloat64()

			initialBackoff46 := new(float64)
			if !responseRetrySettingsItem21.InitialBackoff.IsUnknown() && !responseRetrySettingsItem21.InitialBackoff.IsNull() {
				*initialBackoff46 = responseRetrySettingsItem21.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff46 = nil
			}
			backoffRate46 := new(float64)
			if !responseRetrySettingsItem21.BackoffRate.IsUnknown() && !responseRetrySettingsItem21.BackoffRate.IsNull() {
				*backoffRate46 = responseRetrySettingsItem21.BackoffRate.ValueFloat64()
			} else {
				backoffRate46 = nil
			}
			maxBackoff42 := new(float64)
			if !responseRetrySettingsItem21.MaxBackoff.IsUnknown() && !responseRetrySettingsItem21.MaxBackoff.IsNull() {
				*maxBackoff42 = responseRetrySettingsItem21.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff42 = nil
			}
			responseRetrySettings21 = append(responseRetrySettings21, shared.OutputServiceNowResponseRetrySettings{
				HTTPStatus:     httpStatus21,
				InitialBackoff: initialBackoff46,
				BackoffRate:    backoffRate46,
				MaxBackoff:     maxBackoff42,
			})
		}
		var timeoutRetrySettings21 *shared.OutputServiceNowTimeoutRetrySettings
		if r.OutputServiceNow.TimeoutRetrySettings != nil {
			timeoutRetry21 := new(bool)
			if !r.OutputServiceNow.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputServiceNow.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry21 = r.OutputServiceNow.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry21 = nil
			}
			initialBackoff47 := new(float64)
			if !r.OutputServiceNow.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputServiceNow.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff47 = r.OutputServiceNow.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff47 = nil
			}
			backoffRate47 := new(float64)
			if !r.OutputServiceNow.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputServiceNow.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate47 = r.OutputServiceNow.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate47 = nil
			}
			maxBackoff43 := new(float64)
			if !r.OutputServiceNow.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputServiceNow.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff43 = r.OutputServiceNow.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff43 = nil
			}
			timeoutRetrySettings21 = &shared.OutputServiceNowTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry21,
				InitialBackoff: initialBackoff47,
				BackoffRate:    backoffRate47,
				MaxBackoff:     maxBackoff43,
			}
		}
		responseHonorRetryAfterHeader21 := new(bool)
		if !r.OutputServiceNow.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputServiceNow.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader21 = r.OutputServiceNow.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader21 = nil
		}
		var tls15 *shared.OutputServiceNowTLSSettingsClientSide
		if r.OutputServiceNow.TLS != nil {
			disabled24 := new(bool)
			if !r.OutputServiceNow.TLS.Disabled.IsUnknown() && !r.OutputServiceNow.TLS.Disabled.IsNull() {
				*disabled24 = r.OutputServiceNow.TLS.Disabled.ValueBool()
			} else {
				disabled24 = nil
			}
			rejectUnauthorized44 := new(bool)
			if !r.OutputServiceNow.TLS.RejectUnauthorized.IsUnknown() && !r.OutputServiceNow.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized44 = r.OutputServiceNow.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized44 = nil
			}
			certificateName14 := new(string)
			if !r.OutputServiceNow.TLS.CertificateName.IsUnknown() && !r.OutputServiceNow.TLS.CertificateName.IsNull() {
				*certificateName14 = r.OutputServiceNow.TLS.CertificateName.ValueString()
			} else {
				certificateName14 = nil
			}
			caPath12 := new(string)
			if !r.OutputServiceNow.TLS.CaPath.IsUnknown() && !r.OutputServiceNow.TLS.CaPath.IsNull() {
				*caPath12 = r.OutputServiceNow.TLS.CaPath.ValueString()
			} else {
				caPath12 = nil
			}
			privKeyPath12 := new(string)
			if !r.OutputServiceNow.TLS.PrivKeyPath.IsUnknown() && !r.OutputServiceNow.TLS.PrivKeyPath.IsNull() {
				*privKeyPath12 = r.OutputServiceNow.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath12 = nil
			}
			certPath12 := new(string)
			if !r.OutputServiceNow.TLS.CertPath.IsUnknown() && !r.OutputServiceNow.TLS.CertPath.IsNull() {
				*certPath12 = r.OutputServiceNow.TLS.CertPath.ValueString()
			} else {
				certPath12 = nil
			}
			passphrase12 := new(string)
			if !r.OutputServiceNow.TLS.Passphrase.IsUnknown() && !r.OutputServiceNow.TLS.Passphrase.IsNull() {
				*passphrase12 = r.OutputServiceNow.TLS.Passphrase.ValueString()
			} else {
				passphrase12 = nil
			}
			minVersion12 := new(shared.OutputServiceNowMinimumTLSVersion)
			if !r.OutputServiceNow.TLS.MinVersion.IsUnknown() && !r.OutputServiceNow.TLS.MinVersion.IsNull() {
				*minVersion12 = shared.OutputServiceNowMinimumTLSVersion(r.OutputServiceNow.TLS.MinVersion.ValueString())
			} else {
				minVersion12 = nil
			}
			maxVersion12 := new(shared.OutputServiceNowMaximumTLSVersion)
			if !r.OutputServiceNow.TLS.MaxVersion.IsUnknown() && !r.OutputServiceNow.TLS.MaxVersion.IsNull() {
				*maxVersion12 = shared.OutputServiceNowMaximumTLSVersion(r.OutputServiceNow.TLS.MaxVersion.ValueString())
			} else {
				maxVersion12 = nil
			}
			tls15 = &shared.OutputServiceNowTLSSettingsClientSide{
				Disabled:           disabled24,
				RejectUnauthorized: rejectUnauthorized44,
				CertificateName:    certificateName14,
				CaPath:             caPath12,
				PrivKeyPath:        privKeyPath12,
				CertPath:           certPath12,
				Passphrase:         passphrase12,
				MinVersion:         minVersion12,
				MaxVersion:         maxVersion12,
			}
		}
		pqMaxFileSize38 := new(string)
		if !r.OutputServiceNow.PqMaxFileSize.IsUnknown() && !r.OutputServiceNow.PqMaxFileSize.IsNull() {
			*pqMaxFileSize38 = r.OutputServiceNow.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize38 = nil
		}
		pqMaxSize38 := new(string)
		if !r.OutputServiceNow.PqMaxSize.IsUnknown() && !r.OutputServiceNow.PqMaxSize.IsNull() {
			*pqMaxSize38 = r.OutputServiceNow.PqMaxSize.ValueString()
		} else {
			pqMaxSize38 = nil
		}
		pqPath38 := new(string)
		if !r.OutputServiceNow.PqPath.IsUnknown() && !r.OutputServiceNow.PqPath.IsNull() {
			*pqPath38 = r.OutputServiceNow.PqPath.ValueString()
		} else {
			pqPath38 = nil
		}
		pqCompress38 := new(shared.OutputServiceNowPqCompressCompression)
		if !r.OutputServiceNow.PqCompress.IsUnknown() && !r.OutputServiceNow.PqCompress.IsNull() {
			*pqCompress38 = shared.OutputServiceNowPqCompressCompression(r.OutputServiceNow.PqCompress.ValueString())
		} else {
			pqCompress38 = nil
		}
		pqOnBackpressure38 := new(shared.OutputServiceNowQueueFullBehavior)
		if !r.OutputServiceNow.PqOnBackpressure.IsUnknown() && !r.OutputServiceNow.PqOnBackpressure.IsNull() {
			*pqOnBackpressure38 = shared.OutputServiceNowQueueFullBehavior(r.OutputServiceNow.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure38 = nil
		}
		pqMode38 := new(shared.OutputServiceNowMode)
		if !r.OutputServiceNow.PqMode.IsUnknown() && !r.OutputServiceNow.PqMode.IsNull() {
			*pqMode38 = shared.OutputServiceNowMode(r.OutputServiceNow.PqMode.ValueString())
		} else {
			pqMode38 = nil
		}
		var pqControls38 *shared.OutputServiceNowPqControls
		if r.OutputServiceNow.PqControls != nil {
			pqControls38 = &shared.OutputServiceNowPqControls{}
		}
		outputServiceNow = &shared.OutputServiceNow{
			ID:                            id49,
			Type:                          typeVar49,
			Pipeline:                      pipeline49,
			SystemFields:                  systemFields49,
			Environment:                   environment49,
			Streamtags:                    streamtags49,
			Endpoint:                      endpoint10,
			TokenSecret:                   tokenSecret,
			AuthTokenName:                 authTokenName,
			OtlpVersion:                   otlpVersion1,
			MaxPayloadSizeKB:              maxPayloadSizeKb22,
			Protocol:                      protocol5,
			Compress:                      compress28,
			HTTPCompress:                  httpCompress1,
			HTTPTracesEndpointOverride:    httpTracesEndpointOverride1,
			HTTPMetricsEndpointOverride:   httpMetricsEndpointOverride1,
			HTTPLogsEndpointOverride:      httpLogsEndpointOverride1,
			Metadata:                      metadata2,
			Concurrency:                   concurrency23,
			TimeoutSec:                    timeoutSec22,
			FlushPeriodSec:                flushPeriodSec33,
			FailedRequestLoggingMode:      failedRequestLoggingMode20,
			ConnectionTimeout:             connectionTimeout16,
			KeepAliveTime:                 keepAliveTime1,
			KeepAlive:                     keepAlive4,
			OnBackpressure:                onBackpressure45,
			Description:                   description49,
			RejectUnauthorized:            rejectUnauthorized43,
			UseRoundRobinDNS:              useRoundRobinDns20,
			ExtraHTTPHeaders:              extraHTTPHeaders20,
			SafeHeaders:                   safeHeaders20,
			ResponseRetrySettings:         responseRetrySettings21,
			TimeoutRetrySettings:          timeoutRetrySettings21,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader21,
			TLS:                           tls15,
			PqMaxFileSize:                 pqMaxFileSize38,
			PqMaxSize:                     pqMaxSize38,
			PqPath:                        pqPath38,
			PqCompress:                    pqCompress38,
			PqOnBackpressure:              pqOnBackpressure38,
			PqMode:                        pqMode38,
			PqControls:                    pqControls38,
		}
	}
	if outputServiceNow != nil {
		out = shared.Output{
			OutputServiceNow: outputServiceNow,
		}
	}
	var outputDataset *shared.OutputDataset
	if r.OutputDataset != nil {
		var id50 string
		id50 = r.OutputDataset.ID.ValueString()

		typeVar50 := shared.OutputDatasetType(r.OutputDataset.Type.ValueString())
		pipeline50 := new(string)
		if !r.OutputDataset.Pipeline.IsUnknown() && !r.OutputDataset.Pipeline.IsNull() {
			*pipeline50 = r.OutputDataset.Pipeline.ValueString()
		} else {
			pipeline50 = nil
		}
		systemFields50 := make([]string, 0, len(r.OutputDataset.SystemFields))
		for _, systemFieldsItem50 := range r.OutputDataset.SystemFields {
			systemFields50 = append(systemFields50, systemFieldsItem50.ValueString())
		}
		environment50 := new(string)
		if !r.OutputDataset.Environment.IsUnknown() && !r.OutputDataset.Environment.IsNull() {
			*environment50 = r.OutputDataset.Environment.ValueString()
		} else {
			environment50 = nil
		}
		streamtags50 := make([]string, 0, len(r.OutputDataset.Streamtags))
		for _, streamtagsItem50 := range r.OutputDataset.Streamtags {
			streamtags50 = append(streamtags50, streamtagsItem50.ValueString())
		}
		messageField1 := new(string)
		if !r.OutputDataset.MessageField.IsUnknown() && !r.OutputDataset.MessageField.IsNull() {
			*messageField1 = r.OutputDataset.MessageField.ValueString()
		} else {
			messageField1 = nil
		}
		excludeFields := make([]string, 0, len(r.OutputDataset.ExcludeFields))
		for _, excludeFieldsItem := range r.OutputDataset.ExcludeFields {
			excludeFields = append(excludeFields, excludeFieldsItem.ValueString())
		}
		serverHostField := new(string)
		if !r.OutputDataset.ServerHostField.IsUnknown() && !r.OutputDataset.ServerHostField.IsNull() {
			*serverHostField = r.OutputDataset.ServerHostField.ValueString()
		} else {
			serverHostField = nil
		}
		timestampField := new(string)
		if !r.OutputDataset.TimestampField.IsUnknown() && !r.OutputDataset.TimestampField.IsNull() {
			*timestampField = r.OutputDataset.TimestampField.ValueString()
		} else {
			timestampField = nil
		}
		defaultSeverity := new(shared.OutputDatasetSeverity)
		if !r.OutputDataset.DefaultSeverity.IsUnknown() && !r.OutputDataset.DefaultSeverity.IsNull() {
			*defaultSeverity = shared.OutputDatasetSeverity(r.OutputDataset.DefaultSeverity.ValueString())
		} else {
			defaultSeverity = nil
		}
		responseRetrySettings22 := make([]shared.OutputDatasetResponseRetrySettings, 0, len(r.OutputDataset.ResponseRetrySettings))
		for _, responseRetrySettingsItem22 := range r.OutputDataset.ResponseRetrySettings {
			var httpStatus22 float64
			httpStatus22 = responseRetrySettingsItem22.HTTPStatus.ValueFloat64()

			initialBackoff48 := new(float64)
			if !responseRetrySettingsItem22.InitialBackoff.IsUnknown() && !responseRetrySettingsItem22.InitialBackoff.IsNull() {
				*initialBackoff48 = responseRetrySettingsItem22.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff48 = nil
			}
			backoffRate48 := new(float64)
			if !responseRetrySettingsItem22.BackoffRate.IsUnknown() && !responseRetrySettingsItem22.BackoffRate.IsNull() {
				*backoffRate48 = responseRetrySettingsItem22.BackoffRate.ValueFloat64()
			} else {
				backoffRate48 = nil
			}
			maxBackoff44 := new(float64)
			if !responseRetrySettingsItem22.MaxBackoff.IsUnknown() && !responseRetrySettingsItem22.MaxBackoff.IsNull() {
				*maxBackoff44 = responseRetrySettingsItem22.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff44 = nil
			}
			responseRetrySettings22 = append(responseRetrySettings22, shared.OutputDatasetResponseRetrySettings{
				HTTPStatus:     httpStatus22,
				InitialBackoff: initialBackoff48,
				BackoffRate:    backoffRate48,
				MaxBackoff:     maxBackoff44,
			})
		}
		var timeoutRetrySettings22 *shared.OutputDatasetTimeoutRetrySettings
		if r.OutputDataset.TimeoutRetrySettings != nil {
			timeoutRetry22 := new(bool)
			if !r.OutputDataset.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputDataset.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry22 = r.OutputDataset.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry22 = nil
			}
			initialBackoff49 := new(float64)
			if !r.OutputDataset.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputDataset.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff49 = r.OutputDataset.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff49 = nil
			}
			backoffRate49 := new(float64)
			if !r.OutputDataset.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputDataset.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate49 = r.OutputDataset.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate49 = nil
			}
			maxBackoff45 := new(float64)
			if !r.OutputDataset.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputDataset.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff45 = r.OutputDataset.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff45 = nil
			}
			timeoutRetrySettings22 = &shared.OutputDatasetTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry22,
				InitialBackoff: initialBackoff49,
				BackoffRate:    backoffRate49,
				MaxBackoff:     maxBackoff45,
			}
		}
		responseHonorRetryAfterHeader22 := new(bool)
		if !r.OutputDataset.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputDataset.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader22 = r.OutputDataset.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader22 = nil
		}
		site2 := new(shared.DataSetSite)
		if !r.OutputDataset.Site.IsUnknown() && !r.OutputDataset.Site.IsNull() {
			*site2 = shared.DataSetSite(r.OutputDataset.Site.ValueString())
		} else {
			site2 = nil
		}
		concurrency24 := new(float64)
		if !r.OutputDataset.Concurrency.IsUnknown() && !r.OutputDataset.Concurrency.IsNull() {
			*concurrency24 = r.OutputDataset.Concurrency.ValueFloat64()
		} else {
			concurrency24 = nil
		}
		maxPayloadSizeKb23 := new(float64)
		if !r.OutputDataset.MaxPayloadSizeKB.IsUnknown() && !r.OutputDataset.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb23 = r.OutputDataset.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb23 = nil
		}
		maxPayloadEvents21 := new(float64)
		if !r.OutputDataset.MaxPayloadEvents.IsUnknown() && !r.OutputDataset.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents21 = r.OutputDataset.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents21 = nil
		}
		compress29 := new(bool)
		if !r.OutputDataset.Compress.IsUnknown() && !r.OutputDataset.Compress.IsNull() {
			*compress29 = r.OutputDataset.Compress.ValueBool()
		} else {
			compress29 = nil
		}
		rejectUnauthorized45 := new(bool)
		if !r.OutputDataset.RejectUnauthorized.IsUnknown() && !r.OutputDataset.RejectUnauthorized.IsNull() {
			*rejectUnauthorized45 = r.OutputDataset.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized45 = nil
		}
		timeoutSec23 := new(float64)
		if !r.OutputDataset.TimeoutSec.IsUnknown() && !r.OutputDataset.TimeoutSec.IsNull() {
			*timeoutSec23 = r.OutputDataset.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec23 = nil
		}
		flushPeriodSec34 := new(float64)
		if !r.OutputDataset.FlushPeriodSec.IsUnknown() && !r.OutputDataset.FlushPeriodSec.IsNull() {
			*flushPeriodSec34 = r.OutputDataset.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec34 = nil
		}
		extraHTTPHeaders21 := make([]shared.OutputDatasetExtraHTTPHeaders, 0, len(r.OutputDataset.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem21 := range r.OutputDataset.ExtraHTTPHeaders {
			name35 := new(string)
			if !extraHTTPHeadersItem21.Name.IsUnknown() && !extraHTTPHeadersItem21.Name.IsNull() {
				*name35 = extraHTTPHeadersItem21.Name.ValueString()
			} else {
				name35 = nil
			}
			var value46 string
			value46 = extraHTTPHeadersItem21.Value.ValueString()

			extraHTTPHeaders21 = append(extraHTTPHeaders21, shared.OutputDatasetExtraHTTPHeaders{
				Name:  name35,
				Value: value46,
			})
		}
		useRoundRobinDns21 := new(bool)
		if !r.OutputDataset.UseRoundRobinDNS.IsUnknown() && !r.OutputDataset.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns21 = r.OutputDataset.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns21 = nil
		}
		failedRequestLoggingMode21 := new(shared.OutputDatasetFailedRequestLoggingMode)
		if !r.OutputDataset.FailedRequestLoggingMode.IsUnknown() && !r.OutputDataset.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode21 = shared.OutputDatasetFailedRequestLoggingMode(r.OutputDataset.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode21 = nil
		}
		safeHeaders21 := make([]string, 0, len(r.OutputDataset.SafeHeaders))
		for _, safeHeadersItem21 := range r.OutputDataset.SafeHeaders {
			safeHeaders21 = append(safeHeaders21, safeHeadersItem21.ValueString())
		}
		onBackpressure46 := new(shared.OutputDatasetBackpressureBehavior)
		if !r.OutputDataset.OnBackpressure.IsUnknown() && !r.OutputDataset.OnBackpressure.IsNull() {
			*onBackpressure46 = shared.OutputDatasetBackpressureBehavior(r.OutputDataset.OnBackpressure.ValueString())
		} else {
			onBackpressure46 = nil
		}
		authType26 := new(shared.OutputDatasetAuthenticationMethod)
		if !r.OutputDataset.AuthType.IsUnknown() && !r.OutputDataset.AuthType.IsNull() {
			*authType26 = shared.OutputDatasetAuthenticationMethod(r.OutputDataset.AuthType.ValueString())
		} else {
			authType26 = nil
		}
		totalMemoryLimitKb8 := new(float64)
		if !r.OutputDataset.TotalMemoryLimitKB.IsUnknown() && !r.OutputDataset.TotalMemoryLimitKB.IsNull() {
			*totalMemoryLimitKb8 = r.OutputDataset.TotalMemoryLimitKB.ValueFloat64()
		} else {
			totalMemoryLimitKb8 = nil
		}
		description50 := new(string)
		if !r.OutputDataset.Description.IsUnknown() && !r.OutputDataset.Description.IsNull() {
			*description50 = r.OutputDataset.Description.ValueString()
		} else {
			description50 = nil
		}
		customUrl3 := new(string)
		if !r.OutputDataset.CustomURL.IsUnknown() && !r.OutputDataset.CustomURL.IsNull() {
			*customUrl3 = r.OutputDataset.CustomURL.ValueString()
		} else {
			customUrl3 = nil
		}
		pqMaxFileSize39 := new(string)
		if !r.OutputDataset.PqMaxFileSize.IsUnknown() && !r.OutputDataset.PqMaxFileSize.IsNull() {
			*pqMaxFileSize39 = r.OutputDataset.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize39 = nil
		}
		pqMaxSize39 := new(string)
		if !r.OutputDataset.PqMaxSize.IsUnknown() && !r.OutputDataset.PqMaxSize.IsNull() {
			*pqMaxSize39 = r.OutputDataset.PqMaxSize.ValueString()
		} else {
			pqMaxSize39 = nil
		}
		pqPath39 := new(string)
		if !r.OutputDataset.PqPath.IsUnknown() && !r.OutputDataset.PqPath.IsNull() {
			*pqPath39 = r.OutputDataset.PqPath.ValueString()
		} else {
			pqPath39 = nil
		}
		pqCompress39 := new(shared.OutputDatasetCompression)
		if !r.OutputDataset.PqCompress.IsUnknown() && !r.OutputDataset.PqCompress.IsNull() {
			*pqCompress39 = shared.OutputDatasetCompression(r.OutputDataset.PqCompress.ValueString())
		} else {
			pqCompress39 = nil
		}
		pqOnBackpressure39 := new(shared.OutputDatasetQueueFullBehavior)
		if !r.OutputDataset.PqOnBackpressure.IsUnknown() && !r.OutputDataset.PqOnBackpressure.IsNull() {
			*pqOnBackpressure39 = shared.OutputDatasetQueueFullBehavior(r.OutputDataset.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure39 = nil
		}
		pqMode39 := new(shared.OutputDatasetMode)
		if !r.OutputDataset.PqMode.IsUnknown() && !r.OutputDataset.PqMode.IsNull() {
			*pqMode39 = shared.OutputDatasetMode(r.OutputDataset.PqMode.ValueString())
		} else {
			pqMode39 = nil
		}
		var pqControls39 *shared.OutputDatasetPqControls
		if r.OutputDataset.PqControls != nil {
			pqControls39 = &shared.OutputDatasetPqControls{}
		}
		apiKey4 := new(string)
		if !r.OutputDataset.APIKey.IsUnknown() && !r.OutputDataset.APIKey.IsNull() {
			*apiKey4 = r.OutputDataset.APIKey.ValueString()
		} else {
			apiKey4 = nil
		}
		textSecret22 := new(string)
		if !r.OutputDataset.TextSecret.IsUnknown() && !r.OutputDataset.TextSecret.IsNull() {
			*textSecret22 = r.OutputDataset.TextSecret.ValueString()
		} else {
			textSecret22 = nil
		}
		outputDataset = &shared.OutputDataset{
			ID:                            id50,
			Type:                          typeVar50,
			Pipeline:                      pipeline50,
			SystemFields:                  systemFields50,
			Environment:                   environment50,
			Streamtags:                    streamtags50,
			MessageField:                  messageField1,
			ExcludeFields:                 excludeFields,
			ServerHostField:               serverHostField,
			TimestampField:                timestampField,
			DefaultSeverity:               defaultSeverity,
			ResponseRetrySettings:         responseRetrySettings22,
			TimeoutRetrySettings:          timeoutRetrySettings22,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader22,
			Site:                          site2,
			Concurrency:                   concurrency24,
			MaxPayloadSizeKB:              maxPayloadSizeKb23,
			MaxPayloadEvents:              maxPayloadEvents21,
			Compress:                      compress29,
			RejectUnauthorized:            rejectUnauthorized45,
			TimeoutSec:                    timeoutSec23,
			FlushPeriodSec:                flushPeriodSec34,
			ExtraHTTPHeaders:              extraHTTPHeaders21,
			UseRoundRobinDNS:              useRoundRobinDns21,
			FailedRequestLoggingMode:      failedRequestLoggingMode21,
			SafeHeaders:                   safeHeaders21,
			OnBackpressure:                onBackpressure46,
			AuthType:                      authType26,
			TotalMemoryLimitKB:            totalMemoryLimitKb8,
			Description:                   description50,
			CustomURL:                     customUrl3,
			PqMaxFileSize:                 pqMaxFileSize39,
			PqMaxSize:                     pqMaxSize39,
			PqPath:                        pqPath39,
			PqCompress:                    pqCompress39,
			PqOnBackpressure:              pqOnBackpressure39,
			PqMode:                        pqMode39,
			PqControls:                    pqControls39,
			APIKey:                        apiKey4,
			TextSecret:                    textSecret22,
		}
	}
	if outputDataset != nil {
		out = shared.Output{
			OutputDataset: outputDataset,
		}
	}
	var outputCriblTCP *shared.OutputCriblTCP
	if r.OutputCriblTCP != nil {
		var id51 string
		id51 = r.OutputCriblTCP.ID.ValueString()

		typeVar51 := shared.OutputCriblTCPType(r.OutputCriblTCP.Type.ValueString())
		pipeline51 := new(string)
		if !r.OutputCriblTCP.Pipeline.IsUnknown() && !r.OutputCriblTCP.Pipeline.IsNull() {
			*pipeline51 = r.OutputCriblTCP.Pipeline.ValueString()
		} else {
			pipeline51 = nil
		}
		systemFields51 := make([]string, 0, len(r.OutputCriblTCP.SystemFields))
		for _, systemFieldsItem51 := range r.OutputCriblTCP.SystemFields {
			systemFields51 = append(systemFields51, systemFieldsItem51.ValueString())
		}
		environment51 := new(string)
		if !r.OutputCriblTCP.Environment.IsUnknown() && !r.OutputCriblTCP.Environment.IsNull() {
			*environment51 = r.OutputCriblTCP.Environment.ValueString()
		} else {
			environment51 = nil
		}
		streamtags51 := make([]string, 0, len(r.OutputCriblTCP.Streamtags))
		for _, streamtagsItem51 := range r.OutputCriblTCP.Streamtags {
			streamtags51 = append(streamtags51, streamtagsItem51.ValueString())
		}
		loadBalanced5 := new(bool)
		if !r.OutputCriblTCP.LoadBalanced.IsUnknown() && !r.OutputCriblTCP.LoadBalanced.IsNull() {
			*loadBalanced5 = r.OutputCriblTCP.LoadBalanced.ValueBool()
		} else {
			loadBalanced5 = nil
		}
		compression5 := new(shared.OutputCriblTCPCompression)
		if !r.OutputCriblTCP.Compression.IsUnknown() && !r.OutputCriblTCP.Compression.IsNull() {
			*compression5 = shared.OutputCriblTCPCompression(r.OutputCriblTCP.Compression.ValueString())
		} else {
			compression5 = nil
		}
		logFailedRequests4 := new(bool)
		if !r.OutputCriblTCP.LogFailedRequests.IsUnknown() && !r.OutputCriblTCP.LogFailedRequests.IsNull() {
			*logFailedRequests4 = r.OutputCriblTCP.LogFailedRequests.ValueBool()
		} else {
			logFailedRequests4 = nil
		}
		throttleRatePerSec7 := new(string)
		if !r.OutputCriblTCP.ThrottleRatePerSec.IsUnknown() && !r.OutputCriblTCP.ThrottleRatePerSec.IsNull() {
			*throttleRatePerSec7 = r.OutputCriblTCP.ThrottleRatePerSec.ValueString()
		} else {
			throttleRatePerSec7 = nil
		}
		var tls16 *shared.OutputCriblTCPTLSSettingsClientSide
		if r.OutputCriblTCP.TLS != nil {
			disabled25 := new(bool)
			if !r.OutputCriblTCP.TLS.Disabled.IsUnknown() && !r.OutputCriblTCP.TLS.Disabled.IsNull() {
				*disabled25 = r.OutputCriblTCP.TLS.Disabled.ValueBool()
			} else {
				disabled25 = nil
			}
			rejectUnauthorized46 := new(bool)
			if !r.OutputCriblTCP.TLS.RejectUnauthorized.IsUnknown() && !r.OutputCriblTCP.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized46 = r.OutputCriblTCP.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized46 = nil
			}
			servername13 := new(string)
			if !r.OutputCriblTCP.TLS.Servername.IsUnknown() && !r.OutputCriblTCP.TLS.Servername.IsNull() {
				*servername13 = r.OutputCriblTCP.TLS.Servername.ValueString()
			} else {
				servername13 = nil
			}
			certificateName15 := new(string)
			if !r.OutputCriblTCP.TLS.CertificateName.IsUnknown() && !r.OutputCriblTCP.TLS.CertificateName.IsNull() {
				*certificateName15 = r.OutputCriblTCP.TLS.CertificateName.ValueString()
			} else {
				certificateName15 = nil
			}
			caPath13 := new(string)
			if !r.OutputCriblTCP.TLS.CaPath.IsUnknown() && !r.OutputCriblTCP.TLS.CaPath.IsNull() {
				*caPath13 = r.OutputCriblTCP.TLS.CaPath.ValueString()
			} else {
				caPath13 = nil
			}
			privKeyPath13 := new(string)
			if !r.OutputCriblTCP.TLS.PrivKeyPath.IsUnknown() && !r.OutputCriblTCP.TLS.PrivKeyPath.IsNull() {
				*privKeyPath13 = r.OutputCriblTCP.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath13 = nil
			}
			certPath13 := new(string)
			if !r.OutputCriblTCP.TLS.CertPath.IsUnknown() && !r.OutputCriblTCP.TLS.CertPath.IsNull() {
				*certPath13 = r.OutputCriblTCP.TLS.CertPath.ValueString()
			} else {
				certPath13 = nil
			}
			passphrase13 := new(string)
			if !r.OutputCriblTCP.TLS.Passphrase.IsUnknown() && !r.OutputCriblTCP.TLS.Passphrase.IsNull() {
				*passphrase13 = r.OutputCriblTCP.TLS.Passphrase.ValueString()
			} else {
				passphrase13 = nil
			}
			minVersion13 := new(shared.OutputCriblTCPMinimumTLSVersion)
			if !r.OutputCriblTCP.TLS.MinVersion.IsUnknown() && !r.OutputCriblTCP.TLS.MinVersion.IsNull() {
				*minVersion13 = shared.OutputCriblTCPMinimumTLSVersion(r.OutputCriblTCP.TLS.MinVersion.ValueString())
			} else {
				minVersion13 = nil
			}
			maxVersion13 := new(shared.OutputCriblTCPMaximumTLSVersion)
			if !r.OutputCriblTCP.TLS.MaxVersion.IsUnknown() && !r.OutputCriblTCP.TLS.MaxVersion.IsNull() {
				*maxVersion13 = shared.OutputCriblTCPMaximumTLSVersion(r.OutputCriblTCP.TLS.MaxVersion.ValueString())
			} else {
				maxVersion13 = nil
			}
			tls16 = &shared.OutputCriblTCPTLSSettingsClientSide{
				Disabled:           disabled25,
				RejectUnauthorized: rejectUnauthorized46,
				Servername:         servername13,
				CertificateName:    certificateName15,
				CaPath:             caPath13,
				PrivKeyPath:        privKeyPath13,
				CertPath:           certPath13,
				Passphrase:         passphrase13,
				MinVersion:         minVersion13,
				MaxVersion:         maxVersion13,
			}
		}
		connectionTimeout17 := new(float64)
		if !r.OutputCriblTCP.ConnectionTimeout.IsUnknown() && !r.OutputCriblTCP.ConnectionTimeout.IsNull() {
			*connectionTimeout17 = r.OutputCriblTCP.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout17 = nil
		}
		writeTimeout7 := new(float64)
		if !r.OutputCriblTCP.WriteTimeout.IsUnknown() && !r.OutputCriblTCP.WriteTimeout.IsNull() {
			*writeTimeout7 = r.OutputCriblTCP.WriteTimeout.ValueFloat64()
		} else {
			writeTimeout7 = nil
		}
		tokenTTLMinutes1 := new(float64)
		if !r.OutputCriblTCP.TokenTTLMinutes.IsUnknown() && !r.OutputCriblTCP.TokenTTLMinutes.IsNull() {
			*tokenTTLMinutes1 = r.OutputCriblTCP.TokenTTLMinutes.ValueFloat64()
		} else {
			tokenTTLMinutes1 = nil
		}
		excludeFields1 := make([]string, 0, len(r.OutputCriblTCP.ExcludeFields))
		for _, excludeFieldsItem1 := range r.OutputCriblTCP.ExcludeFields {
			excludeFields1 = append(excludeFields1, excludeFieldsItem1.ValueString())
		}
		onBackpressure47 := new(shared.OutputCriblTCPBackpressureBehavior)
		if !r.OutputCriblTCP.OnBackpressure.IsUnknown() && !r.OutputCriblTCP.OnBackpressure.IsNull() {
			*onBackpressure47 = shared.OutputCriblTCPBackpressureBehavior(r.OutputCriblTCP.OnBackpressure.ValueString())
		} else {
			onBackpressure47 = nil
		}
		description51 := new(string)
		if !r.OutputCriblTCP.Description.IsUnknown() && !r.OutputCriblTCP.Description.IsNull() {
			*description51 = r.OutputCriblTCP.Description.ValueString()
		} else {
			description51 = nil
		}
		host10 := new(string)
		if !r.OutputCriblTCP.Host.IsUnknown() && !r.OutputCriblTCP.Host.IsNull() {
			*host10 = r.OutputCriblTCP.Host.ValueString()
		} else {
			host10 = nil
		}
		port9 := new(float64)
		if !r.OutputCriblTCP.Port.IsUnknown() && !r.OutputCriblTCP.Port.IsNull() {
			*port9 = r.OutputCriblTCP.Port.ValueFloat64()
		} else {
			port9 = nil
		}
		excludeSelf5 := new(bool)
		if !r.OutputCriblTCP.ExcludeSelf.IsUnknown() && !r.OutputCriblTCP.ExcludeSelf.IsNull() {
			*excludeSelf5 = r.OutputCriblTCP.ExcludeSelf.ValueBool()
		} else {
			excludeSelf5 = nil
		}
		hosts3 := make([]shared.OutputCriblTCPHosts, 0, len(r.OutputCriblTCP.Hosts))
		for _, hostsItem3 := range r.OutputCriblTCP.Hosts {
			var host11 string
			host11 = hostsItem3.Host.ValueString()

			port10 := new(float64)
			if !hostsItem3.Port.IsUnknown() && !hostsItem3.Port.IsNull() {
				*port10 = hostsItem3.Port.ValueFloat64()
			} else {
				port10 = nil
			}
			tls17 := new(shared.OutputCriblTCPTLS)
			if !hostsItem3.TLS.IsUnknown() && !hostsItem3.TLS.IsNull() {
				*tls17 = shared.OutputCriblTCPTLS(hostsItem3.TLS.ValueString())
			} else {
				tls17 = nil
			}
			servername14 := new(string)
			if !hostsItem3.Servername.IsUnknown() && !hostsItem3.Servername.IsNull() {
				*servername14 = hostsItem3.Servername.ValueString()
			} else {
				servername14 = nil
			}
			weight5 := new(float64)
			if !hostsItem3.Weight.IsUnknown() && !hostsItem3.Weight.IsNull() {
				*weight5 = hostsItem3.Weight.ValueFloat64()
			} else {
				weight5 = nil
			}
			hosts3 = append(hosts3, shared.OutputCriblTCPHosts{
				Host:       host11,
				Port:       port10,
				TLS:        tls17,
				Servername: servername14,
				Weight:     weight5,
			})
		}
		dnsResolvePeriodSec9 := new(float64)
		if !r.OutputCriblTCP.DNSResolvePeriodSec.IsUnknown() && !r.OutputCriblTCP.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec9 = r.OutputCriblTCP.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec9 = nil
		}
		loadBalanceStatsPeriodSec5 := new(float64)
		if !r.OutputCriblTCP.LoadBalanceStatsPeriodSec.IsUnknown() && !r.OutputCriblTCP.LoadBalanceStatsPeriodSec.IsNull() {
			*loadBalanceStatsPeriodSec5 = r.OutputCriblTCP.LoadBalanceStatsPeriodSec.ValueFloat64()
		} else {
			loadBalanceStatsPeriodSec5 = nil
		}
		maxConcurrentSenders2 := new(float64)
		if !r.OutputCriblTCP.MaxConcurrentSenders.IsUnknown() && !r.OutputCriblTCP.MaxConcurrentSenders.IsNull() {
			*maxConcurrentSenders2 = r.OutputCriblTCP.MaxConcurrentSenders.ValueFloat64()
		} else {
			maxConcurrentSenders2 = nil
		}
		pqMaxFileSize40 := new(string)
		if !r.OutputCriblTCP.PqMaxFileSize.IsUnknown() && !r.OutputCriblTCP.PqMaxFileSize.IsNull() {
			*pqMaxFileSize40 = r.OutputCriblTCP.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize40 = nil
		}
		pqMaxSize40 := new(string)
		if !r.OutputCriblTCP.PqMaxSize.IsUnknown() && !r.OutputCriblTCP.PqMaxSize.IsNull() {
			*pqMaxSize40 = r.OutputCriblTCP.PqMaxSize.ValueString()
		} else {
			pqMaxSize40 = nil
		}
		pqPath40 := new(string)
		if !r.OutputCriblTCP.PqPath.IsUnknown() && !r.OutputCriblTCP.PqPath.IsNull() {
			*pqPath40 = r.OutputCriblTCP.PqPath.ValueString()
		} else {
			pqPath40 = nil
		}
		pqCompress40 := new(shared.OutputCriblTCPPqCompressCompression)
		if !r.OutputCriblTCP.PqCompress.IsUnknown() && !r.OutputCriblTCP.PqCompress.IsNull() {
			*pqCompress40 = shared.OutputCriblTCPPqCompressCompression(r.OutputCriblTCP.PqCompress.ValueString())
		} else {
			pqCompress40 = nil
		}
		pqOnBackpressure40 := new(shared.OutputCriblTCPQueueFullBehavior)
		if !r.OutputCriblTCP.PqOnBackpressure.IsUnknown() && !r.OutputCriblTCP.PqOnBackpressure.IsNull() {
			*pqOnBackpressure40 = shared.OutputCriblTCPQueueFullBehavior(r.OutputCriblTCP.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure40 = nil
		}
		pqMode40 := new(shared.OutputCriblTCPMode)
		if !r.OutputCriblTCP.PqMode.IsUnknown() && !r.OutputCriblTCP.PqMode.IsNull() {
			*pqMode40 = shared.OutputCriblTCPMode(r.OutputCriblTCP.PqMode.ValueString())
		} else {
			pqMode40 = nil
		}
		var pqControls40 *shared.OutputCriblTCPPqControls
		if r.OutputCriblTCP.PqControls != nil {
			pqControls40 = &shared.OutputCriblTCPPqControls{}
		}
		outputCriblTCP = &shared.OutputCriblTCP{
			ID:                        id51,
			Type:                      typeVar51,
			Pipeline:                  pipeline51,
			SystemFields:              systemFields51,
			Environment:               environment51,
			Streamtags:                streamtags51,
			LoadBalanced:              loadBalanced5,
			Compression:               compression5,
			LogFailedRequests:         logFailedRequests4,
			ThrottleRatePerSec:        throttleRatePerSec7,
			TLS:                       tls16,
			ConnectionTimeout:         connectionTimeout17,
			WriteTimeout:              writeTimeout7,
			TokenTTLMinutes:           tokenTTLMinutes1,
			ExcludeFields:             excludeFields1,
			OnBackpressure:            onBackpressure47,
			Description:               description51,
			Host:                      host10,
			Port:                      port9,
			ExcludeSelf:               excludeSelf5,
			Hosts:                     hosts3,
			DNSResolvePeriodSec:       dnsResolvePeriodSec9,
			LoadBalanceStatsPeriodSec: loadBalanceStatsPeriodSec5,
			MaxConcurrentSenders:      maxConcurrentSenders2,
			PqMaxFileSize:             pqMaxFileSize40,
			PqMaxSize:                 pqMaxSize40,
			PqPath:                    pqPath40,
			PqCompress:                pqCompress40,
			PqOnBackpressure:          pqOnBackpressure40,
			PqMode:                    pqMode40,
			PqControls:                pqControls40,
		}
	}
	if outputCriblTCP != nil {
		out = shared.Output{
			OutputCriblTCP: outputCriblTCP,
		}
	}
	var outputCriblHTTP *shared.OutputCriblHTTP
	if r.OutputCriblHTTP != nil {
		var status *shared.OutputCriblHTTPStatus
		if r.OutputCriblHTTP.Status != nil {
			health := shared.Health(r.OutputCriblHTTP.Status.Health.ValueString())
			metrics := make(map[string]interface{})
			for metricsKey, metricsValue := range r.OutputCriblHTTP.Status.Metrics {
				var metricsInst interface{}
				_ = json.Unmarshal([]byte(metricsValue.ValueString()), &metricsInst)
				metrics[metricsKey] = metricsInst
			}
			var timestamp float64
			timestamp = r.OutputCriblHTTP.Status.Timestamp.ValueFloat64()

			useStatusFromLB := new(bool)
			if !r.OutputCriblHTTP.Status.UseStatusFromLB.IsUnknown() && !r.OutputCriblHTTP.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLB = r.OutputCriblHTTP.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLB = nil
			}
			status = &shared.OutputCriblHTTPStatus{
				Health:          health,
				Metrics:         metrics,
				Timestamp:       timestamp,
				UseStatusFromLB: useStatusFromLB,
			}
		}
		var id52 string
		id52 = r.OutputCriblHTTP.ID.ValueString()

		typeVar52 := shared.OutputCriblHTTPType(r.OutputCriblHTTP.Type.ValueString())
		pipeline52 := new(string)
		if !r.OutputCriblHTTP.Pipeline.IsUnknown() && !r.OutputCriblHTTP.Pipeline.IsNull() {
			*pipeline52 = r.OutputCriblHTTP.Pipeline.ValueString()
		} else {
			pipeline52 = nil
		}
		systemFields52 := make([]string, 0, len(r.OutputCriblHTTP.SystemFields))
		for _, systemFieldsItem52 := range r.OutputCriblHTTP.SystemFields {
			systemFields52 = append(systemFields52, systemFieldsItem52.ValueString())
		}
		environment52 := new(string)
		if !r.OutputCriblHTTP.Environment.IsUnknown() && !r.OutputCriblHTTP.Environment.IsNull() {
			*environment52 = r.OutputCriblHTTP.Environment.ValueString()
		} else {
			environment52 = nil
		}
		streamtags52 := make([]string, 0, len(r.OutputCriblHTTP.Streamtags))
		for _, streamtagsItem52 := range r.OutputCriblHTTP.Streamtags {
			streamtags52 = append(streamtags52, streamtagsItem52.ValueString())
		}
		loadBalanced6 := new(bool)
		if !r.OutputCriblHTTP.LoadBalanced.IsUnknown() && !r.OutputCriblHTTP.LoadBalanced.IsNull() {
			*loadBalanced6 = r.OutputCriblHTTP.LoadBalanced.ValueBool()
		} else {
			loadBalanced6 = nil
		}
		var tls18 *shared.OutputCriblHTTPTLSSettingsClientSide
		if r.OutputCriblHTTP.TLS != nil {
			disabled26 := new(bool)
			if !r.OutputCriblHTTP.TLS.Disabled.IsUnknown() && !r.OutputCriblHTTP.TLS.Disabled.IsNull() {
				*disabled26 = r.OutputCriblHTTP.TLS.Disabled.ValueBool()
			} else {
				disabled26 = nil
			}
			rejectUnauthorized47 := new(bool)
			if !r.OutputCriblHTTP.TLS.RejectUnauthorized.IsUnknown() && !r.OutputCriblHTTP.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized47 = r.OutputCriblHTTP.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized47 = nil
			}
			servername15 := new(string)
			if !r.OutputCriblHTTP.TLS.Servername.IsUnknown() && !r.OutputCriblHTTP.TLS.Servername.IsNull() {
				*servername15 = r.OutputCriblHTTP.TLS.Servername.ValueString()
			} else {
				servername15 = nil
			}
			certificateName16 := new(string)
			if !r.OutputCriblHTTP.TLS.CertificateName.IsUnknown() && !r.OutputCriblHTTP.TLS.CertificateName.IsNull() {
				*certificateName16 = r.OutputCriblHTTP.TLS.CertificateName.ValueString()
			} else {
				certificateName16 = nil
			}
			caPath14 := new(string)
			if !r.OutputCriblHTTP.TLS.CaPath.IsUnknown() && !r.OutputCriblHTTP.TLS.CaPath.IsNull() {
				*caPath14 = r.OutputCriblHTTP.TLS.CaPath.ValueString()
			} else {
				caPath14 = nil
			}
			privKeyPath14 := new(string)
			if !r.OutputCriblHTTP.TLS.PrivKeyPath.IsUnknown() && !r.OutputCriblHTTP.TLS.PrivKeyPath.IsNull() {
				*privKeyPath14 = r.OutputCriblHTTP.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath14 = nil
			}
			certPath14 := new(string)
			if !r.OutputCriblHTTP.TLS.CertPath.IsUnknown() && !r.OutputCriblHTTP.TLS.CertPath.IsNull() {
				*certPath14 = r.OutputCriblHTTP.TLS.CertPath.ValueString()
			} else {
				certPath14 = nil
			}
			passphrase14 := new(string)
			if !r.OutputCriblHTTP.TLS.Passphrase.IsUnknown() && !r.OutputCriblHTTP.TLS.Passphrase.IsNull() {
				*passphrase14 = r.OutputCriblHTTP.TLS.Passphrase.ValueString()
			} else {
				passphrase14 = nil
			}
			minVersion14 := new(shared.OutputCriblHTTPMinimumTLSVersion)
			if !r.OutputCriblHTTP.TLS.MinVersion.IsUnknown() && !r.OutputCriblHTTP.TLS.MinVersion.IsNull() {
				*minVersion14 = shared.OutputCriblHTTPMinimumTLSVersion(r.OutputCriblHTTP.TLS.MinVersion.ValueString())
			} else {
				minVersion14 = nil
			}
			maxVersion14 := new(shared.OutputCriblHTTPMaximumTLSVersion)
			if !r.OutputCriblHTTP.TLS.MaxVersion.IsUnknown() && !r.OutputCriblHTTP.TLS.MaxVersion.IsNull() {
				*maxVersion14 = shared.OutputCriblHTTPMaximumTLSVersion(r.OutputCriblHTTP.TLS.MaxVersion.ValueString())
			} else {
				maxVersion14 = nil
			}
			tls18 = &shared.OutputCriblHTTPTLSSettingsClientSide{
				Disabled:           disabled26,
				RejectUnauthorized: rejectUnauthorized47,
				Servername:         servername15,
				CertificateName:    certificateName16,
				CaPath:             caPath14,
				PrivKeyPath:        privKeyPath14,
				CertPath:           certPath14,
				Passphrase:         passphrase14,
				MinVersion:         minVersion14,
				MaxVersion:         maxVersion14,
			}
		}
		tokenTTLMinutes2 := new(float64)
		if !r.OutputCriblHTTP.TokenTTLMinutes.IsUnknown() && !r.OutputCriblHTTP.TokenTTLMinutes.IsNull() {
			*tokenTTLMinutes2 = r.OutputCriblHTTP.TokenTTLMinutes.ValueFloat64()
		} else {
			tokenTTLMinutes2 = nil
		}
		excludeFields2 := make([]string, 0, len(r.OutputCriblHTTP.ExcludeFields))
		for _, excludeFieldsItem2 := range r.OutputCriblHTTP.ExcludeFields {
			excludeFields2 = append(excludeFields2, excludeFieldsItem2.ValueString())
		}
		compression6 := new(shared.OutputCriblHTTPCompression)
		if !r.OutputCriblHTTP.Compression.IsUnknown() && !r.OutputCriblHTTP.Compression.IsNull() {
			*compression6 = shared.OutputCriblHTTPCompression(r.OutputCriblHTTP.Compression.ValueString())
		} else {
			compression6 = nil
		}
		concurrency25 := new(float64)
		if !r.OutputCriblHTTP.Concurrency.IsUnknown() && !r.OutputCriblHTTP.Concurrency.IsNull() {
			*concurrency25 = r.OutputCriblHTTP.Concurrency.ValueFloat64()
		} else {
			concurrency25 = nil
		}
		maxPayloadSizeKb24 := new(float64)
		if !r.OutputCriblHTTP.MaxPayloadSizeKB.IsUnknown() && !r.OutputCriblHTTP.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb24 = r.OutputCriblHTTP.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb24 = nil
		}
		maxPayloadEvents22 := new(float64)
		if !r.OutputCriblHTTP.MaxPayloadEvents.IsUnknown() && !r.OutputCriblHTTP.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents22 = r.OutputCriblHTTP.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents22 = nil
		}
		rejectUnauthorized48 := new(bool)
		if !r.OutputCriblHTTP.RejectUnauthorized.IsUnknown() && !r.OutputCriblHTTP.RejectUnauthorized.IsNull() {
			*rejectUnauthorized48 = r.OutputCriblHTTP.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized48 = nil
		}
		timeoutSec24 := new(float64)
		if !r.OutputCriblHTTP.TimeoutSec.IsUnknown() && !r.OutputCriblHTTP.TimeoutSec.IsNull() {
			*timeoutSec24 = r.OutputCriblHTTP.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec24 = nil
		}
		flushPeriodSec35 := new(float64)
		if !r.OutputCriblHTTP.FlushPeriodSec.IsUnknown() && !r.OutputCriblHTTP.FlushPeriodSec.IsNull() {
			*flushPeriodSec35 = r.OutputCriblHTTP.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec35 = nil
		}
		extraHTTPHeaders22 := make([]shared.OutputCriblHTTPExtraHTTPHeaders, 0, len(r.OutputCriblHTTP.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem22 := range r.OutputCriblHTTP.ExtraHTTPHeaders {
			name36 := new(string)
			if !extraHTTPHeadersItem22.Name.IsUnknown() && !extraHTTPHeadersItem22.Name.IsNull() {
				*name36 = extraHTTPHeadersItem22.Name.ValueString()
			} else {
				name36 = nil
			}
			var value47 string
			value47 = extraHTTPHeadersItem22.Value.ValueString()

			extraHTTPHeaders22 = append(extraHTTPHeaders22, shared.OutputCriblHTTPExtraHTTPHeaders{
				Name:  name36,
				Value: value47,
			})
		}
		failedRequestLoggingMode22 := new(shared.OutputCriblHTTPFailedRequestLoggingMode)
		if !r.OutputCriblHTTP.FailedRequestLoggingMode.IsUnknown() && !r.OutputCriblHTTP.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode22 = shared.OutputCriblHTTPFailedRequestLoggingMode(r.OutputCriblHTTP.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode22 = nil
		}
		safeHeaders22 := make([]string, 0, len(r.OutputCriblHTTP.SafeHeaders))
		for _, safeHeadersItem22 := range r.OutputCriblHTTP.SafeHeaders {
			safeHeaders22 = append(safeHeaders22, safeHeadersItem22.ValueString())
		}
		responseRetrySettings23 := make([]shared.OutputCriblHTTPResponseRetrySettings, 0, len(r.OutputCriblHTTP.ResponseRetrySettings))
		for _, responseRetrySettingsItem23 := range r.OutputCriblHTTP.ResponseRetrySettings {
			var httpStatus23 float64
			httpStatus23 = responseRetrySettingsItem23.HTTPStatus.ValueFloat64()

			initialBackoff50 := new(float64)
			if !responseRetrySettingsItem23.InitialBackoff.IsUnknown() && !responseRetrySettingsItem23.InitialBackoff.IsNull() {
				*initialBackoff50 = responseRetrySettingsItem23.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff50 = nil
			}
			backoffRate50 := new(float64)
			if !responseRetrySettingsItem23.BackoffRate.IsUnknown() && !responseRetrySettingsItem23.BackoffRate.IsNull() {
				*backoffRate50 = responseRetrySettingsItem23.BackoffRate.ValueFloat64()
			} else {
				backoffRate50 = nil
			}
			maxBackoff46 := new(float64)
			if !responseRetrySettingsItem23.MaxBackoff.IsUnknown() && !responseRetrySettingsItem23.MaxBackoff.IsNull() {
				*maxBackoff46 = responseRetrySettingsItem23.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff46 = nil
			}
			responseRetrySettings23 = append(responseRetrySettings23, shared.OutputCriblHTTPResponseRetrySettings{
				HTTPStatus:     httpStatus23,
				InitialBackoff: initialBackoff50,
				BackoffRate:    backoffRate50,
				MaxBackoff:     maxBackoff46,
			})
		}
		var timeoutRetrySettings23 *shared.OutputCriblHTTPTimeoutRetrySettings
		if r.OutputCriblHTTP.TimeoutRetrySettings != nil {
			timeoutRetry23 := new(bool)
			if !r.OutputCriblHTTP.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputCriblHTTP.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry23 = r.OutputCriblHTTP.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry23 = nil
			}
			initialBackoff51 := new(float64)
			if !r.OutputCriblHTTP.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputCriblHTTP.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff51 = r.OutputCriblHTTP.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff51 = nil
			}
			backoffRate51 := new(float64)
			if !r.OutputCriblHTTP.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputCriblHTTP.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate51 = r.OutputCriblHTTP.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate51 = nil
			}
			maxBackoff47 := new(float64)
			if !r.OutputCriblHTTP.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputCriblHTTP.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff47 = r.OutputCriblHTTP.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff47 = nil
			}
			timeoutRetrySettings23 = &shared.OutputCriblHTTPTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry23,
				InitialBackoff: initialBackoff51,
				BackoffRate:    backoffRate51,
				MaxBackoff:     maxBackoff47,
			}
		}
		responseHonorRetryAfterHeader23 := new(bool)
		if !r.OutputCriblHTTP.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputCriblHTTP.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader23 = r.OutputCriblHTTP.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader23 = nil
		}
		onBackpressure48 := new(shared.OutputCriblHTTPBackpressureBehavior)
		if !r.OutputCriblHTTP.OnBackpressure.IsUnknown() && !r.OutputCriblHTTP.OnBackpressure.IsNull() {
			*onBackpressure48 = shared.OutputCriblHTTPBackpressureBehavior(r.OutputCriblHTTP.OnBackpressure.ValueString())
		} else {
			onBackpressure48 = nil
		}
		description52 := new(string)
		if !r.OutputCriblHTTP.Description.IsUnknown() && !r.OutputCriblHTTP.Description.IsNull() {
			*description52 = r.OutputCriblHTTP.Description.ValueString()
		} else {
			description52 = nil
		}
		url12 := new(string)
		if !r.OutputCriblHTTP.URL.IsUnknown() && !r.OutputCriblHTTP.URL.IsNull() {
			*url12 = r.OutputCriblHTTP.URL.ValueString()
		} else {
			url12 = nil
		}
		useRoundRobinDns22 := new(bool)
		if !r.OutputCriblHTTP.UseRoundRobinDNS.IsUnknown() && !r.OutputCriblHTTP.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns22 = r.OutputCriblHTTP.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns22 = nil
		}
		excludeSelf6 := new(bool)
		if !r.OutputCriblHTTP.ExcludeSelf.IsUnknown() && !r.OutputCriblHTTP.ExcludeSelf.IsNull() {
			*excludeSelf6 = r.OutputCriblHTTP.ExcludeSelf.ValueBool()
		} else {
			excludeSelf6 = nil
		}
		urls3 := make([]shared.OutputCriblHTTPUrls, 0, len(r.OutputCriblHTTP.Urls))
		for _, urlsItem3 := range r.OutputCriblHTTP.Urls {
			var url13 string
			url13 = urlsItem3.URL.ValueString()

			weight6 := new(float64)
			if !urlsItem3.Weight.IsUnknown() && !urlsItem3.Weight.IsNull() {
				*weight6 = urlsItem3.Weight.ValueFloat64()
			} else {
				weight6 = nil
			}
			urls3 = append(urls3, shared.OutputCriblHTTPUrls{
				URL:    url13,
				Weight: weight6,
			})
		}
		dnsResolvePeriodSec10 := new(float64)
		if !r.OutputCriblHTTP.DNSResolvePeriodSec.IsUnknown() && !r.OutputCriblHTTP.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec10 = r.OutputCriblHTTP.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec10 = nil
		}
		loadBalanceStatsPeriodSec6 := new(float64)
		if !r.OutputCriblHTTP.LoadBalanceStatsPeriodSec.IsUnknown() && !r.OutputCriblHTTP.LoadBalanceStatsPeriodSec.IsNull() {
			*loadBalanceStatsPeriodSec6 = r.OutputCriblHTTP.LoadBalanceStatsPeriodSec.ValueFloat64()
		} else {
			loadBalanceStatsPeriodSec6 = nil
		}
		pqMaxFileSize41 := new(string)
		if !r.OutputCriblHTTP.PqMaxFileSize.IsUnknown() && !r.OutputCriblHTTP.PqMaxFileSize.IsNull() {
			*pqMaxFileSize41 = r.OutputCriblHTTP.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize41 = nil
		}
		pqMaxSize41 := new(string)
		if !r.OutputCriblHTTP.PqMaxSize.IsUnknown() && !r.OutputCriblHTTP.PqMaxSize.IsNull() {
			*pqMaxSize41 = r.OutputCriblHTTP.PqMaxSize.ValueString()
		} else {
			pqMaxSize41 = nil
		}
		pqPath41 := new(string)
		if !r.OutputCriblHTTP.PqPath.IsUnknown() && !r.OutputCriblHTTP.PqPath.IsNull() {
			*pqPath41 = r.OutputCriblHTTP.PqPath.ValueString()
		} else {
			pqPath41 = nil
		}
		pqCompress41 := new(shared.OutputCriblHTTPPqCompressCompression)
		if !r.OutputCriblHTTP.PqCompress.IsUnknown() && !r.OutputCriblHTTP.PqCompress.IsNull() {
			*pqCompress41 = shared.OutputCriblHTTPPqCompressCompression(r.OutputCriblHTTP.PqCompress.ValueString())
		} else {
			pqCompress41 = nil
		}
		pqOnBackpressure41 := new(shared.OutputCriblHTTPQueueFullBehavior)
		if !r.OutputCriblHTTP.PqOnBackpressure.IsUnknown() && !r.OutputCriblHTTP.PqOnBackpressure.IsNull() {
			*pqOnBackpressure41 = shared.OutputCriblHTTPQueueFullBehavior(r.OutputCriblHTTP.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure41 = nil
		}
		pqMode41 := new(shared.OutputCriblHTTPMode)
		if !r.OutputCriblHTTP.PqMode.IsUnknown() && !r.OutputCriblHTTP.PqMode.IsNull() {
			*pqMode41 = shared.OutputCriblHTTPMode(r.OutputCriblHTTP.PqMode.ValueString())
		} else {
			pqMode41 = nil
		}
		var pqControls41 *shared.OutputCriblHTTPPqControls
		if r.OutputCriblHTTP.PqControls != nil {
			pqControls41 = &shared.OutputCriblHTTPPqControls{}
		}
		outputCriblHTTP = &shared.OutputCriblHTTP{
			Status:                        status,
			ID:                            id52,
			Type:                          typeVar52,
			Pipeline:                      pipeline52,
			SystemFields:                  systemFields52,
			Environment:                   environment52,
			Streamtags:                    streamtags52,
			LoadBalanced:                  loadBalanced6,
			TLS:                           tls18,
			TokenTTLMinutes:               tokenTTLMinutes2,
			ExcludeFields:                 excludeFields2,
			Compression:                   compression6,
			Concurrency:                   concurrency25,
			MaxPayloadSizeKB:              maxPayloadSizeKb24,
			MaxPayloadEvents:              maxPayloadEvents22,
			RejectUnauthorized:            rejectUnauthorized48,
			TimeoutSec:                    timeoutSec24,
			FlushPeriodSec:                flushPeriodSec35,
			ExtraHTTPHeaders:              extraHTTPHeaders22,
			FailedRequestLoggingMode:      failedRequestLoggingMode22,
			SafeHeaders:                   safeHeaders22,
			ResponseRetrySettings:         responseRetrySettings23,
			TimeoutRetrySettings:          timeoutRetrySettings23,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader23,
			OnBackpressure:                onBackpressure48,
			Description:                   description52,
			URL:                           url12,
			UseRoundRobinDNS:              useRoundRobinDns22,
			ExcludeSelf:                   excludeSelf6,
			Urls:                          urls3,
			DNSResolvePeriodSec:           dnsResolvePeriodSec10,
			LoadBalanceStatsPeriodSec:     loadBalanceStatsPeriodSec6,
			PqMaxFileSize:                 pqMaxFileSize41,
			PqMaxSize:                     pqMaxSize41,
			PqPath:                        pqPath41,
			PqCompress:                    pqCompress41,
			PqOnBackpressure:              pqOnBackpressure41,
			PqMode:                        pqMode41,
			PqControls:                    pqControls41,
		}
	}
	if outputCriblHTTP != nil {
		out = shared.Output{
			OutputCriblHTTP: outputCriblHTTP,
		}
	}
	var outputHumioHec *shared.OutputHumioHec
	if r.OutputHumioHec != nil {
		id53 := new(string)
		if !r.OutputHumioHec.ID.IsUnknown() && !r.OutputHumioHec.ID.IsNull() {
			*id53 = r.OutputHumioHec.ID.ValueString()
		} else {
			id53 = nil
		}
		typeVar53 := new(shared.OutputHumioHecType)
		if !r.OutputHumioHec.Type.IsUnknown() && !r.OutputHumioHec.Type.IsNull() {
			*typeVar53 = shared.OutputHumioHecType(r.OutputHumioHec.Type.ValueString())
		} else {
			typeVar53 = nil
		}
		pipeline53 := new(string)
		if !r.OutputHumioHec.Pipeline.IsUnknown() && !r.OutputHumioHec.Pipeline.IsNull() {
			*pipeline53 = r.OutputHumioHec.Pipeline.ValueString()
		} else {
			pipeline53 = nil
		}
		systemFields53 := make([]string, 0, len(r.OutputHumioHec.SystemFields))
		for _, systemFieldsItem53 := range r.OutputHumioHec.SystemFields {
			systemFields53 = append(systemFields53, systemFieldsItem53.ValueString())
		}
		environment53 := new(string)
		if !r.OutputHumioHec.Environment.IsUnknown() && !r.OutputHumioHec.Environment.IsNull() {
			*environment53 = r.OutputHumioHec.Environment.ValueString()
		} else {
			environment53 = nil
		}
		streamtags53 := make([]string, 0, len(r.OutputHumioHec.Streamtags))
		for _, streamtagsItem53 := range r.OutputHumioHec.Streamtags {
			streamtags53 = append(streamtags53, streamtagsItem53.ValueString())
		}
		url14 := new(string)
		if !r.OutputHumioHec.URL.IsUnknown() && !r.OutputHumioHec.URL.IsNull() {
			*url14 = r.OutputHumioHec.URL.ValueString()
		} else {
			url14 = nil
		}
		concurrency26 := new(float64)
		if !r.OutputHumioHec.Concurrency.IsUnknown() && !r.OutputHumioHec.Concurrency.IsNull() {
			*concurrency26 = r.OutputHumioHec.Concurrency.ValueFloat64()
		} else {
			concurrency26 = nil
		}
		maxPayloadSizeKb25 := new(float64)
		if !r.OutputHumioHec.MaxPayloadSizeKB.IsUnknown() && !r.OutputHumioHec.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb25 = r.OutputHumioHec.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb25 = nil
		}
		maxPayloadEvents23 := new(float64)
		if !r.OutputHumioHec.MaxPayloadEvents.IsUnknown() && !r.OutputHumioHec.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents23 = r.OutputHumioHec.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents23 = nil
		}
		compress30 := new(bool)
		if !r.OutputHumioHec.Compress.IsUnknown() && !r.OutputHumioHec.Compress.IsNull() {
			*compress30 = r.OutputHumioHec.Compress.ValueBool()
		} else {
			compress30 = nil
		}
		rejectUnauthorized49 := new(bool)
		if !r.OutputHumioHec.RejectUnauthorized.IsUnknown() && !r.OutputHumioHec.RejectUnauthorized.IsNull() {
			*rejectUnauthorized49 = r.OutputHumioHec.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized49 = nil
		}
		timeoutSec25 := new(float64)
		if !r.OutputHumioHec.TimeoutSec.IsUnknown() && !r.OutputHumioHec.TimeoutSec.IsNull() {
			*timeoutSec25 = r.OutputHumioHec.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec25 = nil
		}
		flushPeriodSec36 := new(float64)
		if !r.OutputHumioHec.FlushPeriodSec.IsUnknown() && !r.OutputHumioHec.FlushPeriodSec.IsNull() {
			*flushPeriodSec36 = r.OutputHumioHec.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec36 = nil
		}
		extraHTTPHeaders23 := make([]shared.OutputHumioHecExtraHTTPHeaders, 0, len(r.OutputHumioHec.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem23 := range r.OutputHumioHec.ExtraHTTPHeaders {
			name37 := new(string)
			if !extraHTTPHeadersItem23.Name.IsUnknown() && !extraHTTPHeadersItem23.Name.IsNull() {
				*name37 = extraHTTPHeadersItem23.Name.ValueString()
			} else {
				name37 = nil
			}
			var value48 string
			value48 = extraHTTPHeadersItem23.Value.ValueString()

			extraHTTPHeaders23 = append(extraHTTPHeaders23, shared.OutputHumioHecExtraHTTPHeaders{
				Name:  name37,
				Value: value48,
			})
		}
		useRoundRobinDns23 := new(bool)
		if !r.OutputHumioHec.UseRoundRobinDNS.IsUnknown() && !r.OutputHumioHec.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns23 = r.OutputHumioHec.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns23 = nil
		}
		failedRequestLoggingMode23 := new(shared.OutputHumioHecFailedRequestLoggingMode)
		if !r.OutputHumioHec.FailedRequestLoggingMode.IsUnknown() && !r.OutputHumioHec.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode23 = shared.OutputHumioHecFailedRequestLoggingMode(r.OutputHumioHec.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode23 = nil
		}
		safeHeaders23 := make([]string, 0, len(r.OutputHumioHec.SafeHeaders))
		for _, safeHeadersItem23 := range r.OutputHumioHec.SafeHeaders {
			safeHeaders23 = append(safeHeaders23, safeHeadersItem23.ValueString())
		}
		format14 := new(shared.RequestFormat)
		if !r.OutputHumioHec.Format.IsUnknown() && !r.OutputHumioHec.Format.IsNull() {
			*format14 = shared.RequestFormat(r.OutputHumioHec.Format.ValueString())
		} else {
			format14 = nil
		}
		authType27 := new(shared.OutputHumioHecAuthenticationMethod)
		if !r.OutputHumioHec.AuthType.IsUnknown() && !r.OutputHumioHec.AuthType.IsNull() {
			*authType27 = shared.OutputHumioHecAuthenticationMethod(r.OutputHumioHec.AuthType.ValueString())
		} else {
			authType27 = nil
		}
		responseRetrySettings24 := make([]shared.OutputHumioHecResponseRetrySettings, 0, len(r.OutputHumioHec.ResponseRetrySettings))
		for _, responseRetrySettingsItem24 := range r.OutputHumioHec.ResponseRetrySettings {
			var httpStatus24 float64
			httpStatus24 = responseRetrySettingsItem24.HTTPStatus.ValueFloat64()

			initialBackoff52 := new(float64)
			if !responseRetrySettingsItem24.InitialBackoff.IsUnknown() && !responseRetrySettingsItem24.InitialBackoff.IsNull() {
				*initialBackoff52 = responseRetrySettingsItem24.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff52 = nil
			}
			backoffRate52 := new(float64)
			if !responseRetrySettingsItem24.BackoffRate.IsUnknown() && !responseRetrySettingsItem24.BackoffRate.IsNull() {
				*backoffRate52 = responseRetrySettingsItem24.BackoffRate.ValueFloat64()
			} else {
				backoffRate52 = nil
			}
			maxBackoff48 := new(float64)
			if !responseRetrySettingsItem24.MaxBackoff.IsUnknown() && !responseRetrySettingsItem24.MaxBackoff.IsNull() {
				*maxBackoff48 = responseRetrySettingsItem24.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff48 = nil
			}
			responseRetrySettings24 = append(responseRetrySettings24, shared.OutputHumioHecResponseRetrySettings{
				HTTPStatus:     httpStatus24,
				InitialBackoff: initialBackoff52,
				BackoffRate:    backoffRate52,
				MaxBackoff:     maxBackoff48,
			})
		}
		var timeoutRetrySettings24 *shared.OutputHumioHecTimeoutRetrySettings
		if r.OutputHumioHec.TimeoutRetrySettings != nil {
			timeoutRetry24 := new(bool)
			if !r.OutputHumioHec.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputHumioHec.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry24 = r.OutputHumioHec.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry24 = nil
			}
			initialBackoff53 := new(float64)
			if !r.OutputHumioHec.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputHumioHec.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff53 = r.OutputHumioHec.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff53 = nil
			}
			backoffRate53 := new(float64)
			if !r.OutputHumioHec.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputHumioHec.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate53 = r.OutputHumioHec.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate53 = nil
			}
			maxBackoff49 := new(float64)
			if !r.OutputHumioHec.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputHumioHec.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff49 = r.OutputHumioHec.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff49 = nil
			}
			timeoutRetrySettings24 = &shared.OutputHumioHecTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry24,
				InitialBackoff: initialBackoff53,
				BackoffRate:    backoffRate53,
				MaxBackoff:     maxBackoff49,
			}
		}
		responseHonorRetryAfterHeader24 := new(bool)
		if !r.OutputHumioHec.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputHumioHec.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader24 = r.OutputHumioHec.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader24 = nil
		}
		onBackpressure49 := new(shared.OutputHumioHecBackpressureBehavior)
		if !r.OutputHumioHec.OnBackpressure.IsUnknown() && !r.OutputHumioHec.OnBackpressure.IsNull() {
			*onBackpressure49 = shared.OutputHumioHecBackpressureBehavior(r.OutputHumioHec.OnBackpressure.ValueString())
		} else {
			onBackpressure49 = nil
		}
		description53 := new(string)
		if !r.OutputHumioHec.Description.IsUnknown() && !r.OutputHumioHec.Description.IsNull() {
			*description53 = r.OutputHumioHec.Description.ValueString()
		} else {
			description53 = nil
		}
		token12 := new(string)
		if !r.OutputHumioHec.Token.IsUnknown() && !r.OutputHumioHec.Token.IsNull() {
			*token12 = r.OutputHumioHec.Token.ValueString()
		} else {
			token12 = nil
		}
		textSecret23 := new(string)
		if !r.OutputHumioHec.TextSecret.IsUnknown() && !r.OutputHumioHec.TextSecret.IsNull() {
			*textSecret23 = r.OutputHumioHec.TextSecret.ValueString()
		} else {
			textSecret23 = nil
		}
		pqMaxFileSize42 := new(string)
		if !r.OutputHumioHec.PqMaxFileSize.IsUnknown() && !r.OutputHumioHec.PqMaxFileSize.IsNull() {
			*pqMaxFileSize42 = r.OutputHumioHec.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize42 = nil
		}
		pqMaxSize42 := new(string)
		if !r.OutputHumioHec.PqMaxSize.IsUnknown() && !r.OutputHumioHec.PqMaxSize.IsNull() {
			*pqMaxSize42 = r.OutputHumioHec.PqMaxSize.ValueString()
		} else {
			pqMaxSize42 = nil
		}
		pqPath42 := new(string)
		if !r.OutputHumioHec.PqPath.IsUnknown() && !r.OutputHumioHec.PqPath.IsNull() {
			*pqPath42 = r.OutputHumioHec.PqPath.ValueString()
		} else {
			pqPath42 = nil
		}
		pqCompress42 := new(shared.OutputHumioHecCompression)
		if !r.OutputHumioHec.PqCompress.IsUnknown() && !r.OutputHumioHec.PqCompress.IsNull() {
			*pqCompress42 = shared.OutputHumioHecCompression(r.OutputHumioHec.PqCompress.ValueString())
		} else {
			pqCompress42 = nil
		}
		pqOnBackpressure42 := new(shared.OutputHumioHecQueueFullBehavior)
		if !r.OutputHumioHec.PqOnBackpressure.IsUnknown() && !r.OutputHumioHec.PqOnBackpressure.IsNull() {
			*pqOnBackpressure42 = shared.OutputHumioHecQueueFullBehavior(r.OutputHumioHec.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure42 = nil
		}
		pqMode42 := new(shared.OutputHumioHecMode)
		if !r.OutputHumioHec.PqMode.IsUnknown() && !r.OutputHumioHec.PqMode.IsNull() {
			*pqMode42 = shared.OutputHumioHecMode(r.OutputHumioHec.PqMode.ValueString())
		} else {
			pqMode42 = nil
		}
		var pqControls42 *shared.OutputHumioHecPqControls
		if r.OutputHumioHec.PqControls != nil {
			pqControls42 = &shared.OutputHumioHecPqControls{}
		}
		outputHumioHec = &shared.OutputHumioHec{
			ID:                            id53,
			Type:                          typeVar53,
			Pipeline:                      pipeline53,
			SystemFields:                  systemFields53,
			Environment:                   environment53,
			Streamtags:                    streamtags53,
			URL:                           url14,
			Concurrency:                   concurrency26,
			MaxPayloadSizeKB:              maxPayloadSizeKb25,
			MaxPayloadEvents:              maxPayloadEvents23,
			Compress:                      compress30,
			RejectUnauthorized:            rejectUnauthorized49,
			TimeoutSec:                    timeoutSec25,
			FlushPeriodSec:                flushPeriodSec36,
			ExtraHTTPHeaders:              extraHTTPHeaders23,
			UseRoundRobinDNS:              useRoundRobinDns23,
			FailedRequestLoggingMode:      failedRequestLoggingMode23,
			SafeHeaders:                   safeHeaders23,
			Format:                        format14,
			AuthType:                      authType27,
			ResponseRetrySettings:         responseRetrySettings24,
			TimeoutRetrySettings:          timeoutRetrySettings24,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader24,
			OnBackpressure:                onBackpressure49,
			Description:                   description53,
			Token:                         token12,
			TextSecret:                    textSecret23,
			PqMaxFileSize:                 pqMaxFileSize42,
			PqMaxSize:                     pqMaxSize42,
			PqPath:                        pqPath42,
			PqCompress:                    pqCompress42,
			PqOnBackpressure:              pqOnBackpressure42,
			PqMode:                        pqMode42,
			PqControls:                    pqControls42,
		}
	}
	if outputHumioHec != nil {
		out = shared.Output{
			OutputHumioHec: outputHumioHec,
		}
	}
	var outputCrowdstrikeNextGenSiem *shared.OutputCrowdstrikeNextGenSiem
	if r.OutputCrowdstrikeNextGenSiem != nil {
		id54 := new(string)
		if !r.OutputCrowdstrikeNextGenSiem.ID.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.ID.IsNull() {
			*id54 = r.OutputCrowdstrikeNextGenSiem.ID.ValueString()
		} else {
			id54 = nil
		}
		typeVar54 := new(shared.OutputCrowdstrikeNextGenSiemType)
		if !r.OutputCrowdstrikeNextGenSiem.Type.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.Type.IsNull() {
			*typeVar54 = shared.OutputCrowdstrikeNextGenSiemType(r.OutputCrowdstrikeNextGenSiem.Type.ValueString())
		} else {
			typeVar54 = nil
		}
		pipeline54 := new(string)
		if !r.OutputCrowdstrikeNextGenSiem.Pipeline.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.Pipeline.IsNull() {
			*pipeline54 = r.OutputCrowdstrikeNextGenSiem.Pipeline.ValueString()
		} else {
			pipeline54 = nil
		}
		systemFields54 := make([]string, 0, len(r.OutputCrowdstrikeNextGenSiem.SystemFields))
		for _, systemFieldsItem54 := range r.OutputCrowdstrikeNextGenSiem.SystemFields {
			systemFields54 = append(systemFields54, systemFieldsItem54.ValueString())
		}
		environment54 := new(string)
		if !r.OutputCrowdstrikeNextGenSiem.Environment.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.Environment.IsNull() {
			*environment54 = r.OutputCrowdstrikeNextGenSiem.Environment.ValueString()
		} else {
			environment54 = nil
		}
		streamtags54 := make([]string, 0, len(r.OutputCrowdstrikeNextGenSiem.Streamtags))
		for _, streamtagsItem54 := range r.OutputCrowdstrikeNextGenSiem.Streamtags {
			streamtags54 = append(streamtags54, streamtagsItem54.ValueString())
		}
		var url15 string
		url15 = r.OutputCrowdstrikeNextGenSiem.URL.ValueString()

		concurrency27 := new(float64)
		if !r.OutputCrowdstrikeNextGenSiem.Concurrency.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.Concurrency.IsNull() {
			*concurrency27 = r.OutputCrowdstrikeNextGenSiem.Concurrency.ValueFloat64()
		} else {
			concurrency27 = nil
		}
		maxPayloadSizeKb26 := new(float64)
		if !r.OutputCrowdstrikeNextGenSiem.MaxPayloadSizeKB.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb26 = r.OutputCrowdstrikeNextGenSiem.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb26 = nil
		}
		maxPayloadEvents24 := new(float64)
		if !r.OutputCrowdstrikeNextGenSiem.MaxPayloadEvents.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents24 = r.OutputCrowdstrikeNextGenSiem.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents24 = nil
		}
		compress31 := new(bool)
		if !r.OutputCrowdstrikeNextGenSiem.Compress.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.Compress.IsNull() {
			*compress31 = r.OutputCrowdstrikeNextGenSiem.Compress.ValueBool()
		} else {
			compress31 = nil
		}
		rejectUnauthorized50 := new(bool)
		if !r.OutputCrowdstrikeNextGenSiem.RejectUnauthorized.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.RejectUnauthorized.IsNull() {
			*rejectUnauthorized50 = r.OutputCrowdstrikeNextGenSiem.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized50 = nil
		}
		timeoutSec26 := new(float64)
		if !r.OutputCrowdstrikeNextGenSiem.TimeoutSec.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.TimeoutSec.IsNull() {
			*timeoutSec26 = r.OutputCrowdstrikeNextGenSiem.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec26 = nil
		}
		flushPeriodSec37 := new(float64)
		if !r.OutputCrowdstrikeNextGenSiem.FlushPeriodSec.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.FlushPeriodSec.IsNull() {
			*flushPeriodSec37 = r.OutputCrowdstrikeNextGenSiem.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec37 = nil
		}
		extraHTTPHeaders24 := make([]shared.OutputCrowdstrikeNextGenSiemExtraHTTPHeaders, 0, len(r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem24 := range r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders {
			name38 := new(string)
			if !extraHTTPHeadersItem24.Name.IsUnknown() && !extraHTTPHeadersItem24.Name.IsNull() {
				*name38 = extraHTTPHeadersItem24.Name.ValueString()
			} else {
				name38 = nil
			}
			var value49 string
			value49 = extraHTTPHeadersItem24.Value.ValueString()

			extraHTTPHeaders24 = append(extraHTTPHeaders24, shared.OutputCrowdstrikeNextGenSiemExtraHTTPHeaders{
				Name:  name38,
				Value: value49,
			})
		}
		useRoundRobinDns24 := new(bool)
		if !r.OutputCrowdstrikeNextGenSiem.UseRoundRobinDNS.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns24 = r.OutputCrowdstrikeNextGenSiem.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns24 = nil
		}
		failedRequestLoggingMode24 := new(shared.OutputCrowdstrikeNextGenSiemFailedRequestLoggingMode)
		if !r.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode24 = shared.OutputCrowdstrikeNextGenSiemFailedRequestLoggingMode(r.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode24 = nil
		}
		safeHeaders24 := make([]string, 0, len(r.OutputCrowdstrikeNextGenSiem.SafeHeaders))
		for _, safeHeadersItem24 := range r.OutputCrowdstrikeNextGenSiem.SafeHeaders {
			safeHeaders24 = append(safeHeaders24, safeHeadersItem24.ValueString())
		}
		format15 := new(shared.OutputCrowdstrikeNextGenSiemRequestFormat)
		if !r.OutputCrowdstrikeNextGenSiem.Format.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.Format.IsNull() {
			*format15 = shared.OutputCrowdstrikeNextGenSiemRequestFormat(r.OutputCrowdstrikeNextGenSiem.Format.ValueString())
		} else {
			format15 = nil
		}
		authType28 := new(shared.OutputCrowdstrikeNextGenSiemAuthenticationMethod)
		if !r.OutputCrowdstrikeNextGenSiem.AuthType.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.AuthType.IsNull() {
			*authType28 = shared.OutputCrowdstrikeNextGenSiemAuthenticationMethod(r.OutputCrowdstrikeNextGenSiem.AuthType.ValueString())
		} else {
			authType28 = nil
		}
		responseRetrySettings25 := make([]shared.OutputCrowdstrikeNextGenSiemResponseRetrySettings, 0, len(r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings))
		for _, responseRetrySettingsItem25 := range r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings {
			var httpStatus25 float64
			httpStatus25 = responseRetrySettingsItem25.HTTPStatus.ValueFloat64()

			initialBackoff54 := new(float64)
			if !responseRetrySettingsItem25.InitialBackoff.IsUnknown() && !responseRetrySettingsItem25.InitialBackoff.IsNull() {
				*initialBackoff54 = responseRetrySettingsItem25.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff54 = nil
			}
			backoffRate54 := new(float64)
			if !responseRetrySettingsItem25.BackoffRate.IsUnknown() && !responseRetrySettingsItem25.BackoffRate.IsNull() {
				*backoffRate54 = responseRetrySettingsItem25.BackoffRate.ValueFloat64()
			} else {
				backoffRate54 = nil
			}
			maxBackoff50 := new(float64)
			if !responseRetrySettingsItem25.MaxBackoff.IsUnknown() && !responseRetrySettingsItem25.MaxBackoff.IsNull() {
				*maxBackoff50 = responseRetrySettingsItem25.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff50 = nil
			}
			responseRetrySettings25 = append(responseRetrySettings25, shared.OutputCrowdstrikeNextGenSiemResponseRetrySettings{
				HTTPStatus:     httpStatus25,
				InitialBackoff: initialBackoff54,
				BackoffRate:    backoffRate54,
				MaxBackoff:     maxBackoff50,
			})
		}
		var timeoutRetrySettings25 *shared.OutputCrowdstrikeNextGenSiemTimeoutRetrySettings
		if r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings != nil {
			timeoutRetry25 := new(bool)
			if !r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry25 = r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry25 = nil
			}
			initialBackoff55 := new(float64)
			if !r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff55 = r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff55 = nil
			}
			backoffRate55 := new(float64)
			if !r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate55 = r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate55 = nil
			}
			maxBackoff51 := new(float64)
			if !r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff51 = r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff51 = nil
			}
			timeoutRetrySettings25 = &shared.OutputCrowdstrikeNextGenSiemTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry25,
				InitialBackoff: initialBackoff55,
				BackoffRate:    backoffRate55,
				MaxBackoff:     maxBackoff51,
			}
		}
		responseHonorRetryAfterHeader25 := new(bool)
		if !r.OutputCrowdstrikeNextGenSiem.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader25 = r.OutputCrowdstrikeNextGenSiem.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader25 = nil
		}
		onBackpressure50 := new(shared.OutputCrowdstrikeNextGenSiemBackpressureBehavior)
		if !r.OutputCrowdstrikeNextGenSiem.OnBackpressure.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.OnBackpressure.IsNull() {
			*onBackpressure50 = shared.OutputCrowdstrikeNextGenSiemBackpressureBehavior(r.OutputCrowdstrikeNextGenSiem.OnBackpressure.ValueString())
		} else {
			onBackpressure50 = nil
		}
		description54 := new(string)
		if !r.OutputCrowdstrikeNextGenSiem.Description.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.Description.IsNull() {
			*description54 = r.OutputCrowdstrikeNextGenSiem.Description.ValueString()
		} else {
			description54 = nil
		}
		token13 := new(string)
		if !r.OutputCrowdstrikeNextGenSiem.Token.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.Token.IsNull() {
			*token13 = r.OutputCrowdstrikeNextGenSiem.Token.ValueString()
		} else {
			token13 = nil
		}
		textSecret24 := new(string)
		if !r.OutputCrowdstrikeNextGenSiem.TextSecret.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.TextSecret.IsNull() {
			*textSecret24 = r.OutputCrowdstrikeNextGenSiem.TextSecret.ValueString()
		} else {
			textSecret24 = nil
		}
		pqMaxFileSize43 := new(string)
		if !r.OutputCrowdstrikeNextGenSiem.PqMaxFileSize.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.PqMaxFileSize.IsNull() {
			*pqMaxFileSize43 = r.OutputCrowdstrikeNextGenSiem.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize43 = nil
		}
		pqMaxSize43 := new(string)
		if !r.OutputCrowdstrikeNextGenSiem.PqMaxSize.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.PqMaxSize.IsNull() {
			*pqMaxSize43 = r.OutputCrowdstrikeNextGenSiem.PqMaxSize.ValueString()
		} else {
			pqMaxSize43 = nil
		}
		pqPath43 := new(string)
		if !r.OutputCrowdstrikeNextGenSiem.PqPath.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.PqPath.IsNull() {
			*pqPath43 = r.OutputCrowdstrikeNextGenSiem.PqPath.ValueString()
		} else {
			pqPath43 = nil
		}
		pqCompress43 := new(shared.OutputCrowdstrikeNextGenSiemCompression)
		if !r.OutputCrowdstrikeNextGenSiem.PqCompress.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.PqCompress.IsNull() {
			*pqCompress43 = shared.OutputCrowdstrikeNextGenSiemCompression(r.OutputCrowdstrikeNextGenSiem.PqCompress.ValueString())
		} else {
			pqCompress43 = nil
		}
		pqOnBackpressure43 := new(shared.OutputCrowdstrikeNextGenSiemQueueFullBehavior)
		if !r.OutputCrowdstrikeNextGenSiem.PqOnBackpressure.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.PqOnBackpressure.IsNull() {
			*pqOnBackpressure43 = shared.OutputCrowdstrikeNextGenSiemQueueFullBehavior(r.OutputCrowdstrikeNextGenSiem.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure43 = nil
		}
		pqMode43 := new(shared.OutputCrowdstrikeNextGenSiemMode)
		if !r.OutputCrowdstrikeNextGenSiem.PqMode.IsUnknown() && !r.OutputCrowdstrikeNextGenSiem.PqMode.IsNull() {
			*pqMode43 = shared.OutputCrowdstrikeNextGenSiemMode(r.OutputCrowdstrikeNextGenSiem.PqMode.ValueString())
		} else {
			pqMode43 = nil
		}
		var pqControls43 *shared.OutputCrowdstrikeNextGenSiemPqControls
		if r.OutputCrowdstrikeNextGenSiem.PqControls != nil {
			pqControls43 = &shared.OutputCrowdstrikeNextGenSiemPqControls{}
		}
		outputCrowdstrikeNextGenSiem = &shared.OutputCrowdstrikeNextGenSiem{
			ID:                            id54,
			Type:                          typeVar54,
			Pipeline:                      pipeline54,
			SystemFields:                  systemFields54,
			Environment:                   environment54,
			Streamtags:                    streamtags54,
			URL:                           url15,
			Concurrency:                   concurrency27,
			MaxPayloadSizeKB:              maxPayloadSizeKb26,
			MaxPayloadEvents:              maxPayloadEvents24,
			Compress:                      compress31,
			RejectUnauthorized:            rejectUnauthorized50,
			TimeoutSec:                    timeoutSec26,
			FlushPeriodSec:                flushPeriodSec37,
			ExtraHTTPHeaders:              extraHTTPHeaders24,
			UseRoundRobinDNS:              useRoundRobinDns24,
			FailedRequestLoggingMode:      failedRequestLoggingMode24,
			SafeHeaders:                   safeHeaders24,
			Format:                        format15,
			AuthType:                      authType28,
			ResponseRetrySettings:         responseRetrySettings25,
			TimeoutRetrySettings:          timeoutRetrySettings25,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader25,
			OnBackpressure:                onBackpressure50,
			Description:                   description54,
			Token:                         token13,
			TextSecret:                    textSecret24,
			PqMaxFileSize:                 pqMaxFileSize43,
			PqMaxSize:                     pqMaxSize43,
			PqPath:                        pqPath43,
			PqCompress:                    pqCompress43,
			PqOnBackpressure:              pqOnBackpressure43,
			PqMode:                        pqMode43,
			PqControls:                    pqControls43,
		}
	}
	if outputCrowdstrikeNextGenSiem != nil {
		out = shared.Output{
			OutputCrowdstrikeNextGenSiem: outputCrowdstrikeNextGenSiem,
		}
	}
	var outputDlS3 *shared.OutputDlS3
	if r.OutputDlS3 != nil {
		id55 := new(string)
		if !r.OutputDlS3.ID.IsUnknown() && !r.OutputDlS3.ID.IsNull() {
			*id55 = r.OutputDlS3.ID.ValueString()
		} else {
			id55 = nil
		}
		typeVar55 := new(shared.OutputDlS3Type)
		if !r.OutputDlS3.Type.IsUnknown() && !r.OutputDlS3.Type.IsNull() {
			*typeVar55 = shared.OutputDlS3Type(r.OutputDlS3.Type.ValueString())
		} else {
			typeVar55 = nil
		}
		pipeline55 := new(string)
		if !r.OutputDlS3.Pipeline.IsUnknown() && !r.OutputDlS3.Pipeline.IsNull() {
			*pipeline55 = r.OutputDlS3.Pipeline.ValueString()
		} else {
			pipeline55 = nil
		}
		systemFields55 := make([]string, 0, len(r.OutputDlS3.SystemFields))
		for _, systemFieldsItem55 := range r.OutputDlS3.SystemFields {
			systemFields55 = append(systemFields55, systemFieldsItem55.ValueString())
		}
		environment55 := new(string)
		if !r.OutputDlS3.Environment.IsUnknown() && !r.OutputDlS3.Environment.IsNull() {
			*environment55 = r.OutputDlS3.Environment.ValueString()
		} else {
			environment55 = nil
		}
		streamtags55 := make([]string, 0, len(r.OutputDlS3.Streamtags))
		for _, streamtagsItem55 := range r.OutputDlS3.Streamtags {
			streamtags55 = append(streamtags55, streamtagsItem55.ValueString())
		}
		var bucket5 string
		bucket5 = r.OutputDlS3.Bucket.ValueString()

		region13 := new(string)
		if !r.OutputDlS3.Region.IsUnknown() && !r.OutputDlS3.Region.IsNull() {
			*region13 = r.OutputDlS3.Region.ValueString()
		} else {
			region13 = nil
		}
		awsSecretKey9 := new(string)
		if !r.OutputDlS3.AwsSecretKey.IsUnknown() && !r.OutputDlS3.AwsSecretKey.IsNull() {
			*awsSecretKey9 = r.OutputDlS3.AwsSecretKey.ValueString()
		} else {
			awsSecretKey9 = nil
		}
		awsAuthenticationMethod8 := new(shared.OutputDlS3AuthenticationMethod)
		if !r.OutputDlS3.AwsAuthenticationMethod.IsUnknown() && !r.OutputDlS3.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod8 = shared.OutputDlS3AuthenticationMethod(r.OutputDlS3.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod8 = nil
		}
		endpoint11 := new(string)
		if !r.OutputDlS3.Endpoint.IsUnknown() && !r.OutputDlS3.Endpoint.IsNull() {
			*endpoint11 = r.OutputDlS3.Endpoint.ValueString()
		} else {
			endpoint11 = nil
		}
		signatureVersion8 := new(shared.OutputDlS3SignatureVersion)
		if !r.OutputDlS3.SignatureVersion.IsUnknown() && !r.OutputDlS3.SignatureVersion.IsNull() {
			*signatureVersion8 = shared.OutputDlS3SignatureVersion(r.OutputDlS3.SignatureVersion.ValueString())
		} else {
			signatureVersion8 = nil
		}
		reuseConnections9 := new(bool)
		if !r.OutputDlS3.ReuseConnections.IsUnknown() && !r.OutputDlS3.ReuseConnections.IsNull() {
			*reuseConnections9 = r.OutputDlS3.ReuseConnections.ValueBool()
		} else {
			reuseConnections9 = nil
		}
		rejectUnauthorized51 := new(bool)
		if !r.OutputDlS3.RejectUnauthorized.IsUnknown() && !r.OutputDlS3.RejectUnauthorized.IsNull() {
			*rejectUnauthorized51 = r.OutputDlS3.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized51 = nil
		}
		enableAssumeRole6 := new(bool)
		if !r.OutputDlS3.EnableAssumeRole.IsUnknown() && !r.OutputDlS3.EnableAssumeRole.IsNull() {
			*enableAssumeRole6 = r.OutputDlS3.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole6 = nil
		}
		assumeRoleArn6 := new(string)
		if !r.OutputDlS3.AssumeRoleArn.IsUnknown() && !r.OutputDlS3.AssumeRoleArn.IsNull() {
			*assumeRoleArn6 = r.OutputDlS3.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn6 = nil
		}
		assumeRoleExternalId6 := new(string)
		if !r.OutputDlS3.AssumeRoleExternalID.IsUnknown() && !r.OutputDlS3.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId6 = r.OutputDlS3.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId6 = nil
		}
		durationSeconds6 := new(float64)
		if !r.OutputDlS3.DurationSeconds.IsUnknown() && !r.OutputDlS3.DurationSeconds.IsNull() {
			*durationSeconds6 = r.OutputDlS3.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds6 = nil
		}
		stagePath7 := new(string)
		if !r.OutputDlS3.StagePath.IsUnknown() && !r.OutputDlS3.StagePath.IsNull() {
			*stagePath7 = r.OutputDlS3.StagePath.ValueString()
		} else {
			stagePath7 = nil
		}
		addIDToStagePath7 := new(bool)
		if !r.OutputDlS3.AddIDToStagePath.IsUnknown() && !r.OutputDlS3.AddIDToStagePath.IsNull() {
			*addIDToStagePath7 = r.OutputDlS3.AddIDToStagePath.ValueBool()
		} else {
			addIDToStagePath7 = nil
		}
		destPath6 := new(string)
		if !r.OutputDlS3.DestPath.IsUnknown() && !r.OutputDlS3.DestPath.IsNull() {
			*destPath6 = r.OutputDlS3.DestPath.ValueString()
		} else {
			destPath6 = nil
		}
		objectAcl4 := new(shared.OutputDlS3ObjectACL)
		if !r.OutputDlS3.ObjectACL.IsUnknown() && !r.OutputDlS3.ObjectACL.IsNull() {
			*objectAcl4 = shared.OutputDlS3ObjectACL(r.OutputDlS3.ObjectACL.ValueString())
		} else {
			objectAcl4 = nil
		}
		storageClass5 := new(shared.OutputDlS3StorageClass)
		if !r.OutputDlS3.StorageClass.IsUnknown() && !r.OutputDlS3.StorageClass.IsNull() {
			*storageClass5 = shared.OutputDlS3StorageClass(r.OutputDlS3.StorageClass.ValueString())
		} else {
			storageClass5 = nil
		}
		serverSideEncryption2 := new(shared.OutputDlS3ServerSideEncryption)
		if !r.OutputDlS3.ServerSideEncryption.IsUnknown() && !r.OutputDlS3.ServerSideEncryption.IsNull() {
			*serverSideEncryption2 = shared.OutputDlS3ServerSideEncryption(r.OutputDlS3.ServerSideEncryption.ValueString())
		} else {
			serverSideEncryption2 = nil
		}
		kmsKeyId1 := new(string)
		if !r.OutputDlS3.KmsKeyID.IsUnknown() && !r.OutputDlS3.KmsKeyID.IsNull() {
			*kmsKeyId1 = r.OutputDlS3.KmsKeyID.ValueString()
		} else {
			kmsKeyId1 = nil
		}
		removeEmptyDirs7 := new(bool)
		if !r.OutputDlS3.RemoveEmptyDirs.IsUnknown() && !r.OutputDlS3.RemoveEmptyDirs.IsNull() {
			*removeEmptyDirs7 = r.OutputDlS3.RemoveEmptyDirs.ValueBool()
		} else {
			removeEmptyDirs7 = nil
		}
		format16 := new(shared.OutputDlS3DataFormat)
		if !r.OutputDlS3.Format.IsUnknown() && !r.OutputDlS3.Format.IsNull() {
			*format16 = shared.OutputDlS3DataFormat(r.OutputDlS3.Format.ValueString())
		} else {
			format16 = nil
		}
		baseFileName5 := new(string)
		if !r.OutputDlS3.BaseFileName.IsUnknown() && !r.OutputDlS3.BaseFileName.IsNull() {
			*baseFileName5 = r.OutputDlS3.BaseFileName.ValueString()
		} else {
			baseFileName5 = nil
		}
		fileNameSuffix6 := new(string)
		if !r.OutputDlS3.FileNameSuffix.IsUnknown() && !r.OutputDlS3.FileNameSuffix.IsNull() {
			*fileNameSuffix6 = r.OutputDlS3.FileNameSuffix.ValueString()
		} else {
			fileNameSuffix6 = nil
		}
		maxFileSizeMb7 := new(float64)
		if !r.OutputDlS3.MaxFileSizeMB.IsUnknown() && !r.OutputDlS3.MaxFileSizeMB.IsNull() {
			*maxFileSizeMb7 = r.OutputDlS3.MaxFileSizeMB.ValueFloat64()
		} else {
			maxFileSizeMb7 = nil
		}
		maxOpenFiles7 := new(float64)
		if !r.OutputDlS3.MaxOpenFiles.IsUnknown() && !r.OutputDlS3.MaxOpenFiles.IsNull() {
			*maxOpenFiles7 = r.OutputDlS3.MaxOpenFiles.ValueFloat64()
		} else {
			maxOpenFiles7 = nil
		}
		headerLine5 := new(string)
		if !r.OutputDlS3.HeaderLine.IsUnknown() && !r.OutputDlS3.HeaderLine.IsNull() {
			*headerLine5 = r.OutputDlS3.HeaderLine.ValueString()
		} else {
			headerLine5 = nil
		}
		writeHighWaterMark5 := new(float64)
		if !r.OutputDlS3.WriteHighWaterMark.IsUnknown() && !r.OutputDlS3.WriteHighWaterMark.IsNull() {
			*writeHighWaterMark5 = r.OutputDlS3.WriteHighWaterMark.ValueFloat64()
		} else {
			writeHighWaterMark5 = nil
		}
		onBackpressure51 := new(shared.OutputDlS3BackpressureBehavior)
		if !r.OutputDlS3.OnBackpressure.IsUnknown() && !r.OutputDlS3.OnBackpressure.IsNull() {
			*onBackpressure51 = shared.OutputDlS3BackpressureBehavior(r.OutputDlS3.OnBackpressure.ValueString())
		} else {
			onBackpressure51 = nil
		}
		deadletterEnabled7 := new(bool)
		if !r.OutputDlS3.DeadletterEnabled.IsUnknown() && !r.OutputDlS3.DeadletterEnabled.IsNull() {
			*deadletterEnabled7 = r.OutputDlS3.DeadletterEnabled.ValueBool()
		} else {
			deadletterEnabled7 = nil
		}
		onDiskFullBackpressure7 := new(shared.OutputDlS3DiskSpaceProtection)
		if !r.OutputDlS3.OnDiskFullBackpressure.IsUnknown() && !r.OutputDlS3.OnDiskFullBackpressure.IsNull() {
			*onDiskFullBackpressure7 = shared.OutputDlS3DiskSpaceProtection(r.OutputDlS3.OnDiskFullBackpressure.ValueString())
		} else {
			onDiskFullBackpressure7 = nil
		}
		maxFileOpenTimeSec7 := new(float64)
		if !r.OutputDlS3.MaxFileOpenTimeSec.IsUnknown() && !r.OutputDlS3.MaxFileOpenTimeSec.IsNull() {
			*maxFileOpenTimeSec7 = r.OutputDlS3.MaxFileOpenTimeSec.ValueFloat64()
		} else {
			maxFileOpenTimeSec7 = nil
		}
		maxFileIdleTimeSec7 := new(float64)
		if !r.OutputDlS3.MaxFileIdleTimeSec.IsUnknown() && !r.OutputDlS3.MaxFileIdleTimeSec.IsNull() {
			*maxFileIdleTimeSec7 = r.OutputDlS3.MaxFileIdleTimeSec.ValueFloat64()
		} else {
			maxFileIdleTimeSec7 = nil
		}
		maxConcurrentFileParts4 := new(float64)
		if !r.OutputDlS3.MaxConcurrentFileParts.IsUnknown() && !r.OutputDlS3.MaxConcurrentFileParts.IsNull() {
			*maxConcurrentFileParts4 = r.OutputDlS3.MaxConcurrentFileParts.ValueFloat64()
		} else {
			maxConcurrentFileParts4 = nil
		}
		verifyPermissions3 := new(bool)
		if !r.OutputDlS3.VerifyPermissions.IsUnknown() && !r.OutputDlS3.VerifyPermissions.IsNull() {
			*verifyPermissions3 = r.OutputDlS3.VerifyPermissions.ValueBool()
		} else {
			verifyPermissions3 = nil
		}
		maxClosingFilesToBackpressure1 := new(float64)
		if !r.OutputDlS3.MaxClosingFilesToBackpressure.IsUnknown() && !r.OutputDlS3.MaxClosingFilesToBackpressure.IsNull() {
			*maxClosingFilesToBackpressure1 = r.OutputDlS3.MaxClosingFilesToBackpressure.ValueFloat64()
		} else {
			maxClosingFilesToBackpressure1 = nil
		}
		partitioningFields := make([]string, 0, len(r.OutputDlS3.PartitioningFields))
		for _, partitioningFieldsItem := range r.OutputDlS3.PartitioningFields {
			partitioningFields = append(partitioningFields, partitioningFieldsItem.ValueString())
		}
		description55 := new(string)
		if !r.OutputDlS3.Description.IsUnknown() && !r.OutputDlS3.Description.IsNull() {
			*description55 = r.OutputDlS3.Description.ValueString()
		} else {
			description55 = nil
		}
		awsAPIKey9 := new(string)
		if !r.OutputDlS3.AwsAPIKey.IsUnknown() && !r.OutputDlS3.AwsAPIKey.IsNull() {
			*awsAPIKey9 = r.OutputDlS3.AwsAPIKey.ValueString()
		} else {
			awsAPIKey9 = nil
		}
		awsSecret8 := new(string)
		if !r.OutputDlS3.AwsSecret.IsUnknown() && !r.OutputDlS3.AwsSecret.IsNull() {
			*awsSecret8 = r.OutputDlS3.AwsSecret.ValueString()
		} else {
			awsSecret8 = nil
		}
		compress32 := new(shared.OutputDlS3Compress)
		if !r.OutputDlS3.Compress.IsUnknown() && !r.OutputDlS3.Compress.IsNull() {
			*compress32 = shared.OutputDlS3Compress(r.OutputDlS3.Compress.ValueString())
		} else {
			compress32 = nil
		}
		compressionLevel5 := new(shared.OutputDlS3CompressionLevel)
		if !r.OutputDlS3.CompressionLevel.IsUnknown() && !r.OutputDlS3.CompressionLevel.IsNull() {
			*compressionLevel5 = shared.OutputDlS3CompressionLevel(r.OutputDlS3.CompressionLevel.ValueString())
		} else {
			compressionLevel5 = nil
		}
		automaticSchema5 := new(bool)
		if !r.OutputDlS3.AutomaticSchema.IsUnknown() && !r.OutputDlS3.AutomaticSchema.IsNull() {
			*automaticSchema5 = r.OutputDlS3.AutomaticSchema.ValueBool()
		} else {
			automaticSchema5 = nil
		}
		parquetVersion5 := new(shared.OutputDlS3ParquetVersion)
		if !r.OutputDlS3.ParquetVersion.IsUnknown() && !r.OutputDlS3.ParquetVersion.IsNull() {
			*parquetVersion5 = shared.OutputDlS3ParquetVersion(r.OutputDlS3.ParquetVersion.ValueString())
		} else {
			parquetVersion5 = nil
		}
		parquetDataPageVersion5 := new(shared.OutputDlS3DataPageVersion)
		if !r.OutputDlS3.ParquetDataPageVersion.IsUnknown() && !r.OutputDlS3.ParquetDataPageVersion.IsNull() {
			*parquetDataPageVersion5 = shared.OutputDlS3DataPageVersion(r.OutputDlS3.ParquetDataPageVersion.ValueString())
		} else {
			parquetDataPageVersion5 = nil
		}
		parquetRowGroupLength5 := new(float64)
		if !r.OutputDlS3.ParquetRowGroupLength.IsUnknown() && !r.OutputDlS3.ParquetRowGroupLength.IsNull() {
			*parquetRowGroupLength5 = r.OutputDlS3.ParquetRowGroupLength.ValueFloat64()
		} else {
			parquetRowGroupLength5 = nil
		}
		parquetPageSize5 := new(string)
		if !r.OutputDlS3.ParquetPageSize.IsUnknown() && !r.OutputDlS3.ParquetPageSize.IsNull() {
			*parquetPageSize5 = r.OutputDlS3.ParquetPageSize.ValueString()
		} else {
			parquetPageSize5 = nil
		}
		shouldLogInvalidRows5 := new(bool)
		if !r.OutputDlS3.ShouldLogInvalidRows.IsUnknown() && !r.OutputDlS3.ShouldLogInvalidRows.IsNull() {
			*shouldLogInvalidRows5 = r.OutputDlS3.ShouldLogInvalidRows.ValueBool()
		} else {
			shouldLogInvalidRows5 = nil
		}
		keyValueMetadata5 := make([]shared.OutputDlS3KeyValueMetadata, 0, len(r.OutputDlS3.KeyValueMetadata))
		for _, keyValueMetadataItem5 := range r.OutputDlS3.KeyValueMetadata {
			key9 := new(string)
			if !keyValueMetadataItem5.Key.IsUnknown() && !keyValueMetadataItem5.Key.IsNull() {
				*key9 = keyValueMetadataItem5.Key.ValueString()
			} else {
				key9 = nil
			}
			var value50 string
			value50 = keyValueMetadataItem5.Value.ValueString()

			keyValueMetadata5 = append(keyValueMetadata5, shared.OutputDlS3KeyValueMetadata{
				Key:   key9,
				Value: value50,
			})
		}
		enableStatistics5 := new(bool)
		if !r.OutputDlS3.EnableStatistics.IsUnknown() && !r.OutputDlS3.EnableStatistics.IsNull() {
			*enableStatistics5 = r.OutputDlS3.EnableStatistics.ValueBool()
		} else {
			enableStatistics5 = nil
		}
		enableWritePageIndex5 := new(bool)
		if !r.OutputDlS3.EnableWritePageIndex.IsUnknown() && !r.OutputDlS3.EnableWritePageIndex.IsNull() {
			*enableWritePageIndex5 = r.OutputDlS3.EnableWritePageIndex.ValueBool()
		} else {
			enableWritePageIndex5 = nil
		}
		enablePageChecksum5 := new(bool)
		if !r.OutputDlS3.EnablePageChecksum.IsUnknown() && !r.OutputDlS3.EnablePageChecksum.IsNull() {
			*enablePageChecksum5 = r.OutputDlS3.EnablePageChecksum.ValueBool()
		} else {
			enablePageChecksum5 = nil
		}
		emptyDirCleanupSec6 := new(float64)
		if !r.OutputDlS3.EmptyDirCleanupSec.IsUnknown() && !r.OutputDlS3.EmptyDirCleanupSec.IsNull() {
			*emptyDirCleanupSec6 = r.OutputDlS3.EmptyDirCleanupSec.ValueFloat64()
		} else {
			emptyDirCleanupSec6 = nil
		}
		deadletterPath6 := new(string)
		if !r.OutputDlS3.DeadletterPath.IsUnknown() && !r.OutputDlS3.DeadletterPath.IsNull() {
			*deadletterPath6 = r.OutputDlS3.DeadletterPath.ValueString()
		} else {
			deadletterPath6 = nil
		}
		maxRetryNum6 := new(float64)
		if !r.OutputDlS3.MaxRetryNum.IsUnknown() && !r.OutputDlS3.MaxRetryNum.IsNull() {
			*maxRetryNum6 = r.OutputDlS3.MaxRetryNum.ValueFloat64()
		} else {
			maxRetryNum6 = nil
		}
		outputDlS3 = &shared.OutputDlS3{
			ID:                            id55,
			Type:                          typeVar55,
			Pipeline:                      pipeline55,
			SystemFields:                  systemFields55,
			Environment:                   environment55,
			Streamtags:                    streamtags55,
			Bucket:                        bucket5,
			Region:                        region13,
			AwsSecretKey:                  awsSecretKey9,
			AwsAuthenticationMethod:       awsAuthenticationMethod8,
			Endpoint:                      endpoint11,
			SignatureVersion:              signatureVersion8,
			ReuseConnections:              reuseConnections9,
			RejectUnauthorized:            rejectUnauthorized51,
			EnableAssumeRole:              enableAssumeRole6,
			AssumeRoleArn:                 assumeRoleArn6,
			AssumeRoleExternalID:          assumeRoleExternalId6,
			DurationSeconds:               durationSeconds6,
			StagePath:                     stagePath7,
			AddIDToStagePath:              addIDToStagePath7,
			DestPath:                      destPath6,
			ObjectACL:                     objectAcl4,
			StorageClass:                  storageClass5,
			ServerSideEncryption:          serverSideEncryption2,
			KmsKeyID:                      kmsKeyId1,
			RemoveEmptyDirs:               removeEmptyDirs7,
			Format:                        format16,
			BaseFileName:                  baseFileName5,
			FileNameSuffix:                fileNameSuffix6,
			MaxFileSizeMB:                 maxFileSizeMb7,
			MaxOpenFiles:                  maxOpenFiles7,
			HeaderLine:                    headerLine5,
			WriteHighWaterMark:            writeHighWaterMark5,
			OnBackpressure:                onBackpressure51,
			DeadletterEnabled:             deadletterEnabled7,
			OnDiskFullBackpressure:        onDiskFullBackpressure7,
			MaxFileOpenTimeSec:            maxFileOpenTimeSec7,
			MaxFileIdleTimeSec:            maxFileIdleTimeSec7,
			MaxConcurrentFileParts:        maxConcurrentFileParts4,
			VerifyPermissions:             verifyPermissions3,
			MaxClosingFilesToBackpressure: maxClosingFilesToBackpressure1,
			PartitioningFields:            partitioningFields,
			Description:                   description55,
			AwsAPIKey:                     awsAPIKey9,
			AwsSecret:                     awsSecret8,
			Compress:                      compress32,
			CompressionLevel:              compressionLevel5,
			AutomaticSchema:               automaticSchema5,
			ParquetVersion:                parquetVersion5,
			ParquetDataPageVersion:        parquetDataPageVersion5,
			ParquetRowGroupLength:         parquetRowGroupLength5,
			ParquetPageSize:               parquetPageSize5,
			ShouldLogInvalidRows:          shouldLogInvalidRows5,
			KeyValueMetadata:              keyValueMetadata5,
			EnableStatistics:              enableStatistics5,
			EnableWritePageIndex:          enableWritePageIndex5,
			EnablePageChecksum:            enablePageChecksum5,
			EmptyDirCleanupSec:            emptyDirCleanupSec6,
			DeadletterPath:                deadletterPath6,
			MaxRetryNum:                   maxRetryNum6,
		}
	}
	if outputDlS3 != nil {
		out = shared.Output{
			OutputDlS3: outputDlS3,
		}
	}
	var outputSecurityLake *shared.OutputSecurityLake
	if r.OutputSecurityLake != nil {
		id56 := new(string)
		if !r.OutputSecurityLake.ID.IsUnknown() && !r.OutputSecurityLake.ID.IsNull() {
			*id56 = r.OutputSecurityLake.ID.ValueString()
		} else {
			id56 = nil
		}
		typeVar56 := new(shared.OutputSecurityLakeType)
		if !r.OutputSecurityLake.Type.IsUnknown() && !r.OutputSecurityLake.Type.IsNull() {
			*typeVar56 = shared.OutputSecurityLakeType(r.OutputSecurityLake.Type.ValueString())
		} else {
			typeVar56 = nil
		}
		pipeline56 := new(string)
		if !r.OutputSecurityLake.Pipeline.IsUnknown() && !r.OutputSecurityLake.Pipeline.IsNull() {
			*pipeline56 = r.OutputSecurityLake.Pipeline.ValueString()
		} else {
			pipeline56 = nil
		}
		systemFields56 := make([]string, 0, len(r.OutputSecurityLake.SystemFields))
		for _, systemFieldsItem56 := range r.OutputSecurityLake.SystemFields {
			systemFields56 = append(systemFields56, systemFieldsItem56.ValueString())
		}
		environment56 := new(string)
		if !r.OutputSecurityLake.Environment.IsUnknown() && !r.OutputSecurityLake.Environment.IsNull() {
			*environment56 = r.OutputSecurityLake.Environment.ValueString()
		} else {
			environment56 = nil
		}
		streamtags56 := make([]string, 0, len(r.OutputSecurityLake.Streamtags))
		for _, streamtagsItem56 := range r.OutputSecurityLake.Streamtags {
			streamtags56 = append(streamtags56, streamtagsItem56.ValueString())
		}
		var bucket6 string
		bucket6 = r.OutputSecurityLake.Bucket.ValueString()

		var region14 string
		region14 = r.OutputSecurityLake.Region.ValueString()

		awsSecretKey10 := new(string)
		if !r.OutputSecurityLake.AwsSecretKey.IsUnknown() && !r.OutputSecurityLake.AwsSecretKey.IsNull() {
			*awsSecretKey10 = r.OutputSecurityLake.AwsSecretKey.ValueString()
		} else {
			awsSecretKey10 = nil
		}
		awsAuthenticationMethod9 := new(shared.OutputSecurityLakeAuthenticationMethod)
		if !r.OutputSecurityLake.AwsAuthenticationMethod.IsUnknown() && !r.OutputSecurityLake.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod9 = shared.OutputSecurityLakeAuthenticationMethod(r.OutputSecurityLake.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod9 = nil
		}
		endpoint12 := new(string)
		if !r.OutputSecurityLake.Endpoint.IsUnknown() && !r.OutputSecurityLake.Endpoint.IsNull() {
			*endpoint12 = r.OutputSecurityLake.Endpoint.ValueString()
		} else {
			endpoint12 = nil
		}
		signatureVersion9 := new(shared.OutputSecurityLakeSignatureVersion)
		if !r.OutputSecurityLake.SignatureVersion.IsUnknown() && !r.OutputSecurityLake.SignatureVersion.IsNull() {
			*signatureVersion9 = shared.OutputSecurityLakeSignatureVersion(r.OutputSecurityLake.SignatureVersion.ValueString())
		} else {
			signatureVersion9 = nil
		}
		reuseConnections10 := new(bool)
		if !r.OutputSecurityLake.ReuseConnections.IsUnknown() && !r.OutputSecurityLake.ReuseConnections.IsNull() {
			*reuseConnections10 = r.OutputSecurityLake.ReuseConnections.ValueBool()
		} else {
			reuseConnections10 = nil
		}
		rejectUnauthorized52 := new(bool)
		if !r.OutputSecurityLake.RejectUnauthorized.IsUnknown() && !r.OutputSecurityLake.RejectUnauthorized.IsNull() {
			*rejectUnauthorized52 = r.OutputSecurityLake.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized52 = nil
		}
		enableAssumeRole7 := new(bool)
		if !r.OutputSecurityLake.EnableAssumeRole.IsUnknown() && !r.OutputSecurityLake.EnableAssumeRole.IsNull() {
			*enableAssumeRole7 = r.OutputSecurityLake.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole7 = nil
		}
		var assumeRoleArn7 string
		assumeRoleArn7 = r.OutputSecurityLake.AssumeRoleArn.ValueString()

		assumeRoleExternalId7 := new(string)
		if !r.OutputSecurityLake.AssumeRoleExternalID.IsUnknown() && !r.OutputSecurityLake.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId7 = r.OutputSecurityLake.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId7 = nil
		}
		durationSeconds7 := new(float64)
		if !r.OutputSecurityLake.DurationSeconds.IsUnknown() && !r.OutputSecurityLake.DurationSeconds.IsNull() {
			*durationSeconds7 = r.OutputSecurityLake.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds7 = nil
		}
		stagePath8 := new(string)
		if !r.OutputSecurityLake.StagePath.IsUnknown() && !r.OutputSecurityLake.StagePath.IsNull() {
			*stagePath8 = r.OutputSecurityLake.StagePath.ValueString()
		} else {
			stagePath8 = nil
		}
		addIDToStagePath8 := new(bool)
		if !r.OutputSecurityLake.AddIDToStagePath.IsUnknown() && !r.OutputSecurityLake.AddIDToStagePath.IsNull() {
			*addIDToStagePath8 = r.OutputSecurityLake.AddIDToStagePath.ValueBool()
		} else {
			addIDToStagePath8 = nil
		}
		objectAcl5 := new(shared.OutputSecurityLakeObjectACL)
		if !r.OutputSecurityLake.ObjectACL.IsUnknown() && !r.OutputSecurityLake.ObjectACL.IsNull() {
			*objectAcl5 = shared.OutputSecurityLakeObjectACL(r.OutputSecurityLake.ObjectACL.ValueString())
		} else {
			objectAcl5 = nil
		}
		storageClass6 := new(shared.OutputSecurityLakeStorageClass)
		if !r.OutputSecurityLake.StorageClass.IsUnknown() && !r.OutputSecurityLake.StorageClass.IsNull() {
			*storageClass6 = shared.OutputSecurityLakeStorageClass(r.OutputSecurityLake.StorageClass.ValueString())
		} else {
			storageClass6 = nil
		}
		serverSideEncryption3 := new(shared.OutputSecurityLakeServerSideEncryption)
		if !r.OutputSecurityLake.ServerSideEncryption.IsUnknown() && !r.OutputSecurityLake.ServerSideEncryption.IsNull() {
			*serverSideEncryption3 = shared.OutputSecurityLakeServerSideEncryption(r.OutputSecurityLake.ServerSideEncryption.ValueString())
		} else {
			serverSideEncryption3 = nil
		}
		kmsKeyId2 := new(string)
		if !r.OutputSecurityLake.KmsKeyID.IsUnknown() && !r.OutputSecurityLake.KmsKeyID.IsNull() {
			*kmsKeyId2 = r.OutputSecurityLake.KmsKeyID.ValueString()
		} else {
			kmsKeyId2 = nil
		}
		removeEmptyDirs8 := new(bool)
		if !r.OutputSecurityLake.RemoveEmptyDirs.IsUnknown() && !r.OutputSecurityLake.RemoveEmptyDirs.IsNull() {
			*removeEmptyDirs8 = r.OutputSecurityLake.RemoveEmptyDirs.ValueBool()
		} else {
			removeEmptyDirs8 = nil
		}
		baseFileName6 := new(string)
		if !r.OutputSecurityLake.BaseFileName.IsUnknown() && !r.OutputSecurityLake.BaseFileName.IsNull() {
			*baseFileName6 = r.OutputSecurityLake.BaseFileName.ValueString()
		} else {
			baseFileName6 = nil
		}
		maxFileSizeMb8 := new(float64)
		if !r.OutputSecurityLake.MaxFileSizeMB.IsUnknown() && !r.OutputSecurityLake.MaxFileSizeMB.IsNull() {
			*maxFileSizeMb8 = r.OutputSecurityLake.MaxFileSizeMB.ValueFloat64()
		} else {
			maxFileSizeMb8 = nil
		}
		maxOpenFiles8 := new(float64)
		if !r.OutputSecurityLake.MaxOpenFiles.IsUnknown() && !r.OutputSecurityLake.MaxOpenFiles.IsNull() {
			*maxOpenFiles8 = r.OutputSecurityLake.MaxOpenFiles.ValueFloat64()
		} else {
			maxOpenFiles8 = nil
		}
		headerLine6 := new(string)
		if !r.OutputSecurityLake.HeaderLine.IsUnknown() && !r.OutputSecurityLake.HeaderLine.IsNull() {
			*headerLine6 = r.OutputSecurityLake.HeaderLine.ValueString()
		} else {
			headerLine6 = nil
		}
		writeHighWaterMark6 := new(float64)
		if !r.OutputSecurityLake.WriteHighWaterMark.IsUnknown() && !r.OutputSecurityLake.WriteHighWaterMark.IsNull() {
			*writeHighWaterMark6 = r.OutputSecurityLake.WriteHighWaterMark.ValueFloat64()
		} else {
			writeHighWaterMark6 = nil
		}
		onBackpressure52 := new(shared.OutputSecurityLakeBackpressureBehavior)
		if !r.OutputSecurityLake.OnBackpressure.IsUnknown() && !r.OutputSecurityLake.OnBackpressure.IsNull() {
			*onBackpressure52 = shared.OutputSecurityLakeBackpressureBehavior(r.OutputSecurityLake.OnBackpressure.ValueString())
		} else {
			onBackpressure52 = nil
		}
		deadletterEnabled8 := new(bool)
		if !r.OutputSecurityLake.DeadletterEnabled.IsUnknown() && !r.OutputSecurityLake.DeadletterEnabled.IsNull() {
			*deadletterEnabled8 = r.OutputSecurityLake.DeadletterEnabled.ValueBool()
		} else {
			deadletterEnabled8 = nil
		}
		onDiskFullBackpressure8 := new(shared.OutputSecurityLakeDiskSpaceProtection)
		if !r.OutputSecurityLake.OnDiskFullBackpressure.IsUnknown() && !r.OutputSecurityLake.OnDiskFullBackpressure.IsNull() {
			*onDiskFullBackpressure8 = shared.OutputSecurityLakeDiskSpaceProtection(r.OutputSecurityLake.OnDiskFullBackpressure.ValueString())
		} else {
			onDiskFullBackpressure8 = nil
		}
		maxFileOpenTimeSec8 := new(float64)
		if !r.OutputSecurityLake.MaxFileOpenTimeSec.IsUnknown() && !r.OutputSecurityLake.MaxFileOpenTimeSec.IsNull() {
			*maxFileOpenTimeSec8 = r.OutputSecurityLake.MaxFileOpenTimeSec.ValueFloat64()
		} else {
			maxFileOpenTimeSec8 = nil
		}
		maxFileIdleTimeSec8 := new(float64)
		if !r.OutputSecurityLake.MaxFileIdleTimeSec.IsUnknown() && !r.OutputSecurityLake.MaxFileIdleTimeSec.IsNull() {
			*maxFileIdleTimeSec8 = r.OutputSecurityLake.MaxFileIdleTimeSec.ValueFloat64()
		} else {
			maxFileIdleTimeSec8 = nil
		}
		maxConcurrentFileParts5 := new(float64)
		if !r.OutputSecurityLake.MaxConcurrentFileParts.IsUnknown() && !r.OutputSecurityLake.MaxConcurrentFileParts.IsNull() {
			*maxConcurrentFileParts5 = r.OutputSecurityLake.MaxConcurrentFileParts.ValueFloat64()
		} else {
			maxConcurrentFileParts5 = nil
		}
		verifyPermissions4 := new(bool)
		if !r.OutputSecurityLake.VerifyPermissions.IsUnknown() && !r.OutputSecurityLake.VerifyPermissions.IsNull() {
			*verifyPermissions4 = r.OutputSecurityLake.VerifyPermissions.ValueBool()
		} else {
			verifyPermissions4 = nil
		}
		maxClosingFilesToBackpressure2 := new(float64)
		if !r.OutputSecurityLake.MaxClosingFilesToBackpressure.IsUnknown() && !r.OutputSecurityLake.MaxClosingFilesToBackpressure.IsNull() {
			*maxClosingFilesToBackpressure2 = r.OutputSecurityLake.MaxClosingFilesToBackpressure.ValueFloat64()
		} else {
			maxClosingFilesToBackpressure2 = nil
		}
		var accountId1 string
		accountId1 = r.OutputSecurityLake.AccountID.ValueString()

		var customSource1 string
		customSource1 = r.OutputSecurityLake.CustomSource.ValueString()

		automaticSchema6 := new(bool)
		if !r.OutputSecurityLake.AutomaticSchema.IsUnknown() && !r.OutputSecurityLake.AutomaticSchema.IsNull() {
			*automaticSchema6 = r.OutputSecurityLake.AutomaticSchema.ValueBool()
		} else {
			automaticSchema6 = nil
		}
		parquetVersion6 := new(shared.OutputSecurityLakeParquetVersion)
		if !r.OutputSecurityLake.ParquetVersion.IsUnknown() && !r.OutputSecurityLake.ParquetVersion.IsNull() {
			*parquetVersion6 = shared.OutputSecurityLakeParquetVersion(r.OutputSecurityLake.ParquetVersion.ValueString())
		} else {
			parquetVersion6 = nil
		}
		parquetDataPageVersion6 := new(shared.OutputSecurityLakeDataPageVersion)
		if !r.OutputSecurityLake.ParquetDataPageVersion.IsUnknown() && !r.OutputSecurityLake.ParquetDataPageVersion.IsNull() {
			*parquetDataPageVersion6 = shared.OutputSecurityLakeDataPageVersion(r.OutputSecurityLake.ParquetDataPageVersion.ValueString())
		} else {
			parquetDataPageVersion6 = nil
		}
		parquetRowGroupLength6 := new(float64)
		if !r.OutputSecurityLake.ParquetRowGroupLength.IsUnknown() && !r.OutputSecurityLake.ParquetRowGroupLength.IsNull() {
			*parquetRowGroupLength6 = r.OutputSecurityLake.ParquetRowGroupLength.ValueFloat64()
		} else {
			parquetRowGroupLength6 = nil
		}
		parquetPageSize6 := new(string)
		if !r.OutputSecurityLake.ParquetPageSize.IsUnknown() && !r.OutputSecurityLake.ParquetPageSize.IsNull() {
			*parquetPageSize6 = r.OutputSecurityLake.ParquetPageSize.ValueString()
		} else {
			parquetPageSize6 = nil
		}
		shouldLogInvalidRows6 := new(bool)
		if !r.OutputSecurityLake.ShouldLogInvalidRows.IsUnknown() && !r.OutputSecurityLake.ShouldLogInvalidRows.IsNull() {
			*shouldLogInvalidRows6 = r.OutputSecurityLake.ShouldLogInvalidRows.ValueBool()
		} else {
			shouldLogInvalidRows6 = nil
		}
		keyValueMetadata6 := make([]shared.OutputSecurityLakeKeyValueMetadata, 0, len(r.OutputSecurityLake.KeyValueMetadata))
		for _, keyValueMetadataItem6 := range r.OutputSecurityLake.KeyValueMetadata {
			key10 := new(string)
			if !keyValueMetadataItem6.Key.IsUnknown() && !keyValueMetadataItem6.Key.IsNull() {
				*key10 = keyValueMetadataItem6.Key.ValueString()
			} else {
				key10 = nil
			}
			var value51 string
			value51 = keyValueMetadataItem6.Value.ValueString()

			keyValueMetadata6 = append(keyValueMetadata6, shared.OutputSecurityLakeKeyValueMetadata{
				Key:   key10,
				Value: value51,
			})
		}
		enableStatistics6 := new(bool)
		if !r.OutputSecurityLake.EnableStatistics.IsUnknown() && !r.OutputSecurityLake.EnableStatistics.IsNull() {
			*enableStatistics6 = r.OutputSecurityLake.EnableStatistics.ValueBool()
		} else {
			enableStatistics6 = nil
		}
		enableWritePageIndex6 := new(bool)
		if !r.OutputSecurityLake.EnableWritePageIndex.IsUnknown() && !r.OutputSecurityLake.EnableWritePageIndex.IsNull() {
			*enableWritePageIndex6 = r.OutputSecurityLake.EnableWritePageIndex.ValueBool()
		} else {
			enableWritePageIndex6 = nil
		}
		enablePageChecksum6 := new(bool)
		if !r.OutputSecurityLake.EnablePageChecksum.IsUnknown() && !r.OutputSecurityLake.EnablePageChecksum.IsNull() {
			*enablePageChecksum6 = r.OutputSecurityLake.EnablePageChecksum.ValueBool()
		} else {
			enablePageChecksum6 = nil
		}
		description56 := new(string)
		if !r.OutputSecurityLake.Description.IsUnknown() && !r.OutputSecurityLake.Description.IsNull() {
			*description56 = r.OutputSecurityLake.Description.ValueString()
		} else {
			description56 = nil
		}
		awsAPIKey10 := new(string)
		if !r.OutputSecurityLake.AwsAPIKey.IsUnknown() && !r.OutputSecurityLake.AwsAPIKey.IsNull() {
			*awsAPIKey10 = r.OutputSecurityLake.AwsAPIKey.ValueString()
		} else {
			awsAPIKey10 = nil
		}
		awsSecret9 := new(string)
		if !r.OutputSecurityLake.AwsSecret.IsUnknown() && !r.OutputSecurityLake.AwsSecret.IsNull() {
			*awsSecret9 = r.OutputSecurityLake.AwsSecret.ValueString()
		} else {
			awsSecret9 = nil
		}
		emptyDirCleanupSec7 := new(float64)
		if !r.OutputSecurityLake.EmptyDirCleanupSec.IsUnknown() && !r.OutputSecurityLake.EmptyDirCleanupSec.IsNull() {
			*emptyDirCleanupSec7 = r.OutputSecurityLake.EmptyDirCleanupSec.ValueFloat64()
		} else {
			emptyDirCleanupSec7 = nil
		}
		parquetSchema := new(string)
		if !r.OutputSecurityLake.ParquetSchema.IsUnknown() && !r.OutputSecurityLake.ParquetSchema.IsNull() {
			*parquetSchema = r.OutputSecurityLake.ParquetSchema.ValueString()
		} else {
			parquetSchema = nil
		}
		deadletterPath7 := new(string)
		if !r.OutputSecurityLake.DeadletterPath.IsUnknown() && !r.OutputSecurityLake.DeadletterPath.IsNull() {
			*deadletterPath7 = r.OutputSecurityLake.DeadletterPath.ValueString()
		} else {
			deadletterPath7 = nil
		}
		maxRetryNum7 := new(float64)
		if !r.OutputSecurityLake.MaxRetryNum.IsUnknown() && !r.OutputSecurityLake.MaxRetryNum.IsNull() {
			*maxRetryNum7 = r.OutputSecurityLake.MaxRetryNum.ValueFloat64()
		} else {
			maxRetryNum7 = nil
		}
		outputSecurityLake = &shared.OutputSecurityLake{
			ID:                            id56,
			Type:                          typeVar56,
			Pipeline:                      pipeline56,
			SystemFields:                  systemFields56,
			Environment:                   environment56,
			Streamtags:                    streamtags56,
			Bucket:                        bucket6,
			Region:                        region14,
			AwsSecretKey:                  awsSecretKey10,
			AwsAuthenticationMethod:       awsAuthenticationMethod9,
			Endpoint:                      endpoint12,
			SignatureVersion:              signatureVersion9,
			ReuseConnections:              reuseConnections10,
			RejectUnauthorized:            rejectUnauthorized52,
			EnableAssumeRole:              enableAssumeRole7,
			AssumeRoleArn:                 assumeRoleArn7,
			AssumeRoleExternalID:          assumeRoleExternalId7,
			DurationSeconds:               durationSeconds7,
			StagePath:                     stagePath8,
			AddIDToStagePath:              addIDToStagePath8,
			ObjectACL:                     objectAcl5,
			StorageClass:                  storageClass6,
			ServerSideEncryption:          serverSideEncryption3,
			KmsKeyID:                      kmsKeyId2,
			RemoveEmptyDirs:               removeEmptyDirs8,
			BaseFileName:                  baseFileName6,
			MaxFileSizeMB:                 maxFileSizeMb8,
			MaxOpenFiles:                  maxOpenFiles8,
			HeaderLine:                    headerLine6,
			WriteHighWaterMark:            writeHighWaterMark6,
			OnBackpressure:                onBackpressure52,
			DeadletterEnabled:             deadletterEnabled8,
			OnDiskFullBackpressure:        onDiskFullBackpressure8,
			MaxFileOpenTimeSec:            maxFileOpenTimeSec8,
			MaxFileIdleTimeSec:            maxFileIdleTimeSec8,
			MaxConcurrentFileParts:        maxConcurrentFileParts5,
			VerifyPermissions:             verifyPermissions4,
			MaxClosingFilesToBackpressure: maxClosingFilesToBackpressure2,
			AccountID:                     accountId1,
			CustomSource:                  customSource1,
			AutomaticSchema:               automaticSchema6,
			ParquetVersion:                parquetVersion6,
			ParquetDataPageVersion:        parquetDataPageVersion6,
			ParquetRowGroupLength:         parquetRowGroupLength6,
			ParquetPageSize:               parquetPageSize6,
			ShouldLogInvalidRows:          shouldLogInvalidRows6,
			KeyValueMetadata:              keyValueMetadata6,
			EnableStatistics:              enableStatistics6,
			EnableWritePageIndex:          enableWritePageIndex6,
			EnablePageChecksum:            enablePageChecksum6,
			Description:                   description56,
			AwsAPIKey:                     awsAPIKey10,
			AwsSecret:                     awsSecret9,
			EmptyDirCleanupSec:            emptyDirCleanupSec7,
			ParquetSchema:                 parquetSchema,
			DeadletterPath:                deadletterPath7,
			MaxRetryNum:                   maxRetryNum7,
		}
	}
	if outputSecurityLake != nil {
		out = shared.Output{
			OutputSecurityLake: outputSecurityLake,
		}
	}
	var outputCriblLake *shared.OutputCriblLake
	if r.OutputCriblLake != nil {
		id57 := new(string)
		if !r.OutputCriblLake.ID.IsUnknown() && !r.OutputCriblLake.ID.IsNull() {
			*id57 = r.OutputCriblLake.ID.ValueString()
		} else {
			id57 = nil
		}
		typeVar57 := shared.OutputCriblLakeType(r.OutputCriblLake.Type.ValueString())
		pipeline57 := new(string)
		if !r.OutputCriblLake.Pipeline.IsUnknown() && !r.OutputCriblLake.Pipeline.IsNull() {
			*pipeline57 = r.OutputCriblLake.Pipeline.ValueString()
		} else {
			pipeline57 = nil
		}
		systemFields57 := make([]string, 0, len(r.OutputCriblLake.SystemFields))
		for _, systemFieldsItem57 := range r.OutputCriblLake.SystemFields {
			systemFields57 = append(systemFields57, systemFieldsItem57.ValueString())
		}
		environment57 := new(string)
		if !r.OutputCriblLake.Environment.IsUnknown() && !r.OutputCriblLake.Environment.IsNull() {
			*environment57 = r.OutputCriblLake.Environment.ValueString()
		} else {
			environment57 = nil
		}
		streamtags57 := make([]string, 0, len(r.OutputCriblLake.Streamtags))
		for _, streamtagsItem57 := range r.OutputCriblLake.Streamtags {
			streamtags57 = append(streamtags57, streamtagsItem57.ValueString())
		}
		bucket7 := new(string)
		if !r.OutputCriblLake.Bucket.IsUnknown() && !r.OutputCriblLake.Bucket.IsNull() {
			*bucket7 = r.OutputCriblLake.Bucket.ValueString()
		} else {
			bucket7 = nil
		}
		region15 := new(string)
		if !r.OutputCriblLake.Region.IsUnknown() && !r.OutputCriblLake.Region.IsNull() {
			*region15 = r.OutputCriblLake.Region.ValueString()
		} else {
			region15 = nil
		}
		awsSecretKey11 := new(string)
		if !r.OutputCriblLake.AwsSecretKey.IsUnknown() && !r.OutputCriblLake.AwsSecretKey.IsNull() {
			*awsSecretKey11 = r.OutputCriblLake.AwsSecretKey.ValueString()
		} else {
			awsSecretKey11 = nil
		}
		endpoint13 := new(string)
		if !r.OutputCriblLake.Endpoint.IsUnknown() && !r.OutputCriblLake.Endpoint.IsNull() {
			*endpoint13 = r.OutputCriblLake.Endpoint.ValueString()
		} else {
			endpoint13 = nil
		}
		signatureVersion10 := new(shared.OutputCriblLakeSignatureVersion)
		if !r.OutputCriblLake.SignatureVersion.IsUnknown() && !r.OutputCriblLake.SignatureVersion.IsNull() {
			*signatureVersion10 = shared.OutputCriblLakeSignatureVersion(r.OutputCriblLake.SignatureVersion.ValueString())
		} else {
			signatureVersion10 = nil
		}
		reuseConnections11 := new(bool)
		if !r.OutputCriblLake.ReuseConnections.IsUnknown() && !r.OutputCriblLake.ReuseConnections.IsNull() {
			*reuseConnections11 = r.OutputCriblLake.ReuseConnections.ValueBool()
		} else {
			reuseConnections11 = nil
		}
		rejectUnauthorized53 := new(bool)
		if !r.OutputCriblLake.RejectUnauthorized.IsUnknown() && !r.OutputCriblLake.RejectUnauthorized.IsNull() {
			*rejectUnauthorized53 = r.OutputCriblLake.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized53 = nil
		}
		enableAssumeRole8 := new(bool)
		if !r.OutputCriblLake.EnableAssumeRole.IsUnknown() && !r.OutputCriblLake.EnableAssumeRole.IsNull() {
			*enableAssumeRole8 = r.OutputCriblLake.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole8 = nil
		}
		assumeRoleArn8 := new(string)
		if !r.OutputCriblLake.AssumeRoleArn.IsUnknown() && !r.OutputCriblLake.AssumeRoleArn.IsNull() {
			*assumeRoleArn8 = r.OutputCriblLake.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn8 = nil
		}
		assumeRoleExternalId8 := new(string)
		if !r.OutputCriblLake.AssumeRoleExternalID.IsUnknown() && !r.OutputCriblLake.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId8 = r.OutputCriblLake.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId8 = nil
		}
		durationSeconds8 := new(float64)
		if !r.OutputCriblLake.DurationSeconds.IsUnknown() && !r.OutputCriblLake.DurationSeconds.IsNull() {
			*durationSeconds8 = r.OutputCriblLake.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds8 = nil
		}
		stagePath9 := new(string)
		if !r.OutputCriblLake.StagePath.IsUnknown() && !r.OutputCriblLake.StagePath.IsNull() {
			*stagePath9 = r.OutputCriblLake.StagePath.ValueString()
		} else {
			stagePath9 = nil
		}
		addIDToStagePath9 := new(bool)
		if !r.OutputCriblLake.AddIDToStagePath.IsUnknown() && !r.OutputCriblLake.AddIDToStagePath.IsNull() {
			*addIDToStagePath9 = r.OutputCriblLake.AddIDToStagePath.ValueBool()
		} else {
			addIDToStagePath9 = nil
		}
		var destPath7 string
		destPath7 = r.OutputCriblLake.DestPath.ValueString()

		objectAcl6 := new(shared.OutputCriblLakeObjectACL)
		if !r.OutputCriblLake.ObjectACL.IsUnknown() && !r.OutputCriblLake.ObjectACL.IsNull() {
			*objectAcl6 = shared.OutputCriblLakeObjectACL(r.OutputCriblLake.ObjectACL.ValueString())
		} else {
			objectAcl6 = nil
		}
		storageClass7 := new(shared.OutputCriblLakeStorageClass)
		if !r.OutputCriblLake.StorageClass.IsUnknown() && !r.OutputCriblLake.StorageClass.IsNull() {
			*storageClass7 = shared.OutputCriblLakeStorageClass(r.OutputCriblLake.StorageClass.ValueString())
		} else {
			storageClass7 = nil
		}
		serverSideEncryption4 := new(shared.OutputCriblLakeServerSideEncryption)
		if !r.OutputCriblLake.ServerSideEncryption.IsUnknown() && !r.OutputCriblLake.ServerSideEncryption.IsNull() {
			*serverSideEncryption4 = shared.OutputCriblLakeServerSideEncryption(r.OutputCriblLake.ServerSideEncryption.ValueString())
		} else {
			serverSideEncryption4 = nil
		}
		kmsKeyId3 := new(string)
		if !r.OutputCriblLake.KmsKeyID.IsUnknown() && !r.OutputCriblLake.KmsKeyID.IsNull() {
			*kmsKeyId3 = r.OutputCriblLake.KmsKeyID.ValueString()
		} else {
			kmsKeyId3 = nil
		}
		removeEmptyDirs9 := new(bool)
		if !r.OutputCriblLake.RemoveEmptyDirs.IsUnknown() && !r.OutputCriblLake.RemoveEmptyDirs.IsNull() {
			*removeEmptyDirs9 = r.OutputCriblLake.RemoveEmptyDirs.ValueBool()
		} else {
			removeEmptyDirs9 = nil
		}
		baseFileName7 := new(string)
		if !r.OutputCriblLake.BaseFileName.IsUnknown() && !r.OutputCriblLake.BaseFileName.IsNull() {
			*baseFileName7 = r.OutputCriblLake.BaseFileName.ValueString()
		} else {
			baseFileName7 = nil
		}
		fileNameSuffix7 := new(string)
		if !r.OutputCriblLake.FileNameSuffix.IsUnknown() && !r.OutputCriblLake.FileNameSuffix.IsNull() {
			*fileNameSuffix7 = r.OutputCriblLake.FileNameSuffix.ValueString()
		} else {
			fileNameSuffix7 = nil
		}
		maxFileSizeMb9 := new(float64)
		if !r.OutputCriblLake.MaxFileSizeMB.IsUnknown() && !r.OutputCriblLake.MaxFileSizeMB.IsNull() {
			*maxFileSizeMb9 = r.OutputCriblLake.MaxFileSizeMB.ValueFloat64()
		} else {
			maxFileSizeMb9 = nil
		}
		maxOpenFiles9 := new(float64)
		if !r.OutputCriblLake.MaxOpenFiles.IsUnknown() && !r.OutputCriblLake.MaxOpenFiles.IsNull() {
			*maxOpenFiles9 = r.OutputCriblLake.MaxOpenFiles.ValueFloat64()
		} else {
			maxOpenFiles9 = nil
		}
		headerLine7 := new(string)
		if !r.OutputCriblLake.HeaderLine.IsUnknown() && !r.OutputCriblLake.HeaderLine.IsNull() {
			*headerLine7 = r.OutputCriblLake.HeaderLine.ValueString()
		} else {
			headerLine7 = nil
		}
		writeHighWaterMark7 := new(float64)
		if !r.OutputCriblLake.WriteHighWaterMark.IsUnknown() && !r.OutputCriblLake.WriteHighWaterMark.IsNull() {
			*writeHighWaterMark7 = r.OutputCriblLake.WriteHighWaterMark.ValueFloat64()
		} else {
			writeHighWaterMark7 = nil
		}
		onBackpressure53 := new(shared.OutputCriblLakeBackpressureBehavior)
		if !r.OutputCriblLake.OnBackpressure.IsUnknown() && !r.OutputCriblLake.OnBackpressure.IsNull() {
			*onBackpressure53 = shared.OutputCriblLakeBackpressureBehavior(r.OutputCriblLake.OnBackpressure.ValueString())
		} else {
			onBackpressure53 = nil
		}
		deadletterEnabled9 := new(bool)
		if !r.OutputCriblLake.DeadletterEnabled.IsUnknown() && !r.OutputCriblLake.DeadletterEnabled.IsNull() {
			*deadletterEnabled9 = r.OutputCriblLake.DeadletterEnabled.ValueBool()
		} else {
			deadletterEnabled9 = nil
		}
		onDiskFullBackpressure9 := new(shared.OutputCriblLakeDiskSpaceProtection)
		if !r.OutputCriblLake.OnDiskFullBackpressure.IsUnknown() && !r.OutputCriblLake.OnDiskFullBackpressure.IsNull() {
			*onDiskFullBackpressure9 = shared.OutputCriblLakeDiskSpaceProtection(r.OutputCriblLake.OnDiskFullBackpressure.ValueString())
		} else {
			onDiskFullBackpressure9 = nil
		}
		maxFileOpenTimeSec9 := new(float64)
		if !r.OutputCriblLake.MaxFileOpenTimeSec.IsUnknown() && !r.OutputCriblLake.MaxFileOpenTimeSec.IsNull() {
			*maxFileOpenTimeSec9 = r.OutputCriblLake.MaxFileOpenTimeSec.ValueFloat64()
		} else {
			maxFileOpenTimeSec9 = nil
		}
		maxFileIdleTimeSec9 := new(float64)
		if !r.OutputCriblLake.MaxFileIdleTimeSec.IsUnknown() && !r.OutputCriblLake.MaxFileIdleTimeSec.IsNull() {
			*maxFileIdleTimeSec9 = r.OutputCriblLake.MaxFileIdleTimeSec.ValueFloat64()
		} else {
			maxFileIdleTimeSec9 = nil
		}
		verifyPermissions5 := new(bool)
		if !r.OutputCriblLake.VerifyPermissions.IsUnknown() && !r.OutputCriblLake.VerifyPermissions.IsNull() {
			*verifyPermissions5 = r.OutputCriblLake.VerifyPermissions.ValueBool()
		} else {
			verifyPermissions5 = nil
		}
		maxClosingFilesToBackpressure3 := new(float64)
		if !r.OutputCriblLake.MaxClosingFilesToBackpressure.IsUnknown() && !r.OutputCriblLake.MaxClosingFilesToBackpressure.IsNull() {
			*maxClosingFilesToBackpressure3 = r.OutputCriblLake.MaxClosingFilesToBackpressure.ValueFloat64()
		} else {
			maxClosingFilesToBackpressure3 = nil
		}
		awsAuthenticationMethod10 := new(shared.AwsAuthenticationMethod)
		if !r.OutputCriblLake.AwsAuthenticationMethod.IsUnknown() && !r.OutputCriblLake.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod10 = shared.AwsAuthenticationMethod(r.OutputCriblLake.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod10 = nil
		}
		format17 := new(shared.OutputCriblLakeFormat)
		if !r.OutputCriblLake.Format.IsUnknown() && !r.OutputCriblLake.Format.IsNull() {
			*format17 = shared.OutputCriblLakeFormat(r.OutputCriblLake.Format.ValueString())
		} else {
			format17 = nil
		}
		maxConcurrentFileParts6 := new(float64)
		if !r.OutputCriblLake.MaxConcurrentFileParts.IsUnknown() && !r.OutputCriblLake.MaxConcurrentFileParts.IsNull() {
			*maxConcurrentFileParts6 = r.OutputCriblLake.MaxConcurrentFileParts.ValueFloat64()
		} else {
			maxConcurrentFileParts6 = nil
		}
		description57 := new(string)
		if !r.OutputCriblLake.Description.IsUnknown() && !r.OutputCriblLake.Description.IsNull() {
			*description57 = r.OutputCriblLake.Description.ValueString()
		} else {
			description57 = nil
		}
		emptyDirCleanupSec8 := new(float64)
		if !r.OutputCriblLake.EmptyDirCleanupSec.IsUnknown() && !r.OutputCriblLake.EmptyDirCleanupSec.IsNull() {
			*emptyDirCleanupSec8 = r.OutputCriblLake.EmptyDirCleanupSec.ValueFloat64()
		} else {
			emptyDirCleanupSec8 = nil
		}
		deadletterPath8 := new(string)
		if !r.OutputCriblLake.DeadletterPath.IsUnknown() && !r.OutputCriblLake.DeadletterPath.IsNull() {
			*deadletterPath8 = r.OutputCriblLake.DeadletterPath.ValueString()
		} else {
			deadletterPath8 = nil
		}
		maxRetryNum8 := new(float64)
		if !r.OutputCriblLake.MaxRetryNum.IsUnknown() && !r.OutputCriblLake.MaxRetryNum.IsNull() {
			*maxRetryNum8 = r.OutputCriblLake.MaxRetryNum.ValueFloat64()
		} else {
			maxRetryNum8 = nil
		}
		outputCriblLake = &shared.OutputCriblLake{
			ID:                            id57,
			Type:                          typeVar57,
			Pipeline:                      pipeline57,
			SystemFields:                  systemFields57,
			Environment:                   environment57,
			Streamtags:                    streamtags57,
			Bucket:                        bucket7,
			Region:                        region15,
			AwsSecretKey:                  awsSecretKey11,
			Endpoint:                      endpoint13,
			SignatureVersion:              signatureVersion10,
			ReuseConnections:              reuseConnections11,
			RejectUnauthorized:            rejectUnauthorized53,
			EnableAssumeRole:              enableAssumeRole8,
			AssumeRoleArn:                 assumeRoleArn8,
			AssumeRoleExternalID:          assumeRoleExternalId8,
			DurationSeconds:               durationSeconds8,
			StagePath:                     stagePath9,
			AddIDToStagePath:              addIDToStagePath9,
			DestPath:                      destPath7,
			ObjectACL:                     objectAcl6,
			StorageClass:                  storageClass7,
			ServerSideEncryption:          serverSideEncryption4,
			KmsKeyID:                      kmsKeyId3,
			RemoveEmptyDirs:               removeEmptyDirs9,
			BaseFileName:                  baseFileName7,
			FileNameSuffix:                fileNameSuffix7,
			MaxFileSizeMB:                 maxFileSizeMb9,
			MaxOpenFiles:                  maxOpenFiles9,
			HeaderLine:                    headerLine7,
			WriteHighWaterMark:            writeHighWaterMark7,
			OnBackpressure:                onBackpressure53,
			DeadletterEnabled:             deadletterEnabled9,
			OnDiskFullBackpressure:        onDiskFullBackpressure9,
			MaxFileOpenTimeSec:            maxFileOpenTimeSec9,
			MaxFileIdleTimeSec:            maxFileIdleTimeSec9,
			VerifyPermissions:             verifyPermissions5,
			MaxClosingFilesToBackpressure: maxClosingFilesToBackpressure3,
			AwsAuthenticationMethod:       awsAuthenticationMethod10,
			Format:                        format17,
			MaxConcurrentFileParts:        maxConcurrentFileParts6,
			Description:                   description57,
			EmptyDirCleanupSec:            emptyDirCleanupSec8,
			DeadletterPath:                deadletterPath8,
			MaxRetryNum:                   maxRetryNum8,
		}
	}
	if outputCriblLake != nil {
		out = shared.Output{
			OutputCriblLake: outputCriblLake,
		}
	}
	var outputDiskSpool *shared.OutputDiskSpool
	if r.OutputDiskSpool != nil {
		var id58 string
		id58 = r.OutputDiskSpool.ID.ValueString()

		typeVar58 := shared.OutputDiskSpoolType(r.OutputDiskSpool.Type.ValueString())
		pipeline58 := new(string)
		if !r.OutputDiskSpool.Pipeline.IsUnknown() && !r.OutputDiskSpool.Pipeline.IsNull() {
			*pipeline58 = r.OutputDiskSpool.Pipeline.ValueString()
		} else {
			pipeline58 = nil
		}
		systemFields58 := make([]string, 0, len(r.OutputDiskSpool.SystemFields))
		for _, systemFieldsItem58 := range r.OutputDiskSpool.SystemFields {
			systemFields58 = append(systemFields58, systemFieldsItem58.ValueString())
		}
		environment58 := new(string)
		if !r.OutputDiskSpool.Environment.IsUnknown() && !r.OutputDiskSpool.Environment.IsNull() {
			*environment58 = r.OutputDiskSpool.Environment.ValueString()
		} else {
			environment58 = nil
		}
		streamtags58 := make([]string, 0, len(r.OutputDiskSpool.Streamtags))
		for _, streamtagsItem58 := range r.OutputDiskSpool.Streamtags {
			streamtags58 = append(streamtags58, streamtagsItem58.ValueString())
		}
		timeWindow := new(string)
		if !r.OutputDiskSpool.TimeWindow.IsUnknown() && !r.OutputDiskSpool.TimeWindow.IsNull() {
			*timeWindow = r.OutputDiskSpool.TimeWindow.ValueString()
		} else {
			timeWindow = nil
		}
		maxDataSize1 := new(string)
		if !r.OutputDiskSpool.MaxDataSize.IsUnknown() && !r.OutputDiskSpool.MaxDataSize.IsNull() {
			*maxDataSize1 = r.OutputDiskSpool.MaxDataSize.ValueString()
		} else {
			maxDataSize1 = nil
		}
		maxDataTime1 := new(string)
		if !r.OutputDiskSpool.MaxDataTime.IsUnknown() && !r.OutputDiskSpool.MaxDataTime.IsNull() {
			*maxDataTime1 = r.OutputDiskSpool.MaxDataTime.ValueString()
		} else {
			maxDataTime1 = nil
		}
		compress33 := new(shared.OutputDiskSpoolCompression)
		if !r.OutputDiskSpool.Compress.IsUnknown() && !r.OutputDiskSpool.Compress.IsNull() {
			*compress33 = shared.OutputDiskSpoolCompression(r.OutputDiskSpool.Compress.ValueString())
		} else {
			compress33 = nil
		}
		partitionExpr6 := new(string)
		if !r.OutputDiskSpool.PartitionExpr.IsUnknown() && !r.OutputDiskSpool.PartitionExpr.IsNull() {
			*partitionExpr6 = r.OutputDiskSpool.PartitionExpr.ValueString()
		} else {
			partitionExpr6 = nil
		}
		description58 := new(string)
		if !r.OutputDiskSpool.Description.IsUnknown() && !r.OutputDiskSpool.Description.IsNull() {
			*description58 = r.OutputDiskSpool.Description.ValueString()
		} else {
			description58 = nil
		}
		outputDiskSpool = &shared.OutputDiskSpool{
			ID:            id58,
			Type:          typeVar58,
			Pipeline:      pipeline58,
			SystemFields:  systemFields58,
			Environment:   environment58,
			Streamtags:    streamtags58,
			TimeWindow:    timeWindow,
			MaxDataSize:   maxDataSize1,
			MaxDataTime:   maxDataTime1,
			Compress:      compress33,
			PartitionExpr: partitionExpr6,
			Description:   description58,
		}
	}
	if outputDiskSpool != nil {
		out = shared.Output{
			OutputDiskSpool: outputDiskSpool,
		}
	}
	var outputClickHouse *shared.OutputClickHouse
	if r.OutputClickHouse != nil {
		id59 := new(string)
		if !r.OutputClickHouse.ID.IsUnknown() && !r.OutputClickHouse.ID.IsNull() {
			*id59 = r.OutputClickHouse.ID.ValueString()
		} else {
			id59 = nil
		}
		typeVar59 := new(shared.OutputClickHouseType)
		if !r.OutputClickHouse.Type.IsUnknown() && !r.OutputClickHouse.Type.IsNull() {
			*typeVar59 = shared.OutputClickHouseType(r.OutputClickHouse.Type.ValueString())
		} else {
			typeVar59 = nil
		}
		pipeline59 := new(string)
		if !r.OutputClickHouse.Pipeline.IsUnknown() && !r.OutputClickHouse.Pipeline.IsNull() {
			*pipeline59 = r.OutputClickHouse.Pipeline.ValueString()
		} else {
			pipeline59 = nil
		}
		systemFields59 := make([]string, 0, len(r.OutputClickHouse.SystemFields))
		for _, systemFieldsItem59 := range r.OutputClickHouse.SystemFields {
			systemFields59 = append(systemFields59, systemFieldsItem59.ValueString())
		}
		environment59 := new(string)
		if !r.OutputClickHouse.Environment.IsUnknown() && !r.OutputClickHouse.Environment.IsNull() {
			*environment59 = r.OutputClickHouse.Environment.ValueString()
		} else {
			environment59 = nil
		}
		streamtags59 := make([]string, 0, len(r.OutputClickHouse.Streamtags))
		for _, streamtagsItem59 := range r.OutputClickHouse.Streamtags {
			streamtags59 = append(streamtags59, streamtagsItem59.ValueString())
		}
		var url16 string
		url16 = r.OutputClickHouse.URL.ValueString()

		authType29 := new(shared.OutputClickHouseAuthenticationType)
		if !r.OutputClickHouse.AuthType.IsUnknown() && !r.OutputClickHouse.AuthType.IsNull() {
			*authType29 = shared.OutputClickHouseAuthenticationType(r.OutputClickHouse.AuthType.ValueString())
		} else {
			authType29 = nil
		}
		var database2 string
		database2 = r.OutputClickHouse.Database.ValueString()

		var tableName string
		tableName = r.OutputClickHouse.TableName.ValueString()

		format18 := new(shared.OutputClickHouseFormat)
		if !r.OutputClickHouse.Format.IsUnknown() && !r.OutputClickHouse.Format.IsNull() {
			*format18 = shared.OutputClickHouseFormat(r.OutputClickHouse.Format.ValueString())
		} else {
			format18 = nil
		}
		mappingType := new(shared.OutputClickHouseMappingType)
		if !r.OutputClickHouse.MappingType.IsUnknown() && !r.OutputClickHouse.MappingType.IsNull() {
			*mappingType = shared.OutputClickHouseMappingType(r.OutputClickHouse.MappingType.ValueString())
		} else {
			mappingType = nil
		}
		asyncInserts := new(bool)
		if !r.OutputClickHouse.AsyncInserts.IsUnknown() && !r.OutputClickHouse.AsyncInserts.IsNull() {
			*asyncInserts = r.OutputClickHouse.AsyncInserts.ValueBool()
		} else {
			asyncInserts = nil
		}
		var tls19 *shared.OutputClickHouseTLSSettingsClientSide
		if r.OutputClickHouse.TLS != nil {
			disabled27 := new(bool)
			if !r.OutputClickHouse.TLS.Disabled.IsUnknown() && !r.OutputClickHouse.TLS.Disabled.IsNull() {
				*disabled27 = r.OutputClickHouse.TLS.Disabled.ValueBool()
			} else {
				disabled27 = nil
			}
			servername16 := new(string)
			if !r.OutputClickHouse.TLS.Servername.IsUnknown() && !r.OutputClickHouse.TLS.Servername.IsNull() {
				*servername16 = r.OutputClickHouse.TLS.Servername.ValueString()
			} else {
				servername16 = nil
			}
			certificateName17 := new(string)
			if !r.OutputClickHouse.TLS.CertificateName.IsUnknown() && !r.OutputClickHouse.TLS.CertificateName.IsNull() {
				*certificateName17 = r.OutputClickHouse.TLS.CertificateName.ValueString()
			} else {
				certificateName17 = nil
			}
			caPath15 := new(string)
			if !r.OutputClickHouse.TLS.CaPath.IsUnknown() && !r.OutputClickHouse.TLS.CaPath.IsNull() {
				*caPath15 = r.OutputClickHouse.TLS.CaPath.ValueString()
			} else {
				caPath15 = nil
			}
			privKeyPath15 := new(string)
			if !r.OutputClickHouse.TLS.PrivKeyPath.IsUnknown() && !r.OutputClickHouse.TLS.PrivKeyPath.IsNull() {
				*privKeyPath15 = r.OutputClickHouse.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath15 = nil
			}
			certPath15 := new(string)
			if !r.OutputClickHouse.TLS.CertPath.IsUnknown() && !r.OutputClickHouse.TLS.CertPath.IsNull() {
				*certPath15 = r.OutputClickHouse.TLS.CertPath.ValueString()
			} else {
				certPath15 = nil
			}
			passphrase15 := new(string)
			if !r.OutputClickHouse.TLS.Passphrase.IsUnknown() && !r.OutputClickHouse.TLS.Passphrase.IsNull() {
				*passphrase15 = r.OutputClickHouse.TLS.Passphrase.ValueString()
			} else {
				passphrase15 = nil
			}
			minVersion15 := new(shared.OutputClickHouseMinimumTLSVersion)
			if !r.OutputClickHouse.TLS.MinVersion.IsUnknown() && !r.OutputClickHouse.TLS.MinVersion.IsNull() {
				*minVersion15 = shared.OutputClickHouseMinimumTLSVersion(r.OutputClickHouse.TLS.MinVersion.ValueString())
			} else {
				minVersion15 = nil
			}
			maxVersion15 := new(shared.OutputClickHouseMaximumTLSVersion)
			if !r.OutputClickHouse.TLS.MaxVersion.IsUnknown() && !r.OutputClickHouse.TLS.MaxVersion.IsNull() {
				*maxVersion15 = shared.OutputClickHouseMaximumTLSVersion(r.OutputClickHouse.TLS.MaxVersion.ValueString())
			} else {
				maxVersion15 = nil
			}
			tls19 = &shared.OutputClickHouseTLSSettingsClientSide{
				Disabled:        disabled27,
				Servername:      servername16,
				CertificateName: certificateName17,
				CaPath:          caPath15,
				PrivKeyPath:     privKeyPath15,
				CertPath:        certPath15,
				Passphrase:      passphrase15,
				MinVersion:      minVersion15,
				MaxVersion:      maxVersion15,
			}
		}
		concurrency28 := new(float64)
		if !r.OutputClickHouse.Concurrency.IsUnknown() && !r.OutputClickHouse.Concurrency.IsNull() {
			*concurrency28 = r.OutputClickHouse.Concurrency.ValueFloat64()
		} else {
			concurrency28 = nil
		}
		maxPayloadSizeKb27 := new(float64)
		if !r.OutputClickHouse.MaxPayloadSizeKB.IsUnknown() && !r.OutputClickHouse.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb27 = r.OutputClickHouse.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb27 = nil
		}
		maxPayloadEvents25 := new(float64)
		if !r.OutputClickHouse.MaxPayloadEvents.IsUnknown() && !r.OutputClickHouse.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents25 = r.OutputClickHouse.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents25 = nil
		}
		compress34 := new(bool)
		if !r.OutputClickHouse.Compress.IsUnknown() && !r.OutputClickHouse.Compress.IsNull() {
			*compress34 = r.OutputClickHouse.Compress.ValueBool()
		} else {
			compress34 = nil
		}
		rejectUnauthorized54 := new(bool)
		if !r.OutputClickHouse.RejectUnauthorized.IsUnknown() && !r.OutputClickHouse.RejectUnauthorized.IsNull() {
			*rejectUnauthorized54 = r.OutputClickHouse.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized54 = nil
		}
		timeoutSec27 := new(float64)
		if !r.OutputClickHouse.TimeoutSec.IsUnknown() && !r.OutputClickHouse.TimeoutSec.IsNull() {
			*timeoutSec27 = r.OutputClickHouse.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec27 = nil
		}
		flushPeriodSec38 := new(float64)
		if !r.OutputClickHouse.FlushPeriodSec.IsUnknown() && !r.OutputClickHouse.FlushPeriodSec.IsNull() {
			*flushPeriodSec38 = r.OutputClickHouse.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec38 = nil
		}
		extraHTTPHeaders25 := make([]shared.OutputClickHouseExtraHTTPHeaders, 0, len(r.OutputClickHouse.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem25 := range r.OutputClickHouse.ExtraHTTPHeaders {
			name39 := new(string)
			if !extraHTTPHeadersItem25.Name.IsUnknown() && !extraHTTPHeadersItem25.Name.IsNull() {
				*name39 = extraHTTPHeadersItem25.Name.ValueString()
			} else {
				name39 = nil
			}
			var value52 string
			value52 = extraHTTPHeadersItem25.Value.ValueString()

			extraHTTPHeaders25 = append(extraHTTPHeaders25, shared.OutputClickHouseExtraHTTPHeaders{
				Name:  name39,
				Value: value52,
			})
		}
		useRoundRobinDns25 := new(bool)
		if !r.OutputClickHouse.UseRoundRobinDNS.IsUnknown() && !r.OutputClickHouse.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns25 = r.OutputClickHouse.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns25 = nil
		}
		failedRequestLoggingMode25 := new(shared.OutputClickHouseFailedRequestLoggingMode)
		if !r.OutputClickHouse.FailedRequestLoggingMode.IsUnknown() && !r.OutputClickHouse.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode25 = shared.OutputClickHouseFailedRequestLoggingMode(r.OutputClickHouse.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode25 = nil
		}
		safeHeaders25 := make([]string, 0, len(r.OutputClickHouse.SafeHeaders))
		for _, safeHeadersItem25 := range r.OutputClickHouse.SafeHeaders {
			safeHeaders25 = append(safeHeaders25, safeHeadersItem25.ValueString())
		}
		responseRetrySettings26 := make([]shared.OutputClickHouseResponseRetrySettings, 0, len(r.OutputClickHouse.ResponseRetrySettings))
		for _, responseRetrySettingsItem26 := range r.OutputClickHouse.ResponseRetrySettings {
			var httpStatus26 float64
			httpStatus26 = responseRetrySettingsItem26.HTTPStatus.ValueFloat64()

			initialBackoff56 := new(float64)
			if !responseRetrySettingsItem26.InitialBackoff.IsUnknown() && !responseRetrySettingsItem26.InitialBackoff.IsNull() {
				*initialBackoff56 = responseRetrySettingsItem26.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff56 = nil
			}
			backoffRate56 := new(float64)
			if !responseRetrySettingsItem26.BackoffRate.IsUnknown() && !responseRetrySettingsItem26.BackoffRate.IsNull() {
				*backoffRate56 = responseRetrySettingsItem26.BackoffRate.ValueFloat64()
			} else {
				backoffRate56 = nil
			}
			maxBackoff52 := new(float64)
			if !responseRetrySettingsItem26.MaxBackoff.IsUnknown() && !responseRetrySettingsItem26.MaxBackoff.IsNull() {
				*maxBackoff52 = responseRetrySettingsItem26.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff52 = nil
			}
			responseRetrySettings26 = append(responseRetrySettings26, shared.OutputClickHouseResponseRetrySettings{
				HTTPStatus:     httpStatus26,
				InitialBackoff: initialBackoff56,
				BackoffRate:    backoffRate56,
				MaxBackoff:     maxBackoff52,
			})
		}
		var timeoutRetrySettings26 *shared.OutputClickHouseTimeoutRetrySettings
		if r.OutputClickHouse.TimeoutRetrySettings != nil {
			timeoutRetry26 := new(bool)
			if !r.OutputClickHouse.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputClickHouse.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry26 = r.OutputClickHouse.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry26 = nil
			}
			initialBackoff57 := new(float64)
			if !r.OutputClickHouse.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputClickHouse.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff57 = r.OutputClickHouse.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff57 = nil
			}
			backoffRate57 := new(float64)
			if !r.OutputClickHouse.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputClickHouse.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate57 = r.OutputClickHouse.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate57 = nil
			}
			maxBackoff53 := new(float64)
			if !r.OutputClickHouse.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputClickHouse.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff53 = r.OutputClickHouse.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff53 = nil
			}
			timeoutRetrySettings26 = &shared.OutputClickHouseTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry26,
				InitialBackoff: initialBackoff57,
				BackoffRate:    backoffRate57,
				MaxBackoff:     maxBackoff53,
			}
		}
		responseHonorRetryAfterHeader26 := new(bool)
		if !r.OutputClickHouse.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputClickHouse.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader26 = r.OutputClickHouse.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader26 = nil
		}
		dumpFormatErrorsToDisk := new(bool)
		if !r.OutputClickHouse.DumpFormatErrorsToDisk.IsUnknown() && !r.OutputClickHouse.DumpFormatErrorsToDisk.IsNull() {
			*dumpFormatErrorsToDisk = r.OutputClickHouse.DumpFormatErrorsToDisk.ValueBool()
		} else {
			dumpFormatErrorsToDisk = nil
		}
		onBackpressure54 := new(shared.OutputClickHouseBackpressureBehavior)
		if !r.OutputClickHouse.OnBackpressure.IsUnknown() && !r.OutputClickHouse.OnBackpressure.IsNull() {
			*onBackpressure54 = shared.OutputClickHouseBackpressureBehavior(r.OutputClickHouse.OnBackpressure.ValueString())
		} else {
			onBackpressure54 = nil
		}
		description59 := new(string)
		if !r.OutputClickHouse.Description.IsUnknown() && !r.OutputClickHouse.Description.IsNull() {
			*description59 = r.OutputClickHouse.Description.ValueString()
		} else {
			description59 = nil
		}
		username9 := new(string)
		if !r.OutputClickHouse.Username.IsUnknown() && !r.OutputClickHouse.Username.IsNull() {
			*username9 = r.OutputClickHouse.Username.ValueString()
		} else {
			username9 = nil
		}
		password9 := new(string)
		if !r.OutputClickHouse.Password.IsUnknown() && !r.OutputClickHouse.Password.IsNull() {
			*password9 = r.OutputClickHouse.Password.ValueString()
		} else {
			password9 = nil
		}
		token14 := new(string)
		if !r.OutputClickHouse.Token.IsUnknown() && !r.OutputClickHouse.Token.IsNull() {
			*token14 = r.OutputClickHouse.Token.ValueString()
		} else {
			token14 = nil
		}
		credentialsSecret12 := new(string)
		if !r.OutputClickHouse.CredentialsSecret.IsUnknown() && !r.OutputClickHouse.CredentialsSecret.IsNull() {
			*credentialsSecret12 = r.OutputClickHouse.CredentialsSecret.ValueString()
		} else {
			credentialsSecret12 = nil
		}
		textSecret25 := new(string)
		if !r.OutputClickHouse.TextSecret.IsUnknown() && !r.OutputClickHouse.TextSecret.IsNull() {
			*textSecret25 = r.OutputClickHouse.TextSecret.ValueString()
		} else {
			textSecret25 = nil
		}
		loginUrl5 := new(string)
		if !r.OutputClickHouse.LoginURL.IsUnknown() && !r.OutputClickHouse.LoginURL.IsNull() {
			*loginUrl5 = r.OutputClickHouse.LoginURL.ValueString()
		} else {
			loginUrl5 = nil
		}
		secretParamName4 := new(string)
		if !r.OutputClickHouse.SecretParamName.IsUnknown() && !r.OutputClickHouse.SecretParamName.IsNull() {
			*secretParamName4 = r.OutputClickHouse.SecretParamName.ValueString()
		} else {
			secretParamName4 = nil
		}
		secret7 := new(string)
		if !r.OutputClickHouse.Secret.IsUnknown() && !r.OutputClickHouse.Secret.IsNull() {
			*secret7 = r.OutputClickHouse.Secret.ValueString()
		} else {
			secret7 = nil
		}
		tokenAttributeName4 := new(string)
		if !r.OutputClickHouse.TokenAttributeName.IsUnknown() && !r.OutputClickHouse.TokenAttributeName.IsNull() {
			*tokenAttributeName4 = r.OutputClickHouse.TokenAttributeName.ValueString()
		} else {
			tokenAttributeName4 = nil
		}
		authHeaderExpr4 := new(string)
		if !r.OutputClickHouse.AuthHeaderExpr.IsUnknown() && !r.OutputClickHouse.AuthHeaderExpr.IsNull() {
			*authHeaderExpr4 = r.OutputClickHouse.AuthHeaderExpr.ValueString()
		} else {
			authHeaderExpr4 = nil
		}
		tokenTimeoutSecs4 := new(float64)
		if !r.OutputClickHouse.TokenTimeoutSecs.IsUnknown() && !r.OutputClickHouse.TokenTimeoutSecs.IsNull() {
			*tokenTimeoutSecs4 = r.OutputClickHouse.TokenTimeoutSecs.ValueFloat64()
		} else {
			tokenTimeoutSecs4 = nil
		}
		oauthParams4 := make([]shared.OutputClickHouseOauthParams, 0, len(r.OutputClickHouse.OauthParams))
		for _, oauthParamsItem4 := range r.OutputClickHouse.OauthParams {
			var name40 string
			name40 = oauthParamsItem4.Name.ValueString()

			var value53 string
			value53 = oauthParamsItem4.Value.ValueString()

			oauthParams4 = append(oauthParams4, shared.OutputClickHouseOauthParams{
				Name:  name40,
				Value: value53,
			})
		}
		oauthHeaders4 := make([]shared.OutputClickHouseOauthHeaders, 0, len(r.OutputClickHouse.OauthHeaders))
		for _, oauthHeadersItem4 := range r.OutputClickHouse.OauthHeaders {
			var name41 string
			name41 = oauthHeadersItem4.Name.ValueString()

			var value54 string
			value54 = oauthHeadersItem4.Value.ValueString()

			oauthHeaders4 = append(oauthHeaders4, shared.OutputClickHouseOauthHeaders{
				Name:  name41,
				Value: value54,
			})
		}
		sqlUsername := new(string)
		if !r.OutputClickHouse.SQLUsername.IsUnknown() && !r.OutputClickHouse.SQLUsername.IsNull() {
			*sqlUsername = r.OutputClickHouse.SQLUsername.ValueString()
		} else {
			sqlUsername = nil
		}
		waitForAsyncInserts := new(bool)
		if !r.OutputClickHouse.WaitForAsyncInserts.IsUnknown() && !r.OutputClickHouse.WaitForAsyncInserts.IsNull() {
			*waitForAsyncInserts = r.OutputClickHouse.WaitForAsyncInserts.ValueBool()
		} else {
			waitForAsyncInserts = nil
		}
		excludeMappingFields := make([]string, 0, len(r.OutputClickHouse.ExcludeMappingFields))
		for _, excludeMappingFieldsItem := range r.OutputClickHouse.ExcludeMappingFields {
			excludeMappingFields = append(excludeMappingFields, excludeMappingFieldsItem.ValueString())
		}
		describeTable := new(string)
		if !r.OutputClickHouse.DescribeTable.IsUnknown() && !r.OutputClickHouse.DescribeTable.IsNull() {
			*describeTable = r.OutputClickHouse.DescribeTable.ValueString()
		} else {
			describeTable = nil
		}
		columnMappings := make([]shared.ColumnMappings, 0, len(r.OutputClickHouse.ColumnMappings))
		for _, columnMappingsItem := range r.OutputClickHouse.ColumnMappings {
			var columnName string
			columnName = columnMappingsItem.ColumnName.ValueString()

			columnType := new(string)
			if !columnMappingsItem.ColumnType.IsUnknown() && !columnMappingsItem.ColumnType.IsNull() {
				*columnType = columnMappingsItem.ColumnType.ValueString()
			} else {
				columnType = nil
			}
			var columnValueExpression string
			columnValueExpression = columnMappingsItem.ColumnValueExpression.ValueString()

			columnMappings = append(columnMappings, shared.ColumnMappings{
				ColumnName:            columnName,
				ColumnType:            columnType,
				ColumnValueExpression: columnValueExpression,
			})
		}
		pqMaxFileSize44 := new(string)
		if !r.OutputClickHouse.PqMaxFileSize.IsUnknown() && !r.OutputClickHouse.PqMaxFileSize.IsNull() {
			*pqMaxFileSize44 = r.OutputClickHouse.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize44 = nil
		}
		pqMaxSize44 := new(string)
		if !r.OutputClickHouse.PqMaxSize.IsUnknown() && !r.OutputClickHouse.PqMaxSize.IsNull() {
			*pqMaxSize44 = r.OutputClickHouse.PqMaxSize.ValueString()
		} else {
			pqMaxSize44 = nil
		}
		pqPath44 := new(string)
		if !r.OutputClickHouse.PqPath.IsUnknown() && !r.OutputClickHouse.PqPath.IsNull() {
			*pqPath44 = r.OutputClickHouse.PqPath.ValueString()
		} else {
			pqPath44 = nil
		}
		pqCompress44 := new(shared.OutputClickHouseCompression)
		if !r.OutputClickHouse.PqCompress.IsUnknown() && !r.OutputClickHouse.PqCompress.IsNull() {
			*pqCompress44 = shared.OutputClickHouseCompression(r.OutputClickHouse.PqCompress.ValueString())
		} else {
			pqCompress44 = nil
		}
		pqOnBackpressure44 := new(shared.OutputClickHouseQueueFullBehavior)
		if !r.OutputClickHouse.PqOnBackpressure.IsUnknown() && !r.OutputClickHouse.PqOnBackpressure.IsNull() {
			*pqOnBackpressure44 = shared.OutputClickHouseQueueFullBehavior(r.OutputClickHouse.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure44 = nil
		}
		pqMode44 := new(shared.OutputClickHouseMode)
		if !r.OutputClickHouse.PqMode.IsUnknown() && !r.OutputClickHouse.PqMode.IsNull() {
			*pqMode44 = shared.OutputClickHouseMode(r.OutputClickHouse.PqMode.ValueString())
		} else {
			pqMode44 = nil
		}
		var pqControls44 *shared.OutputClickHousePqControls
		if r.OutputClickHouse.PqControls != nil {
			pqControls44 = &shared.OutputClickHousePqControls{}
		}
		outputClickHouse = &shared.OutputClickHouse{
			ID:                            id59,
			Type:                          typeVar59,
			Pipeline:                      pipeline59,
			SystemFields:                  systemFields59,
			Environment:                   environment59,
			Streamtags:                    streamtags59,
			URL:                           url16,
			AuthType:                      authType29,
			Database:                      database2,
			TableName:                     tableName,
			Format:                        format18,
			MappingType:                   mappingType,
			AsyncInserts:                  asyncInserts,
			TLS:                           tls19,
			Concurrency:                   concurrency28,
			MaxPayloadSizeKB:              maxPayloadSizeKb27,
			MaxPayloadEvents:              maxPayloadEvents25,
			Compress:                      compress34,
			RejectUnauthorized:            rejectUnauthorized54,
			TimeoutSec:                    timeoutSec27,
			FlushPeriodSec:                flushPeriodSec38,
			ExtraHTTPHeaders:              extraHTTPHeaders25,
			UseRoundRobinDNS:              useRoundRobinDns25,
			FailedRequestLoggingMode:      failedRequestLoggingMode25,
			SafeHeaders:                   safeHeaders25,
			ResponseRetrySettings:         responseRetrySettings26,
			TimeoutRetrySettings:          timeoutRetrySettings26,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader26,
			DumpFormatErrorsToDisk:        dumpFormatErrorsToDisk,
			OnBackpressure:                onBackpressure54,
			Description:                   description59,
			Username:                      username9,
			Password:                      password9,
			Token:                         token14,
			CredentialsSecret:             credentialsSecret12,
			TextSecret:                    textSecret25,
			LoginURL:                      loginUrl5,
			SecretParamName:               secretParamName4,
			Secret:                        secret7,
			TokenAttributeName:            tokenAttributeName4,
			AuthHeaderExpr:                authHeaderExpr4,
			TokenTimeoutSecs:              tokenTimeoutSecs4,
			OauthParams:                   oauthParams4,
			OauthHeaders:                  oauthHeaders4,
			SQLUsername:                   sqlUsername,
			WaitForAsyncInserts:           waitForAsyncInserts,
			ExcludeMappingFields:          excludeMappingFields,
			DescribeTable:                 describeTable,
			ColumnMappings:                columnMappings,
			PqMaxFileSize:                 pqMaxFileSize44,
			PqMaxSize:                     pqMaxSize44,
			PqPath:                        pqPath44,
			PqCompress:                    pqCompress44,
			PqOnBackpressure:              pqOnBackpressure44,
			PqMode:                        pqMode44,
			PqControls:                    pqControls44,
		}
	}
	if outputClickHouse != nil {
		out = shared.Output{
			OutputClickHouse: outputClickHouse,
		}
	}
	var outputXsiam *shared.OutputXsiam
	if r.OutputXsiam != nil {
		var id60 string
		id60 = r.OutputXsiam.ID.ValueString()

		typeVar60 := shared.OutputXsiamType(r.OutputXsiam.Type.ValueString())
		pipeline60 := new(string)
		if !r.OutputXsiam.Pipeline.IsUnknown() && !r.OutputXsiam.Pipeline.IsNull() {
			*pipeline60 = r.OutputXsiam.Pipeline.ValueString()
		} else {
			pipeline60 = nil
		}
		systemFields60 := make([]string, 0, len(r.OutputXsiam.SystemFields))
		for _, systemFieldsItem60 := range r.OutputXsiam.SystemFields {
			systemFields60 = append(systemFields60, systemFieldsItem60.ValueString())
		}
		environment60 := new(string)
		if !r.OutputXsiam.Environment.IsUnknown() && !r.OutputXsiam.Environment.IsNull() {
			*environment60 = r.OutputXsiam.Environment.ValueString()
		} else {
			environment60 = nil
		}
		streamtags60 := make([]string, 0, len(r.OutputXsiam.Streamtags))
		for _, streamtagsItem60 := range r.OutputXsiam.Streamtags {
			streamtags60 = append(streamtags60, streamtagsItem60.ValueString())
		}
		loadBalanced7 := new(bool)
		if !r.OutputXsiam.LoadBalanced.IsUnknown() && !r.OutputXsiam.LoadBalanced.IsNull() {
			*loadBalanced7 = r.OutputXsiam.LoadBalanced.ValueBool()
		} else {
			loadBalanced7 = nil
		}
		concurrency29 := new(float64)
		if !r.OutputXsiam.Concurrency.IsUnknown() && !r.OutputXsiam.Concurrency.IsNull() {
			*concurrency29 = r.OutputXsiam.Concurrency.ValueFloat64()
		} else {
			concurrency29 = nil
		}
		maxPayloadEvents26 := new(float64)
		if !r.OutputXsiam.MaxPayloadEvents.IsUnknown() && !r.OutputXsiam.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents26 = r.OutputXsiam.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents26 = nil
		}
		compress35 := new(bool)
		if !r.OutputXsiam.Compress.IsUnknown() && !r.OutputXsiam.Compress.IsNull() {
			*compress35 = r.OutputXsiam.Compress.ValueBool()
		} else {
			compress35 = nil
		}
		rejectUnauthorized55 := new(bool)
		if !r.OutputXsiam.RejectUnauthorized.IsUnknown() && !r.OutputXsiam.RejectUnauthorized.IsNull() {
			*rejectUnauthorized55 = r.OutputXsiam.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized55 = nil
		}
		timeoutSec28 := new(float64)
		if !r.OutputXsiam.TimeoutSec.IsUnknown() && !r.OutputXsiam.TimeoutSec.IsNull() {
			*timeoutSec28 = r.OutputXsiam.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec28 = nil
		}
		flushPeriodSec39 := new(float64)
		if !r.OutputXsiam.FlushPeriodSec.IsUnknown() && !r.OutputXsiam.FlushPeriodSec.IsNull() {
			*flushPeriodSec39 = r.OutputXsiam.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec39 = nil
		}
		extraHTTPHeaders26 := make([]shared.OutputXsiamExtraHTTPHeaders, 0, len(r.OutputXsiam.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem26 := range r.OutputXsiam.ExtraHTTPHeaders {
			name42 := new(string)
			if !extraHTTPHeadersItem26.Name.IsUnknown() && !extraHTTPHeadersItem26.Name.IsNull() {
				*name42 = extraHTTPHeadersItem26.Name.ValueString()
			} else {
				name42 = nil
			}
			var value55 string
			value55 = extraHTTPHeadersItem26.Value.ValueString()

			extraHTTPHeaders26 = append(extraHTTPHeaders26, shared.OutputXsiamExtraHTTPHeaders{
				Name:  name42,
				Value: value55,
			})
		}
		failedRequestLoggingMode26 := new(shared.OutputXsiamFailedRequestLoggingMode)
		if !r.OutputXsiam.FailedRequestLoggingMode.IsUnknown() && !r.OutputXsiam.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode26 = shared.OutputXsiamFailedRequestLoggingMode(r.OutputXsiam.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode26 = nil
		}
		safeHeaders26 := make([]string, 0, len(r.OutputXsiam.SafeHeaders))
		for _, safeHeadersItem26 := range r.OutputXsiam.SafeHeaders {
			safeHeaders26 = append(safeHeaders26, safeHeadersItem26.ValueString())
		}
		authType30 := new(shared.OutputXsiamAuthenticationMethod)
		if !r.OutputXsiam.AuthType.IsUnknown() && !r.OutputXsiam.AuthType.IsNull() {
			*authType30 = shared.OutputXsiamAuthenticationMethod(r.OutputXsiam.AuthType.ValueString())
		} else {
			authType30 = nil
		}
		responseRetrySettings27 := make([]shared.OutputXsiamResponseRetrySettings, 0, len(r.OutputXsiam.ResponseRetrySettings))
		for _, responseRetrySettingsItem27 := range r.OutputXsiam.ResponseRetrySettings {
			var httpStatus27 float64
			httpStatus27 = responseRetrySettingsItem27.HTTPStatus.ValueFloat64()

			initialBackoff58 := new(float64)
			if !responseRetrySettingsItem27.InitialBackoff.IsUnknown() && !responseRetrySettingsItem27.InitialBackoff.IsNull() {
				*initialBackoff58 = responseRetrySettingsItem27.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff58 = nil
			}
			backoffRate58 := new(float64)
			if !responseRetrySettingsItem27.BackoffRate.IsUnknown() && !responseRetrySettingsItem27.BackoffRate.IsNull() {
				*backoffRate58 = responseRetrySettingsItem27.BackoffRate.ValueFloat64()
			} else {
				backoffRate58 = nil
			}
			maxBackoff54 := new(float64)
			if !responseRetrySettingsItem27.MaxBackoff.IsUnknown() && !responseRetrySettingsItem27.MaxBackoff.IsNull() {
				*maxBackoff54 = responseRetrySettingsItem27.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff54 = nil
			}
			responseRetrySettings27 = append(responseRetrySettings27, shared.OutputXsiamResponseRetrySettings{
				HTTPStatus:     httpStatus27,
				InitialBackoff: initialBackoff58,
				BackoffRate:    backoffRate58,
				MaxBackoff:     maxBackoff54,
			})
		}
		var timeoutRetrySettings27 *shared.OutputXsiamTimeoutRetrySettings
		if r.OutputXsiam.TimeoutRetrySettings != nil {
			timeoutRetry27 := new(bool)
			if !r.OutputXsiam.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputXsiam.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry27 = r.OutputXsiam.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry27 = nil
			}
			initialBackoff59 := new(float64)
			if !r.OutputXsiam.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputXsiam.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff59 = r.OutputXsiam.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff59 = nil
			}
			backoffRate59 := new(float64)
			if !r.OutputXsiam.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputXsiam.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate59 = r.OutputXsiam.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate59 = nil
			}
			maxBackoff55 := new(float64)
			if !r.OutputXsiam.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputXsiam.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff55 = r.OutputXsiam.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff55 = nil
			}
			timeoutRetrySettings27 = &shared.OutputXsiamTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry27,
				InitialBackoff: initialBackoff59,
				BackoffRate:    backoffRate59,
				MaxBackoff:     maxBackoff55,
			}
		}
		responseHonorRetryAfterHeader27 := new(bool)
		if !r.OutputXsiam.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputXsiam.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader27 = r.OutputXsiam.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader27 = nil
		}
		throttleRateReqPerSec1 := new(int64)
		if !r.OutputXsiam.ThrottleRateReqPerSec.IsUnknown() && !r.OutputXsiam.ThrottleRateReqPerSec.IsNull() {
			*throttleRateReqPerSec1 = r.OutputXsiam.ThrottleRateReqPerSec.ValueInt64()
		} else {
			throttleRateReqPerSec1 = nil
		}
		onBackpressure55 := new(shared.OutputXsiamBackpressureBehavior)
		if !r.OutputXsiam.OnBackpressure.IsUnknown() && !r.OutputXsiam.OnBackpressure.IsNull() {
			*onBackpressure55 = shared.OutputXsiamBackpressureBehavior(r.OutputXsiam.OnBackpressure.ValueString())
		} else {
			onBackpressure55 = nil
		}
		description60 := new(string)
		if !r.OutputXsiam.Description.IsUnknown() && !r.OutputXsiam.Description.IsNull() {
			*description60 = r.OutputXsiam.Description.ValueString()
		} else {
			description60 = nil
		}
		url17 := new(string)
		if !r.OutputXsiam.URL.IsUnknown() && !r.OutputXsiam.URL.IsNull() {
			*url17 = r.OutputXsiam.URL.ValueString()
		} else {
			url17 = nil
		}
		useRoundRobinDns26 := new(bool)
		if !r.OutputXsiam.UseRoundRobinDNS.IsUnknown() && !r.OutputXsiam.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns26 = r.OutputXsiam.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns26 = nil
		}
		excludeSelf7 := new(bool)
		if !r.OutputXsiam.ExcludeSelf.IsUnknown() && !r.OutputXsiam.ExcludeSelf.IsNull() {
			*excludeSelf7 = r.OutputXsiam.ExcludeSelf.ValueBool()
		} else {
			excludeSelf7 = nil
		}
		urls4 := make([]shared.OutputXsiamUrls, 0, len(r.OutputXsiam.Urls))
		for _, urlsItem4 := range r.OutputXsiam.Urls {
			var url18 interface{}
			_ = json.Unmarshal([]byte(urlsItem4.URL.ValueString()), &url18)
			weight7 := new(float64)
			if !urlsItem4.Weight.IsUnknown() && !urlsItem4.Weight.IsNull() {
				*weight7 = urlsItem4.Weight.ValueFloat64()
			} else {
				weight7 = nil
			}
			urls4 = append(urls4, shared.OutputXsiamUrls{
				URL:    url18,
				Weight: weight7,
			})
		}
		dnsResolvePeriodSec11 := new(float64)
		if !r.OutputXsiam.DNSResolvePeriodSec.IsUnknown() && !r.OutputXsiam.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec11 = r.OutputXsiam.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec11 = nil
		}
		loadBalanceStatsPeriodSec7 := new(float64)
		if !r.OutputXsiam.LoadBalanceStatsPeriodSec.IsUnknown() && !r.OutputXsiam.LoadBalanceStatsPeriodSec.IsNull() {
			*loadBalanceStatsPeriodSec7 = r.OutputXsiam.LoadBalanceStatsPeriodSec.ValueFloat64()
		} else {
			loadBalanceStatsPeriodSec7 = nil
		}
		token15 := new(string)
		if !r.OutputXsiam.Token.IsUnknown() && !r.OutputXsiam.Token.IsNull() {
			*token15 = r.OutputXsiam.Token.ValueString()
		} else {
			token15 = nil
		}
		textSecret26 := new(string)
		if !r.OutputXsiam.TextSecret.IsUnknown() && !r.OutputXsiam.TextSecret.IsNull() {
			*textSecret26 = r.OutputXsiam.TextSecret.ValueString()
		} else {
			textSecret26 = nil
		}
		pqMaxFileSize45 := new(string)
		if !r.OutputXsiam.PqMaxFileSize.IsUnknown() && !r.OutputXsiam.PqMaxFileSize.IsNull() {
			*pqMaxFileSize45 = r.OutputXsiam.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize45 = nil
		}
		pqMaxSize45 := new(string)
		if !r.OutputXsiam.PqMaxSize.IsUnknown() && !r.OutputXsiam.PqMaxSize.IsNull() {
			*pqMaxSize45 = r.OutputXsiam.PqMaxSize.ValueString()
		} else {
			pqMaxSize45 = nil
		}
		pqPath45 := new(string)
		if !r.OutputXsiam.PqPath.IsUnknown() && !r.OutputXsiam.PqPath.IsNull() {
			*pqPath45 = r.OutputXsiam.PqPath.ValueString()
		} else {
			pqPath45 = nil
		}
		pqCompress45 := new(shared.OutputXsiamCompression)
		if !r.OutputXsiam.PqCompress.IsUnknown() && !r.OutputXsiam.PqCompress.IsNull() {
			*pqCompress45 = shared.OutputXsiamCompression(r.OutputXsiam.PqCompress.ValueString())
		} else {
			pqCompress45 = nil
		}
		pqOnBackpressure45 := new(shared.OutputXsiamQueueFullBehavior)
		if !r.OutputXsiam.PqOnBackpressure.IsUnknown() && !r.OutputXsiam.PqOnBackpressure.IsNull() {
			*pqOnBackpressure45 = shared.OutputXsiamQueueFullBehavior(r.OutputXsiam.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure45 = nil
		}
		pqMode45 := new(shared.OutputXsiamMode)
		if !r.OutputXsiam.PqMode.IsUnknown() && !r.OutputXsiam.PqMode.IsNull() {
			*pqMode45 = shared.OutputXsiamMode(r.OutputXsiam.PqMode.ValueString())
		} else {
			pqMode45 = nil
		}
		var pqControls45 *shared.OutputXsiamPqControls
		if r.OutputXsiam.PqControls != nil {
			pqControls45 = &shared.OutputXsiamPqControls{}
		}
		outputXsiam = &shared.OutputXsiam{
			ID:                            id60,
			Type:                          typeVar60,
			Pipeline:                      pipeline60,
			SystemFields:                  systemFields60,
			Environment:                   environment60,
			Streamtags:                    streamtags60,
			LoadBalanced:                  loadBalanced7,
			Concurrency:                   concurrency29,
			MaxPayloadEvents:              maxPayloadEvents26,
			Compress:                      compress35,
			RejectUnauthorized:            rejectUnauthorized55,
			TimeoutSec:                    timeoutSec28,
			FlushPeriodSec:                flushPeriodSec39,
			ExtraHTTPHeaders:              extraHTTPHeaders26,
			FailedRequestLoggingMode:      failedRequestLoggingMode26,
			SafeHeaders:                   safeHeaders26,
			AuthType:                      authType30,
			ResponseRetrySettings:         responseRetrySettings27,
			TimeoutRetrySettings:          timeoutRetrySettings27,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader27,
			ThrottleRateReqPerSec:         throttleRateReqPerSec1,
			OnBackpressure:                onBackpressure55,
			Description:                   description60,
			URL:                           url17,
			UseRoundRobinDNS:              useRoundRobinDns26,
			ExcludeSelf:                   excludeSelf7,
			Urls:                          urls4,
			DNSResolvePeriodSec:           dnsResolvePeriodSec11,
			LoadBalanceStatsPeriodSec:     loadBalanceStatsPeriodSec7,
			Token:                         token15,
			TextSecret:                    textSecret26,
			PqMaxFileSize:                 pqMaxFileSize45,
			PqMaxSize:                     pqMaxSize45,
			PqPath:                        pqPath45,
			PqCompress:                    pqCompress45,
			PqOnBackpressure:              pqOnBackpressure45,
			PqMode:                        pqMode45,
			PqControls:                    pqControls45,
		}
	}
	if outputXsiam != nil {
		out = shared.Output{
			OutputXsiam: outputXsiam,
		}
	}
	var outputNetflow *shared.OutputNetflow
	if r.OutputNetflow != nil {
		id61 := new(string)
		if !r.OutputNetflow.ID.IsUnknown() && !r.OutputNetflow.ID.IsNull() {
			*id61 = r.OutputNetflow.ID.ValueString()
		} else {
			id61 = nil
		}
		typeVar61 := shared.OutputNetflowType(r.OutputNetflow.Type.ValueString())
		pipeline61 := new(string)
		if !r.OutputNetflow.Pipeline.IsUnknown() && !r.OutputNetflow.Pipeline.IsNull() {
			*pipeline61 = r.OutputNetflow.Pipeline.ValueString()
		} else {
			pipeline61 = nil
		}
		systemFields61 := make([]string, 0, len(r.OutputNetflow.SystemFields))
		for _, systemFieldsItem61 := range r.OutputNetflow.SystemFields {
			systemFields61 = append(systemFields61, systemFieldsItem61.ValueString())
		}
		environment61 := new(string)
		if !r.OutputNetflow.Environment.IsUnknown() && !r.OutputNetflow.Environment.IsNull() {
			*environment61 = r.OutputNetflow.Environment.ValueString()
		} else {
			environment61 = nil
		}
		streamtags61 := make([]string, 0, len(r.OutputNetflow.Streamtags))
		for _, streamtagsItem61 := range r.OutputNetflow.Streamtags {
			streamtags61 = append(streamtags61, streamtagsItem61.ValueString())
		}
		hosts4 := make([]shared.OutputNetflowHosts, 0, len(r.OutputNetflow.Hosts))
		for _, hostsItem4 := range r.OutputNetflow.Hosts {
			var host12 string
			host12 = hostsItem4.Host.ValueString()

			port11 := new(float64)
			if !hostsItem4.Port.IsUnknown() && !hostsItem4.Port.IsNull() {
				*port11 = hostsItem4.Port.ValueFloat64()
			} else {
				port11 = nil
			}
			hosts4 = append(hosts4, shared.OutputNetflowHosts{
				Host: host12,
				Port: port11,
			})
		}
		dnsResolvePeriodSec12 := new(float64)
		if !r.OutputNetflow.DNSResolvePeriodSec.IsUnknown() && !r.OutputNetflow.DNSResolvePeriodSec.IsNull() {
			*dnsResolvePeriodSec12 = r.OutputNetflow.DNSResolvePeriodSec.ValueFloat64()
		} else {
			dnsResolvePeriodSec12 = nil
		}
		description61 := new(string)
		if !r.OutputNetflow.Description.IsUnknown() && !r.OutputNetflow.Description.IsNull() {
			*description61 = r.OutputNetflow.Description.ValueString()
		} else {
			description61 = nil
		}
		outputNetflow = &shared.OutputNetflow{
			ID:                  id61,
			Type:                typeVar61,
			Pipeline:            pipeline61,
			SystemFields:        systemFields61,
			Environment:         environment61,
			Streamtags:          streamtags61,
			Hosts:               hosts4,
			DNSResolvePeriodSec: dnsResolvePeriodSec12,
			Description:         description61,
		}
	}
	if outputNetflow != nil {
		out = shared.Output{
			OutputNetflow: outputNetflow,
		}
	}
	var outputDynatraceHTTP *shared.OutputDynatraceHTTP
	if r.OutputDynatraceHTTP != nil {
		id62 := new(string)
		if !r.OutputDynatraceHTTP.ID.IsUnknown() && !r.OutputDynatraceHTTP.ID.IsNull() {
			*id62 = r.OutputDynatraceHTTP.ID.ValueString()
		} else {
			id62 = nil
		}
		typeVar62 := new(shared.OutputDynatraceHTTPType)
		if !r.OutputDynatraceHTTP.Type.IsUnknown() && !r.OutputDynatraceHTTP.Type.IsNull() {
			*typeVar62 = shared.OutputDynatraceHTTPType(r.OutputDynatraceHTTP.Type.ValueString())
		} else {
			typeVar62 = nil
		}
		pipeline62 := new(string)
		if !r.OutputDynatraceHTTP.Pipeline.IsUnknown() && !r.OutputDynatraceHTTP.Pipeline.IsNull() {
			*pipeline62 = r.OutputDynatraceHTTP.Pipeline.ValueString()
		} else {
			pipeline62 = nil
		}
		systemFields62 := make([]string, 0, len(r.OutputDynatraceHTTP.SystemFields))
		for _, systemFieldsItem62 := range r.OutputDynatraceHTTP.SystemFields {
			systemFields62 = append(systemFields62, systemFieldsItem62.ValueString())
		}
		environment62 := new(string)
		if !r.OutputDynatraceHTTP.Environment.IsUnknown() && !r.OutputDynatraceHTTP.Environment.IsNull() {
			*environment62 = r.OutputDynatraceHTTP.Environment.ValueString()
		} else {
			environment62 = nil
		}
		streamtags62 := make([]string, 0, len(r.OutputDynatraceHTTP.Streamtags))
		for _, streamtagsItem62 := range r.OutputDynatraceHTTP.Streamtags {
			streamtags62 = append(streamtags62, streamtagsItem62.ValueString())
		}
		method1 := new(shared.OutputDynatraceHTTPMethod)
		if !r.OutputDynatraceHTTP.Method.IsUnknown() && !r.OutputDynatraceHTTP.Method.IsNull() {
			*method1 = shared.OutputDynatraceHTTPMethod(r.OutputDynatraceHTTP.Method.ValueString())
		} else {
			method1 = nil
		}
		keepAlive5 := new(bool)
		if !r.OutputDynatraceHTTP.KeepAlive.IsUnknown() && !r.OutputDynatraceHTTP.KeepAlive.IsNull() {
			*keepAlive5 = r.OutputDynatraceHTTP.KeepAlive.ValueBool()
		} else {
			keepAlive5 = nil
		}
		concurrency30 := new(float64)
		if !r.OutputDynatraceHTTP.Concurrency.IsUnknown() && !r.OutputDynatraceHTTP.Concurrency.IsNull() {
			*concurrency30 = r.OutputDynatraceHTTP.Concurrency.ValueFloat64()
		} else {
			concurrency30 = nil
		}
		maxPayloadSizeKb28 := new(float64)
		if !r.OutputDynatraceHTTP.MaxPayloadSizeKB.IsUnknown() && !r.OutputDynatraceHTTP.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb28 = r.OutputDynatraceHTTP.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb28 = nil
		}
		maxPayloadEvents27 := new(float64)
		if !r.OutputDynatraceHTTP.MaxPayloadEvents.IsUnknown() && !r.OutputDynatraceHTTP.MaxPayloadEvents.IsNull() {
			*maxPayloadEvents27 = r.OutputDynatraceHTTP.MaxPayloadEvents.ValueFloat64()
		} else {
			maxPayloadEvents27 = nil
		}
		compress36 := new(bool)
		if !r.OutputDynatraceHTTP.Compress.IsUnknown() && !r.OutputDynatraceHTTP.Compress.IsNull() {
			*compress36 = r.OutputDynatraceHTTP.Compress.ValueBool()
		} else {
			compress36 = nil
		}
		rejectUnauthorized56 := new(bool)
		if !r.OutputDynatraceHTTP.RejectUnauthorized.IsUnknown() && !r.OutputDynatraceHTTP.RejectUnauthorized.IsNull() {
			*rejectUnauthorized56 = r.OutputDynatraceHTTP.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized56 = nil
		}
		timeoutSec29 := new(float64)
		if !r.OutputDynatraceHTTP.TimeoutSec.IsUnknown() && !r.OutputDynatraceHTTP.TimeoutSec.IsNull() {
			*timeoutSec29 = r.OutputDynatraceHTTP.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec29 = nil
		}
		flushPeriodSec40 := new(float64)
		if !r.OutputDynatraceHTTP.FlushPeriodSec.IsUnknown() && !r.OutputDynatraceHTTP.FlushPeriodSec.IsNull() {
			*flushPeriodSec40 = r.OutputDynatraceHTTP.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec40 = nil
		}
		extraHTTPHeaders27 := make([]shared.OutputDynatraceHTTPExtraHTTPHeaders, 0, len(r.OutputDynatraceHTTP.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem27 := range r.OutputDynatraceHTTP.ExtraHTTPHeaders {
			name43 := new(string)
			if !extraHTTPHeadersItem27.Name.IsUnknown() && !extraHTTPHeadersItem27.Name.IsNull() {
				*name43 = extraHTTPHeadersItem27.Name.ValueString()
			} else {
				name43 = nil
			}
			var value56 string
			value56 = extraHTTPHeadersItem27.Value.ValueString()

			extraHTTPHeaders27 = append(extraHTTPHeaders27, shared.OutputDynatraceHTTPExtraHTTPHeaders{
				Name:  name43,
				Value: value56,
			})
		}
		useRoundRobinDns27 := new(bool)
		if !r.OutputDynatraceHTTP.UseRoundRobinDNS.IsUnknown() && !r.OutputDynatraceHTTP.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns27 = r.OutputDynatraceHTTP.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns27 = nil
		}
		failedRequestLoggingMode27 := new(shared.OutputDynatraceHTTPFailedRequestLoggingMode)
		if !r.OutputDynatraceHTTP.FailedRequestLoggingMode.IsUnknown() && !r.OutputDynatraceHTTP.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode27 = shared.OutputDynatraceHTTPFailedRequestLoggingMode(r.OutputDynatraceHTTP.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode27 = nil
		}
		safeHeaders27 := make([]string, 0, len(r.OutputDynatraceHTTP.SafeHeaders))
		for _, safeHeadersItem27 := range r.OutputDynatraceHTTP.SafeHeaders {
			safeHeaders27 = append(safeHeaders27, safeHeadersItem27.ValueString())
		}
		responseRetrySettings28 := make([]shared.OutputDynatraceHTTPResponseRetrySettings, 0, len(r.OutputDynatraceHTTP.ResponseRetrySettings))
		for _, responseRetrySettingsItem28 := range r.OutputDynatraceHTTP.ResponseRetrySettings {
			var httpStatus28 float64
			httpStatus28 = responseRetrySettingsItem28.HTTPStatus.ValueFloat64()

			initialBackoff60 := new(float64)
			if !responseRetrySettingsItem28.InitialBackoff.IsUnknown() && !responseRetrySettingsItem28.InitialBackoff.IsNull() {
				*initialBackoff60 = responseRetrySettingsItem28.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff60 = nil
			}
			backoffRate60 := new(float64)
			if !responseRetrySettingsItem28.BackoffRate.IsUnknown() && !responseRetrySettingsItem28.BackoffRate.IsNull() {
				*backoffRate60 = responseRetrySettingsItem28.BackoffRate.ValueFloat64()
			} else {
				backoffRate60 = nil
			}
			maxBackoff56 := new(float64)
			if !responseRetrySettingsItem28.MaxBackoff.IsUnknown() && !responseRetrySettingsItem28.MaxBackoff.IsNull() {
				*maxBackoff56 = responseRetrySettingsItem28.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff56 = nil
			}
			responseRetrySettings28 = append(responseRetrySettings28, shared.OutputDynatraceHTTPResponseRetrySettings{
				HTTPStatus:     httpStatus28,
				InitialBackoff: initialBackoff60,
				BackoffRate:    backoffRate60,
				MaxBackoff:     maxBackoff56,
			})
		}
		var timeoutRetrySettings28 *shared.OutputDynatraceHTTPTimeoutRetrySettings
		if r.OutputDynatraceHTTP.TimeoutRetrySettings != nil {
			timeoutRetry28 := new(bool)
			if !r.OutputDynatraceHTTP.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputDynatraceHTTP.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry28 = r.OutputDynatraceHTTP.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry28 = nil
			}
			initialBackoff61 := new(float64)
			if !r.OutputDynatraceHTTP.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputDynatraceHTTP.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff61 = r.OutputDynatraceHTTP.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff61 = nil
			}
			backoffRate61 := new(float64)
			if !r.OutputDynatraceHTTP.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputDynatraceHTTP.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate61 = r.OutputDynatraceHTTP.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate61 = nil
			}
			maxBackoff57 := new(float64)
			if !r.OutputDynatraceHTTP.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputDynatraceHTTP.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff57 = r.OutputDynatraceHTTP.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff57 = nil
			}
			timeoutRetrySettings28 = &shared.OutputDynatraceHTTPTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry28,
				InitialBackoff: initialBackoff61,
				BackoffRate:    backoffRate61,
				MaxBackoff:     maxBackoff57,
			}
		}
		responseHonorRetryAfterHeader28 := new(bool)
		if !r.OutputDynatraceHTTP.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputDynatraceHTTP.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader28 = r.OutputDynatraceHTTP.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader28 = nil
		}
		onBackpressure56 := new(shared.OutputDynatraceHTTPBackpressureBehavior)
		if !r.OutputDynatraceHTTP.OnBackpressure.IsUnknown() && !r.OutputDynatraceHTTP.OnBackpressure.IsNull() {
			*onBackpressure56 = shared.OutputDynatraceHTTPBackpressureBehavior(r.OutputDynatraceHTTP.OnBackpressure.ValueString())
		} else {
			onBackpressure56 = nil
		}
		authType31 := new(shared.OutputDynatraceHTTPAuthenticationType)
		if !r.OutputDynatraceHTTP.AuthType.IsUnknown() && !r.OutputDynatraceHTTP.AuthType.IsNull() {
			*authType31 = shared.OutputDynatraceHTTPAuthenticationType(r.OutputDynatraceHTTP.AuthType.ValueString())
		} else {
			authType31 = nil
		}
		format19 := new(shared.OutputDynatraceHTTPFormat)
		if !r.OutputDynatraceHTTP.Format.IsUnknown() && !r.OutputDynatraceHTTP.Format.IsNull() {
			*format19 = shared.OutputDynatraceHTTPFormat(r.OutputDynatraceHTTP.Format.ValueString())
		} else {
			format19 = nil
		}
		endpoint14 := new(shared.Endpoint)
		if !r.OutputDynatraceHTTP.Endpoint.IsUnknown() && !r.OutputDynatraceHTTP.Endpoint.IsNull() {
			*endpoint14 = shared.Endpoint(r.OutputDynatraceHTTP.Endpoint.ValueString())
		} else {
			endpoint14 = nil
		}
		telemetryType := new(shared.TelemetryType)
		if !r.OutputDynatraceHTTP.TelemetryType.IsUnknown() && !r.OutputDynatraceHTTP.TelemetryType.IsNull() {
			*telemetryType = shared.TelemetryType(r.OutputDynatraceHTTP.TelemetryType.ValueString())
		} else {
			telemetryType = nil
		}
		totalMemoryLimitKb9 := new(float64)
		if !r.OutputDynatraceHTTP.TotalMemoryLimitKB.IsUnknown() && !r.OutputDynatraceHTTP.TotalMemoryLimitKB.IsNull() {
			*totalMemoryLimitKb9 = r.OutputDynatraceHTTP.TotalMemoryLimitKB.ValueFloat64()
		} else {
			totalMemoryLimitKb9 = nil
		}
		description62 := new(string)
		if !r.OutputDynatraceHTTP.Description.IsUnknown() && !r.OutputDynatraceHTTP.Description.IsNull() {
			*description62 = r.OutputDynatraceHTTP.Description.ValueString()
		} else {
			description62 = nil
		}
		pqMaxFileSize46 := new(string)
		if !r.OutputDynatraceHTTP.PqMaxFileSize.IsUnknown() && !r.OutputDynatraceHTTP.PqMaxFileSize.IsNull() {
			*pqMaxFileSize46 = r.OutputDynatraceHTTP.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize46 = nil
		}
		pqMaxSize46 := new(string)
		if !r.OutputDynatraceHTTP.PqMaxSize.IsUnknown() && !r.OutputDynatraceHTTP.PqMaxSize.IsNull() {
			*pqMaxSize46 = r.OutputDynatraceHTTP.PqMaxSize.ValueString()
		} else {
			pqMaxSize46 = nil
		}
		pqPath46 := new(string)
		if !r.OutputDynatraceHTTP.PqPath.IsUnknown() && !r.OutputDynatraceHTTP.PqPath.IsNull() {
			*pqPath46 = r.OutputDynatraceHTTP.PqPath.ValueString()
		} else {
			pqPath46 = nil
		}
		pqCompress46 := new(shared.OutputDynatraceHTTPCompression)
		if !r.OutputDynatraceHTTP.PqCompress.IsUnknown() && !r.OutputDynatraceHTTP.PqCompress.IsNull() {
			*pqCompress46 = shared.OutputDynatraceHTTPCompression(r.OutputDynatraceHTTP.PqCompress.ValueString())
		} else {
			pqCompress46 = nil
		}
		pqOnBackpressure46 := new(shared.OutputDynatraceHTTPQueueFullBehavior)
		if !r.OutputDynatraceHTTP.PqOnBackpressure.IsUnknown() && !r.OutputDynatraceHTTP.PqOnBackpressure.IsNull() {
			*pqOnBackpressure46 = shared.OutputDynatraceHTTPQueueFullBehavior(r.OutputDynatraceHTTP.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure46 = nil
		}
		pqMode46 := new(shared.OutputDynatraceHTTPMode)
		if !r.OutputDynatraceHTTP.PqMode.IsUnknown() && !r.OutputDynatraceHTTP.PqMode.IsNull() {
			*pqMode46 = shared.OutputDynatraceHTTPMode(r.OutputDynatraceHTTP.PqMode.ValueString())
		} else {
			pqMode46 = nil
		}
		var pqControls46 *shared.OutputDynatraceHTTPPqControls
		if r.OutputDynatraceHTTP.PqControls != nil {
			pqControls46 = &shared.OutputDynatraceHTTPPqControls{}
		}
		token16 := new(string)
		if !r.OutputDynatraceHTTP.Token.IsUnknown() && !r.OutputDynatraceHTTP.Token.IsNull() {
			*token16 = r.OutputDynatraceHTTP.Token.ValueString()
		} else {
			token16 = nil
		}
		textSecret27 := new(string)
		if !r.OutputDynatraceHTTP.TextSecret.IsUnknown() && !r.OutputDynatraceHTTP.TextSecret.IsNull() {
			*textSecret27 = r.OutputDynatraceHTTP.TextSecret.ValueString()
		} else {
			textSecret27 = nil
		}
		environmentID := new(string)
		if !r.OutputDynatraceHTTP.EnvironmentID.IsUnknown() && !r.OutputDynatraceHTTP.EnvironmentID.IsNull() {
			*environmentID = r.OutputDynatraceHTTP.EnvironmentID.ValueString()
		} else {
			environmentID = nil
		}
		activeGateDomain := new(string)
		if !r.OutputDynatraceHTTP.ActiveGateDomain.IsUnknown() && !r.OutputDynatraceHTTP.ActiveGateDomain.IsNull() {
			*activeGateDomain = r.OutputDynatraceHTTP.ActiveGateDomain.ValueString()
		} else {
			activeGateDomain = nil
		}
		url19 := new(string)
		if !r.OutputDynatraceHTTP.URL.IsUnknown() && !r.OutputDynatraceHTTP.URL.IsNull() {
			*url19 = r.OutputDynatraceHTTP.URL.ValueString()
		} else {
			url19 = nil
		}
		outputDynatraceHTTP = &shared.OutputDynatraceHTTP{
			ID:                            id62,
			Type:                          typeVar62,
			Pipeline:                      pipeline62,
			SystemFields:                  systemFields62,
			Environment:                   environment62,
			Streamtags:                    streamtags62,
			Method:                        method1,
			KeepAlive:                     keepAlive5,
			Concurrency:                   concurrency30,
			MaxPayloadSizeKB:              maxPayloadSizeKb28,
			MaxPayloadEvents:              maxPayloadEvents27,
			Compress:                      compress36,
			RejectUnauthorized:            rejectUnauthorized56,
			TimeoutSec:                    timeoutSec29,
			FlushPeriodSec:                flushPeriodSec40,
			ExtraHTTPHeaders:              extraHTTPHeaders27,
			UseRoundRobinDNS:              useRoundRobinDns27,
			FailedRequestLoggingMode:      failedRequestLoggingMode27,
			SafeHeaders:                   safeHeaders27,
			ResponseRetrySettings:         responseRetrySettings28,
			TimeoutRetrySettings:          timeoutRetrySettings28,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader28,
			OnBackpressure:                onBackpressure56,
			AuthType:                      authType31,
			Format:                        format19,
			Endpoint:                      endpoint14,
			TelemetryType:                 telemetryType,
			TotalMemoryLimitKB:            totalMemoryLimitKb9,
			Description:                   description62,
			PqMaxFileSize:                 pqMaxFileSize46,
			PqMaxSize:                     pqMaxSize46,
			PqPath:                        pqPath46,
			PqCompress:                    pqCompress46,
			PqOnBackpressure:              pqOnBackpressure46,
			PqMode:                        pqMode46,
			PqControls:                    pqControls46,
			Token:                         token16,
			TextSecret:                    textSecret27,
			EnvironmentID:                 environmentID,
			ActiveGateDomain:              activeGateDomain,
			URL:                           url19,
		}
	}
	if outputDynatraceHTTP != nil {
		out = shared.Output{
			OutputDynatraceHTTP: outputDynatraceHTTP,
		}
	}
	var outputDynatraceOtlp *shared.OutputDynatraceOtlp
	if r.OutputDynatraceOtlp != nil {
		id63 := new(string)
		if !r.OutputDynatraceOtlp.ID.IsUnknown() && !r.OutputDynatraceOtlp.ID.IsNull() {
			*id63 = r.OutputDynatraceOtlp.ID.ValueString()
		} else {
			id63 = nil
		}
		typeVar63 := new(shared.OutputDynatraceOtlpType)
		if !r.OutputDynatraceOtlp.Type.IsUnknown() && !r.OutputDynatraceOtlp.Type.IsNull() {
			*typeVar63 = shared.OutputDynatraceOtlpType(r.OutputDynatraceOtlp.Type.ValueString())
		} else {
			typeVar63 = nil
		}
		pipeline63 := new(string)
		if !r.OutputDynatraceOtlp.Pipeline.IsUnknown() && !r.OutputDynatraceOtlp.Pipeline.IsNull() {
			*pipeline63 = r.OutputDynatraceOtlp.Pipeline.ValueString()
		} else {
			pipeline63 = nil
		}
		systemFields63 := make([]string, 0, len(r.OutputDynatraceOtlp.SystemFields))
		for _, systemFieldsItem63 := range r.OutputDynatraceOtlp.SystemFields {
			systemFields63 = append(systemFields63, systemFieldsItem63.ValueString())
		}
		environment63 := new(string)
		if !r.OutputDynatraceOtlp.Environment.IsUnknown() && !r.OutputDynatraceOtlp.Environment.IsNull() {
			*environment63 = r.OutputDynatraceOtlp.Environment.ValueString()
		} else {
			environment63 = nil
		}
		streamtags63 := make([]string, 0, len(r.OutputDynatraceOtlp.Streamtags))
		for _, streamtagsItem63 := range r.OutputDynatraceOtlp.Streamtags {
			streamtags63 = append(streamtags63, streamtagsItem63.ValueString())
		}
		protocol6 := new(shared.OutputDynatraceOtlpProtocol)
		if !r.OutputDynatraceOtlp.Protocol.IsUnknown() && !r.OutputDynatraceOtlp.Protocol.IsNull() {
			*protocol6 = shared.OutputDynatraceOtlpProtocol(r.OutputDynatraceOtlp.Protocol.ValueString())
		} else {
			protocol6 = nil
		}
		endpoint15 := new(string)
		if !r.OutputDynatraceOtlp.Endpoint.IsUnknown() && !r.OutputDynatraceOtlp.Endpoint.IsNull() {
			*endpoint15 = r.OutputDynatraceOtlp.Endpoint.ValueString()
		} else {
			endpoint15 = nil
		}
		otlpVersion2 := new(shared.OutputDynatraceOTLPOTLPVersion)
		if !r.OutputDynatraceOtlp.OtlpVersion.IsUnknown() && !r.OutputDynatraceOtlp.OtlpVersion.IsNull() {
			*otlpVersion2 = shared.OutputDynatraceOTLPOTLPVersion(r.OutputDynatraceOtlp.OtlpVersion.ValueString())
		} else {
			otlpVersion2 = nil
		}
		compress37 := new(shared.OutputDynatraceOtlpCompression)
		if !r.OutputDynatraceOtlp.Compress.IsUnknown() && !r.OutputDynatraceOtlp.Compress.IsNull() {
			*compress37 = shared.OutputDynatraceOtlpCompression(r.OutputDynatraceOtlp.Compress.ValueString())
		} else {
			compress37 = nil
		}
		httpCompress2 := new(shared.OutputDynatraceOtlpHTTPCompressCompression)
		if !r.OutputDynatraceOtlp.HTTPCompress.IsUnknown() && !r.OutputDynatraceOtlp.HTTPCompress.IsNull() {
			*httpCompress2 = shared.OutputDynatraceOtlpHTTPCompressCompression(r.OutputDynatraceOtlp.HTTPCompress.ValueString())
		} else {
			httpCompress2 = nil
		}
		httpTracesEndpointOverride2 := new(string)
		if !r.OutputDynatraceOtlp.HTTPTracesEndpointOverride.IsUnknown() && !r.OutputDynatraceOtlp.HTTPTracesEndpointOverride.IsNull() {
			*httpTracesEndpointOverride2 = r.OutputDynatraceOtlp.HTTPTracesEndpointOverride.ValueString()
		} else {
			httpTracesEndpointOverride2 = nil
		}
		httpMetricsEndpointOverride2 := new(string)
		if !r.OutputDynatraceOtlp.HTTPMetricsEndpointOverride.IsUnknown() && !r.OutputDynatraceOtlp.HTTPMetricsEndpointOverride.IsNull() {
			*httpMetricsEndpointOverride2 = r.OutputDynatraceOtlp.HTTPMetricsEndpointOverride.ValueString()
		} else {
			httpMetricsEndpointOverride2 = nil
		}
		httpLogsEndpointOverride2 := new(string)
		if !r.OutputDynatraceOtlp.HTTPLogsEndpointOverride.IsUnknown() && !r.OutputDynatraceOtlp.HTTPLogsEndpointOverride.IsNull() {
			*httpLogsEndpointOverride2 = r.OutputDynatraceOtlp.HTTPLogsEndpointOverride.ValueString()
		} else {
			httpLogsEndpointOverride2 = nil
		}
		metadata3 := make([]shared.OutputDynatraceOtlpMetadata, 0, len(r.OutputDynatraceOtlp.Metadata))
		for _, metadataItem3 := range r.OutputDynatraceOtlp.Metadata {
			key11 := new(string)
			if !metadataItem3.Key.IsUnknown() && !metadataItem3.Key.IsNull() {
				*key11 = metadataItem3.Key.ValueString()
			} else {
				key11 = nil
			}
			var value57 string
			value57 = metadataItem3.Value.ValueString()

			metadata3 = append(metadata3, shared.OutputDynatraceOtlpMetadata{
				Key:   key11,
				Value: value57,
			})
		}
		concurrency31 := new(float64)
		if !r.OutputDynatraceOtlp.Concurrency.IsUnknown() && !r.OutputDynatraceOtlp.Concurrency.IsNull() {
			*concurrency31 = r.OutputDynatraceOtlp.Concurrency.ValueFloat64()
		} else {
			concurrency31 = nil
		}
		maxPayloadSizeKb29 := new(float64)
		if !r.OutputDynatraceOtlp.MaxPayloadSizeKB.IsUnknown() && !r.OutputDynatraceOtlp.MaxPayloadSizeKB.IsNull() {
			*maxPayloadSizeKb29 = r.OutputDynatraceOtlp.MaxPayloadSizeKB.ValueFloat64()
		} else {
			maxPayloadSizeKb29 = nil
		}
		timeoutSec30 := new(float64)
		if !r.OutputDynatraceOtlp.TimeoutSec.IsUnknown() && !r.OutputDynatraceOtlp.TimeoutSec.IsNull() {
			*timeoutSec30 = r.OutputDynatraceOtlp.TimeoutSec.ValueFloat64()
		} else {
			timeoutSec30 = nil
		}
		flushPeriodSec41 := new(float64)
		if !r.OutputDynatraceOtlp.FlushPeriodSec.IsUnknown() && !r.OutputDynatraceOtlp.FlushPeriodSec.IsNull() {
			*flushPeriodSec41 = r.OutputDynatraceOtlp.FlushPeriodSec.ValueFloat64()
		} else {
			flushPeriodSec41 = nil
		}
		failedRequestLoggingMode28 := new(shared.OutputDynatraceOtlpFailedRequestLoggingMode)
		if !r.OutputDynatraceOtlp.FailedRequestLoggingMode.IsUnknown() && !r.OutputDynatraceOtlp.FailedRequestLoggingMode.IsNull() {
			*failedRequestLoggingMode28 = shared.OutputDynatraceOtlpFailedRequestLoggingMode(r.OutputDynatraceOtlp.FailedRequestLoggingMode.ValueString())
		} else {
			failedRequestLoggingMode28 = nil
		}
		connectionTimeout18 := new(float64)
		if !r.OutputDynatraceOtlp.ConnectionTimeout.IsUnknown() && !r.OutputDynatraceOtlp.ConnectionTimeout.IsNull() {
			*connectionTimeout18 = r.OutputDynatraceOtlp.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout18 = nil
		}
		keepAliveTime2 := new(float64)
		if !r.OutputDynatraceOtlp.KeepAliveTime.IsUnknown() && !r.OutputDynatraceOtlp.KeepAliveTime.IsNull() {
			*keepAliveTime2 = r.OutputDynatraceOtlp.KeepAliveTime.ValueFloat64()
		} else {
			keepAliveTime2 = nil
		}
		keepAlive6 := new(bool)
		if !r.OutputDynatraceOtlp.KeepAlive.IsUnknown() && !r.OutputDynatraceOtlp.KeepAlive.IsNull() {
			*keepAlive6 = r.OutputDynatraceOtlp.KeepAlive.ValueBool()
		} else {
			keepAlive6 = nil
		}
		endpointType := new(shared.EndpointType)
		if !r.OutputDynatraceOtlp.EndpointType.IsUnknown() && !r.OutputDynatraceOtlp.EndpointType.IsNull() {
			*endpointType = shared.EndpointType(r.OutputDynatraceOtlp.EndpointType.ValueString())
		} else {
			endpointType = nil
		}
		var tokenSecret1 string
		tokenSecret1 = r.OutputDynatraceOtlp.TokenSecret.ValueString()

		authTokenName1 := new(string)
		if !r.OutputDynatraceOtlp.AuthTokenName.IsUnknown() && !r.OutputDynatraceOtlp.AuthTokenName.IsNull() {
			*authTokenName1 = r.OutputDynatraceOtlp.AuthTokenName.ValueString()
		} else {
			authTokenName1 = nil
		}
		onBackpressure57 := new(shared.OutputDynatraceOtlpBackpressureBehavior)
		if !r.OutputDynatraceOtlp.OnBackpressure.IsUnknown() && !r.OutputDynatraceOtlp.OnBackpressure.IsNull() {
			*onBackpressure57 = shared.OutputDynatraceOtlpBackpressureBehavior(r.OutputDynatraceOtlp.OnBackpressure.ValueString())
		} else {
			onBackpressure57 = nil
		}
		description63 := new(string)
		if !r.OutputDynatraceOtlp.Description.IsUnknown() && !r.OutputDynatraceOtlp.Description.IsNull() {
			*description63 = r.OutputDynatraceOtlp.Description.ValueString()
		} else {
			description63 = nil
		}
		rejectUnauthorized57 := new(bool)
		if !r.OutputDynatraceOtlp.RejectUnauthorized.IsUnknown() && !r.OutputDynatraceOtlp.RejectUnauthorized.IsNull() {
			*rejectUnauthorized57 = r.OutputDynatraceOtlp.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized57 = nil
		}
		useRoundRobinDns28 := new(bool)
		if !r.OutputDynatraceOtlp.UseRoundRobinDNS.IsUnknown() && !r.OutputDynatraceOtlp.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDns28 = r.OutputDynatraceOtlp.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDns28 = nil
		}
		extraHTTPHeaders28 := make([]shared.OutputDynatraceOtlpExtraHTTPHeaders, 0, len(r.OutputDynatraceOtlp.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem28 := range r.OutputDynatraceOtlp.ExtraHTTPHeaders {
			name44 := new(string)
			if !extraHTTPHeadersItem28.Name.IsUnknown() && !extraHTTPHeadersItem28.Name.IsNull() {
				*name44 = extraHTTPHeadersItem28.Name.ValueString()
			} else {
				name44 = nil
			}
			var value58 string
			value58 = extraHTTPHeadersItem28.Value.ValueString()

			extraHTTPHeaders28 = append(extraHTTPHeaders28, shared.OutputDynatraceOtlpExtraHTTPHeaders{
				Name:  name44,
				Value: value58,
			})
		}
		safeHeaders28 := make([]string, 0, len(r.OutputDynatraceOtlp.SafeHeaders))
		for _, safeHeadersItem28 := range r.OutputDynatraceOtlp.SafeHeaders {
			safeHeaders28 = append(safeHeaders28, safeHeadersItem28.ValueString())
		}
		responseRetrySettings29 := make([]shared.OutputDynatraceOtlpResponseRetrySettings, 0, len(r.OutputDynatraceOtlp.ResponseRetrySettings))
		for _, responseRetrySettingsItem29 := range r.OutputDynatraceOtlp.ResponseRetrySettings {
			var httpStatus29 float64
			httpStatus29 = responseRetrySettingsItem29.HTTPStatus.ValueFloat64()

			initialBackoff62 := new(float64)
			if !responseRetrySettingsItem29.InitialBackoff.IsUnknown() && !responseRetrySettingsItem29.InitialBackoff.IsNull() {
				*initialBackoff62 = responseRetrySettingsItem29.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff62 = nil
			}
			backoffRate62 := new(float64)
			if !responseRetrySettingsItem29.BackoffRate.IsUnknown() && !responseRetrySettingsItem29.BackoffRate.IsNull() {
				*backoffRate62 = responseRetrySettingsItem29.BackoffRate.ValueFloat64()
			} else {
				backoffRate62 = nil
			}
			maxBackoff58 := new(float64)
			if !responseRetrySettingsItem29.MaxBackoff.IsUnknown() && !responseRetrySettingsItem29.MaxBackoff.IsNull() {
				*maxBackoff58 = responseRetrySettingsItem29.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff58 = nil
			}
			responseRetrySettings29 = append(responseRetrySettings29, shared.OutputDynatraceOtlpResponseRetrySettings{
				HTTPStatus:     httpStatus29,
				InitialBackoff: initialBackoff62,
				BackoffRate:    backoffRate62,
				MaxBackoff:     maxBackoff58,
			})
		}
		var timeoutRetrySettings29 *shared.OutputDynatraceOtlpTimeoutRetrySettings
		if r.OutputDynatraceOtlp.TimeoutRetrySettings != nil {
			timeoutRetry29 := new(bool)
			if !r.OutputDynatraceOtlp.TimeoutRetrySettings.TimeoutRetry.IsUnknown() && !r.OutputDynatraceOtlp.TimeoutRetrySettings.TimeoutRetry.IsNull() {
				*timeoutRetry29 = r.OutputDynatraceOtlp.TimeoutRetrySettings.TimeoutRetry.ValueBool()
			} else {
				timeoutRetry29 = nil
			}
			initialBackoff63 := new(float64)
			if !r.OutputDynatraceOtlp.TimeoutRetrySettings.InitialBackoff.IsUnknown() && !r.OutputDynatraceOtlp.TimeoutRetrySettings.InitialBackoff.IsNull() {
				*initialBackoff63 = r.OutputDynatraceOtlp.TimeoutRetrySettings.InitialBackoff.ValueFloat64()
			} else {
				initialBackoff63 = nil
			}
			backoffRate63 := new(float64)
			if !r.OutputDynatraceOtlp.TimeoutRetrySettings.BackoffRate.IsUnknown() && !r.OutputDynatraceOtlp.TimeoutRetrySettings.BackoffRate.IsNull() {
				*backoffRate63 = r.OutputDynatraceOtlp.TimeoutRetrySettings.BackoffRate.ValueFloat64()
			} else {
				backoffRate63 = nil
			}
			maxBackoff59 := new(float64)
			if !r.OutputDynatraceOtlp.TimeoutRetrySettings.MaxBackoff.IsUnknown() && !r.OutputDynatraceOtlp.TimeoutRetrySettings.MaxBackoff.IsNull() {
				*maxBackoff59 = r.OutputDynatraceOtlp.TimeoutRetrySettings.MaxBackoff.ValueFloat64()
			} else {
				maxBackoff59 = nil
			}
			timeoutRetrySettings29 = &shared.OutputDynatraceOtlpTimeoutRetrySettings{
				TimeoutRetry:   timeoutRetry29,
				InitialBackoff: initialBackoff63,
				BackoffRate:    backoffRate63,
				MaxBackoff:     maxBackoff59,
			}
		}
		responseHonorRetryAfterHeader29 := new(bool)
		if !r.OutputDynatraceOtlp.ResponseHonorRetryAfterHeader.IsUnknown() && !r.OutputDynatraceOtlp.ResponseHonorRetryAfterHeader.IsNull() {
			*responseHonorRetryAfterHeader29 = r.OutputDynatraceOtlp.ResponseHonorRetryAfterHeader.ValueBool()
		} else {
			responseHonorRetryAfterHeader29 = nil
		}
		pqMaxFileSize47 := new(string)
		if !r.OutputDynatraceOtlp.PqMaxFileSize.IsUnknown() && !r.OutputDynatraceOtlp.PqMaxFileSize.IsNull() {
			*pqMaxFileSize47 = r.OutputDynatraceOtlp.PqMaxFileSize.ValueString()
		} else {
			pqMaxFileSize47 = nil
		}
		pqMaxSize47 := new(string)
		if !r.OutputDynatraceOtlp.PqMaxSize.IsUnknown() && !r.OutputDynatraceOtlp.PqMaxSize.IsNull() {
			*pqMaxSize47 = r.OutputDynatraceOtlp.PqMaxSize.ValueString()
		} else {
			pqMaxSize47 = nil
		}
		pqPath47 := new(string)
		if !r.OutputDynatraceOtlp.PqPath.IsUnknown() && !r.OutputDynatraceOtlp.PqPath.IsNull() {
			*pqPath47 = r.OutputDynatraceOtlp.PqPath.ValueString()
		} else {
			pqPath47 = nil
		}
		pqCompress47 := new(shared.OutputDynatraceOtlpPqCompressCompression)
		if !r.OutputDynatraceOtlp.PqCompress.IsUnknown() && !r.OutputDynatraceOtlp.PqCompress.IsNull() {
			*pqCompress47 = shared.OutputDynatraceOtlpPqCompressCompression(r.OutputDynatraceOtlp.PqCompress.ValueString())
		} else {
			pqCompress47 = nil
		}
		pqOnBackpressure47 := new(shared.OutputDynatraceOtlpQueueFullBehavior)
		if !r.OutputDynatraceOtlp.PqOnBackpressure.IsUnknown() && !r.OutputDynatraceOtlp.PqOnBackpressure.IsNull() {
			*pqOnBackpressure47 = shared.OutputDynatraceOtlpQueueFullBehavior(r.OutputDynatraceOtlp.PqOnBackpressure.ValueString())
		} else {
			pqOnBackpressure47 = nil
		}
		pqMode47 := new(shared.OutputDynatraceOtlpMode)
		if !r.OutputDynatraceOtlp.PqMode.IsUnknown() && !r.OutputDynatraceOtlp.PqMode.IsNull() {
			*pqMode47 = shared.OutputDynatraceOtlpMode(r.OutputDynatraceOtlp.PqMode.ValueString())
		} else {
			pqMode47 = nil
		}
		var pqControls47 *shared.OutputDynatraceOtlpPqControls
		if r.OutputDynatraceOtlp.PqControls != nil {
			pqControls47 = &shared.OutputDynatraceOtlpPqControls{}
		}
		outputDynatraceOtlp = &shared.OutputDynatraceOtlp{
			ID:                            id63,
			Type:                          typeVar63,
			Pipeline:                      pipeline63,
			SystemFields:                  systemFields63,
			Environment:                   environment63,
			Streamtags:                    streamtags63,
			Protocol:                      protocol6,
			Endpoint:                      endpoint15,
			OtlpVersion:                   otlpVersion2,
			Compress:                      compress37,
			HTTPCompress:                  httpCompress2,
			HTTPTracesEndpointOverride:    httpTracesEndpointOverride2,
			HTTPMetricsEndpointOverride:   httpMetricsEndpointOverride2,
			HTTPLogsEndpointOverride:      httpLogsEndpointOverride2,
			Metadata:                      metadata3,
			Concurrency:                   concurrency31,
			MaxPayloadSizeKB:              maxPayloadSizeKb29,
			TimeoutSec:                    timeoutSec30,
			FlushPeriodSec:                flushPeriodSec41,
			FailedRequestLoggingMode:      failedRequestLoggingMode28,
			ConnectionTimeout:             connectionTimeout18,
			KeepAliveTime:                 keepAliveTime2,
			KeepAlive:                     keepAlive6,
			EndpointType:                  endpointType,
			TokenSecret:                   tokenSecret1,
			AuthTokenName:                 authTokenName1,
			OnBackpressure:                onBackpressure57,
			Description:                   description63,
			RejectUnauthorized:            rejectUnauthorized57,
			UseRoundRobinDNS:              useRoundRobinDns28,
			ExtraHTTPHeaders:              extraHTTPHeaders28,
			SafeHeaders:                   safeHeaders28,
			ResponseRetrySettings:         responseRetrySettings29,
			TimeoutRetrySettings:          timeoutRetrySettings29,
			ResponseHonorRetryAfterHeader: responseHonorRetryAfterHeader29,
			PqMaxFileSize:                 pqMaxFileSize47,
			PqMaxSize:                     pqMaxSize47,
			PqPath:                        pqPath47,
			PqCompress:                    pqCompress47,
			PqOnBackpressure:              pqOnBackpressure47,
			PqMode:                        pqMode47,
			PqControls:                    pqControls47,
		}
	}
	if outputDynatraceOtlp != nil {
		out = shared.Output{
			OutputDynatraceOtlp: outputDynatraceOtlp,
		}
	}

	return &out, diags
}

func (r *DestinationResourceModel) ToOperationsUpdateOutputByIDRequest(ctx context.Context) (*operations.UpdateOutputByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	output, outputDiags := r.ToSharedOutput(ctx)
	diags.Append(outputDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateOutputByIDRequest{
		ID:     id,
		Output: *output,
	}

	return &out, diags
}

func (r *DestinationResourceModel) ToOperationsDeleteOutputByIDRequest(ctx context.Context) (*operations.DeleteOutputByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.DeleteOutputByIDRequest{
		ID: id,
	}

	return &out, diags
}

func (r *DestinationResourceModel) RefreshFromSharedOutput(ctx context.Context, resp *shared.Output) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.OutputAzureBlob != nil {
		r.OutputAzureBlob = &tfTypes.OutputAzureBlob{}
		r.OutputAzureBlob.AddIDToStagePath = types.BoolPointerValue(resp.OutputAzureBlob.AddIDToStagePath)
		if resp.OutputAzureBlob.AuthType != nil {
			r.OutputAzureBlob.AuthType = types.StringValue(string(*resp.OutputAzureBlob.AuthType))
		} else {
			r.OutputAzureBlob.AuthType = types.StringNull()
		}
		r.OutputAzureBlob.AutomaticSchema = types.BoolPointerValue(resp.OutputAzureBlob.AutomaticSchema)
		r.OutputAzureBlob.BaseFileName = types.StringPointerValue(resp.OutputAzureBlob.BaseFileName)
		if resp.OutputAzureBlob.Certificate == nil {
			r.OutputAzureBlob.Certificate = nil
		} else {
			r.OutputAzureBlob.Certificate = &tfTypes.OutputAzureBlobCertificate{}
			r.OutputAzureBlob.Certificate.CertificateName = types.StringValue(resp.OutputAzureBlob.Certificate.CertificateName)
		}
		r.OutputAzureBlob.ClientID = types.StringPointerValue(resp.OutputAzureBlob.ClientID)
		r.OutputAzureBlob.ClientTextSecret = types.StringPointerValue(resp.OutputAzureBlob.ClientTextSecret)
		if resp.OutputAzureBlob.Compress != nil {
			r.OutputAzureBlob.Compress = types.StringValue(string(*resp.OutputAzureBlob.Compress))
		} else {
			r.OutputAzureBlob.Compress = types.StringNull()
		}
		if resp.OutputAzureBlob.CompressionLevel != nil {
			r.OutputAzureBlob.CompressionLevel = types.StringValue(string(*resp.OutputAzureBlob.CompressionLevel))
		} else {
			r.OutputAzureBlob.CompressionLevel = types.StringNull()
		}
		r.OutputAzureBlob.ConnectionString = types.StringPointerValue(resp.OutputAzureBlob.ConnectionString)
		r.OutputAzureBlob.ContainerName = types.StringValue(resp.OutputAzureBlob.ContainerName)
		r.OutputAzureBlob.CreateContainer = types.BoolPointerValue(resp.OutputAzureBlob.CreateContainer)
		r.OutputAzureBlob.DeadletterEnabled = types.BoolPointerValue(resp.OutputAzureBlob.DeadletterEnabled)
		r.OutputAzureBlob.DeadletterPath = types.StringPointerValue(resp.OutputAzureBlob.DeadletterPath)
		r.OutputAzureBlob.Description = types.StringPointerValue(resp.OutputAzureBlob.Description)
		r.OutputAzureBlob.DestPath = types.StringPointerValue(resp.OutputAzureBlob.DestPath)
		r.OutputAzureBlob.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputAzureBlob.EmptyDirCleanupSec)
		r.OutputAzureBlob.EnablePageChecksum = types.BoolPointerValue(resp.OutputAzureBlob.EnablePageChecksum)
		r.OutputAzureBlob.EnableStatistics = types.BoolPointerValue(resp.OutputAzureBlob.EnableStatistics)
		r.OutputAzureBlob.EnableWritePageIndex = types.BoolPointerValue(resp.OutputAzureBlob.EnableWritePageIndex)
		r.OutputAzureBlob.EndpointSuffix = types.StringPointerValue(resp.OutputAzureBlob.EndpointSuffix)
		r.OutputAzureBlob.Environment = types.StringPointerValue(resp.OutputAzureBlob.Environment)
		r.OutputAzureBlob.FileNameSuffix = types.StringPointerValue(resp.OutputAzureBlob.FileNameSuffix)
		if resp.OutputAzureBlob.Format != nil {
			r.OutputAzureBlob.Format = types.StringValue(string(*resp.OutputAzureBlob.Format))
		} else {
			r.OutputAzureBlob.Format = types.StringNull()
		}
		r.OutputAzureBlob.HeaderLine = types.StringPointerValue(resp.OutputAzureBlob.HeaderLine)
		r.OutputAzureBlob.ID = types.StringPointerValue(resp.OutputAzureBlob.ID)
		r.OutputAzureBlob.KeyValueMetadata = []tfTypes.OutputAzureBlobKeyValueMetadata{}
		if len(r.OutputAzureBlob.KeyValueMetadata) > len(resp.OutputAzureBlob.KeyValueMetadata) {
			r.OutputAzureBlob.KeyValueMetadata = r.OutputAzureBlob.KeyValueMetadata[:len(resp.OutputAzureBlob.KeyValueMetadata)]
		}
		for keyValueMetadataCount, keyValueMetadataItem := range resp.OutputAzureBlob.KeyValueMetadata {
			var keyValueMetadata tfTypes.OutputAzureBlobKeyValueMetadata
			keyValueMetadata.Key = types.StringPointerValue(keyValueMetadataItem.Key)
			keyValueMetadata.Value = types.StringValue(keyValueMetadataItem.Value)
			if keyValueMetadataCount+1 > len(r.OutputAzureBlob.KeyValueMetadata) {
				r.OutputAzureBlob.KeyValueMetadata = append(r.OutputAzureBlob.KeyValueMetadata, keyValueMetadata)
			} else {
				r.OutputAzureBlob.KeyValueMetadata[keyValueMetadataCount].Key = keyValueMetadata.Key
				r.OutputAzureBlob.KeyValueMetadata[keyValueMetadataCount].Value = keyValueMetadata.Value
			}
		}
		r.OutputAzureBlob.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputAzureBlob.MaxConcurrentFileParts)
		r.OutputAzureBlob.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputAzureBlob.MaxFileIdleTimeSec)
		r.OutputAzureBlob.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputAzureBlob.MaxFileOpenTimeSec)
		r.OutputAzureBlob.MaxFileSizeMB = types.Float64PointerValue(resp.OutputAzureBlob.MaxFileSizeMB)
		r.OutputAzureBlob.MaxOpenFiles = types.Float64PointerValue(resp.OutputAzureBlob.MaxOpenFiles)
		r.OutputAzureBlob.MaxRetryNum = types.Float64PointerValue(resp.OutputAzureBlob.MaxRetryNum)
		if resp.OutputAzureBlob.OnBackpressure != nil {
			r.OutputAzureBlob.OnBackpressure = types.StringValue(string(*resp.OutputAzureBlob.OnBackpressure))
		} else {
			r.OutputAzureBlob.OnBackpressure = types.StringNull()
		}
		if resp.OutputAzureBlob.OnDiskFullBackpressure != nil {
			r.OutputAzureBlob.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputAzureBlob.OnDiskFullBackpressure))
		} else {
			r.OutputAzureBlob.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputAzureBlob.ParquetDataPageVersion != nil {
			r.OutputAzureBlob.ParquetDataPageVersion = types.StringValue(string(*resp.OutputAzureBlob.ParquetDataPageVersion))
		} else {
			r.OutputAzureBlob.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputAzureBlob.ParquetPageSize = types.StringPointerValue(resp.OutputAzureBlob.ParquetPageSize)
		r.OutputAzureBlob.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputAzureBlob.ParquetRowGroupLength)
		if resp.OutputAzureBlob.ParquetVersion != nil {
			r.OutputAzureBlob.ParquetVersion = types.StringValue(string(*resp.OutputAzureBlob.ParquetVersion))
		} else {
			r.OutputAzureBlob.ParquetVersion = types.StringNull()
		}
		r.OutputAzureBlob.PartitionExpr = types.StringPointerValue(resp.OutputAzureBlob.PartitionExpr)
		r.OutputAzureBlob.Pipeline = types.StringPointerValue(resp.OutputAzureBlob.Pipeline)
		r.OutputAzureBlob.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputAzureBlob.RemoveEmptyDirs)
		r.OutputAzureBlob.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputAzureBlob.ShouldLogInvalidRows)
		r.OutputAzureBlob.StagePath = types.StringPointerValue(resp.OutputAzureBlob.StagePath)
		r.OutputAzureBlob.StorageAccountName = types.StringPointerValue(resp.OutputAzureBlob.StorageAccountName)
		if resp.OutputAzureBlob.StorageClass != nil {
			r.OutputAzureBlob.StorageClass = types.StringValue(string(*resp.OutputAzureBlob.StorageClass))
		} else {
			r.OutputAzureBlob.StorageClass = types.StringNull()
		}
		r.OutputAzureBlob.Streamtags = make([]types.String, 0, len(resp.OutputAzureBlob.Streamtags))
		for _, v := range resp.OutputAzureBlob.Streamtags {
			r.OutputAzureBlob.Streamtags = append(r.OutputAzureBlob.Streamtags, types.StringValue(v))
		}
		r.OutputAzureBlob.SystemFields = make([]types.String, 0, len(resp.OutputAzureBlob.SystemFields))
		for _, v := range resp.OutputAzureBlob.SystemFields {
			r.OutputAzureBlob.SystemFields = append(r.OutputAzureBlob.SystemFields, types.StringValue(v))
		}
		r.OutputAzureBlob.TenantID = types.StringPointerValue(resp.OutputAzureBlob.TenantID)
		r.OutputAzureBlob.TextSecret = types.StringPointerValue(resp.OutputAzureBlob.TextSecret)
		if resp.OutputAzureBlob.Type != nil {
			r.OutputAzureBlob.Type = types.StringValue(string(*resp.OutputAzureBlob.Type))
		} else {
			r.OutputAzureBlob.Type = types.StringNull()
		}
		r.OutputAzureBlob.WriteHighWaterMark = types.Float64PointerValue(resp.OutputAzureBlob.WriteHighWaterMark)
	}
	if resp.OutputAzureDataExplorer != nil {
		r.OutputAzureDataExplorer = &tfTypes.OutputAzureDataExplorer{}
		r.OutputAzureDataExplorer.AddIDToStagePath = types.BoolPointerValue(resp.OutputAzureDataExplorer.AddIDToStagePath)
		r.OutputAzureDataExplorer.AdditionalProperties = []tfTypes.AdditionalProperties{}
		if len(r.OutputAzureDataExplorer.AdditionalProperties) > len(resp.OutputAzureDataExplorer.AdditionalProperties) {
			r.OutputAzureDataExplorer.AdditionalProperties = r.OutputAzureDataExplorer.AdditionalProperties[:len(resp.OutputAzureDataExplorer.AdditionalProperties)]
		}
		for additionalPropertiesCount, additionalPropertiesItem := range resp.OutputAzureDataExplorer.AdditionalProperties {
			var additionalProperties tfTypes.AdditionalProperties
			additionalProperties.Key = types.StringValue(additionalPropertiesItem.Key)
			additionalProperties.Value = types.StringValue(additionalPropertiesItem.Value)
			if additionalPropertiesCount+1 > len(r.OutputAzureDataExplorer.AdditionalProperties) {
				r.OutputAzureDataExplorer.AdditionalProperties = append(r.OutputAzureDataExplorer.AdditionalProperties, additionalProperties)
			} else {
				r.OutputAzureDataExplorer.AdditionalProperties[additionalPropertiesCount].Key = additionalProperties.Key
				r.OutputAzureDataExplorer.AdditionalProperties[additionalPropertiesCount].Value = additionalProperties.Value
			}
		}
		if resp.OutputAzureDataExplorer.Certificate == nil {
			r.OutputAzureDataExplorer.Certificate = nil
		} else {
			r.OutputAzureDataExplorer.Certificate = &tfTypes.OutputAzureDataExplorerCertificate{}
			r.OutputAzureDataExplorer.Certificate.CertificateName = types.StringPointerValue(resp.OutputAzureDataExplorer.Certificate.CertificateName)
		}
		r.OutputAzureDataExplorer.ClientID = types.StringValue(resp.OutputAzureDataExplorer.ClientID)
		r.OutputAzureDataExplorer.ClientSecret = types.StringPointerValue(resp.OutputAzureDataExplorer.ClientSecret)
		r.OutputAzureDataExplorer.ClusterURL = types.StringValue(resp.OutputAzureDataExplorer.ClusterURL)
		if resp.OutputAzureDataExplorer.Compress != nil {
			r.OutputAzureDataExplorer.Compress = types.StringValue(string(*resp.OutputAzureDataExplorer.Compress))
		} else {
			r.OutputAzureDataExplorer.Compress = types.StringNull()
		}
		r.OutputAzureDataExplorer.Concurrency = types.Float64PointerValue(resp.OutputAzureDataExplorer.Concurrency)
		r.OutputAzureDataExplorer.Database = types.StringValue(resp.OutputAzureDataExplorer.Database)
		r.OutputAzureDataExplorer.DeadletterEnabled = types.BoolPointerValue(resp.OutputAzureDataExplorer.DeadletterEnabled)
		r.OutputAzureDataExplorer.Description = types.StringPointerValue(resp.OutputAzureDataExplorer.Description)
		r.OutputAzureDataExplorer.Environment = types.StringPointerValue(resp.OutputAzureDataExplorer.Environment)
		r.OutputAzureDataExplorer.ExtentTags = []tfTypes.ExtentTags{}
		if len(r.OutputAzureDataExplorer.ExtentTags) > len(resp.OutputAzureDataExplorer.ExtentTags) {
			r.OutputAzureDataExplorer.ExtentTags = r.OutputAzureDataExplorer.ExtentTags[:len(resp.OutputAzureDataExplorer.ExtentTags)]
		}
		for extentTagsCount, extentTagsItem := range resp.OutputAzureDataExplorer.ExtentTags {
			var extentTags tfTypes.ExtentTags
			if extentTagsItem.Prefix != nil {
				extentTags.Prefix = types.StringValue(string(*extentTagsItem.Prefix))
			} else {
				extentTags.Prefix = types.StringNull()
			}
			extentTags.Value = types.StringValue(extentTagsItem.Value)
			if extentTagsCount+1 > len(r.OutputAzureDataExplorer.ExtentTags) {
				r.OutputAzureDataExplorer.ExtentTags = append(r.OutputAzureDataExplorer.ExtentTags, extentTags)
			} else {
				r.OutputAzureDataExplorer.ExtentTags[extentTagsCount].Prefix = extentTags.Prefix
				r.OutputAzureDataExplorer.ExtentTags[extentTagsCount].Value = extentTags.Value
			}
		}
		r.OutputAzureDataExplorer.FileNameSuffix = types.StringPointerValue(resp.OutputAzureDataExplorer.FileNameSuffix)
		r.OutputAzureDataExplorer.FlushImmediately = types.BoolPointerValue(resp.OutputAzureDataExplorer.FlushImmediately)
		r.OutputAzureDataExplorer.FlushPeriodSec = types.Float64PointerValue(resp.OutputAzureDataExplorer.FlushPeriodSec)
		if resp.OutputAzureDataExplorer.Format != nil {
			r.OutputAzureDataExplorer.Format = types.StringValue(string(*resp.OutputAzureDataExplorer.Format))
		} else {
			r.OutputAzureDataExplorer.Format = types.StringNull()
		}
		r.OutputAzureDataExplorer.ID = types.StringPointerValue(resp.OutputAzureDataExplorer.ID)
		r.OutputAzureDataExplorer.IngestIfNotExists = []tfTypes.IngestIfNotExists{}
		if len(r.OutputAzureDataExplorer.IngestIfNotExists) > len(resp.OutputAzureDataExplorer.IngestIfNotExists) {
			r.OutputAzureDataExplorer.IngestIfNotExists = r.OutputAzureDataExplorer.IngestIfNotExists[:len(resp.OutputAzureDataExplorer.IngestIfNotExists)]
		}
		for ingestIfNotExistsCount, ingestIfNotExistsItem := range resp.OutputAzureDataExplorer.IngestIfNotExists {
			var ingestIfNotExists tfTypes.IngestIfNotExists
			ingestIfNotExists.Value = types.StringValue(ingestIfNotExistsItem.Value)
			if ingestIfNotExistsCount+1 > len(r.OutputAzureDataExplorer.IngestIfNotExists) {
				r.OutputAzureDataExplorer.IngestIfNotExists = append(r.OutputAzureDataExplorer.IngestIfNotExists, ingestIfNotExists)
			} else {
				r.OutputAzureDataExplorer.IngestIfNotExists[ingestIfNotExistsCount].Value = ingestIfNotExists.Value
			}
		}
		if resp.OutputAzureDataExplorer.IngestMode != nil {
			r.OutputAzureDataExplorer.IngestMode = types.StringValue(string(*resp.OutputAzureDataExplorer.IngestMode))
		} else {
			r.OutputAzureDataExplorer.IngestMode = types.StringNull()
		}
		r.OutputAzureDataExplorer.IngestURL = types.StringPointerValue(resp.OutputAzureDataExplorer.IngestURL)
		r.OutputAzureDataExplorer.IsMappingObj = types.BoolPointerValue(resp.OutputAzureDataExplorer.IsMappingObj)
		r.OutputAzureDataExplorer.KeepAlive = types.BoolPointerValue(resp.OutputAzureDataExplorer.KeepAlive)
		r.OutputAzureDataExplorer.MappingRef = types.StringPointerValue(resp.OutputAzureDataExplorer.MappingRef)
		r.OutputAzureDataExplorer.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxConcurrentFileParts)
		r.OutputAzureDataExplorer.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxFileIdleTimeSec)
		r.OutputAzureDataExplorer.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxFileOpenTimeSec)
		r.OutputAzureDataExplorer.MaxFileSizeMB = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxFileSizeMB)
		r.OutputAzureDataExplorer.MaxOpenFiles = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxOpenFiles)
		r.OutputAzureDataExplorer.MaxPayloadEvents = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxPayloadEvents)
		r.OutputAzureDataExplorer.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputAzureDataExplorer.MaxPayloadSizeKB)
		if resp.OutputAzureDataExplorer.OauthEndpoint != nil {
			r.OutputAzureDataExplorer.OauthEndpoint = types.StringValue(string(*resp.OutputAzureDataExplorer.OauthEndpoint))
		} else {
			r.OutputAzureDataExplorer.OauthEndpoint = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.OauthType != nil {
			r.OutputAzureDataExplorer.OauthType = types.StringValue(string(*resp.OutputAzureDataExplorer.OauthType))
		} else {
			r.OutputAzureDataExplorer.OauthType = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.OnBackpressure != nil {
			r.OutputAzureDataExplorer.OnBackpressure = types.StringValue(string(*resp.OutputAzureDataExplorer.OnBackpressure))
		} else {
			r.OutputAzureDataExplorer.OnBackpressure = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.OnDiskFullBackpressure != nil {
			r.OutputAzureDataExplorer.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputAzureDataExplorer.OnDiskFullBackpressure))
		} else {
			r.OutputAzureDataExplorer.OnDiskFullBackpressure = types.StringNull()
		}
		r.OutputAzureDataExplorer.Pipeline = types.StringPointerValue(resp.OutputAzureDataExplorer.Pipeline)
		if resp.OutputAzureDataExplorer.PqCompress != nil {
			r.OutputAzureDataExplorer.PqCompress = types.StringValue(string(*resp.OutputAzureDataExplorer.PqCompress))
		} else {
			r.OutputAzureDataExplorer.PqCompress = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.PqControls == nil {
			r.OutputAzureDataExplorer.PqControls = nil
		} else {
			r.OutputAzureDataExplorer.PqControls = &tfTypes.OutputAzureDataExplorerPqControls{}
		}
		r.OutputAzureDataExplorer.PqMaxFileSize = types.StringPointerValue(resp.OutputAzureDataExplorer.PqMaxFileSize)
		r.OutputAzureDataExplorer.PqMaxSize = types.StringPointerValue(resp.OutputAzureDataExplorer.PqMaxSize)
		if resp.OutputAzureDataExplorer.PqMode != nil {
			r.OutputAzureDataExplorer.PqMode = types.StringValue(string(*resp.OutputAzureDataExplorer.PqMode))
		} else {
			r.OutputAzureDataExplorer.PqMode = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.PqOnBackpressure != nil {
			r.OutputAzureDataExplorer.PqOnBackpressure = types.StringValue(string(*resp.OutputAzureDataExplorer.PqOnBackpressure))
		} else {
			r.OutputAzureDataExplorer.PqOnBackpressure = types.StringNull()
		}
		r.OutputAzureDataExplorer.PqPath = types.StringPointerValue(resp.OutputAzureDataExplorer.PqPath)
		r.OutputAzureDataExplorer.RejectUnauthorized = types.BoolPointerValue(resp.OutputAzureDataExplorer.RejectUnauthorized)
		r.OutputAzureDataExplorer.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputAzureDataExplorer.RemoveEmptyDirs)
		if resp.OutputAzureDataExplorer.ReportLevel != nil {
			r.OutputAzureDataExplorer.ReportLevel = types.StringValue(string(*resp.OutputAzureDataExplorer.ReportLevel))
		} else {
			r.OutputAzureDataExplorer.ReportLevel = types.StringNull()
		}
		if resp.OutputAzureDataExplorer.ReportMethod != nil {
			r.OutputAzureDataExplorer.ReportMethod = types.StringValue(string(*resp.OutputAzureDataExplorer.ReportMethod))
		} else {
			r.OutputAzureDataExplorer.ReportMethod = types.StringNull()
		}
		r.OutputAzureDataExplorer.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputAzureDataExplorer.ResponseHonorRetryAfterHeader)
		r.OutputAzureDataExplorer.ResponseRetrySettings = []tfTypes.OutputAzureDataExplorerResponseRetrySettings{}
		if len(r.OutputAzureDataExplorer.ResponseRetrySettings) > len(resp.OutputAzureDataExplorer.ResponseRetrySettings) {
			r.OutputAzureDataExplorer.ResponseRetrySettings = r.OutputAzureDataExplorer.ResponseRetrySettings[:len(resp.OutputAzureDataExplorer.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount, responseRetrySettingsItem := range resp.OutputAzureDataExplorer.ResponseRetrySettings {
			var responseRetrySettings tfTypes.OutputAzureDataExplorerResponseRetrySettings
			responseRetrySettings.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem.BackoffRate)
			responseRetrySettings.HTTPStatus = types.Float64Value(responseRetrySettingsItem.HTTPStatus)
			responseRetrySettings.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem.InitialBackoff)
			responseRetrySettings.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem.MaxBackoff)
			if responseRetrySettingsCount+1 > len(r.OutputAzureDataExplorer.ResponseRetrySettings) {
				r.OutputAzureDataExplorer.ResponseRetrySettings = append(r.OutputAzureDataExplorer.ResponseRetrySettings, responseRetrySettings)
			} else {
				r.OutputAzureDataExplorer.ResponseRetrySettings[responseRetrySettingsCount].BackoffRate = responseRetrySettings.BackoffRate
				r.OutputAzureDataExplorer.ResponseRetrySettings[responseRetrySettingsCount].HTTPStatus = responseRetrySettings.HTTPStatus
				r.OutputAzureDataExplorer.ResponseRetrySettings[responseRetrySettingsCount].InitialBackoff = responseRetrySettings.InitialBackoff
				r.OutputAzureDataExplorer.ResponseRetrySettings[responseRetrySettingsCount].MaxBackoff = responseRetrySettings.MaxBackoff
			}
		}
		r.OutputAzureDataExplorer.RetainBlobOnSuccess = types.BoolPointerValue(resp.OutputAzureDataExplorer.RetainBlobOnSuccess)
		r.OutputAzureDataExplorer.Scope = types.StringValue(resp.OutputAzureDataExplorer.Scope)
		r.OutputAzureDataExplorer.StagePath = types.StringPointerValue(resp.OutputAzureDataExplorer.StagePath)
		r.OutputAzureDataExplorer.Streamtags = make([]types.String, 0, len(resp.OutputAzureDataExplorer.Streamtags))
		for _, v := range resp.OutputAzureDataExplorer.Streamtags {
			r.OutputAzureDataExplorer.Streamtags = append(r.OutputAzureDataExplorer.Streamtags, types.StringValue(v))
		}
		r.OutputAzureDataExplorer.SystemFields = make([]types.String, 0, len(resp.OutputAzureDataExplorer.SystemFields))
		for _, v := range resp.OutputAzureDataExplorer.SystemFields {
			r.OutputAzureDataExplorer.SystemFields = append(r.OutputAzureDataExplorer.SystemFields, types.StringValue(v))
		}
		r.OutputAzureDataExplorer.Table = types.StringValue(resp.OutputAzureDataExplorer.Table)
		r.OutputAzureDataExplorer.TenantID = types.StringValue(resp.OutputAzureDataExplorer.TenantID)
		r.OutputAzureDataExplorer.TextSecret = types.StringPointerValue(resp.OutputAzureDataExplorer.TextSecret)
		if resp.OutputAzureDataExplorer.TimeoutRetrySettings == nil {
			r.OutputAzureDataExplorer.TimeoutRetrySettings = nil
		} else {
			r.OutputAzureDataExplorer.TimeoutRetrySettings = &tfTypes.OutputAzureDataExplorerTimeoutRetrySettings{}
			r.OutputAzureDataExplorer.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputAzureDataExplorer.TimeoutRetrySettings.BackoffRate)
			r.OutputAzureDataExplorer.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputAzureDataExplorer.TimeoutRetrySettings.InitialBackoff)
			r.OutputAzureDataExplorer.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputAzureDataExplorer.TimeoutRetrySettings.MaxBackoff)
			r.OutputAzureDataExplorer.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputAzureDataExplorer.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputAzureDataExplorer.TimeoutSec = types.Float64PointerValue(resp.OutputAzureDataExplorer.TimeoutSec)
		if resp.OutputAzureDataExplorer.Type != nil {
			r.OutputAzureDataExplorer.Type = types.StringValue(string(*resp.OutputAzureDataExplorer.Type))
		} else {
			r.OutputAzureDataExplorer.Type = types.StringNull()
		}
		r.OutputAzureDataExplorer.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputAzureDataExplorer.UseRoundRobinDNS)
		r.OutputAzureDataExplorer.ValidateDatabaseSettings = types.BoolPointerValue(resp.OutputAzureDataExplorer.ValidateDatabaseSettings)
	}
	if resp.OutputAzureEventhub != nil {
		r.OutputAzureEventhub = &tfTypes.OutputAzureEventhub{}
		if resp.OutputAzureEventhub.Ack != nil {
			r.OutputAzureEventhub.Ack = types.Int64Value(int64(*resp.OutputAzureEventhub.Ack))
		} else {
			r.OutputAzureEventhub.Ack = types.Int64Null()
		}
		r.OutputAzureEventhub.AuthenticationTimeout = types.Float64PointerValue(resp.OutputAzureEventhub.AuthenticationTimeout)
		r.OutputAzureEventhub.BackoffRate = types.Float64PointerValue(resp.OutputAzureEventhub.BackoffRate)
		r.OutputAzureEventhub.Brokers = make([]types.String, 0, len(resp.OutputAzureEventhub.Brokers))
		for _, v := range resp.OutputAzureEventhub.Brokers {
			r.OutputAzureEventhub.Brokers = append(r.OutputAzureEventhub.Brokers, types.StringValue(v))
		}
		r.OutputAzureEventhub.ConnectionTimeout = types.Float64PointerValue(resp.OutputAzureEventhub.ConnectionTimeout)
		r.OutputAzureEventhub.Description = types.StringPointerValue(resp.OutputAzureEventhub.Description)
		r.OutputAzureEventhub.Environment = types.StringPointerValue(resp.OutputAzureEventhub.Environment)
		r.OutputAzureEventhub.FlushEventCount = types.Float64PointerValue(resp.OutputAzureEventhub.FlushEventCount)
		r.OutputAzureEventhub.FlushPeriodSec = types.Float64PointerValue(resp.OutputAzureEventhub.FlushPeriodSec)
		if resp.OutputAzureEventhub.Format != nil {
			r.OutputAzureEventhub.Format = types.StringValue(string(*resp.OutputAzureEventhub.Format))
		} else {
			r.OutputAzureEventhub.Format = types.StringNull()
		}
		r.OutputAzureEventhub.ID = types.StringPointerValue(resp.OutputAzureEventhub.ID)
		r.OutputAzureEventhub.InitialBackoff = types.Float64PointerValue(resp.OutputAzureEventhub.InitialBackoff)
		r.OutputAzureEventhub.MaxBackOff = types.Float64PointerValue(resp.OutputAzureEventhub.MaxBackOff)
		r.OutputAzureEventhub.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputAzureEventhub.MaxRecordSizeKB)
		r.OutputAzureEventhub.MaxRetries = types.Float64PointerValue(resp.OutputAzureEventhub.MaxRetries)
		if resp.OutputAzureEventhub.OnBackpressure != nil {
			r.OutputAzureEventhub.OnBackpressure = types.StringValue(string(*resp.OutputAzureEventhub.OnBackpressure))
		} else {
			r.OutputAzureEventhub.OnBackpressure = types.StringNull()
		}
		r.OutputAzureEventhub.Pipeline = types.StringPointerValue(resp.OutputAzureEventhub.Pipeline)
		if resp.OutputAzureEventhub.PqCompress != nil {
			r.OutputAzureEventhub.PqCompress = types.StringValue(string(*resp.OutputAzureEventhub.PqCompress))
		} else {
			r.OutputAzureEventhub.PqCompress = types.StringNull()
		}
		if resp.OutputAzureEventhub.PqControls == nil {
			r.OutputAzureEventhub.PqControls = nil
		} else {
			r.OutputAzureEventhub.PqControls = &tfTypes.OutputAzureEventhubPqControls{}
		}
		r.OutputAzureEventhub.PqMaxFileSize = types.StringPointerValue(resp.OutputAzureEventhub.PqMaxFileSize)
		r.OutputAzureEventhub.PqMaxSize = types.StringPointerValue(resp.OutputAzureEventhub.PqMaxSize)
		if resp.OutputAzureEventhub.PqMode != nil {
			r.OutputAzureEventhub.PqMode = types.StringValue(string(*resp.OutputAzureEventhub.PqMode))
		} else {
			r.OutputAzureEventhub.PqMode = types.StringNull()
		}
		if resp.OutputAzureEventhub.PqOnBackpressure != nil {
			r.OutputAzureEventhub.PqOnBackpressure = types.StringValue(string(*resp.OutputAzureEventhub.PqOnBackpressure))
		} else {
			r.OutputAzureEventhub.PqOnBackpressure = types.StringNull()
		}
		r.OutputAzureEventhub.PqPath = types.StringPointerValue(resp.OutputAzureEventhub.PqPath)
		r.OutputAzureEventhub.ReauthenticationThreshold = types.Float64PointerValue(resp.OutputAzureEventhub.ReauthenticationThreshold)
		r.OutputAzureEventhub.RequestTimeout = types.Float64PointerValue(resp.OutputAzureEventhub.RequestTimeout)
		if resp.OutputAzureEventhub.Sasl == nil {
			r.OutputAzureEventhub.Sasl = nil
		} else {
			r.OutputAzureEventhub.Sasl = &tfTypes.OutputAzureEventhubAuthentication{}
			r.OutputAzureEventhub.Sasl.Disabled = types.BoolPointerValue(resp.OutputAzureEventhub.Sasl.Disabled)
			if resp.OutputAzureEventhub.Sasl.Mechanism != nil {
				r.OutputAzureEventhub.Sasl.Mechanism = types.StringValue(string(*resp.OutputAzureEventhub.Sasl.Mechanism))
			} else {
				r.OutputAzureEventhub.Sasl.Mechanism = types.StringNull()
			}
		}
		r.OutputAzureEventhub.Streamtags = make([]types.String, 0, len(resp.OutputAzureEventhub.Streamtags))
		for _, v := range resp.OutputAzureEventhub.Streamtags {
			r.OutputAzureEventhub.Streamtags = append(r.OutputAzureEventhub.Streamtags, types.StringValue(v))
		}
		r.OutputAzureEventhub.SystemFields = make([]types.String, 0, len(resp.OutputAzureEventhub.SystemFields))
		for _, v := range resp.OutputAzureEventhub.SystemFields {
			r.OutputAzureEventhub.SystemFields = append(r.OutputAzureEventhub.SystemFields, types.StringValue(v))
		}
		if resp.OutputAzureEventhub.TLS == nil {
			r.OutputAzureEventhub.TLS = nil
		} else {
			r.OutputAzureEventhub.TLS = &tfTypes.OutputAzureEventhubTLSSettingsClientSide{}
			r.OutputAzureEventhub.TLS.Disabled = types.BoolPointerValue(resp.OutputAzureEventhub.TLS.Disabled)
			r.OutputAzureEventhub.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputAzureEventhub.TLS.RejectUnauthorized)
		}
		r.OutputAzureEventhub.Topic = types.StringValue(resp.OutputAzureEventhub.Topic)
		if resp.OutputAzureEventhub.Type != nil {
			r.OutputAzureEventhub.Type = types.StringValue(string(*resp.OutputAzureEventhub.Type))
		} else {
			r.OutputAzureEventhub.Type = types.StringNull()
		}
	}
	if resp.OutputAzureLogs != nil {
		r.OutputAzureLogs = &tfTypes.OutputAzureLogs{}
		r.OutputAzureLogs.APIURL = types.StringPointerValue(resp.OutputAzureLogs.APIURL)
		if resp.OutputAzureLogs.AuthType != nil {
			r.OutputAzureLogs.AuthType = types.StringValue(string(*resp.OutputAzureLogs.AuthType))
		} else {
			r.OutputAzureLogs.AuthType = types.StringNull()
		}
		r.OutputAzureLogs.Compress = types.BoolPointerValue(resp.OutputAzureLogs.Compress)
		r.OutputAzureLogs.Concurrency = types.Float64PointerValue(resp.OutputAzureLogs.Concurrency)
		r.OutputAzureLogs.Description = types.StringPointerValue(resp.OutputAzureLogs.Description)
		r.OutputAzureLogs.Environment = types.StringPointerValue(resp.OutputAzureLogs.Environment)
		r.OutputAzureLogs.ExtraHTTPHeaders = []tfTypes.OutputAzureLogsExtraHTTPHeaders{}
		if len(r.OutputAzureLogs.ExtraHTTPHeaders) > len(resp.OutputAzureLogs.ExtraHTTPHeaders) {
			r.OutputAzureLogs.ExtraHTTPHeaders = r.OutputAzureLogs.ExtraHTTPHeaders[:len(resp.OutputAzureLogs.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount, extraHTTPHeadersItem := range resp.OutputAzureLogs.ExtraHTTPHeaders {
			var extraHTTPHeaders tfTypes.OutputAzureLogsExtraHTTPHeaders
			extraHTTPHeaders.Name = types.StringPointerValue(extraHTTPHeadersItem.Name)
			extraHTTPHeaders.Value = types.StringValue(extraHTTPHeadersItem.Value)
			if extraHTTPHeadersCount+1 > len(r.OutputAzureLogs.ExtraHTTPHeaders) {
				r.OutputAzureLogs.ExtraHTTPHeaders = append(r.OutputAzureLogs.ExtraHTTPHeaders, extraHTTPHeaders)
			} else {
				r.OutputAzureLogs.ExtraHTTPHeaders[extraHTTPHeadersCount].Name = extraHTTPHeaders.Name
				r.OutputAzureLogs.ExtraHTTPHeaders[extraHTTPHeadersCount].Value = extraHTTPHeaders.Value
			}
		}
		if resp.OutputAzureLogs.FailedRequestLoggingMode != nil {
			r.OutputAzureLogs.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputAzureLogs.FailedRequestLoggingMode))
		} else {
			r.OutputAzureLogs.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputAzureLogs.FlushPeriodSec = types.Float64PointerValue(resp.OutputAzureLogs.FlushPeriodSec)
		r.OutputAzureLogs.ID = types.StringPointerValue(resp.OutputAzureLogs.ID)
		r.OutputAzureLogs.KeypairSecret = types.StringPointerValue(resp.OutputAzureLogs.KeypairSecret)
		r.OutputAzureLogs.LogType = types.StringPointerValue(resp.OutputAzureLogs.LogType)
		r.OutputAzureLogs.MaxPayloadEvents = types.Float64PointerValue(resp.OutputAzureLogs.MaxPayloadEvents)
		r.OutputAzureLogs.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputAzureLogs.MaxPayloadSizeKB)
		if resp.OutputAzureLogs.OnBackpressure != nil {
			r.OutputAzureLogs.OnBackpressure = types.StringValue(string(*resp.OutputAzureLogs.OnBackpressure))
		} else {
			r.OutputAzureLogs.OnBackpressure = types.StringNull()
		}
		r.OutputAzureLogs.Pipeline = types.StringPointerValue(resp.OutputAzureLogs.Pipeline)
		if resp.OutputAzureLogs.PqCompress != nil {
			r.OutputAzureLogs.PqCompress = types.StringValue(string(*resp.OutputAzureLogs.PqCompress))
		} else {
			r.OutputAzureLogs.PqCompress = types.StringNull()
		}
		if resp.OutputAzureLogs.PqControls == nil {
			r.OutputAzureLogs.PqControls = nil
		} else {
			r.OutputAzureLogs.PqControls = &tfTypes.OutputAzureLogsPqControls{}
		}
		r.OutputAzureLogs.PqMaxFileSize = types.StringPointerValue(resp.OutputAzureLogs.PqMaxFileSize)
		r.OutputAzureLogs.PqMaxSize = types.StringPointerValue(resp.OutputAzureLogs.PqMaxSize)
		if resp.OutputAzureLogs.PqMode != nil {
			r.OutputAzureLogs.PqMode = types.StringValue(string(*resp.OutputAzureLogs.PqMode))
		} else {
			r.OutputAzureLogs.PqMode = types.StringNull()
		}
		if resp.OutputAzureLogs.PqOnBackpressure != nil {
			r.OutputAzureLogs.PqOnBackpressure = types.StringValue(string(*resp.OutputAzureLogs.PqOnBackpressure))
		} else {
			r.OutputAzureLogs.PqOnBackpressure = types.StringNull()
		}
		r.OutputAzureLogs.PqPath = types.StringPointerValue(resp.OutputAzureLogs.PqPath)
		r.OutputAzureLogs.RejectUnauthorized = types.BoolPointerValue(resp.OutputAzureLogs.RejectUnauthorized)
		r.OutputAzureLogs.ResourceID = types.StringPointerValue(resp.OutputAzureLogs.ResourceID)
		r.OutputAzureLogs.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputAzureLogs.ResponseHonorRetryAfterHeader)
		r.OutputAzureLogs.ResponseRetrySettings = []tfTypes.OutputAzureLogsResponseRetrySettings{}
		if len(r.OutputAzureLogs.ResponseRetrySettings) > len(resp.OutputAzureLogs.ResponseRetrySettings) {
			r.OutputAzureLogs.ResponseRetrySettings = r.OutputAzureLogs.ResponseRetrySettings[:len(resp.OutputAzureLogs.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount1, responseRetrySettingsItem1 := range resp.OutputAzureLogs.ResponseRetrySettings {
			var responseRetrySettings1 tfTypes.OutputAzureLogsResponseRetrySettings
			responseRetrySettings1.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem1.BackoffRate)
			responseRetrySettings1.HTTPStatus = types.Float64Value(responseRetrySettingsItem1.HTTPStatus)
			responseRetrySettings1.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem1.InitialBackoff)
			responseRetrySettings1.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem1.MaxBackoff)
			if responseRetrySettingsCount1+1 > len(r.OutputAzureLogs.ResponseRetrySettings) {
				r.OutputAzureLogs.ResponseRetrySettings = append(r.OutputAzureLogs.ResponseRetrySettings, responseRetrySettings1)
			} else {
				r.OutputAzureLogs.ResponseRetrySettings[responseRetrySettingsCount1].BackoffRate = responseRetrySettings1.BackoffRate
				r.OutputAzureLogs.ResponseRetrySettings[responseRetrySettingsCount1].HTTPStatus = responseRetrySettings1.HTTPStatus
				r.OutputAzureLogs.ResponseRetrySettings[responseRetrySettingsCount1].InitialBackoff = responseRetrySettings1.InitialBackoff
				r.OutputAzureLogs.ResponseRetrySettings[responseRetrySettingsCount1].MaxBackoff = responseRetrySettings1.MaxBackoff
			}
		}
		r.OutputAzureLogs.SafeHeaders = make([]types.String, 0, len(resp.OutputAzureLogs.SafeHeaders))
		for _, v := range resp.OutputAzureLogs.SafeHeaders {
			r.OutputAzureLogs.SafeHeaders = append(r.OutputAzureLogs.SafeHeaders, types.StringValue(v))
		}
		r.OutputAzureLogs.Streamtags = make([]types.String, 0, len(resp.OutputAzureLogs.Streamtags))
		for _, v := range resp.OutputAzureLogs.Streamtags {
			r.OutputAzureLogs.Streamtags = append(r.OutputAzureLogs.Streamtags, types.StringValue(v))
		}
		r.OutputAzureLogs.SystemFields = make([]types.String, 0, len(resp.OutputAzureLogs.SystemFields))
		for _, v := range resp.OutputAzureLogs.SystemFields {
			r.OutputAzureLogs.SystemFields = append(r.OutputAzureLogs.SystemFields, types.StringValue(v))
		}
		if resp.OutputAzureLogs.TimeoutRetrySettings == nil {
			r.OutputAzureLogs.TimeoutRetrySettings = nil
		} else {
			r.OutputAzureLogs.TimeoutRetrySettings = &tfTypes.OutputAzureLogsTimeoutRetrySettings{}
			r.OutputAzureLogs.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputAzureLogs.TimeoutRetrySettings.BackoffRate)
			r.OutputAzureLogs.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputAzureLogs.TimeoutRetrySettings.InitialBackoff)
			r.OutputAzureLogs.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputAzureLogs.TimeoutRetrySettings.MaxBackoff)
			r.OutputAzureLogs.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputAzureLogs.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputAzureLogs.TimeoutSec = types.Float64PointerValue(resp.OutputAzureLogs.TimeoutSec)
		r.OutputAzureLogs.Type = types.StringValue(string(resp.OutputAzureLogs.Type))
		r.OutputAzureLogs.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputAzureLogs.UseRoundRobinDNS)
		r.OutputAzureLogs.WorkspaceID = types.StringPointerValue(resp.OutputAzureLogs.WorkspaceID)
		r.OutputAzureLogs.WorkspaceKey = types.StringPointerValue(resp.OutputAzureLogs.WorkspaceKey)
	}
	if resp.OutputClickHouse != nil {
		r.OutputClickHouse = &tfTypes.OutputClickHouse{}
		r.OutputClickHouse.AsyncInserts = types.BoolPointerValue(resp.OutputClickHouse.AsyncInserts)
		r.OutputClickHouse.AuthHeaderExpr = types.StringPointerValue(resp.OutputClickHouse.AuthHeaderExpr)
		if resp.OutputClickHouse.AuthType != nil {
			r.OutputClickHouse.AuthType = types.StringValue(string(*resp.OutputClickHouse.AuthType))
		} else {
			r.OutputClickHouse.AuthType = types.StringNull()
		}
		r.OutputClickHouse.ColumnMappings = []tfTypes.ColumnMappings{}
		if len(r.OutputClickHouse.ColumnMappings) > len(resp.OutputClickHouse.ColumnMappings) {
			r.OutputClickHouse.ColumnMappings = r.OutputClickHouse.ColumnMappings[:len(resp.OutputClickHouse.ColumnMappings)]
		}
		for columnMappingsCount, columnMappingsItem := range resp.OutputClickHouse.ColumnMappings {
			var columnMappings tfTypes.ColumnMappings
			columnMappings.ColumnName = types.StringValue(columnMappingsItem.ColumnName)
			columnMappings.ColumnType = types.StringPointerValue(columnMappingsItem.ColumnType)
			columnMappings.ColumnValueExpression = types.StringValue(columnMappingsItem.ColumnValueExpression)
			if columnMappingsCount+1 > len(r.OutputClickHouse.ColumnMappings) {
				r.OutputClickHouse.ColumnMappings = append(r.OutputClickHouse.ColumnMappings, columnMappings)
			} else {
				r.OutputClickHouse.ColumnMappings[columnMappingsCount].ColumnName = columnMappings.ColumnName
				r.OutputClickHouse.ColumnMappings[columnMappingsCount].ColumnType = columnMappings.ColumnType
				r.OutputClickHouse.ColumnMappings[columnMappingsCount].ColumnValueExpression = columnMappings.ColumnValueExpression
			}
		}
		r.OutputClickHouse.Compress = types.BoolPointerValue(resp.OutputClickHouse.Compress)
		r.OutputClickHouse.Concurrency = types.Float64PointerValue(resp.OutputClickHouse.Concurrency)
		r.OutputClickHouse.CredentialsSecret = types.StringPointerValue(resp.OutputClickHouse.CredentialsSecret)
		r.OutputClickHouse.Database = types.StringValue(resp.OutputClickHouse.Database)
		r.OutputClickHouse.DescribeTable = types.StringPointerValue(resp.OutputClickHouse.DescribeTable)
		r.OutputClickHouse.Description = types.StringPointerValue(resp.OutputClickHouse.Description)
		r.OutputClickHouse.DumpFormatErrorsToDisk = types.BoolPointerValue(resp.OutputClickHouse.DumpFormatErrorsToDisk)
		r.OutputClickHouse.Environment = types.StringPointerValue(resp.OutputClickHouse.Environment)
		r.OutputClickHouse.ExcludeMappingFields = make([]types.String, 0, len(resp.OutputClickHouse.ExcludeMappingFields))
		for _, v := range resp.OutputClickHouse.ExcludeMappingFields {
			r.OutputClickHouse.ExcludeMappingFields = append(r.OutputClickHouse.ExcludeMappingFields, types.StringValue(v))
		}
		r.OutputClickHouse.ExtraHTTPHeaders = []tfTypes.OutputClickHouseExtraHTTPHeaders{}
		if len(r.OutputClickHouse.ExtraHTTPHeaders) > len(resp.OutputClickHouse.ExtraHTTPHeaders) {
			r.OutputClickHouse.ExtraHTTPHeaders = r.OutputClickHouse.ExtraHTTPHeaders[:len(resp.OutputClickHouse.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount1, extraHTTPHeadersItem1 := range resp.OutputClickHouse.ExtraHTTPHeaders {
			var extraHTTPHeaders1 tfTypes.OutputClickHouseExtraHTTPHeaders
			extraHTTPHeaders1.Name = types.StringPointerValue(extraHTTPHeadersItem1.Name)
			extraHTTPHeaders1.Value = types.StringValue(extraHTTPHeadersItem1.Value)
			if extraHTTPHeadersCount1+1 > len(r.OutputClickHouse.ExtraHTTPHeaders) {
				r.OutputClickHouse.ExtraHTTPHeaders = append(r.OutputClickHouse.ExtraHTTPHeaders, extraHTTPHeaders1)
			} else {
				r.OutputClickHouse.ExtraHTTPHeaders[extraHTTPHeadersCount1].Name = extraHTTPHeaders1.Name
				r.OutputClickHouse.ExtraHTTPHeaders[extraHTTPHeadersCount1].Value = extraHTTPHeaders1.Value
			}
		}
		if resp.OutputClickHouse.FailedRequestLoggingMode != nil {
			r.OutputClickHouse.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputClickHouse.FailedRequestLoggingMode))
		} else {
			r.OutputClickHouse.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputClickHouse.FlushPeriodSec = types.Float64PointerValue(resp.OutputClickHouse.FlushPeriodSec)
		if resp.OutputClickHouse.Format != nil {
			r.OutputClickHouse.Format = types.StringValue(string(*resp.OutputClickHouse.Format))
		} else {
			r.OutputClickHouse.Format = types.StringNull()
		}
		r.OutputClickHouse.ID = types.StringPointerValue(resp.OutputClickHouse.ID)
		r.OutputClickHouse.LoginURL = types.StringPointerValue(resp.OutputClickHouse.LoginURL)
		if resp.OutputClickHouse.MappingType != nil {
			r.OutputClickHouse.MappingType = types.StringValue(string(*resp.OutputClickHouse.MappingType))
		} else {
			r.OutputClickHouse.MappingType = types.StringNull()
		}
		r.OutputClickHouse.MaxPayloadEvents = types.Float64PointerValue(resp.OutputClickHouse.MaxPayloadEvents)
		r.OutputClickHouse.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputClickHouse.MaxPayloadSizeKB)
		r.OutputClickHouse.OauthHeaders = []tfTypes.OutputClickHouseOauthHeaders{}
		if len(r.OutputClickHouse.OauthHeaders) > len(resp.OutputClickHouse.OauthHeaders) {
			r.OutputClickHouse.OauthHeaders = r.OutputClickHouse.OauthHeaders[:len(resp.OutputClickHouse.OauthHeaders)]
		}
		for oauthHeadersCount, oauthHeadersItem := range resp.OutputClickHouse.OauthHeaders {
			var oauthHeaders tfTypes.OutputClickHouseOauthHeaders
			oauthHeaders.Name = types.StringValue(oauthHeadersItem.Name)
			oauthHeaders.Value = types.StringValue(oauthHeadersItem.Value)
			if oauthHeadersCount+1 > len(r.OutputClickHouse.OauthHeaders) {
				r.OutputClickHouse.OauthHeaders = append(r.OutputClickHouse.OauthHeaders, oauthHeaders)
			} else {
				r.OutputClickHouse.OauthHeaders[oauthHeadersCount].Name = oauthHeaders.Name
				r.OutputClickHouse.OauthHeaders[oauthHeadersCount].Value = oauthHeaders.Value
			}
		}
		r.OutputClickHouse.OauthParams = []tfTypes.OutputClickHouseOauthParams{}
		if len(r.OutputClickHouse.OauthParams) > len(resp.OutputClickHouse.OauthParams) {
			r.OutputClickHouse.OauthParams = r.OutputClickHouse.OauthParams[:len(resp.OutputClickHouse.OauthParams)]
		}
		for oauthParamsCount, oauthParamsItem := range resp.OutputClickHouse.OauthParams {
			var oauthParams tfTypes.OutputClickHouseOauthParams
			oauthParams.Name = types.StringValue(oauthParamsItem.Name)
			oauthParams.Value = types.StringValue(oauthParamsItem.Value)
			if oauthParamsCount+1 > len(r.OutputClickHouse.OauthParams) {
				r.OutputClickHouse.OauthParams = append(r.OutputClickHouse.OauthParams, oauthParams)
			} else {
				r.OutputClickHouse.OauthParams[oauthParamsCount].Name = oauthParams.Name
				r.OutputClickHouse.OauthParams[oauthParamsCount].Value = oauthParams.Value
			}
		}
		if resp.OutputClickHouse.OnBackpressure != nil {
			r.OutputClickHouse.OnBackpressure = types.StringValue(string(*resp.OutputClickHouse.OnBackpressure))
		} else {
			r.OutputClickHouse.OnBackpressure = types.StringNull()
		}
		r.OutputClickHouse.Password = types.StringPointerValue(resp.OutputClickHouse.Password)
		r.OutputClickHouse.Pipeline = types.StringPointerValue(resp.OutputClickHouse.Pipeline)
		if resp.OutputClickHouse.PqCompress != nil {
			r.OutputClickHouse.PqCompress = types.StringValue(string(*resp.OutputClickHouse.PqCompress))
		} else {
			r.OutputClickHouse.PqCompress = types.StringNull()
		}
		if resp.OutputClickHouse.PqControls == nil {
			r.OutputClickHouse.PqControls = nil
		} else {
			r.OutputClickHouse.PqControls = &tfTypes.OutputClickHousePqControls{}
		}
		r.OutputClickHouse.PqMaxFileSize = types.StringPointerValue(resp.OutputClickHouse.PqMaxFileSize)
		r.OutputClickHouse.PqMaxSize = types.StringPointerValue(resp.OutputClickHouse.PqMaxSize)
		if resp.OutputClickHouse.PqMode != nil {
			r.OutputClickHouse.PqMode = types.StringValue(string(*resp.OutputClickHouse.PqMode))
		} else {
			r.OutputClickHouse.PqMode = types.StringNull()
		}
		if resp.OutputClickHouse.PqOnBackpressure != nil {
			r.OutputClickHouse.PqOnBackpressure = types.StringValue(string(*resp.OutputClickHouse.PqOnBackpressure))
		} else {
			r.OutputClickHouse.PqOnBackpressure = types.StringNull()
		}
		r.OutputClickHouse.PqPath = types.StringPointerValue(resp.OutputClickHouse.PqPath)
		r.OutputClickHouse.RejectUnauthorized = types.BoolPointerValue(resp.OutputClickHouse.RejectUnauthorized)
		r.OutputClickHouse.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputClickHouse.ResponseHonorRetryAfterHeader)
		r.OutputClickHouse.ResponseRetrySettings = []tfTypes.OutputClickHouseResponseRetrySettings{}
		if len(r.OutputClickHouse.ResponseRetrySettings) > len(resp.OutputClickHouse.ResponseRetrySettings) {
			r.OutputClickHouse.ResponseRetrySettings = r.OutputClickHouse.ResponseRetrySettings[:len(resp.OutputClickHouse.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount2, responseRetrySettingsItem2 := range resp.OutputClickHouse.ResponseRetrySettings {
			var responseRetrySettings2 tfTypes.OutputClickHouseResponseRetrySettings
			responseRetrySettings2.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem2.BackoffRate)
			responseRetrySettings2.HTTPStatus = types.Float64Value(responseRetrySettingsItem2.HTTPStatus)
			responseRetrySettings2.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem2.InitialBackoff)
			responseRetrySettings2.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem2.MaxBackoff)
			if responseRetrySettingsCount2+1 > len(r.OutputClickHouse.ResponseRetrySettings) {
				r.OutputClickHouse.ResponseRetrySettings = append(r.OutputClickHouse.ResponseRetrySettings, responseRetrySettings2)
			} else {
				r.OutputClickHouse.ResponseRetrySettings[responseRetrySettingsCount2].BackoffRate = responseRetrySettings2.BackoffRate
				r.OutputClickHouse.ResponseRetrySettings[responseRetrySettingsCount2].HTTPStatus = responseRetrySettings2.HTTPStatus
				r.OutputClickHouse.ResponseRetrySettings[responseRetrySettingsCount2].InitialBackoff = responseRetrySettings2.InitialBackoff
				r.OutputClickHouse.ResponseRetrySettings[responseRetrySettingsCount2].MaxBackoff = responseRetrySettings2.MaxBackoff
			}
		}
		r.OutputClickHouse.SafeHeaders = make([]types.String, 0, len(resp.OutputClickHouse.SafeHeaders))
		for _, v := range resp.OutputClickHouse.SafeHeaders {
			r.OutputClickHouse.SafeHeaders = append(r.OutputClickHouse.SafeHeaders, types.StringValue(v))
		}
		r.OutputClickHouse.Secret = types.StringPointerValue(resp.OutputClickHouse.Secret)
		r.OutputClickHouse.SecretParamName = types.StringPointerValue(resp.OutputClickHouse.SecretParamName)
		r.OutputClickHouse.SQLUsername = types.StringPointerValue(resp.OutputClickHouse.SQLUsername)
		r.OutputClickHouse.Streamtags = make([]types.String, 0, len(resp.OutputClickHouse.Streamtags))
		for _, v := range resp.OutputClickHouse.Streamtags {
			r.OutputClickHouse.Streamtags = append(r.OutputClickHouse.Streamtags, types.StringValue(v))
		}
		r.OutputClickHouse.SystemFields = make([]types.String, 0, len(resp.OutputClickHouse.SystemFields))
		for _, v := range resp.OutputClickHouse.SystemFields {
			r.OutputClickHouse.SystemFields = append(r.OutputClickHouse.SystemFields, types.StringValue(v))
		}
		r.OutputClickHouse.TableName = types.StringValue(resp.OutputClickHouse.TableName)
		r.OutputClickHouse.TextSecret = types.StringPointerValue(resp.OutputClickHouse.TextSecret)
		if resp.OutputClickHouse.TimeoutRetrySettings == nil {
			r.OutputClickHouse.TimeoutRetrySettings = nil
		} else {
			r.OutputClickHouse.TimeoutRetrySettings = &tfTypes.OutputClickHouseTimeoutRetrySettings{}
			r.OutputClickHouse.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputClickHouse.TimeoutRetrySettings.BackoffRate)
			r.OutputClickHouse.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputClickHouse.TimeoutRetrySettings.InitialBackoff)
			r.OutputClickHouse.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputClickHouse.TimeoutRetrySettings.MaxBackoff)
			r.OutputClickHouse.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputClickHouse.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputClickHouse.TimeoutSec = types.Float64PointerValue(resp.OutputClickHouse.TimeoutSec)
		if resp.OutputClickHouse.TLS == nil {
			r.OutputClickHouse.TLS = nil
		} else {
			r.OutputClickHouse.TLS = &tfTypes.OutputClickHouseTLSSettingsClientSide{}
			r.OutputClickHouse.TLS.CaPath = types.StringPointerValue(resp.OutputClickHouse.TLS.CaPath)
			r.OutputClickHouse.TLS.CertificateName = types.StringPointerValue(resp.OutputClickHouse.TLS.CertificateName)
			r.OutputClickHouse.TLS.CertPath = types.StringPointerValue(resp.OutputClickHouse.TLS.CertPath)
			r.OutputClickHouse.TLS.Disabled = types.BoolPointerValue(resp.OutputClickHouse.TLS.Disabled)
			if resp.OutputClickHouse.TLS.MaxVersion != nil {
				r.OutputClickHouse.TLS.MaxVersion = types.StringValue(string(*resp.OutputClickHouse.TLS.MaxVersion))
			} else {
				r.OutputClickHouse.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputClickHouse.TLS.MinVersion != nil {
				r.OutputClickHouse.TLS.MinVersion = types.StringValue(string(*resp.OutputClickHouse.TLS.MinVersion))
			} else {
				r.OutputClickHouse.TLS.MinVersion = types.StringNull()
			}
			r.OutputClickHouse.TLS.Passphrase = types.StringPointerValue(resp.OutputClickHouse.TLS.Passphrase)
			r.OutputClickHouse.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputClickHouse.TLS.PrivKeyPath)
			r.OutputClickHouse.TLS.Servername = types.StringPointerValue(resp.OutputClickHouse.TLS.Servername)
		}
		r.OutputClickHouse.Token = types.StringPointerValue(resp.OutputClickHouse.Token)
		r.OutputClickHouse.TokenAttributeName = types.StringPointerValue(resp.OutputClickHouse.TokenAttributeName)
		r.OutputClickHouse.TokenTimeoutSecs = types.Float64PointerValue(resp.OutputClickHouse.TokenTimeoutSecs)
		if resp.OutputClickHouse.Type != nil {
			r.OutputClickHouse.Type = types.StringValue(string(*resp.OutputClickHouse.Type))
		} else {
			r.OutputClickHouse.Type = types.StringNull()
		}
		r.OutputClickHouse.URL = types.StringValue(resp.OutputClickHouse.URL)
		r.OutputClickHouse.Username = types.StringPointerValue(resp.OutputClickHouse.Username)
		r.OutputClickHouse.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputClickHouse.UseRoundRobinDNS)
		r.OutputClickHouse.WaitForAsyncInserts = types.BoolPointerValue(resp.OutputClickHouse.WaitForAsyncInserts)
	}
	if resp.OutputCloudwatch != nil {
		r.OutputCloudwatch = &tfTypes.OutputCloudwatch{}
		r.OutputCloudwatch.AssumeRoleArn = types.StringPointerValue(resp.OutputCloudwatch.AssumeRoleArn)
		r.OutputCloudwatch.AssumeRoleExternalID = types.StringPointerValue(resp.OutputCloudwatch.AssumeRoleExternalID)
		r.OutputCloudwatch.AwsAPIKey = types.StringPointerValue(resp.OutputCloudwatch.AwsAPIKey)
		if resp.OutputCloudwatch.AwsAuthenticationMethod != nil {
			r.OutputCloudwatch.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputCloudwatch.AwsAuthenticationMethod))
		} else {
			r.OutputCloudwatch.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputCloudwatch.AwsSecret = types.StringPointerValue(resp.OutputCloudwatch.AwsSecret)
		r.OutputCloudwatch.AwsSecretKey = types.StringPointerValue(resp.OutputCloudwatch.AwsSecretKey)
		r.OutputCloudwatch.Description = types.StringPointerValue(resp.OutputCloudwatch.Description)
		r.OutputCloudwatch.DurationSeconds = types.Float64PointerValue(resp.OutputCloudwatch.DurationSeconds)
		r.OutputCloudwatch.EnableAssumeRole = types.BoolPointerValue(resp.OutputCloudwatch.EnableAssumeRole)
		r.OutputCloudwatch.Endpoint = types.StringPointerValue(resp.OutputCloudwatch.Endpoint)
		r.OutputCloudwatch.Environment = types.StringPointerValue(resp.OutputCloudwatch.Environment)
		r.OutputCloudwatch.FlushPeriodSec = types.Float64PointerValue(resp.OutputCloudwatch.FlushPeriodSec)
		r.OutputCloudwatch.ID = types.StringPointerValue(resp.OutputCloudwatch.ID)
		r.OutputCloudwatch.LogGroupName = types.StringValue(resp.OutputCloudwatch.LogGroupName)
		r.OutputCloudwatch.LogStreamName = types.StringValue(resp.OutputCloudwatch.LogStreamName)
		r.OutputCloudwatch.MaxQueueSize = types.Float64PointerValue(resp.OutputCloudwatch.MaxQueueSize)
		r.OutputCloudwatch.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputCloudwatch.MaxRecordSizeKB)
		if resp.OutputCloudwatch.OnBackpressure != nil {
			r.OutputCloudwatch.OnBackpressure = types.StringValue(string(*resp.OutputCloudwatch.OnBackpressure))
		} else {
			r.OutputCloudwatch.OnBackpressure = types.StringNull()
		}
		r.OutputCloudwatch.Pipeline = types.StringPointerValue(resp.OutputCloudwatch.Pipeline)
		if resp.OutputCloudwatch.PqCompress != nil {
			r.OutputCloudwatch.PqCompress = types.StringValue(string(*resp.OutputCloudwatch.PqCompress))
		} else {
			r.OutputCloudwatch.PqCompress = types.StringNull()
		}
		if resp.OutputCloudwatch.PqControls == nil {
			r.OutputCloudwatch.PqControls = nil
		} else {
			r.OutputCloudwatch.PqControls = &tfTypes.OutputCloudwatchPqControls{}
		}
		r.OutputCloudwatch.PqMaxFileSize = types.StringPointerValue(resp.OutputCloudwatch.PqMaxFileSize)
		r.OutputCloudwatch.PqMaxSize = types.StringPointerValue(resp.OutputCloudwatch.PqMaxSize)
		if resp.OutputCloudwatch.PqMode != nil {
			r.OutputCloudwatch.PqMode = types.StringValue(string(*resp.OutputCloudwatch.PqMode))
		} else {
			r.OutputCloudwatch.PqMode = types.StringNull()
		}
		if resp.OutputCloudwatch.PqOnBackpressure != nil {
			r.OutputCloudwatch.PqOnBackpressure = types.StringValue(string(*resp.OutputCloudwatch.PqOnBackpressure))
		} else {
			r.OutputCloudwatch.PqOnBackpressure = types.StringNull()
		}
		r.OutputCloudwatch.PqPath = types.StringPointerValue(resp.OutputCloudwatch.PqPath)
		r.OutputCloudwatch.Region = types.StringValue(resp.OutputCloudwatch.Region)
		r.OutputCloudwatch.RejectUnauthorized = types.BoolPointerValue(resp.OutputCloudwatch.RejectUnauthorized)
		r.OutputCloudwatch.ReuseConnections = types.BoolPointerValue(resp.OutputCloudwatch.ReuseConnections)
		r.OutputCloudwatch.Streamtags = make([]types.String, 0, len(resp.OutputCloudwatch.Streamtags))
		for _, v := range resp.OutputCloudwatch.Streamtags {
			r.OutputCloudwatch.Streamtags = append(r.OutputCloudwatch.Streamtags, types.StringValue(v))
		}
		r.OutputCloudwatch.SystemFields = make([]types.String, 0, len(resp.OutputCloudwatch.SystemFields))
		for _, v := range resp.OutputCloudwatch.SystemFields {
			r.OutputCloudwatch.SystemFields = append(r.OutputCloudwatch.SystemFields, types.StringValue(v))
		}
		if resp.OutputCloudwatch.Type != nil {
			r.OutputCloudwatch.Type = types.StringValue(string(*resp.OutputCloudwatch.Type))
		} else {
			r.OutputCloudwatch.Type = types.StringNull()
		}
	}
	if resp.OutputConfluentCloud != nil {
		r.OutputConfluentCloud = &tfTypes.OutputConfluentCloud{}
		if resp.OutputConfluentCloud.Ack != nil {
			r.OutputConfluentCloud.Ack = types.Int64Value(int64(*resp.OutputConfluentCloud.Ack))
		} else {
			r.OutputConfluentCloud.Ack = types.Int64Null()
		}
		r.OutputConfluentCloud.AuthenticationTimeout = types.Float64PointerValue(resp.OutputConfluentCloud.AuthenticationTimeout)
		r.OutputConfluentCloud.BackoffRate = types.Float64PointerValue(resp.OutputConfluentCloud.BackoffRate)
		r.OutputConfluentCloud.Brokers = make([]types.String, 0, len(resp.OutputConfluentCloud.Brokers))
		for _, v := range resp.OutputConfluentCloud.Brokers {
			r.OutputConfluentCloud.Brokers = append(r.OutputConfluentCloud.Brokers, types.StringValue(v))
		}
		if resp.OutputConfluentCloud.Compression != nil {
			r.OutputConfluentCloud.Compression = types.StringValue(string(*resp.OutputConfluentCloud.Compression))
		} else {
			r.OutputConfluentCloud.Compression = types.StringNull()
		}
		r.OutputConfluentCloud.ConnectionTimeout = types.Float64PointerValue(resp.OutputConfluentCloud.ConnectionTimeout)
		r.OutputConfluentCloud.Description = types.StringPointerValue(resp.OutputConfluentCloud.Description)
		r.OutputConfluentCloud.Environment = types.StringPointerValue(resp.OutputConfluentCloud.Environment)
		r.OutputConfluentCloud.FlushEventCount = types.Float64PointerValue(resp.OutputConfluentCloud.FlushEventCount)
		r.OutputConfluentCloud.FlushPeriodSec = types.Float64PointerValue(resp.OutputConfluentCloud.FlushPeriodSec)
		if resp.OutputConfluentCloud.Format != nil {
			r.OutputConfluentCloud.Format = types.StringValue(string(*resp.OutputConfluentCloud.Format))
		} else {
			r.OutputConfluentCloud.Format = types.StringNull()
		}
		r.OutputConfluentCloud.ID = types.StringPointerValue(resp.OutputConfluentCloud.ID)
		r.OutputConfluentCloud.InitialBackoff = types.Float64PointerValue(resp.OutputConfluentCloud.InitialBackoff)
		if resp.OutputConfluentCloud.KafkaSchemaRegistry == nil {
			r.OutputConfluentCloud.KafkaSchemaRegistry = nil
		} else {
			r.OutputConfluentCloud.KafkaSchemaRegistry = &tfTypes.OutputConfluentCloudKafkaSchemaRegistryAuthentication{}
			if resp.OutputConfluentCloud.KafkaSchemaRegistry.Auth == nil {
				r.OutputConfluentCloud.KafkaSchemaRegistry.Auth = nil
			} else {
				r.OutputConfluentCloud.KafkaSchemaRegistry.Auth = &tfTypes.OutputConfluentCloudAuth{}
				r.OutputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.OutputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled)
			}
			r.OutputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout)
			r.OutputConfluentCloud.KafkaSchemaRegistry.DefaultKeySchemaID = types.Float64PointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.DefaultKeySchemaID)
			r.OutputConfluentCloud.KafkaSchemaRegistry.DefaultValueSchemaID = types.Float64PointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.DefaultValueSchemaID)
			r.OutputConfluentCloud.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.Disabled)
			r.OutputConfluentCloud.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.MaxRetries)
			r.OutputConfluentCloud.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.RequestTimeout)
			r.OutputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS == nil {
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS = nil
			} else {
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS = &tfTypes.OutputConfluentCloudKafkaSchemaRegistryTLSSettingsClientSide{}
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled)
				if resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.OutputConfluentCloud.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		r.OutputConfluentCloud.MaxBackOff = types.Float64PointerValue(resp.OutputConfluentCloud.MaxBackOff)
		r.OutputConfluentCloud.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputConfluentCloud.MaxRecordSizeKB)
		r.OutputConfluentCloud.MaxRetries = types.Float64PointerValue(resp.OutputConfluentCloud.MaxRetries)
		if resp.OutputConfluentCloud.OnBackpressure != nil {
			r.OutputConfluentCloud.OnBackpressure = types.StringValue(string(*resp.OutputConfluentCloud.OnBackpressure))
		} else {
			r.OutputConfluentCloud.OnBackpressure = types.StringNull()
		}
		r.OutputConfluentCloud.Pipeline = types.StringPointerValue(resp.OutputConfluentCloud.Pipeline)
		if resp.OutputConfluentCloud.PqCompress != nil {
			r.OutputConfluentCloud.PqCompress = types.StringValue(string(*resp.OutputConfluentCloud.PqCompress))
		} else {
			r.OutputConfluentCloud.PqCompress = types.StringNull()
		}
		if resp.OutputConfluentCloud.PqControls == nil {
			r.OutputConfluentCloud.PqControls = nil
		} else {
			r.OutputConfluentCloud.PqControls = &tfTypes.OutputConfluentCloudPqControls{}
		}
		r.OutputConfluentCloud.PqMaxFileSize = types.StringPointerValue(resp.OutputConfluentCloud.PqMaxFileSize)
		r.OutputConfluentCloud.PqMaxSize = types.StringPointerValue(resp.OutputConfluentCloud.PqMaxSize)
		if resp.OutputConfluentCloud.PqMode != nil {
			r.OutputConfluentCloud.PqMode = types.StringValue(string(*resp.OutputConfluentCloud.PqMode))
		} else {
			r.OutputConfluentCloud.PqMode = types.StringNull()
		}
		if resp.OutputConfluentCloud.PqOnBackpressure != nil {
			r.OutputConfluentCloud.PqOnBackpressure = types.StringValue(string(*resp.OutputConfluentCloud.PqOnBackpressure))
		} else {
			r.OutputConfluentCloud.PqOnBackpressure = types.StringNull()
		}
		r.OutputConfluentCloud.PqPath = types.StringPointerValue(resp.OutputConfluentCloud.PqPath)
		r.OutputConfluentCloud.ProtobufLibraryID = types.StringPointerValue(resp.OutputConfluentCloud.ProtobufLibraryID)
		r.OutputConfluentCloud.ReauthenticationThreshold = types.Float64PointerValue(resp.OutputConfluentCloud.ReauthenticationThreshold)
		r.OutputConfluentCloud.RequestTimeout = types.Float64PointerValue(resp.OutputConfluentCloud.RequestTimeout)
		if resp.OutputConfluentCloud.Sasl == nil {
			r.OutputConfluentCloud.Sasl = nil
		} else {
			r.OutputConfluentCloud.Sasl = &tfTypes.OutputConfluentCloudAuthentication{}
			r.OutputConfluentCloud.Sasl.Disabled = types.BoolPointerValue(resp.OutputConfluentCloud.Sasl.Disabled)
			if resp.OutputConfluentCloud.Sasl.Mechanism != nil {
				r.OutputConfluentCloud.Sasl.Mechanism = types.StringValue(string(*resp.OutputConfluentCloud.Sasl.Mechanism))
			} else {
				r.OutputConfluentCloud.Sasl.Mechanism = types.StringNull()
			}
		}
		r.OutputConfluentCloud.Streamtags = make([]types.String, 0, len(resp.OutputConfluentCloud.Streamtags))
		for _, v := range resp.OutputConfluentCloud.Streamtags {
			r.OutputConfluentCloud.Streamtags = append(r.OutputConfluentCloud.Streamtags, types.StringValue(v))
		}
		r.OutputConfluentCloud.SystemFields = make([]types.String, 0, len(resp.OutputConfluentCloud.SystemFields))
		for _, v := range resp.OutputConfluentCloud.SystemFields {
			r.OutputConfluentCloud.SystemFields = append(r.OutputConfluentCloud.SystemFields, types.StringValue(v))
		}
		if resp.OutputConfluentCloud.TLS == nil {
			r.OutputConfluentCloud.TLS = nil
		} else {
			r.OutputConfluentCloud.TLS = &tfTypes.OutputConfluentCloudTLSSettingsClientSide{}
			r.OutputConfluentCloud.TLS.CaPath = types.StringPointerValue(resp.OutputConfluentCloud.TLS.CaPath)
			r.OutputConfluentCloud.TLS.CertificateName = types.StringPointerValue(resp.OutputConfluentCloud.TLS.CertificateName)
			r.OutputConfluentCloud.TLS.CertPath = types.StringPointerValue(resp.OutputConfluentCloud.TLS.CertPath)
			r.OutputConfluentCloud.TLS.Disabled = types.BoolPointerValue(resp.OutputConfluentCloud.TLS.Disabled)
			if resp.OutputConfluentCloud.TLS.MaxVersion != nil {
				r.OutputConfluentCloud.TLS.MaxVersion = types.StringValue(string(*resp.OutputConfluentCloud.TLS.MaxVersion))
			} else {
				r.OutputConfluentCloud.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputConfluentCloud.TLS.MinVersion != nil {
				r.OutputConfluentCloud.TLS.MinVersion = types.StringValue(string(*resp.OutputConfluentCloud.TLS.MinVersion))
			} else {
				r.OutputConfluentCloud.TLS.MinVersion = types.StringNull()
			}
			r.OutputConfluentCloud.TLS.Passphrase = types.StringPointerValue(resp.OutputConfluentCloud.TLS.Passphrase)
			r.OutputConfluentCloud.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputConfluentCloud.TLS.PrivKeyPath)
			r.OutputConfluentCloud.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputConfluentCloud.TLS.RejectUnauthorized)
			r.OutputConfluentCloud.TLS.Servername = types.StringPointerValue(resp.OutputConfluentCloud.TLS.Servername)
		}
		r.OutputConfluentCloud.Topic = types.StringValue(resp.OutputConfluentCloud.Topic)
		if resp.OutputConfluentCloud.Type != nil {
			r.OutputConfluentCloud.Type = types.StringValue(string(*resp.OutputConfluentCloud.Type))
		} else {
			r.OutputConfluentCloud.Type = types.StringNull()
		}
	}
	if resp.OutputCriblHTTP != nil {
		r.OutputCriblHTTP = &tfTypes.OutputCriblHTTP{}
		if resp.OutputCriblHTTP.Compression != nil {
			r.OutputCriblHTTP.Compression = types.StringValue(string(*resp.OutputCriblHTTP.Compression))
		} else {
			r.OutputCriblHTTP.Compression = types.StringNull()
		}
		r.OutputCriblHTTP.Concurrency = types.Float64PointerValue(resp.OutputCriblHTTP.Concurrency)
		r.OutputCriblHTTP.Description = types.StringPointerValue(resp.OutputCriblHTTP.Description)
		r.OutputCriblHTTP.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputCriblHTTP.DNSResolvePeriodSec)
		r.OutputCriblHTTP.Environment = types.StringPointerValue(resp.OutputCriblHTTP.Environment)
		r.OutputCriblHTTP.ExcludeFields = make([]types.String, 0, len(resp.OutputCriblHTTP.ExcludeFields))
		for _, v := range resp.OutputCriblHTTP.ExcludeFields {
			r.OutputCriblHTTP.ExcludeFields = append(r.OutputCriblHTTP.ExcludeFields, types.StringValue(v))
		}
		r.OutputCriblHTTP.ExcludeSelf = types.BoolPointerValue(resp.OutputCriblHTTP.ExcludeSelf)
		r.OutputCriblHTTP.ExtraHTTPHeaders = []tfTypes.OutputCriblHTTPExtraHTTPHeaders{}
		if len(r.OutputCriblHTTP.ExtraHTTPHeaders) > len(resp.OutputCriblHTTP.ExtraHTTPHeaders) {
			r.OutputCriblHTTP.ExtraHTTPHeaders = r.OutputCriblHTTP.ExtraHTTPHeaders[:len(resp.OutputCriblHTTP.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount2, extraHTTPHeadersItem2 := range resp.OutputCriblHTTP.ExtraHTTPHeaders {
			var extraHTTPHeaders2 tfTypes.OutputCriblHTTPExtraHTTPHeaders
			extraHTTPHeaders2.Name = types.StringPointerValue(extraHTTPHeadersItem2.Name)
			extraHTTPHeaders2.Value = types.StringValue(extraHTTPHeadersItem2.Value)
			if extraHTTPHeadersCount2+1 > len(r.OutputCriblHTTP.ExtraHTTPHeaders) {
				r.OutputCriblHTTP.ExtraHTTPHeaders = append(r.OutputCriblHTTP.ExtraHTTPHeaders, extraHTTPHeaders2)
			} else {
				r.OutputCriblHTTP.ExtraHTTPHeaders[extraHTTPHeadersCount2].Name = extraHTTPHeaders2.Name
				r.OutputCriblHTTP.ExtraHTTPHeaders[extraHTTPHeadersCount2].Value = extraHTTPHeaders2.Value
			}
		}
		if resp.OutputCriblHTTP.FailedRequestLoggingMode != nil {
			r.OutputCriblHTTP.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputCriblHTTP.FailedRequestLoggingMode))
		} else {
			r.OutputCriblHTTP.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputCriblHTTP.FlushPeriodSec = types.Float64PointerValue(resp.OutputCriblHTTP.FlushPeriodSec)
		r.OutputCriblHTTP.ID = types.StringValue(resp.OutputCriblHTTP.ID)
		r.OutputCriblHTTP.LoadBalanced = types.BoolPointerValue(resp.OutputCriblHTTP.LoadBalanced)
		r.OutputCriblHTTP.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputCriblHTTP.LoadBalanceStatsPeriodSec)
		r.OutputCriblHTTP.MaxPayloadEvents = types.Float64PointerValue(resp.OutputCriblHTTP.MaxPayloadEvents)
		r.OutputCriblHTTP.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputCriblHTTP.MaxPayloadSizeKB)
		if resp.OutputCriblHTTP.OnBackpressure != nil {
			r.OutputCriblHTTP.OnBackpressure = types.StringValue(string(*resp.OutputCriblHTTP.OnBackpressure))
		} else {
			r.OutputCriblHTTP.OnBackpressure = types.StringNull()
		}
		r.OutputCriblHTTP.Pipeline = types.StringPointerValue(resp.OutputCriblHTTP.Pipeline)
		if resp.OutputCriblHTTP.PqCompress != nil {
			r.OutputCriblHTTP.PqCompress = types.StringValue(string(*resp.OutputCriblHTTP.PqCompress))
		} else {
			r.OutputCriblHTTP.PqCompress = types.StringNull()
		}
		if resp.OutputCriblHTTP.PqControls == nil {
			r.OutputCriblHTTP.PqControls = nil
		} else {
			r.OutputCriblHTTP.PqControls = &tfTypes.OutputCriblHTTPPqControls{}
		}
		r.OutputCriblHTTP.PqMaxFileSize = types.StringPointerValue(resp.OutputCriblHTTP.PqMaxFileSize)
		r.OutputCriblHTTP.PqMaxSize = types.StringPointerValue(resp.OutputCriblHTTP.PqMaxSize)
		if resp.OutputCriblHTTP.PqMode != nil {
			r.OutputCriblHTTP.PqMode = types.StringValue(string(*resp.OutputCriblHTTP.PqMode))
		} else {
			r.OutputCriblHTTP.PqMode = types.StringNull()
		}
		if resp.OutputCriblHTTP.PqOnBackpressure != nil {
			r.OutputCriblHTTP.PqOnBackpressure = types.StringValue(string(*resp.OutputCriblHTTP.PqOnBackpressure))
		} else {
			r.OutputCriblHTTP.PqOnBackpressure = types.StringNull()
		}
		r.OutputCriblHTTP.PqPath = types.StringPointerValue(resp.OutputCriblHTTP.PqPath)
		r.OutputCriblHTTP.RejectUnauthorized = types.BoolPointerValue(resp.OutputCriblHTTP.RejectUnauthorized)
		r.OutputCriblHTTP.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputCriblHTTP.ResponseHonorRetryAfterHeader)
		r.OutputCriblHTTP.ResponseRetrySettings = []tfTypes.OutputCriblHTTPResponseRetrySettings{}
		if len(r.OutputCriblHTTP.ResponseRetrySettings) > len(resp.OutputCriblHTTP.ResponseRetrySettings) {
			r.OutputCriblHTTP.ResponseRetrySettings = r.OutputCriblHTTP.ResponseRetrySettings[:len(resp.OutputCriblHTTP.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount3, responseRetrySettingsItem3 := range resp.OutputCriblHTTP.ResponseRetrySettings {
			var responseRetrySettings3 tfTypes.OutputCriblHTTPResponseRetrySettings
			responseRetrySettings3.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem3.BackoffRate)
			responseRetrySettings3.HTTPStatus = types.Float64Value(responseRetrySettingsItem3.HTTPStatus)
			responseRetrySettings3.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem3.InitialBackoff)
			responseRetrySettings3.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem3.MaxBackoff)
			if responseRetrySettingsCount3+1 > len(r.OutputCriblHTTP.ResponseRetrySettings) {
				r.OutputCriblHTTP.ResponseRetrySettings = append(r.OutputCriblHTTP.ResponseRetrySettings, responseRetrySettings3)
			} else {
				r.OutputCriblHTTP.ResponseRetrySettings[responseRetrySettingsCount3].BackoffRate = responseRetrySettings3.BackoffRate
				r.OutputCriblHTTP.ResponseRetrySettings[responseRetrySettingsCount3].HTTPStatus = responseRetrySettings3.HTTPStatus
				r.OutputCriblHTTP.ResponseRetrySettings[responseRetrySettingsCount3].InitialBackoff = responseRetrySettings3.InitialBackoff
				r.OutputCriblHTTP.ResponseRetrySettings[responseRetrySettingsCount3].MaxBackoff = responseRetrySettings3.MaxBackoff
			}
		}
		r.OutputCriblHTTP.SafeHeaders = make([]types.String, 0, len(resp.OutputCriblHTTP.SafeHeaders))
		for _, v := range resp.OutputCriblHTTP.SafeHeaders {
			r.OutputCriblHTTP.SafeHeaders = append(r.OutputCriblHTTP.SafeHeaders, types.StringValue(v))
		}
		if resp.OutputCriblHTTP.Status == nil {
			r.OutputCriblHTTP.Status = nil
		} else {
			r.OutputCriblHTTP.Status = &tfTypes.OutputCriblHTTPStatus{}
			r.OutputCriblHTTP.Status.Health = types.StringValue(string(resp.OutputCriblHTTP.Status.Health))
			if len(resp.OutputCriblHTTP.Status.Metrics) > 0 {
				r.OutputCriblHTTP.Status.Metrics = make(map[string]types.String, len(resp.OutputCriblHTTP.Status.Metrics))
				for key, value := range resp.OutputCriblHTTP.Status.Metrics {
					result, _ := json.Marshal(value)
					r.OutputCriblHTTP.Status.Metrics[key] = types.StringValue(string(result))
				}
			}
			r.OutputCriblHTTP.Status.Timestamp = types.Float64Value(resp.OutputCriblHTTP.Status.Timestamp)
			r.OutputCriblHTTP.Status.UseStatusFromLB = types.BoolPointerValue(resp.OutputCriblHTTP.Status.UseStatusFromLB)
		}
		r.OutputCriblHTTP.Streamtags = make([]types.String, 0, len(resp.OutputCriblHTTP.Streamtags))
		for _, v := range resp.OutputCriblHTTP.Streamtags {
			r.OutputCriblHTTP.Streamtags = append(r.OutputCriblHTTP.Streamtags, types.StringValue(v))
		}
		r.OutputCriblHTTP.SystemFields = make([]types.String, 0, len(resp.OutputCriblHTTP.SystemFields))
		for _, v := range resp.OutputCriblHTTP.SystemFields {
			r.OutputCriblHTTP.SystemFields = append(r.OutputCriblHTTP.SystemFields, types.StringValue(v))
		}
		if resp.OutputCriblHTTP.TimeoutRetrySettings == nil {
			r.OutputCriblHTTP.TimeoutRetrySettings = nil
		} else {
			r.OutputCriblHTTP.TimeoutRetrySettings = &tfTypes.OutputCriblHTTPTimeoutRetrySettings{}
			r.OutputCriblHTTP.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputCriblHTTP.TimeoutRetrySettings.BackoffRate)
			r.OutputCriblHTTP.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputCriblHTTP.TimeoutRetrySettings.InitialBackoff)
			r.OutputCriblHTTP.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputCriblHTTP.TimeoutRetrySettings.MaxBackoff)
			r.OutputCriblHTTP.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputCriblHTTP.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputCriblHTTP.TimeoutSec = types.Float64PointerValue(resp.OutputCriblHTTP.TimeoutSec)
		if resp.OutputCriblHTTP.TLS == nil {
			r.OutputCriblHTTP.TLS = nil
		} else {
			r.OutputCriblHTTP.TLS = &tfTypes.OutputCriblHTTPTLSSettingsClientSide{}
			r.OutputCriblHTTP.TLS.CaPath = types.StringPointerValue(resp.OutputCriblHTTP.TLS.CaPath)
			r.OutputCriblHTTP.TLS.CertificateName = types.StringPointerValue(resp.OutputCriblHTTP.TLS.CertificateName)
			r.OutputCriblHTTP.TLS.CertPath = types.StringPointerValue(resp.OutputCriblHTTP.TLS.CertPath)
			r.OutputCriblHTTP.TLS.Disabled = types.BoolPointerValue(resp.OutputCriblHTTP.TLS.Disabled)
			if resp.OutputCriblHTTP.TLS.MaxVersion != nil {
				r.OutputCriblHTTP.TLS.MaxVersion = types.StringValue(string(*resp.OutputCriblHTTP.TLS.MaxVersion))
			} else {
				r.OutputCriblHTTP.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputCriblHTTP.TLS.MinVersion != nil {
				r.OutputCriblHTTP.TLS.MinVersion = types.StringValue(string(*resp.OutputCriblHTTP.TLS.MinVersion))
			} else {
				r.OutputCriblHTTP.TLS.MinVersion = types.StringNull()
			}
			r.OutputCriblHTTP.TLS.Passphrase = types.StringPointerValue(resp.OutputCriblHTTP.TLS.Passphrase)
			r.OutputCriblHTTP.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputCriblHTTP.TLS.PrivKeyPath)
			r.OutputCriblHTTP.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputCriblHTTP.TLS.RejectUnauthorized)
			r.OutputCriblHTTP.TLS.Servername = types.StringPointerValue(resp.OutputCriblHTTP.TLS.Servername)
		}
		r.OutputCriblHTTP.TokenTTLMinutes = types.Float64PointerValue(resp.OutputCriblHTTP.TokenTTLMinutes)
		r.OutputCriblHTTP.Type = types.StringValue(string(resp.OutputCriblHTTP.Type))
		r.OutputCriblHTTP.URL = types.StringPointerValue(resp.OutputCriblHTTP.URL)
		r.OutputCriblHTTP.Urls = []tfTypes.OutputCriblHTTPUrls{}
		if len(r.OutputCriblHTTP.Urls) > len(resp.OutputCriblHTTP.Urls) {
			r.OutputCriblHTTP.Urls = r.OutputCriblHTTP.Urls[:len(resp.OutputCriblHTTP.Urls)]
		}
		for urlsCount, urlsItem := range resp.OutputCriblHTTP.Urls {
			var urls tfTypes.OutputCriblHTTPUrls
			urls.URL = types.StringValue(urlsItem.URL)
			urls.Weight = types.Float64PointerValue(urlsItem.Weight)
			if urlsCount+1 > len(r.OutputCriblHTTP.Urls) {
				r.OutputCriblHTTP.Urls = append(r.OutputCriblHTTP.Urls, urls)
			} else {
				r.OutputCriblHTTP.Urls[urlsCount].URL = urls.URL
				r.OutputCriblHTTP.Urls[urlsCount].Weight = urls.Weight
			}
		}
		r.OutputCriblHTTP.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputCriblHTTP.UseRoundRobinDNS)
	}
	if resp.OutputCriblLake != nil {
		r.OutputCriblLake = &tfTypes.OutputCriblLake{}
		r.OutputCriblLake.AddIDToStagePath = types.BoolPointerValue(resp.OutputCriblLake.AddIDToStagePath)
		r.OutputCriblLake.AssumeRoleArn = types.StringPointerValue(resp.OutputCriblLake.AssumeRoleArn)
		r.OutputCriblLake.AssumeRoleExternalID = types.StringPointerValue(resp.OutputCriblLake.AssumeRoleExternalID)
		if resp.OutputCriblLake.AwsAuthenticationMethod != nil {
			r.OutputCriblLake.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputCriblLake.AwsAuthenticationMethod))
		} else {
			r.OutputCriblLake.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputCriblLake.AwsSecretKey = types.StringPointerValue(resp.OutputCriblLake.AwsSecretKey)
		r.OutputCriblLake.BaseFileName = types.StringPointerValue(resp.OutputCriblLake.BaseFileName)
		r.OutputCriblLake.Bucket = types.StringPointerValue(resp.OutputCriblLake.Bucket)
		r.OutputCriblLake.DeadletterEnabled = types.BoolPointerValue(resp.OutputCriblLake.DeadletterEnabled)
		r.OutputCriblLake.DeadletterPath = types.StringPointerValue(resp.OutputCriblLake.DeadletterPath)
		r.OutputCriblLake.Description = types.StringPointerValue(resp.OutputCriblLake.Description)
		r.OutputCriblLake.DestPath = types.StringValue(resp.OutputCriblLake.DestPath)
		r.OutputCriblLake.DurationSeconds = types.Float64PointerValue(resp.OutputCriblLake.DurationSeconds)
		r.OutputCriblLake.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputCriblLake.EmptyDirCleanupSec)
		r.OutputCriblLake.EnableAssumeRole = types.BoolPointerValue(resp.OutputCriblLake.EnableAssumeRole)
		r.OutputCriblLake.Endpoint = types.StringPointerValue(resp.OutputCriblLake.Endpoint)
		r.OutputCriblLake.Environment = types.StringPointerValue(resp.OutputCriblLake.Environment)
		r.OutputCriblLake.FileNameSuffix = types.StringPointerValue(resp.OutputCriblLake.FileNameSuffix)
		if resp.OutputCriblLake.Format != nil {
			r.OutputCriblLake.Format = types.StringValue(string(*resp.OutputCriblLake.Format))
		} else {
			r.OutputCriblLake.Format = types.StringNull()
		}
		r.OutputCriblLake.HeaderLine = types.StringPointerValue(resp.OutputCriblLake.HeaderLine)
		r.OutputCriblLake.ID = types.StringPointerValue(resp.OutputCriblLake.ID)
		r.OutputCriblLake.KmsKeyID = types.StringPointerValue(resp.OutputCriblLake.KmsKeyID)
		r.OutputCriblLake.MaxClosingFilesToBackpressure = types.Float64PointerValue(resp.OutputCriblLake.MaxClosingFilesToBackpressure)
		r.OutputCriblLake.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputCriblLake.MaxConcurrentFileParts)
		r.OutputCriblLake.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputCriblLake.MaxFileIdleTimeSec)
		r.OutputCriblLake.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputCriblLake.MaxFileOpenTimeSec)
		r.OutputCriblLake.MaxFileSizeMB = types.Float64PointerValue(resp.OutputCriblLake.MaxFileSizeMB)
		r.OutputCriblLake.MaxOpenFiles = types.Float64PointerValue(resp.OutputCriblLake.MaxOpenFiles)
		r.OutputCriblLake.MaxRetryNum = types.Float64PointerValue(resp.OutputCriblLake.MaxRetryNum)
		if resp.OutputCriblLake.ObjectACL != nil {
			r.OutputCriblLake.ObjectACL = types.StringValue(string(*resp.OutputCriblLake.ObjectACL))
		} else {
			r.OutputCriblLake.ObjectACL = types.StringNull()
		}
		if resp.OutputCriblLake.OnBackpressure != nil {
			r.OutputCriblLake.OnBackpressure = types.StringValue(string(*resp.OutputCriblLake.OnBackpressure))
		} else {
			r.OutputCriblLake.OnBackpressure = types.StringNull()
		}
		if resp.OutputCriblLake.OnDiskFullBackpressure != nil {
			r.OutputCriblLake.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputCriblLake.OnDiskFullBackpressure))
		} else {
			r.OutputCriblLake.OnDiskFullBackpressure = types.StringNull()
		}
		r.OutputCriblLake.Pipeline = types.StringPointerValue(resp.OutputCriblLake.Pipeline)
		r.OutputCriblLake.Region = types.StringPointerValue(resp.OutputCriblLake.Region)
		r.OutputCriblLake.RejectUnauthorized = types.BoolPointerValue(resp.OutputCriblLake.RejectUnauthorized)
		r.OutputCriblLake.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputCriblLake.RemoveEmptyDirs)
		r.OutputCriblLake.ReuseConnections = types.BoolPointerValue(resp.OutputCriblLake.ReuseConnections)
		if resp.OutputCriblLake.ServerSideEncryption != nil {
			r.OutputCriblLake.ServerSideEncryption = types.StringValue(string(*resp.OutputCriblLake.ServerSideEncryption))
		} else {
			r.OutputCriblLake.ServerSideEncryption = types.StringNull()
		}
		if resp.OutputCriblLake.SignatureVersion != nil {
			r.OutputCriblLake.SignatureVersion = types.StringValue(string(*resp.OutputCriblLake.SignatureVersion))
		} else {
			r.OutputCriblLake.SignatureVersion = types.StringNull()
		}
		r.OutputCriblLake.StagePath = types.StringPointerValue(resp.OutputCriblLake.StagePath)
		if resp.OutputCriblLake.StorageClass != nil {
			r.OutputCriblLake.StorageClass = types.StringValue(string(*resp.OutputCriblLake.StorageClass))
		} else {
			r.OutputCriblLake.StorageClass = types.StringNull()
		}
		r.OutputCriblLake.Streamtags = make([]types.String, 0, len(resp.OutputCriblLake.Streamtags))
		for _, v := range resp.OutputCriblLake.Streamtags {
			r.OutputCriblLake.Streamtags = append(r.OutputCriblLake.Streamtags, types.StringValue(v))
		}
		r.OutputCriblLake.SystemFields = make([]types.String, 0, len(resp.OutputCriblLake.SystemFields))
		for _, v := range resp.OutputCriblLake.SystemFields {
			r.OutputCriblLake.SystemFields = append(r.OutputCriblLake.SystemFields, types.StringValue(v))
		}
		r.OutputCriblLake.Type = types.StringValue(string(resp.OutputCriblLake.Type))
		r.OutputCriblLake.VerifyPermissions = types.BoolPointerValue(resp.OutputCriblLake.VerifyPermissions)
		r.OutputCriblLake.WriteHighWaterMark = types.Float64PointerValue(resp.OutputCriblLake.WriteHighWaterMark)
	}
	if resp.OutputCriblTCP != nil {
		r.OutputCriblTCP = &tfTypes.OutputCriblTCP{}
		if resp.OutputCriblTCP.Compression != nil {
			r.OutputCriblTCP.Compression = types.StringValue(string(*resp.OutputCriblTCP.Compression))
		} else {
			r.OutputCriblTCP.Compression = types.StringNull()
		}
		r.OutputCriblTCP.ConnectionTimeout = types.Float64PointerValue(resp.OutputCriblTCP.ConnectionTimeout)
		r.OutputCriblTCP.Description = types.StringPointerValue(resp.OutputCriblTCP.Description)
		r.OutputCriblTCP.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputCriblTCP.DNSResolvePeriodSec)
		r.OutputCriblTCP.Environment = types.StringPointerValue(resp.OutputCriblTCP.Environment)
		r.OutputCriblTCP.ExcludeFields = make([]types.String, 0, len(resp.OutputCriblTCP.ExcludeFields))
		for _, v := range resp.OutputCriblTCP.ExcludeFields {
			r.OutputCriblTCP.ExcludeFields = append(r.OutputCriblTCP.ExcludeFields, types.StringValue(v))
		}
		r.OutputCriblTCP.ExcludeSelf = types.BoolPointerValue(resp.OutputCriblTCP.ExcludeSelf)
		r.OutputCriblTCP.Host = types.StringPointerValue(resp.OutputCriblTCP.Host)
		r.OutputCriblTCP.Hosts = []tfTypes.OutputCriblTCPHosts{}
		if len(r.OutputCriblTCP.Hosts) > len(resp.OutputCriblTCP.Hosts) {
			r.OutputCriblTCP.Hosts = r.OutputCriblTCP.Hosts[:len(resp.OutputCriblTCP.Hosts)]
		}
		for hostsCount, hostsItem := range resp.OutputCriblTCP.Hosts {
			var hosts tfTypes.OutputCriblTCPHosts
			hosts.Host = types.StringValue(hostsItem.Host)
			hosts.Port = types.Float64PointerValue(hostsItem.Port)
			hosts.Servername = types.StringPointerValue(hostsItem.Servername)
			if hostsItem.TLS != nil {
				hosts.TLS = types.StringValue(string(*hostsItem.TLS))
			} else {
				hosts.TLS = types.StringNull()
			}
			hosts.Weight = types.Float64PointerValue(hostsItem.Weight)
			if hostsCount+1 > len(r.OutputCriblTCP.Hosts) {
				r.OutputCriblTCP.Hosts = append(r.OutputCriblTCP.Hosts, hosts)
			} else {
				r.OutputCriblTCP.Hosts[hostsCount].Host = hosts.Host
				r.OutputCriblTCP.Hosts[hostsCount].Port = hosts.Port
				r.OutputCriblTCP.Hosts[hostsCount].Servername = hosts.Servername
				r.OutputCriblTCP.Hosts[hostsCount].TLS = hosts.TLS
				r.OutputCriblTCP.Hosts[hostsCount].Weight = hosts.Weight
			}
		}
		r.OutputCriblTCP.ID = types.StringValue(resp.OutputCriblTCP.ID)
		r.OutputCriblTCP.LoadBalanced = types.BoolPointerValue(resp.OutputCriblTCP.LoadBalanced)
		r.OutputCriblTCP.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputCriblTCP.LoadBalanceStatsPeriodSec)
		r.OutputCriblTCP.LogFailedRequests = types.BoolPointerValue(resp.OutputCriblTCP.LogFailedRequests)
		r.OutputCriblTCP.MaxConcurrentSenders = types.Float64PointerValue(resp.OutputCriblTCP.MaxConcurrentSenders)
		if resp.OutputCriblTCP.OnBackpressure != nil {
			r.OutputCriblTCP.OnBackpressure = types.StringValue(string(*resp.OutputCriblTCP.OnBackpressure))
		} else {
			r.OutputCriblTCP.OnBackpressure = types.StringNull()
		}
		r.OutputCriblTCP.Pipeline = types.StringPointerValue(resp.OutputCriblTCP.Pipeline)
		r.OutputCriblTCP.Port = types.Float64PointerValue(resp.OutputCriblTCP.Port)
		if resp.OutputCriblTCP.PqCompress != nil {
			r.OutputCriblTCP.PqCompress = types.StringValue(string(*resp.OutputCriblTCP.PqCompress))
		} else {
			r.OutputCriblTCP.PqCompress = types.StringNull()
		}
		if resp.OutputCriblTCP.PqControls == nil {
			r.OutputCriblTCP.PqControls = nil
		} else {
			r.OutputCriblTCP.PqControls = &tfTypes.OutputCriblTCPPqControls{}
		}
		r.OutputCriblTCP.PqMaxFileSize = types.StringPointerValue(resp.OutputCriblTCP.PqMaxFileSize)
		r.OutputCriblTCP.PqMaxSize = types.StringPointerValue(resp.OutputCriblTCP.PqMaxSize)
		if resp.OutputCriblTCP.PqMode != nil {
			r.OutputCriblTCP.PqMode = types.StringValue(string(*resp.OutputCriblTCP.PqMode))
		} else {
			r.OutputCriblTCP.PqMode = types.StringNull()
		}
		if resp.OutputCriblTCP.PqOnBackpressure != nil {
			r.OutputCriblTCP.PqOnBackpressure = types.StringValue(string(*resp.OutputCriblTCP.PqOnBackpressure))
		} else {
			r.OutputCriblTCP.PqOnBackpressure = types.StringNull()
		}
		r.OutputCriblTCP.PqPath = types.StringPointerValue(resp.OutputCriblTCP.PqPath)
		r.OutputCriblTCP.Streamtags = make([]types.String, 0, len(resp.OutputCriblTCP.Streamtags))
		for _, v := range resp.OutputCriblTCP.Streamtags {
			r.OutputCriblTCP.Streamtags = append(r.OutputCriblTCP.Streamtags, types.StringValue(v))
		}
		r.OutputCriblTCP.SystemFields = make([]types.String, 0, len(resp.OutputCriblTCP.SystemFields))
		for _, v := range resp.OutputCriblTCP.SystemFields {
			r.OutputCriblTCP.SystemFields = append(r.OutputCriblTCP.SystemFields, types.StringValue(v))
		}
		r.OutputCriblTCP.ThrottleRatePerSec = types.StringPointerValue(resp.OutputCriblTCP.ThrottleRatePerSec)
		if resp.OutputCriblTCP.TLS == nil {
			r.OutputCriblTCP.TLS = nil
		} else {
			r.OutputCriblTCP.TLS = &tfTypes.OutputCriblTCPTLSSettingsClientSide{}
			r.OutputCriblTCP.TLS.CaPath = types.StringPointerValue(resp.OutputCriblTCP.TLS.CaPath)
			r.OutputCriblTCP.TLS.CertificateName = types.StringPointerValue(resp.OutputCriblTCP.TLS.CertificateName)
			r.OutputCriblTCP.TLS.CertPath = types.StringPointerValue(resp.OutputCriblTCP.TLS.CertPath)
			r.OutputCriblTCP.TLS.Disabled = types.BoolPointerValue(resp.OutputCriblTCP.TLS.Disabled)
			if resp.OutputCriblTCP.TLS.MaxVersion != nil {
				r.OutputCriblTCP.TLS.MaxVersion = types.StringValue(string(*resp.OutputCriblTCP.TLS.MaxVersion))
			} else {
				r.OutputCriblTCP.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputCriblTCP.TLS.MinVersion != nil {
				r.OutputCriblTCP.TLS.MinVersion = types.StringValue(string(*resp.OutputCriblTCP.TLS.MinVersion))
			} else {
				r.OutputCriblTCP.TLS.MinVersion = types.StringNull()
			}
			r.OutputCriblTCP.TLS.Passphrase = types.StringPointerValue(resp.OutputCriblTCP.TLS.Passphrase)
			r.OutputCriblTCP.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputCriblTCP.TLS.PrivKeyPath)
			r.OutputCriblTCP.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputCriblTCP.TLS.RejectUnauthorized)
			r.OutputCriblTCP.TLS.Servername = types.StringPointerValue(resp.OutputCriblTCP.TLS.Servername)
		}
		r.OutputCriblTCP.TokenTTLMinutes = types.Float64PointerValue(resp.OutputCriblTCP.TokenTTLMinutes)
		r.OutputCriblTCP.Type = types.StringValue(string(resp.OutputCriblTCP.Type))
		r.OutputCriblTCP.WriteTimeout = types.Float64PointerValue(resp.OutputCriblTCP.WriteTimeout)
	}
	if resp.OutputCrowdstrikeNextGenSiem != nil {
		r.OutputCrowdstrikeNextGenSiem = &tfTypes.OutputCrowdstrikeNextGenSiem{}
		if resp.OutputCrowdstrikeNextGenSiem.AuthType != nil {
			r.OutputCrowdstrikeNextGenSiem.AuthType = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.AuthType))
		} else {
			r.OutputCrowdstrikeNextGenSiem.AuthType = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.Compress = types.BoolPointerValue(resp.OutputCrowdstrikeNextGenSiem.Compress)
		r.OutputCrowdstrikeNextGenSiem.Concurrency = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.Concurrency)
		r.OutputCrowdstrikeNextGenSiem.Description = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.Description)
		r.OutputCrowdstrikeNextGenSiem.Environment = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.Environment)
		r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders = []tfTypes.OutputCrowdstrikeNextGenSiemExtraHTTPHeaders{}
		if len(r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders) > len(resp.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders) {
			r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders = r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders[:len(resp.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount3, extraHTTPHeadersItem3 := range resp.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders {
			var extraHTTPHeaders3 tfTypes.OutputCrowdstrikeNextGenSiemExtraHTTPHeaders
			extraHTTPHeaders3.Name = types.StringPointerValue(extraHTTPHeadersItem3.Name)
			extraHTTPHeaders3.Value = types.StringValue(extraHTTPHeadersItem3.Value)
			if extraHTTPHeadersCount3+1 > len(r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders) {
				r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders = append(r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders, extraHTTPHeaders3)
			} else {
				r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders[extraHTTPHeadersCount3].Name = extraHTTPHeaders3.Name
				r.OutputCrowdstrikeNextGenSiem.ExtraHTTPHeaders[extraHTTPHeadersCount3].Value = extraHTTPHeaders3.Value
			}
		}
		if resp.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode != nil {
			r.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode))
		} else {
			r.OutputCrowdstrikeNextGenSiem.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.FlushPeriodSec = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.FlushPeriodSec)
		if resp.OutputCrowdstrikeNextGenSiem.Format != nil {
			r.OutputCrowdstrikeNextGenSiem.Format = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.Format))
		} else {
			r.OutputCrowdstrikeNextGenSiem.Format = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.ID = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.ID)
		r.OutputCrowdstrikeNextGenSiem.MaxPayloadEvents = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.MaxPayloadEvents)
		r.OutputCrowdstrikeNextGenSiem.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.MaxPayloadSizeKB)
		if resp.OutputCrowdstrikeNextGenSiem.OnBackpressure != nil {
			r.OutputCrowdstrikeNextGenSiem.OnBackpressure = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.OnBackpressure))
		} else {
			r.OutputCrowdstrikeNextGenSiem.OnBackpressure = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.Pipeline = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.Pipeline)
		if resp.OutputCrowdstrikeNextGenSiem.PqCompress != nil {
			r.OutputCrowdstrikeNextGenSiem.PqCompress = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.PqCompress))
		} else {
			r.OutputCrowdstrikeNextGenSiem.PqCompress = types.StringNull()
		}
		if resp.OutputCrowdstrikeNextGenSiem.PqControls == nil {
			r.OutputCrowdstrikeNextGenSiem.PqControls = nil
		} else {
			r.OutputCrowdstrikeNextGenSiem.PqControls = &tfTypes.OutputCrowdstrikeNextGenSiemPqControls{}
		}
		r.OutputCrowdstrikeNextGenSiem.PqMaxFileSize = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.PqMaxFileSize)
		r.OutputCrowdstrikeNextGenSiem.PqMaxSize = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.PqMaxSize)
		if resp.OutputCrowdstrikeNextGenSiem.PqMode != nil {
			r.OutputCrowdstrikeNextGenSiem.PqMode = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.PqMode))
		} else {
			r.OutputCrowdstrikeNextGenSiem.PqMode = types.StringNull()
		}
		if resp.OutputCrowdstrikeNextGenSiem.PqOnBackpressure != nil {
			r.OutputCrowdstrikeNextGenSiem.PqOnBackpressure = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.PqOnBackpressure))
		} else {
			r.OutputCrowdstrikeNextGenSiem.PqOnBackpressure = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.PqPath = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.PqPath)
		r.OutputCrowdstrikeNextGenSiem.RejectUnauthorized = types.BoolPointerValue(resp.OutputCrowdstrikeNextGenSiem.RejectUnauthorized)
		r.OutputCrowdstrikeNextGenSiem.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputCrowdstrikeNextGenSiem.ResponseHonorRetryAfterHeader)
		r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings = []tfTypes.OutputCrowdstrikeNextGenSiemResponseRetrySettings{}
		if len(r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings) > len(resp.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings) {
			r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings = r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings[:len(resp.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount4, responseRetrySettingsItem4 := range resp.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings {
			var responseRetrySettings4 tfTypes.OutputCrowdstrikeNextGenSiemResponseRetrySettings
			responseRetrySettings4.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem4.BackoffRate)
			responseRetrySettings4.HTTPStatus = types.Float64Value(responseRetrySettingsItem4.HTTPStatus)
			responseRetrySettings4.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem4.InitialBackoff)
			responseRetrySettings4.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem4.MaxBackoff)
			if responseRetrySettingsCount4+1 > len(r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings) {
				r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings = append(r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings, responseRetrySettings4)
			} else {
				r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings[responseRetrySettingsCount4].BackoffRate = responseRetrySettings4.BackoffRate
				r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings[responseRetrySettingsCount4].HTTPStatus = responseRetrySettings4.HTTPStatus
				r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings[responseRetrySettingsCount4].InitialBackoff = responseRetrySettings4.InitialBackoff
				r.OutputCrowdstrikeNextGenSiem.ResponseRetrySettings[responseRetrySettingsCount4].MaxBackoff = responseRetrySettings4.MaxBackoff
			}
		}
		r.OutputCrowdstrikeNextGenSiem.SafeHeaders = make([]types.String, 0, len(resp.OutputCrowdstrikeNextGenSiem.SafeHeaders))
		for _, v := range resp.OutputCrowdstrikeNextGenSiem.SafeHeaders {
			r.OutputCrowdstrikeNextGenSiem.SafeHeaders = append(r.OutputCrowdstrikeNextGenSiem.SafeHeaders, types.StringValue(v))
		}
		r.OutputCrowdstrikeNextGenSiem.Streamtags = make([]types.String, 0, len(resp.OutputCrowdstrikeNextGenSiem.Streamtags))
		for _, v := range resp.OutputCrowdstrikeNextGenSiem.Streamtags {
			r.OutputCrowdstrikeNextGenSiem.Streamtags = append(r.OutputCrowdstrikeNextGenSiem.Streamtags, types.StringValue(v))
		}
		r.OutputCrowdstrikeNextGenSiem.SystemFields = make([]types.String, 0, len(resp.OutputCrowdstrikeNextGenSiem.SystemFields))
		for _, v := range resp.OutputCrowdstrikeNextGenSiem.SystemFields {
			r.OutputCrowdstrikeNextGenSiem.SystemFields = append(r.OutputCrowdstrikeNextGenSiem.SystemFields, types.StringValue(v))
		}
		r.OutputCrowdstrikeNextGenSiem.TextSecret = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.TextSecret)
		if resp.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings == nil {
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings = nil
		} else {
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings = &tfTypes.OutputCrowdstrikeNextGenSiemTimeoutRetrySettings{}
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.BackoffRate)
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.InitialBackoff)
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.MaxBackoff)
			r.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputCrowdstrikeNextGenSiem.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputCrowdstrikeNextGenSiem.TimeoutSec = types.Float64PointerValue(resp.OutputCrowdstrikeNextGenSiem.TimeoutSec)
		r.OutputCrowdstrikeNextGenSiem.Token = types.StringPointerValue(resp.OutputCrowdstrikeNextGenSiem.Token)
		if resp.OutputCrowdstrikeNextGenSiem.Type != nil {
			r.OutputCrowdstrikeNextGenSiem.Type = types.StringValue(string(*resp.OutputCrowdstrikeNextGenSiem.Type))
		} else {
			r.OutputCrowdstrikeNextGenSiem.Type = types.StringNull()
		}
		r.OutputCrowdstrikeNextGenSiem.URL = types.StringValue(resp.OutputCrowdstrikeNextGenSiem.URL)
		r.OutputCrowdstrikeNextGenSiem.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputCrowdstrikeNextGenSiem.UseRoundRobinDNS)
	}
	if resp.OutputDatadog != nil {
		r.OutputDatadog = &tfTypes.OutputDatadog{}
		r.OutputDatadog.AllowAPIKeyFromEvents = types.BoolPointerValue(resp.OutputDatadog.AllowAPIKeyFromEvents)
		r.OutputDatadog.APIKey = types.StringPointerValue(resp.OutputDatadog.APIKey)
		if resp.OutputDatadog.AuthType != nil {
			r.OutputDatadog.AuthType = types.StringValue(string(*resp.OutputDatadog.AuthType))
		} else {
			r.OutputDatadog.AuthType = types.StringNull()
		}
		r.OutputDatadog.BatchByTags = types.BoolPointerValue(resp.OutputDatadog.BatchByTags)
		r.OutputDatadog.Compress = types.BoolPointerValue(resp.OutputDatadog.Compress)
		r.OutputDatadog.Concurrency = types.Float64PointerValue(resp.OutputDatadog.Concurrency)
		if resp.OutputDatadog.ContentType != nil {
			r.OutputDatadog.ContentType = types.StringValue(string(*resp.OutputDatadog.ContentType))
		} else {
			r.OutputDatadog.ContentType = types.StringNull()
		}
		r.OutputDatadog.CustomURL = types.StringPointerValue(resp.OutputDatadog.CustomURL)
		r.OutputDatadog.Description = types.StringPointerValue(resp.OutputDatadog.Description)
		r.OutputDatadog.Environment = types.StringPointerValue(resp.OutputDatadog.Environment)
		r.OutputDatadog.ExtraHTTPHeaders = []tfTypes.OutputDatadogExtraHTTPHeaders{}
		if len(r.OutputDatadog.ExtraHTTPHeaders) > len(resp.OutputDatadog.ExtraHTTPHeaders) {
			r.OutputDatadog.ExtraHTTPHeaders = r.OutputDatadog.ExtraHTTPHeaders[:len(resp.OutputDatadog.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount4, extraHTTPHeadersItem4 := range resp.OutputDatadog.ExtraHTTPHeaders {
			var extraHTTPHeaders4 tfTypes.OutputDatadogExtraHTTPHeaders
			extraHTTPHeaders4.Name = types.StringPointerValue(extraHTTPHeadersItem4.Name)
			extraHTTPHeaders4.Value = types.StringValue(extraHTTPHeadersItem4.Value)
			if extraHTTPHeadersCount4+1 > len(r.OutputDatadog.ExtraHTTPHeaders) {
				r.OutputDatadog.ExtraHTTPHeaders = append(r.OutputDatadog.ExtraHTTPHeaders, extraHTTPHeaders4)
			} else {
				r.OutputDatadog.ExtraHTTPHeaders[extraHTTPHeadersCount4].Name = extraHTTPHeaders4.Name
				r.OutputDatadog.ExtraHTTPHeaders[extraHTTPHeadersCount4].Value = extraHTTPHeaders4.Value
			}
		}
		if resp.OutputDatadog.FailedRequestLoggingMode != nil {
			r.OutputDatadog.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputDatadog.FailedRequestLoggingMode))
		} else {
			r.OutputDatadog.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputDatadog.FlushPeriodSec = types.Float64PointerValue(resp.OutputDatadog.FlushPeriodSec)
		r.OutputDatadog.Host = types.StringPointerValue(resp.OutputDatadog.Host)
		r.OutputDatadog.ID = types.StringValue(resp.OutputDatadog.ID)
		r.OutputDatadog.MaxPayloadEvents = types.Float64PointerValue(resp.OutputDatadog.MaxPayloadEvents)
		r.OutputDatadog.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputDatadog.MaxPayloadSizeKB)
		r.OutputDatadog.Message = types.StringPointerValue(resp.OutputDatadog.Message)
		if resp.OutputDatadog.OnBackpressure != nil {
			r.OutputDatadog.OnBackpressure = types.StringValue(string(*resp.OutputDatadog.OnBackpressure))
		} else {
			r.OutputDatadog.OnBackpressure = types.StringNull()
		}
		r.OutputDatadog.Pipeline = types.StringPointerValue(resp.OutputDatadog.Pipeline)
		if resp.OutputDatadog.PqCompress != nil {
			r.OutputDatadog.PqCompress = types.StringValue(string(*resp.OutputDatadog.PqCompress))
		} else {
			r.OutputDatadog.PqCompress = types.StringNull()
		}
		if resp.OutputDatadog.PqControls == nil {
			r.OutputDatadog.PqControls = nil
		} else {
			r.OutputDatadog.PqControls = &tfTypes.OutputDatadogPqControls{}
		}
		r.OutputDatadog.PqMaxFileSize = types.StringPointerValue(resp.OutputDatadog.PqMaxFileSize)
		r.OutputDatadog.PqMaxSize = types.StringPointerValue(resp.OutputDatadog.PqMaxSize)
		if resp.OutputDatadog.PqMode != nil {
			r.OutputDatadog.PqMode = types.StringValue(string(*resp.OutputDatadog.PqMode))
		} else {
			r.OutputDatadog.PqMode = types.StringNull()
		}
		if resp.OutputDatadog.PqOnBackpressure != nil {
			r.OutputDatadog.PqOnBackpressure = types.StringValue(string(*resp.OutputDatadog.PqOnBackpressure))
		} else {
			r.OutputDatadog.PqOnBackpressure = types.StringNull()
		}
		r.OutputDatadog.PqPath = types.StringPointerValue(resp.OutputDatadog.PqPath)
		r.OutputDatadog.RejectUnauthorized = types.BoolPointerValue(resp.OutputDatadog.RejectUnauthorized)
		r.OutputDatadog.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputDatadog.ResponseHonorRetryAfterHeader)
		r.OutputDatadog.ResponseRetrySettings = []tfTypes.OutputDatadogResponseRetrySettings{}
		if len(r.OutputDatadog.ResponseRetrySettings) > len(resp.OutputDatadog.ResponseRetrySettings) {
			r.OutputDatadog.ResponseRetrySettings = r.OutputDatadog.ResponseRetrySettings[:len(resp.OutputDatadog.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount5, responseRetrySettingsItem5 := range resp.OutputDatadog.ResponseRetrySettings {
			var responseRetrySettings5 tfTypes.OutputDatadogResponseRetrySettings
			responseRetrySettings5.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem5.BackoffRate)
			responseRetrySettings5.HTTPStatus = types.Float64Value(responseRetrySettingsItem5.HTTPStatus)
			responseRetrySettings5.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem5.InitialBackoff)
			responseRetrySettings5.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem5.MaxBackoff)
			if responseRetrySettingsCount5+1 > len(r.OutputDatadog.ResponseRetrySettings) {
				r.OutputDatadog.ResponseRetrySettings = append(r.OutputDatadog.ResponseRetrySettings, responseRetrySettings5)
			} else {
				r.OutputDatadog.ResponseRetrySettings[responseRetrySettingsCount5].BackoffRate = responseRetrySettings5.BackoffRate
				r.OutputDatadog.ResponseRetrySettings[responseRetrySettingsCount5].HTTPStatus = responseRetrySettings5.HTTPStatus
				r.OutputDatadog.ResponseRetrySettings[responseRetrySettingsCount5].InitialBackoff = responseRetrySettings5.InitialBackoff
				r.OutputDatadog.ResponseRetrySettings[responseRetrySettingsCount5].MaxBackoff = responseRetrySettings5.MaxBackoff
			}
		}
		r.OutputDatadog.SafeHeaders = make([]types.String, 0, len(resp.OutputDatadog.SafeHeaders))
		for _, v := range resp.OutputDatadog.SafeHeaders {
			r.OutputDatadog.SafeHeaders = append(r.OutputDatadog.SafeHeaders, types.StringValue(v))
		}
		r.OutputDatadog.SendCountersAsCount = types.BoolPointerValue(resp.OutputDatadog.SendCountersAsCount)
		r.OutputDatadog.Service = types.StringPointerValue(resp.OutputDatadog.Service)
		if resp.OutputDatadog.Severity != nil {
			r.OutputDatadog.Severity = types.StringValue(string(*resp.OutputDatadog.Severity))
		} else {
			r.OutputDatadog.Severity = types.StringNull()
		}
		if resp.OutputDatadog.Site != nil {
			r.OutputDatadog.Site = types.StringValue(string(*resp.OutputDatadog.Site))
		} else {
			r.OutputDatadog.Site = types.StringNull()
		}
		r.OutputDatadog.Source = types.StringPointerValue(resp.OutputDatadog.Source)
		r.OutputDatadog.Streamtags = make([]types.String, 0, len(resp.OutputDatadog.Streamtags))
		for _, v := range resp.OutputDatadog.Streamtags {
			r.OutputDatadog.Streamtags = append(r.OutputDatadog.Streamtags, types.StringValue(v))
		}
		r.OutputDatadog.SystemFields = make([]types.String, 0, len(resp.OutputDatadog.SystemFields))
		for _, v := range resp.OutputDatadog.SystemFields {
			r.OutputDatadog.SystemFields = append(r.OutputDatadog.SystemFields, types.StringValue(v))
		}
		r.OutputDatadog.Tags = make([]types.String, 0, len(resp.OutputDatadog.Tags))
		for _, v := range resp.OutputDatadog.Tags {
			r.OutputDatadog.Tags = append(r.OutputDatadog.Tags, types.StringValue(v))
		}
		r.OutputDatadog.TextSecret = types.StringPointerValue(resp.OutputDatadog.TextSecret)
		if resp.OutputDatadog.TimeoutRetrySettings == nil {
			r.OutputDatadog.TimeoutRetrySettings = nil
		} else {
			r.OutputDatadog.TimeoutRetrySettings = &tfTypes.OutputDatadogTimeoutRetrySettings{}
			r.OutputDatadog.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputDatadog.TimeoutRetrySettings.BackoffRate)
			r.OutputDatadog.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputDatadog.TimeoutRetrySettings.InitialBackoff)
			r.OutputDatadog.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputDatadog.TimeoutRetrySettings.MaxBackoff)
			r.OutputDatadog.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputDatadog.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputDatadog.TimeoutSec = types.Float64PointerValue(resp.OutputDatadog.TimeoutSec)
		r.OutputDatadog.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputDatadog.TotalMemoryLimitKB)
		r.OutputDatadog.Type = types.StringValue(string(resp.OutputDatadog.Type))
		r.OutputDatadog.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputDatadog.UseRoundRobinDNS)
	}
	if resp.OutputDataset != nil {
		r.OutputDataset = &tfTypes.OutputDataset{}
		r.OutputDataset.APIKey = types.StringPointerValue(resp.OutputDataset.APIKey)
		if resp.OutputDataset.AuthType != nil {
			r.OutputDataset.AuthType = types.StringValue(string(*resp.OutputDataset.AuthType))
		} else {
			r.OutputDataset.AuthType = types.StringNull()
		}
		r.OutputDataset.Compress = types.BoolPointerValue(resp.OutputDataset.Compress)
		r.OutputDataset.Concurrency = types.Float64PointerValue(resp.OutputDataset.Concurrency)
		r.OutputDataset.CustomURL = types.StringPointerValue(resp.OutputDataset.CustomURL)
		if resp.OutputDataset.DefaultSeverity != nil {
			r.OutputDataset.DefaultSeverity = types.StringValue(string(*resp.OutputDataset.DefaultSeverity))
		} else {
			r.OutputDataset.DefaultSeverity = types.StringNull()
		}
		r.OutputDataset.Description = types.StringPointerValue(resp.OutputDataset.Description)
		r.OutputDataset.Environment = types.StringPointerValue(resp.OutputDataset.Environment)
		r.OutputDataset.ExcludeFields = make([]types.String, 0, len(resp.OutputDataset.ExcludeFields))
		for _, v := range resp.OutputDataset.ExcludeFields {
			r.OutputDataset.ExcludeFields = append(r.OutputDataset.ExcludeFields, types.StringValue(v))
		}
		r.OutputDataset.ExtraHTTPHeaders = []tfTypes.OutputDatasetExtraHTTPHeaders{}
		if len(r.OutputDataset.ExtraHTTPHeaders) > len(resp.OutputDataset.ExtraHTTPHeaders) {
			r.OutputDataset.ExtraHTTPHeaders = r.OutputDataset.ExtraHTTPHeaders[:len(resp.OutputDataset.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount5, extraHTTPHeadersItem5 := range resp.OutputDataset.ExtraHTTPHeaders {
			var extraHTTPHeaders5 tfTypes.OutputDatasetExtraHTTPHeaders
			extraHTTPHeaders5.Name = types.StringPointerValue(extraHTTPHeadersItem5.Name)
			extraHTTPHeaders5.Value = types.StringValue(extraHTTPHeadersItem5.Value)
			if extraHTTPHeadersCount5+1 > len(r.OutputDataset.ExtraHTTPHeaders) {
				r.OutputDataset.ExtraHTTPHeaders = append(r.OutputDataset.ExtraHTTPHeaders, extraHTTPHeaders5)
			} else {
				r.OutputDataset.ExtraHTTPHeaders[extraHTTPHeadersCount5].Name = extraHTTPHeaders5.Name
				r.OutputDataset.ExtraHTTPHeaders[extraHTTPHeadersCount5].Value = extraHTTPHeaders5.Value
			}
		}
		if resp.OutputDataset.FailedRequestLoggingMode != nil {
			r.OutputDataset.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputDataset.FailedRequestLoggingMode))
		} else {
			r.OutputDataset.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputDataset.FlushPeriodSec = types.Float64PointerValue(resp.OutputDataset.FlushPeriodSec)
		r.OutputDataset.ID = types.StringValue(resp.OutputDataset.ID)
		r.OutputDataset.MaxPayloadEvents = types.Float64PointerValue(resp.OutputDataset.MaxPayloadEvents)
		r.OutputDataset.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputDataset.MaxPayloadSizeKB)
		r.OutputDataset.MessageField = types.StringPointerValue(resp.OutputDataset.MessageField)
		if resp.OutputDataset.OnBackpressure != nil {
			r.OutputDataset.OnBackpressure = types.StringValue(string(*resp.OutputDataset.OnBackpressure))
		} else {
			r.OutputDataset.OnBackpressure = types.StringNull()
		}
		r.OutputDataset.Pipeline = types.StringPointerValue(resp.OutputDataset.Pipeline)
		if resp.OutputDataset.PqCompress != nil {
			r.OutputDataset.PqCompress = types.StringValue(string(*resp.OutputDataset.PqCompress))
		} else {
			r.OutputDataset.PqCompress = types.StringNull()
		}
		if resp.OutputDataset.PqControls == nil {
			r.OutputDataset.PqControls = nil
		} else {
			r.OutputDataset.PqControls = &tfTypes.OutputDatasetPqControls{}
		}
		r.OutputDataset.PqMaxFileSize = types.StringPointerValue(resp.OutputDataset.PqMaxFileSize)
		r.OutputDataset.PqMaxSize = types.StringPointerValue(resp.OutputDataset.PqMaxSize)
		if resp.OutputDataset.PqMode != nil {
			r.OutputDataset.PqMode = types.StringValue(string(*resp.OutputDataset.PqMode))
		} else {
			r.OutputDataset.PqMode = types.StringNull()
		}
		if resp.OutputDataset.PqOnBackpressure != nil {
			r.OutputDataset.PqOnBackpressure = types.StringValue(string(*resp.OutputDataset.PqOnBackpressure))
		} else {
			r.OutputDataset.PqOnBackpressure = types.StringNull()
		}
		r.OutputDataset.PqPath = types.StringPointerValue(resp.OutputDataset.PqPath)
		r.OutputDataset.RejectUnauthorized = types.BoolPointerValue(resp.OutputDataset.RejectUnauthorized)
		r.OutputDataset.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputDataset.ResponseHonorRetryAfterHeader)
		r.OutputDataset.ResponseRetrySettings = []tfTypes.OutputDatasetResponseRetrySettings{}
		if len(r.OutputDataset.ResponseRetrySettings) > len(resp.OutputDataset.ResponseRetrySettings) {
			r.OutputDataset.ResponseRetrySettings = r.OutputDataset.ResponseRetrySettings[:len(resp.OutputDataset.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount6, responseRetrySettingsItem6 := range resp.OutputDataset.ResponseRetrySettings {
			var responseRetrySettings6 tfTypes.OutputDatasetResponseRetrySettings
			responseRetrySettings6.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem6.BackoffRate)
			responseRetrySettings6.HTTPStatus = types.Float64Value(responseRetrySettingsItem6.HTTPStatus)
			responseRetrySettings6.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem6.InitialBackoff)
			responseRetrySettings6.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem6.MaxBackoff)
			if responseRetrySettingsCount6+1 > len(r.OutputDataset.ResponseRetrySettings) {
				r.OutputDataset.ResponseRetrySettings = append(r.OutputDataset.ResponseRetrySettings, responseRetrySettings6)
			} else {
				r.OutputDataset.ResponseRetrySettings[responseRetrySettingsCount6].BackoffRate = responseRetrySettings6.BackoffRate
				r.OutputDataset.ResponseRetrySettings[responseRetrySettingsCount6].HTTPStatus = responseRetrySettings6.HTTPStatus
				r.OutputDataset.ResponseRetrySettings[responseRetrySettingsCount6].InitialBackoff = responseRetrySettings6.InitialBackoff
				r.OutputDataset.ResponseRetrySettings[responseRetrySettingsCount6].MaxBackoff = responseRetrySettings6.MaxBackoff
			}
		}
		r.OutputDataset.SafeHeaders = make([]types.String, 0, len(resp.OutputDataset.SafeHeaders))
		for _, v := range resp.OutputDataset.SafeHeaders {
			r.OutputDataset.SafeHeaders = append(r.OutputDataset.SafeHeaders, types.StringValue(v))
		}
		r.OutputDataset.ServerHostField = types.StringPointerValue(resp.OutputDataset.ServerHostField)
		if resp.OutputDataset.Site != nil {
			r.OutputDataset.Site = types.StringValue(string(*resp.OutputDataset.Site))
		} else {
			r.OutputDataset.Site = types.StringNull()
		}
		r.OutputDataset.Streamtags = make([]types.String, 0, len(resp.OutputDataset.Streamtags))
		for _, v := range resp.OutputDataset.Streamtags {
			r.OutputDataset.Streamtags = append(r.OutputDataset.Streamtags, types.StringValue(v))
		}
		r.OutputDataset.SystemFields = make([]types.String, 0, len(resp.OutputDataset.SystemFields))
		for _, v := range resp.OutputDataset.SystemFields {
			r.OutputDataset.SystemFields = append(r.OutputDataset.SystemFields, types.StringValue(v))
		}
		r.OutputDataset.TextSecret = types.StringPointerValue(resp.OutputDataset.TextSecret)
		if resp.OutputDataset.TimeoutRetrySettings == nil {
			r.OutputDataset.TimeoutRetrySettings = nil
		} else {
			r.OutputDataset.TimeoutRetrySettings = &tfTypes.OutputDatasetTimeoutRetrySettings{}
			r.OutputDataset.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputDataset.TimeoutRetrySettings.BackoffRate)
			r.OutputDataset.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputDataset.TimeoutRetrySettings.InitialBackoff)
			r.OutputDataset.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputDataset.TimeoutRetrySettings.MaxBackoff)
			r.OutputDataset.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputDataset.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputDataset.TimeoutSec = types.Float64PointerValue(resp.OutputDataset.TimeoutSec)
		r.OutputDataset.TimestampField = types.StringPointerValue(resp.OutputDataset.TimestampField)
		r.OutputDataset.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputDataset.TotalMemoryLimitKB)
		r.OutputDataset.Type = types.StringValue(string(resp.OutputDataset.Type))
		r.OutputDataset.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputDataset.UseRoundRobinDNS)
	}
	if resp.OutputDefault != nil {
		r.OutputDefault = &tfTypes.OutputDefault{}
		r.OutputDefault.DefaultID = types.StringValue(resp.OutputDefault.DefaultID)
		r.OutputDefault.Environment = types.StringPointerValue(resp.OutputDefault.Environment)
		r.OutputDefault.ID = types.StringPointerValue(resp.OutputDefault.ID)
		r.OutputDefault.Pipeline = types.StringPointerValue(resp.OutputDefault.Pipeline)
		r.OutputDefault.Streamtags = make([]types.String, 0, len(resp.OutputDefault.Streamtags))
		for _, v := range resp.OutputDefault.Streamtags {
			r.OutputDefault.Streamtags = append(r.OutputDefault.Streamtags, types.StringValue(v))
		}
		r.OutputDefault.SystemFields = make([]types.String, 0, len(resp.OutputDefault.SystemFields))
		for _, v := range resp.OutputDefault.SystemFields {
			r.OutputDefault.SystemFields = append(r.OutputDefault.SystemFields, types.StringValue(v))
		}
		r.OutputDefault.Type = types.StringValue(string(resp.OutputDefault.Type))
	}
	if resp.OutputDevnull != nil {
		r.OutputDevnull = &tfTypes.OutputDevnull{}
		r.OutputDevnull.Environment = types.StringPointerValue(resp.OutputDevnull.Environment)
		r.OutputDevnull.ID = types.StringValue(resp.OutputDevnull.ID)
		r.OutputDevnull.Pipeline = types.StringPointerValue(resp.OutputDevnull.Pipeline)
		r.OutputDevnull.Streamtags = make([]types.String, 0, len(resp.OutputDevnull.Streamtags))
		for _, v := range resp.OutputDevnull.Streamtags {
			r.OutputDevnull.Streamtags = append(r.OutputDevnull.Streamtags, types.StringValue(v))
		}
		r.OutputDevnull.SystemFields = make([]types.String, 0, len(resp.OutputDevnull.SystemFields))
		for _, v := range resp.OutputDevnull.SystemFields {
			r.OutputDevnull.SystemFields = append(r.OutputDevnull.SystemFields, types.StringValue(v))
		}
		r.OutputDevnull.Type = types.StringValue(string(resp.OutputDevnull.Type))
	}
	if resp.OutputDiskSpool != nil {
		r.OutputDiskSpool = &tfTypes.OutputDiskSpool{}
		if resp.OutputDiskSpool.Compress != nil {
			r.OutputDiskSpool.Compress = types.StringValue(string(*resp.OutputDiskSpool.Compress))
		} else {
			r.OutputDiskSpool.Compress = types.StringNull()
		}
		r.OutputDiskSpool.Description = types.StringPointerValue(resp.OutputDiskSpool.Description)
		r.OutputDiskSpool.Environment = types.StringPointerValue(resp.OutputDiskSpool.Environment)
		r.OutputDiskSpool.ID = types.StringValue(resp.OutputDiskSpool.ID)
		r.OutputDiskSpool.MaxDataSize = types.StringPointerValue(resp.OutputDiskSpool.MaxDataSize)
		r.OutputDiskSpool.MaxDataTime = types.StringPointerValue(resp.OutputDiskSpool.MaxDataTime)
		r.OutputDiskSpool.PartitionExpr = types.StringPointerValue(resp.OutputDiskSpool.PartitionExpr)
		r.OutputDiskSpool.Pipeline = types.StringPointerValue(resp.OutputDiskSpool.Pipeline)
		r.OutputDiskSpool.Streamtags = make([]types.String, 0, len(resp.OutputDiskSpool.Streamtags))
		for _, v := range resp.OutputDiskSpool.Streamtags {
			r.OutputDiskSpool.Streamtags = append(r.OutputDiskSpool.Streamtags, types.StringValue(v))
		}
		r.OutputDiskSpool.SystemFields = make([]types.String, 0, len(resp.OutputDiskSpool.SystemFields))
		for _, v := range resp.OutputDiskSpool.SystemFields {
			r.OutputDiskSpool.SystemFields = append(r.OutputDiskSpool.SystemFields, types.StringValue(v))
		}
		r.OutputDiskSpool.TimeWindow = types.StringPointerValue(resp.OutputDiskSpool.TimeWindow)
		r.OutputDiskSpool.Type = types.StringValue(string(resp.OutputDiskSpool.Type))
	}
	if resp.OutputDlS3 != nil {
		r.OutputDlS3 = &tfTypes.OutputDlS3{}
		r.OutputDlS3.AddIDToStagePath = types.BoolPointerValue(resp.OutputDlS3.AddIDToStagePath)
		r.OutputDlS3.AssumeRoleArn = types.StringPointerValue(resp.OutputDlS3.AssumeRoleArn)
		r.OutputDlS3.AssumeRoleExternalID = types.StringPointerValue(resp.OutputDlS3.AssumeRoleExternalID)
		r.OutputDlS3.AutomaticSchema = types.BoolPointerValue(resp.OutputDlS3.AutomaticSchema)
		r.OutputDlS3.AwsAPIKey = types.StringPointerValue(resp.OutputDlS3.AwsAPIKey)
		if resp.OutputDlS3.AwsAuthenticationMethod != nil {
			r.OutputDlS3.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputDlS3.AwsAuthenticationMethod))
		} else {
			r.OutputDlS3.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputDlS3.AwsSecret = types.StringPointerValue(resp.OutputDlS3.AwsSecret)
		r.OutputDlS3.AwsSecretKey = types.StringPointerValue(resp.OutputDlS3.AwsSecretKey)
		r.OutputDlS3.BaseFileName = types.StringPointerValue(resp.OutputDlS3.BaseFileName)
		r.OutputDlS3.Bucket = types.StringValue(resp.OutputDlS3.Bucket)
		if resp.OutputDlS3.Compress != nil {
			r.OutputDlS3.Compress = types.StringValue(string(*resp.OutputDlS3.Compress))
		} else {
			r.OutputDlS3.Compress = types.StringNull()
		}
		if resp.OutputDlS3.CompressionLevel != nil {
			r.OutputDlS3.CompressionLevel = types.StringValue(string(*resp.OutputDlS3.CompressionLevel))
		} else {
			r.OutputDlS3.CompressionLevel = types.StringNull()
		}
		r.OutputDlS3.DeadletterEnabled = types.BoolPointerValue(resp.OutputDlS3.DeadletterEnabled)
		r.OutputDlS3.DeadletterPath = types.StringPointerValue(resp.OutputDlS3.DeadletterPath)
		r.OutputDlS3.Description = types.StringPointerValue(resp.OutputDlS3.Description)
		r.OutputDlS3.DestPath = types.StringPointerValue(resp.OutputDlS3.DestPath)
		r.OutputDlS3.DurationSeconds = types.Float64PointerValue(resp.OutputDlS3.DurationSeconds)
		r.OutputDlS3.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputDlS3.EmptyDirCleanupSec)
		r.OutputDlS3.EnableAssumeRole = types.BoolPointerValue(resp.OutputDlS3.EnableAssumeRole)
		r.OutputDlS3.EnablePageChecksum = types.BoolPointerValue(resp.OutputDlS3.EnablePageChecksum)
		r.OutputDlS3.EnableStatistics = types.BoolPointerValue(resp.OutputDlS3.EnableStatistics)
		r.OutputDlS3.EnableWritePageIndex = types.BoolPointerValue(resp.OutputDlS3.EnableWritePageIndex)
		r.OutputDlS3.Endpoint = types.StringPointerValue(resp.OutputDlS3.Endpoint)
		r.OutputDlS3.Environment = types.StringPointerValue(resp.OutputDlS3.Environment)
		r.OutputDlS3.FileNameSuffix = types.StringPointerValue(resp.OutputDlS3.FileNameSuffix)
		if resp.OutputDlS3.Format != nil {
			r.OutputDlS3.Format = types.StringValue(string(*resp.OutputDlS3.Format))
		} else {
			r.OutputDlS3.Format = types.StringNull()
		}
		r.OutputDlS3.HeaderLine = types.StringPointerValue(resp.OutputDlS3.HeaderLine)
		r.OutputDlS3.ID = types.StringPointerValue(resp.OutputDlS3.ID)
		r.OutputDlS3.KeyValueMetadata = []tfTypes.OutputDlS3KeyValueMetadata{}
		if len(r.OutputDlS3.KeyValueMetadata) > len(resp.OutputDlS3.KeyValueMetadata) {
			r.OutputDlS3.KeyValueMetadata = r.OutputDlS3.KeyValueMetadata[:len(resp.OutputDlS3.KeyValueMetadata)]
		}
		for keyValueMetadataCount1, keyValueMetadataItem1 := range resp.OutputDlS3.KeyValueMetadata {
			var keyValueMetadata1 tfTypes.OutputDlS3KeyValueMetadata
			keyValueMetadata1.Key = types.StringPointerValue(keyValueMetadataItem1.Key)
			keyValueMetadata1.Value = types.StringValue(keyValueMetadataItem1.Value)
			if keyValueMetadataCount1+1 > len(r.OutputDlS3.KeyValueMetadata) {
				r.OutputDlS3.KeyValueMetadata = append(r.OutputDlS3.KeyValueMetadata, keyValueMetadata1)
			} else {
				r.OutputDlS3.KeyValueMetadata[keyValueMetadataCount1].Key = keyValueMetadata1.Key
				r.OutputDlS3.KeyValueMetadata[keyValueMetadataCount1].Value = keyValueMetadata1.Value
			}
		}
		r.OutputDlS3.KmsKeyID = types.StringPointerValue(resp.OutputDlS3.KmsKeyID)
		r.OutputDlS3.MaxClosingFilesToBackpressure = types.Float64PointerValue(resp.OutputDlS3.MaxClosingFilesToBackpressure)
		r.OutputDlS3.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputDlS3.MaxConcurrentFileParts)
		r.OutputDlS3.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputDlS3.MaxFileIdleTimeSec)
		r.OutputDlS3.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputDlS3.MaxFileOpenTimeSec)
		r.OutputDlS3.MaxFileSizeMB = types.Float64PointerValue(resp.OutputDlS3.MaxFileSizeMB)
		r.OutputDlS3.MaxOpenFiles = types.Float64PointerValue(resp.OutputDlS3.MaxOpenFiles)
		r.OutputDlS3.MaxRetryNum = types.Float64PointerValue(resp.OutputDlS3.MaxRetryNum)
		if resp.OutputDlS3.ObjectACL != nil {
			r.OutputDlS3.ObjectACL = types.StringValue(string(*resp.OutputDlS3.ObjectACL))
		} else {
			r.OutputDlS3.ObjectACL = types.StringNull()
		}
		if resp.OutputDlS3.OnBackpressure != nil {
			r.OutputDlS3.OnBackpressure = types.StringValue(string(*resp.OutputDlS3.OnBackpressure))
		} else {
			r.OutputDlS3.OnBackpressure = types.StringNull()
		}
		if resp.OutputDlS3.OnDiskFullBackpressure != nil {
			r.OutputDlS3.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputDlS3.OnDiskFullBackpressure))
		} else {
			r.OutputDlS3.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputDlS3.ParquetDataPageVersion != nil {
			r.OutputDlS3.ParquetDataPageVersion = types.StringValue(string(*resp.OutputDlS3.ParquetDataPageVersion))
		} else {
			r.OutputDlS3.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputDlS3.ParquetPageSize = types.StringPointerValue(resp.OutputDlS3.ParquetPageSize)
		r.OutputDlS3.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputDlS3.ParquetRowGroupLength)
		if resp.OutputDlS3.ParquetVersion != nil {
			r.OutputDlS3.ParquetVersion = types.StringValue(string(*resp.OutputDlS3.ParquetVersion))
		} else {
			r.OutputDlS3.ParquetVersion = types.StringNull()
		}
		r.OutputDlS3.PartitioningFields = make([]types.String, 0, len(resp.OutputDlS3.PartitioningFields))
		for _, v := range resp.OutputDlS3.PartitioningFields {
			r.OutputDlS3.PartitioningFields = append(r.OutputDlS3.PartitioningFields, types.StringValue(v))
		}
		r.OutputDlS3.Pipeline = types.StringPointerValue(resp.OutputDlS3.Pipeline)
		r.OutputDlS3.Region = types.StringPointerValue(resp.OutputDlS3.Region)
		r.OutputDlS3.RejectUnauthorized = types.BoolPointerValue(resp.OutputDlS3.RejectUnauthorized)
		r.OutputDlS3.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputDlS3.RemoveEmptyDirs)
		r.OutputDlS3.ReuseConnections = types.BoolPointerValue(resp.OutputDlS3.ReuseConnections)
		if resp.OutputDlS3.ServerSideEncryption != nil {
			r.OutputDlS3.ServerSideEncryption = types.StringValue(string(*resp.OutputDlS3.ServerSideEncryption))
		} else {
			r.OutputDlS3.ServerSideEncryption = types.StringNull()
		}
		r.OutputDlS3.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputDlS3.ShouldLogInvalidRows)
		if resp.OutputDlS3.SignatureVersion != nil {
			r.OutputDlS3.SignatureVersion = types.StringValue(string(*resp.OutputDlS3.SignatureVersion))
		} else {
			r.OutputDlS3.SignatureVersion = types.StringNull()
		}
		r.OutputDlS3.StagePath = types.StringPointerValue(resp.OutputDlS3.StagePath)
		if resp.OutputDlS3.StorageClass != nil {
			r.OutputDlS3.StorageClass = types.StringValue(string(*resp.OutputDlS3.StorageClass))
		} else {
			r.OutputDlS3.StorageClass = types.StringNull()
		}
		r.OutputDlS3.Streamtags = make([]types.String, 0, len(resp.OutputDlS3.Streamtags))
		for _, v := range resp.OutputDlS3.Streamtags {
			r.OutputDlS3.Streamtags = append(r.OutputDlS3.Streamtags, types.StringValue(v))
		}
		r.OutputDlS3.SystemFields = make([]types.String, 0, len(resp.OutputDlS3.SystemFields))
		for _, v := range resp.OutputDlS3.SystemFields {
			r.OutputDlS3.SystemFields = append(r.OutputDlS3.SystemFields, types.StringValue(v))
		}
		if resp.OutputDlS3.Type != nil {
			r.OutputDlS3.Type = types.StringValue(string(*resp.OutputDlS3.Type))
		} else {
			r.OutputDlS3.Type = types.StringNull()
		}
		r.OutputDlS3.VerifyPermissions = types.BoolPointerValue(resp.OutputDlS3.VerifyPermissions)
		r.OutputDlS3.WriteHighWaterMark = types.Float64PointerValue(resp.OutputDlS3.WriteHighWaterMark)
	}
	if resp.OutputDynatraceHTTP != nil {
		r.OutputDynatraceHTTP = &tfTypes.OutputDynatraceHTTP{}
		r.OutputDynatraceHTTP.ActiveGateDomain = types.StringPointerValue(resp.OutputDynatraceHTTP.ActiveGateDomain)
		if resp.OutputDynatraceHTTP.AuthType != nil {
			r.OutputDynatraceHTTP.AuthType = types.StringValue(string(*resp.OutputDynatraceHTTP.AuthType))
		} else {
			r.OutputDynatraceHTTP.AuthType = types.StringNull()
		}
		r.OutputDynatraceHTTP.Compress = types.BoolPointerValue(resp.OutputDynatraceHTTP.Compress)
		r.OutputDynatraceHTTP.Concurrency = types.Float64PointerValue(resp.OutputDynatraceHTTP.Concurrency)
		r.OutputDynatraceHTTP.Description = types.StringPointerValue(resp.OutputDynatraceHTTP.Description)
		if resp.OutputDynatraceHTTP.Endpoint != nil {
			r.OutputDynatraceHTTP.Endpoint = types.StringValue(string(*resp.OutputDynatraceHTTP.Endpoint))
		} else {
			r.OutputDynatraceHTTP.Endpoint = types.StringNull()
		}
		r.OutputDynatraceHTTP.Environment = types.StringPointerValue(resp.OutputDynatraceHTTP.Environment)
		r.OutputDynatraceHTTP.EnvironmentID = types.StringPointerValue(resp.OutputDynatraceHTTP.EnvironmentID)
		r.OutputDynatraceHTTP.ExtraHTTPHeaders = []tfTypes.OutputDynatraceHTTPExtraHTTPHeaders{}
		if len(r.OutputDynatraceHTTP.ExtraHTTPHeaders) > len(resp.OutputDynatraceHTTP.ExtraHTTPHeaders) {
			r.OutputDynatraceHTTP.ExtraHTTPHeaders = r.OutputDynatraceHTTP.ExtraHTTPHeaders[:len(resp.OutputDynatraceHTTP.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount6, extraHTTPHeadersItem6 := range resp.OutputDynatraceHTTP.ExtraHTTPHeaders {
			var extraHTTPHeaders6 tfTypes.OutputDynatraceHTTPExtraHTTPHeaders
			extraHTTPHeaders6.Name = types.StringPointerValue(extraHTTPHeadersItem6.Name)
			extraHTTPHeaders6.Value = types.StringValue(extraHTTPHeadersItem6.Value)
			if extraHTTPHeadersCount6+1 > len(r.OutputDynatraceHTTP.ExtraHTTPHeaders) {
				r.OutputDynatraceHTTP.ExtraHTTPHeaders = append(r.OutputDynatraceHTTP.ExtraHTTPHeaders, extraHTTPHeaders6)
			} else {
				r.OutputDynatraceHTTP.ExtraHTTPHeaders[extraHTTPHeadersCount6].Name = extraHTTPHeaders6.Name
				r.OutputDynatraceHTTP.ExtraHTTPHeaders[extraHTTPHeadersCount6].Value = extraHTTPHeaders6.Value
			}
		}
		if resp.OutputDynatraceHTTP.FailedRequestLoggingMode != nil {
			r.OutputDynatraceHTTP.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputDynatraceHTTP.FailedRequestLoggingMode))
		} else {
			r.OutputDynatraceHTTP.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputDynatraceHTTP.FlushPeriodSec = types.Float64PointerValue(resp.OutputDynatraceHTTP.FlushPeriodSec)
		if resp.OutputDynatraceHTTP.Format != nil {
			r.OutputDynatraceHTTP.Format = types.StringValue(string(*resp.OutputDynatraceHTTP.Format))
		} else {
			r.OutputDynatraceHTTP.Format = types.StringNull()
		}
		r.OutputDynatraceHTTP.ID = types.StringPointerValue(resp.OutputDynatraceHTTP.ID)
		r.OutputDynatraceHTTP.KeepAlive = types.BoolPointerValue(resp.OutputDynatraceHTTP.KeepAlive)
		r.OutputDynatraceHTTP.MaxPayloadEvents = types.Float64PointerValue(resp.OutputDynatraceHTTP.MaxPayloadEvents)
		r.OutputDynatraceHTTP.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputDynatraceHTTP.MaxPayloadSizeKB)
		if resp.OutputDynatraceHTTP.Method != nil {
			r.OutputDynatraceHTTP.Method = types.StringValue(string(*resp.OutputDynatraceHTTP.Method))
		} else {
			r.OutputDynatraceHTTP.Method = types.StringNull()
		}
		if resp.OutputDynatraceHTTP.OnBackpressure != nil {
			r.OutputDynatraceHTTP.OnBackpressure = types.StringValue(string(*resp.OutputDynatraceHTTP.OnBackpressure))
		} else {
			r.OutputDynatraceHTTP.OnBackpressure = types.StringNull()
		}
		r.OutputDynatraceHTTP.Pipeline = types.StringPointerValue(resp.OutputDynatraceHTTP.Pipeline)
		if resp.OutputDynatraceHTTP.PqCompress != nil {
			r.OutputDynatraceHTTP.PqCompress = types.StringValue(string(*resp.OutputDynatraceHTTP.PqCompress))
		} else {
			r.OutputDynatraceHTTP.PqCompress = types.StringNull()
		}
		if resp.OutputDynatraceHTTP.PqControls == nil {
			r.OutputDynatraceHTTP.PqControls = nil
		} else {
			r.OutputDynatraceHTTP.PqControls = &tfTypes.OutputDynatraceHTTPPqControls{}
		}
		r.OutputDynatraceHTTP.PqMaxFileSize = types.StringPointerValue(resp.OutputDynatraceHTTP.PqMaxFileSize)
		r.OutputDynatraceHTTP.PqMaxSize = types.StringPointerValue(resp.OutputDynatraceHTTP.PqMaxSize)
		if resp.OutputDynatraceHTTP.PqMode != nil {
			r.OutputDynatraceHTTP.PqMode = types.StringValue(string(*resp.OutputDynatraceHTTP.PqMode))
		} else {
			r.OutputDynatraceHTTP.PqMode = types.StringNull()
		}
		if resp.OutputDynatraceHTTP.PqOnBackpressure != nil {
			r.OutputDynatraceHTTP.PqOnBackpressure = types.StringValue(string(*resp.OutputDynatraceHTTP.PqOnBackpressure))
		} else {
			r.OutputDynatraceHTTP.PqOnBackpressure = types.StringNull()
		}
		r.OutputDynatraceHTTP.PqPath = types.StringPointerValue(resp.OutputDynatraceHTTP.PqPath)
		r.OutputDynatraceHTTP.RejectUnauthorized = types.BoolPointerValue(resp.OutputDynatraceHTTP.RejectUnauthorized)
		r.OutputDynatraceHTTP.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputDynatraceHTTP.ResponseHonorRetryAfterHeader)
		r.OutputDynatraceHTTP.ResponseRetrySettings = []tfTypes.OutputDynatraceHTTPResponseRetrySettings{}
		if len(r.OutputDynatraceHTTP.ResponseRetrySettings) > len(resp.OutputDynatraceHTTP.ResponseRetrySettings) {
			r.OutputDynatraceHTTP.ResponseRetrySettings = r.OutputDynatraceHTTP.ResponseRetrySettings[:len(resp.OutputDynatraceHTTP.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount7, responseRetrySettingsItem7 := range resp.OutputDynatraceHTTP.ResponseRetrySettings {
			var responseRetrySettings7 tfTypes.OutputDynatraceHTTPResponseRetrySettings
			responseRetrySettings7.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem7.BackoffRate)
			responseRetrySettings7.HTTPStatus = types.Float64Value(responseRetrySettingsItem7.HTTPStatus)
			responseRetrySettings7.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem7.InitialBackoff)
			responseRetrySettings7.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem7.MaxBackoff)
			if responseRetrySettingsCount7+1 > len(r.OutputDynatraceHTTP.ResponseRetrySettings) {
				r.OutputDynatraceHTTP.ResponseRetrySettings = append(r.OutputDynatraceHTTP.ResponseRetrySettings, responseRetrySettings7)
			} else {
				r.OutputDynatraceHTTP.ResponseRetrySettings[responseRetrySettingsCount7].BackoffRate = responseRetrySettings7.BackoffRate
				r.OutputDynatraceHTTP.ResponseRetrySettings[responseRetrySettingsCount7].HTTPStatus = responseRetrySettings7.HTTPStatus
				r.OutputDynatraceHTTP.ResponseRetrySettings[responseRetrySettingsCount7].InitialBackoff = responseRetrySettings7.InitialBackoff
				r.OutputDynatraceHTTP.ResponseRetrySettings[responseRetrySettingsCount7].MaxBackoff = responseRetrySettings7.MaxBackoff
			}
		}
		r.OutputDynatraceHTTP.SafeHeaders = make([]types.String, 0, len(resp.OutputDynatraceHTTP.SafeHeaders))
		for _, v := range resp.OutputDynatraceHTTP.SafeHeaders {
			r.OutputDynatraceHTTP.SafeHeaders = append(r.OutputDynatraceHTTP.SafeHeaders, types.StringValue(v))
		}
		r.OutputDynatraceHTTP.Streamtags = make([]types.String, 0, len(resp.OutputDynatraceHTTP.Streamtags))
		for _, v := range resp.OutputDynatraceHTTP.Streamtags {
			r.OutputDynatraceHTTP.Streamtags = append(r.OutputDynatraceHTTP.Streamtags, types.StringValue(v))
		}
		r.OutputDynatraceHTTP.SystemFields = make([]types.String, 0, len(resp.OutputDynatraceHTTP.SystemFields))
		for _, v := range resp.OutputDynatraceHTTP.SystemFields {
			r.OutputDynatraceHTTP.SystemFields = append(r.OutputDynatraceHTTP.SystemFields, types.StringValue(v))
		}
		if resp.OutputDynatraceHTTP.TelemetryType != nil {
			r.OutputDynatraceHTTP.TelemetryType = types.StringValue(string(*resp.OutputDynatraceHTTP.TelemetryType))
		} else {
			r.OutputDynatraceHTTP.TelemetryType = types.StringNull()
		}
		r.OutputDynatraceHTTP.TextSecret = types.StringPointerValue(resp.OutputDynatraceHTTP.TextSecret)
		if resp.OutputDynatraceHTTP.TimeoutRetrySettings == nil {
			r.OutputDynatraceHTTP.TimeoutRetrySettings = nil
		} else {
			r.OutputDynatraceHTTP.TimeoutRetrySettings = &tfTypes.OutputDynatraceHTTPTimeoutRetrySettings{}
			r.OutputDynatraceHTTP.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputDynatraceHTTP.TimeoutRetrySettings.BackoffRate)
			r.OutputDynatraceHTTP.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputDynatraceHTTP.TimeoutRetrySettings.InitialBackoff)
			r.OutputDynatraceHTTP.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputDynatraceHTTP.TimeoutRetrySettings.MaxBackoff)
			r.OutputDynatraceHTTP.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputDynatraceHTTP.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputDynatraceHTTP.TimeoutSec = types.Float64PointerValue(resp.OutputDynatraceHTTP.TimeoutSec)
		r.OutputDynatraceHTTP.Token = types.StringPointerValue(resp.OutputDynatraceHTTP.Token)
		r.OutputDynatraceHTTP.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputDynatraceHTTP.TotalMemoryLimitKB)
		if resp.OutputDynatraceHTTP.Type != nil {
			r.OutputDynatraceHTTP.Type = types.StringValue(string(*resp.OutputDynatraceHTTP.Type))
		} else {
			r.OutputDynatraceHTTP.Type = types.StringNull()
		}
		r.OutputDynatraceHTTP.URL = types.StringPointerValue(resp.OutputDynatraceHTTP.URL)
		r.OutputDynatraceHTTP.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputDynatraceHTTP.UseRoundRobinDNS)
	}
	if resp.OutputDynatraceOtlp != nil {
		r.OutputDynatraceOtlp = &tfTypes.OutputDynatraceOtlp{}
		r.OutputDynatraceOtlp.AuthTokenName = types.StringPointerValue(resp.OutputDynatraceOtlp.AuthTokenName)
		if resp.OutputDynatraceOtlp.Compress != nil {
			r.OutputDynatraceOtlp.Compress = types.StringValue(string(*resp.OutputDynatraceOtlp.Compress))
		} else {
			r.OutputDynatraceOtlp.Compress = types.StringNull()
		}
		r.OutputDynatraceOtlp.Concurrency = types.Float64PointerValue(resp.OutputDynatraceOtlp.Concurrency)
		r.OutputDynatraceOtlp.ConnectionTimeout = types.Float64PointerValue(resp.OutputDynatraceOtlp.ConnectionTimeout)
		r.OutputDynatraceOtlp.Description = types.StringPointerValue(resp.OutputDynatraceOtlp.Description)
		r.OutputDynatraceOtlp.Endpoint = types.StringPointerValue(resp.OutputDynatraceOtlp.Endpoint)
		if resp.OutputDynatraceOtlp.EndpointType != nil {
			r.OutputDynatraceOtlp.EndpointType = types.StringValue(string(*resp.OutputDynatraceOtlp.EndpointType))
		} else {
			r.OutputDynatraceOtlp.EndpointType = types.StringNull()
		}
		r.OutputDynatraceOtlp.Environment = types.StringPointerValue(resp.OutputDynatraceOtlp.Environment)
		r.OutputDynatraceOtlp.ExtraHTTPHeaders = []tfTypes.OutputDynatraceOtlpExtraHTTPHeaders{}
		if len(r.OutputDynatraceOtlp.ExtraHTTPHeaders) > len(resp.OutputDynatraceOtlp.ExtraHTTPHeaders) {
			r.OutputDynatraceOtlp.ExtraHTTPHeaders = r.OutputDynatraceOtlp.ExtraHTTPHeaders[:len(resp.OutputDynatraceOtlp.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount7, extraHTTPHeadersItem7 := range resp.OutputDynatraceOtlp.ExtraHTTPHeaders {
			var extraHTTPHeaders7 tfTypes.OutputDynatraceOtlpExtraHTTPHeaders
			extraHTTPHeaders7.Name = types.StringPointerValue(extraHTTPHeadersItem7.Name)
			extraHTTPHeaders7.Value = types.StringValue(extraHTTPHeadersItem7.Value)
			if extraHTTPHeadersCount7+1 > len(r.OutputDynatraceOtlp.ExtraHTTPHeaders) {
				r.OutputDynatraceOtlp.ExtraHTTPHeaders = append(r.OutputDynatraceOtlp.ExtraHTTPHeaders, extraHTTPHeaders7)
			} else {
				r.OutputDynatraceOtlp.ExtraHTTPHeaders[extraHTTPHeadersCount7].Name = extraHTTPHeaders7.Name
				r.OutputDynatraceOtlp.ExtraHTTPHeaders[extraHTTPHeadersCount7].Value = extraHTTPHeaders7.Value
			}
		}
		if resp.OutputDynatraceOtlp.FailedRequestLoggingMode != nil {
			r.OutputDynatraceOtlp.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputDynatraceOtlp.FailedRequestLoggingMode))
		} else {
			r.OutputDynatraceOtlp.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputDynatraceOtlp.FlushPeriodSec = types.Float64PointerValue(resp.OutputDynatraceOtlp.FlushPeriodSec)
		if resp.OutputDynatraceOtlp.HTTPCompress != nil {
			r.OutputDynatraceOtlp.HTTPCompress = types.StringValue(string(*resp.OutputDynatraceOtlp.HTTPCompress))
		} else {
			r.OutputDynatraceOtlp.HTTPCompress = types.StringNull()
		}
		r.OutputDynatraceOtlp.HTTPLogsEndpointOverride = types.StringPointerValue(resp.OutputDynatraceOtlp.HTTPLogsEndpointOverride)
		r.OutputDynatraceOtlp.HTTPMetricsEndpointOverride = types.StringPointerValue(resp.OutputDynatraceOtlp.HTTPMetricsEndpointOverride)
		r.OutputDynatraceOtlp.HTTPTracesEndpointOverride = types.StringPointerValue(resp.OutputDynatraceOtlp.HTTPTracesEndpointOverride)
		r.OutputDynatraceOtlp.ID = types.StringPointerValue(resp.OutputDynatraceOtlp.ID)
		r.OutputDynatraceOtlp.KeepAlive = types.BoolPointerValue(resp.OutputDynatraceOtlp.KeepAlive)
		r.OutputDynatraceOtlp.KeepAliveTime = types.Float64PointerValue(resp.OutputDynatraceOtlp.KeepAliveTime)
		r.OutputDynatraceOtlp.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputDynatraceOtlp.MaxPayloadSizeKB)
		r.OutputDynatraceOtlp.Metadata = []tfTypes.OutputDynatraceOtlpMetadata{}
		if len(r.OutputDynatraceOtlp.Metadata) > len(resp.OutputDynatraceOtlp.Metadata) {
			r.OutputDynatraceOtlp.Metadata = r.OutputDynatraceOtlp.Metadata[:len(resp.OutputDynatraceOtlp.Metadata)]
		}
		for metadataCount, metadataItem := range resp.OutputDynatraceOtlp.Metadata {
			var metadata tfTypes.OutputDynatraceOtlpMetadata
			metadata.Key = types.StringPointerValue(metadataItem.Key)
			metadata.Value = types.StringValue(metadataItem.Value)
			if metadataCount+1 > len(r.OutputDynatraceOtlp.Metadata) {
				r.OutputDynatraceOtlp.Metadata = append(r.OutputDynatraceOtlp.Metadata, metadata)
			} else {
				r.OutputDynatraceOtlp.Metadata[metadataCount].Key = metadata.Key
				r.OutputDynatraceOtlp.Metadata[metadataCount].Value = metadata.Value
			}
		}
		if resp.OutputDynatraceOtlp.OnBackpressure != nil {
			r.OutputDynatraceOtlp.OnBackpressure = types.StringValue(string(*resp.OutputDynatraceOtlp.OnBackpressure))
		} else {
			r.OutputDynatraceOtlp.OnBackpressure = types.StringNull()
		}
		if resp.OutputDynatraceOtlp.OtlpVersion != nil {
			r.OutputDynatraceOtlp.OtlpVersion = types.StringValue(string(*resp.OutputDynatraceOtlp.OtlpVersion))
		} else {
			r.OutputDynatraceOtlp.OtlpVersion = types.StringNull()
		}
		r.OutputDynatraceOtlp.Pipeline = types.StringPointerValue(resp.OutputDynatraceOtlp.Pipeline)
		if resp.OutputDynatraceOtlp.PqCompress != nil {
			r.OutputDynatraceOtlp.PqCompress = types.StringValue(string(*resp.OutputDynatraceOtlp.PqCompress))
		} else {
			r.OutputDynatraceOtlp.PqCompress = types.StringNull()
		}
		if resp.OutputDynatraceOtlp.PqControls == nil {
			r.OutputDynatraceOtlp.PqControls = nil
		} else {
			r.OutputDynatraceOtlp.PqControls = &tfTypes.OutputDynatraceOtlpPqControls{}
		}
		r.OutputDynatraceOtlp.PqMaxFileSize = types.StringPointerValue(resp.OutputDynatraceOtlp.PqMaxFileSize)
		r.OutputDynatraceOtlp.PqMaxSize = types.StringPointerValue(resp.OutputDynatraceOtlp.PqMaxSize)
		if resp.OutputDynatraceOtlp.PqMode != nil {
			r.OutputDynatraceOtlp.PqMode = types.StringValue(string(*resp.OutputDynatraceOtlp.PqMode))
		} else {
			r.OutputDynatraceOtlp.PqMode = types.StringNull()
		}
		if resp.OutputDynatraceOtlp.PqOnBackpressure != nil {
			r.OutputDynatraceOtlp.PqOnBackpressure = types.StringValue(string(*resp.OutputDynatraceOtlp.PqOnBackpressure))
		} else {
			r.OutputDynatraceOtlp.PqOnBackpressure = types.StringNull()
		}
		r.OutputDynatraceOtlp.PqPath = types.StringPointerValue(resp.OutputDynatraceOtlp.PqPath)
		if resp.OutputDynatraceOtlp.Protocol != nil {
			r.OutputDynatraceOtlp.Protocol = types.StringValue(string(*resp.OutputDynatraceOtlp.Protocol))
		} else {
			r.OutputDynatraceOtlp.Protocol = types.StringNull()
		}
		r.OutputDynatraceOtlp.RejectUnauthorized = types.BoolPointerValue(resp.OutputDynatraceOtlp.RejectUnauthorized)
		r.OutputDynatraceOtlp.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputDynatraceOtlp.ResponseHonorRetryAfterHeader)
		r.OutputDynatraceOtlp.ResponseRetrySettings = []tfTypes.OutputDynatraceOtlpResponseRetrySettings{}
		if len(r.OutputDynatraceOtlp.ResponseRetrySettings) > len(resp.OutputDynatraceOtlp.ResponseRetrySettings) {
			r.OutputDynatraceOtlp.ResponseRetrySettings = r.OutputDynatraceOtlp.ResponseRetrySettings[:len(resp.OutputDynatraceOtlp.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount8, responseRetrySettingsItem8 := range resp.OutputDynatraceOtlp.ResponseRetrySettings {
			var responseRetrySettings8 tfTypes.OutputDynatraceOtlpResponseRetrySettings
			responseRetrySettings8.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem8.BackoffRate)
			responseRetrySettings8.HTTPStatus = types.Float64Value(responseRetrySettingsItem8.HTTPStatus)
			responseRetrySettings8.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem8.InitialBackoff)
			responseRetrySettings8.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem8.MaxBackoff)
			if responseRetrySettingsCount8+1 > len(r.OutputDynatraceOtlp.ResponseRetrySettings) {
				r.OutputDynatraceOtlp.ResponseRetrySettings = append(r.OutputDynatraceOtlp.ResponseRetrySettings, responseRetrySettings8)
			} else {
				r.OutputDynatraceOtlp.ResponseRetrySettings[responseRetrySettingsCount8].BackoffRate = responseRetrySettings8.BackoffRate
				r.OutputDynatraceOtlp.ResponseRetrySettings[responseRetrySettingsCount8].HTTPStatus = responseRetrySettings8.HTTPStatus
				r.OutputDynatraceOtlp.ResponseRetrySettings[responseRetrySettingsCount8].InitialBackoff = responseRetrySettings8.InitialBackoff
				r.OutputDynatraceOtlp.ResponseRetrySettings[responseRetrySettingsCount8].MaxBackoff = responseRetrySettings8.MaxBackoff
			}
		}
		r.OutputDynatraceOtlp.SafeHeaders = make([]types.String, 0, len(resp.OutputDynatraceOtlp.SafeHeaders))
		for _, v := range resp.OutputDynatraceOtlp.SafeHeaders {
			r.OutputDynatraceOtlp.SafeHeaders = append(r.OutputDynatraceOtlp.SafeHeaders, types.StringValue(v))
		}
		r.OutputDynatraceOtlp.Streamtags = make([]types.String, 0, len(resp.OutputDynatraceOtlp.Streamtags))
		for _, v := range resp.OutputDynatraceOtlp.Streamtags {
			r.OutputDynatraceOtlp.Streamtags = append(r.OutputDynatraceOtlp.Streamtags, types.StringValue(v))
		}
		r.OutputDynatraceOtlp.SystemFields = make([]types.String, 0, len(resp.OutputDynatraceOtlp.SystemFields))
		for _, v := range resp.OutputDynatraceOtlp.SystemFields {
			r.OutputDynatraceOtlp.SystemFields = append(r.OutputDynatraceOtlp.SystemFields, types.StringValue(v))
		}
		if resp.OutputDynatraceOtlp.TimeoutRetrySettings == nil {
			r.OutputDynatraceOtlp.TimeoutRetrySettings = nil
		} else {
			r.OutputDynatraceOtlp.TimeoutRetrySettings = &tfTypes.OutputDynatraceOtlpTimeoutRetrySettings{}
			r.OutputDynatraceOtlp.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputDynatraceOtlp.TimeoutRetrySettings.BackoffRate)
			r.OutputDynatraceOtlp.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputDynatraceOtlp.TimeoutRetrySettings.InitialBackoff)
			r.OutputDynatraceOtlp.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputDynatraceOtlp.TimeoutRetrySettings.MaxBackoff)
			r.OutputDynatraceOtlp.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputDynatraceOtlp.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputDynatraceOtlp.TimeoutSec = types.Float64PointerValue(resp.OutputDynatraceOtlp.TimeoutSec)
		r.OutputDynatraceOtlp.TokenSecret = types.StringValue(resp.OutputDynatraceOtlp.TokenSecret)
		if resp.OutputDynatraceOtlp.Type != nil {
			r.OutputDynatraceOtlp.Type = types.StringValue(string(*resp.OutputDynatraceOtlp.Type))
		} else {
			r.OutputDynatraceOtlp.Type = types.StringNull()
		}
		r.OutputDynatraceOtlp.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputDynatraceOtlp.UseRoundRobinDNS)
	}
	if resp.OutputElastic != nil {
		r.OutputElastic = &tfTypes.OutputElastic{}
		if resp.OutputElastic.Auth == nil {
			r.OutputElastic.Auth = nil
		} else {
			r.OutputElastic.Auth = &tfTypes.Auth{}
			if resp.OutputElastic.Auth.AuthType != nil {
				r.OutputElastic.Auth.AuthType = types.StringValue(string(*resp.OutputElastic.Auth.AuthType))
			} else {
				r.OutputElastic.Auth.AuthType = types.StringNull()
			}
			r.OutputElastic.Auth.Disabled = types.BoolPointerValue(resp.OutputElastic.Auth.Disabled)
		}
		r.OutputElastic.Compress = types.BoolPointerValue(resp.OutputElastic.Compress)
		r.OutputElastic.Concurrency = types.Float64PointerValue(resp.OutputElastic.Concurrency)
		r.OutputElastic.Description = types.StringPointerValue(resp.OutputElastic.Description)
		r.OutputElastic.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputElastic.DNSResolvePeriodSec)
		r.OutputElastic.DocType = types.StringPointerValue(resp.OutputElastic.DocType)
		r.OutputElastic.ElasticPipeline = types.StringPointerValue(resp.OutputElastic.ElasticPipeline)
		if resp.OutputElastic.ElasticVersion != nil {
			r.OutputElastic.ElasticVersion = types.StringValue(string(*resp.OutputElastic.ElasticVersion))
		} else {
			r.OutputElastic.ElasticVersion = types.StringNull()
		}
		r.OutputElastic.Environment = types.StringPointerValue(resp.OutputElastic.Environment)
		r.OutputElastic.ExcludeSelf = types.BoolPointerValue(resp.OutputElastic.ExcludeSelf)
		r.OutputElastic.ExtraHTTPHeaders = []tfTypes.OutputElasticExtraHTTPHeaders{}
		if len(r.OutputElastic.ExtraHTTPHeaders) > len(resp.OutputElastic.ExtraHTTPHeaders) {
			r.OutputElastic.ExtraHTTPHeaders = r.OutputElastic.ExtraHTTPHeaders[:len(resp.OutputElastic.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount8, extraHTTPHeadersItem8 := range resp.OutputElastic.ExtraHTTPHeaders {
			var extraHTTPHeaders8 tfTypes.OutputElasticExtraHTTPHeaders
			extraHTTPHeaders8.Name = types.StringPointerValue(extraHTTPHeadersItem8.Name)
			extraHTTPHeaders8.Value = types.StringValue(extraHTTPHeadersItem8.Value)
			if extraHTTPHeadersCount8+1 > len(r.OutputElastic.ExtraHTTPHeaders) {
				r.OutputElastic.ExtraHTTPHeaders = append(r.OutputElastic.ExtraHTTPHeaders, extraHTTPHeaders8)
			} else {
				r.OutputElastic.ExtraHTTPHeaders[extraHTTPHeadersCount8].Name = extraHTTPHeaders8.Name
				r.OutputElastic.ExtraHTTPHeaders[extraHTTPHeadersCount8].Value = extraHTTPHeaders8.Value
			}
		}
		r.OutputElastic.ExtraParams = []tfTypes.ExtraParams{}
		if len(r.OutputElastic.ExtraParams) > len(resp.OutputElastic.ExtraParams) {
			r.OutputElastic.ExtraParams = r.OutputElastic.ExtraParams[:len(resp.OutputElastic.ExtraParams)]
		}
		for extraParamsCount, extraParamsItem := range resp.OutputElastic.ExtraParams {
			var extraParams tfTypes.ExtraParams
			extraParams.Name = types.StringValue(extraParamsItem.Name)
			extraParams.Value = types.StringValue(extraParamsItem.Value)
			if extraParamsCount+1 > len(r.OutputElastic.ExtraParams) {
				r.OutputElastic.ExtraParams = append(r.OutputElastic.ExtraParams, extraParams)
			} else {
				r.OutputElastic.ExtraParams[extraParamsCount].Name = extraParams.Name
				r.OutputElastic.ExtraParams[extraParamsCount].Value = extraParams.Value
			}
		}
		if resp.OutputElastic.FailedRequestLoggingMode != nil {
			r.OutputElastic.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputElastic.FailedRequestLoggingMode))
		} else {
			r.OutputElastic.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputElastic.FlushPeriodSec = types.Float64PointerValue(resp.OutputElastic.FlushPeriodSec)
		r.OutputElastic.ID = types.StringPointerValue(resp.OutputElastic.ID)
		r.OutputElastic.IncludeDocID = types.BoolPointerValue(resp.OutputElastic.IncludeDocID)
		r.OutputElastic.Index = types.StringValue(resp.OutputElastic.Index)
		r.OutputElastic.LoadBalanced = types.BoolPointerValue(resp.OutputElastic.LoadBalanced)
		r.OutputElastic.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputElastic.LoadBalanceStatsPeriodSec)
		r.OutputElastic.MaxPayloadEvents = types.Float64PointerValue(resp.OutputElastic.MaxPayloadEvents)
		r.OutputElastic.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputElastic.MaxPayloadSizeKB)
		if resp.OutputElastic.OnBackpressure != nil {
			r.OutputElastic.OnBackpressure = types.StringValue(string(*resp.OutputElastic.OnBackpressure))
		} else {
			r.OutputElastic.OnBackpressure = types.StringNull()
		}
		r.OutputElastic.Pipeline = types.StringPointerValue(resp.OutputElastic.Pipeline)
		if resp.OutputElastic.PqCompress != nil {
			r.OutputElastic.PqCompress = types.StringValue(string(*resp.OutputElastic.PqCompress))
		} else {
			r.OutputElastic.PqCompress = types.StringNull()
		}
		if resp.OutputElastic.PqControls == nil {
			r.OutputElastic.PqControls = nil
		} else {
			r.OutputElastic.PqControls = &tfTypes.OutputElasticPqControls{}
		}
		r.OutputElastic.PqMaxFileSize = types.StringPointerValue(resp.OutputElastic.PqMaxFileSize)
		r.OutputElastic.PqMaxSize = types.StringPointerValue(resp.OutputElastic.PqMaxSize)
		if resp.OutputElastic.PqMode != nil {
			r.OutputElastic.PqMode = types.StringValue(string(*resp.OutputElastic.PqMode))
		} else {
			r.OutputElastic.PqMode = types.StringNull()
		}
		if resp.OutputElastic.PqOnBackpressure != nil {
			r.OutputElastic.PqOnBackpressure = types.StringValue(string(*resp.OutputElastic.PqOnBackpressure))
		} else {
			r.OutputElastic.PqOnBackpressure = types.StringNull()
		}
		r.OutputElastic.PqPath = types.StringPointerValue(resp.OutputElastic.PqPath)
		r.OutputElastic.RejectUnauthorized = types.BoolPointerValue(resp.OutputElastic.RejectUnauthorized)
		r.OutputElastic.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputElastic.ResponseHonorRetryAfterHeader)
		r.OutputElastic.ResponseRetrySettings = []tfTypes.OutputElasticResponseRetrySettings{}
		if len(r.OutputElastic.ResponseRetrySettings) > len(resp.OutputElastic.ResponseRetrySettings) {
			r.OutputElastic.ResponseRetrySettings = r.OutputElastic.ResponseRetrySettings[:len(resp.OutputElastic.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount9, responseRetrySettingsItem9 := range resp.OutputElastic.ResponseRetrySettings {
			var responseRetrySettings9 tfTypes.OutputElasticResponseRetrySettings
			responseRetrySettings9.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem9.BackoffRate)
			responseRetrySettings9.HTTPStatus = types.Float64Value(responseRetrySettingsItem9.HTTPStatus)
			responseRetrySettings9.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem9.InitialBackoff)
			responseRetrySettings9.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem9.MaxBackoff)
			if responseRetrySettingsCount9+1 > len(r.OutputElastic.ResponseRetrySettings) {
				r.OutputElastic.ResponseRetrySettings = append(r.OutputElastic.ResponseRetrySettings, responseRetrySettings9)
			} else {
				r.OutputElastic.ResponseRetrySettings[responseRetrySettingsCount9].BackoffRate = responseRetrySettings9.BackoffRate
				r.OutputElastic.ResponseRetrySettings[responseRetrySettingsCount9].HTTPStatus = responseRetrySettings9.HTTPStatus
				r.OutputElastic.ResponseRetrySettings[responseRetrySettingsCount9].InitialBackoff = responseRetrySettings9.InitialBackoff
				r.OutputElastic.ResponseRetrySettings[responseRetrySettingsCount9].MaxBackoff = responseRetrySettings9.MaxBackoff
			}
		}
		r.OutputElastic.RetryPartialErrors = types.BoolPointerValue(resp.OutputElastic.RetryPartialErrors)
		r.OutputElastic.SafeHeaders = make([]types.String, 0, len(resp.OutputElastic.SafeHeaders))
		for _, v := range resp.OutputElastic.SafeHeaders {
			r.OutputElastic.SafeHeaders = append(r.OutputElastic.SafeHeaders, types.StringValue(v))
		}
		r.OutputElastic.Streamtags = make([]types.String, 0, len(resp.OutputElastic.Streamtags))
		for _, v := range resp.OutputElastic.Streamtags {
			r.OutputElastic.Streamtags = append(r.OutputElastic.Streamtags, types.StringValue(v))
		}
		r.OutputElastic.SystemFields = make([]types.String, 0, len(resp.OutputElastic.SystemFields))
		for _, v := range resp.OutputElastic.SystemFields {
			r.OutputElastic.SystemFields = append(r.OutputElastic.SystemFields, types.StringValue(v))
		}
		if resp.OutputElastic.TimeoutRetrySettings == nil {
			r.OutputElastic.TimeoutRetrySettings = nil
		} else {
			r.OutputElastic.TimeoutRetrySettings = &tfTypes.OutputElasticTimeoutRetrySettings{}
			r.OutputElastic.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputElastic.TimeoutRetrySettings.BackoffRate)
			r.OutputElastic.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputElastic.TimeoutRetrySettings.InitialBackoff)
			r.OutputElastic.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputElastic.TimeoutRetrySettings.MaxBackoff)
			r.OutputElastic.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputElastic.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputElastic.TimeoutSec = types.Float64PointerValue(resp.OutputElastic.TimeoutSec)
		r.OutputElastic.Type = types.StringValue(string(resp.OutputElastic.Type))
		r.OutputElastic.URL = types.StringPointerValue(resp.OutputElastic.URL)
		r.OutputElastic.Urls = []tfTypes.OutputElasticUrls{}
		if len(r.OutputElastic.Urls) > len(resp.OutputElastic.Urls) {
			r.OutputElastic.Urls = r.OutputElastic.Urls[:len(resp.OutputElastic.Urls)]
		}
		for urlsCount1, urlsItem1 := range resp.OutputElastic.Urls {
			var urls1 tfTypes.OutputElasticUrls
			urls1.URL = types.StringValue(urlsItem1.URL)
			urls1.Weight = types.Float64PointerValue(urlsItem1.Weight)
			if urlsCount1+1 > len(r.OutputElastic.Urls) {
				r.OutputElastic.Urls = append(r.OutputElastic.Urls, urls1)
			} else {
				r.OutputElastic.Urls[urlsCount1].URL = urls1.URL
				r.OutputElastic.Urls[urlsCount1].Weight = urls1.Weight
			}
		}
		r.OutputElastic.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputElastic.UseRoundRobinDNS)
		if resp.OutputElastic.WriteAction != nil {
			r.OutputElastic.WriteAction = types.StringValue(string(*resp.OutputElastic.WriteAction))
		} else {
			r.OutputElastic.WriteAction = types.StringNull()
		}
	}
	if resp.OutputElasticCloud != nil {
		r.OutputElasticCloud = &tfTypes.OutputElasticCloud{}
		if resp.OutputElasticCloud.Auth == nil {
			r.OutputElasticCloud.Auth = nil
		} else {
			r.OutputElasticCloud.Auth = &tfTypes.OutputElasticCloudAuth{}
			if resp.OutputElasticCloud.Auth.AuthType != nil {
				r.OutputElasticCloud.Auth.AuthType = types.StringValue(string(*resp.OutputElasticCloud.Auth.AuthType))
			} else {
				r.OutputElasticCloud.Auth.AuthType = types.StringNull()
			}
			r.OutputElasticCloud.Auth.Disabled = types.BoolPointerValue(resp.OutputElasticCloud.Auth.Disabled)
		}
		r.OutputElasticCloud.Compress = types.BoolPointerValue(resp.OutputElasticCloud.Compress)
		r.OutputElasticCloud.Concurrency = types.Float64PointerValue(resp.OutputElasticCloud.Concurrency)
		r.OutputElasticCloud.Description = types.StringPointerValue(resp.OutputElasticCloud.Description)
		r.OutputElasticCloud.ElasticPipeline = types.StringPointerValue(resp.OutputElasticCloud.ElasticPipeline)
		r.OutputElasticCloud.Environment = types.StringPointerValue(resp.OutputElasticCloud.Environment)
		r.OutputElasticCloud.ExtraHTTPHeaders = []tfTypes.OutputElasticCloudExtraHTTPHeaders{}
		if len(r.OutputElasticCloud.ExtraHTTPHeaders) > len(resp.OutputElasticCloud.ExtraHTTPHeaders) {
			r.OutputElasticCloud.ExtraHTTPHeaders = r.OutputElasticCloud.ExtraHTTPHeaders[:len(resp.OutputElasticCloud.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount9, extraHTTPHeadersItem9 := range resp.OutputElasticCloud.ExtraHTTPHeaders {
			var extraHTTPHeaders9 tfTypes.OutputElasticCloudExtraHTTPHeaders
			extraHTTPHeaders9.Name = types.StringPointerValue(extraHTTPHeadersItem9.Name)
			extraHTTPHeaders9.Value = types.StringValue(extraHTTPHeadersItem9.Value)
			if extraHTTPHeadersCount9+1 > len(r.OutputElasticCloud.ExtraHTTPHeaders) {
				r.OutputElasticCloud.ExtraHTTPHeaders = append(r.OutputElasticCloud.ExtraHTTPHeaders, extraHTTPHeaders9)
			} else {
				r.OutputElasticCloud.ExtraHTTPHeaders[extraHTTPHeadersCount9].Name = extraHTTPHeaders9.Name
				r.OutputElasticCloud.ExtraHTTPHeaders[extraHTTPHeadersCount9].Value = extraHTTPHeaders9.Value
			}
		}
		r.OutputElasticCloud.ExtraParams = []tfTypes.OutputElasticCloudExtraParams{}
		if len(r.OutputElasticCloud.ExtraParams) > len(resp.OutputElasticCloud.ExtraParams) {
			r.OutputElasticCloud.ExtraParams = r.OutputElasticCloud.ExtraParams[:len(resp.OutputElasticCloud.ExtraParams)]
		}
		for extraParamsCount1, extraParamsItem1 := range resp.OutputElasticCloud.ExtraParams {
			var extraParams1 tfTypes.OutputElasticCloudExtraParams
			extraParams1.Name = types.StringValue(extraParamsItem1.Name)
			extraParams1.Value = types.StringValue(extraParamsItem1.Value)
			if extraParamsCount1+1 > len(r.OutputElasticCloud.ExtraParams) {
				r.OutputElasticCloud.ExtraParams = append(r.OutputElasticCloud.ExtraParams, extraParams1)
			} else {
				r.OutputElasticCloud.ExtraParams[extraParamsCount1].Name = extraParams1.Name
				r.OutputElasticCloud.ExtraParams[extraParamsCount1].Value = extraParams1.Value
			}
		}
		if resp.OutputElasticCloud.FailedRequestLoggingMode != nil {
			r.OutputElasticCloud.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputElasticCloud.FailedRequestLoggingMode))
		} else {
			r.OutputElasticCloud.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputElasticCloud.FlushPeriodSec = types.Float64PointerValue(resp.OutputElasticCloud.FlushPeriodSec)
		r.OutputElasticCloud.ID = types.StringPointerValue(resp.OutputElasticCloud.ID)
		r.OutputElasticCloud.IncludeDocID = types.BoolPointerValue(resp.OutputElasticCloud.IncludeDocID)
		r.OutputElasticCloud.Index = types.StringValue(resp.OutputElasticCloud.Index)
		r.OutputElasticCloud.MaxPayloadEvents = types.Float64PointerValue(resp.OutputElasticCloud.MaxPayloadEvents)
		r.OutputElasticCloud.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputElasticCloud.MaxPayloadSizeKB)
		if resp.OutputElasticCloud.OnBackpressure != nil {
			r.OutputElasticCloud.OnBackpressure = types.StringValue(string(*resp.OutputElasticCloud.OnBackpressure))
		} else {
			r.OutputElasticCloud.OnBackpressure = types.StringNull()
		}
		r.OutputElasticCloud.Pipeline = types.StringPointerValue(resp.OutputElasticCloud.Pipeline)
		if resp.OutputElasticCloud.PqCompress != nil {
			r.OutputElasticCloud.PqCompress = types.StringValue(string(*resp.OutputElasticCloud.PqCompress))
		} else {
			r.OutputElasticCloud.PqCompress = types.StringNull()
		}
		if resp.OutputElasticCloud.PqControls == nil {
			r.OutputElasticCloud.PqControls = nil
		} else {
			r.OutputElasticCloud.PqControls = &tfTypes.OutputElasticCloudPqControls{}
		}
		r.OutputElasticCloud.PqMaxFileSize = types.StringPointerValue(resp.OutputElasticCloud.PqMaxFileSize)
		r.OutputElasticCloud.PqMaxSize = types.StringPointerValue(resp.OutputElasticCloud.PqMaxSize)
		if resp.OutputElasticCloud.PqMode != nil {
			r.OutputElasticCloud.PqMode = types.StringValue(string(*resp.OutputElasticCloud.PqMode))
		} else {
			r.OutputElasticCloud.PqMode = types.StringNull()
		}
		if resp.OutputElasticCloud.PqOnBackpressure != nil {
			r.OutputElasticCloud.PqOnBackpressure = types.StringValue(string(*resp.OutputElasticCloud.PqOnBackpressure))
		} else {
			r.OutputElasticCloud.PqOnBackpressure = types.StringNull()
		}
		r.OutputElasticCloud.PqPath = types.StringPointerValue(resp.OutputElasticCloud.PqPath)
		r.OutputElasticCloud.RejectUnauthorized = types.BoolPointerValue(resp.OutputElasticCloud.RejectUnauthorized)
		r.OutputElasticCloud.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputElasticCloud.ResponseHonorRetryAfterHeader)
		r.OutputElasticCloud.ResponseRetrySettings = []tfTypes.OutputElasticCloudResponseRetrySettings{}
		if len(r.OutputElasticCloud.ResponseRetrySettings) > len(resp.OutputElasticCloud.ResponseRetrySettings) {
			r.OutputElasticCloud.ResponseRetrySettings = r.OutputElasticCloud.ResponseRetrySettings[:len(resp.OutputElasticCloud.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount10, responseRetrySettingsItem10 := range resp.OutputElasticCloud.ResponseRetrySettings {
			var responseRetrySettings10 tfTypes.OutputElasticCloudResponseRetrySettings
			responseRetrySettings10.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem10.BackoffRate)
			responseRetrySettings10.HTTPStatus = types.Float64Value(responseRetrySettingsItem10.HTTPStatus)
			responseRetrySettings10.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem10.InitialBackoff)
			responseRetrySettings10.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem10.MaxBackoff)
			if responseRetrySettingsCount10+1 > len(r.OutputElasticCloud.ResponseRetrySettings) {
				r.OutputElasticCloud.ResponseRetrySettings = append(r.OutputElasticCloud.ResponseRetrySettings, responseRetrySettings10)
			} else {
				r.OutputElasticCloud.ResponseRetrySettings[responseRetrySettingsCount10].BackoffRate = responseRetrySettings10.BackoffRate
				r.OutputElasticCloud.ResponseRetrySettings[responseRetrySettingsCount10].HTTPStatus = responseRetrySettings10.HTTPStatus
				r.OutputElasticCloud.ResponseRetrySettings[responseRetrySettingsCount10].InitialBackoff = responseRetrySettings10.InitialBackoff
				r.OutputElasticCloud.ResponseRetrySettings[responseRetrySettingsCount10].MaxBackoff = responseRetrySettings10.MaxBackoff
			}
		}
		r.OutputElasticCloud.SafeHeaders = make([]types.String, 0, len(resp.OutputElasticCloud.SafeHeaders))
		for _, v := range resp.OutputElasticCloud.SafeHeaders {
			r.OutputElasticCloud.SafeHeaders = append(r.OutputElasticCloud.SafeHeaders, types.StringValue(v))
		}
		r.OutputElasticCloud.Streamtags = make([]types.String, 0, len(resp.OutputElasticCloud.Streamtags))
		for _, v := range resp.OutputElasticCloud.Streamtags {
			r.OutputElasticCloud.Streamtags = append(r.OutputElasticCloud.Streamtags, types.StringValue(v))
		}
		r.OutputElasticCloud.SystemFields = make([]types.String, 0, len(resp.OutputElasticCloud.SystemFields))
		for _, v := range resp.OutputElasticCloud.SystemFields {
			r.OutputElasticCloud.SystemFields = append(r.OutputElasticCloud.SystemFields, types.StringValue(v))
		}
		if resp.OutputElasticCloud.TimeoutRetrySettings == nil {
			r.OutputElasticCloud.TimeoutRetrySettings = nil
		} else {
			r.OutputElasticCloud.TimeoutRetrySettings = &tfTypes.OutputElasticCloudTimeoutRetrySettings{}
			r.OutputElasticCloud.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputElasticCloud.TimeoutRetrySettings.BackoffRate)
			r.OutputElasticCloud.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputElasticCloud.TimeoutRetrySettings.InitialBackoff)
			r.OutputElasticCloud.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputElasticCloud.TimeoutRetrySettings.MaxBackoff)
			r.OutputElasticCloud.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputElasticCloud.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputElasticCloud.TimeoutSec = types.Float64PointerValue(resp.OutputElasticCloud.TimeoutSec)
		if resp.OutputElasticCloud.Type != nil {
			r.OutputElasticCloud.Type = types.StringValue(string(*resp.OutputElasticCloud.Type))
		} else {
			r.OutputElasticCloud.Type = types.StringNull()
		}
		r.OutputElasticCloud.URL = types.StringValue(resp.OutputElasticCloud.URL)
	}
	if resp.OutputExabeam != nil {
		r.OutputExabeam = &tfTypes.OutputExabeam{}
		r.OutputExabeam.AddIDToStagePath = types.BoolPointerValue(resp.OutputExabeam.AddIDToStagePath)
		r.OutputExabeam.AwsAPIKey = types.StringPointerValue(resp.OutputExabeam.AwsAPIKey)
		r.OutputExabeam.AwsSecretKey = types.StringPointerValue(resp.OutputExabeam.AwsSecretKey)
		r.OutputExabeam.Bucket = types.StringValue(resp.OutputExabeam.Bucket)
		r.OutputExabeam.CollectorInstanceID = types.StringValue(resp.OutputExabeam.CollectorInstanceID)
		r.OutputExabeam.DeadletterEnabled = types.BoolPointerValue(resp.OutputExabeam.DeadletterEnabled)
		r.OutputExabeam.DeadletterPath = types.StringPointerValue(resp.OutputExabeam.DeadletterPath)
		r.OutputExabeam.Description = types.StringPointerValue(resp.OutputExabeam.Description)
		r.OutputExabeam.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputExabeam.EmptyDirCleanupSec)
		r.OutputExabeam.EncodedConfiguration = types.StringPointerValue(resp.OutputExabeam.EncodedConfiguration)
		r.OutputExabeam.Endpoint = types.StringPointerValue(resp.OutputExabeam.Endpoint)
		r.OutputExabeam.Environment = types.StringPointerValue(resp.OutputExabeam.Environment)
		r.OutputExabeam.ID = types.StringPointerValue(resp.OutputExabeam.ID)
		r.OutputExabeam.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputExabeam.MaxFileIdleTimeSec)
		r.OutputExabeam.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputExabeam.MaxFileOpenTimeSec)
		r.OutputExabeam.MaxFileSizeMB = types.Float64PointerValue(resp.OutputExabeam.MaxFileSizeMB)
		r.OutputExabeam.MaxOpenFiles = types.Float64PointerValue(resp.OutputExabeam.MaxOpenFiles)
		r.OutputExabeam.MaxRetryNum = types.Float64PointerValue(resp.OutputExabeam.MaxRetryNum)
		if resp.OutputExabeam.ObjectACL != nil {
			r.OutputExabeam.ObjectACL = types.StringValue(string(*resp.OutputExabeam.ObjectACL))
		} else {
			r.OutputExabeam.ObjectACL = types.StringNull()
		}
		if resp.OutputExabeam.OnBackpressure != nil {
			r.OutputExabeam.OnBackpressure = types.StringValue(string(*resp.OutputExabeam.OnBackpressure))
		} else {
			r.OutputExabeam.OnBackpressure = types.StringNull()
		}
		if resp.OutputExabeam.OnDiskFullBackpressure != nil {
			r.OutputExabeam.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputExabeam.OnDiskFullBackpressure))
		} else {
			r.OutputExabeam.OnDiskFullBackpressure = types.StringNull()
		}
		r.OutputExabeam.Pipeline = types.StringPointerValue(resp.OutputExabeam.Pipeline)
		r.OutputExabeam.Region = types.StringValue(resp.OutputExabeam.Region)
		r.OutputExabeam.RejectUnauthorized = types.BoolPointerValue(resp.OutputExabeam.RejectUnauthorized)
		r.OutputExabeam.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputExabeam.RemoveEmptyDirs)
		r.OutputExabeam.ReuseConnections = types.BoolPointerValue(resp.OutputExabeam.ReuseConnections)
		if resp.OutputExabeam.SignatureVersion != nil {
			r.OutputExabeam.SignatureVersion = types.StringValue(string(*resp.OutputExabeam.SignatureVersion))
		} else {
			r.OutputExabeam.SignatureVersion = types.StringNull()
		}
		r.OutputExabeam.SiteID = types.StringPointerValue(resp.OutputExabeam.SiteID)
		r.OutputExabeam.SiteName = types.StringPointerValue(resp.OutputExabeam.SiteName)
		r.OutputExabeam.StagePath = types.StringPointerValue(resp.OutputExabeam.StagePath)
		if resp.OutputExabeam.StorageClass != nil {
			r.OutputExabeam.StorageClass = types.StringValue(string(*resp.OutputExabeam.StorageClass))
		} else {
			r.OutputExabeam.StorageClass = types.StringNull()
		}
		r.OutputExabeam.Streamtags = make([]types.String, 0, len(resp.OutputExabeam.Streamtags))
		for _, v := range resp.OutputExabeam.Streamtags {
			r.OutputExabeam.Streamtags = append(r.OutputExabeam.Streamtags, types.StringValue(v))
		}
		r.OutputExabeam.SystemFields = make([]types.String, 0, len(resp.OutputExabeam.SystemFields))
		for _, v := range resp.OutputExabeam.SystemFields {
			r.OutputExabeam.SystemFields = append(r.OutputExabeam.SystemFields, types.StringValue(v))
		}
		r.OutputExabeam.TimezoneOffset = types.StringPointerValue(resp.OutputExabeam.TimezoneOffset)
		if resp.OutputExabeam.Type != nil {
			r.OutputExabeam.Type = types.StringValue(string(*resp.OutputExabeam.Type))
		} else {
			r.OutputExabeam.Type = types.StringNull()
		}
	}
	if resp.OutputFilesystem != nil {
		r.OutputFilesystem = &tfTypes.OutputFilesystem{}
		r.OutputFilesystem.AddIDToStagePath = types.BoolPointerValue(resp.OutputFilesystem.AddIDToStagePath)
		r.OutputFilesystem.AutomaticSchema = types.BoolPointerValue(resp.OutputFilesystem.AutomaticSchema)
		r.OutputFilesystem.BaseFileName = types.StringPointerValue(resp.OutputFilesystem.BaseFileName)
		if resp.OutputFilesystem.Compress != nil {
			r.OutputFilesystem.Compress = types.StringValue(string(*resp.OutputFilesystem.Compress))
		} else {
			r.OutputFilesystem.Compress = types.StringNull()
		}
		if resp.OutputFilesystem.CompressionLevel != nil {
			r.OutputFilesystem.CompressionLevel = types.StringValue(string(*resp.OutputFilesystem.CompressionLevel))
		} else {
			r.OutputFilesystem.CompressionLevel = types.StringNull()
		}
		r.OutputFilesystem.DeadletterEnabled = types.BoolPointerValue(resp.OutputFilesystem.DeadletterEnabled)
		r.OutputFilesystem.DeadletterPath = types.StringPointerValue(resp.OutputFilesystem.DeadletterPath)
		r.OutputFilesystem.Description = types.StringPointerValue(resp.OutputFilesystem.Description)
		r.OutputFilesystem.DestPath = types.StringValue(resp.OutputFilesystem.DestPath)
		r.OutputFilesystem.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputFilesystem.EmptyDirCleanupSec)
		r.OutputFilesystem.EnablePageChecksum = types.BoolPointerValue(resp.OutputFilesystem.EnablePageChecksum)
		r.OutputFilesystem.EnableStatistics = types.BoolPointerValue(resp.OutputFilesystem.EnableStatistics)
		r.OutputFilesystem.EnableWritePageIndex = types.BoolPointerValue(resp.OutputFilesystem.EnableWritePageIndex)
		r.OutputFilesystem.Environment = types.StringPointerValue(resp.OutputFilesystem.Environment)
		r.OutputFilesystem.FileNameSuffix = types.StringPointerValue(resp.OutputFilesystem.FileNameSuffix)
		if resp.OutputFilesystem.Format != nil {
			r.OutputFilesystem.Format = types.StringValue(string(*resp.OutputFilesystem.Format))
		} else {
			r.OutputFilesystem.Format = types.StringNull()
		}
		r.OutputFilesystem.HeaderLine = types.StringPointerValue(resp.OutputFilesystem.HeaderLine)
		r.OutputFilesystem.ID = types.StringPointerValue(resp.OutputFilesystem.ID)
		r.OutputFilesystem.KeyValueMetadata = []tfTypes.KeyValueMetadata{}
		if len(r.OutputFilesystem.KeyValueMetadata) > len(resp.OutputFilesystem.KeyValueMetadata) {
			r.OutputFilesystem.KeyValueMetadata = r.OutputFilesystem.KeyValueMetadata[:len(resp.OutputFilesystem.KeyValueMetadata)]
		}
		for keyValueMetadataCount2, keyValueMetadataItem2 := range resp.OutputFilesystem.KeyValueMetadata {
			var keyValueMetadata2 tfTypes.KeyValueMetadata
			keyValueMetadata2.Key = types.StringPointerValue(keyValueMetadataItem2.Key)
			keyValueMetadata2.Value = types.StringValue(keyValueMetadataItem2.Value)
			if keyValueMetadataCount2+1 > len(r.OutputFilesystem.KeyValueMetadata) {
				r.OutputFilesystem.KeyValueMetadata = append(r.OutputFilesystem.KeyValueMetadata, keyValueMetadata2)
			} else {
				r.OutputFilesystem.KeyValueMetadata[keyValueMetadataCount2].Key = keyValueMetadata2.Key
				r.OutputFilesystem.KeyValueMetadata[keyValueMetadataCount2].Value = keyValueMetadata2.Value
			}
		}
		r.OutputFilesystem.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputFilesystem.MaxFileIdleTimeSec)
		r.OutputFilesystem.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputFilesystem.MaxFileOpenTimeSec)
		r.OutputFilesystem.MaxFileSizeMB = types.Float64PointerValue(resp.OutputFilesystem.MaxFileSizeMB)
		r.OutputFilesystem.MaxOpenFiles = types.Float64PointerValue(resp.OutputFilesystem.MaxOpenFiles)
		r.OutputFilesystem.MaxRetryNum = types.Float64PointerValue(resp.OutputFilesystem.MaxRetryNum)
		if resp.OutputFilesystem.OnBackpressure != nil {
			r.OutputFilesystem.OnBackpressure = types.StringValue(string(*resp.OutputFilesystem.OnBackpressure))
		} else {
			r.OutputFilesystem.OnBackpressure = types.StringNull()
		}
		if resp.OutputFilesystem.OnDiskFullBackpressure != nil {
			r.OutputFilesystem.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputFilesystem.OnDiskFullBackpressure))
		} else {
			r.OutputFilesystem.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputFilesystem.ParquetDataPageVersion != nil {
			r.OutputFilesystem.ParquetDataPageVersion = types.StringValue(string(*resp.OutputFilesystem.ParquetDataPageVersion))
		} else {
			r.OutputFilesystem.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputFilesystem.ParquetPageSize = types.StringPointerValue(resp.OutputFilesystem.ParquetPageSize)
		r.OutputFilesystem.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputFilesystem.ParquetRowGroupLength)
		if resp.OutputFilesystem.ParquetVersion != nil {
			r.OutputFilesystem.ParquetVersion = types.StringValue(string(*resp.OutputFilesystem.ParquetVersion))
		} else {
			r.OutputFilesystem.ParquetVersion = types.StringNull()
		}
		r.OutputFilesystem.PartitionExpr = types.StringPointerValue(resp.OutputFilesystem.PartitionExpr)
		r.OutputFilesystem.Pipeline = types.StringPointerValue(resp.OutputFilesystem.Pipeline)
		r.OutputFilesystem.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputFilesystem.RemoveEmptyDirs)
		r.OutputFilesystem.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputFilesystem.ShouldLogInvalidRows)
		r.OutputFilesystem.StagePath = types.StringPointerValue(resp.OutputFilesystem.StagePath)
		r.OutputFilesystem.Streamtags = make([]types.String, 0, len(resp.OutputFilesystem.Streamtags))
		for _, v := range resp.OutputFilesystem.Streamtags {
			r.OutputFilesystem.Streamtags = append(r.OutputFilesystem.Streamtags, types.StringValue(v))
		}
		r.OutputFilesystem.SystemFields = make([]types.String, 0, len(resp.OutputFilesystem.SystemFields))
		for _, v := range resp.OutputFilesystem.SystemFields {
			r.OutputFilesystem.SystemFields = append(r.OutputFilesystem.SystemFields, types.StringValue(v))
		}
		r.OutputFilesystem.Type = types.StringValue(string(resp.OutputFilesystem.Type))
		r.OutputFilesystem.WriteHighWaterMark = types.Float64PointerValue(resp.OutputFilesystem.WriteHighWaterMark)
	}
	if resp.OutputGoogleChronicle != nil {
		r.OutputGoogleChronicle = &tfTypes.OutputGoogleChronicle{}
		r.OutputGoogleChronicle.APIKey = types.StringPointerValue(resp.OutputGoogleChronicle.APIKey)
		r.OutputGoogleChronicle.APIKeySecret = types.StringPointerValue(resp.OutputGoogleChronicle.APIKeySecret)
		if resp.OutputGoogleChronicle.APIVersion != nil {
			r.OutputGoogleChronicle.APIVersion = types.StringValue(string(*resp.OutputGoogleChronicle.APIVersion))
		} else {
			r.OutputGoogleChronicle.APIVersion = types.StringNull()
		}
		if resp.OutputGoogleChronicle.AuthenticationMethod != nil {
			r.OutputGoogleChronicle.AuthenticationMethod = types.StringValue(string(*resp.OutputGoogleChronicle.AuthenticationMethod))
		} else {
			r.OutputGoogleChronicle.AuthenticationMethod = types.StringNull()
		}
		r.OutputGoogleChronicle.Compress = types.BoolPointerValue(resp.OutputGoogleChronicle.Compress)
		r.OutputGoogleChronicle.Concurrency = types.Float64PointerValue(resp.OutputGoogleChronicle.Concurrency)
		r.OutputGoogleChronicle.CustomerID = types.StringPointerValue(resp.OutputGoogleChronicle.CustomerID)
		r.OutputGoogleChronicle.CustomLabels = []tfTypes.CustomLabels{}
		if len(r.OutputGoogleChronicle.CustomLabels) > len(resp.OutputGoogleChronicle.CustomLabels) {
			r.OutputGoogleChronicle.CustomLabels = r.OutputGoogleChronicle.CustomLabels[:len(resp.OutputGoogleChronicle.CustomLabels)]
		}
		for customLabelsCount, customLabelsItem := range resp.OutputGoogleChronicle.CustomLabels {
			var customLabels tfTypes.CustomLabels
			customLabels.Key = types.StringValue(customLabelsItem.Key)
			customLabels.Value = types.StringValue(customLabelsItem.Value)
			if customLabelsCount+1 > len(r.OutputGoogleChronicle.CustomLabels) {
				r.OutputGoogleChronicle.CustomLabels = append(r.OutputGoogleChronicle.CustomLabels, customLabels)
			} else {
				r.OutputGoogleChronicle.CustomLabels[customLabelsCount].Key = customLabels.Key
				r.OutputGoogleChronicle.CustomLabels[customLabelsCount].Value = customLabels.Value
			}
		}
		r.OutputGoogleChronicle.Description = types.StringPointerValue(resp.OutputGoogleChronicle.Description)
		r.OutputGoogleChronicle.Environment = types.StringPointerValue(resp.OutputGoogleChronicle.Environment)
		r.OutputGoogleChronicle.ExtraHTTPHeaders = []tfTypes.OutputGoogleChronicleExtraHTTPHeaders{}
		if len(r.OutputGoogleChronicle.ExtraHTTPHeaders) > len(resp.OutputGoogleChronicle.ExtraHTTPHeaders) {
			r.OutputGoogleChronicle.ExtraHTTPHeaders = r.OutputGoogleChronicle.ExtraHTTPHeaders[:len(resp.OutputGoogleChronicle.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount10, extraHTTPHeadersItem10 := range resp.OutputGoogleChronicle.ExtraHTTPHeaders {
			var extraHTTPHeaders10 tfTypes.OutputGoogleChronicleExtraHTTPHeaders
			extraHTTPHeaders10.Name = types.StringPointerValue(extraHTTPHeadersItem10.Name)
			extraHTTPHeaders10.Value = types.StringValue(extraHTTPHeadersItem10.Value)
			if extraHTTPHeadersCount10+1 > len(r.OutputGoogleChronicle.ExtraHTTPHeaders) {
				r.OutputGoogleChronicle.ExtraHTTPHeaders = append(r.OutputGoogleChronicle.ExtraHTTPHeaders, extraHTTPHeaders10)
			} else {
				r.OutputGoogleChronicle.ExtraHTTPHeaders[extraHTTPHeadersCount10].Name = extraHTTPHeaders10.Name
				r.OutputGoogleChronicle.ExtraHTTPHeaders[extraHTTPHeadersCount10].Value = extraHTTPHeaders10.Value
			}
		}
		r.OutputGoogleChronicle.ExtraLogTypes = []tfTypes.ExtraLogTypes{}
		if len(r.OutputGoogleChronicle.ExtraLogTypes) > len(resp.OutputGoogleChronicle.ExtraLogTypes) {
			r.OutputGoogleChronicle.ExtraLogTypes = r.OutputGoogleChronicle.ExtraLogTypes[:len(resp.OutputGoogleChronicle.ExtraLogTypes)]
		}
		for extraLogTypesCount, extraLogTypesItem := range resp.OutputGoogleChronicle.ExtraLogTypes {
			var extraLogTypes tfTypes.ExtraLogTypes
			extraLogTypes.Description = types.StringPointerValue(extraLogTypesItem.Description)
			extraLogTypes.LogType = types.StringValue(extraLogTypesItem.LogType)
			if extraLogTypesCount+1 > len(r.OutputGoogleChronicle.ExtraLogTypes) {
				r.OutputGoogleChronicle.ExtraLogTypes = append(r.OutputGoogleChronicle.ExtraLogTypes, extraLogTypes)
			} else {
				r.OutputGoogleChronicle.ExtraLogTypes[extraLogTypesCount].Description = extraLogTypes.Description
				r.OutputGoogleChronicle.ExtraLogTypes[extraLogTypesCount].LogType = extraLogTypes.LogType
			}
		}
		if resp.OutputGoogleChronicle.FailedRequestLoggingMode != nil {
			r.OutputGoogleChronicle.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputGoogleChronicle.FailedRequestLoggingMode))
		} else {
			r.OutputGoogleChronicle.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputGoogleChronicle.FlushPeriodSec = types.Float64PointerValue(resp.OutputGoogleChronicle.FlushPeriodSec)
		r.OutputGoogleChronicle.ID = types.StringPointerValue(resp.OutputGoogleChronicle.ID)
		if resp.OutputGoogleChronicle.LogFormatType != nil {
			r.OutputGoogleChronicle.LogFormatType = types.StringValue(string(*resp.OutputGoogleChronicle.LogFormatType))
		} else {
			r.OutputGoogleChronicle.LogFormatType = types.StringNull()
		}
		r.OutputGoogleChronicle.LogTextField = types.StringPointerValue(resp.OutputGoogleChronicle.LogTextField)
		r.OutputGoogleChronicle.LogType = types.StringPointerValue(resp.OutputGoogleChronicle.LogType)
		r.OutputGoogleChronicle.MaxPayloadEvents = types.Float64PointerValue(resp.OutputGoogleChronicle.MaxPayloadEvents)
		r.OutputGoogleChronicle.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputGoogleChronicle.MaxPayloadSizeKB)
		r.OutputGoogleChronicle.Namespace = types.StringPointerValue(resp.OutputGoogleChronicle.Namespace)
		if resp.OutputGoogleChronicle.OnBackpressure != nil {
			r.OutputGoogleChronicle.OnBackpressure = types.StringValue(string(*resp.OutputGoogleChronicle.OnBackpressure))
		} else {
			r.OutputGoogleChronicle.OnBackpressure = types.StringNull()
		}
		r.OutputGoogleChronicle.Pipeline = types.StringPointerValue(resp.OutputGoogleChronicle.Pipeline)
		if resp.OutputGoogleChronicle.PqCompress != nil {
			r.OutputGoogleChronicle.PqCompress = types.StringValue(string(*resp.OutputGoogleChronicle.PqCompress))
		} else {
			r.OutputGoogleChronicle.PqCompress = types.StringNull()
		}
		if resp.OutputGoogleChronicle.PqControls == nil {
			r.OutputGoogleChronicle.PqControls = nil
		} else {
			r.OutputGoogleChronicle.PqControls = &tfTypes.OutputGoogleChroniclePqControls{}
		}
		r.OutputGoogleChronicle.PqMaxFileSize = types.StringPointerValue(resp.OutputGoogleChronicle.PqMaxFileSize)
		r.OutputGoogleChronicle.PqMaxSize = types.StringPointerValue(resp.OutputGoogleChronicle.PqMaxSize)
		if resp.OutputGoogleChronicle.PqMode != nil {
			r.OutputGoogleChronicle.PqMode = types.StringValue(string(*resp.OutputGoogleChronicle.PqMode))
		} else {
			r.OutputGoogleChronicle.PqMode = types.StringNull()
		}
		if resp.OutputGoogleChronicle.PqOnBackpressure != nil {
			r.OutputGoogleChronicle.PqOnBackpressure = types.StringValue(string(*resp.OutputGoogleChronicle.PqOnBackpressure))
		} else {
			r.OutputGoogleChronicle.PqOnBackpressure = types.StringNull()
		}
		r.OutputGoogleChronicle.PqPath = types.StringPointerValue(resp.OutputGoogleChronicle.PqPath)
		r.OutputGoogleChronicle.Region = types.StringPointerValue(resp.OutputGoogleChronicle.Region)
		r.OutputGoogleChronicle.RejectUnauthorized = types.BoolPointerValue(resp.OutputGoogleChronicle.RejectUnauthorized)
		r.OutputGoogleChronicle.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputGoogleChronicle.ResponseHonorRetryAfterHeader)
		r.OutputGoogleChronicle.ResponseRetrySettings = []tfTypes.OutputGoogleChronicleResponseRetrySettings{}
		if len(r.OutputGoogleChronicle.ResponseRetrySettings) > len(resp.OutputGoogleChronicle.ResponseRetrySettings) {
			r.OutputGoogleChronicle.ResponseRetrySettings = r.OutputGoogleChronicle.ResponseRetrySettings[:len(resp.OutputGoogleChronicle.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount11, responseRetrySettingsItem11 := range resp.OutputGoogleChronicle.ResponseRetrySettings {
			var responseRetrySettings11 tfTypes.OutputGoogleChronicleResponseRetrySettings
			responseRetrySettings11.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem11.BackoffRate)
			responseRetrySettings11.HTTPStatus = types.Float64Value(responseRetrySettingsItem11.HTTPStatus)
			responseRetrySettings11.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem11.InitialBackoff)
			responseRetrySettings11.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem11.MaxBackoff)
			if responseRetrySettingsCount11+1 > len(r.OutputGoogleChronicle.ResponseRetrySettings) {
				r.OutputGoogleChronicle.ResponseRetrySettings = append(r.OutputGoogleChronicle.ResponseRetrySettings, responseRetrySettings11)
			} else {
				r.OutputGoogleChronicle.ResponseRetrySettings[responseRetrySettingsCount11].BackoffRate = responseRetrySettings11.BackoffRate
				r.OutputGoogleChronicle.ResponseRetrySettings[responseRetrySettingsCount11].HTTPStatus = responseRetrySettings11.HTTPStatus
				r.OutputGoogleChronicle.ResponseRetrySettings[responseRetrySettingsCount11].InitialBackoff = responseRetrySettings11.InitialBackoff
				r.OutputGoogleChronicle.ResponseRetrySettings[responseRetrySettingsCount11].MaxBackoff = responseRetrySettings11.MaxBackoff
			}
		}
		r.OutputGoogleChronicle.SafeHeaders = make([]types.String, 0, len(resp.OutputGoogleChronicle.SafeHeaders))
		for _, v := range resp.OutputGoogleChronicle.SafeHeaders {
			r.OutputGoogleChronicle.SafeHeaders = append(r.OutputGoogleChronicle.SafeHeaders, types.StringValue(v))
		}
		r.OutputGoogleChronicle.ServiceAccountCredentials = types.StringPointerValue(resp.OutputGoogleChronicle.ServiceAccountCredentials)
		r.OutputGoogleChronicle.ServiceAccountCredentialsSecret = types.StringPointerValue(resp.OutputGoogleChronicle.ServiceAccountCredentialsSecret)
		r.OutputGoogleChronicle.Streamtags = make([]types.String, 0, len(resp.OutputGoogleChronicle.Streamtags))
		for _, v := range resp.OutputGoogleChronicle.Streamtags {
			r.OutputGoogleChronicle.Streamtags = append(r.OutputGoogleChronicle.Streamtags, types.StringValue(v))
		}
		r.OutputGoogleChronicle.SystemFields = make([]types.String, 0, len(resp.OutputGoogleChronicle.SystemFields))
		for _, v := range resp.OutputGoogleChronicle.SystemFields {
			r.OutputGoogleChronicle.SystemFields = append(r.OutputGoogleChronicle.SystemFields, types.StringValue(v))
		}
		if resp.OutputGoogleChronicle.TimeoutRetrySettings == nil {
			r.OutputGoogleChronicle.TimeoutRetrySettings = nil
		} else {
			r.OutputGoogleChronicle.TimeoutRetrySettings = &tfTypes.OutputGoogleChronicleTimeoutRetrySettings{}
			r.OutputGoogleChronicle.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputGoogleChronicle.TimeoutRetrySettings.BackoffRate)
			r.OutputGoogleChronicle.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputGoogleChronicle.TimeoutRetrySettings.InitialBackoff)
			r.OutputGoogleChronicle.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputGoogleChronicle.TimeoutRetrySettings.MaxBackoff)
			r.OutputGoogleChronicle.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputGoogleChronicle.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputGoogleChronicle.TimeoutSec = types.Float64PointerValue(resp.OutputGoogleChronicle.TimeoutSec)
		r.OutputGoogleChronicle.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputGoogleChronicle.TotalMemoryLimitKB)
		r.OutputGoogleChronicle.Type = types.StringValue(string(resp.OutputGoogleChronicle.Type))
		r.OutputGoogleChronicle.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputGoogleChronicle.UseRoundRobinDNS)
	}
	if resp.OutputGoogleCloudLogging != nil {
		r.OutputGoogleCloudLogging = &tfTypes.OutputGoogleCloudLogging{}
		r.OutputGoogleCloudLogging.CacheFillBytesExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.CacheFillBytesExpression)
		r.OutputGoogleCloudLogging.CacheHitExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.CacheHitExpression)
		r.OutputGoogleCloudLogging.CacheLookupExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.CacheLookupExpression)
		r.OutputGoogleCloudLogging.CacheValidatedExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.CacheValidatedExpression)
		r.OutputGoogleCloudLogging.Concurrency = types.Float64PointerValue(resp.OutputGoogleCloudLogging.Concurrency)
		r.OutputGoogleCloudLogging.ConnectionTimeout = types.Float64PointerValue(resp.OutputGoogleCloudLogging.ConnectionTimeout)
		r.OutputGoogleCloudLogging.Description = types.StringPointerValue(resp.OutputGoogleCloudLogging.Description)
		r.OutputGoogleCloudLogging.Environment = types.StringPointerValue(resp.OutputGoogleCloudLogging.Environment)
		r.OutputGoogleCloudLogging.FileExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.FileExpression)
		r.OutputGoogleCloudLogging.FirstExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.FirstExpression)
		r.OutputGoogleCloudLogging.FlushPeriodSec = types.Float64PointerValue(resp.OutputGoogleCloudLogging.FlushPeriodSec)
		r.OutputGoogleCloudLogging.FunctionExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.FunctionExpression)
		if resp.OutputGoogleCloudLogging.GoogleAuthMethod != nil {
			r.OutputGoogleCloudLogging.GoogleAuthMethod = types.StringValue(string(*resp.OutputGoogleCloudLogging.GoogleAuthMethod))
		} else {
			r.OutputGoogleCloudLogging.GoogleAuthMethod = types.StringNull()
		}
		r.OutputGoogleCloudLogging.ID = types.StringPointerValue(resp.OutputGoogleCloudLogging.ID)
		r.OutputGoogleCloudLogging.IDExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.IDExpression)
		r.OutputGoogleCloudLogging.IndexExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.IndexExpression)
		r.OutputGoogleCloudLogging.InsertIDExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.InsertIDExpression)
		r.OutputGoogleCloudLogging.LastExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.LastExpression)
		r.OutputGoogleCloudLogging.LatencyExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.LatencyExpression)
		r.OutputGoogleCloudLogging.LineExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.LineExpression)
		r.OutputGoogleCloudLogging.LogLabels = []tfTypes.LogLabels{}
		if len(r.OutputGoogleCloudLogging.LogLabels) > len(resp.OutputGoogleCloudLogging.LogLabels) {
			r.OutputGoogleCloudLogging.LogLabels = r.OutputGoogleCloudLogging.LogLabels[:len(resp.OutputGoogleCloudLogging.LogLabels)]
		}
		for logLabelsCount, logLabelsItem := range resp.OutputGoogleCloudLogging.LogLabels {
			var logLabels tfTypes.LogLabels
			logLabels.Label = types.StringValue(logLabelsItem.Label)
			logLabels.ValueExpression = types.StringValue(logLabelsItem.ValueExpression)
			if logLabelsCount+1 > len(r.OutputGoogleCloudLogging.LogLabels) {
				r.OutputGoogleCloudLogging.LogLabels = append(r.OutputGoogleCloudLogging.LogLabels, logLabels)
			} else {
				r.OutputGoogleCloudLogging.LogLabels[logLabelsCount].Label = logLabels.Label
				r.OutputGoogleCloudLogging.LogLabels[logLabelsCount].ValueExpression = logLabels.ValueExpression
			}
		}
		r.OutputGoogleCloudLogging.LogLocationExpression = types.StringValue(resp.OutputGoogleCloudLogging.LogLocationExpression)
		r.OutputGoogleCloudLogging.LogLocationType = types.StringValue(string(resp.OutputGoogleCloudLogging.LogLocationType))
		r.OutputGoogleCloudLogging.LogNameExpression = types.StringValue(resp.OutputGoogleCloudLogging.LogNameExpression)
		r.OutputGoogleCloudLogging.MaxPayloadEvents = types.Float64PointerValue(resp.OutputGoogleCloudLogging.MaxPayloadEvents)
		r.OutputGoogleCloudLogging.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputGoogleCloudLogging.MaxPayloadSizeKB)
		if resp.OutputGoogleCloudLogging.OnBackpressure != nil {
			r.OutputGoogleCloudLogging.OnBackpressure = types.StringValue(string(*resp.OutputGoogleCloudLogging.OnBackpressure))
		} else {
			r.OutputGoogleCloudLogging.OnBackpressure = types.StringNull()
		}
		r.OutputGoogleCloudLogging.PayloadExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.PayloadExpression)
		if resp.OutputGoogleCloudLogging.PayloadFormat != nil {
			r.OutputGoogleCloudLogging.PayloadFormat = types.StringValue(string(*resp.OutputGoogleCloudLogging.PayloadFormat))
		} else {
			r.OutputGoogleCloudLogging.PayloadFormat = types.StringNull()
		}
		r.OutputGoogleCloudLogging.Pipeline = types.StringPointerValue(resp.OutputGoogleCloudLogging.Pipeline)
		if resp.OutputGoogleCloudLogging.PqCompress != nil {
			r.OutputGoogleCloudLogging.PqCompress = types.StringValue(string(*resp.OutputGoogleCloudLogging.PqCompress))
		} else {
			r.OutputGoogleCloudLogging.PqCompress = types.StringNull()
		}
		if resp.OutputGoogleCloudLogging.PqControls == nil {
			r.OutputGoogleCloudLogging.PqControls = nil
		} else {
			r.OutputGoogleCloudLogging.PqControls = &tfTypes.OutputGoogleCloudLoggingPqControls{}
		}
		r.OutputGoogleCloudLogging.PqMaxFileSize = types.StringPointerValue(resp.OutputGoogleCloudLogging.PqMaxFileSize)
		r.OutputGoogleCloudLogging.PqMaxSize = types.StringPointerValue(resp.OutputGoogleCloudLogging.PqMaxSize)
		if resp.OutputGoogleCloudLogging.PqMode != nil {
			r.OutputGoogleCloudLogging.PqMode = types.StringValue(string(*resp.OutputGoogleCloudLogging.PqMode))
		} else {
			r.OutputGoogleCloudLogging.PqMode = types.StringNull()
		}
		if resp.OutputGoogleCloudLogging.PqOnBackpressure != nil {
			r.OutputGoogleCloudLogging.PqOnBackpressure = types.StringValue(string(*resp.OutputGoogleCloudLogging.PqOnBackpressure))
		} else {
			r.OutputGoogleCloudLogging.PqOnBackpressure = types.StringNull()
		}
		r.OutputGoogleCloudLogging.PqPath = types.StringPointerValue(resp.OutputGoogleCloudLogging.PqPath)
		r.OutputGoogleCloudLogging.ProducerExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.ProducerExpression)
		r.OutputGoogleCloudLogging.ProtocolExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.ProtocolExpression)
		r.OutputGoogleCloudLogging.RefererExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.RefererExpression)
		r.OutputGoogleCloudLogging.RemoteIPExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.RemoteIPExpression)
		r.OutputGoogleCloudLogging.RequestMethodExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.RequestMethodExpression)
		r.OutputGoogleCloudLogging.RequestSizeExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.RequestSizeExpression)
		r.OutputGoogleCloudLogging.RequestURLExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.RequestURLExpression)
		r.OutputGoogleCloudLogging.ResourceTypeExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.ResourceTypeExpression)
		r.OutputGoogleCloudLogging.ResourceTypeLabels = []tfTypes.ResourceTypeLabels{}
		if len(r.OutputGoogleCloudLogging.ResourceTypeLabels) > len(resp.OutputGoogleCloudLogging.ResourceTypeLabels) {
			r.OutputGoogleCloudLogging.ResourceTypeLabels = r.OutputGoogleCloudLogging.ResourceTypeLabels[:len(resp.OutputGoogleCloudLogging.ResourceTypeLabels)]
		}
		for resourceTypeLabelsCount, resourceTypeLabelsItem := range resp.OutputGoogleCloudLogging.ResourceTypeLabels {
			var resourceTypeLabels tfTypes.ResourceTypeLabels
			resourceTypeLabels.Label = types.StringValue(resourceTypeLabelsItem.Label)
			resourceTypeLabels.ValueExpression = types.StringValue(resourceTypeLabelsItem.ValueExpression)
			if resourceTypeLabelsCount+1 > len(r.OutputGoogleCloudLogging.ResourceTypeLabels) {
				r.OutputGoogleCloudLogging.ResourceTypeLabels = append(r.OutputGoogleCloudLogging.ResourceTypeLabels, resourceTypeLabels)
			} else {
				r.OutputGoogleCloudLogging.ResourceTypeLabels[resourceTypeLabelsCount].Label = resourceTypeLabels.Label
				r.OutputGoogleCloudLogging.ResourceTypeLabels[resourceTypeLabelsCount].ValueExpression = resourceTypeLabels.ValueExpression
			}
		}
		r.OutputGoogleCloudLogging.ResponseSizeExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.ResponseSizeExpression)
		r.OutputGoogleCloudLogging.Secret = types.StringPointerValue(resp.OutputGoogleCloudLogging.Secret)
		r.OutputGoogleCloudLogging.ServerIPExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.ServerIPExpression)
		r.OutputGoogleCloudLogging.ServiceAccountCredentials = types.StringPointerValue(resp.OutputGoogleCloudLogging.ServiceAccountCredentials)
		r.OutputGoogleCloudLogging.SeverityExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.SeverityExpression)
		r.OutputGoogleCloudLogging.SpanIDExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.SpanIDExpression)
		r.OutputGoogleCloudLogging.StatusExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.StatusExpression)
		r.OutputGoogleCloudLogging.Streamtags = make([]types.String, 0, len(resp.OutputGoogleCloudLogging.Streamtags))
		for _, v := range resp.OutputGoogleCloudLogging.Streamtags {
			r.OutputGoogleCloudLogging.Streamtags = append(r.OutputGoogleCloudLogging.Streamtags, types.StringValue(v))
		}
		r.OutputGoogleCloudLogging.SystemFields = make([]types.String, 0, len(resp.OutputGoogleCloudLogging.SystemFields))
		for _, v := range resp.OutputGoogleCloudLogging.SystemFields {
			r.OutputGoogleCloudLogging.SystemFields = append(r.OutputGoogleCloudLogging.SystemFields, types.StringValue(v))
		}
		r.OutputGoogleCloudLogging.ThrottleRateReqPerSec = types.Int64PointerValue(resp.OutputGoogleCloudLogging.ThrottleRateReqPerSec)
		r.OutputGoogleCloudLogging.TimeoutSec = types.Float64PointerValue(resp.OutputGoogleCloudLogging.TimeoutSec)
		r.OutputGoogleCloudLogging.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputGoogleCloudLogging.TotalMemoryLimitKB)
		r.OutputGoogleCloudLogging.TotalSplitsExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.TotalSplitsExpression)
		r.OutputGoogleCloudLogging.TraceExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.TraceExpression)
		r.OutputGoogleCloudLogging.TraceSampledExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.TraceSampledExpression)
		if resp.OutputGoogleCloudLogging.Type != nil {
			r.OutputGoogleCloudLogging.Type = types.StringValue(string(*resp.OutputGoogleCloudLogging.Type))
		} else {
			r.OutputGoogleCloudLogging.Type = types.StringNull()
		}
		r.OutputGoogleCloudLogging.UIDExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.UIDExpression)
		r.OutputGoogleCloudLogging.UserAgentExpression = types.StringPointerValue(resp.OutputGoogleCloudLogging.UserAgentExpression)
	}
	if resp.OutputGoogleCloudStorage != nil {
		r.OutputGoogleCloudStorage = &tfTypes.OutputGoogleCloudStorage{}
		r.OutputGoogleCloudStorage.AddIDToStagePath = types.BoolPointerValue(resp.OutputGoogleCloudStorage.AddIDToStagePath)
		r.OutputGoogleCloudStorage.AutomaticSchema = types.BoolPointerValue(resp.OutputGoogleCloudStorage.AutomaticSchema)
		r.OutputGoogleCloudStorage.AwsAPIKey = types.StringPointerValue(resp.OutputGoogleCloudStorage.AwsAPIKey)
		if resp.OutputGoogleCloudStorage.AwsAuthenticationMethod != nil {
			r.OutputGoogleCloudStorage.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputGoogleCloudStorage.AwsAuthenticationMethod))
		} else {
			r.OutputGoogleCloudStorage.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputGoogleCloudStorage.AwsSecret = types.StringPointerValue(resp.OutputGoogleCloudStorage.AwsSecret)
		r.OutputGoogleCloudStorage.AwsSecretKey = types.StringPointerValue(resp.OutputGoogleCloudStorage.AwsSecretKey)
		r.OutputGoogleCloudStorage.BaseFileName = types.StringPointerValue(resp.OutputGoogleCloudStorage.BaseFileName)
		r.OutputGoogleCloudStorage.Bucket = types.StringValue(resp.OutputGoogleCloudStorage.Bucket)
		if resp.OutputGoogleCloudStorage.Compress != nil {
			r.OutputGoogleCloudStorage.Compress = types.StringValue(string(*resp.OutputGoogleCloudStorage.Compress))
		} else {
			r.OutputGoogleCloudStorage.Compress = types.StringNull()
		}
		if resp.OutputGoogleCloudStorage.CompressionLevel != nil {
			r.OutputGoogleCloudStorage.CompressionLevel = types.StringValue(string(*resp.OutputGoogleCloudStorage.CompressionLevel))
		} else {
			r.OutputGoogleCloudStorage.CompressionLevel = types.StringNull()
		}
		r.OutputGoogleCloudStorage.DeadletterEnabled = types.BoolPointerValue(resp.OutputGoogleCloudStorage.DeadletterEnabled)
		r.OutputGoogleCloudStorage.DeadletterPath = types.StringPointerValue(resp.OutputGoogleCloudStorage.DeadletterPath)
		r.OutputGoogleCloudStorage.Description = types.StringPointerValue(resp.OutputGoogleCloudStorage.Description)
		r.OutputGoogleCloudStorage.DestPath = types.StringPointerValue(resp.OutputGoogleCloudStorage.DestPath)
		r.OutputGoogleCloudStorage.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputGoogleCloudStorage.EmptyDirCleanupSec)
		r.OutputGoogleCloudStorage.EnablePageChecksum = types.BoolPointerValue(resp.OutputGoogleCloudStorage.EnablePageChecksum)
		r.OutputGoogleCloudStorage.EnableStatistics = types.BoolPointerValue(resp.OutputGoogleCloudStorage.EnableStatistics)
		r.OutputGoogleCloudStorage.EnableWritePageIndex = types.BoolPointerValue(resp.OutputGoogleCloudStorage.EnableWritePageIndex)
		r.OutputGoogleCloudStorage.Endpoint = types.StringPointerValue(resp.OutputGoogleCloudStorage.Endpoint)
		r.OutputGoogleCloudStorage.Environment = types.StringPointerValue(resp.OutputGoogleCloudStorage.Environment)
		r.OutputGoogleCloudStorage.FileNameSuffix = types.StringPointerValue(resp.OutputGoogleCloudStorage.FileNameSuffix)
		if resp.OutputGoogleCloudStorage.Format != nil {
			r.OutputGoogleCloudStorage.Format = types.StringValue(string(*resp.OutputGoogleCloudStorage.Format))
		} else {
			r.OutputGoogleCloudStorage.Format = types.StringNull()
		}
		r.OutputGoogleCloudStorage.HeaderLine = types.StringPointerValue(resp.OutputGoogleCloudStorage.HeaderLine)
		r.OutputGoogleCloudStorage.ID = types.StringPointerValue(resp.OutputGoogleCloudStorage.ID)
		r.OutputGoogleCloudStorage.KeyValueMetadata = []tfTypes.OutputGoogleCloudStorageKeyValueMetadata{}
		if len(r.OutputGoogleCloudStorage.KeyValueMetadata) > len(resp.OutputGoogleCloudStorage.KeyValueMetadata) {
			r.OutputGoogleCloudStorage.KeyValueMetadata = r.OutputGoogleCloudStorage.KeyValueMetadata[:len(resp.OutputGoogleCloudStorage.KeyValueMetadata)]
		}
		for keyValueMetadataCount3, keyValueMetadataItem3 := range resp.OutputGoogleCloudStorage.KeyValueMetadata {
			var keyValueMetadata3 tfTypes.OutputGoogleCloudStorageKeyValueMetadata
			keyValueMetadata3.Key = types.StringPointerValue(keyValueMetadataItem3.Key)
			keyValueMetadata3.Value = types.StringValue(keyValueMetadataItem3.Value)
			if keyValueMetadataCount3+1 > len(r.OutputGoogleCloudStorage.KeyValueMetadata) {
				r.OutputGoogleCloudStorage.KeyValueMetadata = append(r.OutputGoogleCloudStorage.KeyValueMetadata, keyValueMetadata3)
			} else {
				r.OutputGoogleCloudStorage.KeyValueMetadata[keyValueMetadataCount3].Key = keyValueMetadata3.Key
				r.OutputGoogleCloudStorage.KeyValueMetadata[keyValueMetadataCount3].Value = keyValueMetadata3.Value
			}
		}
		r.OutputGoogleCloudStorage.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputGoogleCloudStorage.MaxFileIdleTimeSec)
		r.OutputGoogleCloudStorage.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputGoogleCloudStorage.MaxFileOpenTimeSec)
		r.OutputGoogleCloudStorage.MaxFileSizeMB = types.Float64PointerValue(resp.OutputGoogleCloudStorage.MaxFileSizeMB)
		r.OutputGoogleCloudStorage.MaxOpenFiles = types.Float64PointerValue(resp.OutputGoogleCloudStorage.MaxOpenFiles)
		r.OutputGoogleCloudStorage.MaxRetryNum = types.Float64PointerValue(resp.OutputGoogleCloudStorage.MaxRetryNum)
		if resp.OutputGoogleCloudStorage.ObjectACL != nil {
			r.OutputGoogleCloudStorage.ObjectACL = types.StringValue(string(*resp.OutputGoogleCloudStorage.ObjectACL))
		} else {
			r.OutputGoogleCloudStorage.ObjectACL = types.StringNull()
		}
		if resp.OutputGoogleCloudStorage.OnBackpressure != nil {
			r.OutputGoogleCloudStorage.OnBackpressure = types.StringValue(string(*resp.OutputGoogleCloudStorage.OnBackpressure))
		} else {
			r.OutputGoogleCloudStorage.OnBackpressure = types.StringNull()
		}
		if resp.OutputGoogleCloudStorage.OnDiskFullBackpressure != nil {
			r.OutputGoogleCloudStorage.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputGoogleCloudStorage.OnDiskFullBackpressure))
		} else {
			r.OutputGoogleCloudStorage.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputGoogleCloudStorage.ParquetDataPageVersion != nil {
			r.OutputGoogleCloudStorage.ParquetDataPageVersion = types.StringValue(string(*resp.OutputGoogleCloudStorage.ParquetDataPageVersion))
		} else {
			r.OutputGoogleCloudStorage.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputGoogleCloudStorage.ParquetPageSize = types.StringPointerValue(resp.OutputGoogleCloudStorage.ParquetPageSize)
		r.OutputGoogleCloudStorage.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputGoogleCloudStorage.ParquetRowGroupLength)
		if resp.OutputGoogleCloudStorage.ParquetVersion != nil {
			r.OutputGoogleCloudStorage.ParquetVersion = types.StringValue(string(*resp.OutputGoogleCloudStorage.ParquetVersion))
		} else {
			r.OutputGoogleCloudStorage.ParquetVersion = types.StringNull()
		}
		r.OutputGoogleCloudStorage.PartitionExpr = types.StringPointerValue(resp.OutputGoogleCloudStorage.PartitionExpr)
		r.OutputGoogleCloudStorage.Pipeline = types.StringPointerValue(resp.OutputGoogleCloudStorage.Pipeline)
		r.OutputGoogleCloudStorage.Region = types.StringValue(resp.OutputGoogleCloudStorage.Region)
		r.OutputGoogleCloudStorage.RejectUnauthorized = types.BoolPointerValue(resp.OutputGoogleCloudStorage.RejectUnauthorized)
		r.OutputGoogleCloudStorage.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputGoogleCloudStorage.RemoveEmptyDirs)
		r.OutputGoogleCloudStorage.ReuseConnections = types.BoolPointerValue(resp.OutputGoogleCloudStorage.ReuseConnections)
		r.OutputGoogleCloudStorage.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputGoogleCloudStorage.ShouldLogInvalidRows)
		if resp.OutputGoogleCloudStorage.SignatureVersion != nil {
			r.OutputGoogleCloudStorage.SignatureVersion = types.StringValue(string(*resp.OutputGoogleCloudStorage.SignatureVersion))
		} else {
			r.OutputGoogleCloudStorage.SignatureVersion = types.StringNull()
		}
		r.OutputGoogleCloudStorage.StagePath = types.StringPointerValue(resp.OutputGoogleCloudStorage.StagePath)
		if resp.OutputGoogleCloudStorage.StorageClass != nil {
			r.OutputGoogleCloudStorage.StorageClass = types.StringValue(string(*resp.OutputGoogleCloudStorage.StorageClass))
		} else {
			r.OutputGoogleCloudStorage.StorageClass = types.StringNull()
		}
		r.OutputGoogleCloudStorage.Streamtags = make([]types.String, 0, len(resp.OutputGoogleCloudStorage.Streamtags))
		for _, v := range resp.OutputGoogleCloudStorage.Streamtags {
			r.OutputGoogleCloudStorage.Streamtags = append(r.OutputGoogleCloudStorage.Streamtags, types.StringValue(v))
		}
		r.OutputGoogleCloudStorage.SystemFields = make([]types.String, 0, len(resp.OutputGoogleCloudStorage.SystemFields))
		for _, v := range resp.OutputGoogleCloudStorage.SystemFields {
			r.OutputGoogleCloudStorage.SystemFields = append(r.OutputGoogleCloudStorage.SystemFields, types.StringValue(v))
		}
		if resp.OutputGoogleCloudStorage.Type != nil {
			r.OutputGoogleCloudStorage.Type = types.StringValue(string(*resp.OutputGoogleCloudStorage.Type))
		} else {
			r.OutputGoogleCloudStorage.Type = types.StringNull()
		}
		r.OutputGoogleCloudStorage.VerifyPermissions = types.BoolPointerValue(resp.OutputGoogleCloudStorage.VerifyPermissions)
		r.OutputGoogleCloudStorage.WriteHighWaterMark = types.Float64PointerValue(resp.OutputGoogleCloudStorage.WriteHighWaterMark)
	}
	if resp.OutputGooglePubsub != nil {
		r.OutputGooglePubsub = &tfTypes.OutputGooglePubsub{}
		r.OutputGooglePubsub.BatchSize = types.Float64PointerValue(resp.OutputGooglePubsub.BatchSize)
		r.OutputGooglePubsub.BatchTimeout = types.Float64PointerValue(resp.OutputGooglePubsub.BatchTimeout)
		r.OutputGooglePubsub.CreateTopic = types.BoolPointerValue(resp.OutputGooglePubsub.CreateTopic)
		r.OutputGooglePubsub.Description = types.StringPointerValue(resp.OutputGooglePubsub.Description)
		r.OutputGooglePubsub.Environment = types.StringPointerValue(resp.OutputGooglePubsub.Environment)
		r.OutputGooglePubsub.FlushPeriodSec = types.Float64PointerValue(resp.OutputGooglePubsub.FlushPeriodSec)
		if resp.OutputGooglePubsub.GoogleAuthMethod != nil {
			r.OutputGooglePubsub.GoogleAuthMethod = types.StringValue(string(*resp.OutputGooglePubsub.GoogleAuthMethod))
		} else {
			r.OutputGooglePubsub.GoogleAuthMethod = types.StringNull()
		}
		r.OutputGooglePubsub.ID = types.StringPointerValue(resp.OutputGooglePubsub.ID)
		r.OutputGooglePubsub.MaxInProgress = types.Float64PointerValue(resp.OutputGooglePubsub.MaxInProgress)
		r.OutputGooglePubsub.MaxQueueSize = types.Float64PointerValue(resp.OutputGooglePubsub.MaxQueueSize)
		r.OutputGooglePubsub.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputGooglePubsub.MaxRecordSizeKB)
		if resp.OutputGooglePubsub.OnBackpressure != nil {
			r.OutputGooglePubsub.OnBackpressure = types.StringValue(string(*resp.OutputGooglePubsub.OnBackpressure))
		} else {
			r.OutputGooglePubsub.OnBackpressure = types.StringNull()
		}
		r.OutputGooglePubsub.OrderedDelivery = types.BoolPointerValue(resp.OutputGooglePubsub.OrderedDelivery)
		r.OutputGooglePubsub.Pipeline = types.StringPointerValue(resp.OutputGooglePubsub.Pipeline)
		if resp.OutputGooglePubsub.PqCompress != nil {
			r.OutputGooglePubsub.PqCompress = types.StringValue(string(*resp.OutputGooglePubsub.PqCompress))
		} else {
			r.OutputGooglePubsub.PqCompress = types.StringNull()
		}
		if resp.OutputGooglePubsub.PqControls == nil {
			r.OutputGooglePubsub.PqControls = nil
		} else {
			r.OutputGooglePubsub.PqControls = &tfTypes.OutputGooglePubsubPqControls{}
		}
		r.OutputGooglePubsub.PqMaxFileSize = types.StringPointerValue(resp.OutputGooglePubsub.PqMaxFileSize)
		r.OutputGooglePubsub.PqMaxSize = types.StringPointerValue(resp.OutputGooglePubsub.PqMaxSize)
		if resp.OutputGooglePubsub.PqMode != nil {
			r.OutputGooglePubsub.PqMode = types.StringValue(string(*resp.OutputGooglePubsub.PqMode))
		} else {
			r.OutputGooglePubsub.PqMode = types.StringNull()
		}
		if resp.OutputGooglePubsub.PqOnBackpressure != nil {
			r.OutputGooglePubsub.PqOnBackpressure = types.StringValue(string(*resp.OutputGooglePubsub.PqOnBackpressure))
		} else {
			r.OutputGooglePubsub.PqOnBackpressure = types.StringNull()
		}
		r.OutputGooglePubsub.PqPath = types.StringPointerValue(resp.OutputGooglePubsub.PqPath)
		r.OutputGooglePubsub.Region = types.StringPointerValue(resp.OutputGooglePubsub.Region)
		r.OutputGooglePubsub.Secret = types.StringPointerValue(resp.OutputGooglePubsub.Secret)
		r.OutputGooglePubsub.ServiceAccountCredentials = types.StringPointerValue(resp.OutputGooglePubsub.ServiceAccountCredentials)
		r.OutputGooglePubsub.Streamtags = make([]types.String, 0, len(resp.OutputGooglePubsub.Streamtags))
		for _, v := range resp.OutputGooglePubsub.Streamtags {
			r.OutputGooglePubsub.Streamtags = append(r.OutputGooglePubsub.Streamtags, types.StringValue(v))
		}
		r.OutputGooglePubsub.SystemFields = make([]types.String, 0, len(resp.OutputGooglePubsub.SystemFields))
		for _, v := range resp.OutputGooglePubsub.SystemFields {
			r.OutputGooglePubsub.SystemFields = append(r.OutputGooglePubsub.SystemFields, types.StringValue(v))
		}
		r.OutputGooglePubsub.TopicName = types.StringValue(resp.OutputGooglePubsub.TopicName)
		r.OutputGooglePubsub.Type = types.StringValue(string(resp.OutputGooglePubsub.Type))
	}
	if resp.OutputGrafanaCloud != nil {
		r.OutputGrafanaCloud = &tfTypes.OutputGrafanaCloud{}
		if resp.OutputGrafanaCloud.OutputGrafanaCloud1 != nil {
			r.OutputGrafanaCloud.One = &tfTypes.OutputGrafanaCloud1{}
			r.OutputGrafanaCloud.One.Compress = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.Compress)
			r.OutputGrafanaCloud.One.Concurrency = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.Concurrency)
			r.OutputGrafanaCloud.One.Description = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.Description)
			r.OutputGrafanaCloud.One.Environment = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.Environment)
			r.OutputGrafanaCloud.One.ExtraHTTPHeaders = []tfTypes.OutputGrafanaCloudExtraHTTPHeaders{}
			if len(r.OutputGrafanaCloud.One.ExtraHTTPHeaders) > len(resp.OutputGrafanaCloud.OutputGrafanaCloud1.ExtraHTTPHeaders) {
				r.OutputGrafanaCloud.One.ExtraHTTPHeaders = r.OutputGrafanaCloud.One.ExtraHTTPHeaders[:len(resp.OutputGrafanaCloud.OutputGrafanaCloud1.ExtraHTTPHeaders)]
			}
			for extraHTTPHeadersCount11, extraHTTPHeadersItem11 := range resp.OutputGrafanaCloud.OutputGrafanaCloud1.ExtraHTTPHeaders {
				var extraHTTPHeaders11 tfTypes.OutputGrafanaCloudExtraHTTPHeaders
				extraHTTPHeaders11.Name = types.StringPointerValue(extraHTTPHeadersItem11.Name)
				extraHTTPHeaders11.Value = types.StringValue(extraHTTPHeadersItem11.Value)
				if extraHTTPHeadersCount11+1 > len(r.OutputGrafanaCloud.One.ExtraHTTPHeaders) {
					r.OutputGrafanaCloud.One.ExtraHTTPHeaders = append(r.OutputGrafanaCloud.One.ExtraHTTPHeaders, extraHTTPHeaders11)
				} else {
					r.OutputGrafanaCloud.One.ExtraHTTPHeaders[extraHTTPHeadersCount11].Name = extraHTTPHeaders11.Name
					r.OutputGrafanaCloud.One.ExtraHTTPHeaders[extraHTTPHeadersCount11].Value = extraHTTPHeaders11.Value
				}
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloud1.FailedRequestLoggingMode != nil {
				r.OutputGrafanaCloud.One.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud1.FailedRequestLoggingMode))
			} else {
				r.OutputGrafanaCloud.One.FailedRequestLoggingMode = types.StringNull()
			}
			r.OutputGrafanaCloud.One.FlushPeriodSec = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.FlushPeriodSec)
			r.OutputGrafanaCloud.One.ID = types.StringValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.ID)
			r.OutputGrafanaCloud.One.Labels = []tfTypes.OutputGrafanaCloud1Labels{}
			if len(r.OutputGrafanaCloud.One.Labels) > len(resp.OutputGrafanaCloud.OutputGrafanaCloud1.Labels) {
				r.OutputGrafanaCloud.One.Labels = r.OutputGrafanaCloud.One.Labels[:len(resp.OutputGrafanaCloud.OutputGrafanaCloud1.Labels)]
			}
			for labelsCount, labelsItem := range resp.OutputGrafanaCloud.OutputGrafanaCloud1.Labels {
				var labels tfTypes.OutputGrafanaCloud1Labels
				labels.Name = types.StringPointerValue(labelsItem.Name)
				labels.Value = types.StringValue(labelsItem.Value)
				if labelsCount+1 > len(r.OutputGrafanaCloud.One.Labels) {
					r.OutputGrafanaCloud.One.Labels = append(r.OutputGrafanaCloud.One.Labels, labels)
				} else {
					r.OutputGrafanaCloud.One.Labels[labelsCount].Name = labels.Name
					r.OutputGrafanaCloud.One.Labels[labelsCount].Value = labels.Value
				}
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloud1.LokiAuth == nil {
				r.OutputGrafanaCloud.One.LokiAuth = nil
			} else {
				r.OutputGrafanaCloud.One.LokiAuth = &tfTypes.OutputGrafanaCloudLokiAuth{}
				if resp.OutputGrafanaCloud.OutputGrafanaCloud1.LokiAuth.AuthType != nil {
					r.OutputGrafanaCloud.One.LokiAuth.AuthType = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud1.LokiAuth.AuthType))
				} else {
					r.OutputGrafanaCloud.One.LokiAuth.AuthType = types.StringNull()
				}
				r.OutputGrafanaCloud.One.LokiAuth.CredentialsSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.LokiAuth.CredentialsSecret)
				r.OutputGrafanaCloud.One.LokiAuth.Password = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.LokiAuth.Password)
				r.OutputGrafanaCloud.One.LokiAuth.TextSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.LokiAuth.TextSecret)
				r.OutputGrafanaCloud.One.LokiAuth.Token = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.LokiAuth.Token)
				r.OutputGrafanaCloud.One.LokiAuth.Username = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.LokiAuth.Username)
			}
			r.OutputGrafanaCloud.One.LokiURL = types.StringValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.LokiURL)
			r.OutputGrafanaCloud.One.MaxPayloadEvents = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.MaxPayloadEvents)
			r.OutputGrafanaCloud.One.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.MaxPayloadSizeKB)
			r.OutputGrafanaCloud.One.Message = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.Message)
			if resp.OutputGrafanaCloud.OutputGrafanaCloud1.MessageFormat != nil {
				r.OutputGrafanaCloud.One.MessageFormat = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud1.MessageFormat))
			} else {
				r.OutputGrafanaCloud.One.MessageFormat = types.StringNull()
			}
			r.OutputGrafanaCloud.One.MetricRenameExpr = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.MetricRenameExpr)
			if resp.OutputGrafanaCloud.OutputGrafanaCloud1.OnBackpressure != nil {
				r.OutputGrafanaCloud.One.OnBackpressure = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud1.OnBackpressure))
			} else {
				r.OutputGrafanaCloud.One.OnBackpressure = types.StringNull()
			}
			r.OutputGrafanaCloud.One.Pipeline = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.Pipeline)
			if resp.OutputGrafanaCloud.OutputGrafanaCloud1.PqCompress != nil {
				r.OutputGrafanaCloud.One.PqCompress = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud1.PqCompress))
			} else {
				r.OutputGrafanaCloud.One.PqCompress = types.StringNull()
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloud1.PqControls == nil {
				r.OutputGrafanaCloud.One.PqControls = nil
			} else {
				r.OutputGrafanaCloud.One.PqControls = &tfTypes.OutputGrafanaCloudPqControls{}
			}
			r.OutputGrafanaCloud.One.PqMaxFileSize = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.PqMaxFileSize)
			r.OutputGrafanaCloud.One.PqMaxSize = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.PqMaxSize)
			if resp.OutputGrafanaCloud.OutputGrafanaCloud1.PqMode != nil {
				r.OutputGrafanaCloud.One.PqMode = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud1.PqMode))
			} else {
				r.OutputGrafanaCloud.One.PqMode = types.StringNull()
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloud1.PqOnBackpressure != nil {
				r.OutputGrafanaCloud.One.PqOnBackpressure = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud1.PqOnBackpressure))
			} else {
				r.OutputGrafanaCloud.One.PqOnBackpressure = types.StringNull()
			}
			r.OutputGrafanaCloud.One.PqPath = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.PqPath)
			if resp.OutputGrafanaCloud.OutputGrafanaCloud1.PrometheusAuth == nil {
				r.OutputGrafanaCloud.One.PrometheusAuth = nil
			} else {
				r.OutputGrafanaCloud.One.PrometheusAuth = &tfTypes.OutputGrafanaCloudPrometheusAuth{}
				if resp.OutputGrafanaCloud.OutputGrafanaCloud1.PrometheusAuth.AuthType != nil {
					r.OutputGrafanaCloud.One.PrometheusAuth.AuthType = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud1.PrometheusAuth.AuthType))
				} else {
					r.OutputGrafanaCloud.One.PrometheusAuth.AuthType = types.StringNull()
				}
				r.OutputGrafanaCloud.One.PrometheusAuth.CredentialsSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.PrometheusAuth.CredentialsSecret)
				r.OutputGrafanaCloud.One.PrometheusAuth.Password = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.PrometheusAuth.Password)
				r.OutputGrafanaCloud.One.PrometheusAuth.TextSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.PrometheusAuth.TextSecret)
				r.OutputGrafanaCloud.One.PrometheusAuth.Token = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.PrometheusAuth.Token)
				r.OutputGrafanaCloud.One.PrometheusAuth.Username = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.PrometheusAuth.Username)
			}
			r.OutputGrafanaCloud.One.PrometheusURL = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.PrometheusURL)
			r.OutputGrafanaCloud.One.RejectUnauthorized = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.RejectUnauthorized)
			r.OutputGrafanaCloud.One.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.ResponseHonorRetryAfterHeader)
			r.OutputGrafanaCloud.One.ResponseRetrySettings = []tfTypes.OutputGrafanaCloudResponseRetrySettings{}
			if len(r.OutputGrafanaCloud.One.ResponseRetrySettings) > len(resp.OutputGrafanaCloud.OutputGrafanaCloud1.ResponseRetrySettings) {
				r.OutputGrafanaCloud.One.ResponseRetrySettings = r.OutputGrafanaCloud.One.ResponseRetrySettings[:len(resp.OutputGrafanaCloud.OutputGrafanaCloud1.ResponseRetrySettings)]
			}
			for responseRetrySettingsCount12, responseRetrySettingsItem12 := range resp.OutputGrafanaCloud.OutputGrafanaCloud1.ResponseRetrySettings {
				var responseRetrySettings12 tfTypes.OutputGrafanaCloudResponseRetrySettings
				responseRetrySettings12.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem12.BackoffRate)
				responseRetrySettings12.HTTPStatus = types.Float64Value(responseRetrySettingsItem12.HTTPStatus)
				responseRetrySettings12.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem12.InitialBackoff)
				responseRetrySettings12.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem12.MaxBackoff)
				if responseRetrySettingsCount12+1 > len(r.OutputGrafanaCloud.One.ResponseRetrySettings) {
					r.OutputGrafanaCloud.One.ResponseRetrySettings = append(r.OutputGrafanaCloud.One.ResponseRetrySettings, responseRetrySettings12)
				} else {
					r.OutputGrafanaCloud.One.ResponseRetrySettings[responseRetrySettingsCount12].BackoffRate = responseRetrySettings12.BackoffRate
					r.OutputGrafanaCloud.One.ResponseRetrySettings[responseRetrySettingsCount12].HTTPStatus = responseRetrySettings12.HTTPStatus
					r.OutputGrafanaCloud.One.ResponseRetrySettings[responseRetrySettingsCount12].InitialBackoff = responseRetrySettings12.InitialBackoff
					r.OutputGrafanaCloud.One.ResponseRetrySettings[responseRetrySettingsCount12].MaxBackoff = responseRetrySettings12.MaxBackoff
				}
			}
			r.OutputGrafanaCloud.One.SafeHeaders = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloud1.SafeHeaders))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloud1.SafeHeaders {
				r.OutputGrafanaCloud.One.SafeHeaders = append(r.OutputGrafanaCloud.One.SafeHeaders, types.StringValue(v))
			}
			r.OutputGrafanaCloud.One.Streamtags = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloud1.Streamtags))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloud1.Streamtags {
				r.OutputGrafanaCloud.One.Streamtags = append(r.OutputGrafanaCloud.One.Streamtags, types.StringValue(v))
			}
			r.OutputGrafanaCloud.One.SystemFields = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloud1.SystemFields))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloud1.SystemFields {
				r.OutputGrafanaCloud.One.SystemFields = append(r.OutputGrafanaCloud.One.SystemFields, types.StringValue(v))
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloud1.TimeoutRetrySettings == nil {
				r.OutputGrafanaCloud.One.TimeoutRetrySettings = nil
			} else {
				r.OutputGrafanaCloud.One.TimeoutRetrySettings = &tfTypes.OutputGrafanaCloudTimeoutRetrySettings{}
				r.OutputGrafanaCloud.One.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.TimeoutRetrySettings.BackoffRate)
				r.OutputGrafanaCloud.One.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.TimeoutRetrySettings.InitialBackoff)
				r.OutputGrafanaCloud.One.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.TimeoutRetrySettings.MaxBackoff)
				r.OutputGrafanaCloud.One.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.TimeoutRetrySettings.TimeoutRetry)
			}
			r.OutputGrafanaCloud.One.TimeoutSec = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.TimeoutSec)
			r.OutputGrafanaCloud.One.Type = types.StringValue(string(resp.OutputGrafanaCloud.OutputGrafanaCloud1.Type))
			r.OutputGrafanaCloud.One.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud1.UseRoundRobinDNS)
		}
		if resp.OutputGrafanaCloud.OutputGrafanaCloud2 != nil {
			r.OutputGrafanaCloud.Two = &tfTypes.OutputGrafanaCloud2{}
			r.OutputGrafanaCloud.Two.Compress = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.Compress)
			r.OutputGrafanaCloud.Two.Concurrency = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.Concurrency)
			r.OutputGrafanaCloud.Two.Description = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.Description)
			r.OutputGrafanaCloud.Two.Environment = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.Environment)
			r.OutputGrafanaCloud.Two.ExtraHTTPHeaders = []tfTypes.OutputGrafanaCloud2ExtraHTTPHeaders{}
			if len(r.OutputGrafanaCloud.Two.ExtraHTTPHeaders) > len(resp.OutputGrafanaCloud.OutputGrafanaCloud2.ExtraHTTPHeaders) {
				r.OutputGrafanaCloud.Two.ExtraHTTPHeaders = r.OutputGrafanaCloud.Two.ExtraHTTPHeaders[:len(resp.OutputGrafanaCloud.OutputGrafanaCloud2.ExtraHTTPHeaders)]
			}
			for extraHTTPHeadersCount12, extraHTTPHeadersItem12 := range resp.OutputGrafanaCloud.OutputGrafanaCloud2.ExtraHTTPHeaders {
				var extraHTTPHeaders12 tfTypes.OutputGrafanaCloud2ExtraHTTPHeaders
				extraHTTPHeaders12.Name = types.StringPointerValue(extraHTTPHeadersItem12.Name)
				extraHTTPHeaders12.Value = types.StringValue(extraHTTPHeadersItem12.Value)
				if extraHTTPHeadersCount12+1 > len(r.OutputGrafanaCloud.Two.ExtraHTTPHeaders) {
					r.OutputGrafanaCloud.Two.ExtraHTTPHeaders = append(r.OutputGrafanaCloud.Two.ExtraHTTPHeaders, extraHTTPHeaders12)
				} else {
					r.OutputGrafanaCloud.Two.ExtraHTTPHeaders[extraHTTPHeadersCount12].Name = extraHTTPHeaders12.Name
					r.OutputGrafanaCloud.Two.ExtraHTTPHeaders[extraHTTPHeadersCount12].Value = extraHTTPHeaders12.Value
				}
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloud2.FailedRequestLoggingMode != nil {
				r.OutputGrafanaCloud.Two.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud2.FailedRequestLoggingMode))
			} else {
				r.OutputGrafanaCloud.Two.FailedRequestLoggingMode = types.StringNull()
			}
			r.OutputGrafanaCloud.Two.FlushPeriodSec = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.FlushPeriodSec)
			r.OutputGrafanaCloud.Two.ID = types.StringValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.ID)
			r.OutputGrafanaCloud.Two.Labels = []tfTypes.OutputGrafanaCloudLabels{}
			if len(r.OutputGrafanaCloud.Two.Labels) > len(resp.OutputGrafanaCloud.OutputGrafanaCloud2.Labels) {
				r.OutputGrafanaCloud.Two.Labels = r.OutputGrafanaCloud.Two.Labels[:len(resp.OutputGrafanaCloud.OutputGrafanaCloud2.Labels)]
			}
			for labelsCount1, labelsItem1 := range resp.OutputGrafanaCloud.OutputGrafanaCloud2.Labels {
				var labels1 tfTypes.OutputGrafanaCloudLabels
				labels1.Name = types.StringPointerValue(labelsItem1.Name)
				labels1.Value = types.StringValue(labelsItem1.Value)
				if labelsCount1+1 > len(r.OutputGrafanaCloud.Two.Labels) {
					r.OutputGrafanaCloud.Two.Labels = append(r.OutputGrafanaCloud.Two.Labels, labels1)
				} else {
					r.OutputGrafanaCloud.Two.Labels[labelsCount1].Name = labels1.Name
					r.OutputGrafanaCloud.Two.Labels[labelsCount1].Value = labels1.Value
				}
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloud2.LokiAuth == nil {
				r.OutputGrafanaCloud.Two.LokiAuth = nil
			} else {
				r.OutputGrafanaCloud.Two.LokiAuth = &tfTypes.OutputGrafanaCloud2LokiAuth{}
				if resp.OutputGrafanaCloud.OutputGrafanaCloud2.LokiAuth.AuthType != nil {
					r.OutputGrafanaCloud.Two.LokiAuth.AuthType = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud2.LokiAuth.AuthType))
				} else {
					r.OutputGrafanaCloud.Two.LokiAuth.AuthType = types.StringNull()
				}
				r.OutputGrafanaCloud.Two.LokiAuth.CredentialsSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.LokiAuth.CredentialsSecret)
				r.OutputGrafanaCloud.Two.LokiAuth.Password = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.LokiAuth.Password)
				r.OutputGrafanaCloud.Two.LokiAuth.TextSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.LokiAuth.TextSecret)
				r.OutputGrafanaCloud.Two.LokiAuth.Token = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.LokiAuth.Token)
				r.OutputGrafanaCloud.Two.LokiAuth.Username = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.LokiAuth.Username)
			}
			r.OutputGrafanaCloud.Two.LokiURL = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.LokiURL)
			r.OutputGrafanaCloud.Two.MaxPayloadEvents = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.MaxPayloadEvents)
			r.OutputGrafanaCloud.Two.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.MaxPayloadSizeKB)
			r.OutputGrafanaCloud.Two.Message = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.Message)
			if resp.OutputGrafanaCloud.OutputGrafanaCloud2.MessageFormat != nil {
				r.OutputGrafanaCloud.Two.MessageFormat = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud2.MessageFormat))
			} else {
				r.OutputGrafanaCloud.Two.MessageFormat = types.StringNull()
			}
			r.OutputGrafanaCloud.Two.MetricRenameExpr = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.MetricRenameExpr)
			if resp.OutputGrafanaCloud.OutputGrafanaCloud2.OnBackpressure != nil {
				r.OutputGrafanaCloud.Two.OnBackpressure = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud2.OnBackpressure))
			} else {
				r.OutputGrafanaCloud.Two.OnBackpressure = types.StringNull()
			}
			r.OutputGrafanaCloud.Two.Pipeline = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.Pipeline)
			if resp.OutputGrafanaCloud.OutputGrafanaCloud2.PqCompress != nil {
				r.OutputGrafanaCloud.Two.PqCompress = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud2.PqCompress))
			} else {
				r.OutputGrafanaCloud.Two.PqCompress = types.StringNull()
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloud2.PqControls == nil {
				r.OutputGrafanaCloud.Two.PqControls = nil
			} else {
				r.OutputGrafanaCloud.Two.PqControls = &tfTypes.OutputGrafanaCloud2PqControls{}
			}
			r.OutputGrafanaCloud.Two.PqMaxFileSize = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.PqMaxFileSize)
			r.OutputGrafanaCloud.Two.PqMaxSize = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.PqMaxSize)
			if resp.OutputGrafanaCloud.OutputGrafanaCloud2.PqMode != nil {
				r.OutputGrafanaCloud.Two.PqMode = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud2.PqMode))
			} else {
				r.OutputGrafanaCloud.Two.PqMode = types.StringNull()
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloud2.PqOnBackpressure != nil {
				r.OutputGrafanaCloud.Two.PqOnBackpressure = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud2.PqOnBackpressure))
			} else {
				r.OutputGrafanaCloud.Two.PqOnBackpressure = types.StringNull()
			}
			r.OutputGrafanaCloud.Two.PqPath = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.PqPath)
			if resp.OutputGrafanaCloud.OutputGrafanaCloud2.PrometheusAuth == nil {
				r.OutputGrafanaCloud.Two.PrometheusAuth = nil
			} else {
				r.OutputGrafanaCloud.Two.PrometheusAuth = &tfTypes.OutputGrafanaCloud2PrometheusAuth{}
				if resp.OutputGrafanaCloud.OutputGrafanaCloud2.PrometheusAuth.AuthType != nil {
					r.OutputGrafanaCloud.Two.PrometheusAuth.AuthType = types.StringValue(string(*resp.OutputGrafanaCloud.OutputGrafanaCloud2.PrometheusAuth.AuthType))
				} else {
					r.OutputGrafanaCloud.Two.PrometheusAuth.AuthType = types.StringNull()
				}
				r.OutputGrafanaCloud.Two.PrometheusAuth.CredentialsSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.PrometheusAuth.CredentialsSecret)
				r.OutputGrafanaCloud.Two.PrometheusAuth.Password = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.PrometheusAuth.Password)
				r.OutputGrafanaCloud.Two.PrometheusAuth.TextSecret = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.PrometheusAuth.TextSecret)
				r.OutputGrafanaCloud.Two.PrometheusAuth.Token = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.PrometheusAuth.Token)
				r.OutputGrafanaCloud.Two.PrometheusAuth.Username = types.StringPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.PrometheusAuth.Username)
			}
			r.OutputGrafanaCloud.Two.PrometheusURL = types.StringValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.PrometheusURL)
			r.OutputGrafanaCloud.Two.RejectUnauthorized = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.RejectUnauthorized)
			r.OutputGrafanaCloud.Two.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.ResponseHonorRetryAfterHeader)
			r.OutputGrafanaCloud.Two.ResponseRetrySettings = []tfTypes.OutputGrafanaCloud2ResponseRetrySettings{}
			if len(r.OutputGrafanaCloud.Two.ResponseRetrySettings) > len(resp.OutputGrafanaCloud.OutputGrafanaCloud2.ResponseRetrySettings) {
				r.OutputGrafanaCloud.Two.ResponseRetrySettings = r.OutputGrafanaCloud.Two.ResponseRetrySettings[:len(resp.OutputGrafanaCloud.OutputGrafanaCloud2.ResponseRetrySettings)]
			}
			for responseRetrySettingsCount13, responseRetrySettingsItem13 := range resp.OutputGrafanaCloud.OutputGrafanaCloud2.ResponseRetrySettings {
				var responseRetrySettings13 tfTypes.OutputGrafanaCloud2ResponseRetrySettings
				responseRetrySettings13.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem13.BackoffRate)
				responseRetrySettings13.HTTPStatus = types.Float64Value(responseRetrySettingsItem13.HTTPStatus)
				responseRetrySettings13.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem13.InitialBackoff)
				responseRetrySettings13.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem13.MaxBackoff)
				if responseRetrySettingsCount13+1 > len(r.OutputGrafanaCloud.Two.ResponseRetrySettings) {
					r.OutputGrafanaCloud.Two.ResponseRetrySettings = append(r.OutputGrafanaCloud.Two.ResponseRetrySettings, responseRetrySettings13)
				} else {
					r.OutputGrafanaCloud.Two.ResponseRetrySettings[responseRetrySettingsCount13].BackoffRate = responseRetrySettings13.BackoffRate
					r.OutputGrafanaCloud.Two.ResponseRetrySettings[responseRetrySettingsCount13].HTTPStatus = responseRetrySettings13.HTTPStatus
					r.OutputGrafanaCloud.Two.ResponseRetrySettings[responseRetrySettingsCount13].InitialBackoff = responseRetrySettings13.InitialBackoff
					r.OutputGrafanaCloud.Two.ResponseRetrySettings[responseRetrySettingsCount13].MaxBackoff = responseRetrySettings13.MaxBackoff
				}
			}
			r.OutputGrafanaCloud.Two.SafeHeaders = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloud2.SafeHeaders))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloud2.SafeHeaders {
				r.OutputGrafanaCloud.Two.SafeHeaders = append(r.OutputGrafanaCloud.Two.SafeHeaders, types.StringValue(v))
			}
			r.OutputGrafanaCloud.Two.Streamtags = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloud2.Streamtags))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloud2.Streamtags {
				r.OutputGrafanaCloud.Two.Streamtags = append(r.OutputGrafanaCloud.Two.Streamtags, types.StringValue(v))
			}
			r.OutputGrafanaCloud.Two.SystemFields = make([]types.String, 0, len(resp.OutputGrafanaCloud.OutputGrafanaCloud2.SystemFields))
			for _, v := range resp.OutputGrafanaCloud.OutputGrafanaCloud2.SystemFields {
				r.OutputGrafanaCloud.Two.SystemFields = append(r.OutputGrafanaCloud.Two.SystemFields, types.StringValue(v))
			}
			if resp.OutputGrafanaCloud.OutputGrafanaCloud2.TimeoutRetrySettings == nil {
				r.OutputGrafanaCloud.Two.TimeoutRetrySettings = nil
			} else {
				r.OutputGrafanaCloud.Two.TimeoutRetrySettings = &tfTypes.OutputGrafanaCloud2TimeoutRetrySettings{}
				r.OutputGrafanaCloud.Two.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.TimeoutRetrySettings.BackoffRate)
				r.OutputGrafanaCloud.Two.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.TimeoutRetrySettings.InitialBackoff)
				r.OutputGrafanaCloud.Two.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.TimeoutRetrySettings.MaxBackoff)
				r.OutputGrafanaCloud.Two.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.TimeoutRetrySettings.TimeoutRetry)
			}
			r.OutputGrafanaCloud.Two.TimeoutSec = types.Float64PointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.TimeoutSec)
			r.OutputGrafanaCloud.Two.Type = types.StringValue(string(resp.OutputGrafanaCloud.OutputGrafanaCloud2.Type))
			r.OutputGrafanaCloud.Two.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputGrafanaCloud.OutputGrafanaCloud2.UseRoundRobinDNS)
		}
	}
	if resp.OutputGraphite != nil {
		r.OutputGraphite = &tfTypes.OutputGraphite{}
		r.OutputGraphite.ConnectionTimeout = types.Float64PointerValue(resp.OutputGraphite.ConnectionTimeout)
		r.OutputGraphite.Description = types.StringPointerValue(resp.OutputGraphite.Description)
		r.OutputGraphite.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputGraphite.DNSResolvePeriodSec)
		r.OutputGraphite.Environment = types.StringPointerValue(resp.OutputGraphite.Environment)
		r.OutputGraphite.FlushPeriodSec = types.Float64PointerValue(resp.OutputGraphite.FlushPeriodSec)
		r.OutputGraphite.Host = types.StringValue(resp.OutputGraphite.Host)
		r.OutputGraphite.ID = types.StringPointerValue(resp.OutputGraphite.ID)
		r.OutputGraphite.Mtu = types.Float64PointerValue(resp.OutputGraphite.Mtu)
		if resp.OutputGraphite.OnBackpressure != nil {
			r.OutputGraphite.OnBackpressure = types.StringValue(string(*resp.OutputGraphite.OnBackpressure))
		} else {
			r.OutputGraphite.OnBackpressure = types.StringNull()
		}
		r.OutputGraphite.Pipeline = types.StringPointerValue(resp.OutputGraphite.Pipeline)
		r.OutputGraphite.Port = types.Float64PointerValue(resp.OutputGraphite.Port)
		if resp.OutputGraphite.PqCompress != nil {
			r.OutputGraphite.PqCompress = types.StringValue(string(*resp.OutputGraphite.PqCompress))
		} else {
			r.OutputGraphite.PqCompress = types.StringNull()
		}
		if resp.OutputGraphite.PqControls == nil {
			r.OutputGraphite.PqControls = nil
		} else {
			r.OutputGraphite.PqControls = &tfTypes.OutputGraphitePqControls{}
		}
		r.OutputGraphite.PqMaxFileSize = types.StringPointerValue(resp.OutputGraphite.PqMaxFileSize)
		r.OutputGraphite.PqMaxSize = types.StringPointerValue(resp.OutputGraphite.PqMaxSize)
		if resp.OutputGraphite.PqMode != nil {
			r.OutputGraphite.PqMode = types.StringValue(string(*resp.OutputGraphite.PqMode))
		} else {
			r.OutputGraphite.PqMode = types.StringNull()
		}
		if resp.OutputGraphite.PqOnBackpressure != nil {
			r.OutputGraphite.PqOnBackpressure = types.StringValue(string(*resp.OutputGraphite.PqOnBackpressure))
		} else {
			r.OutputGraphite.PqOnBackpressure = types.StringNull()
		}
		r.OutputGraphite.PqPath = types.StringPointerValue(resp.OutputGraphite.PqPath)
		if resp.OutputGraphite.Protocol != nil {
			r.OutputGraphite.Protocol = types.StringValue(string(*resp.OutputGraphite.Protocol))
		} else {
			r.OutputGraphite.Protocol = types.StringNull()
		}
		r.OutputGraphite.Streamtags = make([]types.String, 0, len(resp.OutputGraphite.Streamtags))
		for _, v := range resp.OutputGraphite.Streamtags {
			r.OutputGraphite.Streamtags = append(r.OutputGraphite.Streamtags, types.StringValue(v))
		}
		r.OutputGraphite.SystemFields = make([]types.String, 0, len(resp.OutputGraphite.SystemFields))
		for _, v := range resp.OutputGraphite.SystemFields {
			r.OutputGraphite.SystemFields = append(r.OutputGraphite.SystemFields, types.StringValue(v))
		}
		r.OutputGraphite.ThrottleRatePerSec = types.StringPointerValue(resp.OutputGraphite.ThrottleRatePerSec)
		if resp.OutputGraphite.Type != nil {
			r.OutputGraphite.Type = types.StringValue(string(*resp.OutputGraphite.Type))
		} else {
			r.OutputGraphite.Type = types.StringNull()
		}
		r.OutputGraphite.WriteTimeout = types.Float64PointerValue(resp.OutputGraphite.WriteTimeout)
	}
	if resp.OutputHoneycomb != nil {
		r.OutputHoneycomb = &tfTypes.OutputHoneycomb{}
		if resp.OutputHoneycomb.AuthType != nil {
			r.OutputHoneycomb.AuthType = types.StringValue(string(*resp.OutputHoneycomb.AuthType))
		} else {
			r.OutputHoneycomb.AuthType = types.StringNull()
		}
		r.OutputHoneycomb.Compress = types.BoolPointerValue(resp.OutputHoneycomb.Compress)
		r.OutputHoneycomb.Concurrency = types.Float64PointerValue(resp.OutputHoneycomb.Concurrency)
		r.OutputHoneycomb.Dataset = types.StringValue(resp.OutputHoneycomb.Dataset)
		r.OutputHoneycomb.Description = types.StringPointerValue(resp.OutputHoneycomb.Description)
		r.OutputHoneycomb.Environment = types.StringPointerValue(resp.OutputHoneycomb.Environment)
		r.OutputHoneycomb.ExtraHTTPHeaders = []tfTypes.OutputHoneycombExtraHTTPHeaders{}
		if len(r.OutputHoneycomb.ExtraHTTPHeaders) > len(resp.OutputHoneycomb.ExtraHTTPHeaders) {
			r.OutputHoneycomb.ExtraHTTPHeaders = r.OutputHoneycomb.ExtraHTTPHeaders[:len(resp.OutputHoneycomb.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount13, extraHTTPHeadersItem13 := range resp.OutputHoneycomb.ExtraHTTPHeaders {
			var extraHTTPHeaders13 tfTypes.OutputHoneycombExtraHTTPHeaders
			extraHTTPHeaders13.Name = types.StringPointerValue(extraHTTPHeadersItem13.Name)
			extraHTTPHeaders13.Value = types.StringValue(extraHTTPHeadersItem13.Value)
			if extraHTTPHeadersCount13+1 > len(r.OutputHoneycomb.ExtraHTTPHeaders) {
				r.OutputHoneycomb.ExtraHTTPHeaders = append(r.OutputHoneycomb.ExtraHTTPHeaders, extraHTTPHeaders13)
			} else {
				r.OutputHoneycomb.ExtraHTTPHeaders[extraHTTPHeadersCount13].Name = extraHTTPHeaders13.Name
				r.OutputHoneycomb.ExtraHTTPHeaders[extraHTTPHeadersCount13].Value = extraHTTPHeaders13.Value
			}
		}
		if resp.OutputHoneycomb.FailedRequestLoggingMode != nil {
			r.OutputHoneycomb.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputHoneycomb.FailedRequestLoggingMode))
		} else {
			r.OutputHoneycomb.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputHoneycomb.FlushPeriodSec = types.Float64PointerValue(resp.OutputHoneycomb.FlushPeriodSec)
		r.OutputHoneycomb.ID = types.StringPointerValue(resp.OutputHoneycomb.ID)
		r.OutputHoneycomb.MaxPayloadEvents = types.Float64PointerValue(resp.OutputHoneycomb.MaxPayloadEvents)
		r.OutputHoneycomb.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputHoneycomb.MaxPayloadSizeKB)
		if resp.OutputHoneycomb.OnBackpressure != nil {
			r.OutputHoneycomb.OnBackpressure = types.StringValue(string(*resp.OutputHoneycomb.OnBackpressure))
		} else {
			r.OutputHoneycomb.OnBackpressure = types.StringNull()
		}
		r.OutputHoneycomb.Pipeline = types.StringPointerValue(resp.OutputHoneycomb.Pipeline)
		if resp.OutputHoneycomb.PqCompress != nil {
			r.OutputHoneycomb.PqCompress = types.StringValue(string(*resp.OutputHoneycomb.PqCompress))
		} else {
			r.OutputHoneycomb.PqCompress = types.StringNull()
		}
		if resp.OutputHoneycomb.PqControls == nil {
			r.OutputHoneycomb.PqControls = nil
		} else {
			r.OutputHoneycomb.PqControls = &tfTypes.OutputHoneycombPqControls{}
		}
		r.OutputHoneycomb.PqMaxFileSize = types.StringPointerValue(resp.OutputHoneycomb.PqMaxFileSize)
		r.OutputHoneycomb.PqMaxSize = types.StringPointerValue(resp.OutputHoneycomb.PqMaxSize)
		if resp.OutputHoneycomb.PqMode != nil {
			r.OutputHoneycomb.PqMode = types.StringValue(string(*resp.OutputHoneycomb.PqMode))
		} else {
			r.OutputHoneycomb.PqMode = types.StringNull()
		}
		if resp.OutputHoneycomb.PqOnBackpressure != nil {
			r.OutputHoneycomb.PqOnBackpressure = types.StringValue(string(*resp.OutputHoneycomb.PqOnBackpressure))
		} else {
			r.OutputHoneycomb.PqOnBackpressure = types.StringNull()
		}
		r.OutputHoneycomb.PqPath = types.StringPointerValue(resp.OutputHoneycomb.PqPath)
		r.OutputHoneycomb.RejectUnauthorized = types.BoolPointerValue(resp.OutputHoneycomb.RejectUnauthorized)
		r.OutputHoneycomb.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputHoneycomb.ResponseHonorRetryAfterHeader)
		r.OutputHoneycomb.ResponseRetrySettings = []tfTypes.OutputHoneycombResponseRetrySettings{}
		if len(r.OutputHoneycomb.ResponseRetrySettings) > len(resp.OutputHoneycomb.ResponseRetrySettings) {
			r.OutputHoneycomb.ResponseRetrySettings = r.OutputHoneycomb.ResponseRetrySettings[:len(resp.OutputHoneycomb.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount14, responseRetrySettingsItem14 := range resp.OutputHoneycomb.ResponseRetrySettings {
			var responseRetrySettings14 tfTypes.OutputHoneycombResponseRetrySettings
			responseRetrySettings14.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem14.BackoffRate)
			responseRetrySettings14.HTTPStatus = types.Float64Value(responseRetrySettingsItem14.HTTPStatus)
			responseRetrySettings14.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem14.InitialBackoff)
			responseRetrySettings14.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem14.MaxBackoff)
			if responseRetrySettingsCount14+1 > len(r.OutputHoneycomb.ResponseRetrySettings) {
				r.OutputHoneycomb.ResponseRetrySettings = append(r.OutputHoneycomb.ResponseRetrySettings, responseRetrySettings14)
			} else {
				r.OutputHoneycomb.ResponseRetrySettings[responseRetrySettingsCount14].BackoffRate = responseRetrySettings14.BackoffRate
				r.OutputHoneycomb.ResponseRetrySettings[responseRetrySettingsCount14].HTTPStatus = responseRetrySettings14.HTTPStatus
				r.OutputHoneycomb.ResponseRetrySettings[responseRetrySettingsCount14].InitialBackoff = responseRetrySettings14.InitialBackoff
				r.OutputHoneycomb.ResponseRetrySettings[responseRetrySettingsCount14].MaxBackoff = responseRetrySettings14.MaxBackoff
			}
		}
		r.OutputHoneycomb.SafeHeaders = make([]types.String, 0, len(resp.OutputHoneycomb.SafeHeaders))
		for _, v := range resp.OutputHoneycomb.SafeHeaders {
			r.OutputHoneycomb.SafeHeaders = append(r.OutputHoneycomb.SafeHeaders, types.StringValue(v))
		}
		r.OutputHoneycomb.Streamtags = make([]types.String, 0, len(resp.OutputHoneycomb.Streamtags))
		for _, v := range resp.OutputHoneycomb.Streamtags {
			r.OutputHoneycomb.Streamtags = append(r.OutputHoneycomb.Streamtags, types.StringValue(v))
		}
		r.OutputHoneycomb.SystemFields = make([]types.String, 0, len(resp.OutputHoneycomb.SystemFields))
		for _, v := range resp.OutputHoneycomb.SystemFields {
			r.OutputHoneycomb.SystemFields = append(r.OutputHoneycomb.SystemFields, types.StringValue(v))
		}
		r.OutputHoneycomb.Team = types.StringPointerValue(resp.OutputHoneycomb.Team)
		r.OutputHoneycomb.TextSecret = types.StringPointerValue(resp.OutputHoneycomb.TextSecret)
		if resp.OutputHoneycomb.TimeoutRetrySettings == nil {
			r.OutputHoneycomb.TimeoutRetrySettings = nil
		} else {
			r.OutputHoneycomb.TimeoutRetrySettings = &tfTypes.OutputHoneycombTimeoutRetrySettings{}
			r.OutputHoneycomb.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputHoneycomb.TimeoutRetrySettings.BackoffRate)
			r.OutputHoneycomb.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputHoneycomb.TimeoutRetrySettings.InitialBackoff)
			r.OutputHoneycomb.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputHoneycomb.TimeoutRetrySettings.MaxBackoff)
			r.OutputHoneycomb.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputHoneycomb.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputHoneycomb.TimeoutSec = types.Float64PointerValue(resp.OutputHoneycomb.TimeoutSec)
		r.OutputHoneycomb.Type = types.StringValue(string(resp.OutputHoneycomb.Type))
		r.OutputHoneycomb.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputHoneycomb.UseRoundRobinDNS)
	}
	if resp.OutputHumioHec != nil {
		r.OutputHumioHec = &tfTypes.OutputHumioHec{}
		if resp.OutputHumioHec.AuthType != nil {
			r.OutputHumioHec.AuthType = types.StringValue(string(*resp.OutputHumioHec.AuthType))
		} else {
			r.OutputHumioHec.AuthType = types.StringNull()
		}
		r.OutputHumioHec.Compress = types.BoolPointerValue(resp.OutputHumioHec.Compress)
		r.OutputHumioHec.Concurrency = types.Float64PointerValue(resp.OutputHumioHec.Concurrency)
		r.OutputHumioHec.Description = types.StringPointerValue(resp.OutputHumioHec.Description)
		r.OutputHumioHec.Environment = types.StringPointerValue(resp.OutputHumioHec.Environment)
		r.OutputHumioHec.ExtraHTTPHeaders = []tfTypes.OutputHumioHecExtraHTTPHeaders{}
		if len(r.OutputHumioHec.ExtraHTTPHeaders) > len(resp.OutputHumioHec.ExtraHTTPHeaders) {
			r.OutputHumioHec.ExtraHTTPHeaders = r.OutputHumioHec.ExtraHTTPHeaders[:len(resp.OutputHumioHec.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount14, extraHTTPHeadersItem14 := range resp.OutputHumioHec.ExtraHTTPHeaders {
			var extraHTTPHeaders14 tfTypes.OutputHumioHecExtraHTTPHeaders
			extraHTTPHeaders14.Name = types.StringPointerValue(extraHTTPHeadersItem14.Name)
			extraHTTPHeaders14.Value = types.StringValue(extraHTTPHeadersItem14.Value)
			if extraHTTPHeadersCount14+1 > len(r.OutputHumioHec.ExtraHTTPHeaders) {
				r.OutputHumioHec.ExtraHTTPHeaders = append(r.OutputHumioHec.ExtraHTTPHeaders, extraHTTPHeaders14)
			} else {
				r.OutputHumioHec.ExtraHTTPHeaders[extraHTTPHeadersCount14].Name = extraHTTPHeaders14.Name
				r.OutputHumioHec.ExtraHTTPHeaders[extraHTTPHeadersCount14].Value = extraHTTPHeaders14.Value
			}
		}
		if resp.OutputHumioHec.FailedRequestLoggingMode != nil {
			r.OutputHumioHec.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputHumioHec.FailedRequestLoggingMode))
		} else {
			r.OutputHumioHec.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputHumioHec.FlushPeriodSec = types.Float64PointerValue(resp.OutputHumioHec.FlushPeriodSec)
		if resp.OutputHumioHec.Format != nil {
			r.OutputHumioHec.Format = types.StringValue(string(*resp.OutputHumioHec.Format))
		} else {
			r.OutputHumioHec.Format = types.StringNull()
		}
		r.OutputHumioHec.ID = types.StringPointerValue(resp.OutputHumioHec.ID)
		r.OutputHumioHec.MaxPayloadEvents = types.Float64PointerValue(resp.OutputHumioHec.MaxPayloadEvents)
		r.OutputHumioHec.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputHumioHec.MaxPayloadSizeKB)
		if resp.OutputHumioHec.OnBackpressure != nil {
			r.OutputHumioHec.OnBackpressure = types.StringValue(string(*resp.OutputHumioHec.OnBackpressure))
		} else {
			r.OutputHumioHec.OnBackpressure = types.StringNull()
		}
		r.OutputHumioHec.Pipeline = types.StringPointerValue(resp.OutputHumioHec.Pipeline)
		if resp.OutputHumioHec.PqCompress != nil {
			r.OutputHumioHec.PqCompress = types.StringValue(string(*resp.OutputHumioHec.PqCompress))
		} else {
			r.OutputHumioHec.PqCompress = types.StringNull()
		}
		if resp.OutputHumioHec.PqControls == nil {
			r.OutputHumioHec.PqControls = nil
		} else {
			r.OutputHumioHec.PqControls = &tfTypes.OutputHumioHecPqControls{}
		}
		r.OutputHumioHec.PqMaxFileSize = types.StringPointerValue(resp.OutputHumioHec.PqMaxFileSize)
		r.OutputHumioHec.PqMaxSize = types.StringPointerValue(resp.OutputHumioHec.PqMaxSize)
		if resp.OutputHumioHec.PqMode != nil {
			r.OutputHumioHec.PqMode = types.StringValue(string(*resp.OutputHumioHec.PqMode))
		} else {
			r.OutputHumioHec.PqMode = types.StringNull()
		}
		if resp.OutputHumioHec.PqOnBackpressure != nil {
			r.OutputHumioHec.PqOnBackpressure = types.StringValue(string(*resp.OutputHumioHec.PqOnBackpressure))
		} else {
			r.OutputHumioHec.PqOnBackpressure = types.StringNull()
		}
		r.OutputHumioHec.PqPath = types.StringPointerValue(resp.OutputHumioHec.PqPath)
		r.OutputHumioHec.RejectUnauthorized = types.BoolPointerValue(resp.OutputHumioHec.RejectUnauthorized)
		r.OutputHumioHec.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputHumioHec.ResponseHonorRetryAfterHeader)
		r.OutputHumioHec.ResponseRetrySettings = []tfTypes.OutputHumioHecResponseRetrySettings{}
		if len(r.OutputHumioHec.ResponseRetrySettings) > len(resp.OutputHumioHec.ResponseRetrySettings) {
			r.OutputHumioHec.ResponseRetrySettings = r.OutputHumioHec.ResponseRetrySettings[:len(resp.OutputHumioHec.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount15, responseRetrySettingsItem15 := range resp.OutputHumioHec.ResponseRetrySettings {
			var responseRetrySettings15 tfTypes.OutputHumioHecResponseRetrySettings
			responseRetrySettings15.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem15.BackoffRate)
			responseRetrySettings15.HTTPStatus = types.Float64Value(responseRetrySettingsItem15.HTTPStatus)
			responseRetrySettings15.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem15.InitialBackoff)
			responseRetrySettings15.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem15.MaxBackoff)
			if responseRetrySettingsCount15+1 > len(r.OutputHumioHec.ResponseRetrySettings) {
				r.OutputHumioHec.ResponseRetrySettings = append(r.OutputHumioHec.ResponseRetrySettings, responseRetrySettings15)
			} else {
				r.OutputHumioHec.ResponseRetrySettings[responseRetrySettingsCount15].BackoffRate = responseRetrySettings15.BackoffRate
				r.OutputHumioHec.ResponseRetrySettings[responseRetrySettingsCount15].HTTPStatus = responseRetrySettings15.HTTPStatus
				r.OutputHumioHec.ResponseRetrySettings[responseRetrySettingsCount15].InitialBackoff = responseRetrySettings15.InitialBackoff
				r.OutputHumioHec.ResponseRetrySettings[responseRetrySettingsCount15].MaxBackoff = responseRetrySettings15.MaxBackoff
			}
		}
		r.OutputHumioHec.SafeHeaders = make([]types.String, 0, len(resp.OutputHumioHec.SafeHeaders))
		for _, v := range resp.OutputHumioHec.SafeHeaders {
			r.OutputHumioHec.SafeHeaders = append(r.OutputHumioHec.SafeHeaders, types.StringValue(v))
		}
		r.OutputHumioHec.Streamtags = make([]types.String, 0, len(resp.OutputHumioHec.Streamtags))
		for _, v := range resp.OutputHumioHec.Streamtags {
			r.OutputHumioHec.Streamtags = append(r.OutputHumioHec.Streamtags, types.StringValue(v))
		}
		r.OutputHumioHec.SystemFields = make([]types.String, 0, len(resp.OutputHumioHec.SystemFields))
		for _, v := range resp.OutputHumioHec.SystemFields {
			r.OutputHumioHec.SystemFields = append(r.OutputHumioHec.SystemFields, types.StringValue(v))
		}
		r.OutputHumioHec.TextSecret = types.StringPointerValue(resp.OutputHumioHec.TextSecret)
		if resp.OutputHumioHec.TimeoutRetrySettings == nil {
			r.OutputHumioHec.TimeoutRetrySettings = nil
		} else {
			r.OutputHumioHec.TimeoutRetrySettings = &tfTypes.OutputHumioHecTimeoutRetrySettings{}
			r.OutputHumioHec.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputHumioHec.TimeoutRetrySettings.BackoffRate)
			r.OutputHumioHec.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputHumioHec.TimeoutRetrySettings.InitialBackoff)
			r.OutputHumioHec.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputHumioHec.TimeoutRetrySettings.MaxBackoff)
			r.OutputHumioHec.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputHumioHec.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputHumioHec.TimeoutSec = types.Float64PointerValue(resp.OutputHumioHec.TimeoutSec)
		r.OutputHumioHec.Token = types.StringPointerValue(resp.OutputHumioHec.Token)
		if resp.OutputHumioHec.Type != nil {
			r.OutputHumioHec.Type = types.StringValue(string(*resp.OutputHumioHec.Type))
		} else {
			r.OutputHumioHec.Type = types.StringNull()
		}
		r.OutputHumioHec.URL = types.StringPointerValue(resp.OutputHumioHec.URL)
		r.OutputHumioHec.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputHumioHec.UseRoundRobinDNS)
	}
	if resp.OutputInfluxdb != nil {
		r.OutputInfluxdb = &tfTypes.OutputInfluxdb{}
		r.OutputInfluxdb.AuthHeaderExpr = types.StringPointerValue(resp.OutputInfluxdb.AuthHeaderExpr)
		if resp.OutputInfluxdb.AuthType != nil {
			r.OutputInfluxdb.AuthType = types.StringValue(string(*resp.OutputInfluxdb.AuthType))
		} else {
			r.OutputInfluxdb.AuthType = types.StringNull()
		}
		r.OutputInfluxdb.Bucket = types.StringPointerValue(resp.OutputInfluxdb.Bucket)
		r.OutputInfluxdb.Compress = types.BoolPointerValue(resp.OutputInfluxdb.Compress)
		r.OutputInfluxdb.Concurrency = types.Float64PointerValue(resp.OutputInfluxdb.Concurrency)
		r.OutputInfluxdb.CredentialsSecret = types.StringPointerValue(resp.OutputInfluxdb.CredentialsSecret)
		r.OutputInfluxdb.Database = types.StringPointerValue(resp.OutputInfluxdb.Database)
		r.OutputInfluxdb.Description = types.StringPointerValue(resp.OutputInfluxdb.Description)
		r.OutputInfluxdb.DynamicValueFieldName = types.BoolPointerValue(resp.OutputInfluxdb.DynamicValueFieldName)
		r.OutputInfluxdb.Environment = types.StringPointerValue(resp.OutputInfluxdb.Environment)
		r.OutputInfluxdb.ExtraHTTPHeaders = []tfTypes.OutputInfluxdbExtraHTTPHeaders{}
		if len(r.OutputInfluxdb.ExtraHTTPHeaders) > len(resp.OutputInfluxdb.ExtraHTTPHeaders) {
			r.OutputInfluxdb.ExtraHTTPHeaders = r.OutputInfluxdb.ExtraHTTPHeaders[:len(resp.OutputInfluxdb.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount15, extraHTTPHeadersItem15 := range resp.OutputInfluxdb.ExtraHTTPHeaders {
			var extraHTTPHeaders15 tfTypes.OutputInfluxdbExtraHTTPHeaders
			extraHTTPHeaders15.Name = types.StringPointerValue(extraHTTPHeadersItem15.Name)
			extraHTTPHeaders15.Value = types.StringValue(extraHTTPHeadersItem15.Value)
			if extraHTTPHeadersCount15+1 > len(r.OutputInfluxdb.ExtraHTTPHeaders) {
				r.OutputInfluxdb.ExtraHTTPHeaders = append(r.OutputInfluxdb.ExtraHTTPHeaders, extraHTTPHeaders15)
			} else {
				r.OutputInfluxdb.ExtraHTTPHeaders[extraHTTPHeadersCount15].Name = extraHTTPHeaders15.Name
				r.OutputInfluxdb.ExtraHTTPHeaders[extraHTTPHeadersCount15].Value = extraHTTPHeaders15.Value
			}
		}
		if resp.OutputInfluxdb.FailedRequestLoggingMode != nil {
			r.OutputInfluxdb.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputInfluxdb.FailedRequestLoggingMode))
		} else {
			r.OutputInfluxdb.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputInfluxdb.FlushPeriodSec = types.Float64PointerValue(resp.OutputInfluxdb.FlushPeriodSec)
		r.OutputInfluxdb.ID = types.StringPointerValue(resp.OutputInfluxdb.ID)
		r.OutputInfluxdb.LoginURL = types.StringPointerValue(resp.OutputInfluxdb.LoginURL)
		r.OutputInfluxdb.MaxPayloadEvents = types.Float64PointerValue(resp.OutputInfluxdb.MaxPayloadEvents)
		r.OutputInfluxdb.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputInfluxdb.MaxPayloadSizeKB)
		r.OutputInfluxdb.OauthHeaders = []tfTypes.OutputInfluxdbOauthHeaders{}
		if len(r.OutputInfluxdb.OauthHeaders) > len(resp.OutputInfluxdb.OauthHeaders) {
			r.OutputInfluxdb.OauthHeaders = r.OutputInfluxdb.OauthHeaders[:len(resp.OutputInfluxdb.OauthHeaders)]
		}
		for oauthHeadersCount1, oauthHeadersItem1 := range resp.OutputInfluxdb.OauthHeaders {
			var oauthHeaders1 tfTypes.OutputInfluxdbOauthHeaders
			oauthHeaders1.Name = types.StringValue(oauthHeadersItem1.Name)
			oauthHeaders1.Value = types.StringValue(oauthHeadersItem1.Value)
			if oauthHeadersCount1+1 > len(r.OutputInfluxdb.OauthHeaders) {
				r.OutputInfluxdb.OauthHeaders = append(r.OutputInfluxdb.OauthHeaders, oauthHeaders1)
			} else {
				r.OutputInfluxdb.OauthHeaders[oauthHeadersCount1].Name = oauthHeaders1.Name
				r.OutputInfluxdb.OauthHeaders[oauthHeadersCount1].Value = oauthHeaders1.Value
			}
		}
		r.OutputInfluxdb.OauthParams = []tfTypes.OutputInfluxdbOauthParams{}
		if len(r.OutputInfluxdb.OauthParams) > len(resp.OutputInfluxdb.OauthParams) {
			r.OutputInfluxdb.OauthParams = r.OutputInfluxdb.OauthParams[:len(resp.OutputInfluxdb.OauthParams)]
		}
		for oauthParamsCount1, oauthParamsItem1 := range resp.OutputInfluxdb.OauthParams {
			var oauthParams1 tfTypes.OutputInfluxdbOauthParams
			oauthParams1.Name = types.StringValue(oauthParamsItem1.Name)
			oauthParams1.Value = types.StringValue(oauthParamsItem1.Value)
			if oauthParamsCount1+1 > len(r.OutputInfluxdb.OauthParams) {
				r.OutputInfluxdb.OauthParams = append(r.OutputInfluxdb.OauthParams, oauthParams1)
			} else {
				r.OutputInfluxdb.OauthParams[oauthParamsCount1].Name = oauthParams1.Name
				r.OutputInfluxdb.OauthParams[oauthParamsCount1].Value = oauthParams1.Value
			}
		}
		if resp.OutputInfluxdb.OnBackpressure != nil {
			r.OutputInfluxdb.OnBackpressure = types.StringValue(string(*resp.OutputInfluxdb.OnBackpressure))
		} else {
			r.OutputInfluxdb.OnBackpressure = types.StringNull()
		}
		r.OutputInfluxdb.Org = types.StringPointerValue(resp.OutputInfluxdb.Org)
		r.OutputInfluxdb.Password = types.StringPointerValue(resp.OutputInfluxdb.Password)
		r.OutputInfluxdb.Pipeline = types.StringPointerValue(resp.OutputInfluxdb.Pipeline)
		if resp.OutputInfluxdb.PqCompress != nil {
			r.OutputInfluxdb.PqCompress = types.StringValue(string(*resp.OutputInfluxdb.PqCompress))
		} else {
			r.OutputInfluxdb.PqCompress = types.StringNull()
		}
		if resp.OutputInfluxdb.PqControls == nil {
			r.OutputInfluxdb.PqControls = nil
		} else {
			r.OutputInfluxdb.PqControls = &tfTypes.OutputInfluxdbPqControls{}
		}
		r.OutputInfluxdb.PqMaxFileSize = types.StringPointerValue(resp.OutputInfluxdb.PqMaxFileSize)
		r.OutputInfluxdb.PqMaxSize = types.StringPointerValue(resp.OutputInfluxdb.PqMaxSize)
		if resp.OutputInfluxdb.PqMode != nil {
			r.OutputInfluxdb.PqMode = types.StringValue(string(*resp.OutputInfluxdb.PqMode))
		} else {
			r.OutputInfluxdb.PqMode = types.StringNull()
		}
		if resp.OutputInfluxdb.PqOnBackpressure != nil {
			r.OutputInfluxdb.PqOnBackpressure = types.StringValue(string(*resp.OutputInfluxdb.PqOnBackpressure))
		} else {
			r.OutputInfluxdb.PqOnBackpressure = types.StringNull()
		}
		r.OutputInfluxdb.PqPath = types.StringPointerValue(resp.OutputInfluxdb.PqPath)
		r.OutputInfluxdb.RejectUnauthorized = types.BoolPointerValue(resp.OutputInfluxdb.RejectUnauthorized)
		r.OutputInfluxdb.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputInfluxdb.ResponseHonorRetryAfterHeader)
		r.OutputInfluxdb.ResponseRetrySettings = []tfTypes.OutputInfluxdbResponseRetrySettings{}
		if len(r.OutputInfluxdb.ResponseRetrySettings) > len(resp.OutputInfluxdb.ResponseRetrySettings) {
			r.OutputInfluxdb.ResponseRetrySettings = r.OutputInfluxdb.ResponseRetrySettings[:len(resp.OutputInfluxdb.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount16, responseRetrySettingsItem16 := range resp.OutputInfluxdb.ResponseRetrySettings {
			var responseRetrySettings16 tfTypes.OutputInfluxdbResponseRetrySettings
			responseRetrySettings16.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem16.BackoffRate)
			responseRetrySettings16.HTTPStatus = types.Float64Value(responseRetrySettingsItem16.HTTPStatus)
			responseRetrySettings16.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem16.InitialBackoff)
			responseRetrySettings16.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem16.MaxBackoff)
			if responseRetrySettingsCount16+1 > len(r.OutputInfluxdb.ResponseRetrySettings) {
				r.OutputInfluxdb.ResponseRetrySettings = append(r.OutputInfluxdb.ResponseRetrySettings, responseRetrySettings16)
			} else {
				r.OutputInfluxdb.ResponseRetrySettings[responseRetrySettingsCount16].BackoffRate = responseRetrySettings16.BackoffRate
				r.OutputInfluxdb.ResponseRetrySettings[responseRetrySettingsCount16].HTTPStatus = responseRetrySettings16.HTTPStatus
				r.OutputInfluxdb.ResponseRetrySettings[responseRetrySettingsCount16].InitialBackoff = responseRetrySettings16.InitialBackoff
				r.OutputInfluxdb.ResponseRetrySettings[responseRetrySettingsCount16].MaxBackoff = responseRetrySettings16.MaxBackoff
			}
		}
		r.OutputInfluxdb.SafeHeaders = make([]types.String, 0, len(resp.OutputInfluxdb.SafeHeaders))
		for _, v := range resp.OutputInfluxdb.SafeHeaders {
			r.OutputInfluxdb.SafeHeaders = append(r.OutputInfluxdb.SafeHeaders, types.StringValue(v))
		}
		r.OutputInfluxdb.Secret = types.StringPointerValue(resp.OutputInfluxdb.Secret)
		r.OutputInfluxdb.SecretParamName = types.StringPointerValue(resp.OutputInfluxdb.SecretParamName)
		r.OutputInfluxdb.Streamtags = make([]types.String, 0, len(resp.OutputInfluxdb.Streamtags))
		for _, v := range resp.OutputInfluxdb.Streamtags {
			r.OutputInfluxdb.Streamtags = append(r.OutputInfluxdb.Streamtags, types.StringValue(v))
		}
		r.OutputInfluxdb.SystemFields = make([]types.String, 0, len(resp.OutputInfluxdb.SystemFields))
		for _, v := range resp.OutputInfluxdb.SystemFields {
			r.OutputInfluxdb.SystemFields = append(r.OutputInfluxdb.SystemFields, types.StringValue(v))
		}
		r.OutputInfluxdb.TextSecret = types.StringPointerValue(resp.OutputInfluxdb.TextSecret)
		if resp.OutputInfluxdb.TimeoutRetrySettings == nil {
			r.OutputInfluxdb.TimeoutRetrySettings = nil
		} else {
			r.OutputInfluxdb.TimeoutRetrySettings = &tfTypes.OutputInfluxdbTimeoutRetrySettings{}
			r.OutputInfluxdb.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputInfluxdb.TimeoutRetrySettings.BackoffRate)
			r.OutputInfluxdb.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputInfluxdb.TimeoutRetrySettings.InitialBackoff)
			r.OutputInfluxdb.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputInfluxdb.TimeoutRetrySettings.MaxBackoff)
			r.OutputInfluxdb.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputInfluxdb.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputInfluxdb.TimeoutSec = types.Float64PointerValue(resp.OutputInfluxdb.TimeoutSec)
		if resp.OutputInfluxdb.TimestampPrecision != nil {
			r.OutputInfluxdb.TimestampPrecision = types.StringValue(string(*resp.OutputInfluxdb.TimestampPrecision))
		} else {
			r.OutputInfluxdb.TimestampPrecision = types.StringNull()
		}
		r.OutputInfluxdb.Token = types.StringPointerValue(resp.OutputInfluxdb.Token)
		r.OutputInfluxdb.TokenAttributeName = types.StringPointerValue(resp.OutputInfluxdb.TokenAttributeName)
		r.OutputInfluxdb.TokenTimeoutSecs = types.Float64PointerValue(resp.OutputInfluxdb.TokenTimeoutSecs)
		r.OutputInfluxdb.Type = types.StringValue(string(resp.OutputInfluxdb.Type))
		r.OutputInfluxdb.URL = types.StringValue(resp.OutputInfluxdb.URL)
		r.OutputInfluxdb.Username = types.StringPointerValue(resp.OutputInfluxdb.Username)
		r.OutputInfluxdb.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputInfluxdb.UseRoundRobinDNS)
		r.OutputInfluxdb.UseV2API = types.BoolPointerValue(resp.OutputInfluxdb.UseV2API)
		r.OutputInfluxdb.ValueFieldName = types.StringPointerValue(resp.OutputInfluxdb.ValueFieldName)
	}
	if resp.OutputKafka != nil {
		r.OutputKafka = &tfTypes.OutputKafka{}
		if resp.OutputKafka.Ack != nil {
			r.OutputKafka.Ack = types.Int64Value(int64(*resp.OutputKafka.Ack))
		} else {
			r.OutputKafka.Ack = types.Int64Null()
		}
		r.OutputKafka.AuthenticationTimeout = types.Float64PointerValue(resp.OutputKafka.AuthenticationTimeout)
		r.OutputKafka.BackoffRate = types.Float64PointerValue(resp.OutputKafka.BackoffRate)
		r.OutputKafka.Brokers = make([]types.String, 0, len(resp.OutputKafka.Brokers))
		for _, v := range resp.OutputKafka.Brokers {
			r.OutputKafka.Brokers = append(r.OutputKafka.Brokers, types.StringValue(v))
		}
		if resp.OutputKafka.Compression != nil {
			r.OutputKafka.Compression = types.StringValue(string(*resp.OutputKafka.Compression))
		} else {
			r.OutputKafka.Compression = types.StringNull()
		}
		r.OutputKafka.ConnectionTimeout = types.Float64PointerValue(resp.OutputKafka.ConnectionTimeout)
		r.OutputKafka.Description = types.StringPointerValue(resp.OutputKafka.Description)
		r.OutputKafka.Environment = types.StringPointerValue(resp.OutputKafka.Environment)
		r.OutputKafka.FlushEventCount = types.Float64PointerValue(resp.OutputKafka.FlushEventCount)
		r.OutputKafka.FlushPeriodSec = types.Float64PointerValue(resp.OutputKafka.FlushPeriodSec)
		if resp.OutputKafka.Format != nil {
			r.OutputKafka.Format = types.StringValue(string(*resp.OutputKafka.Format))
		} else {
			r.OutputKafka.Format = types.StringNull()
		}
		r.OutputKafka.ID = types.StringPointerValue(resp.OutputKafka.ID)
		r.OutputKafka.InitialBackoff = types.Float64PointerValue(resp.OutputKafka.InitialBackoff)
		if resp.OutputKafka.KafkaSchemaRegistry == nil {
			r.OutputKafka.KafkaSchemaRegistry = nil
		} else {
			r.OutputKafka.KafkaSchemaRegistry = &tfTypes.OutputKafkaKafkaSchemaRegistryAuthentication{}
			if resp.OutputKafka.KafkaSchemaRegistry.Auth == nil {
				r.OutputKafka.KafkaSchemaRegistry.Auth = nil
			} else {
				r.OutputKafka.KafkaSchemaRegistry.Auth = &tfTypes.OutputKafkaAuth{}
				r.OutputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.OutputKafka.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.OutputKafka.KafkaSchemaRegistry.Auth.Disabled)
			}
			r.OutputKafka.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(resp.OutputKafka.KafkaSchemaRegistry.ConnectionTimeout)
			r.OutputKafka.KafkaSchemaRegistry.DefaultKeySchemaID = types.Float64PointerValue(resp.OutputKafka.KafkaSchemaRegistry.DefaultKeySchemaID)
			r.OutputKafka.KafkaSchemaRegistry.DefaultValueSchemaID = types.Float64PointerValue(resp.OutputKafka.KafkaSchemaRegistry.DefaultValueSchemaID)
			r.OutputKafka.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.OutputKafka.KafkaSchemaRegistry.Disabled)
			r.OutputKafka.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(resp.OutputKafka.KafkaSchemaRegistry.MaxRetries)
			r.OutputKafka.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(resp.OutputKafka.KafkaSchemaRegistry.RequestTimeout)
			r.OutputKafka.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.OutputKafka.KafkaSchemaRegistry.TLS == nil {
				r.OutputKafka.KafkaSchemaRegistry.TLS = nil
			} else {
				r.OutputKafka.KafkaSchemaRegistry.TLS = &tfTypes.OutputKafkaKafkaSchemaRegistryTLSSettingsClientSide{}
				r.OutputKafka.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.CaPath)
				r.OutputKafka.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.CertificateName)
				r.OutputKafka.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.CertPath)
				r.OutputKafka.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.Disabled)
				if resp.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.OutputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.OutputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.OutputKafka.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.Passphrase)
				r.OutputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.OutputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.OutputKafka.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.OutputKafka.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		r.OutputKafka.MaxBackOff = types.Float64PointerValue(resp.OutputKafka.MaxBackOff)
		r.OutputKafka.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputKafka.MaxRecordSizeKB)
		r.OutputKafka.MaxRetries = types.Float64PointerValue(resp.OutputKafka.MaxRetries)
		if resp.OutputKafka.OnBackpressure != nil {
			r.OutputKafka.OnBackpressure = types.StringValue(string(*resp.OutputKafka.OnBackpressure))
		} else {
			r.OutputKafka.OnBackpressure = types.StringNull()
		}
		r.OutputKafka.Pipeline = types.StringPointerValue(resp.OutputKafka.Pipeline)
		if resp.OutputKafka.PqCompress != nil {
			r.OutputKafka.PqCompress = types.StringValue(string(*resp.OutputKafka.PqCompress))
		} else {
			r.OutputKafka.PqCompress = types.StringNull()
		}
		if resp.OutputKafka.PqControls == nil {
			r.OutputKafka.PqControls = nil
		} else {
			r.OutputKafka.PqControls = &tfTypes.OutputKafkaPqControls{}
		}
		r.OutputKafka.PqMaxFileSize = types.StringPointerValue(resp.OutputKafka.PqMaxFileSize)
		r.OutputKafka.PqMaxSize = types.StringPointerValue(resp.OutputKafka.PqMaxSize)
		if resp.OutputKafka.PqMode != nil {
			r.OutputKafka.PqMode = types.StringValue(string(*resp.OutputKafka.PqMode))
		} else {
			r.OutputKafka.PqMode = types.StringNull()
		}
		if resp.OutputKafka.PqOnBackpressure != nil {
			r.OutputKafka.PqOnBackpressure = types.StringValue(string(*resp.OutputKafka.PqOnBackpressure))
		} else {
			r.OutputKafka.PqOnBackpressure = types.StringNull()
		}
		r.OutputKafka.PqPath = types.StringPointerValue(resp.OutputKafka.PqPath)
		r.OutputKafka.ProtobufLibraryID = types.StringPointerValue(resp.OutputKafka.ProtobufLibraryID)
		r.OutputKafka.ReauthenticationThreshold = types.Float64PointerValue(resp.OutputKafka.ReauthenticationThreshold)
		r.OutputKafka.RequestTimeout = types.Float64PointerValue(resp.OutputKafka.RequestTimeout)
		if resp.OutputKafka.Sasl == nil {
			r.OutputKafka.Sasl = nil
		} else {
			r.OutputKafka.Sasl = &tfTypes.OutputKafkaAuthentication{}
			r.OutputKafka.Sasl.Disabled = types.BoolPointerValue(resp.OutputKafka.Sasl.Disabled)
			if resp.OutputKafka.Sasl.Mechanism != nil {
				r.OutputKafka.Sasl.Mechanism = types.StringValue(string(*resp.OutputKafka.Sasl.Mechanism))
			} else {
				r.OutputKafka.Sasl.Mechanism = types.StringNull()
			}
		}
		r.OutputKafka.Streamtags = make([]types.String, 0, len(resp.OutputKafka.Streamtags))
		for _, v := range resp.OutputKafka.Streamtags {
			r.OutputKafka.Streamtags = append(r.OutputKafka.Streamtags, types.StringValue(v))
		}
		r.OutputKafka.SystemFields = make([]types.String, 0, len(resp.OutputKafka.SystemFields))
		for _, v := range resp.OutputKafka.SystemFields {
			r.OutputKafka.SystemFields = append(r.OutputKafka.SystemFields, types.StringValue(v))
		}
		if resp.OutputKafka.TLS == nil {
			r.OutputKafka.TLS = nil
		} else {
			r.OutputKafka.TLS = &tfTypes.OutputKafkaTLSSettingsClientSide{}
			r.OutputKafka.TLS.CaPath = types.StringPointerValue(resp.OutputKafka.TLS.CaPath)
			r.OutputKafka.TLS.CertificateName = types.StringPointerValue(resp.OutputKafka.TLS.CertificateName)
			r.OutputKafka.TLS.CertPath = types.StringPointerValue(resp.OutputKafka.TLS.CertPath)
			r.OutputKafka.TLS.Disabled = types.BoolPointerValue(resp.OutputKafka.TLS.Disabled)
			if resp.OutputKafka.TLS.MaxVersion != nil {
				r.OutputKafka.TLS.MaxVersion = types.StringValue(string(*resp.OutputKafka.TLS.MaxVersion))
			} else {
				r.OutputKafka.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputKafka.TLS.MinVersion != nil {
				r.OutputKafka.TLS.MinVersion = types.StringValue(string(*resp.OutputKafka.TLS.MinVersion))
			} else {
				r.OutputKafka.TLS.MinVersion = types.StringNull()
			}
			r.OutputKafka.TLS.Passphrase = types.StringPointerValue(resp.OutputKafka.TLS.Passphrase)
			r.OutputKafka.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputKafka.TLS.PrivKeyPath)
			r.OutputKafka.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputKafka.TLS.RejectUnauthorized)
			r.OutputKafka.TLS.Servername = types.StringPointerValue(resp.OutputKafka.TLS.Servername)
		}
		r.OutputKafka.Topic = types.StringValue(resp.OutputKafka.Topic)
		if resp.OutputKafka.Type != nil {
			r.OutputKafka.Type = types.StringValue(string(*resp.OutputKafka.Type))
		} else {
			r.OutputKafka.Type = types.StringNull()
		}
	}
	if resp.OutputKinesis != nil {
		r.OutputKinesis = &tfTypes.OutputKinesis{}
		r.OutputKinesis.AsNdjson = types.BoolPointerValue(resp.OutputKinesis.AsNdjson)
		r.OutputKinesis.AssumeRoleArn = types.StringPointerValue(resp.OutputKinesis.AssumeRoleArn)
		r.OutputKinesis.AssumeRoleExternalID = types.StringPointerValue(resp.OutputKinesis.AssumeRoleExternalID)
		r.OutputKinesis.AwsAPIKey = types.StringPointerValue(resp.OutputKinesis.AwsAPIKey)
		if resp.OutputKinesis.AwsAuthenticationMethod != nil {
			r.OutputKinesis.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputKinesis.AwsAuthenticationMethod))
		} else {
			r.OutputKinesis.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputKinesis.AwsSecret = types.StringPointerValue(resp.OutputKinesis.AwsSecret)
		r.OutputKinesis.AwsSecretKey = types.StringPointerValue(resp.OutputKinesis.AwsSecretKey)
		if resp.OutputKinesis.Compression != nil {
			r.OutputKinesis.Compression = types.StringValue(string(*resp.OutputKinesis.Compression))
		} else {
			r.OutputKinesis.Compression = types.StringNull()
		}
		r.OutputKinesis.Concurrency = types.Float64PointerValue(resp.OutputKinesis.Concurrency)
		r.OutputKinesis.Description = types.StringPointerValue(resp.OutputKinesis.Description)
		r.OutputKinesis.DurationSeconds = types.Float64PointerValue(resp.OutputKinesis.DurationSeconds)
		r.OutputKinesis.EnableAssumeRole = types.BoolPointerValue(resp.OutputKinesis.EnableAssumeRole)
		r.OutputKinesis.Endpoint = types.StringPointerValue(resp.OutputKinesis.Endpoint)
		r.OutputKinesis.Environment = types.StringPointerValue(resp.OutputKinesis.Environment)
		r.OutputKinesis.FlushPeriodSec = types.Float64PointerValue(resp.OutputKinesis.FlushPeriodSec)
		r.OutputKinesis.ID = types.StringPointerValue(resp.OutputKinesis.ID)
		r.OutputKinesis.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputKinesis.MaxRecordSizeKB)
		if resp.OutputKinesis.OnBackpressure != nil {
			r.OutputKinesis.OnBackpressure = types.StringValue(string(*resp.OutputKinesis.OnBackpressure))
		} else {
			r.OutputKinesis.OnBackpressure = types.StringNull()
		}
		r.OutputKinesis.Pipeline = types.StringPointerValue(resp.OutputKinesis.Pipeline)
		if resp.OutputKinesis.PqCompress != nil {
			r.OutputKinesis.PqCompress = types.StringValue(string(*resp.OutputKinesis.PqCompress))
		} else {
			r.OutputKinesis.PqCompress = types.StringNull()
		}
		if resp.OutputKinesis.PqControls == nil {
			r.OutputKinesis.PqControls = nil
		} else {
			r.OutputKinesis.PqControls = &tfTypes.OutputKinesisPqControls{}
		}
		r.OutputKinesis.PqMaxFileSize = types.StringPointerValue(resp.OutputKinesis.PqMaxFileSize)
		r.OutputKinesis.PqMaxSize = types.StringPointerValue(resp.OutputKinesis.PqMaxSize)
		if resp.OutputKinesis.PqMode != nil {
			r.OutputKinesis.PqMode = types.StringValue(string(*resp.OutputKinesis.PqMode))
		} else {
			r.OutputKinesis.PqMode = types.StringNull()
		}
		if resp.OutputKinesis.PqOnBackpressure != nil {
			r.OutputKinesis.PqOnBackpressure = types.StringValue(string(*resp.OutputKinesis.PqOnBackpressure))
		} else {
			r.OutputKinesis.PqOnBackpressure = types.StringNull()
		}
		r.OutputKinesis.PqPath = types.StringPointerValue(resp.OutputKinesis.PqPath)
		r.OutputKinesis.Region = types.StringValue(resp.OutputKinesis.Region)
		r.OutputKinesis.RejectUnauthorized = types.BoolPointerValue(resp.OutputKinesis.RejectUnauthorized)
		r.OutputKinesis.ReuseConnections = types.BoolPointerValue(resp.OutputKinesis.ReuseConnections)
		if resp.OutputKinesis.SignatureVersion != nil {
			r.OutputKinesis.SignatureVersion = types.StringValue(string(*resp.OutputKinesis.SignatureVersion))
		} else {
			r.OutputKinesis.SignatureVersion = types.StringNull()
		}
		r.OutputKinesis.StreamName = types.StringValue(resp.OutputKinesis.StreamName)
		r.OutputKinesis.Streamtags = make([]types.String, 0, len(resp.OutputKinesis.Streamtags))
		for _, v := range resp.OutputKinesis.Streamtags {
			r.OutputKinesis.Streamtags = append(r.OutputKinesis.Streamtags, types.StringValue(v))
		}
		r.OutputKinesis.SystemFields = make([]types.String, 0, len(resp.OutputKinesis.SystemFields))
		for _, v := range resp.OutputKinesis.SystemFields {
			r.OutputKinesis.SystemFields = append(r.OutputKinesis.SystemFields, types.StringValue(v))
		}
		if resp.OutputKinesis.Type != nil {
			r.OutputKinesis.Type = types.StringValue(string(*resp.OutputKinesis.Type))
		} else {
			r.OutputKinesis.Type = types.StringNull()
		}
		r.OutputKinesis.UseListShards = types.BoolPointerValue(resp.OutputKinesis.UseListShards)
	}
	if resp.OutputLoki != nil {
		r.OutputLoki = &tfTypes.OutputLoki{}
		if resp.OutputLoki.AuthType != nil {
			r.OutputLoki.AuthType = types.StringValue(string(*resp.OutputLoki.AuthType))
		} else {
			r.OutputLoki.AuthType = types.StringNull()
		}
		r.OutputLoki.Compress = types.BoolPointerValue(resp.OutputLoki.Compress)
		r.OutputLoki.Concurrency = types.Float64PointerValue(resp.OutputLoki.Concurrency)
		r.OutputLoki.CredentialsSecret = types.StringPointerValue(resp.OutputLoki.CredentialsSecret)
		r.OutputLoki.Description = types.StringPointerValue(resp.OutputLoki.Description)
		r.OutputLoki.Environment = types.StringPointerValue(resp.OutputLoki.Environment)
		r.OutputLoki.ExtraHTTPHeaders = []tfTypes.OutputLokiExtraHTTPHeaders{}
		if len(r.OutputLoki.ExtraHTTPHeaders) > len(resp.OutputLoki.ExtraHTTPHeaders) {
			r.OutputLoki.ExtraHTTPHeaders = r.OutputLoki.ExtraHTTPHeaders[:len(resp.OutputLoki.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount16, extraHTTPHeadersItem16 := range resp.OutputLoki.ExtraHTTPHeaders {
			var extraHTTPHeaders16 tfTypes.OutputLokiExtraHTTPHeaders
			extraHTTPHeaders16.Name = types.StringPointerValue(extraHTTPHeadersItem16.Name)
			extraHTTPHeaders16.Value = types.StringValue(extraHTTPHeadersItem16.Value)
			if extraHTTPHeadersCount16+1 > len(r.OutputLoki.ExtraHTTPHeaders) {
				r.OutputLoki.ExtraHTTPHeaders = append(r.OutputLoki.ExtraHTTPHeaders, extraHTTPHeaders16)
			} else {
				r.OutputLoki.ExtraHTTPHeaders[extraHTTPHeadersCount16].Name = extraHTTPHeaders16.Name
				r.OutputLoki.ExtraHTTPHeaders[extraHTTPHeadersCount16].Value = extraHTTPHeaders16.Value
			}
		}
		if resp.OutputLoki.FailedRequestLoggingMode != nil {
			r.OutputLoki.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputLoki.FailedRequestLoggingMode))
		} else {
			r.OutputLoki.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputLoki.FlushPeriodSec = types.Float64PointerValue(resp.OutputLoki.FlushPeriodSec)
		r.OutputLoki.ID = types.StringPointerValue(resp.OutputLoki.ID)
		r.OutputLoki.Labels = []tfTypes.Labels{}
		if len(r.OutputLoki.Labels) > len(resp.OutputLoki.Labels) {
			r.OutputLoki.Labels = r.OutputLoki.Labels[:len(resp.OutputLoki.Labels)]
		}
		for labelsCount2, labelsItem2 := range resp.OutputLoki.Labels {
			var labels2 tfTypes.Labels
			labels2.Name = types.StringPointerValue(labelsItem2.Name)
			labels2.Value = types.StringValue(labelsItem2.Value)
			if labelsCount2+1 > len(r.OutputLoki.Labels) {
				r.OutputLoki.Labels = append(r.OutputLoki.Labels, labels2)
			} else {
				r.OutputLoki.Labels[labelsCount2].Name = labels2.Name
				r.OutputLoki.Labels[labelsCount2].Value = labels2.Value
			}
		}
		r.OutputLoki.MaxPayloadEvents = types.Float64PointerValue(resp.OutputLoki.MaxPayloadEvents)
		r.OutputLoki.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputLoki.MaxPayloadSizeKB)
		r.OutputLoki.Message = types.StringPointerValue(resp.OutputLoki.Message)
		if resp.OutputLoki.MessageFormat != nil {
			r.OutputLoki.MessageFormat = types.StringValue(string(*resp.OutputLoki.MessageFormat))
		} else {
			r.OutputLoki.MessageFormat = types.StringNull()
		}
		if resp.OutputLoki.OnBackpressure != nil {
			r.OutputLoki.OnBackpressure = types.StringValue(string(*resp.OutputLoki.OnBackpressure))
		} else {
			r.OutputLoki.OnBackpressure = types.StringNull()
		}
		r.OutputLoki.Password = types.StringPointerValue(resp.OutputLoki.Password)
		r.OutputLoki.Pipeline = types.StringPointerValue(resp.OutputLoki.Pipeline)
		if resp.OutputLoki.PqCompress != nil {
			r.OutputLoki.PqCompress = types.StringValue(string(*resp.OutputLoki.PqCompress))
		} else {
			r.OutputLoki.PqCompress = types.StringNull()
		}
		if resp.OutputLoki.PqControls == nil {
			r.OutputLoki.PqControls = nil
		} else {
			r.OutputLoki.PqControls = &tfTypes.OutputLokiPqControls{}
		}
		r.OutputLoki.PqMaxFileSize = types.StringPointerValue(resp.OutputLoki.PqMaxFileSize)
		r.OutputLoki.PqMaxSize = types.StringPointerValue(resp.OutputLoki.PqMaxSize)
		if resp.OutputLoki.PqMode != nil {
			r.OutputLoki.PqMode = types.StringValue(string(*resp.OutputLoki.PqMode))
		} else {
			r.OutputLoki.PqMode = types.StringNull()
		}
		if resp.OutputLoki.PqOnBackpressure != nil {
			r.OutputLoki.PqOnBackpressure = types.StringValue(string(*resp.OutputLoki.PqOnBackpressure))
		} else {
			r.OutputLoki.PqOnBackpressure = types.StringNull()
		}
		r.OutputLoki.PqPath = types.StringPointerValue(resp.OutputLoki.PqPath)
		r.OutputLoki.RejectUnauthorized = types.BoolPointerValue(resp.OutputLoki.RejectUnauthorized)
		r.OutputLoki.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputLoki.ResponseHonorRetryAfterHeader)
		r.OutputLoki.ResponseRetrySettings = []tfTypes.OutputLokiResponseRetrySettings{}
		if len(r.OutputLoki.ResponseRetrySettings) > len(resp.OutputLoki.ResponseRetrySettings) {
			r.OutputLoki.ResponseRetrySettings = r.OutputLoki.ResponseRetrySettings[:len(resp.OutputLoki.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount17, responseRetrySettingsItem17 := range resp.OutputLoki.ResponseRetrySettings {
			var responseRetrySettings17 tfTypes.OutputLokiResponseRetrySettings
			responseRetrySettings17.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem17.BackoffRate)
			responseRetrySettings17.HTTPStatus = types.Float64Value(responseRetrySettingsItem17.HTTPStatus)
			responseRetrySettings17.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem17.InitialBackoff)
			responseRetrySettings17.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem17.MaxBackoff)
			if responseRetrySettingsCount17+1 > len(r.OutputLoki.ResponseRetrySettings) {
				r.OutputLoki.ResponseRetrySettings = append(r.OutputLoki.ResponseRetrySettings, responseRetrySettings17)
			} else {
				r.OutputLoki.ResponseRetrySettings[responseRetrySettingsCount17].BackoffRate = responseRetrySettings17.BackoffRate
				r.OutputLoki.ResponseRetrySettings[responseRetrySettingsCount17].HTTPStatus = responseRetrySettings17.HTTPStatus
				r.OutputLoki.ResponseRetrySettings[responseRetrySettingsCount17].InitialBackoff = responseRetrySettings17.InitialBackoff
				r.OutputLoki.ResponseRetrySettings[responseRetrySettingsCount17].MaxBackoff = responseRetrySettings17.MaxBackoff
			}
		}
		r.OutputLoki.SafeHeaders = make([]types.String, 0, len(resp.OutputLoki.SafeHeaders))
		for _, v := range resp.OutputLoki.SafeHeaders {
			r.OutputLoki.SafeHeaders = append(r.OutputLoki.SafeHeaders, types.StringValue(v))
		}
		r.OutputLoki.Streamtags = make([]types.String, 0, len(resp.OutputLoki.Streamtags))
		for _, v := range resp.OutputLoki.Streamtags {
			r.OutputLoki.Streamtags = append(r.OutputLoki.Streamtags, types.StringValue(v))
		}
		r.OutputLoki.SystemFields = make([]types.String, 0, len(resp.OutputLoki.SystemFields))
		for _, v := range resp.OutputLoki.SystemFields {
			r.OutputLoki.SystemFields = append(r.OutputLoki.SystemFields, types.StringValue(v))
		}
		r.OutputLoki.TextSecret = types.StringPointerValue(resp.OutputLoki.TextSecret)
		if resp.OutputLoki.TimeoutRetrySettings == nil {
			r.OutputLoki.TimeoutRetrySettings = nil
		} else {
			r.OutputLoki.TimeoutRetrySettings = &tfTypes.OutputLokiTimeoutRetrySettings{}
			r.OutputLoki.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputLoki.TimeoutRetrySettings.BackoffRate)
			r.OutputLoki.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputLoki.TimeoutRetrySettings.InitialBackoff)
			r.OutputLoki.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputLoki.TimeoutRetrySettings.MaxBackoff)
			r.OutputLoki.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputLoki.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputLoki.TimeoutSec = types.Float64PointerValue(resp.OutputLoki.TimeoutSec)
		r.OutputLoki.Token = types.StringPointerValue(resp.OutputLoki.Token)
		r.OutputLoki.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputLoki.TotalMemoryLimitKB)
		r.OutputLoki.Type = types.StringValue(string(resp.OutputLoki.Type))
		r.OutputLoki.URL = types.StringValue(resp.OutputLoki.URL)
		r.OutputLoki.Username = types.StringPointerValue(resp.OutputLoki.Username)
		r.OutputLoki.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputLoki.UseRoundRobinDNS)
	}
	if resp.OutputMinio != nil {
		r.OutputMinio = &tfTypes.OutputMinio{}
		r.OutputMinio.AddIDToStagePath = types.BoolPointerValue(resp.OutputMinio.AddIDToStagePath)
		r.OutputMinio.AutomaticSchema = types.BoolPointerValue(resp.OutputMinio.AutomaticSchema)
		r.OutputMinio.AwsAPIKey = types.StringPointerValue(resp.OutputMinio.AwsAPIKey)
		if resp.OutputMinio.AwsAuthenticationMethod != nil {
			r.OutputMinio.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputMinio.AwsAuthenticationMethod))
		} else {
			r.OutputMinio.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputMinio.AwsSecret = types.StringPointerValue(resp.OutputMinio.AwsSecret)
		r.OutputMinio.AwsSecretKey = types.StringPointerValue(resp.OutputMinio.AwsSecretKey)
		r.OutputMinio.BaseFileName = types.StringPointerValue(resp.OutputMinio.BaseFileName)
		r.OutputMinio.Bucket = types.StringValue(resp.OutputMinio.Bucket)
		if resp.OutputMinio.Compress != nil {
			r.OutputMinio.Compress = types.StringValue(string(*resp.OutputMinio.Compress))
		} else {
			r.OutputMinio.Compress = types.StringNull()
		}
		if resp.OutputMinio.CompressionLevel != nil {
			r.OutputMinio.CompressionLevel = types.StringValue(string(*resp.OutputMinio.CompressionLevel))
		} else {
			r.OutputMinio.CompressionLevel = types.StringNull()
		}
		r.OutputMinio.DeadletterEnabled = types.BoolPointerValue(resp.OutputMinio.DeadletterEnabled)
		r.OutputMinio.DeadletterPath = types.StringPointerValue(resp.OutputMinio.DeadletterPath)
		r.OutputMinio.Description = types.StringPointerValue(resp.OutputMinio.Description)
		r.OutputMinio.DestPath = types.StringPointerValue(resp.OutputMinio.DestPath)
		r.OutputMinio.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputMinio.EmptyDirCleanupSec)
		r.OutputMinio.EnablePageChecksum = types.BoolPointerValue(resp.OutputMinio.EnablePageChecksum)
		r.OutputMinio.EnableStatistics = types.BoolPointerValue(resp.OutputMinio.EnableStatistics)
		r.OutputMinio.EnableWritePageIndex = types.BoolPointerValue(resp.OutputMinio.EnableWritePageIndex)
		r.OutputMinio.Endpoint = types.StringValue(resp.OutputMinio.Endpoint)
		r.OutputMinio.Environment = types.StringPointerValue(resp.OutputMinio.Environment)
		r.OutputMinio.FileNameSuffix = types.StringPointerValue(resp.OutputMinio.FileNameSuffix)
		if resp.OutputMinio.Format != nil {
			r.OutputMinio.Format = types.StringValue(string(*resp.OutputMinio.Format))
		} else {
			r.OutputMinio.Format = types.StringNull()
		}
		r.OutputMinio.HeaderLine = types.StringPointerValue(resp.OutputMinio.HeaderLine)
		r.OutputMinio.ID = types.StringPointerValue(resp.OutputMinio.ID)
		r.OutputMinio.KeyValueMetadata = []tfTypes.OutputMinioKeyValueMetadata{}
		if len(r.OutputMinio.KeyValueMetadata) > len(resp.OutputMinio.KeyValueMetadata) {
			r.OutputMinio.KeyValueMetadata = r.OutputMinio.KeyValueMetadata[:len(resp.OutputMinio.KeyValueMetadata)]
		}
		for keyValueMetadataCount4, keyValueMetadataItem4 := range resp.OutputMinio.KeyValueMetadata {
			var keyValueMetadata4 tfTypes.OutputMinioKeyValueMetadata
			keyValueMetadata4.Key = types.StringPointerValue(keyValueMetadataItem4.Key)
			keyValueMetadata4.Value = types.StringValue(keyValueMetadataItem4.Value)
			if keyValueMetadataCount4+1 > len(r.OutputMinio.KeyValueMetadata) {
				r.OutputMinio.KeyValueMetadata = append(r.OutputMinio.KeyValueMetadata, keyValueMetadata4)
			} else {
				r.OutputMinio.KeyValueMetadata[keyValueMetadataCount4].Key = keyValueMetadata4.Key
				r.OutputMinio.KeyValueMetadata[keyValueMetadataCount4].Value = keyValueMetadata4.Value
			}
		}
		r.OutputMinio.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputMinio.MaxConcurrentFileParts)
		r.OutputMinio.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputMinio.MaxFileIdleTimeSec)
		r.OutputMinio.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputMinio.MaxFileOpenTimeSec)
		r.OutputMinio.MaxFileSizeMB = types.Float64PointerValue(resp.OutputMinio.MaxFileSizeMB)
		r.OutputMinio.MaxOpenFiles = types.Float64PointerValue(resp.OutputMinio.MaxOpenFiles)
		r.OutputMinio.MaxRetryNum = types.Float64PointerValue(resp.OutputMinio.MaxRetryNum)
		if resp.OutputMinio.ObjectACL != nil {
			r.OutputMinio.ObjectACL = types.StringValue(string(*resp.OutputMinio.ObjectACL))
		} else {
			r.OutputMinio.ObjectACL = types.StringNull()
		}
		if resp.OutputMinio.OnBackpressure != nil {
			r.OutputMinio.OnBackpressure = types.StringValue(string(*resp.OutputMinio.OnBackpressure))
		} else {
			r.OutputMinio.OnBackpressure = types.StringNull()
		}
		if resp.OutputMinio.OnDiskFullBackpressure != nil {
			r.OutputMinio.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputMinio.OnDiskFullBackpressure))
		} else {
			r.OutputMinio.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputMinio.ParquetDataPageVersion != nil {
			r.OutputMinio.ParquetDataPageVersion = types.StringValue(string(*resp.OutputMinio.ParquetDataPageVersion))
		} else {
			r.OutputMinio.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputMinio.ParquetPageSize = types.StringPointerValue(resp.OutputMinio.ParquetPageSize)
		r.OutputMinio.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputMinio.ParquetRowGroupLength)
		if resp.OutputMinio.ParquetVersion != nil {
			r.OutputMinio.ParquetVersion = types.StringValue(string(*resp.OutputMinio.ParquetVersion))
		} else {
			r.OutputMinio.ParquetVersion = types.StringNull()
		}
		r.OutputMinio.PartitionExpr = types.StringPointerValue(resp.OutputMinio.PartitionExpr)
		r.OutputMinio.Pipeline = types.StringPointerValue(resp.OutputMinio.Pipeline)
		r.OutputMinio.Region = types.StringPointerValue(resp.OutputMinio.Region)
		r.OutputMinio.RejectUnauthorized = types.BoolPointerValue(resp.OutputMinio.RejectUnauthorized)
		r.OutputMinio.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputMinio.RemoveEmptyDirs)
		r.OutputMinio.ReuseConnections = types.BoolPointerValue(resp.OutputMinio.ReuseConnections)
		if resp.OutputMinio.ServerSideEncryption != nil {
			r.OutputMinio.ServerSideEncryption = types.StringValue(string(*resp.OutputMinio.ServerSideEncryption))
		} else {
			r.OutputMinio.ServerSideEncryption = types.StringNull()
		}
		r.OutputMinio.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputMinio.ShouldLogInvalidRows)
		if resp.OutputMinio.SignatureVersion != nil {
			r.OutputMinio.SignatureVersion = types.StringValue(string(*resp.OutputMinio.SignatureVersion))
		} else {
			r.OutputMinio.SignatureVersion = types.StringNull()
		}
		r.OutputMinio.StagePath = types.StringPointerValue(resp.OutputMinio.StagePath)
		if resp.OutputMinio.StorageClass != nil {
			r.OutputMinio.StorageClass = types.StringValue(string(*resp.OutputMinio.StorageClass))
		} else {
			r.OutputMinio.StorageClass = types.StringNull()
		}
		r.OutputMinio.Streamtags = make([]types.String, 0, len(resp.OutputMinio.Streamtags))
		for _, v := range resp.OutputMinio.Streamtags {
			r.OutputMinio.Streamtags = append(r.OutputMinio.Streamtags, types.StringValue(v))
		}
		r.OutputMinio.SystemFields = make([]types.String, 0, len(resp.OutputMinio.SystemFields))
		for _, v := range resp.OutputMinio.SystemFields {
			r.OutputMinio.SystemFields = append(r.OutputMinio.SystemFields, types.StringValue(v))
		}
		if resp.OutputMinio.Type != nil {
			r.OutputMinio.Type = types.StringValue(string(*resp.OutputMinio.Type))
		} else {
			r.OutputMinio.Type = types.StringNull()
		}
		r.OutputMinio.VerifyPermissions = types.BoolPointerValue(resp.OutputMinio.VerifyPermissions)
		r.OutputMinio.WriteHighWaterMark = types.Float64PointerValue(resp.OutputMinio.WriteHighWaterMark)
	}
	if resp.OutputMsk != nil {
		r.OutputMsk = &tfTypes.OutputMsk{}
		if resp.OutputMsk.Ack != nil {
			r.OutputMsk.Ack = types.Int64Value(int64(*resp.OutputMsk.Ack))
		} else {
			r.OutputMsk.Ack = types.Int64Null()
		}
		r.OutputMsk.AssumeRoleArn = types.StringPointerValue(resp.OutputMsk.AssumeRoleArn)
		r.OutputMsk.AssumeRoleExternalID = types.StringPointerValue(resp.OutputMsk.AssumeRoleExternalID)
		r.OutputMsk.AuthenticationTimeout = types.Float64PointerValue(resp.OutputMsk.AuthenticationTimeout)
		r.OutputMsk.AwsAPIKey = types.StringPointerValue(resp.OutputMsk.AwsAPIKey)
		if resp.OutputMsk.AwsAuthenticationMethod != nil {
			r.OutputMsk.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputMsk.AwsAuthenticationMethod))
		} else {
			r.OutputMsk.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputMsk.AwsSecret = types.StringPointerValue(resp.OutputMsk.AwsSecret)
		r.OutputMsk.AwsSecretKey = types.StringPointerValue(resp.OutputMsk.AwsSecretKey)
		r.OutputMsk.BackoffRate = types.Float64PointerValue(resp.OutputMsk.BackoffRate)
		r.OutputMsk.Brokers = make([]types.String, 0, len(resp.OutputMsk.Brokers))
		for _, v := range resp.OutputMsk.Brokers {
			r.OutputMsk.Brokers = append(r.OutputMsk.Brokers, types.StringValue(v))
		}
		if resp.OutputMsk.Compression != nil {
			r.OutputMsk.Compression = types.StringValue(string(*resp.OutputMsk.Compression))
		} else {
			r.OutputMsk.Compression = types.StringNull()
		}
		r.OutputMsk.ConnectionTimeout = types.Float64PointerValue(resp.OutputMsk.ConnectionTimeout)
		r.OutputMsk.Description = types.StringPointerValue(resp.OutputMsk.Description)
		r.OutputMsk.DurationSeconds = types.Float64PointerValue(resp.OutputMsk.DurationSeconds)
		r.OutputMsk.EnableAssumeRole = types.BoolPointerValue(resp.OutputMsk.EnableAssumeRole)
		r.OutputMsk.Endpoint = types.StringPointerValue(resp.OutputMsk.Endpoint)
		r.OutputMsk.Environment = types.StringPointerValue(resp.OutputMsk.Environment)
		r.OutputMsk.FlushEventCount = types.Float64PointerValue(resp.OutputMsk.FlushEventCount)
		r.OutputMsk.FlushPeriodSec = types.Float64PointerValue(resp.OutputMsk.FlushPeriodSec)
		if resp.OutputMsk.Format != nil {
			r.OutputMsk.Format = types.StringValue(string(*resp.OutputMsk.Format))
		} else {
			r.OutputMsk.Format = types.StringNull()
		}
		r.OutputMsk.ID = types.StringPointerValue(resp.OutputMsk.ID)
		r.OutputMsk.InitialBackoff = types.Float64PointerValue(resp.OutputMsk.InitialBackoff)
		if resp.OutputMsk.KafkaSchemaRegistry == nil {
			r.OutputMsk.KafkaSchemaRegistry = nil
		} else {
			r.OutputMsk.KafkaSchemaRegistry = &tfTypes.OutputMskKafkaSchemaRegistryAuthentication{}
			if resp.OutputMsk.KafkaSchemaRegistry.Auth == nil {
				r.OutputMsk.KafkaSchemaRegistry.Auth = nil
			} else {
				r.OutputMsk.KafkaSchemaRegistry.Auth = &tfTypes.OutputMskAuth{}
				r.OutputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.OutputMsk.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.OutputMsk.KafkaSchemaRegistry.Auth.Disabled)
			}
			r.OutputMsk.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(resp.OutputMsk.KafkaSchemaRegistry.ConnectionTimeout)
			r.OutputMsk.KafkaSchemaRegistry.DefaultKeySchemaID = types.Float64PointerValue(resp.OutputMsk.KafkaSchemaRegistry.DefaultKeySchemaID)
			r.OutputMsk.KafkaSchemaRegistry.DefaultValueSchemaID = types.Float64PointerValue(resp.OutputMsk.KafkaSchemaRegistry.DefaultValueSchemaID)
			r.OutputMsk.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.OutputMsk.KafkaSchemaRegistry.Disabled)
			r.OutputMsk.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(resp.OutputMsk.KafkaSchemaRegistry.MaxRetries)
			r.OutputMsk.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(resp.OutputMsk.KafkaSchemaRegistry.RequestTimeout)
			r.OutputMsk.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.OutputMsk.KafkaSchemaRegistry.TLS == nil {
				r.OutputMsk.KafkaSchemaRegistry.TLS = nil
			} else {
				r.OutputMsk.KafkaSchemaRegistry.TLS = &tfTypes.OutputMskKafkaSchemaRegistryTLSSettingsClientSide{}
				r.OutputMsk.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.CaPath)
				r.OutputMsk.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.CertificateName)
				r.OutputMsk.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.CertPath)
				r.OutputMsk.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.Disabled)
				if resp.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.OutputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.OutputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.OutputMsk.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.Passphrase)
				r.OutputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.OutputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.OutputMsk.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.OutputMsk.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		r.OutputMsk.MaxBackOff = types.Float64PointerValue(resp.OutputMsk.MaxBackOff)
		r.OutputMsk.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputMsk.MaxRecordSizeKB)
		r.OutputMsk.MaxRetries = types.Float64PointerValue(resp.OutputMsk.MaxRetries)
		if resp.OutputMsk.OnBackpressure != nil {
			r.OutputMsk.OnBackpressure = types.StringValue(string(*resp.OutputMsk.OnBackpressure))
		} else {
			r.OutputMsk.OnBackpressure = types.StringNull()
		}
		r.OutputMsk.Pipeline = types.StringPointerValue(resp.OutputMsk.Pipeline)
		if resp.OutputMsk.PqCompress != nil {
			r.OutputMsk.PqCompress = types.StringValue(string(*resp.OutputMsk.PqCompress))
		} else {
			r.OutputMsk.PqCompress = types.StringNull()
		}
		if resp.OutputMsk.PqControls == nil {
			r.OutputMsk.PqControls = nil
		} else {
			r.OutputMsk.PqControls = &tfTypes.OutputMskPqControls{}
		}
		r.OutputMsk.PqMaxFileSize = types.StringPointerValue(resp.OutputMsk.PqMaxFileSize)
		r.OutputMsk.PqMaxSize = types.StringPointerValue(resp.OutputMsk.PqMaxSize)
		if resp.OutputMsk.PqMode != nil {
			r.OutputMsk.PqMode = types.StringValue(string(*resp.OutputMsk.PqMode))
		} else {
			r.OutputMsk.PqMode = types.StringNull()
		}
		if resp.OutputMsk.PqOnBackpressure != nil {
			r.OutputMsk.PqOnBackpressure = types.StringValue(string(*resp.OutputMsk.PqOnBackpressure))
		} else {
			r.OutputMsk.PqOnBackpressure = types.StringNull()
		}
		r.OutputMsk.PqPath = types.StringPointerValue(resp.OutputMsk.PqPath)
		r.OutputMsk.ProtobufLibraryID = types.StringPointerValue(resp.OutputMsk.ProtobufLibraryID)
		r.OutputMsk.ReauthenticationThreshold = types.Float64PointerValue(resp.OutputMsk.ReauthenticationThreshold)
		r.OutputMsk.Region = types.StringValue(resp.OutputMsk.Region)
		r.OutputMsk.RejectUnauthorized = types.BoolPointerValue(resp.OutputMsk.RejectUnauthorized)
		r.OutputMsk.RequestTimeout = types.Float64PointerValue(resp.OutputMsk.RequestTimeout)
		r.OutputMsk.ReuseConnections = types.BoolPointerValue(resp.OutputMsk.ReuseConnections)
		if resp.OutputMsk.SignatureVersion != nil {
			r.OutputMsk.SignatureVersion = types.StringValue(string(*resp.OutputMsk.SignatureVersion))
		} else {
			r.OutputMsk.SignatureVersion = types.StringNull()
		}
		r.OutputMsk.Streamtags = make([]types.String, 0, len(resp.OutputMsk.Streamtags))
		for _, v := range resp.OutputMsk.Streamtags {
			r.OutputMsk.Streamtags = append(r.OutputMsk.Streamtags, types.StringValue(v))
		}
		r.OutputMsk.SystemFields = make([]types.String, 0, len(resp.OutputMsk.SystemFields))
		for _, v := range resp.OutputMsk.SystemFields {
			r.OutputMsk.SystemFields = append(r.OutputMsk.SystemFields, types.StringValue(v))
		}
		if resp.OutputMsk.TLS == nil {
			r.OutputMsk.TLS = nil
		} else {
			r.OutputMsk.TLS = &tfTypes.OutputMskTLSSettingsClientSide{}
			r.OutputMsk.TLS.CaPath = types.StringPointerValue(resp.OutputMsk.TLS.CaPath)
			r.OutputMsk.TLS.CertificateName = types.StringPointerValue(resp.OutputMsk.TLS.CertificateName)
			r.OutputMsk.TLS.CertPath = types.StringPointerValue(resp.OutputMsk.TLS.CertPath)
			r.OutputMsk.TLS.Disabled = types.BoolPointerValue(resp.OutputMsk.TLS.Disabled)
			if resp.OutputMsk.TLS.MaxVersion != nil {
				r.OutputMsk.TLS.MaxVersion = types.StringValue(string(*resp.OutputMsk.TLS.MaxVersion))
			} else {
				r.OutputMsk.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputMsk.TLS.MinVersion != nil {
				r.OutputMsk.TLS.MinVersion = types.StringValue(string(*resp.OutputMsk.TLS.MinVersion))
			} else {
				r.OutputMsk.TLS.MinVersion = types.StringNull()
			}
			r.OutputMsk.TLS.Passphrase = types.StringPointerValue(resp.OutputMsk.TLS.Passphrase)
			r.OutputMsk.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputMsk.TLS.PrivKeyPath)
			r.OutputMsk.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputMsk.TLS.RejectUnauthorized)
			r.OutputMsk.TLS.Servername = types.StringPointerValue(resp.OutputMsk.TLS.Servername)
		}
		r.OutputMsk.Topic = types.StringValue(resp.OutputMsk.Topic)
		if resp.OutputMsk.Type != nil {
			r.OutputMsk.Type = types.StringValue(string(*resp.OutputMsk.Type))
		} else {
			r.OutputMsk.Type = types.StringNull()
		}
	}
	if resp.OutputNetflow != nil {
		r.OutputNetflow = &tfTypes.OutputNetflow{}
		r.OutputNetflow.Description = types.StringPointerValue(resp.OutputNetflow.Description)
		r.OutputNetflow.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputNetflow.DNSResolvePeriodSec)
		r.OutputNetflow.Environment = types.StringPointerValue(resp.OutputNetflow.Environment)
		r.OutputNetflow.Hosts = []tfTypes.OutputNetflowHosts{}
		if len(r.OutputNetflow.Hosts) > len(resp.OutputNetflow.Hosts) {
			r.OutputNetflow.Hosts = r.OutputNetflow.Hosts[:len(resp.OutputNetflow.Hosts)]
		}
		for hostsCount1, hostsItem1 := range resp.OutputNetflow.Hosts {
			var hosts1 tfTypes.OutputNetflowHosts
			hosts1.Host = types.StringValue(hostsItem1.Host)
			hosts1.Port = types.Float64PointerValue(hostsItem1.Port)
			if hostsCount1+1 > len(r.OutputNetflow.Hosts) {
				r.OutputNetflow.Hosts = append(r.OutputNetflow.Hosts, hosts1)
			} else {
				r.OutputNetflow.Hosts[hostsCount1].Host = hosts1.Host
				r.OutputNetflow.Hosts[hostsCount1].Port = hosts1.Port
			}
		}
		r.OutputNetflow.ID = types.StringPointerValue(resp.OutputNetflow.ID)
		r.OutputNetflow.Pipeline = types.StringPointerValue(resp.OutputNetflow.Pipeline)
		r.OutputNetflow.Streamtags = make([]types.String, 0, len(resp.OutputNetflow.Streamtags))
		for _, v := range resp.OutputNetflow.Streamtags {
			r.OutputNetflow.Streamtags = append(r.OutputNetflow.Streamtags, types.StringValue(v))
		}
		r.OutputNetflow.SystemFields = make([]types.String, 0, len(resp.OutputNetflow.SystemFields))
		for _, v := range resp.OutputNetflow.SystemFields {
			r.OutputNetflow.SystemFields = append(r.OutputNetflow.SystemFields, types.StringValue(v))
		}
		r.OutputNetflow.Type = types.StringValue(string(resp.OutputNetflow.Type))
	}
	if resp.OutputNewrelic != nil {
		r.OutputNewrelic = &tfTypes.OutputNewrelic{}
		r.OutputNewrelic.APIKey = types.StringPointerValue(resp.OutputNewrelic.APIKey)
		if resp.OutputNewrelic.AuthType != nil {
			r.OutputNewrelic.AuthType = types.StringValue(string(*resp.OutputNewrelic.AuthType))
		} else {
			r.OutputNewrelic.AuthType = types.StringNull()
		}
		r.OutputNewrelic.Compress = types.BoolPointerValue(resp.OutputNewrelic.Compress)
		r.OutputNewrelic.Concurrency = types.Float64PointerValue(resp.OutputNewrelic.Concurrency)
		r.OutputNewrelic.CustomURL = types.StringPointerValue(resp.OutputNewrelic.CustomURL)
		r.OutputNewrelic.Description = types.StringPointerValue(resp.OutputNewrelic.Description)
		r.OutputNewrelic.Environment = types.StringPointerValue(resp.OutputNewrelic.Environment)
		r.OutputNewrelic.ExtraHTTPHeaders = []tfTypes.OutputNewrelicExtraHTTPHeaders{}
		if len(r.OutputNewrelic.ExtraHTTPHeaders) > len(resp.OutputNewrelic.ExtraHTTPHeaders) {
			r.OutputNewrelic.ExtraHTTPHeaders = r.OutputNewrelic.ExtraHTTPHeaders[:len(resp.OutputNewrelic.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount17, extraHTTPHeadersItem17 := range resp.OutputNewrelic.ExtraHTTPHeaders {
			var extraHTTPHeaders17 tfTypes.OutputNewrelicExtraHTTPHeaders
			extraHTTPHeaders17.Name = types.StringPointerValue(extraHTTPHeadersItem17.Name)
			extraHTTPHeaders17.Value = types.StringValue(extraHTTPHeadersItem17.Value)
			if extraHTTPHeadersCount17+1 > len(r.OutputNewrelic.ExtraHTTPHeaders) {
				r.OutputNewrelic.ExtraHTTPHeaders = append(r.OutputNewrelic.ExtraHTTPHeaders, extraHTTPHeaders17)
			} else {
				r.OutputNewrelic.ExtraHTTPHeaders[extraHTTPHeadersCount17].Name = extraHTTPHeaders17.Name
				r.OutputNewrelic.ExtraHTTPHeaders[extraHTTPHeadersCount17].Value = extraHTTPHeaders17.Value
			}
		}
		if resp.OutputNewrelic.FailedRequestLoggingMode != nil {
			r.OutputNewrelic.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputNewrelic.FailedRequestLoggingMode))
		} else {
			r.OutputNewrelic.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputNewrelic.FlushPeriodSec = types.Float64PointerValue(resp.OutputNewrelic.FlushPeriodSec)
		r.OutputNewrelic.ID = types.StringValue(resp.OutputNewrelic.ID)
		r.OutputNewrelic.LogType = types.StringPointerValue(resp.OutputNewrelic.LogType)
		r.OutputNewrelic.MaxPayloadEvents = types.Float64PointerValue(resp.OutputNewrelic.MaxPayloadEvents)
		r.OutputNewrelic.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputNewrelic.MaxPayloadSizeKB)
		r.OutputNewrelic.MessageField = types.StringPointerValue(resp.OutputNewrelic.MessageField)
		r.OutputNewrelic.Metadata = []tfTypes.OutputNewrelicMetadata{}
		if len(r.OutputNewrelic.Metadata) > len(resp.OutputNewrelic.Metadata) {
			r.OutputNewrelic.Metadata = r.OutputNewrelic.Metadata[:len(resp.OutputNewrelic.Metadata)]
		}
		for metadataCount1, metadataItem1 := range resp.OutputNewrelic.Metadata {
			var metadata1 tfTypes.OutputNewrelicMetadata
			metadata1.Name = types.StringValue(string(metadataItem1.Name))
			metadata1.Value = types.StringValue(metadataItem1.Value)
			if metadataCount1+1 > len(r.OutputNewrelic.Metadata) {
				r.OutputNewrelic.Metadata = append(r.OutputNewrelic.Metadata, metadata1)
			} else {
				r.OutputNewrelic.Metadata[metadataCount1].Name = metadata1.Name
				r.OutputNewrelic.Metadata[metadataCount1].Value = metadata1.Value
			}
		}
		if resp.OutputNewrelic.OnBackpressure != nil {
			r.OutputNewrelic.OnBackpressure = types.StringValue(string(*resp.OutputNewrelic.OnBackpressure))
		} else {
			r.OutputNewrelic.OnBackpressure = types.StringNull()
		}
		r.OutputNewrelic.Pipeline = types.StringPointerValue(resp.OutputNewrelic.Pipeline)
		if resp.OutputNewrelic.PqCompress != nil {
			r.OutputNewrelic.PqCompress = types.StringValue(string(*resp.OutputNewrelic.PqCompress))
		} else {
			r.OutputNewrelic.PqCompress = types.StringNull()
		}
		if resp.OutputNewrelic.PqControls == nil {
			r.OutputNewrelic.PqControls = nil
		} else {
			r.OutputNewrelic.PqControls = &tfTypes.OutputNewrelicPqControls{}
		}
		r.OutputNewrelic.PqMaxFileSize = types.StringPointerValue(resp.OutputNewrelic.PqMaxFileSize)
		r.OutputNewrelic.PqMaxSize = types.StringPointerValue(resp.OutputNewrelic.PqMaxSize)
		if resp.OutputNewrelic.PqMode != nil {
			r.OutputNewrelic.PqMode = types.StringValue(string(*resp.OutputNewrelic.PqMode))
		} else {
			r.OutputNewrelic.PqMode = types.StringNull()
		}
		if resp.OutputNewrelic.PqOnBackpressure != nil {
			r.OutputNewrelic.PqOnBackpressure = types.StringValue(string(*resp.OutputNewrelic.PqOnBackpressure))
		} else {
			r.OutputNewrelic.PqOnBackpressure = types.StringNull()
		}
		r.OutputNewrelic.PqPath = types.StringPointerValue(resp.OutputNewrelic.PqPath)
		if resp.OutputNewrelic.Region != nil {
			r.OutputNewrelic.Region = types.StringValue(string(*resp.OutputNewrelic.Region))
		} else {
			r.OutputNewrelic.Region = types.StringNull()
		}
		r.OutputNewrelic.RejectUnauthorized = types.BoolPointerValue(resp.OutputNewrelic.RejectUnauthorized)
		r.OutputNewrelic.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputNewrelic.ResponseHonorRetryAfterHeader)
		r.OutputNewrelic.ResponseRetrySettings = []tfTypes.OutputNewrelicResponseRetrySettings{}
		if len(r.OutputNewrelic.ResponseRetrySettings) > len(resp.OutputNewrelic.ResponseRetrySettings) {
			r.OutputNewrelic.ResponseRetrySettings = r.OutputNewrelic.ResponseRetrySettings[:len(resp.OutputNewrelic.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount18, responseRetrySettingsItem18 := range resp.OutputNewrelic.ResponseRetrySettings {
			var responseRetrySettings18 tfTypes.OutputNewrelicResponseRetrySettings
			responseRetrySettings18.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem18.BackoffRate)
			responseRetrySettings18.HTTPStatus = types.Float64Value(responseRetrySettingsItem18.HTTPStatus)
			responseRetrySettings18.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem18.InitialBackoff)
			responseRetrySettings18.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem18.MaxBackoff)
			if responseRetrySettingsCount18+1 > len(r.OutputNewrelic.ResponseRetrySettings) {
				r.OutputNewrelic.ResponseRetrySettings = append(r.OutputNewrelic.ResponseRetrySettings, responseRetrySettings18)
			} else {
				r.OutputNewrelic.ResponseRetrySettings[responseRetrySettingsCount18].BackoffRate = responseRetrySettings18.BackoffRate
				r.OutputNewrelic.ResponseRetrySettings[responseRetrySettingsCount18].HTTPStatus = responseRetrySettings18.HTTPStatus
				r.OutputNewrelic.ResponseRetrySettings[responseRetrySettingsCount18].InitialBackoff = responseRetrySettings18.InitialBackoff
				r.OutputNewrelic.ResponseRetrySettings[responseRetrySettingsCount18].MaxBackoff = responseRetrySettings18.MaxBackoff
			}
		}
		r.OutputNewrelic.SafeHeaders = make([]types.String, 0, len(resp.OutputNewrelic.SafeHeaders))
		for _, v := range resp.OutputNewrelic.SafeHeaders {
			r.OutputNewrelic.SafeHeaders = append(r.OutputNewrelic.SafeHeaders, types.StringValue(v))
		}
		r.OutputNewrelic.Streamtags = make([]types.String, 0, len(resp.OutputNewrelic.Streamtags))
		for _, v := range resp.OutputNewrelic.Streamtags {
			r.OutputNewrelic.Streamtags = append(r.OutputNewrelic.Streamtags, types.StringValue(v))
		}
		r.OutputNewrelic.SystemFields = make([]types.String, 0, len(resp.OutputNewrelic.SystemFields))
		for _, v := range resp.OutputNewrelic.SystemFields {
			r.OutputNewrelic.SystemFields = append(r.OutputNewrelic.SystemFields, types.StringValue(v))
		}
		r.OutputNewrelic.TextSecret = types.StringPointerValue(resp.OutputNewrelic.TextSecret)
		if resp.OutputNewrelic.TimeoutRetrySettings == nil {
			r.OutputNewrelic.TimeoutRetrySettings = nil
		} else {
			r.OutputNewrelic.TimeoutRetrySettings = &tfTypes.OutputNewrelicTimeoutRetrySettings{}
			r.OutputNewrelic.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputNewrelic.TimeoutRetrySettings.BackoffRate)
			r.OutputNewrelic.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputNewrelic.TimeoutRetrySettings.InitialBackoff)
			r.OutputNewrelic.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputNewrelic.TimeoutRetrySettings.MaxBackoff)
			r.OutputNewrelic.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputNewrelic.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputNewrelic.TimeoutSec = types.Float64PointerValue(resp.OutputNewrelic.TimeoutSec)
		r.OutputNewrelic.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputNewrelic.TotalMemoryLimitKB)
		r.OutputNewrelic.Type = types.StringValue(string(resp.OutputNewrelic.Type))
		r.OutputNewrelic.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputNewrelic.UseRoundRobinDNS)
	}
	if resp.OutputNewrelicEvents != nil {
		r.OutputNewrelicEvents = &tfTypes.OutputNewrelicEvents{}
		r.OutputNewrelicEvents.AccountID = types.StringValue(resp.OutputNewrelicEvents.AccountID)
		r.OutputNewrelicEvents.APIKey = types.StringPointerValue(resp.OutputNewrelicEvents.APIKey)
		if resp.OutputNewrelicEvents.AuthType != nil {
			r.OutputNewrelicEvents.AuthType = types.StringValue(string(*resp.OutputNewrelicEvents.AuthType))
		} else {
			r.OutputNewrelicEvents.AuthType = types.StringNull()
		}
		r.OutputNewrelicEvents.Compress = types.BoolPointerValue(resp.OutputNewrelicEvents.Compress)
		r.OutputNewrelicEvents.Concurrency = types.Float64PointerValue(resp.OutputNewrelicEvents.Concurrency)
		r.OutputNewrelicEvents.CustomURL = types.StringPointerValue(resp.OutputNewrelicEvents.CustomURL)
		r.OutputNewrelicEvents.Description = types.StringPointerValue(resp.OutputNewrelicEvents.Description)
		r.OutputNewrelicEvents.Environment = types.StringPointerValue(resp.OutputNewrelicEvents.Environment)
		r.OutputNewrelicEvents.EventType = types.StringValue(resp.OutputNewrelicEvents.EventType)
		r.OutputNewrelicEvents.ExtraHTTPHeaders = []tfTypes.OutputNewrelicEventsExtraHTTPHeaders{}
		if len(r.OutputNewrelicEvents.ExtraHTTPHeaders) > len(resp.OutputNewrelicEvents.ExtraHTTPHeaders) {
			r.OutputNewrelicEvents.ExtraHTTPHeaders = r.OutputNewrelicEvents.ExtraHTTPHeaders[:len(resp.OutputNewrelicEvents.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount18, extraHTTPHeadersItem18 := range resp.OutputNewrelicEvents.ExtraHTTPHeaders {
			var extraHTTPHeaders18 tfTypes.OutputNewrelicEventsExtraHTTPHeaders
			extraHTTPHeaders18.Name = types.StringPointerValue(extraHTTPHeadersItem18.Name)
			extraHTTPHeaders18.Value = types.StringValue(extraHTTPHeadersItem18.Value)
			if extraHTTPHeadersCount18+1 > len(r.OutputNewrelicEvents.ExtraHTTPHeaders) {
				r.OutputNewrelicEvents.ExtraHTTPHeaders = append(r.OutputNewrelicEvents.ExtraHTTPHeaders, extraHTTPHeaders18)
			} else {
				r.OutputNewrelicEvents.ExtraHTTPHeaders[extraHTTPHeadersCount18].Name = extraHTTPHeaders18.Name
				r.OutputNewrelicEvents.ExtraHTTPHeaders[extraHTTPHeadersCount18].Value = extraHTTPHeaders18.Value
			}
		}
		if resp.OutputNewrelicEvents.FailedRequestLoggingMode != nil {
			r.OutputNewrelicEvents.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputNewrelicEvents.FailedRequestLoggingMode))
		} else {
			r.OutputNewrelicEvents.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputNewrelicEvents.FlushPeriodSec = types.Float64PointerValue(resp.OutputNewrelicEvents.FlushPeriodSec)
		r.OutputNewrelicEvents.ID = types.StringPointerValue(resp.OutputNewrelicEvents.ID)
		r.OutputNewrelicEvents.MaxPayloadEvents = types.Float64PointerValue(resp.OutputNewrelicEvents.MaxPayloadEvents)
		r.OutputNewrelicEvents.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputNewrelicEvents.MaxPayloadSizeKB)
		if resp.OutputNewrelicEvents.OnBackpressure != nil {
			r.OutputNewrelicEvents.OnBackpressure = types.StringValue(string(*resp.OutputNewrelicEvents.OnBackpressure))
		} else {
			r.OutputNewrelicEvents.OnBackpressure = types.StringNull()
		}
		r.OutputNewrelicEvents.Pipeline = types.StringPointerValue(resp.OutputNewrelicEvents.Pipeline)
		if resp.OutputNewrelicEvents.PqCompress != nil {
			r.OutputNewrelicEvents.PqCompress = types.StringValue(string(*resp.OutputNewrelicEvents.PqCompress))
		} else {
			r.OutputNewrelicEvents.PqCompress = types.StringNull()
		}
		if resp.OutputNewrelicEvents.PqControls == nil {
			r.OutputNewrelicEvents.PqControls = nil
		} else {
			r.OutputNewrelicEvents.PqControls = &tfTypes.OutputNewrelicEventsPqControls{}
		}
		r.OutputNewrelicEvents.PqMaxFileSize = types.StringPointerValue(resp.OutputNewrelicEvents.PqMaxFileSize)
		r.OutputNewrelicEvents.PqMaxSize = types.StringPointerValue(resp.OutputNewrelicEvents.PqMaxSize)
		if resp.OutputNewrelicEvents.PqMode != nil {
			r.OutputNewrelicEvents.PqMode = types.StringValue(string(*resp.OutputNewrelicEvents.PqMode))
		} else {
			r.OutputNewrelicEvents.PqMode = types.StringNull()
		}
		if resp.OutputNewrelicEvents.PqOnBackpressure != nil {
			r.OutputNewrelicEvents.PqOnBackpressure = types.StringValue(string(*resp.OutputNewrelicEvents.PqOnBackpressure))
		} else {
			r.OutputNewrelicEvents.PqOnBackpressure = types.StringNull()
		}
		r.OutputNewrelicEvents.PqPath = types.StringPointerValue(resp.OutputNewrelicEvents.PqPath)
		if resp.OutputNewrelicEvents.Region != nil {
			r.OutputNewrelicEvents.Region = types.StringValue(string(*resp.OutputNewrelicEvents.Region))
		} else {
			r.OutputNewrelicEvents.Region = types.StringNull()
		}
		r.OutputNewrelicEvents.RejectUnauthorized = types.BoolPointerValue(resp.OutputNewrelicEvents.RejectUnauthorized)
		r.OutputNewrelicEvents.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputNewrelicEvents.ResponseHonorRetryAfterHeader)
		r.OutputNewrelicEvents.ResponseRetrySettings = []tfTypes.OutputNewrelicEventsResponseRetrySettings{}
		if len(r.OutputNewrelicEvents.ResponseRetrySettings) > len(resp.OutputNewrelicEvents.ResponseRetrySettings) {
			r.OutputNewrelicEvents.ResponseRetrySettings = r.OutputNewrelicEvents.ResponseRetrySettings[:len(resp.OutputNewrelicEvents.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount19, responseRetrySettingsItem19 := range resp.OutputNewrelicEvents.ResponseRetrySettings {
			var responseRetrySettings19 tfTypes.OutputNewrelicEventsResponseRetrySettings
			responseRetrySettings19.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem19.BackoffRate)
			responseRetrySettings19.HTTPStatus = types.Float64Value(responseRetrySettingsItem19.HTTPStatus)
			responseRetrySettings19.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem19.InitialBackoff)
			responseRetrySettings19.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem19.MaxBackoff)
			if responseRetrySettingsCount19+1 > len(r.OutputNewrelicEvents.ResponseRetrySettings) {
				r.OutputNewrelicEvents.ResponseRetrySettings = append(r.OutputNewrelicEvents.ResponseRetrySettings, responseRetrySettings19)
			} else {
				r.OutputNewrelicEvents.ResponseRetrySettings[responseRetrySettingsCount19].BackoffRate = responseRetrySettings19.BackoffRate
				r.OutputNewrelicEvents.ResponseRetrySettings[responseRetrySettingsCount19].HTTPStatus = responseRetrySettings19.HTTPStatus
				r.OutputNewrelicEvents.ResponseRetrySettings[responseRetrySettingsCount19].InitialBackoff = responseRetrySettings19.InitialBackoff
				r.OutputNewrelicEvents.ResponseRetrySettings[responseRetrySettingsCount19].MaxBackoff = responseRetrySettings19.MaxBackoff
			}
		}
		r.OutputNewrelicEvents.SafeHeaders = make([]types.String, 0, len(resp.OutputNewrelicEvents.SafeHeaders))
		for _, v := range resp.OutputNewrelicEvents.SafeHeaders {
			r.OutputNewrelicEvents.SafeHeaders = append(r.OutputNewrelicEvents.SafeHeaders, types.StringValue(v))
		}
		r.OutputNewrelicEvents.Streamtags = make([]types.String, 0, len(resp.OutputNewrelicEvents.Streamtags))
		for _, v := range resp.OutputNewrelicEvents.Streamtags {
			r.OutputNewrelicEvents.Streamtags = append(r.OutputNewrelicEvents.Streamtags, types.StringValue(v))
		}
		r.OutputNewrelicEvents.SystemFields = make([]types.String, 0, len(resp.OutputNewrelicEvents.SystemFields))
		for _, v := range resp.OutputNewrelicEvents.SystemFields {
			r.OutputNewrelicEvents.SystemFields = append(r.OutputNewrelicEvents.SystemFields, types.StringValue(v))
		}
		r.OutputNewrelicEvents.TextSecret = types.StringPointerValue(resp.OutputNewrelicEvents.TextSecret)
		if resp.OutputNewrelicEvents.TimeoutRetrySettings == nil {
			r.OutputNewrelicEvents.TimeoutRetrySettings = nil
		} else {
			r.OutputNewrelicEvents.TimeoutRetrySettings = &tfTypes.OutputNewrelicEventsTimeoutRetrySettings{}
			r.OutputNewrelicEvents.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputNewrelicEvents.TimeoutRetrySettings.BackoffRate)
			r.OutputNewrelicEvents.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputNewrelicEvents.TimeoutRetrySettings.InitialBackoff)
			r.OutputNewrelicEvents.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputNewrelicEvents.TimeoutRetrySettings.MaxBackoff)
			r.OutputNewrelicEvents.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputNewrelicEvents.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputNewrelicEvents.TimeoutSec = types.Float64PointerValue(resp.OutputNewrelicEvents.TimeoutSec)
		if resp.OutputNewrelicEvents.Type != nil {
			r.OutputNewrelicEvents.Type = types.StringValue(string(*resp.OutputNewrelicEvents.Type))
		} else {
			r.OutputNewrelicEvents.Type = types.StringNull()
		}
		r.OutputNewrelicEvents.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputNewrelicEvents.UseRoundRobinDNS)
	}
	if resp.OutputOpenTelemetry != nil {
		r.OutputOpenTelemetry = &tfTypes.OutputOpenTelemetry{}
		r.OutputOpenTelemetry.AuthHeaderExpr = types.StringPointerValue(resp.OutputOpenTelemetry.AuthHeaderExpr)
		if resp.OutputOpenTelemetry.AuthType != nil {
			r.OutputOpenTelemetry.AuthType = types.StringValue(string(*resp.OutputOpenTelemetry.AuthType))
		} else {
			r.OutputOpenTelemetry.AuthType = types.StringNull()
		}
		if resp.OutputOpenTelemetry.Compress != nil {
			r.OutputOpenTelemetry.Compress = types.StringValue(string(*resp.OutputOpenTelemetry.Compress))
		} else {
			r.OutputOpenTelemetry.Compress = types.StringNull()
		}
		r.OutputOpenTelemetry.Concurrency = types.Float64PointerValue(resp.OutputOpenTelemetry.Concurrency)
		r.OutputOpenTelemetry.ConnectionTimeout = types.Float64PointerValue(resp.OutputOpenTelemetry.ConnectionTimeout)
		r.OutputOpenTelemetry.CredentialsSecret = types.StringPointerValue(resp.OutputOpenTelemetry.CredentialsSecret)
		r.OutputOpenTelemetry.Description = types.StringPointerValue(resp.OutputOpenTelemetry.Description)
		r.OutputOpenTelemetry.Endpoint = types.StringValue(resp.OutputOpenTelemetry.Endpoint)
		r.OutputOpenTelemetry.Environment = types.StringPointerValue(resp.OutputOpenTelemetry.Environment)
		r.OutputOpenTelemetry.ExtraHTTPHeaders = []tfTypes.OutputOpenTelemetryExtraHTTPHeaders{}
		if len(r.OutputOpenTelemetry.ExtraHTTPHeaders) > len(resp.OutputOpenTelemetry.ExtraHTTPHeaders) {
			r.OutputOpenTelemetry.ExtraHTTPHeaders = r.OutputOpenTelemetry.ExtraHTTPHeaders[:len(resp.OutputOpenTelemetry.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount19, extraHTTPHeadersItem19 := range resp.OutputOpenTelemetry.ExtraHTTPHeaders {
			var extraHTTPHeaders19 tfTypes.OutputOpenTelemetryExtraHTTPHeaders
			extraHTTPHeaders19.Name = types.StringPointerValue(extraHTTPHeadersItem19.Name)
			extraHTTPHeaders19.Value = types.StringValue(extraHTTPHeadersItem19.Value)
			if extraHTTPHeadersCount19+1 > len(r.OutputOpenTelemetry.ExtraHTTPHeaders) {
				r.OutputOpenTelemetry.ExtraHTTPHeaders = append(r.OutputOpenTelemetry.ExtraHTTPHeaders, extraHTTPHeaders19)
			} else {
				r.OutputOpenTelemetry.ExtraHTTPHeaders[extraHTTPHeadersCount19].Name = extraHTTPHeaders19.Name
				r.OutputOpenTelemetry.ExtraHTTPHeaders[extraHTTPHeadersCount19].Value = extraHTTPHeaders19.Value
			}
		}
		if resp.OutputOpenTelemetry.FailedRequestLoggingMode != nil {
			r.OutputOpenTelemetry.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputOpenTelemetry.FailedRequestLoggingMode))
		} else {
			r.OutputOpenTelemetry.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputOpenTelemetry.FlushPeriodSec = types.Float64PointerValue(resp.OutputOpenTelemetry.FlushPeriodSec)
		if resp.OutputOpenTelemetry.HTTPCompress != nil {
			r.OutputOpenTelemetry.HTTPCompress = types.StringValue(string(*resp.OutputOpenTelemetry.HTTPCompress))
		} else {
			r.OutputOpenTelemetry.HTTPCompress = types.StringNull()
		}
		r.OutputOpenTelemetry.HTTPLogsEndpointOverride = types.StringPointerValue(resp.OutputOpenTelemetry.HTTPLogsEndpointOverride)
		r.OutputOpenTelemetry.HTTPMetricsEndpointOverride = types.StringPointerValue(resp.OutputOpenTelemetry.HTTPMetricsEndpointOverride)
		r.OutputOpenTelemetry.HTTPTracesEndpointOverride = types.StringPointerValue(resp.OutputOpenTelemetry.HTTPTracesEndpointOverride)
		r.OutputOpenTelemetry.ID = types.StringPointerValue(resp.OutputOpenTelemetry.ID)
		r.OutputOpenTelemetry.KeepAlive = types.BoolPointerValue(resp.OutputOpenTelemetry.KeepAlive)
		r.OutputOpenTelemetry.KeepAliveTime = types.Float64PointerValue(resp.OutputOpenTelemetry.KeepAliveTime)
		r.OutputOpenTelemetry.LoginURL = types.StringPointerValue(resp.OutputOpenTelemetry.LoginURL)
		r.OutputOpenTelemetry.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputOpenTelemetry.MaxPayloadSizeKB)
		r.OutputOpenTelemetry.Metadata = []tfTypes.OutputOpenTelemetryMetadata{}
		if len(r.OutputOpenTelemetry.Metadata) > len(resp.OutputOpenTelemetry.Metadata) {
			r.OutputOpenTelemetry.Metadata = r.OutputOpenTelemetry.Metadata[:len(resp.OutputOpenTelemetry.Metadata)]
		}
		for metadataCount2, metadataItem2 := range resp.OutputOpenTelemetry.Metadata {
			var metadata2 tfTypes.OutputOpenTelemetryMetadata
			metadata2.Key = types.StringPointerValue(metadataItem2.Key)
			metadata2.Value = types.StringValue(metadataItem2.Value)
			if metadataCount2+1 > len(r.OutputOpenTelemetry.Metadata) {
				r.OutputOpenTelemetry.Metadata = append(r.OutputOpenTelemetry.Metadata, metadata2)
			} else {
				r.OutputOpenTelemetry.Metadata[metadataCount2].Key = metadata2.Key
				r.OutputOpenTelemetry.Metadata[metadataCount2].Value = metadata2.Value
			}
		}
		r.OutputOpenTelemetry.OauthHeaders = []tfTypes.OutputOpenTelemetryOauthHeaders{}
		if len(r.OutputOpenTelemetry.OauthHeaders) > len(resp.OutputOpenTelemetry.OauthHeaders) {
			r.OutputOpenTelemetry.OauthHeaders = r.OutputOpenTelemetry.OauthHeaders[:len(resp.OutputOpenTelemetry.OauthHeaders)]
		}
		for oauthHeadersCount2, oauthHeadersItem2 := range resp.OutputOpenTelemetry.OauthHeaders {
			var oauthHeaders2 tfTypes.OutputOpenTelemetryOauthHeaders
			oauthHeaders2.Name = types.StringValue(oauthHeadersItem2.Name)
			oauthHeaders2.Value = types.StringValue(oauthHeadersItem2.Value)
			if oauthHeadersCount2+1 > len(r.OutputOpenTelemetry.OauthHeaders) {
				r.OutputOpenTelemetry.OauthHeaders = append(r.OutputOpenTelemetry.OauthHeaders, oauthHeaders2)
			} else {
				r.OutputOpenTelemetry.OauthHeaders[oauthHeadersCount2].Name = oauthHeaders2.Name
				r.OutputOpenTelemetry.OauthHeaders[oauthHeadersCount2].Value = oauthHeaders2.Value
			}
		}
		r.OutputOpenTelemetry.OauthParams = []tfTypes.OutputOpenTelemetryOauthParams{}
		if len(r.OutputOpenTelemetry.OauthParams) > len(resp.OutputOpenTelemetry.OauthParams) {
			r.OutputOpenTelemetry.OauthParams = r.OutputOpenTelemetry.OauthParams[:len(resp.OutputOpenTelemetry.OauthParams)]
		}
		for oauthParamsCount2, oauthParamsItem2 := range resp.OutputOpenTelemetry.OauthParams {
			var oauthParams2 tfTypes.OutputOpenTelemetryOauthParams
			oauthParams2.Name = types.StringValue(oauthParamsItem2.Name)
			oauthParams2.Value = types.StringValue(oauthParamsItem2.Value)
			if oauthParamsCount2+1 > len(r.OutputOpenTelemetry.OauthParams) {
				r.OutputOpenTelemetry.OauthParams = append(r.OutputOpenTelemetry.OauthParams, oauthParams2)
			} else {
				r.OutputOpenTelemetry.OauthParams[oauthParamsCount2].Name = oauthParams2.Name
				r.OutputOpenTelemetry.OauthParams[oauthParamsCount2].Value = oauthParams2.Value
			}
		}
		if resp.OutputOpenTelemetry.OnBackpressure != nil {
			r.OutputOpenTelemetry.OnBackpressure = types.StringValue(string(*resp.OutputOpenTelemetry.OnBackpressure))
		} else {
			r.OutputOpenTelemetry.OnBackpressure = types.StringNull()
		}
		if resp.OutputOpenTelemetry.OtlpVersion != nil {
			r.OutputOpenTelemetry.OtlpVersion = types.StringValue(string(*resp.OutputOpenTelemetry.OtlpVersion))
		} else {
			r.OutputOpenTelemetry.OtlpVersion = types.StringNull()
		}
		r.OutputOpenTelemetry.Password = types.StringPointerValue(resp.OutputOpenTelemetry.Password)
		r.OutputOpenTelemetry.Pipeline = types.StringPointerValue(resp.OutputOpenTelemetry.Pipeline)
		if resp.OutputOpenTelemetry.PqCompress != nil {
			r.OutputOpenTelemetry.PqCompress = types.StringValue(string(*resp.OutputOpenTelemetry.PqCompress))
		} else {
			r.OutputOpenTelemetry.PqCompress = types.StringNull()
		}
		if resp.OutputOpenTelemetry.PqControls == nil {
			r.OutputOpenTelemetry.PqControls = nil
		} else {
			r.OutputOpenTelemetry.PqControls = &tfTypes.OutputOpenTelemetryPqControls{}
		}
		r.OutputOpenTelemetry.PqMaxFileSize = types.StringPointerValue(resp.OutputOpenTelemetry.PqMaxFileSize)
		r.OutputOpenTelemetry.PqMaxSize = types.StringPointerValue(resp.OutputOpenTelemetry.PqMaxSize)
		if resp.OutputOpenTelemetry.PqMode != nil {
			r.OutputOpenTelemetry.PqMode = types.StringValue(string(*resp.OutputOpenTelemetry.PqMode))
		} else {
			r.OutputOpenTelemetry.PqMode = types.StringNull()
		}
		if resp.OutputOpenTelemetry.PqOnBackpressure != nil {
			r.OutputOpenTelemetry.PqOnBackpressure = types.StringValue(string(*resp.OutputOpenTelemetry.PqOnBackpressure))
		} else {
			r.OutputOpenTelemetry.PqOnBackpressure = types.StringNull()
		}
		r.OutputOpenTelemetry.PqPath = types.StringPointerValue(resp.OutputOpenTelemetry.PqPath)
		if resp.OutputOpenTelemetry.Protocol != nil {
			r.OutputOpenTelemetry.Protocol = types.StringValue(string(*resp.OutputOpenTelemetry.Protocol))
		} else {
			r.OutputOpenTelemetry.Protocol = types.StringNull()
		}
		r.OutputOpenTelemetry.RejectUnauthorized = types.BoolPointerValue(resp.OutputOpenTelemetry.RejectUnauthorized)
		r.OutputOpenTelemetry.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputOpenTelemetry.ResponseHonorRetryAfterHeader)
		r.OutputOpenTelemetry.ResponseRetrySettings = []tfTypes.OutputOpenTelemetryResponseRetrySettings{}
		if len(r.OutputOpenTelemetry.ResponseRetrySettings) > len(resp.OutputOpenTelemetry.ResponseRetrySettings) {
			r.OutputOpenTelemetry.ResponseRetrySettings = r.OutputOpenTelemetry.ResponseRetrySettings[:len(resp.OutputOpenTelemetry.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount20, responseRetrySettingsItem20 := range resp.OutputOpenTelemetry.ResponseRetrySettings {
			var responseRetrySettings20 tfTypes.OutputOpenTelemetryResponseRetrySettings
			responseRetrySettings20.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem20.BackoffRate)
			responseRetrySettings20.HTTPStatus = types.Float64Value(responseRetrySettingsItem20.HTTPStatus)
			responseRetrySettings20.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem20.InitialBackoff)
			responseRetrySettings20.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem20.MaxBackoff)
			if responseRetrySettingsCount20+1 > len(r.OutputOpenTelemetry.ResponseRetrySettings) {
				r.OutputOpenTelemetry.ResponseRetrySettings = append(r.OutputOpenTelemetry.ResponseRetrySettings, responseRetrySettings20)
			} else {
				r.OutputOpenTelemetry.ResponseRetrySettings[responseRetrySettingsCount20].BackoffRate = responseRetrySettings20.BackoffRate
				r.OutputOpenTelemetry.ResponseRetrySettings[responseRetrySettingsCount20].HTTPStatus = responseRetrySettings20.HTTPStatus
				r.OutputOpenTelemetry.ResponseRetrySettings[responseRetrySettingsCount20].InitialBackoff = responseRetrySettings20.InitialBackoff
				r.OutputOpenTelemetry.ResponseRetrySettings[responseRetrySettingsCount20].MaxBackoff = responseRetrySettings20.MaxBackoff
			}
		}
		r.OutputOpenTelemetry.SafeHeaders = make([]types.String, 0, len(resp.OutputOpenTelemetry.SafeHeaders))
		for _, v := range resp.OutputOpenTelemetry.SafeHeaders {
			r.OutputOpenTelemetry.SafeHeaders = append(r.OutputOpenTelemetry.SafeHeaders, types.StringValue(v))
		}
		r.OutputOpenTelemetry.Secret = types.StringPointerValue(resp.OutputOpenTelemetry.Secret)
		r.OutputOpenTelemetry.SecretParamName = types.StringPointerValue(resp.OutputOpenTelemetry.SecretParamName)
		r.OutputOpenTelemetry.Streamtags = make([]types.String, 0, len(resp.OutputOpenTelemetry.Streamtags))
		for _, v := range resp.OutputOpenTelemetry.Streamtags {
			r.OutputOpenTelemetry.Streamtags = append(r.OutputOpenTelemetry.Streamtags, types.StringValue(v))
		}
		r.OutputOpenTelemetry.SystemFields = make([]types.String, 0, len(resp.OutputOpenTelemetry.SystemFields))
		for _, v := range resp.OutputOpenTelemetry.SystemFields {
			r.OutputOpenTelemetry.SystemFields = append(r.OutputOpenTelemetry.SystemFields, types.StringValue(v))
		}
		r.OutputOpenTelemetry.TextSecret = types.StringPointerValue(resp.OutputOpenTelemetry.TextSecret)
		if resp.OutputOpenTelemetry.TimeoutRetrySettings == nil {
			r.OutputOpenTelemetry.TimeoutRetrySettings = nil
		} else {
			r.OutputOpenTelemetry.TimeoutRetrySettings = &tfTypes.OutputOpenTelemetryTimeoutRetrySettings{}
			r.OutputOpenTelemetry.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputOpenTelemetry.TimeoutRetrySettings.BackoffRate)
			r.OutputOpenTelemetry.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputOpenTelemetry.TimeoutRetrySettings.InitialBackoff)
			r.OutputOpenTelemetry.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputOpenTelemetry.TimeoutRetrySettings.MaxBackoff)
			r.OutputOpenTelemetry.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputOpenTelemetry.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputOpenTelemetry.TimeoutSec = types.Float64PointerValue(resp.OutputOpenTelemetry.TimeoutSec)
		if resp.OutputOpenTelemetry.TLS == nil {
			r.OutputOpenTelemetry.TLS = nil
		} else {
			r.OutputOpenTelemetry.TLS = &tfTypes.OutputOpenTelemetryTLSSettingsClientSide{}
			r.OutputOpenTelemetry.TLS.CaPath = types.StringPointerValue(resp.OutputOpenTelemetry.TLS.CaPath)
			r.OutputOpenTelemetry.TLS.CertificateName = types.StringPointerValue(resp.OutputOpenTelemetry.TLS.CertificateName)
			r.OutputOpenTelemetry.TLS.CertPath = types.StringPointerValue(resp.OutputOpenTelemetry.TLS.CertPath)
			r.OutputOpenTelemetry.TLS.Disabled = types.BoolPointerValue(resp.OutputOpenTelemetry.TLS.Disabled)
			if resp.OutputOpenTelemetry.TLS.MaxVersion != nil {
				r.OutputOpenTelemetry.TLS.MaxVersion = types.StringValue(string(*resp.OutputOpenTelemetry.TLS.MaxVersion))
			} else {
				r.OutputOpenTelemetry.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputOpenTelemetry.TLS.MinVersion != nil {
				r.OutputOpenTelemetry.TLS.MinVersion = types.StringValue(string(*resp.OutputOpenTelemetry.TLS.MinVersion))
			} else {
				r.OutputOpenTelemetry.TLS.MinVersion = types.StringNull()
			}
			r.OutputOpenTelemetry.TLS.Passphrase = types.StringPointerValue(resp.OutputOpenTelemetry.TLS.Passphrase)
			r.OutputOpenTelemetry.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputOpenTelemetry.TLS.PrivKeyPath)
			r.OutputOpenTelemetry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputOpenTelemetry.TLS.RejectUnauthorized)
		}
		r.OutputOpenTelemetry.Token = types.StringPointerValue(resp.OutputOpenTelemetry.Token)
		r.OutputOpenTelemetry.TokenAttributeName = types.StringPointerValue(resp.OutputOpenTelemetry.TokenAttributeName)
		r.OutputOpenTelemetry.TokenTimeoutSecs = types.Float64PointerValue(resp.OutputOpenTelemetry.TokenTimeoutSecs)
		r.OutputOpenTelemetry.Type = types.StringValue(string(resp.OutputOpenTelemetry.Type))
		r.OutputOpenTelemetry.Username = types.StringPointerValue(resp.OutputOpenTelemetry.Username)
		r.OutputOpenTelemetry.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputOpenTelemetry.UseRoundRobinDNS)
	}
	if resp.OutputPrometheus != nil {
		r.OutputPrometheus = &tfTypes.OutputPrometheus{}
		r.OutputPrometheus.AuthHeaderExpr = types.StringPointerValue(resp.OutputPrometheus.AuthHeaderExpr)
		if resp.OutputPrometheus.AuthType != nil {
			r.OutputPrometheus.AuthType = types.StringValue(string(*resp.OutputPrometheus.AuthType))
		} else {
			r.OutputPrometheus.AuthType = types.StringNull()
		}
		r.OutputPrometheus.Concurrency = types.Float64PointerValue(resp.OutputPrometheus.Concurrency)
		r.OutputPrometheus.CredentialsSecret = types.StringPointerValue(resp.OutputPrometheus.CredentialsSecret)
		r.OutputPrometheus.Description = types.StringPointerValue(resp.OutputPrometheus.Description)
		r.OutputPrometheus.Environment = types.StringPointerValue(resp.OutputPrometheus.Environment)
		r.OutputPrometheus.ExtraHTTPHeaders = []tfTypes.OutputPrometheusExtraHTTPHeaders{}
		if len(r.OutputPrometheus.ExtraHTTPHeaders) > len(resp.OutputPrometheus.ExtraHTTPHeaders) {
			r.OutputPrometheus.ExtraHTTPHeaders = r.OutputPrometheus.ExtraHTTPHeaders[:len(resp.OutputPrometheus.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount20, extraHTTPHeadersItem20 := range resp.OutputPrometheus.ExtraHTTPHeaders {
			var extraHTTPHeaders20 tfTypes.OutputPrometheusExtraHTTPHeaders
			extraHTTPHeaders20.Name = types.StringPointerValue(extraHTTPHeadersItem20.Name)
			extraHTTPHeaders20.Value = types.StringValue(extraHTTPHeadersItem20.Value)
			if extraHTTPHeadersCount20+1 > len(r.OutputPrometheus.ExtraHTTPHeaders) {
				r.OutputPrometheus.ExtraHTTPHeaders = append(r.OutputPrometheus.ExtraHTTPHeaders, extraHTTPHeaders20)
			} else {
				r.OutputPrometheus.ExtraHTTPHeaders[extraHTTPHeadersCount20].Name = extraHTTPHeaders20.Name
				r.OutputPrometheus.ExtraHTTPHeaders[extraHTTPHeadersCount20].Value = extraHTTPHeaders20.Value
			}
		}
		if resp.OutputPrometheus.FailedRequestLoggingMode != nil {
			r.OutputPrometheus.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputPrometheus.FailedRequestLoggingMode))
		} else {
			r.OutputPrometheus.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputPrometheus.FlushPeriodSec = types.Float64PointerValue(resp.OutputPrometheus.FlushPeriodSec)
		r.OutputPrometheus.ID = types.StringPointerValue(resp.OutputPrometheus.ID)
		r.OutputPrometheus.LoginURL = types.StringPointerValue(resp.OutputPrometheus.LoginURL)
		r.OutputPrometheus.MaxPayloadEvents = types.Float64PointerValue(resp.OutputPrometheus.MaxPayloadEvents)
		r.OutputPrometheus.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputPrometheus.MaxPayloadSizeKB)
		r.OutputPrometheus.MetricRenameExpr = types.StringPointerValue(resp.OutputPrometheus.MetricRenameExpr)
		r.OutputPrometheus.MetricsFlushPeriodSec = types.Float64PointerValue(resp.OutputPrometheus.MetricsFlushPeriodSec)
		r.OutputPrometheus.OauthHeaders = []tfTypes.OutputPrometheusOauthHeaders{}
		if len(r.OutputPrometheus.OauthHeaders) > len(resp.OutputPrometheus.OauthHeaders) {
			r.OutputPrometheus.OauthHeaders = r.OutputPrometheus.OauthHeaders[:len(resp.OutputPrometheus.OauthHeaders)]
		}
		for oauthHeadersCount3, oauthHeadersItem3 := range resp.OutputPrometheus.OauthHeaders {
			var oauthHeaders3 tfTypes.OutputPrometheusOauthHeaders
			oauthHeaders3.Name = types.StringValue(oauthHeadersItem3.Name)
			oauthHeaders3.Value = types.StringValue(oauthHeadersItem3.Value)
			if oauthHeadersCount3+1 > len(r.OutputPrometheus.OauthHeaders) {
				r.OutputPrometheus.OauthHeaders = append(r.OutputPrometheus.OauthHeaders, oauthHeaders3)
			} else {
				r.OutputPrometheus.OauthHeaders[oauthHeadersCount3].Name = oauthHeaders3.Name
				r.OutputPrometheus.OauthHeaders[oauthHeadersCount3].Value = oauthHeaders3.Value
			}
		}
		r.OutputPrometheus.OauthParams = []tfTypes.OutputPrometheusOauthParams{}
		if len(r.OutputPrometheus.OauthParams) > len(resp.OutputPrometheus.OauthParams) {
			r.OutputPrometheus.OauthParams = r.OutputPrometheus.OauthParams[:len(resp.OutputPrometheus.OauthParams)]
		}
		for oauthParamsCount3, oauthParamsItem3 := range resp.OutputPrometheus.OauthParams {
			var oauthParams3 tfTypes.OutputPrometheusOauthParams
			oauthParams3.Name = types.StringValue(oauthParamsItem3.Name)
			oauthParams3.Value = types.StringValue(oauthParamsItem3.Value)
			if oauthParamsCount3+1 > len(r.OutputPrometheus.OauthParams) {
				r.OutputPrometheus.OauthParams = append(r.OutputPrometheus.OauthParams, oauthParams3)
			} else {
				r.OutputPrometheus.OauthParams[oauthParamsCount3].Name = oauthParams3.Name
				r.OutputPrometheus.OauthParams[oauthParamsCount3].Value = oauthParams3.Value
			}
		}
		if resp.OutputPrometheus.OnBackpressure != nil {
			r.OutputPrometheus.OnBackpressure = types.StringValue(string(*resp.OutputPrometheus.OnBackpressure))
		} else {
			r.OutputPrometheus.OnBackpressure = types.StringNull()
		}
		r.OutputPrometheus.Password = types.StringPointerValue(resp.OutputPrometheus.Password)
		r.OutputPrometheus.Pipeline = types.StringPointerValue(resp.OutputPrometheus.Pipeline)
		if resp.OutputPrometheus.PqCompress != nil {
			r.OutputPrometheus.PqCompress = types.StringValue(string(*resp.OutputPrometheus.PqCompress))
		} else {
			r.OutputPrometheus.PqCompress = types.StringNull()
		}
		if resp.OutputPrometheus.PqControls == nil {
			r.OutputPrometheus.PqControls = nil
		} else {
			r.OutputPrometheus.PqControls = &tfTypes.OutputPrometheusPqControls{}
		}
		r.OutputPrometheus.PqMaxFileSize = types.StringPointerValue(resp.OutputPrometheus.PqMaxFileSize)
		r.OutputPrometheus.PqMaxSize = types.StringPointerValue(resp.OutputPrometheus.PqMaxSize)
		if resp.OutputPrometheus.PqMode != nil {
			r.OutputPrometheus.PqMode = types.StringValue(string(*resp.OutputPrometheus.PqMode))
		} else {
			r.OutputPrometheus.PqMode = types.StringNull()
		}
		if resp.OutputPrometheus.PqOnBackpressure != nil {
			r.OutputPrometheus.PqOnBackpressure = types.StringValue(string(*resp.OutputPrometheus.PqOnBackpressure))
		} else {
			r.OutputPrometheus.PqOnBackpressure = types.StringNull()
		}
		r.OutputPrometheus.PqPath = types.StringPointerValue(resp.OutputPrometheus.PqPath)
		r.OutputPrometheus.RejectUnauthorized = types.BoolPointerValue(resp.OutputPrometheus.RejectUnauthorized)
		r.OutputPrometheus.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputPrometheus.ResponseHonorRetryAfterHeader)
		r.OutputPrometheus.ResponseRetrySettings = []tfTypes.OutputPrometheusResponseRetrySettings{}
		if len(r.OutputPrometheus.ResponseRetrySettings) > len(resp.OutputPrometheus.ResponseRetrySettings) {
			r.OutputPrometheus.ResponseRetrySettings = r.OutputPrometheus.ResponseRetrySettings[:len(resp.OutputPrometheus.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount21, responseRetrySettingsItem21 := range resp.OutputPrometheus.ResponseRetrySettings {
			var responseRetrySettings21 tfTypes.OutputPrometheusResponseRetrySettings
			responseRetrySettings21.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem21.BackoffRate)
			responseRetrySettings21.HTTPStatus = types.Float64Value(responseRetrySettingsItem21.HTTPStatus)
			responseRetrySettings21.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem21.InitialBackoff)
			responseRetrySettings21.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem21.MaxBackoff)
			if responseRetrySettingsCount21+1 > len(r.OutputPrometheus.ResponseRetrySettings) {
				r.OutputPrometheus.ResponseRetrySettings = append(r.OutputPrometheus.ResponseRetrySettings, responseRetrySettings21)
			} else {
				r.OutputPrometheus.ResponseRetrySettings[responseRetrySettingsCount21].BackoffRate = responseRetrySettings21.BackoffRate
				r.OutputPrometheus.ResponseRetrySettings[responseRetrySettingsCount21].HTTPStatus = responseRetrySettings21.HTTPStatus
				r.OutputPrometheus.ResponseRetrySettings[responseRetrySettingsCount21].InitialBackoff = responseRetrySettings21.InitialBackoff
				r.OutputPrometheus.ResponseRetrySettings[responseRetrySettingsCount21].MaxBackoff = responseRetrySettings21.MaxBackoff
			}
		}
		r.OutputPrometheus.SafeHeaders = make([]types.String, 0, len(resp.OutputPrometheus.SafeHeaders))
		for _, v := range resp.OutputPrometheus.SafeHeaders {
			r.OutputPrometheus.SafeHeaders = append(r.OutputPrometheus.SafeHeaders, types.StringValue(v))
		}
		r.OutputPrometheus.Secret = types.StringPointerValue(resp.OutputPrometheus.Secret)
		r.OutputPrometheus.SecretParamName = types.StringPointerValue(resp.OutputPrometheus.SecretParamName)
		r.OutputPrometheus.SendMetadata = types.BoolPointerValue(resp.OutputPrometheus.SendMetadata)
		r.OutputPrometheus.Streamtags = make([]types.String, 0, len(resp.OutputPrometheus.Streamtags))
		for _, v := range resp.OutputPrometheus.Streamtags {
			r.OutputPrometheus.Streamtags = append(r.OutputPrometheus.Streamtags, types.StringValue(v))
		}
		r.OutputPrometheus.SystemFields = make([]types.String, 0, len(resp.OutputPrometheus.SystemFields))
		for _, v := range resp.OutputPrometheus.SystemFields {
			r.OutputPrometheus.SystemFields = append(r.OutputPrometheus.SystemFields, types.StringValue(v))
		}
		r.OutputPrometheus.TextSecret = types.StringPointerValue(resp.OutputPrometheus.TextSecret)
		if resp.OutputPrometheus.TimeoutRetrySettings == nil {
			r.OutputPrometheus.TimeoutRetrySettings = nil
		} else {
			r.OutputPrometheus.TimeoutRetrySettings = &tfTypes.OutputPrometheusTimeoutRetrySettings{}
			r.OutputPrometheus.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputPrometheus.TimeoutRetrySettings.BackoffRate)
			r.OutputPrometheus.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputPrometheus.TimeoutRetrySettings.InitialBackoff)
			r.OutputPrometheus.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputPrometheus.TimeoutRetrySettings.MaxBackoff)
			r.OutputPrometheus.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputPrometheus.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputPrometheus.TimeoutSec = types.Float64PointerValue(resp.OutputPrometheus.TimeoutSec)
		r.OutputPrometheus.Token = types.StringPointerValue(resp.OutputPrometheus.Token)
		r.OutputPrometheus.TokenAttributeName = types.StringPointerValue(resp.OutputPrometheus.TokenAttributeName)
		r.OutputPrometheus.TokenTimeoutSecs = types.Float64PointerValue(resp.OutputPrometheus.TokenTimeoutSecs)
		r.OutputPrometheus.Type = types.StringValue(string(resp.OutputPrometheus.Type))
		r.OutputPrometheus.URL = types.StringValue(resp.OutputPrometheus.URL)
		r.OutputPrometheus.Username = types.StringPointerValue(resp.OutputPrometheus.Username)
		r.OutputPrometheus.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputPrometheus.UseRoundRobinDNS)
	}
	if resp.OutputRing != nil {
		r.OutputRing = &tfTypes.OutputRing{}
		if resp.OutputRing.Compress != nil {
			r.OutputRing.Compress = types.StringValue(string(*resp.OutputRing.Compress))
		} else {
			r.OutputRing.Compress = types.StringNull()
		}
		r.OutputRing.Description = types.StringPointerValue(resp.OutputRing.Description)
		r.OutputRing.DestPath = types.StringPointerValue(resp.OutputRing.DestPath)
		r.OutputRing.Environment = types.StringPointerValue(resp.OutputRing.Environment)
		if resp.OutputRing.Format != nil {
			r.OutputRing.Format = types.StringValue(string(*resp.OutputRing.Format))
		} else {
			r.OutputRing.Format = types.StringNull()
		}
		r.OutputRing.ID = types.StringValue(resp.OutputRing.ID)
		r.OutputRing.MaxDataSize = types.StringPointerValue(resp.OutputRing.MaxDataSize)
		r.OutputRing.MaxDataTime = types.StringPointerValue(resp.OutputRing.MaxDataTime)
		if resp.OutputRing.OnBackpressure != nil {
			r.OutputRing.OnBackpressure = types.StringValue(string(*resp.OutputRing.OnBackpressure))
		} else {
			r.OutputRing.OnBackpressure = types.StringNull()
		}
		r.OutputRing.PartitionExpr = types.StringPointerValue(resp.OutputRing.PartitionExpr)
		r.OutputRing.Pipeline = types.StringPointerValue(resp.OutputRing.Pipeline)
		r.OutputRing.Streamtags = make([]types.String, 0, len(resp.OutputRing.Streamtags))
		for _, v := range resp.OutputRing.Streamtags {
			r.OutputRing.Streamtags = append(r.OutputRing.Streamtags, types.StringValue(v))
		}
		r.OutputRing.SystemFields = make([]types.String, 0, len(resp.OutputRing.SystemFields))
		for _, v := range resp.OutputRing.SystemFields {
			r.OutputRing.SystemFields = append(r.OutputRing.SystemFields, types.StringValue(v))
		}
		r.OutputRing.Type = types.StringValue(string(resp.OutputRing.Type))
	}
	if resp.OutputRouter != nil {
		r.OutputRouter = &tfTypes.OutputRouter{}
		r.OutputRouter.Description = types.StringPointerValue(resp.OutputRouter.Description)
		r.OutputRouter.Environment = types.StringPointerValue(resp.OutputRouter.Environment)
		r.OutputRouter.ID = types.StringPointerValue(resp.OutputRouter.ID)
		r.OutputRouter.Pipeline = types.StringPointerValue(resp.OutputRouter.Pipeline)
		r.OutputRouter.Rules = []tfTypes.OutputRouterRules{}
		if len(r.OutputRouter.Rules) > len(resp.OutputRouter.Rules) {
			r.OutputRouter.Rules = r.OutputRouter.Rules[:len(resp.OutputRouter.Rules)]
		}
		for rulesCount, rulesItem := range resp.OutputRouter.Rules {
			var rules tfTypes.OutputRouterRules
			rules.Description = types.StringPointerValue(rulesItem.Description)
			rules.Filter = types.StringValue(rulesItem.Filter)
			rules.Final = types.BoolPointerValue(rulesItem.Final)
			rules.Output = types.StringValue(rulesItem.Output)
			if rulesCount+1 > len(r.OutputRouter.Rules) {
				r.OutputRouter.Rules = append(r.OutputRouter.Rules, rules)
			} else {
				r.OutputRouter.Rules[rulesCount].Description = rules.Description
				r.OutputRouter.Rules[rulesCount].Filter = rules.Filter
				r.OutputRouter.Rules[rulesCount].Final = rules.Final
				r.OutputRouter.Rules[rulesCount].Output = rules.Output
			}
		}
		r.OutputRouter.Streamtags = make([]types.String, 0, len(resp.OutputRouter.Streamtags))
		for _, v := range resp.OutputRouter.Streamtags {
			r.OutputRouter.Streamtags = append(r.OutputRouter.Streamtags, types.StringValue(v))
		}
		r.OutputRouter.SystemFields = make([]types.String, 0, len(resp.OutputRouter.SystemFields))
		for _, v := range resp.OutputRouter.SystemFields {
			r.OutputRouter.SystemFields = append(r.OutputRouter.SystemFields, types.StringValue(v))
		}
		r.OutputRouter.Type = types.StringValue(string(resp.OutputRouter.Type))
	}
	if resp.OutputS3 != nil {
		r.OutputS3 = &tfTypes.OutputS3{}
		r.OutputS3.AddIDToStagePath = types.BoolPointerValue(resp.OutputS3.AddIDToStagePath)
		r.OutputS3.AssumeRoleArn = types.StringPointerValue(resp.OutputS3.AssumeRoleArn)
		r.OutputS3.AssumeRoleExternalID = types.StringPointerValue(resp.OutputS3.AssumeRoleExternalID)
		r.OutputS3.AutomaticSchema = types.BoolPointerValue(resp.OutputS3.AutomaticSchema)
		r.OutputS3.AwsAPIKey = types.StringPointerValue(resp.OutputS3.AwsAPIKey)
		if resp.OutputS3.AwsAuthenticationMethod != nil {
			r.OutputS3.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputS3.AwsAuthenticationMethod))
		} else {
			r.OutputS3.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputS3.AwsSecret = types.StringPointerValue(resp.OutputS3.AwsSecret)
		r.OutputS3.AwsSecretKey = types.StringPointerValue(resp.OutputS3.AwsSecretKey)
		r.OutputS3.BaseFileName = types.StringPointerValue(resp.OutputS3.BaseFileName)
		r.OutputS3.Bucket = types.StringValue(resp.OutputS3.Bucket)
		if resp.OutputS3.Compress != nil {
			r.OutputS3.Compress = types.StringValue(string(*resp.OutputS3.Compress))
		} else {
			r.OutputS3.Compress = types.StringNull()
		}
		if resp.OutputS3.CompressionLevel != nil {
			r.OutputS3.CompressionLevel = types.StringValue(string(*resp.OutputS3.CompressionLevel))
		} else {
			r.OutputS3.CompressionLevel = types.StringNull()
		}
		r.OutputS3.DeadletterEnabled = types.BoolPointerValue(resp.OutputS3.DeadletterEnabled)
		r.OutputS3.DeadletterPath = types.StringPointerValue(resp.OutputS3.DeadletterPath)
		r.OutputS3.Description = types.StringPointerValue(resp.OutputS3.Description)
		r.OutputS3.DestPath = types.StringPointerValue(resp.OutputS3.DestPath)
		r.OutputS3.DurationSeconds = types.Float64PointerValue(resp.OutputS3.DurationSeconds)
		r.OutputS3.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputS3.EmptyDirCleanupSec)
		r.OutputS3.EnableAssumeRole = types.BoolPointerValue(resp.OutputS3.EnableAssumeRole)
		r.OutputS3.EnablePageChecksum = types.BoolPointerValue(resp.OutputS3.EnablePageChecksum)
		r.OutputS3.EnableStatistics = types.BoolPointerValue(resp.OutputS3.EnableStatistics)
		r.OutputS3.EnableWritePageIndex = types.BoolPointerValue(resp.OutputS3.EnableWritePageIndex)
		r.OutputS3.Endpoint = types.StringPointerValue(resp.OutputS3.Endpoint)
		r.OutputS3.Environment = types.StringPointerValue(resp.OutputS3.Environment)
		r.OutputS3.FileNameSuffix = types.StringPointerValue(resp.OutputS3.FileNameSuffix)
		if resp.OutputS3.Format != nil {
			r.OutputS3.Format = types.StringValue(string(*resp.OutputS3.Format))
		} else {
			r.OutputS3.Format = types.StringNull()
		}
		r.OutputS3.HeaderLine = types.StringPointerValue(resp.OutputS3.HeaderLine)
		r.OutputS3.ID = types.StringPointerValue(resp.OutputS3.ID)
		r.OutputS3.KeyValueMetadata = []tfTypes.OutputS3KeyValueMetadata{}
		if len(r.OutputS3.KeyValueMetadata) > len(resp.OutputS3.KeyValueMetadata) {
			r.OutputS3.KeyValueMetadata = r.OutputS3.KeyValueMetadata[:len(resp.OutputS3.KeyValueMetadata)]
		}
		for keyValueMetadataCount5, keyValueMetadataItem5 := range resp.OutputS3.KeyValueMetadata {
			var keyValueMetadata5 tfTypes.OutputS3KeyValueMetadata
			keyValueMetadata5.Key = types.StringPointerValue(keyValueMetadataItem5.Key)
			keyValueMetadata5.Value = types.StringValue(keyValueMetadataItem5.Value)
			if keyValueMetadataCount5+1 > len(r.OutputS3.KeyValueMetadata) {
				r.OutputS3.KeyValueMetadata = append(r.OutputS3.KeyValueMetadata, keyValueMetadata5)
			} else {
				r.OutputS3.KeyValueMetadata[keyValueMetadataCount5].Key = keyValueMetadata5.Key
				r.OutputS3.KeyValueMetadata[keyValueMetadataCount5].Value = keyValueMetadata5.Value
			}
		}
		r.OutputS3.KmsKeyID = types.StringPointerValue(resp.OutputS3.KmsKeyID)
		r.OutputS3.MaxClosingFilesToBackpressure = types.Float64PointerValue(resp.OutputS3.MaxClosingFilesToBackpressure)
		r.OutputS3.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputS3.MaxConcurrentFileParts)
		r.OutputS3.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputS3.MaxFileIdleTimeSec)
		r.OutputS3.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputS3.MaxFileOpenTimeSec)
		r.OutputS3.MaxFileSizeMB = types.Float64PointerValue(resp.OutputS3.MaxFileSizeMB)
		r.OutputS3.MaxOpenFiles = types.Float64PointerValue(resp.OutputS3.MaxOpenFiles)
		r.OutputS3.MaxRetryNum = types.Float64PointerValue(resp.OutputS3.MaxRetryNum)
		if resp.OutputS3.ObjectACL != nil {
			r.OutputS3.ObjectACL = types.StringValue(string(*resp.OutputS3.ObjectACL))
		} else {
			r.OutputS3.ObjectACL = types.StringNull()
		}
		if resp.OutputS3.OnBackpressure != nil {
			r.OutputS3.OnBackpressure = types.StringValue(string(*resp.OutputS3.OnBackpressure))
		} else {
			r.OutputS3.OnBackpressure = types.StringNull()
		}
		if resp.OutputS3.OnDiskFullBackpressure != nil {
			r.OutputS3.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputS3.OnDiskFullBackpressure))
		} else {
			r.OutputS3.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputS3.ParquetDataPageVersion != nil {
			r.OutputS3.ParquetDataPageVersion = types.StringValue(string(*resp.OutputS3.ParquetDataPageVersion))
		} else {
			r.OutputS3.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputS3.ParquetPageSize = types.StringPointerValue(resp.OutputS3.ParquetPageSize)
		r.OutputS3.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputS3.ParquetRowGroupLength)
		if resp.OutputS3.ParquetVersion != nil {
			r.OutputS3.ParquetVersion = types.StringValue(string(*resp.OutputS3.ParquetVersion))
		} else {
			r.OutputS3.ParquetVersion = types.StringNull()
		}
		r.OutputS3.PartitionExpr = types.StringPointerValue(resp.OutputS3.PartitionExpr)
		r.OutputS3.Pipeline = types.StringPointerValue(resp.OutputS3.Pipeline)
		r.OutputS3.Region = types.StringPointerValue(resp.OutputS3.Region)
		r.OutputS3.RejectUnauthorized = types.BoolPointerValue(resp.OutputS3.RejectUnauthorized)
		r.OutputS3.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputS3.RemoveEmptyDirs)
		r.OutputS3.ReuseConnections = types.BoolPointerValue(resp.OutputS3.ReuseConnections)
		if resp.OutputS3.ServerSideEncryption != nil {
			r.OutputS3.ServerSideEncryption = types.StringValue(string(*resp.OutputS3.ServerSideEncryption))
		} else {
			r.OutputS3.ServerSideEncryption = types.StringNull()
		}
		r.OutputS3.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputS3.ShouldLogInvalidRows)
		if resp.OutputS3.SignatureVersion != nil {
			r.OutputS3.SignatureVersion = types.StringValue(string(*resp.OutputS3.SignatureVersion))
		} else {
			r.OutputS3.SignatureVersion = types.StringNull()
		}
		r.OutputS3.StagePath = types.StringPointerValue(resp.OutputS3.StagePath)
		if resp.OutputS3.StorageClass != nil {
			r.OutputS3.StorageClass = types.StringValue(string(*resp.OutputS3.StorageClass))
		} else {
			r.OutputS3.StorageClass = types.StringNull()
		}
		r.OutputS3.Streamtags = make([]types.String, 0, len(resp.OutputS3.Streamtags))
		for _, v := range resp.OutputS3.Streamtags {
			r.OutputS3.Streamtags = append(r.OutputS3.Streamtags, types.StringValue(v))
		}
		r.OutputS3.SystemFields = make([]types.String, 0, len(resp.OutputS3.SystemFields))
		for _, v := range resp.OutputS3.SystemFields {
			r.OutputS3.SystemFields = append(r.OutputS3.SystemFields, types.StringValue(v))
		}
		if resp.OutputS3.Type != nil {
			r.OutputS3.Type = types.StringValue(string(*resp.OutputS3.Type))
		} else {
			r.OutputS3.Type = types.StringNull()
		}
		r.OutputS3.VerifyPermissions = types.BoolPointerValue(resp.OutputS3.VerifyPermissions)
		r.OutputS3.WriteHighWaterMark = types.Float64PointerValue(resp.OutputS3.WriteHighWaterMark)
	}
	if resp.OutputSecurityLake != nil {
		r.OutputSecurityLake = &tfTypes.OutputSecurityLake{}
		r.OutputSecurityLake.AccountID = types.StringValue(resp.OutputSecurityLake.AccountID)
		r.OutputSecurityLake.AddIDToStagePath = types.BoolPointerValue(resp.OutputSecurityLake.AddIDToStagePath)
		r.OutputSecurityLake.AssumeRoleArn = types.StringValue(resp.OutputSecurityLake.AssumeRoleArn)
		r.OutputSecurityLake.AssumeRoleExternalID = types.StringPointerValue(resp.OutputSecurityLake.AssumeRoleExternalID)
		r.OutputSecurityLake.AutomaticSchema = types.BoolPointerValue(resp.OutputSecurityLake.AutomaticSchema)
		r.OutputSecurityLake.AwsAPIKey = types.StringPointerValue(resp.OutputSecurityLake.AwsAPIKey)
		if resp.OutputSecurityLake.AwsAuthenticationMethod != nil {
			r.OutputSecurityLake.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputSecurityLake.AwsAuthenticationMethod))
		} else {
			r.OutputSecurityLake.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputSecurityLake.AwsSecret = types.StringPointerValue(resp.OutputSecurityLake.AwsSecret)
		r.OutputSecurityLake.AwsSecretKey = types.StringPointerValue(resp.OutputSecurityLake.AwsSecretKey)
		r.OutputSecurityLake.BaseFileName = types.StringPointerValue(resp.OutputSecurityLake.BaseFileName)
		r.OutputSecurityLake.Bucket = types.StringValue(resp.OutputSecurityLake.Bucket)
		r.OutputSecurityLake.CustomSource = types.StringValue(resp.OutputSecurityLake.CustomSource)
		r.OutputSecurityLake.DeadletterEnabled = types.BoolPointerValue(resp.OutputSecurityLake.DeadletterEnabled)
		r.OutputSecurityLake.DeadletterPath = types.StringPointerValue(resp.OutputSecurityLake.DeadletterPath)
		r.OutputSecurityLake.Description = types.StringPointerValue(resp.OutputSecurityLake.Description)
		r.OutputSecurityLake.DurationSeconds = types.Float64PointerValue(resp.OutputSecurityLake.DurationSeconds)
		r.OutputSecurityLake.EmptyDirCleanupSec = types.Float64PointerValue(resp.OutputSecurityLake.EmptyDirCleanupSec)
		r.OutputSecurityLake.EnableAssumeRole = types.BoolPointerValue(resp.OutputSecurityLake.EnableAssumeRole)
		r.OutputSecurityLake.EnablePageChecksum = types.BoolPointerValue(resp.OutputSecurityLake.EnablePageChecksum)
		r.OutputSecurityLake.EnableStatistics = types.BoolPointerValue(resp.OutputSecurityLake.EnableStatistics)
		r.OutputSecurityLake.EnableWritePageIndex = types.BoolPointerValue(resp.OutputSecurityLake.EnableWritePageIndex)
		r.OutputSecurityLake.Endpoint = types.StringPointerValue(resp.OutputSecurityLake.Endpoint)
		r.OutputSecurityLake.Environment = types.StringPointerValue(resp.OutputSecurityLake.Environment)
		r.OutputSecurityLake.HeaderLine = types.StringPointerValue(resp.OutputSecurityLake.HeaderLine)
		r.OutputSecurityLake.ID = types.StringPointerValue(resp.OutputSecurityLake.ID)
		r.OutputSecurityLake.KeyValueMetadata = []tfTypes.OutputSecurityLakeKeyValueMetadata{}
		if len(r.OutputSecurityLake.KeyValueMetadata) > len(resp.OutputSecurityLake.KeyValueMetadata) {
			r.OutputSecurityLake.KeyValueMetadata = r.OutputSecurityLake.KeyValueMetadata[:len(resp.OutputSecurityLake.KeyValueMetadata)]
		}
		for keyValueMetadataCount6, keyValueMetadataItem6 := range resp.OutputSecurityLake.KeyValueMetadata {
			var keyValueMetadata6 tfTypes.OutputSecurityLakeKeyValueMetadata
			keyValueMetadata6.Key = types.StringPointerValue(keyValueMetadataItem6.Key)
			keyValueMetadata6.Value = types.StringValue(keyValueMetadataItem6.Value)
			if keyValueMetadataCount6+1 > len(r.OutputSecurityLake.KeyValueMetadata) {
				r.OutputSecurityLake.KeyValueMetadata = append(r.OutputSecurityLake.KeyValueMetadata, keyValueMetadata6)
			} else {
				r.OutputSecurityLake.KeyValueMetadata[keyValueMetadataCount6].Key = keyValueMetadata6.Key
				r.OutputSecurityLake.KeyValueMetadata[keyValueMetadataCount6].Value = keyValueMetadata6.Value
			}
		}
		r.OutputSecurityLake.KmsKeyID = types.StringPointerValue(resp.OutputSecurityLake.KmsKeyID)
		r.OutputSecurityLake.MaxClosingFilesToBackpressure = types.Float64PointerValue(resp.OutputSecurityLake.MaxClosingFilesToBackpressure)
		r.OutputSecurityLake.MaxConcurrentFileParts = types.Float64PointerValue(resp.OutputSecurityLake.MaxConcurrentFileParts)
		r.OutputSecurityLake.MaxFileIdleTimeSec = types.Float64PointerValue(resp.OutputSecurityLake.MaxFileIdleTimeSec)
		r.OutputSecurityLake.MaxFileOpenTimeSec = types.Float64PointerValue(resp.OutputSecurityLake.MaxFileOpenTimeSec)
		r.OutputSecurityLake.MaxFileSizeMB = types.Float64PointerValue(resp.OutputSecurityLake.MaxFileSizeMB)
		r.OutputSecurityLake.MaxOpenFiles = types.Float64PointerValue(resp.OutputSecurityLake.MaxOpenFiles)
		r.OutputSecurityLake.MaxRetryNum = types.Float64PointerValue(resp.OutputSecurityLake.MaxRetryNum)
		if resp.OutputSecurityLake.ObjectACL != nil {
			r.OutputSecurityLake.ObjectACL = types.StringValue(string(*resp.OutputSecurityLake.ObjectACL))
		} else {
			r.OutputSecurityLake.ObjectACL = types.StringNull()
		}
		if resp.OutputSecurityLake.OnBackpressure != nil {
			r.OutputSecurityLake.OnBackpressure = types.StringValue(string(*resp.OutputSecurityLake.OnBackpressure))
		} else {
			r.OutputSecurityLake.OnBackpressure = types.StringNull()
		}
		if resp.OutputSecurityLake.OnDiskFullBackpressure != nil {
			r.OutputSecurityLake.OnDiskFullBackpressure = types.StringValue(string(*resp.OutputSecurityLake.OnDiskFullBackpressure))
		} else {
			r.OutputSecurityLake.OnDiskFullBackpressure = types.StringNull()
		}
		if resp.OutputSecurityLake.ParquetDataPageVersion != nil {
			r.OutputSecurityLake.ParquetDataPageVersion = types.StringValue(string(*resp.OutputSecurityLake.ParquetDataPageVersion))
		} else {
			r.OutputSecurityLake.ParquetDataPageVersion = types.StringNull()
		}
		r.OutputSecurityLake.ParquetPageSize = types.StringPointerValue(resp.OutputSecurityLake.ParquetPageSize)
		r.OutputSecurityLake.ParquetRowGroupLength = types.Float64PointerValue(resp.OutputSecurityLake.ParquetRowGroupLength)
		r.OutputSecurityLake.ParquetSchema = types.StringPointerValue(resp.OutputSecurityLake.ParquetSchema)
		if resp.OutputSecurityLake.ParquetVersion != nil {
			r.OutputSecurityLake.ParquetVersion = types.StringValue(string(*resp.OutputSecurityLake.ParquetVersion))
		} else {
			r.OutputSecurityLake.ParquetVersion = types.StringNull()
		}
		r.OutputSecurityLake.Pipeline = types.StringPointerValue(resp.OutputSecurityLake.Pipeline)
		r.OutputSecurityLake.Region = types.StringValue(resp.OutputSecurityLake.Region)
		r.OutputSecurityLake.RejectUnauthorized = types.BoolPointerValue(resp.OutputSecurityLake.RejectUnauthorized)
		r.OutputSecurityLake.RemoveEmptyDirs = types.BoolPointerValue(resp.OutputSecurityLake.RemoveEmptyDirs)
		r.OutputSecurityLake.ReuseConnections = types.BoolPointerValue(resp.OutputSecurityLake.ReuseConnections)
		if resp.OutputSecurityLake.ServerSideEncryption != nil {
			r.OutputSecurityLake.ServerSideEncryption = types.StringValue(string(*resp.OutputSecurityLake.ServerSideEncryption))
		} else {
			r.OutputSecurityLake.ServerSideEncryption = types.StringNull()
		}
		r.OutputSecurityLake.ShouldLogInvalidRows = types.BoolPointerValue(resp.OutputSecurityLake.ShouldLogInvalidRows)
		if resp.OutputSecurityLake.SignatureVersion != nil {
			r.OutputSecurityLake.SignatureVersion = types.StringValue(string(*resp.OutputSecurityLake.SignatureVersion))
		} else {
			r.OutputSecurityLake.SignatureVersion = types.StringNull()
		}
		r.OutputSecurityLake.StagePath = types.StringPointerValue(resp.OutputSecurityLake.StagePath)
		if resp.OutputSecurityLake.StorageClass != nil {
			r.OutputSecurityLake.StorageClass = types.StringValue(string(*resp.OutputSecurityLake.StorageClass))
		} else {
			r.OutputSecurityLake.StorageClass = types.StringNull()
		}
		r.OutputSecurityLake.Streamtags = make([]types.String, 0, len(resp.OutputSecurityLake.Streamtags))
		for _, v := range resp.OutputSecurityLake.Streamtags {
			r.OutputSecurityLake.Streamtags = append(r.OutputSecurityLake.Streamtags, types.StringValue(v))
		}
		r.OutputSecurityLake.SystemFields = make([]types.String, 0, len(resp.OutputSecurityLake.SystemFields))
		for _, v := range resp.OutputSecurityLake.SystemFields {
			r.OutputSecurityLake.SystemFields = append(r.OutputSecurityLake.SystemFields, types.StringValue(v))
		}
		if resp.OutputSecurityLake.Type != nil {
			r.OutputSecurityLake.Type = types.StringValue(string(*resp.OutputSecurityLake.Type))
		} else {
			r.OutputSecurityLake.Type = types.StringNull()
		}
		r.OutputSecurityLake.VerifyPermissions = types.BoolPointerValue(resp.OutputSecurityLake.VerifyPermissions)
		r.OutputSecurityLake.WriteHighWaterMark = types.Float64PointerValue(resp.OutputSecurityLake.WriteHighWaterMark)
	}
	if resp.OutputSentinel != nil {
		r.OutputSentinel = &tfTypes.OutputSentinel{}
		r.OutputSentinel.AdvancedContentType = types.StringPointerValue(resp.OutputSentinel.AdvancedContentType)
		if resp.OutputSentinel.AuthType != nil {
			r.OutputSentinel.AuthType = types.StringValue(string(*resp.OutputSentinel.AuthType))
		} else {
			r.OutputSentinel.AuthType = types.StringNull()
		}
		r.OutputSentinel.ClientID = types.StringValue(resp.OutputSentinel.ClientID)
		r.OutputSentinel.Compress = types.BoolPointerValue(resp.OutputSentinel.Compress)
		r.OutputSentinel.Concurrency = types.Float64PointerValue(resp.OutputSentinel.Concurrency)
		r.OutputSentinel.CustomContentType = types.StringPointerValue(resp.OutputSentinel.CustomContentType)
		r.OutputSentinel.CustomDropWhenNull = types.BoolPointerValue(resp.OutputSentinel.CustomDropWhenNull)
		r.OutputSentinel.CustomEventDelimiter = types.StringPointerValue(resp.OutputSentinel.CustomEventDelimiter)
		r.OutputSentinel.CustomPayloadExpression = types.StringPointerValue(resp.OutputSentinel.CustomPayloadExpression)
		r.OutputSentinel.CustomSourceExpression = types.StringPointerValue(resp.OutputSentinel.CustomSourceExpression)
		r.OutputSentinel.DceEndpoint = types.StringPointerValue(resp.OutputSentinel.DceEndpoint)
		r.OutputSentinel.DcrID = types.StringPointerValue(resp.OutputSentinel.DcrID)
		r.OutputSentinel.Description = types.StringPointerValue(resp.OutputSentinel.Description)
		if resp.OutputSentinel.EndpointURLConfiguration != nil {
			r.OutputSentinel.EndpointURLConfiguration = types.StringValue(string(*resp.OutputSentinel.EndpointURLConfiguration))
		} else {
			r.OutputSentinel.EndpointURLConfiguration = types.StringNull()
		}
		r.OutputSentinel.Environment = types.StringPointerValue(resp.OutputSentinel.Environment)
		r.OutputSentinel.ExtraHTTPHeaders = []tfTypes.OutputSentinelExtraHTTPHeaders{}
		if len(r.OutputSentinel.ExtraHTTPHeaders) > len(resp.OutputSentinel.ExtraHTTPHeaders) {
			r.OutputSentinel.ExtraHTTPHeaders = r.OutputSentinel.ExtraHTTPHeaders[:len(resp.OutputSentinel.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount21, extraHTTPHeadersItem21 := range resp.OutputSentinel.ExtraHTTPHeaders {
			var extraHTTPHeaders21 tfTypes.OutputSentinelExtraHTTPHeaders
			extraHTTPHeaders21.Name = types.StringPointerValue(extraHTTPHeadersItem21.Name)
			extraHTTPHeaders21.Value = types.StringValue(extraHTTPHeadersItem21.Value)
			if extraHTTPHeadersCount21+1 > len(r.OutputSentinel.ExtraHTTPHeaders) {
				r.OutputSentinel.ExtraHTTPHeaders = append(r.OutputSentinel.ExtraHTTPHeaders, extraHTTPHeaders21)
			} else {
				r.OutputSentinel.ExtraHTTPHeaders[extraHTTPHeadersCount21].Name = extraHTTPHeaders21.Name
				r.OutputSentinel.ExtraHTTPHeaders[extraHTTPHeadersCount21].Value = extraHTTPHeaders21.Value
			}
		}
		if resp.OutputSentinel.FailedRequestLoggingMode != nil {
			r.OutputSentinel.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputSentinel.FailedRequestLoggingMode))
		} else {
			r.OutputSentinel.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputSentinel.FlushPeriodSec = types.Float64PointerValue(resp.OutputSentinel.FlushPeriodSec)
		if resp.OutputSentinel.Format != nil {
			r.OutputSentinel.Format = types.StringValue(string(*resp.OutputSentinel.Format))
		} else {
			r.OutputSentinel.Format = types.StringNull()
		}
		r.OutputSentinel.FormatEventCode = types.StringPointerValue(resp.OutputSentinel.FormatEventCode)
		r.OutputSentinel.FormatPayloadCode = types.StringPointerValue(resp.OutputSentinel.FormatPayloadCode)
		r.OutputSentinel.ID = types.StringPointerValue(resp.OutputSentinel.ID)
		r.OutputSentinel.KeepAlive = types.BoolPointerValue(resp.OutputSentinel.KeepAlive)
		r.OutputSentinel.LoginURL = types.StringValue(resp.OutputSentinel.LoginURL)
		r.OutputSentinel.MaxPayloadEvents = types.Float64PointerValue(resp.OutputSentinel.MaxPayloadEvents)
		r.OutputSentinel.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputSentinel.MaxPayloadSizeKB)
		if resp.OutputSentinel.OnBackpressure != nil {
			r.OutputSentinel.OnBackpressure = types.StringValue(string(*resp.OutputSentinel.OnBackpressure))
		} else {
			r.OutputSentinel.OnBackpressure = types.StringNull()
		}
		r.OutputSentinel.Pipeline = types.StringPointerValue(resp.OutputSentinel.Pipeline)
		if resp.OutputSentinel.PqCompress != nil {
			r.OutputSentinel.PqCompress = types.StringValue(string(*resp.OutputSentinel.PqCompress))
		} else {
			r.OutputSentinel.PqCompress = types.StringNull()
		}
		if resp.OutputSentinel.PqControls == nil {
			r.OutputSentinel.PqControls = nil
		} else {
			r.OutputSentinel.PqControls = &tfTypes.OutputSentinelPqControls{}
		}
		r.OutputSentinel.PqMaxFileSize = types.StringPointerValue(resp.OutputSentinel.PqMaxFileSize)
		r.OutputSentinel.PqMaxSize = types.StringPointerValue(resp.OutputSentinel.PqMaxSize)
		if resp.OutputSentinel.PqMode != nil {
			r.OutputSentinel.PqMode = types.StringValue(string(*resp.OutputSentinel.PqMode))
		} else {
			r.OutputSentinel.PqMode = types.StringNull()
		}
		if resp.OutputSentinel.PqOnBackpressure != nil {
			r.OutputSentinel.PqOnBackpressure = types.StringValue(string(*resp.OutputSentinel.PqOnBackpressure))
		} else {
			r.OutputSentinel.PqOnBackpressure = types.StringNull()
		}
		r.OutputSentinel.PqPath = types.StringPointerValue(resp.OutputSentinel.PqPath)
		r.OutputSentinel.RejectUnauthorized = types.BoolPointerValue(resp.OutputSentinel.RejectUnauthorized)
		r.OutputSentinel.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputSentinel.ResponseHonorRetryAfterHeader)
		r.OutputSentinel.ResponseRetrySettings = []tfTypes.OutputSentinelResponseRetrySettings{}
		if len(r.OutputSentinel.ResponseRetrySettings) > len(resp.OutputSentinel.ResponseRetrySettings) {
			r.OutputSentinel.ResponseRetrySettings = r.OutputSentinel.ResponseRetrySettings[:len(resp.OutputSentinel.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount22, responseRetrySettingsItem22 := range resp.OutputSentinel.ResponseRetrySettings {
			var responseRetrySettings22 tfTypes.OutputSentinelResponseRetrySettings
			responseRetrySettings22.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem22.BackoffRate)
			responseRetrySettings22.HTTPStatus = types.Float64Value(responseRetrySettingsItem22.HTTPStatus)
			responseRetrySettings22.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem22.InitialBackoff)
			responseRetrySettings22.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem22.MaxBackoff)
			if responseRetrySettingsCount22+1 > len(r.OutputSentinel.ResponseRetrySettings) {
				r.OutputSentinel.ResponseRetrySettings = append(r.OutputSentinel.ResponseRetrySettings, responseRetrySettings22)
			} else {
				r.OutputSentinel.ResponseRetrySettings[responseRetrySettingsCount22].BackoffRate = responseRetrySettings22.BackoffRate
				r.OutputSentinel.ResponseRetrySettings[responseRetrySettingsCount22].HTTPStatus = responseRetrySettings22.HTTPStatus
				r.OutputSentinel.ResponseRetrySettings[responseRetrySettingsCount22].InitialBackoff = responseRetrySettings22.InitialBackoff
				r.OutputSentinel.ResponseRetrySettings[responseRetrySettingsCount22].MaxBackoff = responseRetrySettings22.MaxBackoff
			}
		}
		r.OutputSentinel.SafeHeaders = make([]types.String, 0, len(resp.OutputSentinel.SafeHeaders))
		for _, v := range resp.OutputSentinel.SafeHeaders {
			r.OutputSentinel.SafeHeaders = append(r.OutputSentinel.SafeHeaders, types.StringValue(v))
		}
		r.OutputSentinel.Scope = types.StringPointerValue(resp.OutputSentinel.Scope)
		r.OutputSentinel.Secret = types.StringValue(resp.OutputSentinel.Secret)
		r.OutputSentinel.StreamName = types.StringPointerValue(resp.OutputSentinel.StreamName)
		r.OutputSentinel.Streamtags = make([]types.String, 0, len(resp.OutputSentinel.Streamtags))
		for _, v := range resp.OutputSentinel.Streamtags {
			r.OutputSentinel.Streamtags = append(r.OutputSentinel.Streamtags, types.StringValue(v))
		}
		r.OutputSentinel.SystemFields = make([]types.String, 0, len(resp.OutputSentinel.SystemFields))
		for _, v := range resp.OutputSentinel.SystemFields {
			r.OutputSentinel.SystemFields = append(r.OutputSentinel.SystemFields, types.StringValue(v))
		}
		if resp.OutputSentinel.TimeoutRetrySettings == nil {
			r.OutputSentinel.TimeoutRetrySettings = nil
		} else {
			r.OutputSentinel.TimeoutRetrySettings = &tfTypes.OutputSentinelTimeoutRetrySettings{}
			r.OutputSentinel.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputSentinel.TimeoutRetrySettings.BackoffRate)
			r.OutputSentinel.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputSentinel.TimeoutRetrySettings.InitialBackoff)
			r.OutputSentinel.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputSentinel.TimeoutRetrySettings.MaxBackoff)
			r.OutputSentinel.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputSentinel.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputSentinel.TimeoutSec = types.Float64PointerValue(resp.OutputSentinel.TimeoutSec)
		r.OutputSentinel.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputSentinel.TotalMemoryLimitKB)
		if resp.OutputSentinel.Type != nil {
			r.OutputSentinel.Type = types.StringValue(string(*resp.OutputSentinel.Type))
		} else {
			r.OutputSentinel.Type = types.StringNull()
		}
		r.OutputSentinel.URL = types.StringPointerValue(resp.OutputSentinel.URL)
		r.OutputSentinel.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputSentinel.UseRoundRobinDNS)
	}
	if resp.OutputServiceNow != nil {
		r.OutputServiceNow = &tfTypes.OutputServiceNow{}
		r.OutputServiceNow.AuthTokenName = types.StringPointerValue(resp.OutputServiceNow.AuthTokenName)
		if resp.OutputServiceNow.Compress != nil {
			r.OutputServiceNow.Compress = types.StringValue(string(*resp.OutputServiceNow.Compress))
		} else {
			r.OutputServiceNow.Compress = types.StringNull()
		}
		r.OutputServiceNow.Concurrency = types.Float64PointerValue(resp.OutputServiceNow.Concurrency)
		r.OutputServiceNow.ConnectionTimeout = types.Float64PointerValue(resp.OutputServiceNow.ConnectionTimeout)
		r.OutputServiceNow.Description = types.StringPointerValue(resp.OutputServiceNow.Description)
		r.OutputServiceNow.Endpoint = types.StringPointerValue(resp.OutputServiceNow.Endpoint)
		r.OutputServiceNow.Environment = types.StringPointerValue(resp.OutputServiceNow.Environment)
		r.OutputServiceNow.ExtraHTTPHeaders = []tfTypes.OutputServiceNowExtraHTTPHeaders{}
		if len(r.OutputServiceNow.ExtraHTTPHeaders) > len(resp.OutputServiceNow.ExtraHTTPHeaders) {
			r.OutputServiceNow.ExtraHTTPHeaders = r.OutputServiceNow.ExtraHTTPHeaders[:len(resp.OutputServiceNow.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount22, extraHTTPHeadersItem22 := range resp.OutputServiceNow.ExtraHTTPHeaders {
			var extraHTTPHeaders22 tfTypes.OutputServiceNowExtraHTTPHeaders
			extraHTTPHeaders22.Name = types.StringPointerValue(extraHTTPHeadersItem22.Name)
			extraHTTPHeaders22.Value = types.StringValue(extraHTTPHeadersItem22.Value)
			if extraHTTPHeadersCount22+1 > len(r.OutputServiceNow.ExtraHTTPHeaders) {
				r.OutputServiceNow.ExtraHTTPHeaders = append(r.OutputServiceNow.ExtraHTTPHeaders, extraHTTPHeaders22)
			} else {
				r.OutputServiceNow.ExtraHTTPHeaders[extraHTTPHeadersCount22].Name = extraHTTPHeaders22.Name
				r.OutputServiceNow.ExtraHTTPHeaders[extraHTTPHeadersCount22].Value = extraHTTPHeaders22.Value
			}
		}
		if resp.OutputServiceNow.FailedRequestLoggingMode != nil {
			r.OutputServiceNow.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputServiceNow.FailedRequestLoggingMode))
		} else {
			r.OutputServiceNow.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputServiceNow.FlushPeriodSec = types.Float64PointerValue(resp.OutputServiceNow.FlushPeriodSec)
		if resp.OutputServiceNow.HTTPCompress != nil {
			r.OutputServiceNow.HTTPCompress = types.StringValue(string(*resp.OutputServiceNow.HTTPCompress))
		} else {
			r.OutputServiceNow.HTTPCompress = types.StringNull()
		}
		r.OutputServiceNow.HTTPLogsEndpointOverride = types.StringPointerValue(resp.OutputServiceNow.HTTPLogsEndpointOverride)
		r.OutputServiceNow.HTTPMetricsEndpointOverride = types.StringPointerValue(resp.OutputServiceNow.HTTPMetricsEndpointOverride)
		r.OutputServiceNow.HTTPTracesEndpointOverride = types.StringPointerValue(resp.OutputServiceNow.HTTPTracesEndpointOverride)
		r.OutputServiceNow.ID = types.StringPointerValue(resp.OutputServiceNow.ID)
		r.OutputServiceNow.KeepAlive = types.BoolPointerValue(resp.OutputServiceNow.KeepAlive)
		r.OutputServiceNow.KeepAliveTime = types.Float64PointerValue(resp.OutputServiceNow.KeepAliveTime)
		r.OutputServiceNow.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputServiceNow.MaxPayloadSizeKB)
		r.OutputServiceNow.Metadata = []tfTypes.OutputServiceNowMetadata{}
		if len(r.OutputServiceNow.Metadata) > len(resp.OutputServiceNow.Metadata) {
			r.OutputServiceNow.Metadata = r.OutputServiceNow.Metadata[:len(resp.OutputServiceNow.Metadata)]
		}
		for metadataCount3, metadataItem3 := range resp.OutputServiceNow.Metadata {
			var metadata3 tfTypes.OutputServiceNowMetadata
			metadata3.Key = types.StringPointerValue(metadataItem3.Key)
			metadata3.Value = types.StringValue(metadataItem3.Value)
			if metadataCount3+1 > len(r.OutputServiceNow.Metadata) {
				r.OutputServiceNow.Metadata = append(r.OutputServiceNow.Metadata, metadata3)
			} else {
				r.OutputServiceNow.Metadata[metadataCount3].Key = metadata3.Key
				r.OutputServiceNow.Metadata[metadataCount3].Value = metadata3.Value
			}
		}
		if resp.OutputServiceNow.OnBackpressure != nil {
			r.OutputServiceNow.OnBackpressure = types.StringValue(string(*resp.OutputServiceNow.OnBackpressure))
		} else {
			r.OutputServiceNow.OnBackpressure = types.StringNull()
		}
		if resp.OutputServiceNow.OtlpVersion != nil {
			r.OutputServiceNow.OtlpVersion = types.StringValue(string(*resp.OutputServiceNow.OtlpVersion))
		} else {
			r.OutputServiceNow.OtlpVersion = types.StringNull()
		}
		r.OutputServiceNow.Pipeline = types.StringPointerValue(resp.OutputServiceNow.Pipeline)
		if resp.OutputServiceNow.PqCompress != nil {
			r.OutputServiceNow.PqCompress = types.StringValue(string(*resp.OutputServiceNow.PqCompress))
		} else {
			r.OutputServiceNow.PqCompress = types.StringNull()
		}
		if resp.OutputServiceNow.PqControls == nil {
			r.OutputServiceNow.PqControls = nil
		} else {
			r.OutputServiceNow.PqControls = &tfTypes.OutputServiceNowPqControls{}
		}
		r.OutputServiceNow.PqMaxFileSize = types.StringPointerValue(resp.OutputServiceNow.PqMaxFileSize)
		r.OutputServiceNow.PqMaxSize = types.StringPointerValue(resp.OutputServiceNow.PqMaxSize)
		if resp.OutputServiceNow.PqMode != nil {
			r.OutputServiceNow.PqMode = types.StringValue(string(*resp.OutputServiceNow.PqMode))
		} else {
			r.OutputServiceNow.PqMode = types.StringNull()
		}
		if resp.OutputServiceNow.PqOnBackpressure != nil {
			r.OutputServiceNow.PqOnBackpressure = types.StringValue(string(*resp.OutputServiceNow.PqOnBackpressure))
		} else {
			r.OutputServiceNow.PqOnBackpressure = types.StringNull()
		}
		r.OutputServiceNow.PqPath = types.StringPointerValue(resp.OutputServiceNow.PqPath)
		if resp.OutputServiceNow.Protocol != nil {
			r.OutputServiceNow.Protocol = types.StringValue(string(*resp.OutputServiceNow.Protocol))
		} else {
			r.OutputServiceNow.Protocol = types.StringNull()
		}
		r.OutputServiceNow.RejectUnauthorized = types.BoolPointerValue(resp.OutputServiceNow.RejectUnauthorized)
		r.OutputServiceNow.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputServiceNow.ResponseHonorRetryAfterHeader)
		r.OutputServiceNow.ResponseRetrySettings = []tfTypes.OutputServiceNowResponseRetrySettings{}
		if len(r.OutputServiceNow.ResponseRetrySettings) > len(resp.OutputServiceNow.ResponseRetrySettings) {
			r.OutputServiceNow.ResponseRetrySettings = r.OutputServiceNow.ResponseRetrySettings[:len(resp.OutputServiceNow.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount23, responseRetrySettingsItem23 := range resp.OutputServiceNow.ResponseRetrySettings {
			var responseRetrySettings23 tfTypes.OutputServiceNowResponseRetrySettings
			responseRetrySettings23.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem23.BackoffRate)
			responseRetrySettings23.HTTPStatus = types.Float64Value(responseRetrySettingsItem23.HTTPStatus)
			responseRetrySettings23.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem23.InitialBackoff)
			responseRetrySettings23.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem23.MaxBackoff)
			if responseRetrySettingsCount23+1 > len(r.OutputServiceNow.ResponseRetrySettings) {
				r.OutputServiceNow.ResponseRetrySettings = append(r.OutputServiceNow.ResponseRetrySettings, responseRetrySettings23)
			} else {
				r.OutputServiceNow.ResponseRetrySettings[responseRetrySettingsCount23].BackoffRate = responseRetrySettings23.BackoffRate
				r.OutputServiceNow.ResponseRetrySettings[responseRetrySettingsCount23].HTTPStatus = responseRetrySettings23.HTTPStatus
				r.OutputServiceNow.ResponseRetrySettings[responseRetrySettingsCount23].InitialBackoff = responseRetrySettings23.InitialBackoff
				r.OutputServiceNow.ResponseRetrySettings[responseRetrySettingsCount23].MaxBackoff = responseRetrySettings23.MaxBackoff
			}
		}
		r.OutputServiceNow.SafeHeaders = make([]types.String, 0, len(resp.OutputServiceNow.SafeHeaders))
		for _, v := range resp.OutputServiceNow.SafeHeaders {
			r.OutputServiceNow.SafeHeaders = append(r.OutputServiceNow.SafeHeaders, types.StringValue(v))
		}
		r.OutputServiceNow.Streamtags = make([]types.String, 0, len(resp.OutputServiceNow.Streamtags))
		for _, v := range resp.OutputServiceNow.Streamtags {
			r.OutputServiceNow.Streamtags = append(r.OutputServiceNow.Streamtags, types.StringValue(v))
		}
		r.OutputServiceNow.SystemFields = make([]types.String, 0, len(resp.OutputServiceNow.SystemFields))
		for _, v := range resp.OutputServiceNow.SystemFields {
			r.OutputServiceNow.SystemFields = append(r.OutputServiceNow.SystemFields, types.StringValue(v))
		}
		if resp.OutputServiceNow.TimeoutRetrySettings == nil {
			r.OutputServiceNow.TimeoutRetrySettings = nil
		} else {
			r.OutputServiceNow.TimeoutRetrySettings = &tfTypes.OutputServiceNowTimeoutRetrySettings{}
			r.OutputServiceNow.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputServiceNow.TimeoutRetrySettings.BackoffRate)
			r.OutputServiceNow.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputServiceNow.TimeoutRetrySettings.InitialBackoff)
			r.OutputServiceNow.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputServiceNow.TimeoutRetrySettings.MaxBackoff)
			r.OutputServiceNow.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputServiceNow.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputServiceNow.TimeoutSec = types.Float64PointerValue(resp.OutputServiceNow.TimeoutSec)
		if resp.OutputServiceNow.TLS == nil {
			r.OutputServiceNow.TLS = nil
		} else {
			r.OutputServiceNow.TLS = &tfTypes.OutputServiceNowTLSSettingsClientSide{}
			r.OutputServiceNow.TLS.CaPath = types.StringPointerValue(resp.OutputServiceNow.TLS.CaPath)
			r.OutputServiceNow.TLS.CertificateName = types.StringPointerValue(resp.OutputServiceNow.TLS.CertificateName)
			r.OutputServiceNow.TLS.CertPath = types.StringPointerValue(resp.OutputServiceNow.TLS.CertPath)
			r.OutputServiceNow.TLS.Disabled = types.BoolPointerValue(resp.OutputServiceNow.TLS.Disabled)
			if resp.OutputServiceNow.TLS.MaxVersion != nil {
				r.OutputServiceNow.TLS.MaxVersion = types.StringValue(string(*resp.OutputServiceNow.TLS.MaxVersion))
			} else {
				r.OutputServiceNow.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputServiceNow.TLS.MinVersion != nil {
				r.OutputServiceNow.TLS.MinVersion = types.StringValue(string(*resp.OutputServiceNow.TLS.MinVersion))
			} else {
				r.OutputServiceNow.TLS.MinVersion = types.StringNull()
			}
			r.OutputServiceNow.TLS.Passphrase = types.StringPointerValue(resp.OutputServiceNow.TLS.Passphrase)
			r.OutputServiceNow.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputServiceNow.TLS.PrivKeyPath)
			r.OutputServiceNow.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputServiceNow.TLS.RejectUnauthorized)
		}
		r.OutputServiceNow.TokenSecret = types.StringValue(resp.OutputServiceNow.TokenSecret)
		if resp.OutputServiceNow.Type != nil {
			r.OutputServiceNow.Type = types.StringValue(string(*resp.OutputServiceNow.Type))
		} else {
			r.OutputServiceNow.Type = types.StringNull()
		}
		r.OutputServiceNow.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputServiceNow.UseRoundRobinDNS)
	}
	if resp.OutputSignalfx != nil {
		r.OutputSignalfx = &tfTypes.OutputSignalfx{}
		if resp.OutputSignalfx.AuthType != nil {
			r.OutputSignalfx.AuthType = types.StringValue(string(*resp.OutputSignalfx.AuthType))
		} else {
			r.OutputSignalfx.AuthType = types.StringNull()
		}
		r.OutputSignalfx.Compress = types.BoolPointerValue(resp.OutputSignalfx.Compress)
		r.OutputSignalfx.Concurrency = types.Float64PointerValue(resp.OutputSignalfx.Concurrency)
		r.OutputSignalfx.Description = types.StringPointerValue(resp.OutputSignalfx.Description)
		r.OutputSignalfx.Environment = types.StringPointerValue(resp.OutputSignalfx.Environment)
		r.OutputSignalfx.ExtraHTTPHeaders = []tfTypes.OutputSignalfxExtraHTTPHeaders{}
		if len(r.OutputSignalfx.ExtraHTTPHeaders) > len(resp.OutputSignalfx.ExtraHTTPHeaders) {
			r.OutputSignalfx.ExtraHTTPHeaders = r.OutputSignalfx.ExtraHTTPHeaders[:len(resp.OutputSignalfx.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount23, extraHTTPHeadersItem23 := range resp.OutputSignalfx.ExtraHTTPHeaders {
			var extraHTTPHeaders23 tfTypes.OutputSignalfxExtraHTTPHeaders
			extraHTTPHeaders23.Name = types.StringPointerValue(extraHTTPHeadersItem23.Name)
			extraHTTPHeaders23.Value = types.StringValue(extraHTTPHeadersItem23.Value)
			if extraHTTPHeadersCount23+1 > len(r.OutputSignalfx.ExtraHTTPHeaders) {
				r.OutputSignalfx.ExtraHTTPHeaders = append(r.OutputSignalfx.ExtraHTTPHeaders, extraHTTPHeaders23)
			} else {
				r.OutputSignalfx.ExtraHTTPHeaders[extraHTTPHeadersCount23].Name = extraHTTPHeaders23.Name
				r.OutputSignalfx.ExtraHTTPHeaders[extraHTTPHeadersCount23].Value = extraHTTPHeaders23.Value
			}
		}
		if resp.OutputSignalfx.FailedRequestLoggingMode != nil {
			r.OutputSignalfx.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputSignalfx.FailedRequestLoggingMode))
		} else {
			r.OutputSignalfx.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputSignalfx.FlushPeriodSec = types.Float64PointerValue(resp.OutputSignalfx.FlushPeriodSec)
		r.OutputSignalfx.ID = types.StringPointerValue(resp.OutputSignalfx.ID)
		r.OutputSignalfx.MaxPayloadEvents = types.Float64PointerValue(resp.OutputSignalfx.MaxPayloadEvents)
		r.OutputSignalfx.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputSignalfx.MaxPayloadSizeKB)
		if resp.OutputSignalfx.OnBackpressure != nil {
			r.OutputSignalfx.OnBackpressure = types.StringValue(string(*resp.OutputSignalfx.OnBackpressure))
		} else {
			r.OutputSignalfx.OnBackpressure = types.StringNull()
		}
		r.OutputSignalfx.Pipeline = types.StringPointerValue(resp.OutputSignalfx.Pipeline)
		if resp.OutputSignalfx.PqCompress != nil {
			r.OutputSignalfx.PqCompress = types.StringValue(string(*resp.OutputSignalfx.PqCompress))
		} else {
			r.OutputSignalfx.PqCompress = types.StringNull()
		}
		if resp.OutputSignalfx.PqControls == nil {
			r.OutputSignalfx.PqControls = nil
		} else {
			r.OutputSignalfx.PqControls = &tfTypes.OutputSignalfxPqControls{}
		}
		r.OutputSignalfx.PqMaxFileSize = types.StringPointerValue(resp.OutputSignalfx.PqMaxFileSize)
		r.OutputSignalfx.PqMaxSize = types.StringPointerValue(resp.OutputSignalfx.PqMaxSize)
		if resp.OutputSignalfx.PqMode != nil {
			r.OutputSignalfx.PqMode = types.StringValue(string(*resp.OutputSignalfx.PqMode))
		} else {
			r.OutputSignalfx.PqMode = types.StringNull()
		}
		if resp.OutputSignalfx.PqOnBackpressure != nil {
			r.OutputSignalfx.PqOnBackpressure = types.StringValue(string(*resp.OutputSignalfx.PqOnBackpressure))
		} else {
			r.OutputSignalfx.PqOnBackpressure = types.StringNull()
		}
		r.OutputSignalfx.PqPath = types.StringPointerValue(resp.OutputSignalfx.PqPath)
		r.OutputSignalfx.Realm = types.StringPointerValue(resp.OutputSignalfx.Realm)
		r.OutputSignalfx.RejectUnauthorized = types.BoolPointerValue(resp.OutputSignalfx.RejectUnauthorized)
		r.OutputSignalfx.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputSignalfx.ResponseHonorRetryAfterHeader)
		r.OutputSignalfx.ResponseRetrySettings = []tfTypes.OutputSignalfxResponseRetrySettings{}
		if len(r.OutputSignalfx.ResponseRetrySettings) > len(resp.OutputSignalfx.ResponseRetrySettings) {
			r.OutputSignalfx.ResponseRetrySettings = r.OutputSignalfx.ResponseRetrySettings[:len(resp.OutputSignalfx.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount24, responseRetrySettingsItem24 := range resp.OutputSignalfx.ResponseRetrySettings {
			var responseRetrySettings24 tfTypes.OutputSignalfxResponseRetrySettings
			responseRetrySettings24.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem24.BackoffRate)
			responseRetrySettings24.HTTPStatus = types.Float64Value(responseRetrySettingsItem24.HTTPStatus)
			responseRetrySettings24.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem24.InitialBackoff)
			responseRetrySettings24.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem24.MaxBackoff)
			if responseRetrySettingsCount24+1 > len(r.OutputSignalfx.ResponseRetrySettings) {
				r.OutputSignalfx.ResponseRetrySettings = append(r.OutputSignalfx.ResponseRetrySettings, responseRetrySettings24)
			} else {
				r.OutputSignalfx.ResponseRetrySettings[responseRetrySettingsCount24].BackoffRate = responseRetrySettings24.BackoffRate
				r.OutputSignalfx.ResponseRetrySettings[responseRetrySettingsCount24].HTTPStatus = responseRetrySettings24.HTTPStatus
				r.OutputSignalfx.ResponseRetrySettings[responseRetrySettingsCount24].InitialBackoff = responseRetrySettings24.InitialBackoff
				r.OutputSignalfx.ResponseRetrySettings[responseRetrySettingsCount24].MaxBackoff = responseRetrySettings24.MaxBackoff
			}
		}
		r.OutputSignalfx.SafeHeaders = make([]types.String, 0, len(resp.OutputSignalfx.SafeHeaders))
		for _, v := range resp.OutputSignalfx.SafeHeaders {
			r.OutputSignalfx.SafeHeaders = append(r.OutputSignalfx.SafeHeaders, types.StringValue(v))
		}
		r.OutputSignalfx.Streamtags = make([]types.String, 0, len(resp.OutputSignalfx.Streamtags))
		for _, v := range resp.OutputSignalfx.Streamtags {
			r.OutputSignalfx.Streamtags = append(r.OutputSignalfx.Streamtags, types.StringValue(v))
		}
		r.OutputSignalfx.SystemFields = make([]types.String, 0, len(resp.OutputSignalfx.SystemFields))
		for _, v := range resp.OutputSignalfx.SystemFields {
			r.OutputSignalfx.SystemFields = append(r.OutputSignalfx.SystemFields, types.StringValue(v))
		}
		r.OutputSignalfx.TextSecret = types.StringPointerValue(resp.OutputSignalfx.TextSecret)
		if resp.OutputSignalfx.TimeoutRetrySettings == nil {
			r.OutputSignalfx.TimeoutRetrySettings = nil
		} else {
			r.OutputSignalfx.TimeoutRetrySettings = &tfTypes.OutputSignalfxTimeoutRetrySettings{}
			r.OutputSignalfx.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputSignalfx.TimeoutRetrySettings.BackoffRate)
			r.OutputSignalfx.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputSignalfx.TimeoutRetrySettings.InitialBackoff)
			r.OutputSignalfx.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputSignalfx.TimeoutRetrySettings.MaxBackoff)
			r.OutputSignalfx.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputSignalfx.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputSignalfx.TimeoutSec = types.Float64PointerValue(resp.OutputSignalfx.TimeoutSec)
		r.OutputSignalfx.Token = types.StringPointerValue(resp.OutputSignalfx.Token)
		r.OutputSignalfx.Type = types.StringValue(string(resp.OutputSignalfx.Type))
		r.OutputSignalfx.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputSignalfx.UseRoundRobinDNS)
	}
	if resp.OutputSnmp != nil {
		r.OutputSnmp = &tfTypes.OutputSnmp{}
		r.OutputSnmp.Description = types.StringPointerValue(resp.OutputSnmp.Description)
		r.OutputSnmp.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputSnmp.DNSResolvePeriodSec)
		r.OutputSnmp.Environment = types.StringPointerValue(resp.OutputSnmp.Environment)
		r.OutputSnmp.Hosts = []tfTypes.OutputSnmpHosts{}
		if len(r.OutputSnmp.Hosts) > len(resp.OutputSnmp.Hosts) {
			r.OutputSnmp.Hosts = r.OutputSnmp.Hosts[:len(resp.OutputSnmp.Hosts)]
		}
		for hostsCount2, hostsItem2 := range resp.OutputSnmp.Hosts {
			var hosts2 tfTypes.OutputSnmpHosts
			hosts2.Host = types.StringValue(hostsItem2.Host)
			hosts2.Port = types.Float64PointerValue(hostsItem2.Port)
			if hostsCount2+1 > len(r.OutputSnmp.Hosts) {
				r.OutputSnmp.Hosts = append(r.OutputSnmp.Hosts, hosts2)
			} else {
				r.OutputSnmp.Hosts[hostsCount2].Host = hosts2.Host
				r.OutputSnmp.Hosts[hostsCount2].Port = hosts2.Port
			}
		}
		r.OutputSnmp.ID = types.StringPointerValue(resp.OutputSnmp.ID)
		r.OutputSnmp.Pipeline = types.StringPointerValue(resp.OutputSnmp.Pipeline)
		r.OutputSnmp.Streamtags = make([]types.String, 0, len(resp.OutputSnmp.Streamtags))
		for _, v := range resp.OutputSnmp.Streamtags {
			r.OutputSnmp.Streamtags = append(r.OutputSnmp.Streamtags, types.StringValue(v))
		}
		r.OutputSnmp.SystemFields = make([]types.String, 0, len(resp.OutputSnmp.SystemFields))
		for _, v := range resp.OutputSnmp.SystemFields {
			r.OutputSnmp.SystemFields = append(r.OutputSnmp.SystemFields, types.StringValue(v))
		}
		r.OutputSnmp.Type = types.StringValue(string(resp.OutputSnmp.Type))
	}
	if resp.OutputSns != nil {
		r.OutputSns = &tfTypes.OutputSns{}
		r.OutputSns.AssumeRoleArn = types.StringPointerValue(resp.OutputSns.AssumeRoleArn)
		r.OutputSns.AssumeRoleExternalID = types.StringPointerValue(resp.OutputSns.AssumeRoleExternalID)
		r.OutputSns.AwsAPIKey = types.StringPointerValue(resp.OutputSns.AwsAPIKey)
		if resp.OutputSns.AwsAuthenticationMethod != nil {
			r.OutputSns.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputSns.AwsAuthenticationMethod))
		} else {
			r.OutputSns.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputSns.AwsSecret = types.StringPointerValue(resp.OutputSns.AwsSecret)
		r.OutputSns.AwsSecretKey = types.StringPointerValue(resp.OutputSns.AwsSecretKey)
		r.OutputSns.Description = types.StringPointerValue(resp.OutputSns.Description)
		r.OutputSns.DurationSeconds = types.Float64PointerValue(resp.OutputSns.DurationSeconds)
		r.OutputSns.EnableAssumeRole = types.BoolPointerValue(resp.OutputSns.EnableAssumeRole)
		r.OutputSns.Endpoint = types.StringPointerValue(resp.OutputSns.Endpoint)
		r.OutputSns.Environment = types.StringPointerValue(resp.OutputSns.Environment)
		r.OutputSns.ID = types.StringPointerValue(resp.OutputSns.ID)
		r.OutputSns.MaxRetries = types.Float64PointerValue(resp.OutputSns.MaxRetries)
		r.OutputSns.MessageGroupID = types.StringValue(resp.OutputSns.MessageGroupID)
		if resp.OutputSns.OnBackpressure != nil {
			r.OutputSns.OnBackpressure = types.StringValue(string(*resp.OutputSns.OnBackpressure))
		} else {
			r.OutputSns.OnBackpressure = types.StringNull()
		}
		r.OutputSns.Pipeline = types.StringPointerValue(resp.OutputSns.Pipeline)
		if resp.OutputSns.PqCompress != nil {
			r.OutputSns.PqCompress = types.StringValue(string(*resp.OutputSns.PqCompress))
		} else {
			r.OutputSns.PqCompress = types.StringNull()
		}
		if resp.OutputSns.PqControls == nil {
			r.OutputSns.PqControls = nil
		} else {
			r.OutputSns.PqControls = &tfTypes.OutputSnsPqControls{}
		}
		r.OutputSns.PqMaxFileSize = types.StringPointerValue(resp.OutputSns.PqMaxFileSize)
		r.OutputSns.PqMaxSize = types.StringPointerValue(resp.OutputSns.PqMaxSize)
		if resp.OutputSns.PqMode != nil {
			r.OutputSns.PqMode = types.StringValue(string(*resp.OutputSns.PqMode))
		} else {
			r.OutputSns.PqMode = types.StringNull()
		}
		if resp.OutputSns.PqOnBackpressure != nil {
			r.OutputSns.PqOnBackpressure = types.StringValue(string(*resp.OutputSns.PqOnBackpressure))
		} else {
			r.OutputSns.PqOnBackpressure = types.StringNull()
		}
		r.OutputSns.PqPath = types.StringPointerValue(resp.OutputSns.PqPath)
		r.OutputSns.Region = types.StringPointerValue(resp.OutputSns.Region)
		r.OutputSns.RejectUnauthorized = types.BoolPointerValue(resp.OutputSns.RejectUnauthorized)
		r.OutputSns.ReuseConnections = types.BoolPointerValue(resp.OutputSns.ReuseConnections)
		if resp.OutputSns.SignatureVersion != nil {
			r.OutputSns.SignatureVersion = types.StringValue(string(*resp.OutputSns.SignatureVersion))
		} else {
			r.OutputSns.SignatureVersion = types.StringNull()
		}
		r.OutputSns.Streamtags = make([]types.String, 0, len(resp.OutputSns.Streamtags))
		for _, v := range resp.OutputSns.Streamtags {
			r.OutputSns.Streamtags = append(r.OutputSns.Streamtags, types.StringValue(v))
		}
		r.OutputSns.SystemFields = make([]types.String, 0, len(resp.OutputSns.SystemFields))
		for _, v := range resp.OutputSns.SystemFields {
			r.OutputSns.SystemFields = append(r.OutputSns.SystemFields, types.StringValue(v))
		}
		r.OutputSns.TopicArn = types.StringValue(resp.OutputSns.TopicArn)
		if resp.OutputSns.Type != nil {
			r.OutputSns.Type = types.StringValue(string(*resp.OutputSns.Type))
		} else {
			r.OutputSns.Type = types.StringNull()
		}
	}
	if resp.OutputSplunk != nil {
		r.OutputSplunk = &tfTypes.OutputSplunk{}
		r.OutputSplunk.AuthToken = types.StringPointerValue(resp.OutputSplunk.AuthToken)
		if resp.OutputSplunk.AuthType != nil {
			r.OutputSplunk.AuthType = types.StringValue(string(*resp.OutputSplunk.AuthType))
		} else {
			r.OutputSplunk.AuthType = types.StringNull()
		}
		if resp.OutputSplunk.Compress != nil {
			r.OutputSplunk.Compress = types.StringValue(string(*resp.OutputSplunk.Compress))
		} else {
			r.OutputSplunk.Compress = types.StringNull()
		}
		r.OutputSplunk.ConnectionTimeout = types.Float64PointerValue(resp.OutputSplunk.ConnectionTimeout)
		r.OutputSplunk.Description = types.StringPointerValue(resp.OutputSplunk.Description)
		r.OutputSplunk.EnableACK = types.BoolPointerValue(resp.OutputSplunk.EnableACK)
		r.OutputSplunk.EnableMultiMetrics = types.BoolPointerValue(resp.OutputSplunk.EnableMultiMetrics)
		r.OutputSplunk.Environment = types.StringPointerValue(resp.OutputSplunk.Environment)
		r.OutputSplunk.Host = types.StringValue(resp.OutputSplunk.Host)
		r.OutputSplunk.ID = types.StringPointerValue(resp.OutputSplunk.ID)
		r.OutputSplunk.LogFailedRequests = types.BoolPointerValue(resp.OutputSplunk.LogFailedRequests)
		r.OutputSplunk.MaxFailedHealthChecks = types.Float64PointerValue(resp.OutputSplunk.MaxFailedHealthChecks)
		if resp.OutputSplunk.MaxS2Sversion != nil {
			r.OutputSplunk.MaxS2Sversion = types.StringValue(string(*resp.OutputSplunk.MaxS2Sversion))
		} else {
			r.OutputSplunk.MaxS2Sversion = types.StringNull()
		}
		if resp.OutputSplunk.NestedFields != nil {
			r.OutputSplunk.NestedFields = types.StringValue(string(*resp.OutputSplunk.NestedFields))
		} else {
			r.OutputSplunk.NestedFields = types.StringNull()
		}
		if resp.OutputSplunk.OnBackpressure != nil {
			r.OutputSplunk.OnBackpressure = types.StringValue(string(*resp.OutputSplunk.OnBackpressure))
		} else {
			r.OutputSplunk.OnBackpressure = types.StringNull()
		}
		r.OutputSplunk.Pipeline = types.StringPointerValue(resp.OutputSplunk.Pipeline)
		r.OutputSplunk.Port = types.Float64PointerValue(resp.OutputSplunk.Port)
		if resp.OutputSplunk.PqCompress != nil {
			r.OutputSplunk.PqCompress = types.StringValue(string(*resp.OutputSplunk.PqCompress))
		} else {
			r.OutputSplunk.PqCompress = types.StringNull()
		}
		if resp.OutputSplunk.PqControls == nil {
			r.OutputSplunk.PqControls = nil
		} else {
			r.OutputSplunk.PqControls = &tfTypes.OutputSplunkPqControls{}
		}
		r.OutputSplunk.PqMaxFileSize = types.StringPointerValue(resp.OutputSplunk.PqMaxFileSize)
		r.OutputSplunk.PqMaxSize = types.StringPointerValue(resp.OutputSplunk.PqMaxSize)
		if resp.OutputSplunk.PqMode != nil {
			r.OutputSplunk.PqMode = types.StringValue(string(*resp.OutputSplunk.PqMode))
		} else {
			r.OutputSplunk.PqMode = types.StringNull()
		}
		if resp.OutputSplunk.PqOnBackpressure != nil {
			r.OutputSplunk.PqOnBackpressure = types.StringValue(string(*resp.OutputSplunk.PqOnBackpressure))
		} else {
			r.OutputSplunk.PqOnBackpressure = types.StringNull()
		}
		r.OutputSplunk.PqPath = types.StringPointerValue(resp.OutputSplunk.PqPath)
		r.OutputSplunk.Streamtags = make([]types.String, 0, len(resp.OutputSplunk.Streamtags))
		for _, v := range resp.OutputSplunk.Streamtags {
			r.OutputSplunk.Streamtags = append(r.OutputSplunk.Streamtags, types.StringValue(v))
		}
		r.OutputSplunk.SystemFields = make([]types.String, 0, len(resp.OutputSplunk.SystemFields))
		for _, v := range resp.OutputSplunk.SystemFields {
			r.OutputSplunk.SystemFields = append(r.OutputSplunk.SystemFields, types.StringValue(v))
		}
		r.OutputSplunk.TextSecret = types.StringPointerValue(resp.OutputSplunk.TextSecret)
		r.OutputSplunk.ThrottleRatePerSec = types.StringPointerValue(resp.OutputSplunk.ThrottleRatePerSec)
		if resp.OutputSplunk.TLS == nil {
			r.OutputSplunk.TLS = nil
		} else {
			r.OutputSplunk.TLS = &tfTypes.OutputSplunkTLSSettingsClientSide{}
			r.OutputSplunk.TLS.CaPath = types.StringPointerValue(resp.OutputSplunk.TLS.CaPath)
			r.OutputSplunk.TLS.CertificateName = types.StringPointerValue(resp.OutputSplunk.TLS.CertificateName)
			r.OutputSplunk.TLS.CertPath = types.StringPointerValue(resp.OutputSplunk.TLS.CertPath)
			r.OutputSplunk.TLS.Disabled = types.BoolPointerValue(resp.OutputSplunk.TLS.Disabled)
			if resp.OutputSplunk.TLS.MaxVersion != nil {
				r.OutputSplunk.TLS.MaxVersion = types.StringValue(string(*resp.OutputSplunk.TLS.MaxVersion))
			} else {
				r.OutputSplunk.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputSplunk.TLS.MinVersion != nil {
				r.OutputSplunk.TLS.MinVersion = types.StringValue(string(*resp.OutputSplunk.TLS.MinVersion))
			} else {
				r.OutputSplunk.TLS.MinVersion = types.StringNull()
			}
			r.OutputSplunk.TLS.Passphrase = types.StringPointerValue(resp.OutputSplunk.TLS.Passphrase)
			r.OutputSplunk.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputSplunk.TLS.PrivKeyPath)
			r.OutputSplunk.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputSplunk.TLS.RejectUnauthorized)
			r.OutputSplunk.TLS.Servername = types.StringPointerValue(resp.OutputSplunk.TLS.Servername)
		}
		if resp.OutputSplunk.Type != nil {
			r.OutputSplunk.Type = types.StringValue(string(*resp.OutputSplunk.Type))
		} else {
			r.OutputSplunk.Type = types.StringNull()
		}
		r.OutputSplunk.WriteTimeout = types.Float64PointerValue(resp.OutputSplunk.WriteTimeout)
	}
	if resp.OutputSplunkHec != nil {
		r.OutputSplunkHec = &tfTypes.OutputSplunkHec{}
		if resp.OutputSplunkHec.AuthType != nil {
			r.OutputSplunkHec.AuthType = types.StringValue(string(*resp.OutputSplunkHec.AuthType))
		} else {
			r.OutputSplunkHec.AuthType = types.StringNull()
		}
		r.OutputSplunkHec.Compress = types.BoolPointerValue(resp.OutputSplunkHec.Compress)
		r.OutputSplunkHec.Concurrency = types.Float64PointerValue(resp.OutputSplunkHec.Concurrency)
		r.OutputSplunkHec.Description = types.StringPointerValue(resp.OutputSplunkHec.Description)
		r.OutputSplunkHec.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputSplunkHec.DNSResolvePeriodSec)
		r.OutputSplunkHec.EnableMultiMetrics = types.BoolPointerValue(resp.OutputSplunkHec.EnableMultiMetrics)
		r.OutputSplunkHec.Environment = types.StringPointerValue(resp.OutputSplunkHec.Environment)
		r.OutputSplunkHec.ExcludeSelf = types.BoolPointerValue(resp.OutputSplunkHec.ExcludeSelf)
		r.OutputSplunkHec.ExtraHTTPHeaders = []tfTypes.OutputSplunkHecExtraHTTPHeaders{}
		if len(r.OutputSplunkHec.ExtraHTTPHeaders) > len(resp.OutputSplunkHec.ExtraHTTPHeaders) {
			r.OutputSplunkHec.ExtraHTTPHeaders = r.OutputSplunkHec.ExtraHTTPHeaders[:len(resp.OutputSplunkHec.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount24, extraHTTPHeadersItem24 := range resp.OutputSplunkHec.ExtraHTTPHeaders {
			var extraHTTPHeaders24 tfTypes.OutputSplunkHecExtraHTTPHeaders
			extraHTTPHeaders24.Name = types.StringPointerValue(extraHTTPHeadersItem24.Name)
			extraHTTPHeaders24.Value = types.StringValue(extraHTTPHeadersItem24.Value)
			if extraHTTPHeadersCount24+1 > len(r.OutputSplunkHec.ExtraHTTPHeaders) {
				r.OutputSplunkHec.ExtraHTTPHeaders = append(r.OutputSplunkHec.ExtraHTTPHeaders, extraHTTPHeaders24)
			} else {
				r.OutputSplunkHec.ExtraHTTPHeaders[extraHTTPHeadersCount24].Name = extraHTTPHeaders24.Name
				r.OutputSplunkHec.ExtraHTTPHeaders[extraHTTPHeadersCount24].Value = extraHTTPHeaders24.Value
			}
		}
		if resp.OutputSplunkHec.FailedRequestLoggingMode != nil {
			r.OutputSplunkHec.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputSplunkHec.FailedRequestLoggingMode))
		} else {
			r.OutputSplunkHec.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputSplunkHec.FlushPeriodSec = types.Float64PointerValue(resp.OutputSplunkHec.FlushPeriodSec)
		r.OutputSplunkHec.ID = types.StringValue(resp.OutputSplunkHec.ID)
		r.OutputSplunkHec.LoadBalanced = types.BoolPointerValue(resp.OutputSplunkHec.LoadBalanced)
		r.OutputSplunkHec.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputSplunkHec.LoadBalanceStatsPeriodSec)
		r.OutputSplunkHec.MaxPayloadEvents = types.Float64PointerValue(resp.OutputSplunkHec.MaxPayloadEvents)
		r.OutputSplunkHec.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputSplunkHec.MaxPayloadSizeKB)
		r.OutputSplunkHec.NextQueue = types.StringPointerValue(resp.OutputSplunkHec.NextQueue)
		if resp.OutputSplunkHec.OnBackpressure != nil {
			r.OutputSplunkHec.OnBackpressure = types.StringValue(string(*resp.OutputSplunkHec.OnBackpressure))
		} else {
			r.OutputSplunkHec.OnBackpressure = types.StringNull()
		}
		r.OutputSplunkHec.Pipeline = types.StringPointerValue(resp.OutputSplunkHec.Pipeline)
		if resp.OutputSplunkHec.PqCompress != nil {
			r.OutputSplunkHec.PqCompress = types.StringValue(string(*resp.OutputSplunkHec.PqCompress))
		} else {
			r.OutputSplunkHec.PqCompress = types.StringNull()
		}
		if resp.OutputSplunkHec.PqControls == nil {
			r.OutputSplunkHec.PqControls = nil
		} else {
			r.OutputSplunkHec.PqControls = &tfTypes.OutputSplunkHecPqControls{}
		}
		r.OutputSplunkHec.PqMaxFileSize = types.StringPointerValue(resp.OutputSplunkHec.PqMaxFileSize)
		r.OutputSplunkHec.PqMaxSize = types.StringPointerValue(resp.OutputSplunkHec.PqMaxSize)
		if resp.OutputSplunkHec.PqMode != nil {
			r.OutputSplunkHec.PqMode = types.StringValue(string(*resp.OutputSplunkHec.PqMode))
		} else {
			r.OutputSplunkHec.PqMode = types.StringNull()
		}
		if resp.OutputSplunkHec.PqOnBackpressure != nil {
			r.OutputSplunkHec.PqOnBackpressure = types.StringValue(string(*resp.OutputSplunkHec.PqOnBackpressure))
		} else {
			r.OutputSplunkHec.PqOnBackpressure = types.StringNull()
		}
		r.OutputSplunkHec.PqPath = types.StringPointerValue(resp.OutputSplunkHec.PqPath)
		r.OutputSplunkHec.RejectUnauthorized = types.BoolPointerValue(resp.OutputSplunkHec.RejectUnauthorized)
		r.OutputSplunkHec.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputSplunkHec.ResponseHonorRetryAfterHeader)
		r.OutputSplunkHec.ResponseRetrySettings = []tfTypes.OutputSplunkHecResponseRetrySettings{}
		if len(r.OutputSplunkHec.ResponseRetrySettings) > len(resp.OutputSplunkHec.ResponseRetrySettings) {
			r.OutputSplunkHec.ResponseRetrySettings = r.OutputSplunkHec.ResponseRetrySettings[:len(resp.OutputSplunkHec.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount25, responseRetrySettingsItem25 := range resp.OutputSplunkHec.ResponseRetrySettings {
			var responseRetrySettings25 tfTypes.OutputSplunkHecResponseRetrySettings
			responseRetrySettings25.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem25.BackoffRate)
			responseRetrySettings25.HTTPStatus = types.Float64Value(responseRetrySettingsItem25.HTTPStatus)
			responseRetrySettings25.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem25.InitialBackoff)
			responseRetrySettings25.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem25.MaxBackoff)
			if responseRetrySettingsCount25+1 > len(r.OutputSplunkHec.ResponseRetrySettings) {
				r.OutputSplunkHec.ResponseRetrySettings = append(r.OutputSplunkHec.ResponseRetrySettings, responseRetrySettings25)
			} else {
				r.OutputSplunkHec.ResponseRetrySettings[responseRetrySettingsCount25].BackoffRate = responseRetrySettings25.BackoffRate
				r.OutputSplunkHec.ResponseRetrySettings[responseRetrySettingsCount25].HTTPStatus = responseRetrySettings25.HTTPStatus
				r.OutputSplunkHec.ResponseRetrySettings[responseRetrySettingsCount25].InitialBackoff = responseRetrySettings25.InitialBackoff
				r.OutputSplunkHec.ResponseRetrySettings[responseRetrySettingsCount25].MaxBackoff = responseRetrySettings25.MaxBackoff
			}
		}
		r.OutputSplunkHec.SafeHeaders = make([]types.String, 0, len(resp.OutputSplunkHec.SafeHeaders))
		for _, v := range resp.OutputSplunkHec.SafeHeaders {
			r.OutputSplunkHec.SafeHeaders = append(r.OutputSplunkHec.SafeHeaders, types.StringValue(v))
		}
		r.OutputSplunkHec.Streamtags = make([]types.String, 0, len(resp.OutputSplunkHec.Streamtags))
		for _, v := range resp.OutputSplunkHec.Streamtags {
			r.OutputSplunkHec.Streamtags = append(r.OutputSplunkHec.Streamtags, types.StringValue(v))
		}
		r.OutputSplunkHec.SystemFields = make([]types.String, 0, len(resp.OutputSplunkHec.SystemFields))
		for _, v := range resp.OutputSplunkHec.SystemFields {
			r.OutputSplunkHec.SystemFields = append(r.OutputSplunkHec.SystemFields, types.StringValue(v))
		}
		r.OutputSplunkHec.TCPRouting = types.StringPointerValue(resp.OutputSplunkHec.TCPRouting)
		r.OutputSplunkHec.TextSecret = types.StringPointerValue(resp.OutputSplunkHec.TextSecret)
		if resp.OutputSplunkHec.TimeoutRetrySettings == nil {
			r.OutputSplunkHec.TimeoutRetrySettings = nil
		} else {
			r.OutputSplunkHec.TimeoutRetrySettings = &tfTypes.OutputSplunkHecTimeoutRetrySettings{}
			r.OutputSplunkHec.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputSplunkHec.TimeoutRetrySettings.BackoffRate)
			r.OutputSplunkHec.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputSplunkHec.TimeoutRetrySettings.InitialBackoff)
			r.OutputSplunkHec.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputSplunkHec.TimeoutRetrySettings.MaxBackoff)
			r.OutputSplunkHec.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputSplunkHec.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputSplunkHec.TimeoutSec = types.Float64PointerValue(resp.OutputSplunkHec.TimeoutSec)
		r.OutputSplunkHec.Token = types.StringPointerValue(resp.OutputSplunkHec.Token)
		r.OutputSplunkHec.Type = types.StringValue(string(resp.OutputSplunkHec.Type))
		r.OutputSplunkHec.URL = types.StringPointerValue(resp.OutputSplunkHec.URL)
		r.OutputSplunkHec.Urls = []tfTypes.OutputSplunkHecUrls{}
		if len(r.OutputSplunkHec.Urls) > len(resp.OutputSplunkHec.Urls) {
			r.OutputSplunkHec.Urls = r.OutputSplunkHec.Urls[:len(resp.OutputSplunkHec.Urls)]
		}
		for urlsCount2, urlsItem2 := range resp.OutputSplunkHec.Urls {
			var urls2 tfTypes.OutputSplunkHecUrls
			urls2.URL = types.StringPointerValue(urlsItem2.URL)
			urls2.Weight = types.Float64PointerValue(urlsItem2.Weight)
			if urlsCount2+1 > len(r.OutputSplunkHec.Urls) {
				r.OutputSplunkHec.Urls = append(r.OutputSplunkHec.Urls, urls2)
			} else {
				r.OutputSplunkHec.Urls[urlsCount2].URL = urls2.URL
				r.OutputSplunkHec.Urls[urlsCount2].Weight = urls2.Weight
			}
		}
		r.OutputSplunkHec.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputSplunkHec.UseRoundRobinDNS)
	}
	if resp.OutputSplunkLb != nil {
		r.OutputSplunkLb = &tfTypes.OutputSplunkLb{}
		r.OutputSplunkLb.AuthToken = types.StringPointerValue(resp.OutputSplunkLb.AuthToken)
		if resp.OutputSplunkLb.AuthType != nil {
			r.OutputSplunkLb.AuthType = types.StringValue(string(*resp.OutputSplunkLb.AuthType))
		} else {
			r.OutputSplunkLb.AuthType = types.StringNull()
		}
		if resp.OutputSplunkLb.Compress != nil {
			r.OutputSplunkLb.Compress = types.StringValue(string(*resp.OutputSplunkLb.Compress))
		} else {
			r.OutputSplunkLb.Compress = types.StringNull()
		}
		r.OutputSplunkLb.ConnectionTimeout = types.Float64PointerValue(resp.OutputSplunkLb.ConnectionTimeout)
		r.OutputSplunkLb.Description = types.StringPointerValue(resp.OutputSplunkLb.Description)
		r.OutputSplunkLb.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputSplunkLb.DNSResolvePeriodSec)
		r.OutputSplunkLb.EnableACK = types.BoolPointerValue(resp.OutputSplunkLb.EnableACK)
		r.OutputSplunkLb.EnableMultiMetrics = types.BoolPointerValue(resp.OutputSplunkLb.EnableMultiMetrics)
		r.OutputSplunkLb.Environment = types.StringPointerValue(resp.OutputSplunkLb.Environment)
		r.OutputSplunkLb.ExcludeSelf = types.BoolPointerValue(resp.OutputSplunkLb.ExcludeSelf)
		r.OutputSplunkLb.Hosts = []tfTypes.Hosts{}
		if len(r.OutputSplunkLb.Hosts) > len(resp.OutputSplunkLb.Hosts) {
			r.OutputSplunkLb.Hosts = r.OutputSplunkLb.Hosts[:len(resp.OutputSplunkLb.Hosts)]
		}
		for hostsCount3, hostsItem3 := range resp.OutputSplunkLb.Hosts {
			var hosts3 tfTypes.Hosts
			hosts3.Host = types.StringValue(hostsItem3.Host)
			hosts3.Port = types.Float64PointerValue(hostsItem3.Port)
			hosts3.Servername = types.StringPointerValue(hostsItem3.Servername)
			if hostsItem3.TLS != nil {
				hosts3.TLS = types.StringValue(string(*hostsItem3.TLS))
			} else {
				hosts3.TLS = types.StringNull()
			}
			hosts3.Weight = types.Float64PointerValue(hostsItem3.Weight)
			if hostsCount3+1 > len(r.OutputSplunkLb.Hosts) {
				r.OutputSplunkLb.Hosts = append(r.OutputSplunkLb.Hosts, hosts3)
			} else {
				r.OutputSplunkLb.Hosts[hostsCount3].Host = hosts3.Host
				r.OutputSplunkLb.Hosts[hostsCount3].Port = hosts3.Port
				r.OutputSplunkLb.Hosts[hostsCount3].Servername = hosts3.Servername
				r.OutputSplunkLb.Hosts[hostsCount3].TLS = hosts3.TLS
				r.OutputSplunkLb.Hosts[hostsCount3].Weight = hosts3.Weight
			}
		}
		r.OutputSplunkLb.ID = types.StringPointerValue(resp.OutputSplunkLb.ID)
		r.OutputSplunkLb.IndexerDiscovery = types.BoolPointerValue(resp.OutputSplunkLb.IndexerDiscovery)
		if resp.OutputSplunkLb.IndexerDiscoveryConfigs == nil {
			r.OutputSplunkLb.IndexerDiscoveryConfigs = nil
		} else {
			r.OutputSplunkLb.IndexerDiscoveryConfigs = &tfTypes.IndexerDiscoveryConfigs{}
			r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthToken = types.StringPointerValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthToken)
			r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens = []tfTypes.OutputSplunkLbAuthTokens{}
			if len(r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens) > len(resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens) {
				r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens = r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens[:len(resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens)]
			}
			for authTokensCount, authTokensItem := range resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens {
				var authTokens tfTypes.OutputSplunkLbAuthTokens
				if authTokensItem.AuthType != nil {
					authTokens.AuthType = types.StringValue(string(*authTokensItem.AuthType))
				} else {
					authTokens.AuthType = types.StringNull()
				}
				if authTokensCount+1 > len(r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens) {
					r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens = append(r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens, authTokens)
				} else {
					r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthTokens[authTokensCount].AuthType = authTokens.AuthType
				}
			}
			if resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType != nil {
				r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType = types.StringValue(string(*resp.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType))
			} else {
				r.OutputSplunkLb.IndexerDiscoveryConfigs.AuthType = types.StringNull()
			}
			r.OutputSplunkLb.IndexerDiscoveryConfigs.MasterURI = types.StringValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.MasterURI)
			r.OutputSplunkLb.IndexerDiscoveryConfigs.RefreshIntervalSec = types.Float64PointerValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.RefreshIntervalSec)
			r.OutputSplunkLb.IndexerDiscoveryConfigs.RejectUnauthorized = types.BoolPointerValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.RejectUnauthorized)
			r.OutputSplunkLb.IndexerDiscoveryConfigs.Site = types.StringPointerValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.Site)
			r.OutputSplunkLb.IndexerDiscoveryConfigs.TextSecret = types.StringPointerValue(resp.OutputSplunkLb.IndexerDiscoveryConfigs.TextSecret)
		}
		r.OutputSplunkLb.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputSplunkLb.LoadBalanceStatsPeriodSec)
		r.OutputSplunkLb.LogFailedRequests = types.BoolPointerValue(resp.OutputSplunkLb.LogFailedRequests)
		r.OutputSplunkLb.MaxConcurrentSenders = types.Float64PointerValue(resp.OutputSplunkLb.MaxConcurrentSenders)
		r.OutputSplunkLb.MaxFailedHealthChecks = types.Float64PointerValue(resp.OutputSplunkLb.MaxFailedHealthChecks)
		if resp.OutputSplunkLb.MaxS2Sversion != nil {
			r.OutputSplunkLb.MaxS2Sversion = types.StringValue(string(*resp.OutputSplunkLb.MaxS2Sversion))
		} else {
			r.OutputSplunkLb.MaxS2Sversion = types.StringNull()
		}
		if resp.OutputSplunkLb.NestedFields != nil {
			r.OutputSplunkLb.NestedFields = types.StringValue(string(*resp.OutputSplunkLb.NestedFields))
		} else {
			r.OutputSplunkLb.NestedFields = types.StringNull()
		}
		if resp.OutputSplunkLb.OnBackpressure != nil {
			r.OutputSplunkLb.OnBackpressure = types.StringValue(string(*resp.OutputSplunkLb.OnBackpressure))
		} else {
			r.OutputSplunkLb.OnBackpressure = types.StringNull()
		}
		r.OutputSplunkLb.Pipeline = types.StringPointerValue(resp.OutputSplunkLb.Pipeline)
		if resp.OutputSplunkLb.PqCompress != nil {
			r.OutputSplunkLb.PqCompress = types.StringValue(string(*resp.OutputSplunkLb.PqCompress))
		} else {
			r.OutputSplunkLb.PqCompress = types.StringNull()
		}
		if resp.OutputSplunkLb.PqControls == nil {
			r.OutputSplunkLb.PqControls = nil
		} else {
			r.OutputSplunkLb.PqControls = &tfTypes.OutputSplunkLbPqControls{}
		}
		r.OutputSplunkLb.PqMaxFileSize = types.StringPointerValue(resp.OutputSplunkLb.PqMaxFileSize)
		r.OutputSplunkLb.PqMaxSize = types.StringPointerValue(resp.OutputSplunkLb.PqMaxSize)
		if resp.OutputSplunkLb.PqMode != nil {
			r.OutputSplunkLb.PqMode = types.StringValue(string(*resp.OutputSplunkLb.PqMode))
		} else {
			r.OutputSplunkLb.PqMode = types.StringNull()
		}
		if resp.OutputSplunkLb.PqOnBackpressure != nil {
			r.OutputSplunkLb.PqOnBackpressure = types.StringValue(string(*resp.OutputSplunkLb.PqOnBackpressure))
		} else {
			r.OutputSplunkLb.PqOnBackpressure = types.StringNull()
		}
		r.OutputSplunkLb.PqPath = types.StringPointerValue(resp.OutputSplunkLb.PqPath)
		r.OutputSplunkLb.SenderUnhealthyTimeAllowance = types.Float64PointerValue(resp.OutputSplunkLb.SenderUnhealthyTimeAllowance)
		r.OutputSplunkLb.Streamtags = make([]types.String, 0, len(resp.OutputSplunkLb.Streamtags))
		for _, v := range resp.OutputSplunkLb.Streamtags {
			r.OutputSplunkLb.Streamtags = append(r.OutputSplunkLb.Streamtags, types.StringValue(v))
		}
		r.OutputSplunkLb.SystemFields = make([]types.String, 0, len(resp.OutputSplunkLb.SystemFields))
		for _, v := range resp.OutputSplunkLb.SystemFields {
			r.OutputSplunkLb.SystemFields = append(r.OutputSplunkLb.SystemFields, types.StringValue(v))
		}
		r.OutputSplunkLb.TextSecret = types.StringPointerValue(resp.OutputSplunkLb.TextSecret)
		r.OutputSplunkLb.ThrottleRatePerSec = types.StringPointerValue(resp.OutputSplunkLb.ThrottleRatePerSec)
		if resp.OutputSplunkLb.TLS == nil {
			r.OutputSplunkLb.TLS = nil
		} else {
			r.OutputSplunkLb.TLS = &tfTypes.OutputSplunkLbTLSSettingsClientSide{}
			r.OutputSplunkLb.TLS.CaPath = types.StringPointerValue(resp.OutputSplunkLb.TLS.CaPath)
			r.OutputSplunkLb.TLS.CertificateName = types.StringPointerValue(resp.OutputSplunkLb.TLS.CertificateName)
			r.OutputSplunkLb.TLS.CertPath = types.StringPointerValue(resp.OutputSplunkLb.TLS.CertPath)
			r.OutputSplunkLb.TLS.Disabled = types.BoolPointerValue(resp.OutputSplunkLb.TLS.Disabled)
			if resp.OutputSplunkLb.TLS.MaxVersion != nil {
				r.OutputSplunkLb.TLS.MaxVersion = types.StringValue(string(*resp.OutputSplunkLb.TLS.MaxVersion))
			} else {
				r.OutputSplunkLb.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputSplunkLb.TLS.MinVersion != nil {
				r.OutputSplunkLb.TLS.MinVersion = types.StringValue(string(*resp.OutputSplunkLb.TLS.MinVersion))
			} else {
				r.OutputSplunkLb.TLS.MinVersion = types.StringNull()
			}
			r.OutputSplunkLb.TLS.Passphrase = types.StringPointerValue(resp.OutputSplunkLb.TLS.Passphrase)
			r.OutputSplunkLb.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputSplunkLb.TLS.PrivKeyPath)
			r.OutputSplunkLb.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputSplunkLb.TLS.RejectUnauthorized)
			r.OutputSplunkLb.TLS.Servername = types.StringPointerValue(resp.OutputSplunkLb.TLS.Servername)
		}
		r.OutputSplunkLb.Type = types.StringValue(string(resp.OutputSplunkLb.Type))
		r.OutputSplunkLb.WriteTimeout = types.Float64PointerValue(resp.OutputSplunkLb.WriteTimeout)
	}
	if resp.OutputSqs != nil {
		r.OutputSqs = &tfTypes.OutputSqs{}
		r.OutputSqs.AssumeRoleArn = types.StringPointerValue(resp.OutputSqs.AssumeRoleArn)
		r.OutputSqs.AssumeRoleExternalID = types.StringPointerValue(resp.OutputSqs.AssumeRoleExternalID)
		r.OutputSqs.AwsAccountID = types.StringPointerValue(resp.OutputSqs.AwsAccountID)
		r.OutputSqs.AwsAPIKey = types.StringPointerValue(resp.OutputSqs.AwsAPIKey)
		if resp.OutputSqs.AwsAuthenticationMethod != nil {
			r.OutputSqs.AwsAuthenticationMethod = types.StringValue(string(*resp.OutputSqs.AwsAuthenticationMethod))
		} else {
			r.OutputSqs.AwsAuthenticationMethod = types.StringNull()
		}
		r.OutputSqs.AwsSecret = types.StringPointerValue(resp.OutputSqs.AwsSecret)
		r.OutputSqs.AwsSecretKey = types.StringPointerValue(resp.OutputSqs.AwsSecretKey)
		r.OutputSqs.CreateQueue = types.BoolPointerValue(resp.OutputSqs.CreateQueue)
		r.OutputSqs.Description = types.StringPointerValue(resp.OutputSqs.Description)
		r.OutputSqs.DurationSeconds = types.Float64PointerValue(resp.OutputSqs.DurationSeconds)
		r.OutputSqs.EnableAssumeRole = types.BoolPointerValue(resp.OutputSqs.EnableAssumeRole)
		r.OutputSqs.Endpoint = types.StringPointerValue(resp.OutputSqs.Endpoint)
		r.OutputSqs.Environment = types.StringPointerValue(resp.OutputSqs.Environment)
		r.OutputSqs.FlushPeriodSec = types.Float64PointerValue(resp.OutputSqs.FlushPeriodSec)
		r.OutputSqs.ID = types.StringPointerValue(resp.OutputSqs.ID)
		r.OutputSqs.MaxInProgress = types.Float64PointerValue(resp.OutputSqs.MaxInProgress)
		r.OutputSqs.MaxQueueSize = types.Float64PointerValue(resp.OutputSqs.MaxQueueSize)
		r.OutputSqs.MaxRecordSizeKB = types.Float64PointerValue(resp.OutputSqs.MaxRecordSizeKB)
		r.OutputSqs.MessageGroupID = types.StringPointerValue(resp.OutputSqs.MessageGroupID)
		if resp.OutputSqs.OnBackpressure != nil {
			r.OutputSqs.OnBackpressure = types.StringValue(string(*resp.OutputSqs.OnBackpressure))
		} else {
			r.OutputSqs.OnBackpressure = types.StringNull()
		}
		r.OutputSqs.Pipeline = types.StringPointerValue(resp.OutputSqs.Pipeline)
		if resp.OutputSqs.PqCompress != nil {
			r.OutputSqs.PqCompress = types.StringValue(string(*resp.OutputSqs.PqCompress))
		} else {
			r.OutputSqs.PqCompress = types.StringNull()
		}
		if resp.OutputSqs.PqControls == nil {
			r.OutputSqs.PqControls = nil
		} else {
			r.OutputSqs.PqControls = &tfTypes.OutputSqsPqControls{}
		}
		r.OutputSqs.PqMaxFileSize = types.StringPointerValue(resp.OutputSqs.PqMaxFileSize)
		r.OutputSqs.PqMaxSize = types.StringPointerValue(resp.OutputSqs.PqMaxSize)
		if resp.OutputSqs.PqMode != nil {
			r.OutputSqs.PqMode = types.StringValue(string(*resp.OutputSqs.PqMode))
		} else {
			r.OutputSqs.PqMode = types.StringNull()
		}
		if resp.OutputSqs.PqOnBackpressure != nil {
			r.OutputSqs.PqOnBackpressure = types.StringValue(string(*resp.OutputSqs.PqOnBackpressure))
		} else {
			r.OutputSqs.PqOnBackpressure = types.StringNull()
		}
		r.OutputSqs.PqPath = types.StringPointerValue(resp.OutputSqs.PqPath)
		r.OutputSqs.QueueName = types.StringValue(resp.OutputSqs.QueueName)
		if resp.OutputSqs.QueueType != nil {
			r.OutputSqs.QueueType = types.StringValue(string(*resp.OutputSqs.QueueType))
		} else {
			r.OutputSqs.QueueType = types.StringNull()
		}
		r.OutputSqs.Region = types.StringPointerValue(resp.OutputSqs.Region)
		r.OutputSqs.RejectUnauthorized = types.BoolPointerValue(resp.OutputSqs.RejectUnauthorized)
		r.OutputSqs.ReuseConnections = types.BoolPointerValue(resp.OutputSqs.ReuseConnections)
		if resp.OutputSqs.SignatureVersion != nil {
			r.OutputSqs.SignatureVersion = types.StringValue(string(*resp.OutputSqs.SignatureVersion))
		} else {
			r.OutputSqs.SignatureVersion = types.StringNull()
		}
		r.OutputSqs.Streamtags = make([]types.String, 0, len(resp.OutputSqs.Streamtags))
		for _, v := range resp.OutputSqs.Streamtags {
			r.OutputSqs.Streamtags = append(r.OutputSqs.Streamtags, types.StringValue(v))
		}
		r.OutputSqs.SystemFields = make([]types.String, 0, len(resp.OutputSqs.SystemFields))
		for _, v := range resp.OutputSqs.SystemFields {
			r.OutputSqs.SystemFields = append(r.OutputSqs.SystemFields, types.StringValue(v))
		}
		if resp.OutputSqs.Type != nil {
			r.OutputSqs.Type = types.StringValue(string(*resp.OutputSqs.Type))
		} else {
			r.OutputSqs.Type = types.StringNull()
		}
	}
	if resp.OutputStatsd != nil {
		r.OutputStatsd = &tfTypes.OutputStatsd{}
		r.OutputStatsd.ConnectionTimeout = types.Float64PointerValue(resp.OutputStatsd.ConnectionTimeout)
		r.OutputStatsd.Description = types.StringPointerValue(resp.OutputStatsd.Description)
		r.OutputStatsd.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputStatsd.DNSResolvePeriodSec)
		r.OutputStatsd.Environment = types.StringPointerValue(resp.OutputStatsd.Environment)
		r.OutputStatsd.FlushPeriodSec = types.Float64PointerValue(resp.OutputStatsd.FlushPeriodSec)
		r.OutputStatsd.Host = types.StringValue(resp.OutputStatsd.Host)
		r.OutputStatsd.ID = types.StringPointerValue(resp.OutputStatsd.ID)
		r.OutputStatsd.Mtu = types.Float64PointerValue(resp.OutputStatsd.Mtu)
		if resp.OutputStatsd.OnBackpressure != nil {
			r.OutputStatsd.OnBackpressure = types.StringValue(string(*resp.OutputStatsd.OnBackpressure))
		} else {
			r.OutputStatsd.OnBackpressure = types.StringNull()
		}
		r.OutputStatsd.Pipeline = types.StringPointerValue(resp.OutputStatsd.Pipeline)
		r.OutputStatsd.Port = types.Float64PointerValue(resp.OutputStatsd.Port)
		if resp.OutputStatsd.PqCompress != nil {
			r.OutputStatsd.PqCompress = types.StringValue(string(*resp.OutputStatsd.PqCompress))
		} else {
			r.OutputStatsd.PqCompress = types.StringNull()
		}
		if resp.OutputStatsd.PqControls == nil {
			r.OutputStatsd.PqControls = nil
		} else {
			r.OutputStatsd.PqControls = &tfTypes.OutputStatsdPqControls{}
		}
		r.OutputStatsd.PqMaxFileSize = types.StringPointerValue(resp.OutputStatsd.PqMaxFileSize)
		r.OutputStatsd.PqMaxSize = types.StringPointerValue(resp.OutputStatsd.PqMaxSize)
		if resp.OutputStatsd.PqMode != nil {
			r.OutputStatsd.PqMode = types.StringValue(string(*resp.OutputStatsd.PqMode))
		} else {
			r.OutputStatsd.PqMode = types.StringNull()
		}
		if resp.OutputStatsd.PqOnBackpressure != nil {
			r.OutputStatsd.PqOnBackpressure = types.StringValue(string(*resp.OutputStatsd.PqOnBackpressure))
		} else {
			r.OutputStatsd.PqOnBackpressure = types.StringNull()
		}
		r.OutputStatsd.PqPath = types.StringPointerValue(resp.OutputStatsd.PqPath)
		if resp.OutputStatsd.Protocol != nil {
			r.OutputStatsd.Protocol = types.StringValue(string(*resp.OutputStatsd.Protocol))
		} else {
			r.OutputStatsd.Protocol = types.StringNull()
		}
		r.OutputStatsd.Streamtags = make([]types.String, 0, len(resp.OutputStatsd.Streamtags))
		for _, v := range resp.OutputStatsd.Streamtags {
			r.OutputStatsd.Streamtags = append(r.OutputStatsd.Streamtags, types.StringValue(v))
		}
		r.OutputStatsd.SystemFields = make([]types.String, 0, len(resp.OutputStatsd.SystemFields))
		for _, v := range resp.OutputStatsd.SystemFields {
			r.OutputStatsd.SystemFields = append(r.OutputStatsd.SystemFields, types.StringValue(v))
		}
		r.OutputStatsd.ThrottleRatePerSec = types.StringPointerValue(resp.OutputStatsd.ThrottleRatePerSec)
		if resp.OutputStatsd.Type != nil {
			r.OutputStatsd.Type = types.StringValue(string(*resp.OutputStatsd.Type))
		} else {
			r.OutputStatsd.Type = types.StringNull()
		}
		r.OutputStatsd.WriteTimeout = types.Float64PointerValue(resp.OutputStatsd.WriteTimeout)
	}
	if resp.OutputStatsdExt != nil {
		r.OutputStatsdExt = &tfTypes.OutputStatsdExt{}
		r.OutputStatsdExt.ConnectionTimeout = types.Float64PointerValue(resp.OutputStatsdExt.ConnectionTimeout)
		r.OutputStatsdExt.Description = types.StringPointerValue(resp.OutputStatsdExt.Description)
		r.OutputStatsdExt.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputStatsdExt.DNSResolvePeriodSec)
		r.OutputStatsdExt.Environment = types.StringPointerValue(resp.OutputStatsdExt.Environment)
		r.OutputStatsdExt.FlushPeriodSec = types.Float64PointerValue(resp.OutputStatsdExt.FlushPeriodSec)
		r.OutputStatsdExt.Host = types.StringValue(resp.OutputStatsdExt.Host)
		r.OutputStatsdExt.ID = types.StringPointerValue(resp.OutputStatsdExt.ID)
		r.OutputStatsdExt.Mtu = types.Float64PointerValue(resp.OutputStatsdExt.Mtu)
		if resp.OutputStatsdExt.OnBackpressure != nil {
			r.OutputStatsdExt.OnBackpressure = types.StringValue(string(*resp.OutputStatsdExt.OnBackpressure))
		} else {
			r.OutputStatsdExt.OnBackpressure = types.StringNull()
		}
		r.OutputStatsdExt.Pipeline = types.StringPointerValue(resp.OutputStatsdExt.Pipeline)
		r.OutputStatsdExt.Port = types.Float64PointerValue(resp.OutputStatsdExt.Port)
		if resp.OutputStatsdExt.PqCompress != nil {
			r.OutputStatsdExt.PqCompress = types.StringValue(string(*resp.OutputStatsdExt.PqCompress))
		} else {
			r.OutputStatsdExt.PqCompress = types.StringNull()
		}
		if resp.OutputStatsdExt.PqControls == nil {
			r.OutputStatsdExt.PqControls = nil
		} else {
			r.OutputStatsdExt.PqControls = &tfTypes.OutputStatsdExtPqControls{}
		}
		r.OutputStatsdExt.PqMaxFileSize = types.StringPointerValue(resp.OutputStatsdExt.PqMaxFileSize)
		r.OutputStatsdExt.PqMaxSize = types.StringPointerValue(resp.OutputStatsdExt.PqMaxSize)
		if resp.OutputStatsdExt.PqMode != nil {
			r.OutputStatsdExt.PqMode = types.StringValue(string(*resp.OutputStatsdExt.PqMode))
		} else {
			r.OutputStatsdExt.PqMode = types.StringNull()
		}
		if resp.OutputStatsdExt.PqOnBackpressure != nil {
			r.OutputStatsdExt.PqOnBackpressure = types.StringValue(string(*resp.OutputStatsdExt.PqOnBackpressure))
		} else {
			r.OutputStatsdExt.PqOnBackpressure = types.StringNull()
		}
		r.OutputStatsdExt.PqPath = types.StringPointerValue(resp.OutputStatsdExt.PqPath)
		if resp.OutputStatsdExt.Protocol != nil {
			r.OutputStatsdExt.Protocol = types.StringValue(string(*resp.OutputStatsdExt.Protocol))
		} else {
			r.OutputStatsdExt.Protocol = types.StringNull()
		}
		r.OutputStatsdExt.Streamtags = make([]types.String, 0, len(resp.OutputStatsdExt.Streamtags))
		for _, v := range resp.OutputStatsdExt.Streamtags {
			r.OutputStatsdExt.Streamtags = append(r.OutputStatsdExt.Streamtags, types.StringValue(v))
		}
		r.OutputStatsdExt.SystemFields = make([]types.String, 0, len(resp.OutputStatsdExt.SystemFields))
		for _, v := range resp.OutputStatsdExt.SystemFields {
			r.OutputStatsdExt.SystemFields = append(r.OutputStatsdExt.SystemFields, types.StringValue(v))
		}
		r.OutputStatsdExt.ThrottleRatePerSec = types.StringPointerValue(resp.OutputStatsdExt.ThrottleRatePerSec)
		if resp.OutputStatsdExt.Type != nil {
			r.OutputStatsdExt.Type = types.StringValue(string(*resp.OutputStatsdExt.Type))
		} else {
			r.OutputStatsdExt.Type = types.StringNull()
		}
		r.OutputStatsdExt.WriteTimeout = types.Float64PointerValue(resp.OutputStatsdExt.WriteTimeout)
	}
	if resp.OutputSumoLogic != nil {
		r.OutputSumoLogic = &tfTypes.OutputSumoLogic{}
		r.OutputSumoLogic.Compress = types.BoolPointerValue(resp.OutputSumoLogic.Compress)
		r.OutputSumoLogic.Concurrency = types.Float64PointerValue(resp.OutputSumoLogic.Concurrency)
		r.OutputSumoLogic.CustomCategory = types.StringPointerValue(resp.OutputSumoLogic.CustomCategory)
		r.OutputSumoLogic.CustomSource = types.StringPointerValue(resp.OutputSumoLogic.CustomSource)
		r.OutputSumoLogic.Description = types.StringPointerValue(resp.OutputSumoLogic.Description)
		r.OutputSumoLogic.Environment = types.StringPointerValue(resp.OutputSumoLogic.Environment)
		r.OutputSumoLogic.ExtraHTTPHeaders = []tfTypes.OutputSumoLogicExtraHTTPHeaders{}
		if len(r.OutputSumoLogic.ExtraHTTPHeaders) > len(resp.OutputSumoLogic.ExtraHTTPHeaders) {
			r.OutputSumoLogic.ExtraHTTPHeaders = r.OutputSumoLogic.ExtraHTTPHeaders[:len(resp.OutputSumoLogic.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount25, extraHTTPHeadersItem25 := range resp.OutputSumoLogic.ExtraHTTPHeaders {
			var extraHTTPHeaders25 tfTypes.OutputSumoLogicExtraHTTPHeaders
			extraHTTPHeaders25.Name = types.StringPointerValue(extraHTTPHeadersItem25.Name)
			extraHTTPHeaders25.Value = types.StringValue(extraHTTPHeadersItem25.Value)
			if extraHTTPHeadersCount25+1 > len(r.OutputSumoLogic.ExtraHTTPHeaders) {
				r.OutputSumoLogic.ExtraHTTPHeaders = append(r.OutputSumoLogic.ExtraHTTPHeaders, extraHTTPHeaders25)
			} else {
				r.OutputSumoLogic.ExtraHTTPHeaders[extraHTTPHeadersCount25].Name = extraHTTPHeaders25.Name
				r.OutputSumoLogic.ExtraHTTPHeaders[extraHTTPHeadersCount25].Value = extraHTTPHeaders25.Value
			}
		}
		if resp.OutputSumoLogic.FailedRequestLoggingMode != nil {
			r.OutputSumoLogic.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputSumoLogic.FailedRequestLoggingMode))
		} else {
			r.OutputSumoLogic.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputSumoLogic.FlushPeriodSec = types.Float64PointerValue(resp.OutputSumoLogic.FlushPeriodSec)
		if resp.OutputSumoLogic.Format != nil {
			r.OutputSumoLogic.Format = types.StringValue(string(*resp.OutputSumoLogic.Format))
		} else {
			r.OutputSumoLogic.Format = types.StringNull()
		}
		r.OutputSumoLogic.ID = types.StringPointerValue(resp.OutputSumoLogic.ID)
		r.OutputSumoLogic.MaxPayloadEvents = types.Float64PointerValue(resp.OutputSumoLogic.MaxPayloadEvents)
		r.OutputSumoLogic.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputSumoLogic.MaxPayloadSizeKB)
		if resp.OutputSumoLogic.OnBackpressure != nil {
			r.OutputSumoLogic.OnBackpressure = types.StringValue(string(*resp.OutputSumoLogic.OnBackpressure))
		} else {
			r.OutputSumoLogic.OnBackpressure = types.StringNull()
		}
		r.OutputSumoLogic.Pipeline = types.StringPointerValue(resp.OutputSumoLogic.Pipeline)
		if resp.OutputSumoLogic.PqCompress != nil {
			r.OutputSumoLogic.PqCompress = types.StringValue(string(*resp.OutputSumoLogic.PqCompress))
		} else {
			r.OutputSumoLogic.PqCompress = types.StringNull()
		}
		if resp.OutputSumoLogic.PqControls == nil {
			r.OutputSumoLogic.PqControls = nil
		} else {
			r.OutputSumoLogic.PqControls = &tfTypes.OutputSumoLogicPqControls{}
		}
		r.OutputSumoLogic.PqMaxFileSize = types.StringPointerValue(resp.OutputSumoLogic.PqMaxFileSize)
		r.OutputSumoLogic.PqMaxSize = types.StringPointerValue(resp.OutputSumoLogic.PqMaxSize)
		if resp.OutputSumoLogic.PqMode != nil {
			r.OutputSumoLogic.PqMode = types.StringValue(string(*resp.OutputSumoLogic.PqMode))
		} else {
			r.OutputSumoLogic.PqMode = types.StringNull()
		}
		if resp.OutputSumoLogic.PqOnBackpressure != nil {
			r.OutputSumoLogic.PqOnBackpressure = types.StringValue(string(*resp.OutputSumoLogic.PqOnBackpressure))
		} else {
			r.OutputSumoLogic.PqOnBackpressure = types.StringNull()
		}
		r.OutputSumoLogic.PqPath = types.StringPointerValue(resp.OutputSumoLogic.PqPath)
		r.OutputSumoLogic.RejectUnauthorized = types.BoolPointerValue(resp.OutputSumoLogic.RejectUnauthorized)
		r.OutputSumoLogic.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputSumoLogic.ResponseHonorRetryAfterHeader)
		r.OutputSumoLogic.ResponseRetrySettings = []tfTypes.OutputSumoLogicResponseRetrySettings{}
		if len(r.OutputSumoLogic.ResponseRetrySettings) > len(resp.OutputSumoLogic.ResponseRetrySettings) {
			r.OutputSumoLogic.ResponseRetrySettings = r.OutputSumoLogic.ResponseRetrySettings[:len(resp.OutputSumoLogic.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount26, responseRetrySettingsItem26 := range resp.OutputSumoLogic.ResponseRetrySettings {
			var responseRetrySettings26 tfTypes.OutputSumoLogicResponseRetrySettings
			responseRetrySettings26.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem26.BackoffRate)
			responseRetrySettings26.HTTPStatus = types.Float64Value(responseRetrySettingsItem26.HTTPStatus)
			responseRetrySettings26.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem26.InitialBackoff)
			responseRetrySettings26.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem26.MaxBackoff)
			if responseRetrySettingsCount26+1 > len(r.OutputSumoLogic.ResponseRetrySettings) {
				r.OutputSumoLogic.ResponseRetrySettings = append(r.OutputSumoLogic.ResponseRetrySettings, responseRetrySettings26)
			} else {
				r.OutputSumoLogic.ResponseRetrySettings[responseRetrySettingsCount26].BackoffRate = responseRetrySettings26.BackoffRate
				r.OutputSumoLogic.ResponseRetrySettings[responseRetrySettingsCount26].HTTPStatus = responseRetrySettings26.HTTPStatus
				r.OutputSumoLogic.ResponseRetrySettings[responseRetrySettingsCount26].InitialBackoff = responseRetrySettings26.InitialBackoff
				r.OutputSumoLogic.ResponseRetrySettings[responseRetrySettingsCount26].MaxBackoff = responseRetrySettings26.MaxBackoff
			}
		}
		r.OutputSumoLogic.SafeHeaders = make([]types.String, 0, len(resp.OutputSumoLogic.SafeHeaders))
		for _, v := range resp.OutputSumoLogic.SafeHeaders {
			r.OutputSumoLogic.SafeHeaders = append(r.OutputSumoLogic.SafeHeaders, types.StringValue(v))
		}
		r.OutputSumoLogic.Streamtags = make([]types.String, 0, len(resp.OutputSumoLogic.Streamtags))
		for _, v := range resp.OutputSumoLogic.Streamtags {
			r.OutputSumoLogic.Streamtags = append(r.OutputSumoLogic.Streamtags, types.StringValue(v))
		}
		r.OutputSumoLogic.SystemFields = make([]types.String, 0, len(resp.OutputSumoLogic.SystemFields))
		for _, v := range resp.OutputSumoLogic.SystemFields {
			r.OutputSumoLogic.SystemFields = append(r.OutputSumoLogic.SystemFields, types.StringValue(v))
		}
		if resp.OutputSumoLogic.TimeoutRetrySettings == nil {
			r.OutputSumoLogic.TimeoutRetrySettings = nil
		} else {
			r.OutputSumoLogic.TimeoutRetrySettings = &tfTypes.OutputSumoLogicTimeoutRetrySettings{}
			r.OutputSumoLogic.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputSumoLogic.TimeoutRetrySettings.BackoffRate)
			r.OutputSumoLogic.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputSumoLogic.TimeoutRetrySettings.InitialBackoff)
			r.OutputSumoLogic.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputSumoLogic.TimeoutRetrySettings.MaxBackoff)
			r.OutputSumoLogic.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputSumoLogic.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputSumoLogic.TimeoutSec = types.Float64PointerValue(resp.OutputSumoLogic.TimeoutSec)
		r.OutputSumoLogic.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputSumoLogic.TotalMemoryLimitKB)
		r.OutputSumoLogic.Type = types.StringValue(string(resp.OutputSumoLogic.Type))
		r.OutputSumoLogic.URL = types.StringValue(resp.OutputSumoLogic.URL)
		r.OutputSumoLogic.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputSumoLogic.UseRoundRobinDNS)
	}
	if resp.OutputSyslog != nil {
		r.OutputSyslog = &tfTypes.OutputSyslog{}
		r.OutputSyslog.AppName = types.StringPointerValue(resp.OutputSyslog.AppName)
		r.OutputSyslog.ConnectionTimeout = types.Float64PointerValue(resp.OutputSyslog.ConnectionTimeout)
		r.OutputSyslog.Description = types.StringPointerValue(resp.OutputSyslog.Description)
		r.OutputSyslog.Environment = types.StringPointerValue(resp.OutputSyslog.Environment)
		if resp.OutputSyslog.Facility != nil {
			r.OutputSyslog.Facility = types.Int64Value(int64(*resp.OutputSyslog.Facility))
		} else {
			r.OutputSyslog.Facility = types.Int64Null()
		}
		r.OutputSyslog.Host = types.StringPointerValue(resp.OutputSyslog.Host)
		r.OutputSyslog.ID = types.StringValue(resp.OutputSyslog.ID)
		r.OutputSyslog.LoadBalanced = types.BoolPointerValue(resp.OutputSyslog.LoadBalanced)
		r.OutputSyslog.LogFailedRequests = types.BoolPointerValue(resp.OutputSyslog.LogFailedRequests)
		r.OutputSyslog.MaxRecordSize = types.Float64PointerValue(resp.OutputSyslog.MaxRecordSize)
		if resp.OutputSyslog.MessageFormat != nil {
			r.OutputSyslog.MessageFormat = types.StringValue(string(*resp.OutputSyslog.MessageFormat))
		} else {
			r.OutputSyslog.MessageFormat = types.StringNull()
		}
		r.OutputSyslog.OctetCountFraming = types.BoolPointerValue(resp.OutputSyslog.OctetCountFraming)
		if resp.OutputSyslog.OnBackpressure != nil {
			r.OutputSyslog.OnBackpressure = types.StringValue(string(*resp.OutputSyslog.OnBackpressure))
		} else {
			r.OutputSyslog.OnBackpressure = types.StringNull()
		}
		r.OutputSyslog.Pipeline = types.StringPointerValue(resp.OutputSyslog.Pipeline)
		r.OutputSyslog.Port = types.Float64PointerValue(resp.OutputSyslog.Port)
		if resp.OutputSyslog.PqCompress != nil {
			r.OutputSyslog.PqCompress = types.StringValue(string(*resp.OutputSyslog.PqCompress))
		} else {
			r.OutputSyslog.PqCompress = types.StringNull()
		}
		if resp.OutputSyslog.PqControls == nil {
			r.OutputSyslog.PqControls = nil
		} else {
			r.OutputSyslog.PqControls = &tfTypes.OutputSyslogPqControls{}
		}
		r.OutputSyslog.PqMaxFileSize = types.StringPointerValue(resp.OutputSyslog.PqMaxFileSize)
		r.OutputSyslog.PqMaxSize = types.StringPointerValue(resp.OutputSyslog.PqMaxSize)
		if resp.OutputSyslog.PqMode != nil {
			r.OutputSyslog.PqMode = types.StringValue(string(*resp.OutputSyslog.PqMode))
		} else {
			r.OutputSyslog.PqMode = types.StringNull()
		}
		if resp.OutputSyslog.PqOnBackpressure != nil {
			r.OutputSyslog.PqOnBackpressure = types.StringValue(string(*resp.OutputSyslog.PqOnBackpressure))
		} else {
			r.OutputSyslog.PqOnBackpressure = types.StringNull()
		}
		r.OutputSyslog.PqPath = types.StringPointerValue(resp.OutputSyslog.PqPath)
		if resp.OutputSyslog.Protocol != nil {
			r.OutputSyslog.Protocol = types.StringValue(string(*resp.OutputSyslog.Protocol))
		} else {
			r.OutputSyslog.Protocol = types.StringNull()
		}
		if resp.OutputSyslog.Severity != nil {
			r.OutputSyslog.Severity = types.Int64Value(int64(*resp.OutputSyslog.Severity))
		} else {
			r.OutputSyslog.Severity = types.Int64Null()
		}
		r.OutputSyslog.Streamtags = make([]types.String, 0, len(resp.OutputSyslog.Streamtags))
		for _, v := range resp.OutputSyslog.Streamtags {
			r.OutputSyslog.Streamtags = append(r.OutputSyslog.Streamtags, types.StringValue(v))
		}
		r.OutputSyslog.SystemFields = make([]types.String, 0, len(resp.OutputSyslog.SystemFields))
		for _, v := range resp.OutputSyslog.SystemFields {
			r.OutputSyslog.SystemFields = append(r.OutputSyslog.SystemFields, types.StringValue(v))
		}
		r.OutputSyslog.ThrottleRatePerSec = types.StringPointerValue(resp.OutputSyslog.ThrottleRatePerSec)
		if resp.OutputSyslog.TimestampFormat != nil {
			r.OutputSyslog.TimestampFormat = types.StringValue(string(*resp.OutputSyslog.TimestampFormat))
		} else {
			r.OutputSyslog.TimestampFormat = types.StringNull()
		}
		if resp.OutputSyslog.TLS == nil {
			r.OutputSyslog.TLS = nil
		} else {
			r.OutputSyslog.TLS = &tfTypes.OutputSyslogTLSSettingsClientSide{}
			r.OutputSyslog.TLS.CaPath = types.StringPointerValue(resp.OutputSyslog.TLS.CaPath)
			r.OutputSyslog.TLS.CertificateName = types.StringPointerValue(resp.OutputSyslog.TLS.CertificateName)
			r.OutputSyslog.TLS.CertPath = types.StringPointerValue(resp.OutputSyslog.TLS.CertPath)
			r.OutputSyslog.TLS.Disabled = types.BoolPointerValue(resp.OutputSyslog.TLS.Disabled)
			if resp.OutputSyslog.TLS.MaxVersion != nil {
				r.OutputSyslog.TLS.MaxVersion = types.StringValue(string(*resp.OutputSyslog.TLS.MaxVersion))
			} else {
				r.OutputSyslog.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputSyslog.TLS.MinVersion != nil {
				r.OutputSyslog.TLS.MinVersion = types.StringValue(string(*resp.OutputSyslog.TLS.MinVersion))
			} else {
				r.OutputSyslog.TLS.MinVersion = types.StringNull()
			}
			r.OutputSyslog.TLS.Passphrase = types.StringPointerValue(resp.OutputSyslog.TLS.Passphrase)
			r.OutputSyslog.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputSyslog.TLS.PrivKeyPath)
			r.OutputSyslog.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputSyslog.TLS.RejectUnauthorized)
			r.OutputSyslog.TLS.Servername = types.StringPointerValue(resp.OutputSyslog.TLS.Servername)
		}
		r.OutputSyslog.Type = types.StringValue(string(resp.OutputSyslog.Type))
		r.OutputSyslog.UDPDNSResolvePeriodSec = types.Float64PointerValue(resp.OutputSyslog.UDPDNSResolvePeriodSec)
		r.OutputSyslog.WriteTimeout = types.Float64PointerValue(resp.OutputSyslog.WriteTimeout)
	}
	if resp.OutputTcpjson != nil {
		r.OutputTcpjson = &tfTypes.OutputTcpjson{}
		r.OutputTcpjson.AuthToken = types.StringPointerValue(resp.OutputTcpjson.AuthToken)
		if resp.OutputTcpjson.AuthType != nil {
			r.OutputTcpjson.AuthType = types.StringValue(string(*resp.OutputTcpjson.AuthType))
		} else {
			r.OutputTcpjson.AuthType = types.StringNull()
		}
		if resp.OutputTcpjson.Compression != nil {
			r.OutputTcpjson.Compression = types.StringValue(string(*resp.OutputTcpjson.Compression))
		} else {
			r.OutputTcpjson.Compression = types.StringNull()
		}
		r.OutputTcpjson.ConnectionTimeout = types.Float64PointerValue(resp.OutputTcpjson.ConnectionTimeout)
		r.OutputTcpjson.Description = types.StringPointerValue(resp.OutputTcpjson.Description)
		r.OutputTcpjson.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputTcpjson.DNSResolvePeriodSec)
		r.OutputTcpjson.Environment = types.StringPointerValue(resp.OutputTcpjson.Environment)
		r.OutputTcpjson.ExcludeSelf = types.BoolPointerValue(resp.OutputTcpjson.ExcludeSelf)
		r.OutputTcpjson.Host = types.StringPointerValue(resp.OutputTcpjson.Host)
		r.OutputTcpjson.Hosts = []tfTypes.OutputTcpjsonHosts{}
		if len(r.OutputTcpjson.Hosts) > len(resp.OutputTcpjson.Hosts) {
			r.OutputTcpjson.Hosts = r.OutputTcpjson.Hosts[:len(resp.OutputTcpjson.Hosts)]
		}
		for hostsCount4, hostsItem4 := range resp.OutputTcpjson.Hosts {
			var hosts4 tfTypes.OutputTcpjsonHosts
			hosts4.Host = types.StringValue(hostsItem4.Host)
			hosts4.Port = types.Float64Value(hostsItem4.Port)
			hosts4.Servername = types.StringPointerValue(hostsItem4.Servername)
			if hostsItem4.TLS != nil {
				hosts4.TLS = types.StringValue(string(*hostsItem4.TLS))
			} else {
				hosts4.TLS = types.StringNull()
			}
			hosts4.Weight = types.Float64PointerValue(hostsItem4.Weight)
			if hostsCount4+1 > len(r.OutputTcpjson.Hosts) {
				r.OutputTcpjson.Hosts = append(r.OutputTcpjson.Hosts, hosts4)
			} else {
				r.OutputTcpjson.Hosts[hostsCount4].Host = hosts4.Host
				r.OutputTcpjson.Hosts[hostsCount4].Port = hosts4.Port
				r.OutputTcpjson.Hosts[hostsCount4].Servername = hosts4.Servername
				r.OutputTcpjson.Hosts[hostsCount4].TLS = hosts4.TLS
				r.OutputTcpjson.Hosts[hostsCount4].Weight = hosts4.Weight
			}
		}
		r.OutputTcpjson.ID = types.StringValue(resp.OutputTcpjson.ID)
		r.OutputTcpjson.LoadBalanced = types.BoolPointerValue(resp.OutputTcpjson.LoadBalanced)
		r.OutputTcpjson.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputTcpjson.LoadBalanceStatsPeriodSec)
		r.OutputTcpjson.LogFailedRequests = types.BoolPointerValue(resp.OutputTcpjson.LogFailedRequests)
		r.OutputTcpjson.MaxConcurrentSenders = types.Float64PointerValue(resp.OutputTcpjson.MaxConcurrentSenders)
		if resp.OutputTcpjson.OnBackpressure != nil {
			r.OutputTcpjson.OnBackpressure = types.StringValue(string(*resp.OutputTcpjson.OnBackpressure))
		} else {
			r.OutputTcpjson.OnBackpressure = types.StringNull()
		}
		r.OutputTcpjson.Pipeline = types.StringPointerValue(resp.OutputTcpjson.Pipeline)
		r.OutputTcpjson.Port = types.Float64PointerValue(resp.OutputTcpjson.Port)
		if resp.OutputTcpjson.PqCompress != nil {
			r.OutputTcpjson.PqCompress = types.StringValue(string(*resp.OutputTcpjson.PqCompress))
		} else {
			r.OutputTcpjson.PqCompress = types.StringNull()
		}
		if resp.OutputTcpjson.PqControls == nil {
			r.OutputTcpjson.PqControls = nil
		} else {
			r.OutputTcpjson.PqControls = &tfTypes.OutputTcpjsonPqControls{}
		}
		r.OutputTcpjson.PqMaxFileSize = types.StringPointerValue(resp.OutputTcpjson.PqMaxFileSize)
		r.OutputTcpjson.PqMaxSize = types.StringPointerValue(resp.OutputTcpjson.PqMaxSize)
		if resp.OutputTcpjson.PqMode != nil {
			r.OutputTcpjson.PqMode = types.StringValue(string(*resp.OutputTcpjson.PqMode))
		} else {
			r.OutputTcpjson.PqMode = types.StringNull()
		}
		if resp.OutputTcpjson.PqOnBackpressure != nil {
			r.OutputTcpjson.PqOnBackpressure = types.StringValue(string(*resp.OutputTcpjson.PqOnBackpressure))
		} else {
			r.OutputTcpjson.PqOnBackpressure = types.StringNull()
		}
		r.OutputTcpjson.PqPath = types.StringPointerValue(resp.OutputTcpjson.PqPath)
		r.OutputTcpjson.SendHeader = types.BoolPointerValue(resp.OutputTcpjson.SendHeader)
		r.OutputTcpjson.Streamtags = make([]types.String, 0, len(resp.OutputTcpjson.Streamtags))
		for _, v := range resp.OutputTcpjson.Streamtags {
			r.OutputTcpjson.Streamtags = append(r.OutputTcpjson.Streamtags, types.StringValue(v))
		}
		r.OutputTcpjson.SystemFields = make([]types.String, 0, len(resp.OutputTcpjson.SystemFields))
		for _, v := range resp.OutputTcpjson.SystemFields {
			r.OutputTcpjson.SystemFields = append(r.OutputTcpjson.SystemFields, types.StringValue(v))
		}
		r.OutputTcpjson.TextSecret = types.StringPointerValue(resp.OutputTcpjson.TextSecret)
		r.OutputTcpjson.ThrottleRatePerSec = types.StringPointerValue(resp.OutputTcpjson.ThrottleRatePerSec)
		if resp.OutputTcpjson.TLS == nil {
			r.OutputTcpjson.TLS = nil
		} else {
			r.OutputTcpjson.TLS = &tfTypes.OutputTcpjsonTLSSettingsClientSide{}
			r.OutputTcpjson.TLS.CaPath = types.StringPointerValue(resp.OutputTcpjson.TLS.CaPath)
			r.OutputTcpjson.TLS.CertificateName = types.StringPointerValue(resp.OutputTcpjson.TLS.CertificateName)
			r.OutputTcpjson.TLS.CertPath = types.StringPointerValue(resp.OutputTcpjson.TLS.CertPath)
			r.OutputTcpjson.TLS.Disabled = types.BoolPointerValue(resp.OutputTcpjson.TLS.Disabled)
			if resp.OutputTcpjson.TLS.MaxVersion != nil {
				r.OutputTcpjson.TLS.MaxVersion = types.StringValue(string(*resp.OutputTcpjson.TLS.MaxVersion))
			} else {
				r.OutputTcpjson.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputTcpjson.TLS.MinVersion != nil {
				r.OutputTcpjson.TLS.MinVersion = types.StringValue(string(*resp.OutputTcpjson.TLS.MinVersion))
			} else {
				r.OutputTcpjson.TLS.MinVersion = types.StringNull()
			}
			r.OutputTcpjson.TLS.Passphrase = types.StringPointerValue(resp.OutputTcpjson.TLS.Passphrase)
			r.OutputTcpjson.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputTcpjson.TLS.PrivKeyPath)
			r.OutputTcpjson.TLS.RejectUnauthorized = types.BoolPointerValue(resp.OutputTcpjson.TLS.RejectUnauthorized)
			r.OutputTcpjson.TLS.Servername = types.StringPointerValue(resp.OutputTcpjson.TLS.Servername)
		}
		r.OutputTcpjson.TokenTTLMinutes = types.Float64PointerValue(resp.OutputTcpjson.TokenTTLMinutes)
		r.OutputTcpjson.Type = types.StringValue(string(resp.OutputTcpjson.Type))
		r.OutputTcpjson.WriteTimeout = types.Float64PointerValue(resp.OutputTcpjson.WriteTimeout)
	}
	if resp.OutputWavefront != nil {
		r.OutputWavefront = &tfTypes.OutputWavefront{}
		if resp.OutputWavefront.AuthType != nil {
			r.OutputWavefront.AuthType = types.StringValue(string(*resp.OutputWavefront.AuthType))
		} else {
			r.OutputWavefront.AuthType = types.StringNull()
		}
		r.OutputWavefront.Compress = types.BoolPointerValue(resp.OutputWavefront.Compress)
		r.OutputWavefront.Concurrency = types.Float64PointerValue(resp.OutputWavefront.Concurrency)
		r.OutputWavefront.Description = types.StringPointerValue(resp.OutputWavefront.Description)
		r.OutputWavefront.Domain = types.StringPointerValue(resp.OutputWavefront.Domain)
		r.OutputWavefront.Environment = types.StringPointerValue(resp.OutputWavefront.Environment)
		r.OutputWavefront.ExtraHTTPHeaders = []tfTypes.OutputWavefrontExtraHTTPHeaders{}
		if len(r.OutputWavefront.ExtraHTTPHeaders) > len(resp.OutputWavefront.ExtraHTTPHeaders) {
			r.OutputWavefront.ExtraHTTPHeaders = r.OutputWavefront.ExtraHTTPHeaders[:len(resp.OutputWavefront.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount26, extraHTTPHeadersItem26 := range resp.OutputWavefront.ExtraHTTPHeaders {
			var extraHTTPHeaders26 tfTypes.OutputWavefrontExtraHTTPHeaders
			extraHTTPHeaders26.Name = types.StringPointerValue(extraHTTPHeadersItem26.Name)
			extraHTTPHeaders26.Value = types.StringValue(extraHTTPHeadersItem26.Value)
			if extraHTTPHeadersCount26+1 > len(r.OutputWavefront.ExtraHTTPHeaders) {
				r.OutputWavefront.ExtraHTTPHeaders = append(r.OutputWavefront.ExtraHTTPHeaders, extraHTTPHeaders26)
			} else {
				r.OutputWavefront.ExtraHTTPHeaders[extraHTTPHeadersCount26].Name = extraHTTPHeaders26.Name
				r.OutputWavefront.ExtraHTTPHeaders[extraHTTPHeadersCount26].Value = extraHTTPHeaders26.Value
			}
		}
		if resp.OutputWavefront.FailedRequestLoggingMode != nil {
			r.OutputWavefront.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputWavefront.FailedRequestLoggingMode))
		} else {
			r.OutputWavefront.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputWavefront.FlushPeriodSec = types.Float64PointerValue(resp.OutputWavefront.FlushPeriodSec)
		r.OutputWavefront.ID = types.StringPointerValue(resp.OutputWavefront.ID)
		r.OutputWavefront.MaxPayloadEvents = types.Float64PointerValue(resp.OutputWavefront.MaxPayloadEvents)
		r.OutputWavefront.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputWavefront.MaxPayloadSizeKB)
		if resp.OutputWavefront.OnBackpressure != nil {
			r.OutputWavefront.OnBackpressure = types.StringValue(string(*resp.OutputWavefront.OnBackpressure))
		} else {
			r.OutputWavefront.OnBackpressure = types.StringNull()
		}
		r.OutputWavefront.Pipeline = types.StringPointerValue(resp.OutputWavefront.Pipeline)
		if resp.OutputWavefront.PqCompress != nil {
			r.OutputWavefront.PqCompress = types.StringValue(string(*resp.OutputWavefront.PqCompress))
		} else {
			r.OutputWavefront.PqCompress = types.StringNull()
		}
		if resp.OutputWavefront.PqControls == nil {
			r.OutputWavefront.PqControls = nil
		} else {
			r.OutputWavefront.PqControls = &tfTypes.OutputWavefrontPqControls{}
		}
		r.OutputWavefront.PqMaxFileSize = types.StringPointerValue(resp.OutputWavefront.PqMaxFileSize)
		r.OutputWavefront.PqMaxSize = types.StringPointerValue(resp.OutputWavefront.PqMaxSize)
		if resp.OutputWavefront.PqMode != nil {
			r.OutputWavefront.PqMode = types.StringValue(string(*resp.OutputWavefront.PqMode))
		} else {
			r.OutputWavefront.PqMode = types.StringNull()
		}
		if resp.OutputWavefront.PqOnBackpressure != nil {
			r.OutputWavefront.PqOnBackpressure = types.StringValue(string(*resp.OutputWavefront.PqOnBackpressure))
		} else {
			r.OutputWavefront.PqOnBackpressure = types.StringNull()
		}
		r.OutputWavefront.PqPath = types.StringPointerValue(resp.OutputWavefront.PqPath)
		r.OutputWavefront.RejectUnauthorized = types.BoolPointerValue(resp.OutputWavefront.RejectUnauthorized)
		r.OutputWavefront.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputWavefront.ResponseHonorRetryAfterHeader)
		r.OutputWavefront.ResponseRetrySettings = []tfTypes.OutputWavefrontResponseRetrySettings{}
		if len(r.OutputWavefront.ResponseRetrySettings) > len(resp.OutputWavefront.ResponseRetrySettings) {
			r.OutputWavefront.ResponseRetrySettings = r.OutputWavefront.ResponseRetrySettings[:len(resp.OutputWavefront.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount27, responseRetrySettingsItem27 := range resp.OutputWavefront.ResponseRetrySettings {
			var responseRetrySettings27 tfTypes.OutputWavefrontResponseRetrySettings
			responseRetrySettings27.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem27.BackoffRate)
			responseRetrySettings27.HTTPStatus = types.Float64Value(responseRetrySettingsItem27.HTTPStatus)
			responseRetrySettings27.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem27.InitialBackoff)
			responseRetrySettings27.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem27.MaxBackoff)
			if responseRetrySettingsCount27+1 > len(r.OutputWavefront.ResponseRetrySettings) {
				r.OutputWavefront.ResponseRetrySettings = append(r.OutputWavefront.ResponseRetrySettings, responseRetrySettings27)
			} else {
				r.OutputWavefront.ResponseRetrySettings[responseRetrySettingsCount27].BackoffRate = responseRetrySettings27.BackoffRate
				r.OutputWavefront.ResponseRetrySettings[responseRetrySettingsCount27].HTTPStatus = responseRetrySettings27.HTTPStatus
				r.OutputWavefront.ResponseRetrySettings[responseRetrySettingsCount27].InitialBackoff = responseRetrySettings27.InitialBackoff
				r.OutputWavefront.ResponseRetrySettings[responseRetrySettingsCount27].MaxBackoff = responseRetrySettings27.MaxBackoff
			}
		}
		r.OutputWavefront.SafeHeaders = make([]types.String, 0, len(resp.OutputWavefront.SafeHeaders))
		for _, v := range resp.OutputWavefront.SafeHeaders {
			r.OutputWavefront.SafeHeaders = append(r.OutputWavefront.SafeHeaders, types.StringValue(v))
		}
		r.OutputWavefront.Streamtags = make([]types.String, 0, len(resp.OutputWavefront.Streamtags))
		for _, v := range resp.OutputWavefront.Streamtags {
			r.OutputWavefront.Streamtags = append(r.OutputWavefront.Streamtags, types.StringValue(v))
		}
		r.OutputWavefront.SystemFields = make([]types.String, 0, len(resp.OutputWavefront.SystemFields))
		for _, v := range resp.OutputWavefront.SystemFields {
			r.OutputWavefront.SystemFields = append(r.OutputWavefront.SystemFields, types.StringValue(v))
		}
		r.OutputWavefront.TextSecret = types.StringPointerValue(resp.OutputWavefront.TextSecret)
		if resp.OutputWavefront.TimeoutRetrySettings == nil {
			r.OutputWavefront.TimeoutRetrySettings = nil
		} else {
			r.OutputWavefront.TimeoutRetrySettings = &tfTypes.OutputWavefrontTimeoutRetrySettings{}
			r.OutputWavefront.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputWavefront.TimeoutRetrySettings.BackoffRate)
			r.OutputWavefront.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputWavefront.TimeoutRetrySettings.InitialBackoff)
			r.OutputWavefront.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputWavefront.TimeoutRetrySettings.MaxBackoff)
			r.OutputWavefront.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputWavefront.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputWavefront.TimeoutSec = types.Float64PointerValue(resp.OutputWavefront.TimeoutSec)
		r.OutputWavefront.Token = types.StringPointerValue(resp.OutputWavefront.Token)
		r.OutputWavefront.Type = types.StringValue(string(resp.OutputWavefront.Type))
		r.OutputWavefront.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputWavefront.UseRoundRobinDNS)
	}
	if resp.OutputWebhook != nil {
		r.OutputWebhook = &tfTypes.OutputWebhook{}
		r.OutputWebhook.AdvancedContentType = types.StringPointerValue(resp.OutputWebhook.AdvancedContentType)
		r.OutputWebhook.AuthHeaderExpr = types.StringPointerValue(resp.OutputWebhook.AuthHeaderExpr)
		if resp.OutputWebhook.AuthType != nil {
			r.OutputWebhook.AuthType = types.StringValue(string(*resp.OutputWebhook.AuthType))
		} else {
			r.OutputWebhook.AuthType = types.StringNull()
		}
		r.OutputWebhook.Compress = types.BoolPointerValue(resp.OutputWebhook.Compress)
		r.OutputWebhook.Concurrency = types.Float64PointerValue(resp.OutputWebhook.Concurrency)
		r.OutputWebhook.CredentialsSecret = types.StringPointerValue(resp.OutputWebhook.CredentialsSecret)
		r.OutputWebhook.CustomContentType = types.StringPointerValue(resp.OutputWebhook.CustomContentType)
		r.OutputWebhook.CustomDropWhenNull = types.BoolPointerValue(resp.OutputWebhook.CustomDropWhenNull)
		r.OutputWebhook.CustomEventDelimiter = types.StringPointerValue(resp.OutputWebhook.CustomEventDelimiter)
		r.OutputWebhook.CustomPayloadExpression = types.StringPointerValue(resp.OutputWebhook.CustomPayloadExpression)
		r.OutputWebhook.CustomSourceExpression = types.StringPointerValue(resp.OutputWebhook.CustomSourceExpression)
		r.OutputWebhook.Description = types.StringPointerValue(resp.OutputWebhook.Description)
		r.OutputWebhook.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputWebhook.DNSResolvePeriodSec)
		r.OutputWebhook.Environment = types.StringPointerValue(resp.OutputWebhook.Environment)
		r.OutputWebhook.ExcludeSelf = types.BoolPointerValue(resp.OutputWebhook.ExcludeSelf)
		r.OutputWebhook.ExtraHTTPHeaders = []tfTypes.OutputWebhookExtraHTTPHeaders{}
		if len(r.OutputWebhook.ExtraHTTPHeaders) > len(resp.OutputWebhook.ExtraHTTPHeaders) {
			r.OutputWebhook.ExtraHTTPHeaders = r.OutputWebhook.ExtraHTTPHeaders[:len(resp.OutputWebhook.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount27, extraHTTPHeadersItem27 := range resp.OutputWebhook.ExtraHTTPHeaders {
			var extraHTTPHeaders27 tfTypes.OutputWebhookExtraHTTPHeaders
			extraHTTPHeaders27.Name = types.StringPointerValue(extraHTTPHeadersItem27.Name)
			extraHTTPHeaders27.Value = types.StringValue(extraHTTPHeadersItem27.Value)
			if extraHTTPHeadersCount27+1 > len(r.OutputWebhook.ExtraHTTPHeaders) {
				r.OutputWebhook.ExtraHTTPHeaders = append(r.OutputWebhook.ExtraHTTPHeaders, extraHTTPHeaders27)
			} else {
				r.OutputWebhook.ExtraHTTPHeaders[extraHTTPHeadersCount27].Name = extraHTTPHeaders27.Name
				r.OutputWebhook.ExtraHTTPHeaders[extraHTTPHeadersCount27].Value = extraHTTPHeaders27.Value
			}
		}
		if resp.OutputWebhook.FailedRequestLoggingMode != nil {
			r.OutputWebhook.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputWebhook.FailedRequestLoggingMode))
		} else {
			r.OutputWebhook.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputWebhook.FlushPeriodSec = types.Float64PointerValue(resp.OutputWebhook.FlushPeriodSec)
		if resp.OutputWebhook.Format != nil {
			r.OutputWebhook.Format = types.StringValue(string(*resp.OutputWebhook.Format))
		} else {
			r.OutputWebhook.Format = types.StringNull()
		}
		r.OutputWebhook.FormatEventCode = types.StringPointerValue(resp.OutputWebhook.FormatEventCode)
		r.OutputWebhook.FormatPayloadCode = types.StringPointerValue(resp.OutputWebhook.FormatPayloadCode)
		r.OutputWebhook.ID = types.StringValue(resp.OutputWebhook.ID)
		r.OutputWebhook.KeepAlive = types.BoolPointerValue(resp.OutputWebhook.KeepAlive)
		r.OutputWebhook.LoadBalanced = types.BoolPointerValue(resp.OutputWebhook.LoadBalanced)
		r.OutputWebhook.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputWebhook.LoadBalanceStatsPeriodSec)
		r.OutputWebhook.LoginURL = types.StringPointerValue(resp.OutputWebhook.LoginURL)
		r.OutputWebhook.MaxPayloadEvents = types.Float64PointerValue(resp.OutputWebhook.MaxPayloadEvents)
		r.OutputWebhook.MaxPayloadSizeKB = types.Float64PointerValue(resp.OutputWebhook.MaxPayloadSizeKB)
		if resp.OutputWebhook.Method != nil {
			r.OutputWebhook.Method = types.StringValue(string(*resp.OutputWebhook.Method))
		} else {
			r.OutputWebhook.Method = types.StringNull()
		}
		r.OutputWebhook.OauthHeaders = []tfTypes.OutputWebhookOauthHeaders{}
		if len(r.OutputWebhook.OauthHeaders) > len(resp.OutputWebhook.OauthHeaders) {
			r.OutputWebhook.OauthHeaders = r.OutputWebhook.OauthHeaders[:len(resp.OutputWebhook.OauthHeaders)]
		}
		for oauthHeadersCount4, oauthHeadersItem4 := range resp.OutputWebhook.OauthHeaders {
			var oauthHeaders4 tfTypes.OutputWebhookOauthHeaders
			oauthHeaders4.Name = types.StringValue(oauthHeadersItem4.Name)
			oauthHeaders4.Value = types.StringValue(oauthHeadersItem4.Value)
			if oauthHeadersCount4+1 > len(r.OutputWebhook.OauthHeaders) {
				r.OutputWebhook.OauthHeaders = append(r.OutputWebhook.OauthHeaders, oauthHeaders4)
			} else {
				r.OutputWebhook.OauthHeaders[oauthHeadersCount4].Name = oauthHeaders4.Name
				r.OutputWebhook.OauthHeaders[oauthHeadersCount4].Value = oauthHeaders4.Value
			}
		}
		r.OutputWebhook.OauthParams = []tfTypes.OutputWebhookOauthParams{}
		if len(r.OutputWebhook.OauthParams) > len(resp.OutputWebhook.OauthParams) {
			r.OutputWebhook.OauthParams = r.OutputWebhook.OauthParams[:len(resp.OutputWebhook.OauthParams)]
		}
		for oauthParamsCount4, oauthParamsItem4 := range resp.OutputWebhook.OauthParams {
			var oauthParams4 tfTypes.OutputWebhookOauthParams
			oauthParams4.Name = types.StringValue(oauthParamsItem4.Name)
			oauthParams4.Value = types.StringValue(oauthParamsItem4.Value)
			if oauthParamsCount4+1 > len(r.OutputWebhook.OauthParams) {
				r.OutputWebhook.OauthParams = append(r.OutputWebhook.OauthParams, oauthParams4)
			} else {
				r.OutputWebhook.OauthParams[oauthParamsCount4].Name = oauthParams4.Name
				r.OutputWebhook.OauthParams[oauthParamsCount4].Value = oauthParams4.Value
			}
		}
		if resp.OutputWebhook.OnBackpressure != nil {
			r.OutputWebhook.OnBackpressure = types.StringValue(string(*resp.OutputWebhook.OnBackpressure))
		} else {
			r.OutputWebhook.OnBackpressure = types.StringNull()
		}
		r.OutputWebhook.Password = types.StringPointerValue(resp.OutputWebhook.Password)
		r.OutputWebhook.Pipeline = types.StringPointerValue(resp.OutputWebhook.Pipeline)
		if resp.OutputWebhook.PqCompress != nil {
			r.OutputWebhook.PqCompress = types.StringValue(string(*resp.OutputWebhook.PqCompress))
		} else {
			r.OutputWebhook.PqCompress = types.StringNull()
		}
		if resp.OutputWebhook.PqControls == nil {
			r.OutputWebhook.PqControls = nil
		} else {
			r.OutputWebhook.PqControls = &tfTypes.PqControls{}
		}
		r.OutputWebhook.PqMaxFileSize = types.StringPointerValue(resp.OutputWebhook.PqMaxFileSize)
		r.OutputWebhook.PqMaxSize = types.StringPointerValue(resp.OutputWebhook.PqMaxSize)
		if resp.OutputWebhook.PqMode != nil {
			r.OutputWebhook.PqMode = types.StringValue(string(*resp.OutputWebhook.PqMode))
		} else {
			r.OutputWebhook.PqMode = types.StringNull()
		}
		if resp.OutputWebhook.PqOnBackpressure != nil {
			r.OutputWebhook.PqOnBackpressure = types.StringValue(string(*resp.OutputWebhook.PqOnBackpressure))
		} else {
			r.OutputWebhook.PqOnBackpressure = types.StringNull()
		}
		r.OutputWebhook.PqPath = types.StringPointerValue(resp.OutputWebhook.PqPath)
		r.OutputWebhook.RejectUnauthorized = types.BoolPointerValue(resp.OutputWebhook.RejectUnauthorized)
		r.OutputWebhook.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputWebhook.ResponseHonorRetryAfterHeader)
		r.OutputWebhook.ResponseRetrySettings = []tfTypes.ResponseRetrySettings{}
		if len(r.OutputWebhook.ResponseRetrySettings) > len(resp.OutputWebhook.ResponseRetrySettings) {
			r.OutputWebhook.ResponseRetrySettings = r.OutputWebhook.ResponseRetrySettings[:len(resp.OutputWebhook.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount28, responseRetrySettingsItem28 := range resp.OutputWebhook.ResponseRetrySettings {
			var responseRetrySettings28 tfTypes.ResponseRetrySettings
			responseRetrySettings28.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem28.BackoffRate)
			responseRetrySettings28.HTTPStatus = types.Float64Value(responseRetrySettingsItem28.HTTPStatus)
			responseRetrySettings28.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem28.InitialBackoff)
			responseRetrySettings28.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem28.MaxBackoff)
			if responseRetrySettingsCount28+1 > len(r.OutputWebhook.ResponseRetrySettings) {
				r.OutputWebhook.ResponseRetrySettings = append(r.OutputWebhook.ResponseRetrySettings, responseRetrySettings28)
			} else {
				r.OutputWebhook.ResponseRetrySettings[responseRetrySettingsCount28].BackoffRate = responseRetrySettings28.BackoffRate
				r.OutputWebhook.ResponseRetrySettings[responseRetrySettingsCount28].HTTPStatus = responseRetrySettings28.HTTPStatus
				r.OutputWebhook.ResponseRetrySettings[responseRetrySettingsCount28].InitialBackoff = responseRetrySettings28.InitialBackoff
				r.OutputWebhook.ResponseRetrySettings[responseRetrySettingsCount28].MaxBackoff = responseRetrySettings28.MaxBackoff
			}
		}
		r.OutputWebhook.SafeHeaders = make([]types.String, 0, len(resp.OutputWebhook.SafeHeaders))
		for _, v := range resp.OutputWebhook.SafeHeaders {
			r.OutputWebhook.SafeHeaders = append(r.OutputWebhook.SafeHeaders, types.StringValue(v))
		}
		r.OutputWebhook.Secret = types.StringPointerValue(resp.OutputWebhook.Secret)
		r.OutputWebhook.SecretParamName = types.StringPointerValue(resp.OutputWebhook.SecretParamName)
		r.OutputWebhook.Streamtags = make([]types.String, 0, len(resp.OutputWebhook.Streamtags))
		for _, v := range resp.OutputWebhook.Streamtags {
			r.OutputWebhook.Streamtags = append(r.OutputWebhook.Streamtags, types.StringValue(v))
		}
		r.OutputWebhook.SystemFields = make([]types.String, 0, len(resp.OutputWebhook.SystemFields))
		for _, v := range resp.OutputWebhook.SystemFields {
			r.OutputWebhook.SystemFields = append(r.OutputWebhook.SystemFields, types.StringValue(v))
		}
		r.OutputWebhook.TextSecret = types.StringPointerValue(resp.OutputWebhook.TextSecret)
		if resp.OutputWebhook.TimeoutRetrySettings == nil {
			r.OutputWebhook.TimeoutRetrySettings = nil
		} else {
			r.OutputWebhook.TimeoutRetrySettings = &tfTypes.TimeoutRetrySettings{}
			r.OutputWebhook.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputWebhook.TimeoutRetrySettings.BackoffRate)
			r.OutputWebhook.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputWebhook.TimeoutRetrySettings.InitialBackoff)
			r.OutputWebhook.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputWebhook.TimeoutRetrySettings.MaxBackoff)
			r.OutputWebhook.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputWebhook.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputWebhook.TimeoutSec = types.Float64PointerValue(resp.OutputWebhook.TimeoutSec)
		if resp.OutputWebhook.TLS == nil {
			r.OutputWebhook.TLS = nil
		} else {
			r.OutputWebhook.TLS = &tfTypes.OutputWebhookTLSSettingsClientSide{}
			r.OutputWebhook.TLS.CaPath = types.StringPointerValue(resp.OutputWebhook.TLS.CaPath)
			r.OutputWebhook.TLS.CertificateName = types.StringPointerValue(resp.OutputWebhook.TLS.CertificateName)
			r.OutputWebhook.TLS.CertPath = types.StringPointerValue(resp.OutputWebhook.TLS.CertPath)
			r.OutputWebhook.TLS.Disabled = types.BoolPointerValue(resp.OutputWebhook.TLS.Disabled)
			if resp.OutputWebhook.TLS.MaxVersion != nil {
				r.OutputWebhook.TLS.MaxVersion = types.StringValue(string(*resp.OutputWebhook.TLS.MaxVersion))
			} else {
				r.OutputWebhook.TLS.MaxVersion = types.StringNull()
			}
			if resp.OutputWebhook.TLS.MinVersion != nil {
				r.OutputWebhook.TLS.MinVersion = types.StringValue(string(*resp.OutputWebhook.TLS.MinVersion))
			} else {
				r.OutputWebhook.TLS.MinVersion = types.StringNull()
			}
			r.OutputWebhook.TLS.Passphrase = types.StringPointerValue(resp.OutputWebhook.TLS.Passphrase)
			r.OutputWebhook.TLS.PrivKeyPath = types.StringPointerValue(resp.OutputWebhook.TLS.PrivKeyPath)
			r.OutputWebhook.TLS.Servername = types.StringPointerValue(resp.OutputWebhook.TLS.Servername)
		}
		r.OutputWebhook.Token = types.StringPointerValue(resp.OutputWebhook.Token)
		r.OutputWebhook.TokenAttributeName = types.StringPointerValue(resp.OutputWebhook.TokenAttributeName)
		r.OutputWebhook.TokenTimeoutSecs = types.Float64PointerValue(resp.OutputWebhook.TokenTimeoutSecs)
		r.OutputWebhook.TotalMemoryLimitKB = types.Float64PointerValue(resp.OutputWebhook.TotalMemoryLimitKB)
		r.OutputWebhook.Type = types.StringValue(string(resp.OutputWebhook.Type))
		r.OutputWebhook.URL = types.StringPointerValue(resp.OutputWebhook.URL)
		r.OutputWebhook.Urls = []tfTypes.Urls{}
		if len(r.OutputWebhook.Urls) > len(resp.OutputWebhook.Urls) {
			r.OutputWebhook.Urls = r.OutputWebhook.Urls[:len(resp.OutputWebhook.Urls)]
		}
		for urlsCount3, urlsItem3 := range resp.OutputWebhook.Urls {
			var urls3 tfTypes.Urls
			urls3.URL = types.StringValue(urlsItem3.URL)
			urls3.Weight = types.Float64PointerValue(urlsItem3.Weight)
			if urlsCount3+1 > len(r.OutputWebhook.Urls) {
				r.OutputWebhook.Urls = append(r.OutputWebhook.Urls, urls3)
			} else {
				r.OutputWebhook.Urls[urlsCount3].URL = urls3.URL
				r.OutputWebhook.Urls[urlsCount3].Weight = urls3.Weight
			}
		}
		r.OutputWebhook.Username = types.StringPointerValue(resp.OutputWebhook.Username)
		r.OutputWebhook.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputWebhook.UseRoundRobinDNS)
	}
	if resp.OutputXsiam != nil {
		r.OutputXsiam = &tfTypes.OutputXsiam{}
		if resp.OutputXsiam.AuthType != nil {
			r.OutputXsiam.AuthType = types.StringValue(string(*resp.OutputXsiam.AuthType))
		} else {
			r.OutputXsiam.AuthType = types.StringNull()
		}
		r.OutputXsiam.Compress = types.BoolPointerValue(resp.OutputXsiam.Compress)
		r.OutputXsiam.Concurrency = types.Float64PointerValue(resp.OutputXsiam.Concurrency)
		r.OutputXsiam.Description = types.StringPointerValue(resp.OutputXsiam.Description)
		r.OutputXsiam.DNSResolvePeriodSec = types.Float64PointerValue(resp.OutputXsiam.DNSResolvePeriodSec)
		r.OutputXsiam.Environment = types.StringPointerValue(resp.OutputXsiam.Environment)
		r.OutputXsiam.ExcludeSelf = types.BoolPointerValue(resp.OutputXsiam.ExcludeSelf)
		r.OutputXsiam.ExtraHTTPHeaders = []tfTypes.OutputXsiamExtraHTTPHeaders{}
		if len(r.OutputXsiam.ExtraHTTPHeaders) > len(resp.OutputXsiam.ExtraHTTPHeaders) {
			r.OutputXsiam.ExtraHTTPHeaders = r.OutputXsiam.ExtraHTTPHeaders[:len(resp.OutputXsiam.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount28, extraHTTPHeadersItem28 := range resp.OutputXsiam.ExtraHTTPHeaders {
			var extraHTTPHeaders28 tfTypes.OutputXsiamExtraHTTPHeaders
			extraHTTPHeaders28.Name = types.StringPointerValue(extraHTTPHeadersItem28.Name)
			extraHTTPHeaders28.Value = types.StringValue(extraHTTPHeadersItem28.Value)
			if extraHTTPHeadersCount28+1 > len(r.OutputXsiam.ExtraHTTPHeaders) {
				r.OutputXsiam.ExtraHTTPHeaders = append(r.OutputXsiam.ExtraHTTPHeaders, extraHTTPHeaders28)
			} else {
				r.OutputXsiam.ExtraHTTPHeaders[extraHTTPHeadersCount28].Name = extraHTTPHeaders28.Name
				r.OutputXsiam.ExtraHTTPHeaders[extraHTTPHeadersCount28].Value = extraHTTPHeaders28.Value
			}
		}
		if resp.OutputXsiam.FailedRequestLoggingMode != nil {
			r.OutputXsiam.FailedRequestLoggingMode = types.StringValue(string(*resp.OutputXsiam.FailedRequestLoggingMode))
		} else {
			r.OutputXsiam.FailedRequestLoggingMode = types.StringNull()
		}
		r.OutputXsiam.FlushPeriodSec = types.Float64PointerValue(resp.OutputXsiam.FlushPeriodSec)
		r.OutputXsiam.ID = types.StringValue(resp.OutputXsiam.ID)
		r.OutputXsiam.LoadBalanced = types.BoolPointerValue(resp.OutputXsiam.LoadBalanced)
		r.OutputXsiam.LoadBalanceStatsPeriodSec = types.Float64PointerValue(resp.OutputXsiam.LoadBalanceStatsPeriodSec)
		r.OutputXsiam.MaxPayloadEvents = types.Float64PointerValue(resp.OutputXsiam.MaxPayloadEvents)
		if resp.OutputXsiam.OnBackpressure != nil {
			r.OutputXsiam.OnBackpressure = types.StringValue(string(*resp.OutputXsiam.OnBackpressure))
		} else {
			r.OutputXsiam.OnBackpressure = types.StringNull()
		}
		r.OutputXsiam.Pipeline = types.StringPointerValue(resp.OutputXsiam.Pipeline)
		if resp.OutputXsiam.PqCompress != nil {
			r.OutputXsiam.PqCompress = types.StringValue(string(*resp.OutputXsiam.PqCompress))
		} else {
			r.OutputXsiam.PqCompress = types.StringNull()
		}
		if resp.OutputXsiam.PqControls == nil {
			r.OutputXsiam.PqControls = nil
		} else {
			r.OutputXsiam.PqControls = &tfTypes.OutputXsiamPqControls{}
		}
		r.OutputXsiam.PqMaxFileSize = types.StringPointerValue(resp.OutputXsiam.PqMaxFileSize)
		r.OutputXsiam.PqMaxSize = types.StringPointerValue(resp.OutputXsiam.PqMaxSize)
		if resp.OutputXsiam.PqMode != nil {
			r.OutputXsiam.PqMode = types.StringValue(string(*resp.OutputXsiam.PqMode))
		} else {
			r.OutputXsiam.PqMode = types.StringNull()
		}
		if resp.OutputXsiam.PqOnBackpressure != nil {
			r.OutputXsiam.PqOnBackpressure = types.StringValue(string(*resp.OutputXsiam.PqOnBackpressure))
		} else {
			r.OutputXsiam.PqOnBackpressure = types.StringNull()
		}
		r.OutputXsiam.PqPath = types.StringPointerValue(resp.OutputXsiam.PqPath)
		r.OutputXsiam.RejectUnauthorized = types.BoolPointerValue(resp.OutputXsiam.RejectUnauthorized)
		r.OutputXsiam.ResponseHonorRetryAfterHeader = types.BoolPointerValue(resp.OutputXsiam.ResponseHonorRetryAfterHeader)
		r.OutputXsiam.ResponseRetrySettings = []tfTypes.OutputXsiamResponseRetrySettings{}
		if len(r.OutputXsiam.ResponseRetrySettings) > len(resp.OutputXsiam.ResponseRetrySettings) {
			r.OutputXsiam.ResponseRetrySettings = r.OutputXsiam.ResponseRetrySettings[:len(resp.OutputXsiam.ResponseRetrySettings)]
		}
		for responseRetrySettingsCount29, responseRetrySettingsItem29 := range resp.OutputXsiam.ResponseRetrySettings {
			var responseRetrySettings29 tfTypes.OutputXsiamResponseRetrySettings
			responseRetrySettings29.BackoffRate = types.Float64PointerValue(responseRetrySettingsItem29.BackoffRate)
			responseRetrySettings29.HTTPStatus = types.Float64Value(responseRetrySettingsItem29.HTTPStatus)
			responseRetrySettings29.InitialBackoff = types.Float64PointerValue(responseRetrySettingsItem29.InitialBackoff)
			responseRetrySettings29.MaxBackoff = types.Float64PointerValue(responseRetrySettingsItem29.MaxBackoff)
			if responseRetrySettingsCount29+1 > len(r.OutputXsiam.ResponseRetrySettings) {
				r.OutputXsiam.ResponseRetrySettings = append(r.OutputXsiam.ResponseRetrySettings, responseRetrySettings29)
			} else {
				r.OutputXsiam.ResponseRetrySettings[responseRetrySettingsCount29].BackoffRate = responseRetrySettings29.BackoffRate
				r.OutputXsiam.ResponseRetrySettings[responseRetrySettingsCount29].HTTPStatus = responseRetrySettings29.HTTPStatus
				r.OutputXsiam.ResponseRetrySettings[responseRetrySettingsCount29].InitialBackoff = responseRetrySettings29.InitialBackoff
				r.OutputXsiam.ResponseRetrySettings[responseRetrySettingsCount29].MaxBackoff = responseRetrySettings29.MaxBackoff
			}
		}
		r.OutputXsiam.SafeHeaders = make([]types.String, 0, len(resp.OutputXsiam.SafeHeaders))
		for _, v := range resp.OutputXsiam.SafeHeaders {
			r.OutputXsiam.SafeHeaders = append(r.OutputXsiam.SafeHeaders, types.StringValue(v))
		}
		r.OutputXsiam.Streamtags = make([]types.String, 0, len(resp.OutputXsiam.Streamtags))
		for _, v := range resp.OutputXsiam.Streamtags {
			r.OutputXsiam.Streamtags = append(r.OutputXsiam.Streamtags, types.StringValue(v))
		}
		r.OutputXsiam.SystemFields = make([]types.String, 0, len(resp.OutputXsiam.SystemFields))
		for _, v := range resp.OutputXsiam.SystemFields {
			r.OutputXsiam.SystemFields = append(r.OutputXsiam.SystemFields, types.StringValue(v))
		}
		r.OutputXsiam.TextSecret = types.StringPointerValue(resp.OutputXsiam.TextSecret)
		r.OutputXsiam.ThrottleRateReqPerSec = types.Int64PointerValue(resp.OutputXsiam.ThrottleRateReqPerSec)
		if resp.OutputXsiam.TimeoutRetrySettings == nil {
			r.OutputXsiam.TimeoutRetrySettings = nil
		} else {
			r.OutputXsiam.TimeoutRetrySettings = &tfTypes.OutputXsiamTimeoutRetrySettings{}
			r.OutputXsiam.TimeoutRetrySettings.BackoffRate = types.Float64PointerValue(resp.OutputXsiam.TimeoutRetrySettings.BackoffRate)
			r.OutputXsiam.TimeoutRetrySettings.InitialBackoff = types.Float64PointerValue(resp.OutputXsiam.TimeoutRetrySettings.InitialBackoff)
			r.OutputXsiam.TimeoutRetrySettings.MaxBackoff = types.Float64PointerValue(resp.OutputXsiam.TimeoutRetrySettings.MaxBackoff)
			r.OutputXsiam.TimeoutRetrySettings.TimeoutRetry = types.BoolPointerValue(resp.OutputXsiam.TimeoutRetrySettings.TimeoutRetry)
		}
		r.OutputXsiam.TimeoutSec = types.Float64PointerValue(resp.OutputXsiam.TimeoutSec)
		r.OutputXsiam.Token = types.StringPointerValue(resp.OutputXsiam.Token)
		r.OutputXsiam.Type = types.StringValue(string(resp.OutputXsiam.Type))
		r.OutputXsiam.URL = types.StringPointerValue(resp.OutputXsiam.URL)
		r.OutputXsiam.Urls = []tfTypes.OutputXsiamUrls{}
		if len(r.OutputXsiam.Urls) > len(resp.OutputXsiam.Urls) {
			r.OutputXsiam.Urls = r.OutputXsiam.Urls[:len(resp.OutputXsiam.Urls)]
		}
		for urlsCount4, urlsItem4 := range resp.OutputXsiam.Urls {
			var urls4 tfTypes.OutputXsiamUrls
			urlResult, _ := json.Marshal(urlsItem4.URL)
			urls4.URL = types.StringValue(string(urlResult))
			urls4.Weight = types.Float64PointerValue(urlsItem4.Weight)
			if urlsCount4+1 > len(r.OutputXsiam.Urls) {
				r.OutputXsiam.Urls = append(r.OutputXsiam.Urls, urls4)
			} else {
				r.OutputXsiam.Urls[urlsCount4].URL = urls4.URL
				r.OutputXsiam.Urls[urlsCount4].Weight = urls4.Weight
			}
		}
		r.OutputXsiam.UseRoundRobinDNS = types.BoolPointerValue(resp.OutputXsiam.UseRoundRobinDNS)
	}

	return diags
}
