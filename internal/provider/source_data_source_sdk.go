// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-cribl-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/shared"
	"math/big"
)

func (r *SourceDataSourceModel) RefreshFromSharedInput(resp *shared.Input) {
	if resp.FortySeven != nil {
		r.FortySeven = &tfTypes.FortySeven{}
		r.FortySeven.BreakerRulesets = make([]types.String, 0, len(resp.FortySeven.BreakerRulesets))
		for _, v := range resp.FortySeven.BreakerRulesets {
			r.FortySeven.BreakerRulesets = append(r.FortySeven.BreakerRulesets, types.StringValue(v))
		}
		r.FortySeven.CheckFileModTime = types.BoolPointerValue(resp.FortySeven.CheckFileModTime)
		r.FortySeven.Connections = []tfTypes.InputConnections{}
		if len(r.FortySeven.Connections) > len(resp.FortySeven.Connections) {
			r.FortySeven.Connections = r.FortySeven.Connections[:len(resp.FortySeven.Connections)]
		}
		for connectionsCount, connectionsItem := range resp.FortySeven.Connections {
			var connections1 tfTypes.InputConnections
			connections1.Output = types.StringValue(connectionsItem.Output)
			connections1.Pipeline = types.StringPointerValue(connectionsItem.Pipeline)
			if connectionsCount+1 > len(r.FortySeven.Connections) {
				r.FortySeven.Connections = append(r.FortySeven.Connections, connections1)
			} else {
				r.FortySeven.Connections[connectionsCount].Output = connections1.Output
				r.FortySeven.Connections[connectionsCount].Pipeline = connections1.Pipeline
			}
		}
		r.FortySeven.DeleteFiles = types.BoolPointerValue(resp.FortySeven.DeleteFiles)
		if resp.FortySeven.Depth != nil {
			r.FortySeven.Depth = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.Depth)))
		} else {
			r.FortySeven.Depth = types.NumberNull()
		}
		r.FortySeven.Description = types.StringPointerValue(resp.FortySeven.Description)
		r.FortySeven.Disabled = types.BoolPointerValue(resp.FortySeven.Disabled)
		r.FortySeven.Environment = types.StringPointerValue(resp.FortySeven.Environment)
		r.FortySeven.Filenames = make([]types.String, 0, len(resp.FortySeven.Filenames))
		for _, v := range resp.FortySeven.Filenames {
			r.FortySeven.Filenames = append(r.FortySeven.Filenames, types.StringValue(v))
		}
		r.FortySeven.ForceText = types.BoolPointerValue(resp.FortySeven.ForceText)
		if resp.FortySeven.HashLen != nil {
			r.FortySeven.HashLen = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.HashLen)))
		} else {
			r.FortySeven.HashLen = types.NumberNull()
		}
		r.FortySeven.ID = types.StringValue(resp.FortySeven.ID)
		if resp.FortySeven.IdleTimeout != nil {
			r.FortySeven.IdleTimeout = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.IdleTimeout)))
		} else {
			r.FortySeven.IdleTimeout = types.NumberNull()
		}
		r.FortySeven.IncludeUnidentifiableBinary = types.BoolPointerValue(resp.FortySeven.IncludeUnidentifiableBinary)
		if resp.FortySeven.Interval != nil {
			r.FortySeven.Interval = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.Interval)))
		} else {
			r.FortySeven.Interval = types.NumberNull()
		}
		r.FortySeven.MaxAgeDur = types.StringPointerValue(resp.FortySeven.MaxAgeDur)
		r.FortySeven.Metadata = []tfTypes.InputMetadata{}
		if len(r.FortySeven.Metadata) > len(resp.FortySeven.Metadata) {
			r.FortySeven.Metadata = r.FortySeven.Metadata[:len(resp.FortySeven.Metadata)]
		}
		for metadataCount, metadataItem := range resp.FortySeven.Metadata {
			var metadata1 tfTypes.InputMetadata
			metadata1.Name = types.StringValue(metadataItem.Name)
			metadata1.Value = types.StringValue(metadataItem.Value)
			if metadataCount+1 > len(r.FortySeven.Metadata) {
				r.FortySeven.Metadata = append(r.FortySeven.Metadata, metadata1)
			} else {
				r.FortySeven.Metadata[metadataCount].Name = metadata1.Name
				r.FortySeven.Metadata[metadataCount].Value = metadata1.Value
			}
		}
		if resp.FortySeven.Mode != nil {
			r.FortySeven.Mode = types.StringValue(string(*resp.FortySeven.Mode))
		} else {
			r.FortySeven.Mode = types.StringNull()
		}
		r.FortySeven.Path = types.StringPointerValue(resp.FortySeven.Path)
		r.FortySeven.Pipeline = types.StringPointerValue(resp.FortySeven.Pipeline)
		if resp.FortySeven.Pq == nil {
			r.FortySeven.Pq = nil
		} else {
			r.FortySeven.Pq = &tfTypes.InputPq{}
			if resp.FortySeven.Pq.CommitFrequency != nil {
				r.FortySeven.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.Pq.CommitFrequency)))
			} else {
				r.FortySeven.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.FortySeven.Pq.Compress != nil {
				r.FortySeven.Pq.Compress = types.StringValue(string(*resp.FortySeven.Pq.Compress))
			} else {
				r.FortySeven.Pq.Compress = types.StringNull()
			}
			if resp.FortySeven.Pq.MaxBufferSize != nil {
				r.FortySeven.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.Pq.MaxBufferSize)))
			} else {
				r.FortySeven.Pq.MaxBufferSize = types.NumberNull()
			}
			r.FortySeven.Pq.MaxFileSize = types.StringPointerValue(resp.FortySeven.Pq.MaxFileSize)
			r.FortySeven.Pq.MaxSize = types.StringPointerValue(resp.FortySeven.Pq.MaxSize)
			if resp.FortySeven.Pq.Mode != nil {
				r.FortySeven.Pq.Mode = types.StringValue(string(*resp.FortySeven.Pq.Mode))
			} else {
				r.FortySeven.Pq.Mode = types.StringNull()
			}
			r.FortySeven.Pq.Path = types.StringPointerValue(resp.FortySeven.Pq.Path)
		}
		r.FortySeven.PqEnabled = types.BoolPointerValue(resp.FortySeven.PqEnabled)
		r.FortySeven.SendToRoutes = types.BoolPointerValue(resp.FortySeven.SendToRoutes)
		if resp.FortySeven.StaleChannelFlushMs != nil {
			r.FortySeven.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.StaleChannelFlushMs)))
		} else {
			r.FortySeven.StaleChannelFlushMs = types.NumberNull()
		}
		if resp.FortySeven.Status == nil {
			r.FortySeven.Status = nil
		} else {
			r.FortySeven.Status = &tfTypes.Input47Status{}
			r.FortySeven.Status.Health = types.StringPointerValue(resp.FortySeven.Status.Health)
			if resp.FortySeven.Status.Metrics == nil {
				r.FortySeven.Status.Metrics = nil
			} else {
				r.FortySeven.Status.Metrics = &tfTypes.Metrics{}
				if resp.FortySeven.Status.Metrics.Buffered != nil {
					r.FortySeven.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.Status.Metrics.Buffered)))
				} else {
					r.FortySeven.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.FortySeven.Status.Metrics.Dropped != nil {
					r.FortySeven.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.Status.Metrics.Dropped)))
				} else {
					r.FortySeven.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.FortySeven.Status.Metrics.Received != nil {
					r.FortySeven.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.Status.Metrics.Received)))
				} else {
					r.FortySeven.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.FortySeven.Status.Timestamp != nil {
				r.FortySeven.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.FortySeven.Status.Timestamp)))
			} else {
				r.FortySeven.Status.Timestamp = types.NumberNull()
			}
		}
		r.FortySeven.Streamtags = make([]types.String, 0, len(resp.FortySeven.Streamtags))
		for _, v := range resp.FortySeven.Streamtags {
			r.FortySeven.Streamtags = append(r.FortySeven.Streamtags, types.StringValue(v))
		}
		r.FortySeven.SuppressMissingPathErrors = types.BoolPointerValue(resp.FortySeven.SuppressMissingPathErrors)
		r.FortySeven.TailOnly = types.BoolPointerValue(resp.FortySeven.TailOnly)
		r.FortySeven.Type = types.StringValue(string(resp.FortySeven.Type))
	}
	if resp.FortyEight != nil {
		r.FortyEight = &tfTypes.FortyEight{}
		if resp.FortyEight.AuthType != nil {
			r.FortyEight.AuthType = types.StringValue(string(*resp.FortyEight.AuthType))
		} else {
			r.FortyEight.AuthType = types.StringNull()
		}
		r.FortyEight.BreakerRulesets = make([]types.String, 0, len(resp.FortyEight.BreakerRulesets))
		for _, v := range resp.FortyEight.BreakerRulesets {
			r.FortyEight.BreakerRulesets = append(r.FortyEight.BreakerRulesets, types.StringValue(v))
		}
		r.FortyEight.Connections = []tfTypes.Input48Connections{}
		if len(r.FortyEight.Connections) > len(resp.FortyEight.Connections) {
			r.FortyEight.Connections = r.FortyEight.Connections[:len(resp.FortyEight.Connections)]
		}
		for connectionsCount1, connectionsItem1 := range resp.FortyEight.Connections {
			var connections3 tfTypes.Input48Connections
			connections3.Output = types.StringValue(connectionsItem1.Output)
			connections3.Pipeline = types.StringPointerValue(connectionsItem1.Pipeline)
			if connectionsCount1+1 > len(r.FortyEight.Connections) {
				r.FortyEight.Connections = append(r.FortyEight.Connections, connections3)
			} else {
				r.FortyEight.Connections[connectionsCount1].Output = connections3.Output
				r.FortyEight.Connections[connectionsCount1].Pipeline = connections3.Pipeline
			}
		}
		r.FortyEight.Description = types.StringPointerValue(resp.FortyEight.Description)
		r.FortyEight.Disabled = types.BoolPointerValue(resp.FortyEight.Disabled)
		r.FortyEight.EnableHeader = types.BoolPointerValue(resp.FortyEight.EnableHeader)
		r.FortyEight.EnableProxyHeader = types.BoolPointerValue(resp.FortyEight.EnableProxyHeader)
		r.FortyEight.Environment = types.StringPointerValue(resp.FortyEight.Environment)
		r.FortyEight.Host = types.StringPointerValue(resp.FortyEight.Host)
		r.FortyEight.ID = types.StringPointerValue(resp.FortyEight.ID)
		r.FortyEight.IPWhitelistRegex = types.StringPointerValue(resp.FortyEight.IPWhitelistRegex)
		if resp.FortyEight.MaxActiveCxn != nil {
			r.FortyEight.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.MaxActiveCxn)))
		} else {
			r.FortyEight.MaxActiveCxn = types.NumberNull()
		}
		r.FortyEight.Metadata = []tfTypes.Input48Metadata{}
		if len(r.FortyEight.Metadata) > len(resp.FortyEight.Metadata) {
			r.FortyEight.Metadata = r.FortyEight.Metadata[:len(resp.FortyEight.Metadata)]
		}
		for metadataCount1, metadataItem1 := range resp.FortyEight.Metadata {
			var metadata3 tfTypes.Input48Metadata
			metadata3.Name = types.StringValue(metadataItem1.Name)
			metadata3.Value = types.StringValue(metadataItem1.Value)
			if metadataCount1+1 > len(r.FortyEight.Metadata) {
				r.FortyEight.Metadata = append(r.FortyEight.Metadata, metadata3)
			} else {
				r.FortyEight.Metadata[metadataCount1].Name = metadata3.Name
				r.FortyEight.Metadata[metadataCount1].Value = metadata3.Value
			}
		}
		r.FortyEight.Pipeline = types.StringPointerValue(resp.FortyEight.Pipeline)
		r.FortyEight.Port = types.NumberValue(big.NewFloat(float64(resp.FortyEight.Port)))
		if resp.FortyEight.Pq == nil {
			r.FortyEight.Pq = nil
		} else {
			r.FortyEight.Pq = &tfTypes.Input48Pq{}
			if resp.FortyEight.Pq.CommitFrequency != nil {
				r.FortyEight.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.Pq.CommitFrequency)))
			} else {
				r.FortyEight.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.FortyEight.Pq.Compress != nil {
				r.FortyEight.Pq.Compress = types.StringValue(string(*resp.FortyEight.Pq.Compress))
			} else {
				r.FortyEight.Pq.Compress = types.StringNull()
			}
			if resp.FortyEight.Pq.MaxBufferSize != nil {
				r.FortyEight.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.Pq.MaxBufferSize)))
			} else {
				r.FortyEight.Pq.MaxBufferSize = types.NumberNull()
			}
			r.FortyEight.Pq.MaxFileSize = types.StringPointerValue(resp.FortyEight.Pq.MaxFileSize)
			r.FortyEight.Pq.MaxSize = types.StringPointerValue(resp.FortyEight.Pq.MaxSize)
			if resp.FortyEight.Pq.Mode != nil {
				r.FortyEight.Pq.Mode = types.StringValue(string(*resp.FortyEight.Pq.Mode))
			} else {
				r.FortyEight.Pq.Mode = types.StringNull()
			}
			r.FortyEight.Pq.Path = types.StringPointerValue(resp.FortyEight.Pq.Path)
		}
		r.FortyEight.PqEnabled = types.BoolPointerValue(resp.FortyEight.PqEnabled)
		if resp.FortyEight.Preprocess == nil {
			r.FortyEight.Preprocess = nil
		} else {
			r.FortyEight.Preprocess = &tfTypes.InputPreprocess{}
			r.FortyEight.Preprocess.Args = make([]types.String, 0, len(resp.FortyEight.Preprocess.Args))
			for _, v := range resp.FortyEight.Preprocess.Args {
				r.FortyEight.Preprocess.Args = append(r.FortyEight.Preprocess.Args, types.StringValue(v))
			}
			r.FortyEight.Preprocess.Command = types.StringPointerValue(resp.FortyEight.Preprocess.Command)
			r.FortyEight.Preprocess.Disabled = types.BoolPointerValue(resp.FortyEight.Preprocess.Disabled)
		}
		r.FortyEight.SendToRoutes = types.BoolPointerValue(resp.FortyEight.SendToRoutes)
		if resp.FortyEight.SocketEndingMaxWait != nil {
			r.FortyEight.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.SocketEndingMaxWait)))
		} else {
			r.FortyEight.SocketEndingMaxWait = types.NumberNull()
		}
		if resp.FortyEight.SocketIdleTimeout != nil {
			r.FortyEight.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.SocketIdleTimeout)))
		} else {
			r.FortyEight.SocketIdleTimeout = types.NumberNull()
		}
		if resp.FortyEight.SocketMaxLifespan != nil {
			r.FortyEight.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.SocketMaxLifespan)))
		} else {
			r.FortyEight.SocketMaxLifespan = types.NumberNull()
		}
		if resp.FortyEight.StaleChannelFlushMs != nil {
			r.FortyEight.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.StaleChannelFlushMs)))
		} else {
			r.FortyEight.StaleChannelFlushMs = types.NumberNull()
		}
		if resp.FortyEight.Status == nil {
			r.FortyEight.Status = nil
		} else {
			r.FortyEight.Status = &tfTypes.Input48Status{}
			r.FortyEight.Status.Health = types.StringPointerValue(resp.FortyEight.Status.Health)
			if resp.FortyEight.Status.Metrics == nil {
				r.FortyEight.Status.Metrics = nil
			} else {
				r.FortyEight.Status.Metrics = &tfTypes.Input48Metrics{}
				if resp.FortyEight.Status.Metrics.Buffered != nil {
					r.FortyEight.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.Status.Metrics.Buffered)))
				} else {
					r.FortyEight.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.FortyEight.Status.Metrics.Dropped != nil {
					r.FortyEight.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.Status.Metrics.Dropped)))
				} else {
					r.FortyEight.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.FortyEight.Status.Metrics.Received != nil {
					r.FortyEight.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.Status.Metrics.Received)))
				} else {
					r.FortyEight.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.FortyEight.Status.Timestamp != nil {
				r.FortyEight.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.FortyEight.Status.Timestamp)))
			} else {
				r.FortyEight.Status.Timestamp = types.NumberNull()
			}
		}
		r.FortyEight.Streamtags = make([]types.String, 0, len(resp.FortyEight.Streamtags))
		for _, v := range resp.FortyEight.Streamtags {
			r.FortyEight.Streamtags = append(r.FortyEight.Streamtags, types.StringValue(v))
		}
		if resp.FortyEight.TLS == nil {
			r.FortyEight.TLS = nil
		} else {
			r.FortyEight.TLS = &tfTypes.InputTLSSettingsServerSide{}
			r.FortyEight.TLS.CaPath = types.StringPointerValue(resp.FortyEight.TLS.CaPath)
			r.FortyEight.TLS.CertificateName = types.StringPointerValue(resp.FortyEight.TLS.CertificateName)
			r.FortyEight.TLS.CertPath = types.StringPointerValue(resp.FortyEight.TLS.CertPath)
			if resp.FortyEight.TLS.CommonNameRegex == nil {
				r.FortyEight.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult, _ := json.Marshal(resp.FortyEight.TLS.CommonNameRegex)
				r.FortyEight.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult))
			}
			r.FortyEight.TLS.Disabled = types.BoolPointerValue(resp.FortyEight.TLS.Disabled)
			if resp.FortyEight.TLS.MaxVersion != nil {
				r.FortyEight.TLS.MaxVersion = types.StringValue(string(*resp.FortyEight.TLS.MaxVersion))
			} else {
				r.FortyEight.TLS.MaxVersion = types.StringNull()
			}
			if resp.FortyEight.TLS.MinVersion != nil {
				r.FortyEight.TLS.MinVersion = types.StringValue(string(*resp.FortyEight.TLS.MinVersion))
			} else {
				r.FortyEight.TLS.MinVersion = types.StringNull()
			}
			r.FortyEight.TLS.Passphrase = types.StringPointerValue(resp.FortyEight.TLS.Passphrase)
			r.FortyEight.TLS.PrivKeyPath = types.StringPointerValue(resp.FortyEight.TLS.PrivKeyPath)
			if resp.FortyEight.TLS.RejectUnauthorized == nil {
				r.FortyEight.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult, _ := json.Marshal(resp.FortyEight.TLS.RejectUnauthorized)
				r.FortyEight.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult))
			}
			r.FortyEight.TLS.RequestCert = types.BoolPointerValue(resp.FortyEight.TLS.RequestCert)
		}
		if resp.FortyEight.Type != nil {
			r.FortyEight.Type = types.StringValue(string(*resp.FortyEight.Type))
		} else {
			r.FortyEight.Type = types.StringNull()
		}
	}
	if resp.FortyNine != nil {
		r.FortyNine = &tfTypes.FortyNine{}
		r.FortyNine.AuthToken = types.StringPointerValue(resp.FortyNine.AuthToken)
		if resp.FortyNine.AuthType != nil {
			r.FortyNine.AuthType = types.StringValue(string(*resp.FortyNine.AuthType))
		} else {
			r.FortyNine.AuthType = types.StringNull()
		}
		r.FortyNine.BreakerRulesets = make([]types.String, 0, len(resp.FortyNine.BreakerRulesets))
		for _, v := range resp.FortyNine.BreakerRulesets {
			r.FortyNine.BreakerRulesets = append(r.FortyNine.BreakerRulesets, types.StringValue(v))
		}
		r.FortyNine.Connections = []tfTypes.Input49Connections{}
		if len(r.FortyNine.Connections) > len(resp.FortyNine.Connections) {
			r.FortyNine.Connections = r.FortyNine.Connections[:len(resp.FortyNine.Connections)]
		}
		for connectionsCount2, connectionsItem2 := range resp.FortyNine.Connections {
			var connections5 tfTypes.Input49Connections
			connections5.Output = types.StringValue(connectionsItem2.Output)
			connections5.Pipeline = types.StringPointerValue(connectionsItem2.Pipeline)
			if connectionsCount2+1 > len(r.FortyNine.Connections) {
				r.FortyNine.Connections = append(r.FortyNine.Connections, connections5)
			} else {
				r.FortyNine.Connections[connectionsCount2].Output = connections5.Output
				r.FortyNine.Connections[connectionsCount2].Pipeline = connections5.Pipeline
			}
		}
		r.FortyNine.Description = types.StringPointerValue(resp.FortyNine.Description)
		r.FortyNine.Disabled = types.BoolPointerValue(resp.FortyNine.Disabled)
		r.FortyNine.EnableProxyHeader = types.BoolPointerValue(resp.FortyNine.EnableProxyHeader)
		r.FortyNine.EnableUnixPath = types.BoolPointerValue(resp.FortyNine.EnableUnixPath)
		r.FortyNine.Environment = types.StringPointerValue(resp.FortyNine.Environment)
		if resp.FortyNine.Filter == nil {
			r.FortyNine.Filter = nil
		} else {
			r.FortyNine.Filter = &tfTypes.Filter{}
			r.FortyNine.Filter.Allow = []tfTypes.Allow{}
			if len(r.FortyNine.Filter.Allow) > len(resp.FortyNine.Filter.Allow) {
				r.FortyNine.Filter.Allow = r.FortyNine.Filter.Allow[:len(resp.FortyNine.Filter.Allow)]
			}
			for allowCount, allowItem := range resp.FortyNine.Filter.Allow {
				var allow1 tfTypes.Allow
				allow1.Arg = types.StringPointerValue(allowItem.Arg)
				allow1.Config = types.StringValue(allowItem.Config)
				allow1.Procname = types.StringValue(allowItem.Procname)
				if allowCount+1 > len(r.FortyNine.Filter.Allow) {
					r.FortyNine.Filter.Allow = append(r.FortyNine.Filter.Allow, allow1)
				} else {
					r.FortyNine.Filter.Allow[allowCount].Arg = allow1.Arg
					r.FortyNine.Filter.Allow[allowCount].Config = allow1.Config
					r.FortyNine.Filter.Allow[allowCount].Procname = allow1.Procname
				}
			}
			r.FortyNine.Filter.TransportURL = types.StringPointerValue(resp.FortyNine.Filter.TransportURL)
		}
		r.FortyNine.Host = types.StringPointerValue(resp.FortyNine.Host)
		r.FortyNine.ID = types.StringValue(resp.FortyNine.ID)
		r.FortyNine.IPWhitelistRegex = types.StringPointerValue(resp.FortyNine.IPWhitelistRegex)
		if resp.FortyNine.MaxActiveCxn != nil {
			r.FortyNine.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.MaxActiveCxn)))
		} else {
			r.FortyNine.MaxActiveCxn = types.NumberNull()
		}
		r.FortyNine.Metadata = []tfTypes.Input49Metadata{}
		if len(r.FortyNine.Metadata) > len(resp.FortyNine.Metadata) {
			r.FortyNine.Metadata = r.FortyNine.Metadata[:len(resp.FortyNine.Metadata)]
		}
		for metadataCount2, metadataItem2 := range resp.FortyNine.Metadata {
			var metadata5 tfTypes.Input49Metadata
			metadata5.Name = types.StringValue(metadataItem2.Name)
			metadata5.Value = types.StringValue(metadataItem2.Value)
			if metadataCount2+1 > len(r.FortyNine.Metadata) {
				r.FortyNine.Metadata = append(r.FortyNine.Metadata, metadata5)
			} else {
				r.FortyNine.Metadata[metadataCount2].Name = metadata5.Name
				r.FortyNine.Metadata[metadataCount2].Value = metadata5.Value
			}
		}
		if resp.FortyNine.Persistence == nil {
			r.FortyNine.Persistence = nil
		} else {
			r.FortyNine.Persistence = &tfTypes.InputPersistence{}
			if resp.FortyNine.Persistence.Compress != nil {
				r.FortyNine.Persistence.Compress = types.StringValue(string(*resp.FortyNine.Persistence.Compress))
			} else {
				r.FortyNine.Persistence.Compress = types.StringNull()
			}
			r.FortyNine.Persistence.DestPath = types.StringPointerValue(resp.FortyNine.Persistence.DestPath)
			r.FortyNine.Persistence.Enable = types.BoolPointerValue(resp.FortyNine.Persistence.Enable)
			r.FortyNine.Persistence.MaxDataSize = types.StringPointerValue(resp.FortyNine.Persistence.MaxDataSize)
			r.FortyNine.Persistence.MaxDataTime = types.StringPointerValue(resp.FortyNine.Persistence.MaxDataTime)
			r.FortyNine.Persistence.TimeWindow = types.StringPointerValue(resp.FortyNine.Persistence.TimeWindow)
		}
		r.FortyNine.Pipeline = types.StringPointerValue(resp.FortyNine.Pipeline)
		if resp.FortyNine.Port != nil {
			r.FortyNine.Port = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.Port)))
		} else {
			r.FortyNine.Port = types.NumberNull()
		}
		if resp.FortyNine.Pq == nil {
			r.FortyNine.Pq = nil
		} else {
			r.FortyNine.Pq = &tfTypes.Input49Pq{}
			if resp.FortyNine.Pq.CommitFrequency != nil {
				r.FortyNine.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.Pq.CommitFrequency)))
			} else {
				r.FortyNine.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.FortyNine.Pq.Compress != nil {
				r.FortyNine.Pq.Compress = types.StringValue(string(*resp.FortyNine.Pq.Compress))
			} else {
				r.FortyNine.Pq.Compress = types.StringNull()
			}
			if resp.FortyNine.Pq.MaxBufferSize != nil {
				r.FortyNine.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.Pq.MaxBufferSize)))
			} else {
				r.FortyNine.Pq.MaxBufferSize = types.NumberNull()
			}
			r.FortyNine.Pq.MaxFileSize = types.StringPointerValue(resp.FortyNine.Pq.MaxFileSize)
			r.FortyNine.Pq.MaxSize = types.StringPointerValue(resp.FortyNine.Pq.MaxSize)
			if resp.FortyNine.Pq.Mode != nil {
				r.FortyNine.Pq.Mode = types.StringValue(string(*resp.FortyNine.Pq.Mode))
			} else {
				r.FortyNine.Pq.Mode = types.StringNull()
			}
			r.FortyNine.Pq.Path = types.StringPointerValue(resp.FortyNine.Pq.Path)
		}
		r.FortyNine.PqEnabled = types.BoolPointerValue(resp.FortyNine.PqEnabled)
		r.FortyNine.SendToRoutes = types.BoolPointerValue(resp.FortyNine.SendToRoutes)
		if resp.FortyNine.SocketEndingMaxWait != nil {
			r.FortyNine.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.SocketEndingMaxWait)))
		} else {
			r.FortyNine.SocketEndingMaxWait = types.NumberNull()
		}
		if resp.FortyNine.SocketIdleTimeout != nil {
			r.FortyNine.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.SocketIdleTimeout)))
		} else {
			r.FortyNine.SocketIdleTimeout = types.NumberNull()
		}
		if resp.FortyNine.SocketMaxLifespan != nil {
			r.FortyNine.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.SocketMaxLifespan)))
		} else {
			r.FortyNine.SocketMaxLifespan = types.NumberNull()
		}
		if resp.FortyNine.StaleChannelFlushMs != nil {
			r.FortyNine.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.StaleChannelFlushMs)))
		} else {
			r.FortyNine.StaleChannelFlushMs = types.NumberNull()
		}
		if resp.FortyNine.Status == nil {
			r.FortyNine.Status = nil
		} else {
			r.FortyNine.Status = &tfTypes.Input49Status{}
			r.FortyNine.Status.Health = types.StringPointerValue(resp.FortyNine.Status.Health)
			if resp.FortyNine.Status.Metrics == nil {
				r.FortyNine.Status.Metrics = nil
			} else {
				r.FortyNine.Status.Metrics = &tfTypes.Input49Metrics{}
				if resp.FortyNine.Status.Metrics.Buffered != nil {
					r.FortyNine.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.Status.Metrics.Buffered)))
				} else {
					r.FortyNine.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.FortyNine.Status.Metrics.Dropped != nil {
					r.FortyNine.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.Status.Metrics.Dropped)))
				} else {
					r.FortyNine.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.FortyNine.Status.Metrics.Received != nil {
					r.FortyNine.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.Status.Metrics.Received)))
				} else {
					r.FortyNine.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.FortyNine.Status.Timestamp != nil {
				r.FortyNine.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.FortyNine.Status.Timestamp)))
			} else {
				r.FortyNine.Status.Timestamp = types.NumberNull()
			}
		}
		r.FortyNine.Streamtags = make([]types.String, 0, len(resp.FortyNine.Streamtags))
		for _, v := range resp.FortyNine.Streamtags {
			r.FortyNine.Streamtags = append(r.FortyNine.Streamtags, types.StringValue(v))
		}
		r.FortyNine.TextSecret = types.StringPointerValue(resp.FortyNine.TextSecret)
		if resp.FortyNine.TLS == nil {
			r.FortyNine.TLS = nil
		} else {
			r.FortyNine.TLS = &tfTypes.Input49TLSSettingsServerSide{}
			r.FortyNine.TLS.CaPath = types.StringPointerValue(resp.FortyNine.TLS.CaPath)
			r.FortyNine.TLS.CertificateName = types.StringPointerValue(resp.FortyNine.TLS.CertificateName)
			r.FortyNine.TLS.CertPath = types.StringPointerValue(resp.FortyNine.TLS.CertPath)
			if resp.FortyNine.TLS.CommonNameRegex == nil {
				r.FortyNine.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult1, _ := json.Marshal(resp.FortyNine.TLS.CommonNameRegex)
				r.FortyNine.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult1))
			}
			r.FortyNine.TLS.Disabled = types.BoolPointerValue(resp.FortyNine.TLS.Disabled)
			if resp.FortyNine.TLS.MaxVersion != nil {
				r.FortyNine.TLS.MaxVersion = types.StringValue(string(*resp.FortyNine.TLS.MaxVersion))
			} else {
				r.FortyNine.TLS.MaxVersion = types.StringNull()
			}
			if resp.FortyNine.TLS.MinVersion != nil {
				r.FortyNine.TLS.MinVersion = types.StringValue(string(*resp.FortyNine.TLS.MinVersion))
			} else {
				r.FortyNine.TLS.MinVersion = types.StringNull()
			}
			r.FortyNine.TLS.Passphrase = types.StringPointerValue(resp.FortyNine.TLS.Passphrase)
			r.FortyNine.TLS.PrivKeyPath = types.StringPointerValue(resp.FortyNine.TLS.PrivKeyPath)
			if resp.FortyNine.TLS.RejectUnauthorized == nil {
				r.FortyNine.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult1, _ := json.Marshal(resp.FortyNine.TLS.RejectUnauthorized)
				r.FortyNine.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult1))
			}
			r.FortyNine.TLS.RequestCert = types.BoolPointerValue(resp.FortyNine.TLS.RequestCert)
		}
		r.FortyNine.Type = types.StringValue(string(resp.FortyNine.Type))
		r.FortyNine.UnixSocketPath = types.StringPointerValue(resp.FortyNine.UnixSocketPath)
		r.FortyNine.UnixSocketPerms = types.StringPointerValue(resp.FortyNine.UnixSocketPerms)
	}
	if resp.Fifty != nil {
		r.Fifty = &tfTypes.Fifty{}
		r.Fifty.AllowMachineIDMismatch = types.BoolPointerValue(resp.Fifty.AllowMachineIDMismatch)
		if resp.Fifty.AuthMethod != nil {
			r.Fifty.AuthMethod = types.StringValue(string(*resp.Fifty.AuthMethod))
		} else {
			r.Fifty.AuthMethod = types.StringNull()
		}
		r.Fifty.CaFingerprint = types.StringPointerValue(resp.Fifty.CaFingerprint)
		r.Fifty.CaptureHeaders = types.BoolPointerValue(resp.Fifty.CaptureHeaders)
		r.Fifty.Connections = []tfTypes.Input50Connections{}
		if len(r.Fifty.Connections) > len(resp.Fifty.Connections) {
			r.Fifty.Connections = r.Fifty.Connections[:len(resp.Fifty.Connections)]
		}
		for connectionsCount3, connectionsItem3 := range resp.Fifty.Connections {
			var connections7 tfTypes.Input50Connections
			connections7.Output = types.StringValue(connectionsItem3.Output)
			connections7.Pipeline = types.StringPointerValue(connectionsItem3.Pipeline)
			if connectionsCount3+1 > len(r.Fifty.Connections) {
				r.Fifty.Connections = append(r.Fifty.Connections, connections7)
			} else {
				r.Fifty.Connections[connectionsCount3].Output = connections7.Output
				r.Fifty.Connections[connectionsCount3].Pipeline = connections7.Pipeline
			}
		}
		r.Fifty.Description = types.StringPointerValue(resp.Fifty.Description)
		r.Fifty.Disabled = types.BoolPointerValue(resp.Fifty.Disabled)
		r.Fifty.EnableHealthCheck = types.BoolPointerValue(resp.Fifty.EnableHealthCheck)
		r.Fifty.EnableProxyHeader = types.BoolPointerValue(resp.Fifty.EnableProxyHeader)
		r.Fifty.Environment = types.StringPointerValue(resp.Fifty.Environment)
		r.Fifty.Host = types.StringPointerValue(resp.Fifty.Host)
		r.Fifty.ID = types.StringPointerValue(resp.Fifty.ID)
		r.Fifty.IPAllowlistRegex = types.StringPointerValue(resp.Fifty.IPAllowlistRegex)
		r.Fifty.IPDenylistRegex = types.StringPointerValue(resp.Fifty.IPDenylistRegex)
		if resp.Fifty.KeepAliveTimeout != nil {
			r.Fifty.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.Fifty.KeepAliveTimeout)))
		} else {
			r.Fifty.KeepAliveTimeout = types.NumberNull()
		}
		r.Fifty.Keytab = types.StringPointerValue(resp.Fifty.Keytab)
		if resp.Fifty.MaxActiveReq != nil {
			r.Fifty.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.Fifty.MaxActiveReq)))
		} else {
			r.Fifty.MaxActiveReq = types.NumberNull()
		}
		r.Fifty.MaxRequestsPerSocket = types.Int64PointerValue(resp.Fifty.MaxRequestsPerSocket)
		r.Fifty.Metadata = []tfTypes.Input50Metadata{}
		if len(r.Fifty.Metadata) > len(resp.Fifty.Metadata) {
			r.Fifty.Metadata = r.Fifty.Metadata[:len(resp.Fifty.Metadata)]
		}
		for metadataCount3, metadataItem3 := range resp.Fifty.Metadata {
			var metadata7 tfTypes.Input50Metadata
			metadata7.Name = types.StringValue(metadataItem3.Name)
			metadata7.Value = types.StringValue(metadataItem3.Value)
			if metadataCount3+1 > len(r.Fifty.Metadata) {
				r.Fifty.Metadata = append(r.Fifty.Metadata, metadata7)
			} else {
				r.Fifty.Metadata[metadataCount3].Name = metadata7.Name
				r.Fifty.Metadata[metadataCount3].Value = metadata7.Value
			}
		}
		r.Fifty.Pipeline = types.StringPointerValue(resp.Fifty.Pipeline)
		if resp.Fifty.Port != nil {
			r.Fifty.Port = types.NumberValue(big.NewFloat(float64(*resp.Fifty.Port)))
		} else {
			r.Fifty.Port = types.NumberNull()
		}
		if resp.Fifty.Pq == nil {
			r.Fifty.Pq = nil
		} else {
			r.Fifty.Pq = &tfTypes.Input50Pq{}
			if resp.Fifty.Pq.CommitFrequency != nil {
				r.Fifty.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.Fifty.Pq.CommitFrequency)))
			} else {
				r.Fifty.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.Fifty.Pq.Compress != nil {
				r.Fifty.Pq.Compress = types.StringValue(string(*resp.Fifty.Pq.Compress))
			} else {
				r.Fifty.Pq.Compress = types.StringNull()
			}
			if resp.Fifty.Pq.MaxBufferSize != nil {
				r.Fifty.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.Fifty.Pq.MaxBufferSize)))
			} else {
				r.Fifty.Pq.MaxBufferSize = types.NumberNull()
			}
			r.Fifty.Pq.MaxFileSize = types.StringPointerValue(resp.Fifty.Pq.MaxFileSize)
			r.Fifty.Pq.MaxSize = types.StringPointerValue(resp.Fifty.Pq.MaxSize)
			if resp.Fifty.Pq.Mode != nil {
				r.Fifty.Pq.Mode = types.StringValue(string(*resp.Fifty.Pq.Mode))
			} else {
				r.Fifty.Pq.Mode = types.StringNull()
			}
			r.Fifty.Pq.Path = types.StringPointerValue(resp.Fifty.Pq.Path)
		}
		r.Fifty.PqEnabled = types.BoolPointerValue(resp.Fifty.PqEnabled)
		r.Fifty.Principal = types.StringPointerValue(resp.Fifty.Principal)
		r.Fifty.SendToRoutes = types.BoolPointerValue(resp.Fifty.SendToRoutes)
		if resp.Fifty.SocketTimeout != nil {
			r.Fifty.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.Fifty.SocketTimeout)))
		} else {
			r.Fifty.SocketTimeout = types.NumberNull()
		}
		if resp.Fifty.Status == nil {
			r.Fifty.Status = nil
		} else {
			r.Fifty.Status = &tfTypes.Input50Status{}
			r.Fifty.Status.Health = types.StringPointerValue(resp.Fifty.Status.Health)
			if resp.Fifty.Status.Metrics == nil {
				r.Fifty.Status.Metrics = nil
			} else {
				r.Fifty.Status.Metrics = &tfTypes.Input50Metrics{}
				if resp.Fifty.Status.Metrics.Buffered != nil {
					r.Fifty.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.Fifty.Status.Metrics.Buffered)))
				} else {
					r.Fifty.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.Fifty.Status.Metrics.Dropped != nil {
					r.Fifty.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.Fifty.Status.Metrics.Dropped)))
				} else {
					r.Fifty.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.Fifty.Status.Metrics.Received != nil {
					r.Fifty.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.Fifty.Status.Metrics.Received)))
				} else {
					r.Fifty.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.Fifty.Status.Timestamp != nil {
				r.Fifty.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.Fifty.Status.Timestamp)))
			} else {
				r.Fifty.Status.Timestamp = types.NumberNull()
			}
		}
		r.Fifty.Streamtags = make([]types.String, 0, len(resp.Fifty.Streamtags))
		for _, v := range resp.Fifty.Streamtags {
			r.Fifty.Streamtags = append(r.Fifty.Streamtags, types.StringValue(v))
		}
		r.Fifty.Subscriptions = []tfTypes.Subscriptions{}
		if len(r.Fifty.Subscriptions) > len(resp.Fifty.Subscriptions) {
			r.Fifty.Subscriptions = r.Fifty.Subscriptions[:len(resp.Fifty.Subscriptions)]
		}
		for subscriptionsCount, subscriptionsItem := range resp.Fifty.Subscriptions {
			var subscriptions1 tfTypes.Subscriptions
			if subscriptionsItem.BatchTimeout != nil {
				subscriptions1.BatchTimeout = types.NumberValue(big.NewFloat(float64(*subscriptionsItem.BatchTimeout)))
			} else {
				subscriptions1.BatchTimeout = types.NumberNull()
			}
			subscriptions1.Compress = types.BoolPointerValue(subscriptionsItem.Compress)
			if subscriptionsItem.ContentFormat != nil {
				subscriptions1.ContentFormat = types.StringValue(string(*subscriptionsItem.ContentFormat))
			} else {
				subscriptions1.ContentFormat = types.StringNull()
			}
			if subscriptionsItem.HeartbeatInterval != nil {
				subscriptions1.HeartbeatInterval = types.NumberValue(big.NewFloat(float64(*subscriptionsItem.HeartbeatInterval)))
			} else {
				subscriptions1.HeartbeatInterval = types.NumberNull()
			}
			subscriptions1.Locale = types.StringPointerValue(subscriptionsItem.Locale)
			subscriptions1.Metadata = []tfTypes.Input50SubscriptionsMetadata{}
			for metadataCount4, metadataItem4 := range subscriptionsItem.Metadata {
				var metadata9 tfTypes.Input50SubscriptionsMetadata
				metadata9.Name = types.StringValue(metadataItem4.Name)
				metadata9.Value = types.StringValue(metadataItem4.Value)
				if metadataCount4+1 > len(subscriptions1.Metadata) {
					subscriptions1.Metadata = append(subscriptions1.Metadata, metadata9)
				} else {
					subscriptions1.Metadata[metadataCount4].Name = metadata9.Name
					subscriptions1.Metadata[metadataCount4].Value = metadata9.Value
				}
			}
			if subscriptionsItem.QuerySelector != nil {
				subscriptions1.QuerySelector = types.StringValue(string(*subscriptionsItem.QuerySelector))
			} else {
				subscriptions1.QuerySelector = types.StringNull()
			}
			subscriptions1.ReadExistingEvents = types.BoolPointerValue(subscriptionsItem.ReadExistingEvents)
			subscriptions1.SendBookmarks = types.BoolPointerValue(subscriptionsItem.SendBookmarks)
			subscriptions1.SubscriptionName = types.StringValue(subscriptionsItem.SubscriptionName)
			subscriptions1.Targets = make([]types.String, 0, len(subscriptionsItem.Targets))
			for _, v := range subscriptionsItem.Targets {
				subscriptions1.Targets = append(subscriptions1.Targets, types.StringValue(v))
			}
			subscriptions1.Version = types.StringPointerValue(subscriptionsItem.Version)
			if subscriptionsCount+1 > len(r.Fifty.Subscriptions) {
				r.Fifty.Subscriptions = append(r.Fifty.Subscriptions, subscriptions1)
			} else {
				r.Fifty.Subscriptions[subscriptionsCount].BatchTimeout = subscriptions1.BatchTimeout
				r.Fifty.Subscriptions[subscriptionsCount].Compress = subscriptions1.Compress
				r.Fifty.Subscriptions[subscriptionsCount].ContentFormat = subscriptions1.ContentFormat
				r.Fifty.Subscriptions[subscriptionsCount].HeartbeatInterval = subscriptions1.HeartbeatInterval
				r.Fifty.Subscriptions[subscriptionsCount].Locale = subscriptions1.Locale
				r.Fifty.Subscriptions[subscriptionsCount].Metadata = subscriptions1.Metadata
				r.Fifty.Subscriptions[subscriptionsCount].QuerySelector = subscriptions1.QuerySelector
				r.Fifty.Subscriptions[subscriptionsCount].ReadExistingEvents = subscriptions1.ReadExistingEvents
				r.Fifty.Subscriptions[subscriptionsCount].SendBookmarks = subscriptions1.SendBookmarks
				r.Fifty.Subscriptions[subscriptionsCount].SubscriptionName = subscriptions1.SubscriptionName
				r.Fifty.Subscriptions[subscriptionsCount].Targets = subscriptions1.Targets
				r.Fifty.Subscriptions[subscriptionsCount].Version = subscriptions1.Version
			}
		}
		if resp.Fifty.TLS == nil {
			r.Fifty.TLS = nil
		} else {
			r.Fifty.TLS = &tfTypes.MTLSSettings{}
			r.Fifty.TLS.CaPath = types.StringValue(resp.Fifty.TLS.CaPath)
			r.Fifty.TLS.CertificateName = types.StringPointerValue(resp.Fifty.TLS.CertificateName)
			r.Fifty.TLS.CertPath = types.StringValue(resp.Fifty.TLS.CertPath)
			r.Fifty.TLS.CommonNameRegex = types.StringPointerValue(resp.Fifty.TLS.CommonNameRegex)
			r.Fifty.TLS.Disabled = types.BoolPointerValue(resp.Fifty.TLS.Disabled)
			if resp.Fifty.TLS.Keytab == nil {
				r.Fifty.TLS.Keytab = types.StringNull()
			} else {
				keytabResult, _ := json.Marshal(resp.Fifty.TLS.Keytab)
				r.Fifty.TLS.Keytab = types.StringValue(string(keytabResult))
			}
			if resp.Fifty.TLS.MaxVersion != nil {
				r.Fifty.TLS.MaxVersion = types.StringValue(string(*resp.Fifty.TLS.MaxVersion))
			} else {
				r.Fifty.TLS.MaxVersion = types.StringNull()
			}
			if resp.Fifty.TLS.MinVersion != nil {
				r.Fifty.TLS.MinVersion = types.StringValue(string(*resp.Fifty.TLS.MinVersion))
			} else {
				r.Fifty.TLS.MinVersion = types.StringNull()
			}
			r.Fifty.TLS.OcspCheck = types.BoolPointerValue(resp.Fifty.TLS.OcspCheck)
			r.Fifty.TLS.OcspCheckFailClose = types.BoolPointerValue(resp.Fifty.TLS.OcspCheckFailClose)
			r.Fifty.TLS.Passphrase = types.StringPointerValue(resp.Fifty.TLS.Passphrase)
			if resp.Fifty.TLS.Principal == nil {
				r.Fifty.TLS.Principal = types.StringNull()
			} else {
				principalResult, _ := json.Marshal(resp.Fifty.TLS.Principal)
				r.Fifty.TLS.Principal = types.StringValue(string(principalResult))
			}
			r.Fifty.TLS.PrivKeyPath = types.StringValue(resp.Fifty.TLS.PrivKeyPath)
			r.Fifty.TLS.RejectUnauthorized = types.BoolPointerValue(resp.Fifty.TLS.RejectUnauthorized)
			r.Fifty.TLS.RequestCert = types.BoolPointerValue(resp.Fifty.TLS.RequestCert)
		}
		if resp.Fifty.Type != nil {
			r.Fifty.Type = types.StringValue(string(*resp.Fifty.Type))
		} else {
			r.Fifty.Type = types.StringNull()
		}
	}
	if resp.FiftyOne != nil {
		r.FiftyOne = &tfTypes.FiftyOne{}
		if resp.FiftyOne.BatchSize != nil {
			r.FiftyOne.BatchSize = types.NumberValue(big.NewFloat(float64(*resp.FiftyOne.BatchSize)))
		} else {
			r.FiftyOne.BatchSize = types.NumberNull()
		}
		r.FiftyOne.Connections = []tfTypes.Input51Connections{}
		if len(r.FiftyOne.Connections) > len(resp.FiftyOne.Connections) {
			r.FiftyOne.Connections = r.FiftyOne.Connections[:len(resp.FiftyOne.Connections)]
		}
		for connectionsCount4, connectionsItem4 := range resp.FiftyOne.Connections {
			var connections9 tfTypes.Input51Connections
			connections9.Output = types.StringValue(connectionsItem4.Output)
			connections9.Pipeline = types.StringPointerValue(connectionsItem4.Pipeline)
			if connectionsCount4+1 > len(r.FiftyOne.Connections) {
				r.FiftyOne.Connections = append(r.FiftyOne.Connections, connections9)
			} else {
				r.FiftyOne.Connections[connectionsCount4].Output = connections9.Output
				r.FiftyOne.Connections[connectionsCount4].Pipeline = connections9.Pipeline
			}
		}
		r.FiftyOne.Description = types.StringPointerValue(resp.FiftyOne.Description)
		r.FiftyOne.Disabled = types.BoolPointerValue(resp.FiftyOne.Disabled)
		r.FiftyOne.DisableNativeModule = types.BoolPointerValue(resp.FiftyOne.DisableNativeModule)
		r.FiftyOne.Environment = types.StringPointerValue(resp.FiftyOne.Environment)
		if resp.FiftyOne.EventFormat != nil {
			r.FiftyOne.EventFormat = types.StringValue(string(*resp.FiftyOne.EventFormat))
		} else {
			r.FiftyOne.EventFormat = types.StringNull()
		}
		r.FiftyOne.ID = types.StringPointerValue(resp.FiftyOne.ID)
		if resp.FiftyOne.Interval != nil {
			r.FiftyOne.Interval = types.NumberValue(big.NewFloat(float64(*resp.FiftyOne.Interval)))
		} else {
			r.FiftyOne.Interval = types.NumberNull()
		}
		r.FiftyOne.LogNames = make([]types.String, 0, len(resp.FiftyOne.LogNames))
		for _, v := range resp.FiftyOne.LogNames {
			r.FiftyOne.LogNames = append(r.FiftyOne.LogNames, types.StringValue(v))
		}
		if resp.FiftyOne.MaxEventBytes != nil {
			r.FiftyOne.MaxEventBytes = types.NumberValue(big.NewFloat(float64(*resp.FiftyOne.MaxEventBytes)))
		} else {
			r.FiftyOne.MaxEventBytes = types.NumberNull()
		}
		r.FiftyOne.Metadata = []tfTypes.Input51Metadata{}
		if len(r.FiftyOne.Metadata) > len(resp.FiftyOne.Metadata) {
			r.FiftyOne.Metadata = r.FiftyOne.Metadata[:len(resp.FiftyOne.Metadata)]
		}
		for metadataCount5, metadataItem5 := range resp.FiftyOne.Metadata {
			var metadata11 tfTypes.Input51Metadata
			metadata11.Name = types.StringValue(metadataItem5.Name)
			metadata11.Value = types.StringValue(metadataItem5.Value)
			if metadataCount5+1 > len(r.FiftyOne.Metadata) {
				r.FiftyOne.Metadata = append(r.FiftyOne.Metadata, metadata11)
			} else {
				r.FiftyOne.Metadata[metadataCount5].Name = metadata11.Name
				r.FiftyOne.Metadata[metadataCount5].Value = metadata11.Value
			}
		}
		r.FiftyOne.Pipeline = types.StringPointerValue(resp.FiftyOne.Pipeline)
		if resp.FiftyOne.Pq == nil {
			r.FiftyOne.Pq = nil
		} else {
			r.FiftyOne.Pq = &tfTypes.Input51Pq{}
			if resp.FiftyOne.Pq.CommitFrequency != nil {
				r.FiftyOne.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.FiftyOne.Pq.CommitFrequency)))
			} else {
				r.FiftyOne.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.FiftyOne.Pq.Compress != nil {
				r.FiftyOne.Pq.Compress = types.StringValue(string(*resp.FiftyOne.Pq.Compress))
			} else {
				r.FiftyOne.Pq.Compress = types.StringNull()
			}
			if resp.FiftyOne.Pq.MaxBufferSize != nil {
				r.FiftyOne.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FiftyOne.Pq.MaxBufferSize)))
			} else {
				r.FiftyOne.Pq.MaxBufferSize = types.NumberNull()
			}
			r.FiftyOne.Pq.MaxFileSize = types.StringPointerValue(resp.FiftyOne.Pq.MaxFileSize)
			r.FiftyOne.Pq.MaxSize = types.StringPointerValue(resp.FiftyOne.Pq.MaxSize)
			if resp.FiftyOne.Pq.Mode != nil {
				r.FiftyOne.Pq.Mode = types.StringValue(string(*resp.FiftyOne.Pq.Mode))
			} else {
				r.FiftyOne.Pq.Mode = types.StringNull()
			}
			r.FiftyOne.Pq.Path = types.StringPointerValue(resp.FiftyOne.Pq.Path)
		}
		r.FiftyOne.PqEnabled = types.BoolPointerValue(resp.FiftyOne.PqEnabled)
		if resp.FiftyOne.ReadMode != nil {
			r.FiftyOne.ReadMode = types.StringValue(string(*resp.FiftyOne.ReadMode))
		} else {
			r.FiftyOne.ReadMode = types.StringNull()
		}
		r.FiftyOne.SendToRoutes = types.BoolPointerValue(resp.FiftyOne.SendToRoutes)
		if resp.FiftyOne.Status == nil {
			r.FiftyOne.Status = nil
		} else {
			r.FiftyOne.Status = &tfTypes.Input51Status{}
			r.FiftyOne.Status.Health = types.StringPointerValue(resp.FiftyOne.Status.Health)
			if resp.FiftyOne.Status.Metrics == nil {
				r.FiftyOne.Status.Metrics = nil
			} else {
				r.FiftyOne.Status.Metrics = &tfTypes.Input51Metrics{}
				if resp.FiftyOne.Status.Metrics.Buffered != nil {
					r.FiftyOne.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.FiftyOne.Status.Metrics.Buffered)))
				} else {
					r.FiftyOne.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.FiftyOne.Status.Metrics.Dropped != nil {
					r.FiftyOne.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.FiftyOne.Status.Metrics.Dropped)))
				} else {
					r.FiftyOne.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.FiftyOne.Status.Metrics.Received != nil {
					r.FiftyOne.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.FiftyOne.Status.Metrics.Received)))
				} else {
					r.FiftyOne.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.FiftyOne.Status.Timestamp != nil {
				r.FiftyOne.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.FiftyOne.Status.Timestamp)))
			} else {
				r.FiftyOne.Status.Timestamp = types.NumberNull()
			}
		}
		r.FiftyOne.Streamtags = make([]types.String, 0, len(resp.FiftyOne.Streamtags))
		for _, v := range resp.FiftyOne.Streamtags {
			r.FiftyOne.Streamtags = append(r.FiftyOne.Streamtags, types.StringValue(v))
		}
		r.FiftyOne.Type = types.StringValue(string(resp.FiftyOne.Type))
	}
	if resp.FiftyTwo != nil {
		r.FiftyTwo = &tfTypes.FiftyTwo{}
		r.FiftyTwo.Connections = []tfTypes.Input52Connections{}
		if len(r.FiftyTwo.Connections) > len(resp.FiftyTwo.Connections) {
			r.FiftyTwo.Connections = r.FiftyTwo.Connections[:len(resp.FiftyTwo.Connections)]
		}
		for connectionsCount5, connectionsItem5 := range resp.FiftyTwo.Connections {
			var connections11 tfTypes.Input52Connections
			connections11.Output = types.StringValue(connectionsItem5.Output)
			connections11.Pipeline = types.StringPointerValue(connectionsItem5.Pipeline)
			if connectionsCount5+1 > len(r.FiftyTwo.Connections) {
				r.FiftyTwo.Connections = append(r.FiftyTwo.Connections, connections11)
			} else {
				r.FiftyTwo.Connections[connectionsCount5].Output = connections11.Output
				r.FiftyTwo.Connections[connectionsCount5].Pipeline = connections11.Pipeline
			}
		}
		r.FiftyTwo.Description = types.StringPointerValue(resp.FiftyTwo.Description)
		r.FiftyTwo.Disabled = types.BoolPointerValue(resp.FiftyTwo.Disabled)
		r.FiftyTwo.Environment = types.StringPointerValue(resp.FiftyTwo.Environment)
		r.FiftyTwo.Host = types.StringPointerValue(resp.FiftyTwo.Host)
		r.FiftyTwo.ID = types.StringPointerValue(resp.FiftyTwo.ID)
		r.FiftyTwo.IngestRawBytes = types.BoolPointerValue(resp.FiftyTwo.IngestRawBytes)
		r.FiftyTwo.IPWhitelistRegex = types.StringPointerValue(resp.FiftyTwo.IPWhitelistRegex)
		if resp.FiftyTwo.MaxBufferSize != nil {
			r.FiftyTwo.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FiftyTwo.MaxBufferSize)))
		} else {
			r.FiftyTwo.MaxBufferSize = types.NumberNull()
		}
		r.FiftyTwo.Metadata = []tfTypes.Input52Metadata{}
		if len(r.FiftyTwo.Metadata) > len(resp.FiftyTwo.Metadata) {
			r.FiftyTwo.Metadata = r.FiftyTwo.Metadata[:len(resp.FiftyTwo.Metadata)]
		}
		for metadataCount6, metadataItem6 := range resp.FiftyTwo.Metadata {
			var metadata13 tfTypes.Input52Metadata
			metadata13.Name = types.StringValue(metadataItem6.Name)
			metadata13.Value = types.StringValue(metadataItem6.Value)
			if metadataCount6+1 > len(r.FiftyTwo.Metadata) {
				r.FiftyTwo.Metadata = append(r.FiftyTwo.Metadata, metadata13)
			} else {
				r.FiftyTwo.Metadata[metadataCount6].Name = metadata13.Name
				r.FiftyTwo.Metadata[metadataCount6].Value = metadata13.Value
			}
		}
		r.FiftyTwo.Pipeline = types.StringPointerValue(resp.FiftyTwo.Pipeline)
		r.FiftyTwo.Port = types.NumberValue(big.NewFloat(float64(resp.FiftyTwo.Port)))
		if resp.FiftyTwo.Pq == nil {
			r.FiftyTwo.Pq = nil
		} else {
			r.FiftyTwo.Pq = &tfTypes.Input52Pq{}
			if resp.FiftyTwo.Pq.CommitFrequency != nil {
				r.FiftyTwo.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.FiftyTwo.Pq.CommitFrequency)))
			} else {
				r.FiftyTwo.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.FiftyTwo.Pq.Compress != nil {
				r.FiftyTwo.Pq.Compress = types.StringValue(string(*resp.FiftyTwo.Pq.Compress))
			} else {
				r.FiftyTwo.Pq.Compress = types.StringNull()
			}
			if resp.FiftyTwo.Pq.MaxBufferSize != nil {
				r.FiftyTwo.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FiftyTwo.Pq.MaxBufferSize)))
			} else {
				r.FiftyTwo.Pq.MaxBufferSize = types.NumberNull()
			}
			r.FiftyTwo.Pq.MaxFileSize = types.StringPointerValue(resp.FiftyTwo.Pq.MaxFileSize)
			r.FiftyTwo.Pq.MaxSize = types.StringPointerValue(resp.FiftyTwo.Pq.MaxSize)
			if resp.FiftyTwo.Pq.Mode != nil {
				r.FiftyTwo.Pq.Mode = types.StringValue(string(*resp.FiftyTwo.Pq.Mode))
			} else {
				r.FiftyTwo.Pq.Mode = types.StringNull()
			}
			r.FiftyTwo.Pq.Path = types.StringPointerValue(resp.FiftyTwo.Pq.Path)
		}
		r.FiftyTwo.PqEnabled = types.BoolPointerValue(resp.FiftyTwo.PqEnabled)
		r.FiftyTwo.SendToRoutes = types.BoolPointerValue(resp.FiftyTwo.SendToRoutes)
		r.FiftyTwo.SingleMsgUDPPackets = types.BoolPointerValue(resp.FiftyTwo.SingleMsgUDPPackets)
		if resp.FiftyTwo.Status == nil {
			r.FiftyTwo.Status = nil
		} else {
			r.FiftyTwo.Status = &tfTypes.Input52Status{}
			r.FiftyTwo.Status.Health = types.StringPointerValue(resp.FiftyTwo.Status.Health)
			if resp.FiftyTwo.Status.Metrics == nil {
				r.FiftyTwo.Status.Metrics = nil
			} else {
				r.FiftyTwo.Status.Metrics = &tfTypes.Input52Metrics{}
				if resp.FiftyTwo.Status.Metrics.Buffered != nil {
					r.FiftyTwo.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.FiftyTwo.Status.Metrics.Buffered)))
				} else {
					r.FiftyTwo.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.FiftyTwo.Status.Metrics.Dropped != nil {
					r.FiftyTwo.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.FiftyTwo.Status.Metrics.Dropped)))
				} else {
					r.FiftyTwo.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.FiftyTwo.Status.Metrics.Received != nil {
					r.FiftyTwo.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.FiftyTwo.Status.Metrics.Received)))
				} else {
					r.FiftyTwo.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.FiftyTwo.Status.Timestamp != nil {
				r.FiftyTwo.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.FiftyTwo.Status.Timestamp)))
			} else {
				r.FiftyTwo.Status.Timestamp = types.NumberNull()
			}
		}
		r.FiftyTwo.Streamtags = make([]types.String, 0, len(resp.FiftyTwo.Streamtags))
		for _, v := range resp.FiftyTwo.Streamtags {
			r.FiftyTwo.Streamtags = append(r.FiftyTwo.Streamtags, types.StringValue(v))
		}
		if resp.FiftyTwo.Type != nil {
			r.FiftyTwo.Type = types.StringValue(string(*resp.FiftyTwo.Type))
		} else {
			r.FiftyTwo.Type = types.StringNull()
		}
		if resp.FiftyTwo.UDPSocketRxBufSize != nil {
			r.FiftyTwo.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*resp.FiftyTwo.UDPSocketRxBufSize)))
		} else {
			r.FiftyTwo.UDPSocketRxBufSize = types.NumberNull()
		}
	}
	if resp.FiftyThree != nil {
		r.FiftyThree = &tfTypes.FiftyThree{}
		r.FiftyThree.Connections = []tfTypes.Input53Connections{}
		if len(r.FiftyThree.Connections) > len(resp.FiftyThree.Connections) {
			r.FiftyThree.Connections = r.FiftyThree.Connections[:len(resp.FiftyThree.Connections)]
		}
		for connectionsCount6, connectionsItem6 := range resp.FiftyThree.Connections {
			var connections13 tfTypes.Input53Connections
			connections13.Output = types.StringValue(connectionsItem6.Output)
			connections13.Pipeline = types.StringPointerValue(connectionsItem6.Pipeline)
			if connectionsCount6+1 > len(r.FiftyThree.Connections) {
				r.FiftyThree.Connections = append(r.FiftyThree.Connections, connections13)
			} else {
				r.FiftyThree.Connections[connectionsCount6].Output = connections13.Output
				r.FiftyThree.Connections[connectionsCount6].Pipeline = connections13.Pipeline
			}
		}
		r.FiftyThree.CurrentBoot = types.BoolPointerValue(resp.FiftyThree.CurrentBoot)
		r.FiftyThree.Description = types.StringPointerValue(resp.FiftyThree.Description)
		r.FiftyThree.Disabled = types.BoolPointerValue(resp.FiftyThree.Disabled)
		r.FiftyThree.Environment = types.StringPointerValue(resp.FiftyThree.Environment)
		r.FiftyThree.ID = types.StringPointerValue(resp.FiftyThree.ID)
		if resp.FiftyThree.Interval != nil {
			r.FiftyThree.Interval = types.NumberValue(big.NewFloat(float64(*resp.FiftyThree.Interval)))
		} else {
			r.FiftyThree.Interval = types.NumberNull()
		}
		r.FiftyThree.Journals = make([]types.String, 0, len(resp.FiftyThree.Journals))
		for _, v := range resp.FiftyThree.Journals {
			r.FiftyThree.Journals = append(r.FiftyThree.Journals, types.StringValue(v))
		}
		r.FiftyThree.MaxAgeDur = types.StringPointerValue(resp.FiftyThree.MaxAgeDur)
		r.FiftyThree.Metadata = []tfTypes.Input53Metadata{}
		if len(r.FiftyThree.Metadata) > len(resp.FiftyThree.Metadata) {
			r.FiftyThree.Metadata = r.FiftyThree.Metadata[:len(resp.FiftyThree.Metadata)]
		}
		for metadataCount7, metadataItem7 := range resp.FiftyThree.Metadata {
			var metadata15 tfTypes.Input53Metadata
			metadata15.Name = types.StringValue(metadataItem7.Name)
			metadata15.Value = types.StringValue(metadataItem7.Value)
			if metadataCount7+1 > len(r.FiftyThree.Metadata) {
				r.FiftyThree.Metadata = append(r.FiftyThree.Metadata, metadata15)
			} else {
				r.FiftyThree.Metadata[metadataCount7].Name = metadata15.Name
				r.FiftyThree.Metadata[metadataCount7].Value = metadata15.Value
			}
		}
		r.FiftyThree.Path = types.StringValue(resp.FiftyThree.Path)
		r.FiftyThree.Pipeline = types.StringPointerValue(resp.FiftyThree.Pipeline)
		if resp.FiftyThree.Pq == nil {
			r.FiftyThree.Pq = nil
		} else {
			r.FiftyThree.Pq = &tfTypes.Input53Pq{}
			if resp.FiftyThree.Pq.CommitFrequency != nil {
				r.FiftyThree.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.FiftyThree.Pq.CommitFrequency)))
			} else {
				r.FiftyThree.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.FiftyThree.Pq.Compress != nil {
				r.FiftyThree.Pq.Compress = types.StringValue(string(*resp.FiftyThree.Pq.Compress))
			} else {
				r.FiftyThree.Pq.Compress = types.StringNull()
			}
			if resp.FiftyThree.Pq.MaxBufferSize != nil {
				r.FiftyThree.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FiftyThree.Pq.MaxBufferSize)))
			} else {
				r.FiftyThree.Pq.MaxBufferSize = types.NumberNull()
			}
			r.FiftyThree.Pq.MaxFileSize = types.StringPointerValue(resp.FiftyThree.Pq.MaxFileSize)
			r.FiftyThree.Pq.MaxSize = types.StringPointerValue(resp.FiftyThree.Pq.MaxSize)
			if resp.FiftyThree.Pq.Mode != nil {
				r.FiftyThree.Pq.Mode = types.StringValue(string(*resp.FiftyThree.Pq.Mode))
			} else {
				r.FiftyThree.Pq.Mode = types.StringNull()
			}
			r.FiftyThree.Pq.Path = types.StringPointerValue(resp.FiftyThree.Pq.Path)
		}
		r.FiftyThree.PqEnabled = types.BoolPointerValue(resp.FiftyThree.PqEnabled)
		r.FiftyThree.Rules = []tfTypes.InputRules{}
		if len(r.FiftyThree.Rules) > len(resp.FiftyThree.Rules) {
			r.FiftyThree.Rules = r.FiftyThree.Rules[:len(resp.FiftyThree.Rules)]
		}
		for rulesCount, rulesItem := range resp.FiftyThree.Rules {
			var rules1 tfTypes.InputRules
			rules1.Description = types.StringPointerValue(rulesItem.Description)
			rules1.Filter = types.StringValue(rulesItem.Filter)
			if rulesCount+1 > len(r.FiftyThree.Rules) {
				r.FiftyThree.Rules = append(r.FiftyThree.Rules, rules1)
			} else {
				r.FiftyThree.Rules[rulesCount].Description = rules1.Description
				r.FiftyThree.Rules[rulesCount].Filter = rules1.Filter
			}
		}
		r.FiftyThree.SendToRoutes = types.BoolPointerValue(resp.FiftyThree.SendToRoutes)
		if resp.FiftyThree.Status == nil {
			r.FiftyThree.Status = nil
		} else {
			r.FiftyThree.Status = &tfTypes.Input53Status{}
			r.FiftyThree.Status.Health = types.StringPointerValue(resp.FiftyThree.Status.Health)
			if resp.FiftyThree.Status.Metrics == nil {
				r.FiftyThree.Status.Metrics = nil
			} else {
				r.FiftyThree.Status.Metrics = &tfTypes.Input53Metrics{}
				if resp.FiftyThree.Status.Metrics.Buffered != nil {
					r.FiftyThree.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.FiftyThree.Status.Metrics.Buffered)))
				} else {
					r.FiftyThree.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.FiftyThree.Status.Metrics.Dropped != nil {
					r.FiftyThree.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.FiftyThree.Status.Metrics.Dropped)))
				} else {
					r.FiftyThree.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.FiftyThree.Status.Metrics.Received != nil {
					r.FiftyThree.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.FiftyThree.Status.Metrics.Received)))
				} else {
					r.FiftyThree.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.FiftyThree.Status.Timestamp != nil {
				r.FiftyThree.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.FiftyThree.Status.Timestamp)))
			} else {
				r.FiftyThree.Status.Timestamp = types.NumberNull()
			}
		}
		r.FiftyThree.Streamtags = make([]types.String, 0, len(resp.FiftyThree.Streamtags))
		for _, v := range resp.FiftyThree.Streamtags {
			r.FiftyThree.Streamtags = append(r.FiftyThree.Streamtags, types.StringValue(v))
		}
		if resp.FiftyThree.Type != nil {
			r.FiftyThree.Type = types.StringValue(string(*resp.FiftyThree.Type))
		} else {
			r.FiftyThree.Type = types.StringNull()
		}
	}
	if resp.FiftyFour != nil {
		r.FiftyFour = &tfTypes.FiftyFour{}
		r.FiftyFour.AuthAudienceOverride = types.StringPointerValue(resp.FiftyFour.AuthAudienceOverride)
		if resp.FiftyFour.AuthType != nil {
			r.FiftyFour.AuthType = types.StringValue(string(*resp.FiftyFour.AuthType))
		} else {
			r.FiftyFour.AuthType = types.StringNull()
		}
		r.FiftyFour.AuthURL = types.StringValue(resp.FiftyFour.AuthURL)
		r.FiftyFour.ClientID = types.StringValue(resp.FiftyFour.ClientID)
		r.FiftyFour.ClientSecret = types.StringPointerValue(resp.FiftyFour.ClientSecret)
		r.FiftyFour.Connections = []tfTypes.Input54Connections{}
		if len(r.FiftyFour.Connections) > len(resp.FiftyFour.Connections) {
			r.FiftyFour.Connections = r.FiftyFour.Connections[:len(resp.FiftyFour.Connections)]
		}
		for connectionsCount7, connectionsItem7 := range resp.FiftyFour.Connections {
			var connections15 tfTypes.Input54Connections
			connections15.Output = types.StringValue(connectionsItem7.Output)
			connections15.Pipeline = types.StringPointerValue(connectionsItem7.Pipeline)
			if connectionsCount7+1 > len(r.FiftyFour.Connections) {
				r.FiftyFour.Connections = append(r.FiftyFour.Connections, connections15)
			} else {
				r.FiftyFour.Connections[connectionsCount7].Output = connections15.Output
				r.FiftyFour.Connections[connectionsCount7].Pipeline = connections15.Pipeline
			}
		}
		r.FiftyFour.ContentConfig = []tfTypes.InputContentConfig{}
		if len(r.FiftyFour.ContentConfig) > len(resp.FiftyFour.ContentConfig) {
			r.FiftyFour.ContentConfig = r.FiftyFour.ContentConfig[:len(resp.FiftyFour.ContentConfig)]
		}
		for contentConfigCount, contentConfigItem := range resp.FiftyFour.ContentConfig {
			var contentConfig1 tfTypes.InputContentConfig
			contentConfig1.ContentDescription = types.StringPointerValue(contentConfigItem.ContentDescription)
			contentConfig1.ContentType = types.StringValue(contentConfigItem.ContentType)
			contentConfig1.Enabled = types.BoolPointerValue(contentConfigItem.Enabled)
			if contentConfigCount+1 > len(r.FiftyFour.ContentConfig) {
				r.FiftyFour.ContentConfig = append(r.FiftyFour.ContentConfig, contentConfig1)
			} else {
				r.FiftyFour.ContentConfig[contentConfigCount].ContentDescription = contentConfig1.ContentDescription
				r.FiftyFour.ContentConfig[contentConfigCount].ContentType = contentConfig1.ContentType
				r.FiftyFour.ContentConfig[contentConfigCount].Enabled = contentConfig1.Enabled
			}
		}
		r.FiftyFour.Description = types.StringPointerValue(resp.FiftyFour.Description)
		r.FiftyFour.Disabled = types.BoolPointerValue(resp.FiftyFour.Disabled)
		r.FiftyFour.Endpoint = types.StringPointerValue(resp.FiftyFour.Endpoint)
		r.FiftyFour.Environment = types.StringPointerValue(resp.FiftyFour.Environment)
		r.FiftyFour.ID = types.StringPointerValue(resp.FiftyFour.ID)
		if resp.FiftyFour.KeepAliveTime != nil {
			r.FiftyFour.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.KeepAliveTime)))
		} else {
			r.FiftyFour.KeepAliveTime = types.NumberNull()
		}
		if resp.FiftyFour.MaxMissedKeepAlives != nil {
			r.FiftyFour.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.MaxMissedKeepAlives)))
		} else {
			r.FiftyFour.MaxMissedKeepAlives = types.NumberNull()
		}
		r.FiftyFour.Metadata = []tfTypes.Input54Metadata{}
		if len(r.FiftyFour.Metadata) > len(resp.FiftyFour.Metadata) {
			r.FiftyFour.Metadata = r.FiftyFour.Metadata[:len(resp.FiftyFour.Metadata)]
		}
		for metadataCount8, metadataItem8 := range resp.FiftyFour.Metadata {
			var metadata17 tfTypes.Input54Metadata
			metadata17.Name = types.StringValue(metadataItem8.Name)
			metadata17.Value = types.StringValue(metadataItem8.Value)
			if metadataCount8+1 > len(r.FiftyFour.Metadata) {
				r.FiftyFour.Metadata = append(r.FiftyFour.Metadata, metadata17)
			} else {
				r.FiftyFour.Metadata[metadataCount8].Name = metadata17.Name
				r.FiftyFour.Metadata[metadataCount8].Value = metadata17.Value
			}
		}
		r.FiftyFour.Pipeline = types.StringPointerValue(resp.FiftyFour.Pipeline)
		if resp.FiftyFour.Pq == nil {
			r.FiftyFour.Pq = nil
		} else {
			r.FiftyFour.Pq = &tfTypes.Input54Pq{}
			if resp.FiftyFour.Pq.CommitFrequency != nil {
				r.FiftyFour.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.Pq.CommitFrequency)))
			} else {
				r.FiftyFour.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.FiftyFour.Pq.Compress != nil {
				r.FiftyFour.Pq.Compress = types.StringValue(string(*resp.FiftyFour.Pq.Compress))
			} else {
				r.FiftyFour.Pq.Compress = types.StringNull()
			}
			if resp.FiftyFour.Pq.MaxBufferSize != nil {
				r.FiftyFour.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.Pq.MaxBufferSize)))
			} else {
				r.FiftyFour.Pq.MaxBufferSize = types.NumberNull()
			}
			r.FiftyFour.Pq.MaxFileSize = types.StringPointerValue(resp.FiftyFour.Pq.MaxFileSize)
			r.FiftyFour.Pq.MaxSize = types.StringPointerValue(resp.FiftyFour.Pq.MaxSize)
			if resp.FiftyFour.Pq.Mode != nil {
				r.FiftyFour.Pq.Mode = types.StringValue(string(*resp.FiftyFour.Pq.Mode))
			} else {
				r.FiftyFour.Pq.Mode = types.StringNull()
			}
			r.FiftyFour.Pq.Path = types.StringPointerValue(resp.FiftyFour.Pq.Path)
		}
		r.FiftyFour.PqEnabled = types.BoolPointerValue(resp.FiftyFour.PqEnabled)
		if resp.FiftyFour.RequestTimeout != nil {
			r.FiftyFour.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.RequestTimeout)))
		} else {
			r.FiftyFour.RequestTimeout = types.NumberNull()
		}
		if resp.FiftyFour.RetryRules == nil {
			r.FiftyFour.RetryRules = nil
		} else {
			r.FiftyFour.RetryRules = &tfTypes.InputRetryRules{}
			r.FiftyFour.RetryRules.Codes = make([]types.Number, 0, len(resp.FiftyFour.RetryRules.Codes))
			for _, v := range resp.FiftyFour.RetryRules.Codes {
				r.FiftyFour.RetryRules.Codes = append(r.FiftyFour.RetryRules.Codes, types.NumberValue(big.NewFloat(float64(v))))
			}
			r.FiftyFour.RetryRules.EnableHeader = types.BoolPointerValue(resp.FiftyFour.RetryRules.EnableHeader)
			if resp.FiftyFour.RetryRules.Interval != nil {
				r.FiftyFour.RetryRules.Interval = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.RetryRules.Interval)))
			} else {
				r.FiftyFour.RetryRules.Interval = types.NumberNull()
			}
			if resp.FiftyFour.RetryRules.Limit != nil {
				r.FiftyFour.RetryRules.Limit = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.RetryRules.Limit)))
			} else {
				r.FiftyFour.RetryRules.Limit = types.NumberNull()
			}
			if resp.FiftyFour.RetryRules.Multiplier != nil {
				r.FiftyFour.RetryRules.Multiplier = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.RetryRules.Multiplier)))
			} else {
				r.FiftyFour.RetryRules.Multiplier = types.NumberNull()
			}
			r.FiftyFour.RetryRules.RetryConnectReset = types.BoolPointerValue(resp.FiftyFour.RetryRules.RetryConnectReset)
			r.FiftyFour.RetryRules.RetryConnectTimeout = types.BoolPointerValue(resp.FiftyFour.RetryRules.RetryConnectTimeout)
			if resp.FiftyFour.RetryRules.Type != nil {
				r.FiftyFour.RetryRules.Type = types.StringValue(string(*resp.FiftyFour.RetryRules.Type))
			} else {
				r.FiftyFour.RetryRules.Type = types.StringNull()
			}
		}
		r.FiftyFour.SendToRoutes = types.BoolPointerValue(resp.FiftyFour.SendToRoutes)
		if resp.FiftyFour.Status == nil {
			r.FiftyFour.Status = nil
		} else {
			r.FiftyFour.Status = &tfTypes.Input54Status{}
			r.FiftyFour.Status.Health = types.StringPointerValue(resp.FiftyFour.Status.Health)
			if resp.FiftyFour.Status.Metrics == nil {
				r.FiftyFour.Status.Metrics = nil
			} else {
				r.FiftyFour.Status.Metrics = &tfTypes.Input54Metrics{}
				if resp.FiftyFour.Status.Metrics.Buffered != nil {
					r.FiftyFour.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.Status.Metrics.Buffered)))
				} else {
					r.FiftyFour.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.FiftyFour.Status.Metrics.Dropped != nil {
					r.FiftyFour.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.Status.Metrics.Dropped)))
				} else {
					r.FiftyFour.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.FiftyFour.Status.Metrics.Received != nil {
					r.FiftyFour.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.Status.Metrics.Received)))
				} else {
					r.FiftyFour.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.FiftyFour.Status.Timestamp != nil {
				r.FiftyFour.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.FiftyFour.Status.Timestamp)))
			} else {
				r.FiftyFour.Status.Timestamp = types.NumberNull()
			}
		}
		r.FiftyFour.Streamtags = make([]types.String, 0, len(resp.FiftyFour.Streamtags))
		for _, v := range resp.FiftyFour.Streamtags {
			r.FiftyFour.Streamtags = append(r.FiftyFour.Streamtags, types.StringValue(v))
		}
		r.FiftyFour.TextSecret = types.StringPointerValue(resp.FiftyFour.TextSecret)
		r.FiftyFour.TTL = types.StringPointerValue(resp.FiftyFour.TTL)
		if resp.FiftyFour.Type != nil {
			r.FiftyFour.Type = types.StringValue(string(*resp.FiftyFour.Type))
		} else {
			r.FiftyFour.Type = types.StringNull()
		}
	}
	if resp.FiftyFive != nil {
		r.FiftyFive = &tfTypes.FiftyFive{}
		r.FiftyFive.Connections = []tfTypes.Input55Connections{}
		if len(r.FiftyFive.Connections) > len(resp.FiftyFive.Connections) {
			r.FiftyFive.Connections = r.FiftyFive.Connections[:len(resp.FiftyFive.Connections)]
		}
		for connectionsCount8, connectionsItem8 := range resp.FiftyFive.Connections {
			var connections17 tfTypes.Input55Connections
			connections17.Output = types.StringValue(connectionsItem8.Output)
			connections17.Pipeline = types.StringPointerValue(connectionsItem8.Pipeline)
			if connectionsCount8+1 > len(r.FiftyFive.Connections) {
				r.FiftyFive.Connections = append(r.FiftyFive.Connections, connections17)
			} else {
				r.FiftyFive.Connections[connectionsCount8].Output = connections17.Output
				r.FiftyFive.Connections[connectionsCount8].Pipeline = connections17.Pipeline
			}
		}
		r.FiftyFive.Description = types.StringPointerValue(resp.FiftyFive.Description)
		r.FiftyFive.Disabled = types.BoolPointerValue(resp.FiftyFive.Disabled)
		r.FiftyFive.EnablePassThrough = types.BoolPointerValue(resp.FiftyFive.EnablePassThrough)
		r.FiftyFive.Environment = types.StringPointerValue(resp.FiftyFive.Environment)
		r.FiftyFive.Host = types.StringPointerValue(resp.FiftyFive.Host)
		r.FiftyFive.ID = types.StringPointerValue(resp.FiftyFive.ID)
		r.FiftyFive.IPAllowlistRegex = types.StringPointerValue(resp.FiftyFive.IPAllowlistRegex)
		r.FiftyFive.IPDenylistRegex = types.StringPointerValue(resp.FiftyFive.IPDenylistRegex)
		r.FiftyFive.IpfixEnabled = types.BoolPointerValue(resp.FiftyFive.IpfixEnabled)
		r.FiftyFive.Metadata = []tfTypes.Input55Metadata{}
		if len(r.FiftyFive.Metadata) > len(resp.FiftyFive.Metadata) {
			r.FiftyFive.Metadata = r.FiftyFive.Metadata[:len(resp.FiftyFive.Metadata)]
		}
		for metadataCount9, metadataItem9 := range resp.FiftyFive.Metadata {
			var metadata19 tfTypes.Input55Metadata
			metadata19.Name = types.StringValue(metadataItem9.Name)
			metadata19.Value = types.StringValue(metadataItem9.Value)
			if metadataCount9+1 > len(r.FiftyFive.Metadata) {
				r.FiftyFive.Metadata = append(r.FiftyFive.Metadata, metadata19)
			} else {
				r.FiftyFive.Metadata[metadataCount9].Name = metadata19.Name
				r.FiftyFive.Metadata[metadataCount9].Value = metadata19.Value
			}
		}
		r.FiftyFive.Pipeline = types.StringPointerValue(resp.FiftyFive.Pipeline)
		if resp.FiftyFive.Port != nil {
			r.FiftyFive.Port = types.NumberValue(big.NewFloat(float64(*resp.FiftyFive.Port)))
		} else {
			r.FiftyFive.Port = types.NumberNull()
		}
		if resp.FiftyFive.Pq == nil {
			r.FiftyFive.Pq = nil
		} else {
			r.FiftyFive.Pq = &tfTypes.Input55Pq{}
			if resp.FiftyFive.Pq.CommitFrequency != nil {
				r.FiftyFive.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.FiftyFive.Pq.CommitFrequency)))
			} else {
				r.FiftyFive.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.FiftyFive.Pq.Compress != nil {
				r.FiftyFive.Pq.Compress = types.StringValue(string(*resp.FiftyFive.Pq.Compress))
			} else {
				r.FiftyFive.Pq.Compress = types.StringNull()
			}
			if resp.FiftyFive.Pq.MaxBufferSize != nil {
				r.FiftyFive.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FiftyFive.Pq.MaxBufferSize)))
			} else {
				r.FiftyFive.Pq.MaxBufferSize = types.NumberNull()
			}
			r.FiftyFive.Pq.MaxFileSize = types.StringPointerValue(resp.FiftyFive.Pq.MaxFileSize)
			r.FiftyFive.Pq.MaxSize = types.StringPointerValue(resp.FiftyFive.Pq.MaxSize)
			if resp.FiftyFive.Pq.Mode != nil {
				r.FiftyFive.Pq.Mode = types.StringValue(string(*resp.FiftyFive.Pq.Mode))
			} else {
				r.FiftyFive.Pq.Mode = types.StringNull()
			}
			r.FiftyFive.Pq.Path = types.StringPointerValue(resp.FiftyFive.Pq.Path)
		}
		r.FiftyFive.PqEnabled = types.BoolPointerValue(resp.FiftyFive.PqEnabled)
		r.FiftyFive.SendToRoutes = types.BoolPointerValue(resp.FiftyFive.SendToRoutes)
		if resp.FiftyFive.Status == nil {
			r.FiftyFive.Status = nil
		} else {
			r.FiftyFive.Status = &tfTypes.Input55Status{}
			r.FiftyFive.Status.Health = types.StringPointerValue(resp.FiftyFive.Status.Health)
			if resp.FiftyFive.Status.Metrics == nil {
				r.FiftyFive.Status.Metrics = nil
			} else {
				r.FiftyFive.Status.Metrics = &tfTypes.Input55Metrics{}
				if resp.FiftyFive.Status.Metrics.Buffered != nil {
					r.FiftyFive.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.FiftyFive.Status.Metrics.Buffered)))
				} else {
					r.FiftyFive.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.FiftyFive.Status.Metrics.Dropped != nil {
					r.FiftyFive.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.FiftyFive.Status.Metrics.Dropped)))
				} else {
					r.FiftyFive.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.FiftyFive.Status.Metrics.Received != nil {
					r.FiftyFive.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.FiftyFive.Status.Metrics.Received)))
				} else {
					r.FiftyFive.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.FiftyFive.Status.Timestamp != nil {
				r.FiftyFive.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.FiftyFive.Status.Timestamp)))
			} else {
				r.FiftyFive.Status.Timestamp = types.NumberNull()
			}
		}
		r.FiftyFive.Streamtags = make([]types.String, 0, len(resp.FiftyFive.Streamtags))
		for _, v := range resp.FiftyFive.Streamtags {
			r.FiftyFive.Streamtags = append(r.FiftyFive.Streamtags, types.StringValue(v))
		}
		if resp.FiftyFive.TemplateCacheMinutes != nil {
			r.FiftyFive.TemplateCacheMinutes = types.NumberValue(big.NewFloat(float64(*resp.FiftyFive.TemplateCacheMinutes)))
		} else {
			r.FiftyFive.TemplateCacheMinutes = types.NumberNull()
		}
		if resp.FiftyFive.Type != nil {
			r.FiftyFive.Type = types.StringValue(string(*resp.FiftyFive.Type))
		} else {
			r.FiftyFive.Type = types.StringNull()
		}
		if resp.FiftyFive.UDPSocketRxBufSize != nil {
			r.FiftyFive.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*resp.FiftyFive.UDPSocketRxBufSize)))
		} else {
			r.FiftyFive.UDPSocketRxBufSize = types.NumberNull()
		}
		r.FiftyFive.V5Enabled = types.BoolPointerValue(resp.FiftyFive.V5Enabled)
		r.FiftyFive.V9Enabled = types.BoolPointerValue(resp.FiftyFive.V9Enabled)
	}
	if resp.FiftySix != nil {
		r.FiftySix = &tfTypes.FiftySix{}
		r.FiftySix.AssumeRoleArn = types.StringPointerValue(resp.FiftySix.AssumeRoleArn)
		r.FiftySix.AssumeRoleExternalID = types.StringPointerValue(resp.FiftySix.AssumeRoleExternalID)
		r.FiftySix.AwsAccountID = types.StringPointerValue(resp.FiftySix.AwsAccountID)
		r.FiftySix.AwsAPIKey = types.StringPointerValue(resp.FiftySix.AwsAPIKey)
		if resp.FiftySix.AwsAuthenticationMethod != nil {
			r.FiftySix.AwsAuthenticationMethod = types.StringValue(string(*resp.FiftySix.AwsAuthenticationMethod))
		} else {
			r.FiftySix.AwsAuthenticationMethod = types.StringNull()
		}
		r.FiftySix.AwsSecret = types.StringPointerValue(resp.FiftySix.AwsSecret)
		r.FiftySix.AwsSecretKey = types.StringPointerValue(resp.FiftySix.AwsSecretKey)
		r.FiftySix.BreakerRulesets = make([]types.String, 0, len(resp.FiftySix.BreakerRulesets))
		for _, v := range resp.FiftySix.BreakerRulesets {
			r.FiftySix.BreakerRulesets = append(r.FiftySix.BreakerRulesets, types.StringValue(v))
		}
		if resp.FiftySix.Checkpointing == nil {
			r.FiftySix.Checkpointing = nil
		} else {
			r.FiftySix.Checkpointing = &tfTypes.InputCheckpointing{}
			r.FiftySix.Checkpointing.Enabled = types.BoolPointerValue(resp.FiftySix.Checkpointing.Enabled)
			if resp.FiftySix.Checkpointing.Retries != nil {
				r.FiftySix.Checkpointing.Retries = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.Checkpointing.Retries)))
			} else {
				r.FiftySix.Checkpointing.Retries = types.NumberNull()
			}
		}
		r.FiftySix.Connections = []tfTypes.Input56Connections{}
		if len(r.FiftySix.Connections) > len(resp.FiftySix.Connections) {
			r.FiftySix.Connections = r.FiftySix.Connections[:len(resp.FiftySix.Connections)]
		}
		for connectionsCount9, connectionsItem9 := range resp.FiftySix.Connections {
			var connections19 tfTypes.Input56Connections
			connections19.Output = types.StringValue(connectionsItem9.Output)
			connections19.Pipeline = types.StringPointerValue(connectionsItem9.Pipeline)
			if connectionsCount9+1 > len(r.FiftySix.Connections) {
				r.FiftySix.Connections = append(r.FiftySix.Connections, connections19)
			} else {
				r.FiftySix.Connections[connectionsCount9].Output = connections19.Output
				r.FiftySix.Connections[connectionsCount9].Pipeline = connections19.Pipeline
			}
		}
		r.FiftySix.Description = types.StringPointerValue(resp.FiftySix.Description)
		r.FiftySix.Disabled = types.BoolPointerValue(resp.FiftySix.Disabled)
		if resp.FiftySix.DurationSeconds != nil {
			r.FiftySix.DurationSeconds = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.DurationSeconds)))
		} else {
			r.FiftySix.DurationSeconds = types.NumberNull()
		}
		r.FiftySix.EnableAssumeRole = types.BoolPointerValue(resp.FiftySix.EnableAssumeRole)
		r.FiftySix.EnableSQSAssumeRole = types.BoolPointerValue(resp.FiftySix.EnableSQSAssumeRole)
		r.FiftySix.Encoding = types.StringPointerValue(resp.FiftySix.Encoding)
		r.FiftySix.Endpoint = types.StringPointerValue(resp.FiftySix.Endpoint)
		r.FiftySix.Environment = types.StringPointerValue(resp.FiftySix.Environment)
		r.FiftySix.FileFilter = types.StringPointerValue(resp.FiftySix.FileFilter)
		r.FiftySix.ID = types.StringPointerValue(resp.FiftySix.ID)
		if resp.FiftySix.MaxMessages != nil {
			r.FiftySix.MaxMessages = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.MaxMessages)))
		} else {
			r.FiftySix.MaxMessages = types.NumberNull()
		}
		r.FiftySix.Metadata = []tfTypes.Input56Metadata{}
		if len(r.FiftySix.Metadata) > len(resp.FiftySix.Metadata) {
			r.FiftySix.Metadata = r.FiftySix.Metadata[:len(resp.FiftySix.Metadata)]
		}
		for metadataCount10, metadataItem10 := range resp.FiftySix.Metadata {
			var metadata21 tfTypes.Input56Metadata
			metadata21.Name = types.StringValue(metadataItem10.Name)
			metadata21.Value = types.StringValue(metadataItem10.Value)
			if metadataCount10+1 > len(r.FiftySix.Metadata) {
				r.FiftySix.Metadata = append(r.FiftySix.Metadata, metadata21)
			} else {
				r.FiftySix.Metadata[metadataCount10].Name = metadata21.Name
				r.FiftySix.Metadata[metadataCount10].Value = metadata21.Value
			}
		}
		if resp.FiftySix.NumReceivers != nil {
			r.FiftySix.NumReceivers = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.NumReceivers)))
		} else {
			r.FiftySix.NumReceivers = types.NumberNull()
		}
		if resp.FiftySix.ParquetChunkDownloadTimeout != nil {
			r.FiftySix.ParquetChunkDownloadTimeout = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.ParquetChunkDownloadTimeout)))
		} else {
			r.FiftySix.ParquetChunkDownloadTimeout = types.NumberNull()
		}
		if resp.FiftySix.ParquetChunkSizeMB != nil {
			r.FiftySix.ParquetChunkSizeMB = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.ParquetChunkSizeMB)))
		} else {
			r.FiftySix.ParquetChunkSizeMB = types.NumberNull()
		}
		r.FiftySix.Pipeline = types.StringPointerValue(resp.FiftySix.Pipeline)
		if resp.FiftySix.PollTimeout != nil {
			r.FiftySix.PollTimeout = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.PollTimeout)))
		} else {
			r.FiftySix.PollTimeout = types.NumberNull()
		}
		if resp.FiftySix.Pq == nil {
			r.FiftySix.Pq = nil
		} else {
			r.FiftySix.Pq = &tfTypes.Input56Pq{}
			if resp.FiftySix.Pq.CommitFrequency != nil {
				r.FiftySix.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.Pq.CommitFrequency)))
			} else {
				r.FiftySix.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.FiftySix.Pq.Compress != nil {
				r.FiftySix.Pq.Compress = types.StringValue(string(*resp.FiftySix.Pq.Compress))
			} else {
				r.FiftySix.Pq.Compress = types.StringNull()
			}
			if resp.FiftySix.Pq.MaxBufferSize != nil {
				r.FiftySix.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.Pq.MaxBufferSize)))
			} else {
				r.FiftySix.Pq.MaxBufferSize = types.NumberNull()
			}
			r.FiftySix.Pq.MaxFileSize = types.StringPointerValue(resp.FiftySix.Pq.MaxFileSize)
			r.FiftySix.Pq.MaxSize = types.StringPointerValue(resp.FiftySix.Pq.MaxSize)
			if resp.FiftySix.Pq.Mode != nil {
				r.FiftySix.Pq.Mode = types.StringValue(string(*resp.FiftySix.Pq.Mode))
			} else {
				r.FiftySix.Pq.Mode = types.StringNull()
			}
			r.FiftySix.Pq.Path = types.StringPointerValue(resp.FiftySix.Pq.Path)
		}
		r.FiftySix.PqEnabled = types.BoolPointerValue(resp.FiftySix.PqEnabled)
		if resp.FiftySix.Preprocess == nil {
			r.FiftySix.Preprocess = nil
		} else {
			r.FiftySix.Preprocess = &tfTypes.Input56Preprocess{}
			r.FiftySix.Preprocess.Args = make([]types.String, 0, len(resp.FiftySix.Preprocess.Args))
			for _, v := range resp.FiftySix.Preprocess.Args {
				r.FiftySix.Preprocess.Args = append(r.FiftySix.Preprocess.Args, types.StringValue(v))
			}
			r.FiftySix.Preprocess.Command = types.StringPointerValue(resp.FiftySix.Preprocess.Command)
			r.FiftySix.Preprocess.Disabled = types.BoolPointerValue(resp.FiftySix.Preprocess.Disabled)
		}
		r.FiftySix.QueueName = types.StringValue(resp.FiftySix.QueueName)
		r.FiftySix.Region = types.StringPointerValue(resp.FiftySix.Region)
		r.FiftySix.RejectUnauthorized = types.BoolPointerValue(resp.FiftySix.RejectUnauthorized)
		r.FiftySix.ReuseConnections = types.BoolPointerValue(resp.FiftySix.ReuseConnections)
		r.FiftySix.SendToRoutes = types.BoolPointerValue(resp.FiftySix.SendToRoutes)
		if resp.FiftySix.SignatureVersion != nil {
			r.FiftySix.SignatureVersion = types.StringValue(string(*resp.FiftySix.SignatureVersion))
		} else {
			r.FiftySix.SignatureVersion = types.StringNull()
		}
		r.FiftySix.SkipOnError = types.BoolPointerValue(resp.FiftySix.SkipOnError)
		if resp.FiftySix.SocketTimeout != nil {
			r.FiftySix.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.SocketTimeout)))
		} else {
			r.FiftySix.SocketTimeout = types.NumberNull()
		}
		if resp.FiftySix.StaleChannelFlushMs != nil {
			r.FiftySix.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.StaleChannelFlushMs)))
		} else {
			r.FiftySix.StaleChannelFlushMs = types.NumberNull()
		}
		if resp.FiftySix.Status == nil {
			r.FiftySix.Status = nil
		} else {
			r.FiftySix.Status = &tfTypes.Input56Status{}
			r.FiftySix.Status.Health = types.StringPointerValue(resp.FiftySix.Status.Health)
			if resp.FiftySix.Status.Metrics == nil {
				r.FiftySix.Status.Metrics = nil
			} else {
				r.FiftySix.Status.Metrics = &tfTypes.Input56Metrics{}
				if resp.FiftySix.Status.Metrics.Buffered != nil {
					r.FiftySix.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.Status.Metrics.Buffered)))
				} else {
					r.FiftySix.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.FiftySix.Status.Metrics.Dropped != nil {
					r.FiftySix.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.Status.Metrics.Dropped)))
				} else {
					r.FiftySix.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.FiftySix.Status.Metrics.Received != nil {
					r.FiftySix.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.Status.Metrics.Received)))
				} else {
					r.FiftySix.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.FiftySix.Status.Timestamp != nil {
				r.FiftySix.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.Status.Timestamp)))
			} else {
				r.FiftySix.Status.Timestamp = types.NumberNull()
			}
		}
		r.FiftySix.Streamtags = make([]types.String, 0, len(resp.FiftySix.Streamtags))
		for _, v := range resp.FiftySix.Streamtags {
			r.FiftySix.Streamtags = append(r.FiftySix.Streamtags, types.StringValue(v))
		}
		r.FiftySix.Type = types.StringValue(string(resp.FiftySix.Type))
		if resp.FiftySix.VisibilityTimeout != nil {
			r.FiftySix.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*resp.FiftySix.VisibilityTimeout)))
		} else {
			r.FiftySix.VisibilityTimeout = types.NumberNull()
		}
	}
	if resp.FiftySeven != nil {
		r.FiftySeven = &tfTypes.FiftySeven{}
		r.FiftySeven.AccessControlAllowHeaders = make([]types.String, 0, len(resp.FiftySeven.AccessControlAllowHeaders))
		for _, v := range resp.FiftySeven.AccessControlAllowHeaders {
			r.FiftySeven.AccessControlAllowHeaders = append(r.FiftySeven.AccessControlAllowHeaders, types.StringValue(v))
		}
		r.FiftySeven.AccessControlAllowOrigin = make([]types.String, 0, len(resp.FiftySeven.AccessControlAllowOrigin))
		for _, v := range resp.FiftySeven.AccessControlAllowOrigin {
			r.FiftySeven.AccessControlAllowOrigin = append(r.FiftySeven.AccessControlAllowOrigin, types.StringValue(v))
		}
		if resp.FiftySeven.ActivityLogSampleRate != nil {
			r.FiftySeven.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.ActivityLogSampleRate)))
		} else {
			r.FiftySeven.ActivityLogSampleRate = types.NumberNull()
		}
		r.FiftySeven.AllowedIndexes = make([]types.String, 0, len(resp.FiftySeven.AllowedIndexes))
		for _, v := range resp.FiftySeven.AllowedIndexes {
			r.FiftySeven.AllowedIndexes = append(r.FiftySeven.AllowedIndexes, types.StringValue(v))
		}
		r.FiftySeven.AuthTokens = []tfTypes.InputAuthTokens{}
		if len(r.FiftySeven.AuthTokens) > len(resp.FiftySeven.AuthTokens) {
			r.FiftySeven.AuthTokens = r.FiftySeven.AuthTokens[:len(resp.FiftySeven.AuthTokens)]
		}
		for authTokensCount, authTokensItem := range resp.FiftySeven.AuthTokens {
			var authTokens1 tfTypes.InputAuthTokens
			authTokens1.AllowedIndexesAtToken = make([]types.String, 0, len(authTokensItem.AllowedIndexesAtToken))
			for _, v := range authTokensItem.AllowedIndexesAtToken {
				authTokens1.AllowedIndexesAtToken = append(authTokens1.AllowedIndexesAtToken, types.StringValue(v))
			}
			if authTokensItem.AuthType != nil {
				authTokens1.AuthType = types.StringValue(string(*authTokensItem.AuthType))
			} else {
				authTokens1.AuthType = types.StringNull()
			}
			authTokens1.Description = types.StringPointerValue(authTokensItem.Description)
			authTokens1.Enabled = types.BoolPointerValue(authTokensItem.Enabled)
			authTokens1.Metadata = []tfTypes.Input57AuthTokensMetadata{}
			for metadataCount11, metadataItem11 := range authTokensItem.Metadata {
				var metadata23 tfTypes.Input57AuthTokensMetadata
				metadata23.Name = types.StringValue(metadataItem11.Name)
				metadata23.Value = types.StringValue(metadataItem11.Value)
				if metadataCount11+1 > len(authTokens1.Metadata) {
					authTokens1.Metadata = append(authTokens1.Metadata, metadata23)
				} else {
					authTokens1.Metadata[metadataCount11].Name = metadata23.Name
					authTokens1.Metadata[metadataCount11].Value = metadata23.Value
				}
			}
			tokenResult, _ := json.Marshal(authTokensItem.Token)
			authTokens1.Token = types.StringValue(string(tokenResult))
			if authTokensItem.TokenSecret == nil {
				authTokens1.TokenSecret = types.StringNull()
			} else {
				tokenSecretResult, _ := json.Marshal(authTokensItem.TokenSecret)
				authTokens1.TokenSecret = types.StringValue(string(tokenSecretResult))
			}
			if authTokensCount+1 > len(r.FiftySeven.AuthTokens) {
				r.FiftySeven.AuthTokens = append(r.FiftySeven.AuthTokens, authTokens1)
			} else {
				r.FiftySeven.AuthTokens[authTokensCount].AllowedIndexesAtToken = authTokens1.AllowedIndexesAtToken
				r.FiftySeven.AuthTokens[authTokensCount].AuthType = authTokens1.AuthType
				r.FiftySeven.AuthTokens[authTokensCount].Description = authTokens1.Description
				r.FiftySeven.AuthTokens[authTokensCount].Enabled = authTokens1.Enabled
				r.FiftySeven.AuthTokens[authTokensCount].Metadata = authTokens1.Metadata
				r.FiftySeven.AuthTokens[authTokensCount].Token = authTokens1.Token
				r.FiftySeven.AuthTokens[authTokensCount].TokenSecret = authTokens1.TokenSecret
			}
		}
		r.FiftySeven.CaptureHeaders = types.BoolPointerValue(resp.FiftySeven.CaptureHeaders)
		r.FiftySeven.Connections = []tfTypes.Input57Connections{}
		if len(r.FiftySeven.Connections) > len(resp.FiftySeven.Connections) {
			r.FiftySeven.Connections = r.FiftySeven.Connections[:len(resp.FiftySeven.Connections)]
		}
		for connectionsCount10, connectionsItem10 := range resp.FiftySeven.Connections {
			var connections21 tfTypes.Input57Connections
			connections21.Output = types.StringValue(connectionsItem10.Output)
			connections21.Pipeline = types.StringPointerValue(connectionsItem10.Pipeline)
			if connectionsCount10+1 > len(r.FiftySeven.Connections) {
				r.FiftySeven.Connections = append(r.FiftySeven.Connections, connections21)
			} else {
				r.FiftySeven.Connections[connectionsCount10].Output = connections21.Output
				r.FiftySeven.Connections[connectionsCount10].Pipeline = connections21.Pipeline
			}
		}
		r.FiftySeven.Description = types.StringPointerValue(resp.FiftySeven.Description)
		r.FiftySeven.Disabled = types.BoolPointerValue(resp.FiftySeven.Disabled)
		r.FiftySeven.EmitTokenMetrics = types.BoolPointerValue(resp.FiftySeven.EmitTokenMetrics)
		if resp.FiftySeven.EnableHealthCheck == nil {
			r.FiftySeven.EnableHealthCheck = types.StringNull()
		} else {
			enableHealthCheckResult, _ := json.Marshal(resp.FiftySeven.EnableHealthCheck)
			r.FiftySeven.EnableHealthCheck = types.StringValue(string(enableHealthCheckResult))
		}
		r.FiftySeven.EnableProxyHeader = types.BoolPointerValue(resp.FiftySeven.EnableProxyHeader)
		r.FiftySeven.Environment = types.StringPointerValue(resp.FiftySeven.Environment)
		r.FiftySeven.HecAcks = types.BoolPointerValue(resp.FiftySeven.HecAcks)
		r.FiftySeven.HecAPI = types.StringPointerValue(resp.FiftySeven.HecAPI)
		r.FiftySeven.Host = types.StringPointerValue(resp.FiftySeven.Host)
		r.FiftySeven.ID = types.StringPointerValue(resp.FiftySeven.ID)
		r.FiftySeven.IPAllowlistRegex = types.StringPointerValue(resp.FiftySeven.IPAllowlistRegex)
		r.FiftySeven.IPDenylistRegex = types.StringPointerValue(resp.FiftySeven.IPDenylistRegex)
		if resp.FiftySeven.KeepAliveTimeout != nil {
			r.FiftySeven.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.KeepAliveTimeout)))
		} else {
			r.FiftySeven.KeepAliveTimeout = types.NumberNull()
		}
		if resp.FiftySeven.MaxActiveReq != nil {
			r.FiftySeven.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.MaxActiveReq)))
		} else {
			r.FiftySeven.MaxActiveReq = types.NumberNull()
		}
		r.FiftySeven.MaxRequestsPerSocket = types.Int64PointerValue(resp.FiftySeven.MaxRequestsPerSocket)
		r.FiftySeven.Metadata = []tfTypes.Input57Metadata{}
		if len(r.FiftySeven.Metadata) > len(resp.FiftySeven.Metadata) {
			r.FiftySeven.Metadata = r.FiftySeven.Metadata[:len(resp.FiftySeven.Metadata)]
		}
		for metadataCount12, metadataItem12 := range resp.FiftySeven.Metadata {
			var metadata25 tfTypes.Input57Metadata
			metadata25.Name = types.StringValue(metadataItem12.Name)
			metadata25.Value = types.StringValue(metadataItem12.Value)
			if metadataCount12+1 > len(r.FiftySeven.Metadata) {
				r.FiftySeven.Metadata = append(r.FiftySeven.Metadata, metadata25)
			} else {
				r.FiftySeven.Metadata[metadataCount12].Name = metadata25.Name
				r.FiftySeven.Metadata[metadataCount12].Value = metadata25.Value
			}
		}
		r.FiftySeven.Pipeline = types.StringPointerValue(resp.FiftySeven.Pipeline)
		r.FiftySeven.Port = types.NumberValue(big.NewFloat(float64(resp.FiftySeven.Port)))
		if resp.FiftySeven.Pq == nil {
			r.FiftySeven.Pq = nil
		} else {
			r.FiftySeven.Pq = &tfTypes.Input57Pq{}
			if resp.FiftySeven.Pq.CommitFrequency != nil {
				r.FiftySeven.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.Pq.CommitFrequency)))
			} else {
				r.FiftySeven.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.FiftySeven.Pq.Compress != nil {
				r.FiftySeven.Pq.Compress = types.StringValue(string(*resp.FiftySeven.Pq.Compress))
			} else {
				r.FiftySeven.Pq.Compress = types.StringNull()
			}
			if resp.FiftySeven.Pq.MaxBufferSize != nil {
				r.FiftySeven.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.Pq.MaxBufferSize)))
			} else {
				r.FiftySeven.Pq.MaxBufferSize = types.NumberNull()
			}
			r.FiftySeven.Pq.MaxFileSize = types.StringPointerValue(resp.FiftySeven.Pq.MaxFileSize)
			r.FiftySeven.Pq.MaxSize = types.StringPointerValue(resp.FiftySeven.Pq.MaxSize)
			if resp.FiftySeven.Pq.Mode != nil {
				r.FiftySeven.Pq.Mode = types.StringValue(string(*resp.FiftySeven.Pq.Mode))
			} else {
				r.FiftySeven.Pq.Mode = types.StringNull()
			}
			r.FiftySeven.Pq.Path = types.StringPointerValue(resp.FiftySeven.Pq.Path)
		}
		r.FiftySeven.PqEnabled = types.BoolPointerValue(resp.FiftySeven.PqEnabled)
		if resp.FiftySeven.RequestTimeout != nil {
			r.FiftySeven.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.RequestTimeout)))
		} else {
			r.FiftySeven.RequestTimeout = types.NumberNull()
		}
		r.FiftySeven.SendToRoutes = types.BoolPointerValue(resp.FiftySeven.SendToRoutes)
		if resp.FiftySeven.SocketTimeout != nil {
			r.FiftySeven.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.SocketTimeout)))
		} else {
			r.FiftySeven.SocketTimeout = types.NumberNull()
		}
		if resp.FiftySeven.Status == nil {
			r.FiftySeven.Status = nil
		} else {
			r.FiftySeven.Status = &tfTypes.Input57Status{}
			r.FiftySeven.Status.Health = types.StringPointerValue(resp.FiftySeven.Status.Health)
			if resp.FiftySeven.Status.Metrics == nil {
				r.FiftySeven.Status.Metrics = nil
			} else {
				r.FiftySeven.Status.Metrics = &tfTypes.Input57Metrics{}
				if resp.FiftySeven.Status.Metrics.Buffered != nil {
					r.FiftySeven.Status.Metrics.Buffered = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.Status.Metrics.Buffered)))
				} else {
					r.FiftySeven.Status.Metrics.Buffered = types.NumberNull()
				}
				if resp.FiftySeven.Status.Metrics.Dropped != nil {
					r.FiftySeven.Status.Metrics.Dropped = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.Status.Metrics.Dropped)))
				} else {
					r.FiftySeven.Status.Metrics.Dropped = types.NumberNull()
				}
				if resp.FiftySeven.Status.Metrics.Received != nil {
					r.FiftySeven.Status.Metrics.Received = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.Status.Metrics.Received)))
				} else {
					r.FiftySeven.Status.Metrics.Received = types.NumberNull()
				}
			}
			if resp.FiftySeven.Status.Timestamp != nil {
				r.FiftySeven.Status.Timestamp = types.NumberValue(big.NewFloat(float64(*resp.FiftySeven.Status.Timestamp)))
			} else {
				r.FiftySeven.Status.Timestamp = types.NumberNull()
			}
		}
		r.FiftySeven.Streamtags = make([]types.String, 0, len(resp.FiftySeven.Streamtags))
		for _, v := range resp.FiftySeven.Streamtags {
			r.FiftySeven.Streamtags = append(r.FiftySeven.Streamtags, types.StringValue(v))
		}
		if resp.FiftySeven.TLS == nil {
			r.FiftySeven.TLS = nil
		} else {
			r.FiftySeven.TLS = &tfTypes.Input57TLSSettingsServerSide{}
			r.FiftySeven.TLS.CaPath = types.StringPointerValue(resp.FiftySeven.TLS.CaPath)
			r.FiftySeven.TLS.CertificateName = types.StringPointerValue(resp.FiftySeven.TLS.CertificateName)
			r.FiftySeven.TLS.CertPath = types.StringPointerValue(resp.FiftySeven.TLS.CertPath)
			if resp.FiftySeven.TLS.CommonNameRegex == nil {
				r.FiftySeven.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult2, _ := json.Marshal(resp.FiftySeven.TLS.CommonNameRegex)
				r.FiftySeven.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult2))
			}
			r.FiftySeven.TLS.Disabled = types.BoolPointerValue(resp.FiftySeven.TLS.Disabled)
			if resp.FiftySeven.TLS.MaxVersion != nil {
				r.FiftySeven.TLS.MaxVersion = types.StringValue(string(*resp.FiftySeven.TLS.MaxVersion))
			} else {
				r.FiftySeven.TLS.MaxVersion = types.StringNull()
			}
			if resp.FiftySeven.TLS.MinVersion != nil {
				r.FiftySeven.TLS.MinVersion = types.StringValue(string(*resp.FiftySeven.TLS.MinVersion))
			} else {
				r.FiftySeven.TLS.MinVersion = types.StringNull()
			}
			r.FiftySeven.TLS.Passphrase = types.StringPointerValue(resp.FiftySeven.TLS.Passphrase)
			r.FiftySeven.TLS.PrivKeyPath = types.StringPointerValue(resp.FiftySeven.TLS.PrivKeyPath)
			if resp.FiftySeven.TLS.RejectUnauthorized == nil {
				r.FiftySeven.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult2, _ := json.Marshal(resp.FiftySeven.TLS.RejectUnauthorized)
				r.FiftySeven.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult2))
			}
			r.FiftySeven.TLS.RequestCert = types.BoolPointerValue(resp.FiftySeven.TLS.RequestCert)
		}
		if resp.FiftySeven.Type != nil {
			r.FiftySeven.Type = types.StringValue(string(*resp.FiftySeven.Type))
		} else {
			r.FiftySeven.Type = types.StringNull()
		}
	}
	if resp.InputAzureBlob != nil {
		r.InputAzureBlob = &tfTypes.InputAzureBlob{}
		if resp.InputAzureBlob.AuthType != nil {
			r.InputAzureBlob.AuthType = types.StringValue(string(*resp.InputAzureBlob.AuthType))
		} else {
			r.InputAzureBlob.AuthType = types.StringNull()
		}
		r.InputAzureBlob.BreakerRulesets = make([]types.String, 0, len(resp.InputAzureBlob.BreakerRulesets))
		for _, v := range resp.InputAzureBlob.BreakerRulesets {
			r.InputAzureBlob.BreakerRulesets = append(r.InputAzureBlob.BreakerRulesets, types.StringValue(v))
		}
		if resp.InputAzureBlob.Certificate == nil {
			r.InputAzureBlob.Certificate = nil
		} else {
			r.InputAzureBlob.Certificate = &tfTypes.InputAzureBlobCertificate{}
			r.InputAzureBlob.Certificate.CertificateName = types.StringValue(resp.InputAzureBlob.Certificate.CertificateName)
		}
		r.InputAzureBlob.ClientID = types.StringPointerValue(resp.InputAzureBlob.ClientID)
		r.InputAzureBlob.ClientTextSecret = types.StringPointerValue(resp.InputAzureBlob.ClientTextSecret)
		r.InputAzureBlob.Connections = []tfTypes.InputAzureBlobConnections{}
		if len(r.InputAzureBlob.Connections) > len(resp.InputAzureBlob.Connections) {
			r.InputAzureBlob.Connections = r.InputAzureBlob.Connections[:len(resp.InputAzureBlob.Connections)]
		}
		for connectionsCount11, connectionsItem11 := range resp.InputAzureBlob.Connections {
			var connections23 tfTypes.InputAzureBlobConnections
			connections23.Output = types.StringValue(connectionsItem11.Output)
			connections23.Pipeline = types.StringPointerValue(connectionsItem11.Pipeline)
			if connectionsCount11+1 > len(r.InputAzureBlob.Connections) {
				r.InputAzureBlob.Connections = append(r.InputAzureBlob.Connections, connections23)
			} else {
				r.InputAzureBlob.Connections[connectionsCount11].Output = connections23.Output
				r.InputAzureBlob.Connections[connectionsCount11].Pipeline = connections23.Pipeline
			}
		}
		r.InputAzureBlob.ConnectionString = types.StringPointerValue(resp.InputAzureBlob.ConnectionString)
		r.InputAzureBlob.Description = types.StringPointerValue(resp.InputAzureBlob.Description)
		r.InputAzureBlob.Disabled = types.BoolPointerValue(resp.InputAzureBlob.Disabled)
		r.InputAzureBlob.EndpointSuffix = types.StringPointerValue(resp.InputAzureBlob.EndpointSuffix)
		r.InputAzureBlob.Environment = types.StringPointerValue(resp.InputAzureBlob.Environment)
		r.InputAzureBlob.FileFilter = types.StringPointerValue(resp.InputAzureBlob.FileFilter)
		r.InputAzureBlob.ID = types.StringPointerValue(resp.InputAzureBlob.ID)
		if resp.InputAzureBlob.MaxMessages != nil {
			r.InputAzureBlob.MaxMessages = types.NumberValue(big.NewFloat(float64(*resp.InputAzureBlob.MaxMessages)))
		} else {
			r.InputAzureBlob.MaxMessages = types.NumberNull()
		}
		r.InputAzureBlob.Metadata = []tfTypes.InputAzureBlobMetadata{}
		if len(r.InputAzureBlob.Metadata) > len(resp.InputAzureBlob.Metadata) {
			r.InputAzureBlob.Metadata = r.InputAzureBlob.Metadata[:len(resp.InputAzureBlob.Metadata)]
		}
		for metadataCount13, metadataItem13 := range resp.InputAzureBlob.Metadata {
			var metadata27 tfTypes.InputAzureBlobMetadata
			metadata27.Name = types.StringValue(metadataItem13.Name)
			metadata27.Value = types.StringValue(metadataItem13.Value)
			if metadataCount13+1 > len(r.InputAzureBlob.Metadata) {
				r.InputAzureBlob.Metadata = append(r.InputAzureBlob.Metadata, metadata27)
			} else {
				r.InputAzureBlob.Metadata[metadataCount13].Name = metadata27.Name
				r.InputAzureBlob.Metadata[metadataCount13].Value = metadata27.Value
			}
		}
		if resp.InputAzureBlob.NumReceivers != nil {
			r.InputAzureBlob.NumReceivers = types.NumberValue(big.NewFloat(float64(*resp.InputAzureBlob.NumReceivers)))
		} else {
			r.InputAzureBlob.NumReceivers = types.NumberNull()
		}
		if resp.InputAzureBlob.ParquetChunkDownloadTimeout != nil {
			r.InputAzureBlob.ParquetChunkDownloadTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputAzureBlob.ParquetChunkDownloadTimeout)))
		} else {
			r.InputAzureBlob.ParquetChunkDownloadTimeout = types.NumberNull()
		}
		if resp.InputAzureBlob.ParquetChunkSizeMB != nil {
			r.InputAzureBlob.ParquetChunkSizeMB = types.NumberValue(big.NewFloat(float64(*resp.InputAzureBlob.ParquetChunkSizeMB)))
		} else {
			r.InputAzureBlob.ParquetChunkSizeMB = types.NumberNull()
		}
		r.InputAzureBlob.Pipeline = types.StringPointerValue(resp.InputAzureBlob.Pipeline)
		if resp.InputAzureBlob.Pq == nil {
			r.InputAzureBlob.Pq = nil
		} else {
			r.InputAzureBlob.Pq = &tfTypes.InputAzureBlobPq{}
			if resp.InputAzureBlob.Pq.CommitFrequency != nil {
				r.InputAzureBlob.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputAzureBlob.Pq.CommitFrequency)))
			} else {
				r.InputAzureBlob.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputAzureBlob.Pq.Compress != nil {
				r.InputAzureBlob.Pq.Compress = types.StringValue(string(*resp.InputAzureBlob.Pq.Compress))
			} else {
				r.InputAzureBlob.Pq.Compress = types.StringNull()
			}
			if resp.InputAzureBlob.Pq.MaxBufferSize != nil {
				r.InputAzureBlob.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputAzureBlob.Pq.MaxBufferSize)))
			} else {
				r.InputAzureBlob.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputAzureBlob.Pq.MaxFileSize = types.StringPointerValue(resp.InputAzureBlob.Pq.MaxFileSize)
			r.InputAzureBlob.Pq.MaxSize = types.StringPointerValue(resp.InputAzureBlob.Pq.MaxSize)
			if resp.InputAzureBlob.Pq.Mode != nil {
				r.InputAzureBlob.Pq.Mode = types.StringValue(string(*resp.InputAzureBlob.Pq.Mode))
			} else {
				r.InputAzureBlob.Pq.Mode = types.StringNull()
			}
			r.InputAzureBlob.Pq.Path = types.StringPointerValue(resp.InputAzureBlob.Pq.Path)
		}
		r.InputAzureBlob.PqEnabled = types.BoolPointerValue(resp.InputAzureBlob.PqEnabled)
		r.InputAzureBlob.QueueName = types.StringValue(resp.InputAzureBlob.QueueName)
		r.InputAzureBlob.SendToRoutes = types.BoolPointerValue(resp.InputAzureBlob.SendToRoutes)
		if resp.InputAzureBlob.ServicePeriodSecs != nil {
			r.InputAzureBlob.ServicePeriodSecs = types.NumberValue(big.NewFloat(float64(*resp.InputAzureBlob.ServicePeriodSecs)))
		} else {
			r.InputAzureBlob.ServicePeriodSecs = types.NumberNull()
		}
		r.InputAzureBlob.SkipOnError = types.BoolPointerValue(resp.InputAzureBlob.SkipOnError)
		if resp.InputAzureBlob.StaleChannelFlushMs != nil {
			r.InputAzureBlob.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputAzureBlob.StaleChannelFlushMs)))
		} else {
			r.InputAzureBlob.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputAzureBlob.StorageAccountName = types.StringPointerValue(resp.InputAzureBlob.StorageAccountName)
		r.InputAzureBlob.Streamtags = make([]types.String, 0, len(resp.InputAzureBlob.Streamtags))
		for _, v := range resp.InputAzureBlob.Streamtags {
			r.InputAzureBlob.Streamtags = append(r.InputAzureBlob.Streamtags, types.StringValue(v))
		}
		r.InputAzureBlob.TenantID = types.StringPointerValue(resp.InputAzureBlob.TenantID)
		r.InputAzureBlob.TextSecret = types.StringPointerValue(resp.InputAzureBlob.TextSecret)
		r.InputAzureBlob.Type = types.StringValue(string(resp.InputAzureBlob.Type))
		if resp.InputAzureBlob.VisibilityTimeout != nil {
			r.InputAzureBlob.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputAzureBlob.VisibilityTimeout)))
		} else {
			r.InputAzureBlob.VisibilityTimeout = types.NumberNull()
		}
	}
	if resp.InputCollection != nil {
		r.InputCollection = &tfTypes.InputCollection{}
		r.InputCollection.BreakerRulesets = make([]types.String, 0, len(resp.InputCollection.BreakerRulesets))
		for _, v := range resp.InputCollection.BreakerRulesets {
			r.InputCollection.BreakerRulesets = append(r.InputCollection.BreakerRulesets, types.StringValue(v))
		}
		r.InputCollection.Connections = []tfTypes.Connections{}
		if len(r.InputCollection.Connections) > len(resp.InputCollection.Connections) {
			r.InputCollection.Connections = r.InputCollection.Connections[:len(resp.InputCollection.Connections)]
		}
		for connectionsCount12, connectionsItem12 := range resp.InputCollection.Connections {
			var connections25 tfTypes.Connections
			connections25.Output = types.StringValue(connectionsItem12.Output)
			connections25.Pipeline = types.StringPointerValue(connectionsItem12.Pipeline)
			if connectionsCount12+1 > len(r.InputCollection.Connections) {
				r.InputCollection.Connections = append(r.InputCollection.Connections, connections25)
			} else {
				r.InputCollection.Connections[connectionsCount12].Output = connections25.Output
				r.InputCollection.Connections[connectionsCount12].Pipeline = connections25.Pipeline
			}
		}
		r.InputCollection.Disabled = types.BoolPointerValue(resp.InputCollection.Disabled)
		r.InputCollection.Environment = types.StringPointerValue(resp.InputCollection.Environment)
		r.InputCollection.ID = types.StringValue(resp.InputCollection.ID)
		r.InputCollection.Metadata = []tfTypes.InputCollectionMetadata{}
		if len(r.InputCollection.Metadata) > len(resp.InputCollection.Metadata) {
			r.InputCollection.Metadata = r.InputCollection.Metadata[:len(resp.InputCollection.Metadata)]
		}
		for metadataCount14, metadataItem14 := range resp.InputCollection.Metadata {
			var metadata29 tfTypes.InputCollectionMetadata
			metadata29.Name = types.StringValue(metadataItem14.Name)
			metadata29.Value = types.StringValue(metadataItem14.Value)
			if metadataCount14+1 > len(r.InputCollection.Metadata) {
				r.InputCollection.Metadata = append(r.InputCollection.Metadata, metadata29)
			} else {
				r.InputCollection.Metadata[metadataCount14].Name = metadata29.Name
				r.InputCollection.Metadata[metadataCount14].Value = metadata29.Value
			}
		}
		r.InputCollection.Output = types.StringPointerValue(resp.InputCollection.Output)
		r.InputCollection.Pipeline = types.StringPointerValue(resp.InputCollection.Pipeline)
		if resp.InputCollection.Pq == nil {
			r.InputCollection.Pq = nil
		} else {
			r.InputCollection.Pq = &tfTypes.Pq{}
			if resp.InputCollection.Pq.CommitFrequency != nil {
				r.InputCollection.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputCollection.Pq.CommitFrequency)))
			} else {
				r.InputCollection.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputCollection.Pq.Compress != nil {
				r.InputCollection.Pq.Compress = types.StringValue(string(*resp.InputCollection.Pq.Compress))
			} else {
				r.InputCollection.Pq.Compress = types.StringNull()
			}
			if resp.InputCollection.Pq.MaxBufferSize != nil {
				r.InputCollection.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputCollection.Pq.MaxBufferSize)))
			} else {
				r.InputCollection.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputCollection.Pq.MaxFileSize = types.StringPointerValue(resp.InputCollection.Pq.MaxFileSize)
			r.InputCollection.Pq.MaxSize = types.StringPointerValue(resp.InputCollection.Pq.MaxSize)
			if resp.InputCollection.Pq.Mode != nil {
				r.InputCollection.Pq.Mode = types.StringValue(string(*resp.InputCollection.Pq.Mode))
			} else {
				r.InputCollection.Pq.Mode = types.StringNull()
			}
			r.InputCollection.Pq.Path = types.StringPointerValue(resp.InputCollection.Pq.Path)
		}
		r.InputCollection.PqEnabled = types.BoolPointerValue(resp.InputCollection.PqEnabled)
		if resp.InputCollection.Preprocess == nil {
			r.InputCollection.Preprocess = nil
		} else {
			r.InputCollection.Preprocess = &tfTypes.Preprocess{}
			r.InputCollection.Preprocess.Args = make([]types.String, 0, len(resp.InputCollection.Preprocess.Args))
			for _, v := range resp.InputCollection.Preprocess.Args {
				r.InputCollection.Preprocess.Args = append(r.InputCollection.Preprocess.Args, types.StringValue(v))
			}
			r.InputCollection.Preprocess.Command = types.StringPointerValue(resp.InputCollection.Preprocess.Command)
			r.InputCollection.Preprocess.Disabled = types.BoolPointerValue(resp.InputCollection.Preprocess.Disabled)
		}
		r.InputCollection.SendToRoutes = types.BoolPointerValue(resp.InputCollection.SendToRoutes)
		if resp.InputCollection.StaleChannelFlushMs != nil {
			r.InputCollection.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputCollection.StaleChannelFlushMs)))
		} else {
			r.InputCollection.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputCollection.Streamtags = make([]types.String, 0, len(resp.InputCollection.Streamtags))
		for _, v := range resp.InputCollection.Streamtags {
			r.InputCollection.Streamtags = append(r.InputCollection.Streamtags, types.StringValue(v))
		}
		r.InputCollection.ThrottleRatePerSec = types.StringPointerValue(resp.InputCollection.ThrottleRatePerSec)
		if resp.InputCollection.Type != nil {
			r.InputCollection.Type = types.StringValue(string(*resp.InputCollection.Type))
		} else {
			r.InputCollection.Type = types.StringNull()
		}
	}
	if resp.InputConfluentCloud != nil {
		r.InputConfluentCloud = &tfTypes.InputConfluentCloud{}
		if resp.InputConfluentCloud.AuthenticationTimeout != nil {
			r.InputConfluentCloud.AuthenticationTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.AuthenticationTimeout)))
		} else {
			r.InputConfluentCloud.AuthenticationTimeout = types.NumberNull()
		}
		if resp.InputConfluentCloud.AutoCommitInterval != nil {
			r.InputConfluentCloud.AutoCommitInterval = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.AutoCommitInterval)))
		} else {
			r.InputConfluentCloud.AutoCommitInterval = types.NumberNull()
		}
		if resp.InputConfluentCloud.AutoCommitThreshold != nil {
			r.InputConfluentCloud.AutoCommitThreshold = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.AutoCommitThreshold)))
		} else {
			r.InputConfluentCloud.AutoCommitThreshold = types.NumberNull()
		}
		if resp.InputConfluentCloud.BackoffRate != nil {
			r.InputConfluentCloud.BackoffRate = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.BackoffRate)))
		} else {
			r.InputConfluentCloud.BackoffRate = types.NumberNull()
		}
		r.InputConfluentCloud.Brokers = make([]types.String, 0, len(resp.InputConfluentCloud.Brokers))
		for _, v := range resp.InputConfluentCloud.Brokers {
			r.InputConfluentCloud.Brokers = append(r.InputConfluentCloud.Brokers, types.StringValue(v))
		}
		r.InputConfluentCloud.Connections = []tfTypes.InputConfluentCloudConnections{}
		if len(r.InputConfluentCloud.Connections) > len(resp.InputConfluentCloud.Connections) {
			r.InputConfluentCloud.Connections = r.InputConfluentCloud.Connections[:len(resp.InputConfluentCloud.Connections)]
		}
		for connectionsCount13, connectionsItem13 := range resp.InputConfluentCloud.Connections {
			var connections27 tfTypes.InputConfluentCloudConnections
			connections27.Output = types.StringValue(connectionsItem13.Output)
			connections27.Pipeline = types.StringPointerValue(connectionsItem13.Pipeline)
			if connectionsCount13+1 > len(r.InputConfluentCloud.Connections) {
				r.InputConfluentCloud.Connections = append(r.InputConfluentCloud.Connections, connections27)
			} else {
				r.InputConfluentCloud.Connections[connectionsCount13].Output = connections27.Output
				r.InputConfluentCloud.Connections[connectionsCount13].Pipeline = connections27.Pipeline
			}
		}
		if resp.InputConfluentCloud.ConnectionTimeout != nil {
			r.InputConfluentCloud.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.ConnectionTimeout)))
		} else {
			r.InputConfluentCloud.ConnectionTimeout = types.NumberNull()
		}
		r.InputConfluentCloud.Description = types.StringPointerValue(resp.InputConfluentCloud.Description)
		r.InputConfluentCloud.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.Disabled)
		r.InputConfluentCloud.Environment = types.StringPointerValue(resp.InputConfluentCloud.Environment)
		r.InputConfluentCloud.FromBeginning = types.BoolPointerValue(resp.InputConfluentCloud.FromBeginning)
		r.InputConfluentCloud.GroupID = types.StringPointerValue(resp.InputConfluentCloud.GroupID)
		if resp.InputConfluentCloud.HeartbeatInterval != nil {
			r.InputConfluentCloud.HeartbeatInterval = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.HeartbeatInterval)))
		} else {
			r.InputConfluentCloud.HeartbeatInterval = types.NumberNull()
		}
		r.InputConfluentCloud.ID = types.StringPointerValue(resp.InputConfluentCloud.ID)
		if resp.InputConfluentCloud.InitialBackoff != nil {
			r.InputConfluentCloud.InitialBackoff = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.InitialBackoff)))
		} else {
			r.InputConfluentCloud.InitialBackoff = types.NumberNull()
		}
		if resp.InputConfluentCloud.KafkaSchemaRegistry == nil {
			r.InputConfluentCloud.KafkaSchemaRegistry = nil
		} else {
			r.InputConfluentCloud.KafkaSchemaRegistry = &tfTypes.InputConfluentCloudKafkaSchemaRegistryAuthentication{}
			if resp.InputConfluentCloud.KafkaSchemaRegistry.Auth == nil {
				r.InputConfluentCloud.KafkaSchemaRegistry.Auth = nil
			} else {
				r.InputConfluentCloud.KafkaSchemaRegistry.Auth = &tfTypes.InputConfluentCloudAuth{}
				r.InputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.InputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled)
			}
			if resp.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout != nil {
				r.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout)))
			} else {
				r.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout = types.NumberNull()
			}
			r.InputConfluentCloud.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.Disabled)
			if resp.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries != nil {
				r.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries)))
			} else {
				r.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries = types.NumberNull()
			}
			if resp.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout != nil {
				r.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout)))
			} else {
				r.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout = types.NumberNull()
			}
			r.InputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.InputConfluentCloud.KafkaSchemaRegistry.TLS == nil {
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS = nil
			} else {
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS = &tfTypes.InputConfluentCloudKafkaSchemaRegistryTLSSettingsClientSide{}
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled)
				if resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		if resp.InputConfluentCloud.MaxBackOff != nil {
			r.InputConfluentCloud.MaxBackOff = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.MaxBackOff)))
		} else {
			r.InputConfluentCloud.MaxBackOff = types.NumberNull()
		}
		if resp.InputConfluentCloud.MaxBytes != nil {
			r.InputConfluentCloud.MaxBytes = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.MaxBytes)))
		} else {
			r.InputConfluentCloud.MaxBytes = types.NumberNull()
		}
		if resp.InputConfluentCloud.MaxBytesPerPartition != nil {
			r.InputConfluentCloud.MaxBytesPerPartition = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.MaxBytesPerPartition)))
		} else {
			r.InputConfluentCloud.MaxBytesPerPartition = types.NumberNull()
		}
		if resp.InputConfluentCloud.MaxRetries != nil {
			r.InputConfluentCloud.MaxRetries = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.MaxRetries)))
		} else {
			r.InputConfluentCloud.MaxRetries = types.NumberNull()
		}
		if resp.InputConfluentCloud.MaxSocketErrors != nil {
			r.InputConfluentCloud.MaxSocketErrors = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.MaxSocketErrors)))
		} else {
			r.InputConfluentCloud.MaxSocketErrors = types.NumberNull()
		}
		r.InputConfluentCloud.Metadata = []tfTypes.InputConfluentCloudMetadata{}
		if len(r.InputConfluentCloud.Metadata) > len(resp.InputConfluentCloud.Metadata) {
			r.InputConfluentCloud.Metadata = r.InputConfluentCloud.Metadata[:len(resp.InputConfluentCloud.Metadata)]
		}
		for metadataCount15, metadataItem15 := range resp.InputConfluentCloud.Metadata {
			var metadata31 tfTypes.InputConfluentCloudMetadata
			metadata31.Name = types.StringValue(metadataItem15.Name)
			metadata31.Value = types.StringValue(metadataItem15.Value)
			if metadataCount15+1 > len(r.InputConfluentCloud.Metadata) {
				r.InputConfluentCloud.Metadata = append(r.InputConfluentCloud.Metadata, metadata31)
			} else {
				r.InputConfluentCloud.Metadata[metadataCount15].Name = metadata31.Name
				r.InputConfluentCloud.Metadata[metadataCount15].Value = metadata31.Value
			}
		}
		r.InputConfluentCloud.Pipeline = types.StringPointerValue(resp.InputConfluentCloud.Pipeline)
		if resp.InputConfluentCloud.Pq == nil {
			r.InputConfluentCloud.Pq = nil
		} else {
			r.InputConfluentCloud.Pq = &tfTypes.InputConfluentCloudPq{}
			if resp.InputConfluentCloud.Pq.CommitFrequency != nil {
				r.InputConfluentCloud.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.Pq.CommitFrequency)))
			} else {
				r.InputConfluentCloud.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputConfluentCloud.Pq.Compress != nil {
				r.InputConfluentCloud.Pq.Compress = types.StringValue(string(*resp.InputConfluentCloud.Pq.Compress))
			} else {
				r.InputConfluentCloud.Pq.Compress = types.StringNull()
			}
			if resp.InputConfluentCloud.Pq.MaxBufferSize != nil {
				r.InputConfluentCloud.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.Pq.MaxBufferSize)))
			} else {
				r.InputConfluentCloud.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputConfluentCloud.Pq.MaxFileSize = types.StringPointerValue(resp.InputConfluentCloud.Pq.MaxFileSize)
			r.InputConfluentCloud.Pq.MaxSize = types.StringPointerValue(resp.InputConfluentCloud.Pq.MaxSize)
			if resp.InputConfluentCloud.Pq.Mode != nil {
				r.InputConfluentCloud.Pq.Mode = types.StringValue(string(*resp.InputConfluentCloud.Pq.Mode))
			} else {
				r.InputConfluentCloud.Pq.Mode = types.StringNull()
			}
			r.InputConfluentCloud.Pq.Path = types.StringPointerValue(resp.InputConfluentCloud.Pq.Path)
		}
		r.InputConfluentCloud.PqEnabled = types.BoolPointerValue(resp.InputConfluentCloud.PqEnabled)
		if resp.InputConfluentCloud.ReauthenticationThreshold != nil {
			r.InputConfluentCloud.ReauthenticationThreshold = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.ReauthenticationThreshold)))
		} else {
			r.InputConfluentCloud.ReauthenticationThreshold = types.NumberNull()
		}
		if resp.InputConfluentCloud.RebalanceTimeout != nil {
			r.InputConfluentCloud.RebalanceTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.RebalanceTimeout)))
		} else {
			r.InputConfluentCloud.RebalanceTimeout = types.NumberNull()
		}
		if resp.InputConfluentCloud.RequestTimeout != nil {
			r.InputConfluentCloud.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.RequestTimeout)))
		} else {
			r.InputConfluentCloud.RequestTimeout = types.NumberNull()
		}
		if resp.InputConfluentCloud.Sasl == nil {
			r.InputConfluentCloud.Sasl = nil
		} else {
			r.InputConfluentCloud.Sasl = &tfTypes.InputConfluentCloudAuthentication{}
			r.InputConfluentCloud.Sasl.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.Sasl.Disabled)
			if resp.InputConfluentCloud.Sasl.Mechanism != nil {
				r.InputConfluentCloud.Sasl.Mechanism = types.StringValue(string(*resp.InputConfluentCloud.Sasl.Mechanism))
			} else {
				r.InputConfluentCloud.Sasl.Mechanism = types.StringNull()
			}
		}
		r.InputConfluentCloud.SendToRoutes = types.BoolPointerValue(resp.InputConfluentCloud.SendToRoutes)
		if resp.InputConfluentCloud.SessionTimeout != nil {
			r.InputConfluentCloud.SessionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputConfluentCloud.SessionTimeout)))
		} else {
			r.InputConfluentCloud.SessionTimeout = types.NumberNull()
		}
		r.InputConfluentCloud.Streamtags = make([]types.String, 0, len(resp.InputConfluentCloud.Streamtags))
		for _, v := range resp.InputConfluentCloud.Streamtags {
			r.InputConfluentCloud.Streamtags = append(r.InputConfluentCloud.Streamtags, types.StringValue(v))
		}
		if resp.InputConfluentCloud.TLS == nil {
			r.InputConfluentCloud.TLS = nil
		} else {
			r.InputConfluentCloud.TLS = &tfTypes.InputConfluentCloudTLSSettingsClientSide{}
			r.InputConfluentCloud.TLS.CaPath = types.StringPointerValue(resp.InputConfluentCloud.TLS.CaPath)
			r.InputConfluentCloud.TLS.CertificateName = types.StringPointerValue(resp.InputConfluentCloud.TLS.CertificateName)
			r.InputConfluentCloud.TLS.CertPath = types.StringPointerValue(resp.InputConfluentCloud.TLS.CertPath)
			r.InputConfluentCloud.TLS.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.TLS.Disabled)
			if resp.InputConfluentCloud.TLS.MaxVersion != nil {
				r.InputConfluentCloud.TLS.MaxVersion = types.StringValue(string(*resp.InputConfluentCloud.TLS.MaxVersion))
			} else {
				r.InputConfluentCloud.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputConfluentCloud.TLS.MinVersion != nil {
				r.InputConfluentCloud.TLS.MinVersion = types.StringValue(string(*resp.InputConfluentCloud.TLS.MinVersion))
			} else {
				r.InputConfluentCloud.TLS.MinVersion = types.StringNull()
			}
			r.InputConfluentCloud.TLS.Passphrase = types.StringPointerValue(resp.InputConfluentCloud.TLS.Passphrase)
			r.InputConfluentCloud.TLS.PrivKeyPath = types.StringPointerValue(resp.InputConfluentCloud.TLS.PrivKeyPath)
			r.InputConfluentCloud.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputConfluentCloud.TLS.RejectUnauthorized)
			r.InputConfluentCloud.TLS.Servername = types.StringPointerValue(resp.InputConfluentCloud.TLS.Servername)
		}
		r.InputConfluentCloud.Topics = make([]types.String, 0, len(resp.InputConfluentCloud.Topics))
		for _, v := range resp.InputConfluentCloud.Topics {
			r.InputConfluentCloud.Topics = append(r.InputConfluentCloud.Topics, types.StringValue(v))
		}
		if resp.InputConfluentCloud.Type != nil {
			r.InputConfluentCloud.Type = types.StringValue(string(*resp.InputConfluentCloud.Type))
		} else {
			r.InputConfluentCloud.Type = types.StringNull()
		}
	}
	if resp.InputCribl != nil {
		r.InputCribl = &tfTypes.InputCribl{}
		r.InputCribl.Connections = []tfTypes.InputCriblConnections{}
		if len(r.InputCribl.Connections) > len(resp.InputCribl.Connections) {
			r.InputCribl.Connections = r.InputCribl.Connections[:len(resp.InputCribl.Connections)]
		}
		for connectionsCount14, connectionsItem14 := range resp.InputCribl.Connections {
			var connections29 tfTypes.InputCriblConnections
			connections29.Output = types.StringValue(connectionsItem14.Output)
			connections29.Pipeline = types.StringPointerValue(connectionsItem14.Pipeline)
			if connectionsCount14+1 > len(r.InputCribl.Connections) {
				r.InputCribl.Connections = append(r.InputCribl.Connections, connections29)
			} else {
				r.InputCribl.Connections[connectionsCount14].Output = connections29.Output
				r.InputCribl.Connections[connectionsCount14].Pipeline = connections29.Pipeline
			}
		}
		r.InputCribl.Description = types.StringPointerValue(resp.InputCribl.Description)
		r.InputCribl.Disabled = types.BoolPointerValue(resp.InputCribl.Disabled)
		r.InputCribl.Environment = types.StringPointerValue(resp.InputCribl.Environment)
		r.InputCribl.Filter = types.StringPointerValue(resp.InputCribl.Filter)
		r.InputCribl.ID = types.StringValue(resp.InputCribl.ID)
		r.InputCribl.Metadata = []tfTypes.InputCriblMetadata{}
		if len(r.InputCribl.Metadata) > len(resp.InputCribl.Metadata) {
			r.InputCribl.Metadata = r.InputCribl.Metadata[:len(resp.InputCribl.Metadata)]
		}
		for metadataCount16, metadataItem16 := range resp.InputCribl.Metadata {
			var metadata33 tfTypes.InputCriblMetadata
			metadata33.Name = types.StringValue(metadataItem16.Name)
			metadata33.Value = types.StringValue(metadataItem16.Value)
			if metadataCount16+1 > len(r.InputCribl.Metadata) {
				r.InputCribl.Metadata = append(r.InputCribl.Metadata, metadata33)
			} else {
				r.InputCribl.Metadata[metadataCount16].Name = metadata33.Name
				r.InputCribl.Metadata[metadataCount16].Value = metadata33.Value
			}
		}
		r.InputCribl.Pipeline = types.StringPointerValue(resp.InputCribl.Pipeline)
		if resp.InputCribl.Pq == nil {
			r.InputCribl.Pq = nil
		} else {
			r.InputCribl.Pq = &tfTypes.InputCriblPq{}
			if resp.InputCribl.Pq.CommitFrequency != nil {
				r.InputCribl.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputCribl.Pq.CommitFrequency)))
			} else {
				r.InputCribl.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputCribl.Pq.Compress != nil {
				r.InputCribl.Pq.Compress = types.StringValue(string(*resp.InputCribl.Pq.Compress))
			} else {
				r.InputCribl.Pq.Compress = types.StringNull()
			}
			if resp.InputCribl.Pq.MaxBufferSize != nil {
				r.InputCribl.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputCribl.Pq.MaxBufferSize)))
			} else {
				r.InputCribl.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputCribl.Pq.MaxFileSize = types.StringPointerValue(resp.InputCribl.Pq.MaxFileSize)
			r.InputCribl.Pq.MaxSize = types.StringPointerValue(resp.InputCribl.Pq.MaxSize)
			if resp.InputCribl.Pq.Mode != nil {
				r.InputCribl.Pq.Mode = types.StringValue(string(*resp.InputCribl.Pq.Mode))
			} else {
				r.InputCribl.Pq.Mode = types.StringNull()
			}
			r.InputCribl.Pq.Path = types.StringPointerValue(resp.InputCribl.Pq.Path)
		}
		r.InputCribl.PqEnabled = types.BoolPointerValue(resp.InputCribl.PqEnabled)
		r.InputCribl.SendToRoutes = types.BoolPointerValue(resp.InputCribl.SendToRoutes)
		r.InputCribl.Streamtags = make([]types.String, 0, len(resp.InputCribl.Streamtags))
		for _, v := range resp.InputCribl.Streamtags {
			r.InputCribl.Streamtags = append(r.InputCribl.Streamtags, types.StringValue(v))
		}
		r.InputCribl.Type = types.StringValue(string(resp.InputCribl.Type))
	}
	if resp.InputCriblHTTP != nil {
		r.InputCriblHTTP = &tfTypes.InputCriblHTTP{}
		if resp.InputCriblHTTP.ActivityLogSampleRate != nil {
			r.InputCriblHTTP.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputCriblHTTP.ActivityLogSampleRate)))
		} else {
			r.InputCriblHTTP.ActivityLogSampleRate = types.NumberNull()
		}
		r.InputCriblHTTP.AuthTokens = make([]types.String, 0, len(resp.InputCriblHTTP.AuthTokens))
		for _, v := range resp.InputCriblHTTP.AuthTokens {
			r.InputCriblHTTP.AuthTokens = append(r.InputCriblHTTP.AuthTokens, types.StringValue(v))
		}
		r.InputCriblHTTP.CaptureHeaders = types.BoolPointerValue(resp.InputCriblHTTP.CaptureHeaders)
		r.InputCriblHTTP.Connections = []tfTypes.InputCriblHTTPConnections{}
		if len(r.InputCriblHTTP.Connections) > len(resp.InputCriblHTTP.Connections) {
			r.InputCriblHTTP.Connections = r.InputCriblHTTP.Connections[:len(resp.InputCriblHTTP.Connections)]
		}
		for connectionsCount15, connectionsItem15 := range resp.InputCriblHTTP.Connections {
			var connections31 tfTypes.InputCriblHTTPConnections
			connections31.Output = types.StringValue(connectionsItem15.Output)
			connections31.Pipeline = types.StringPointerValue(connectionsItem15.Pipeline)
			if connectionsCount15+1 > len(r.InputCriblHTTP.Connections) {
				r.InputCriblHTTP.Connections = append(r.InputCriblHTTP.Connections, connections31)
			} else {
				r.InputCriblHTTP.Connections[connectionsCount15].Output = connections31.Output
				r.InputCriblHTTP.Connections[connectionsCount15].Pipeline = connections31.Pipeline
			}
		}
		r.InputCriblHTTP.Description = types.StringPointerValue(resp.InputCriblHTTP.Description)
		r.InputCriblHTTP.Disabled = types.BoolPointerValue(resp.InputCriblHTTP.Disabled)
		r.InputCriblHTTP.EnableHealthCheck = types.BoolPointerValue(resp.InputCriblHTTP.EnableHealthCheck)
		r.InputCriblHTTP.EnableProxyHeader = types.BoolPointerValue(resp.InputCriblHTTP.EnableProxyHeader)
		r.InputCriblHTTP.Environment = types.StringPointerValue(resp.InputCriblHTTP.Environment)
		r.InputCriblHTTP.Host = types.StringPointerValue(resp.InputCriblHTTP.Host)
		r.InputCriblHTTP.ID = types.StringPointerValue(resp.InputCriblHTTP.ID)
		r.InputCriblHTTP.IPAllowlistRegex = types.StringPointerValue(resp.InputCriblHTTP.IPAllowlistRegex)
		r.InputCriblHTTP.IPDenylistRegex = types.StringPointerValue(resp.InputCriblHTTP.IPDenylistRegex)
		if resp.InputCriblHTTP.KeepAliveTimeout != nil {
			r.InputCriblHTTP.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputCriblHTTP.KeepAliveTimeout)))
		} else {
			r.InputCriblHTTP.KeepAliveTimeout = types.NumberNull()
		}
		if resp.InputCriblHTTP.MaxActiveReq != nil {
			r.InputCriblHTTP.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputCriblHTTP.MaxActiveReq)))
		} else {
			r.InputCriblHTTP.MaxActiveReq = types.NumberNull()
		}
		r.InputCriblHTTP.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputCriblHTTP.MaxRequestsPerSocket)
		r.InputCriblHTTP.Metadata = []tfTypes.InputCriblHTTPMetadata{}
		if len(r.InputCriblHTTP.Metadata) > len(resp.InputCriblHTTP.Metadata) {
			r.InputCriblHTTP.Metadata = r.InputCriblHTTP.Metadata[:len(resp.InputCriblHTTP.Metadata)]
		}
		for metadataCount17, metadataItem17 := range resp.InputCriblHTTP.Metadata {
			var metadata35 tfTypes.InputCriblHTTPMetadata
			metadata35.Name = types.StringValue(metadataItem17.Name)
			metadata35.Value = types.StringValue(metadataItem17.Value)
			if metadataCount17+1 > len(r.InputCriblHTTP.Metadata) {
				r.InputCriblHTTP.Metadata = append(r.InputCriblHTTP.Metadata, metadata35)
			} else {
				r.InputCriblHTTP.Metadata[metadataCount17].Name = metadata35.Name
				r.InputCriblHTTP.Metadata[metadataCount17].Value = metadata35.Value
			}
		}
		r.InputCriblHTTP.Pipeline = types.StringPointerValue(resp.InputCriblHTTP.Pipeline)
		r.InputCriblHTTP.Port = types.NumberValue(big.NewFloat(float64(resp.InputCriblHTTP.Port)))
		if resp.InputCriblHTTP.Pq == nil {
			r.InputCriblHTTP.Pq = nil
		} else {
			r.InputCriblHTTP.Pq = &tfTypes.InputCriblHTTPPq{}
			if resp.InputCriblHTTP.Pq.CommitFrequency != nil {
				r.InputCriblHTTP.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputCriblHTTP.Pq.CommitFrequency)))
			} else {
				r.InputCriblHTTP.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputCriblHTTP.Pq.Compress != nil {
				r.InputCriblHTTP.Pq.Compress = types.StringValue(string(*resp.InputCriblHTTP.Pq.Compress))
			} else {
				r.InputCriblHTTP.Pq.Compress = types.StringNull()
			}
			if resp.InputCriblHTTP.Pq.MaxBufferSize != nil {
				r.InputCriblHTTP.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputCriblHTTP.Pq.MaxBufferSize)))
			} else {
				r.InputCriblHTTP.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputCriblHTTP.Pq.MaxFileSize = types.StringPointerValue(resp.InputCriblHTTP.Pq.MaxFileSize)
			r.InputCriblHTTP.Pq.MaxSize = types.StringPointerValue(resp.InputCriblHTTP.Pq.MaxSize)
			if resp.InputCriblHTTP.Pq.Mode != nil {
				r.InputCriblHTTP.Pq.Mode = types.StringValue(string(*resp.InputCriblHTTP.Pq.Mode))
			} else {
				r.InputCriblHTTP.Pq.Mode = types.StringNull()
			}
			r.InputCriblHTTP.Pq.Path = types.StringPointerValue(resp.InputCriblHTTP.Pq.Path)
		}
		r.InputCriblHTTP.PqEnabled = types.BoolPointerValue(resp.InputCriblHTTP.PqEnabled)
		if resp.InputCriblHTTP.RequestTimeout != nil {
			r.InputCriblHTTP.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputCriblHTTP.RequestTimeout)))
		} else {
			r.InputCriblHTTP.RequestTimeout = types.NumberNull()
		}
		r.InputCriblHTTP.SendToRoutes = types.BoolPointerValue(resp.InputCriblHTTP.SendToRoutes)
		if resp.InputCriblHTTP.SocketTimeout != nil {
			r.InputCriblHTTP.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputCriblHTTP.SocketTimeout)))
		} else {
			r.InputCriblHTTP.SocketTimeout = types.NumberNull()
		}
		r.InputCriblHTTP.Streamtags = make([]types.String, 0, len(resp.InputCriblHTTP.Streamtags))
		for _, v := range resp.InputCriblHTTP.Streamtags {
			r.InputCriblHTTP.Streamtags = append(r.InputCriblHTTP.Streamtags, types.StringValue(v))
		}
		if resp.InputCriblHTTP.TLS == nil {
			r.InputCriblHTTP.TLS = nil
		} else {
			r.InputCriblHTTP.TLS = &tfTypes.InputCriblHTTPTLSSettingsServerSide{}
			r.InputCriblHTTP.TLS.CaPath = types.StringPointerValue(resp.InputCriblHTTP.TLS.CaPath)
			r.InputCriblHTTP.TLS.CertificateName = types.StringPointerValue(resp.InputCriblHTTP.TLS.CertificateName)
			r.InputCriblHTTP.TLS.CertPath = types.StringPointerValue(resp.InputCriblHTTP.TLS.CertPath)
			if resp.InputCriblHTTP.TLS.CommonNameRegex == nil {
				r.InputCriblHTTP.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult3, _ := json.Marshal(resp.InputCriblHTTP.TLS.CommonNameRegex)
				r.InputCriblHTTP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult3))
			}
			r.InputCriblHTTP.TLS.Disabled = types.BoolPointerValue(resp.InputCriblHTTP.TLS.Disabled)
			if resp.InputCriblHTTP.TLS.MaxVersion != nil {
				r.InputCriblHTTP.TLS.MaxVersion = types.StringValue(string(*resp.InputCriblHTTP.TLS.MaxVersion))
			} else {
				r.InputCriblHTTP.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputCriblHTTP.TLS.MinVersion != nil {
				r.InputCriblHTTP.TLS.MinVersion = types.StringValue(string(*resp.InputCriblHTTP.TLS.MinVersion))
			} else {
				r.InputCriblHTTP.TLS.MinVersion = types.StringNull()
			}
			r.InputCriblHTTP.TLS.Passphrase = types.StringPointerValue(resp.InputCriblHTTP.TLS.Passphrase)
			r.InputCriblHTTP.TLS.PrivKeyPath = types.StringPointerValue(resp.InputCriblHTTP.TLS.PrivKeyPath)
			if resp.InputCriblHTTP.TLS.RejectUnauthorized == nil {
				r.InputCriblHTTP.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult3, _ := json.Marshal(resp.InputCriblHTTP.TLS.RejectUnauthorized)
				r.InputCriblHTTP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult3))
			}
			r.InputCriblHTTP.TLS.RequestCert = types.BoolPointerValue(resp.InputCriblHTTP.TLS.RequestCert)
		}
		if resp.InputCriblHTTP.Type != nil {
			r.InputCriblHTTP.Type = types.StringValue(string(*resp.InputCriblHTTP.Type))
		} else {
			r.InputCriblHTTP.Type = types.StringNull()
		}
	}
	if resp.InputCriblmetrics != nil {
		r.InputCriblmetrics = &tfTypes.InputCriblmetrics{}
		r.InputCriblmetrics.Connections = []tfTypes.InputCriblmetricsConnections{}
		if len(r.InputCriblmetrics.Connections) > len(resp.InputCriblmetrics.Connections) {
			r.InputCriblmetrics.Connections = r.InputCriblmetrics.Connections[:len(resp.InputCriblmetrics.Connections)]
		}
		for connectionsCount16, connectionsItem16 := range resp.InputCriblmetrics.Connections {
			var connections33 tfTypes.InputCriblmetricsConnections
			connections33.Output = types.StringValue(connectionsItem16.Output)
			connections33.Pipeline = types.StringPointerValue(connectionsItem16.Pipeline)
			if connectionsCount16+1 > len(r.InputCriblmetrics.Connections) {
				r.InputCriblmetrics.Connections = append(r.InputCriblmetrics.Connections, connections33)
			} else {
				r.InputCriblmetrics.Connections[connectionsCount16].Output = connections33.Output
				r.InputCriblmetrics.Connections[connectionsCount16].Pipeline = connections33.Pipeline
			}
		}
		r.InputCriblmetrics.Description = types.StringPointerValue(resp.InputCriblmetrics.Description)
		r.InputCriblmetrics.Disabled = types.BoolPointerValue(resp.InputCriblmetrics.Disabled)
		r.InputCriblmetrics.Environment = types.StringPointerValue(resp.InputCriblmetrics.Environment)
		r.InputCriblmetrics.FullFidelity = types.BoolPointerValue(resp.InputCriblmetrics.FullFidelity)
		r.InputCriblmetrics.ID = types.StringValue(resp.InputCriblmetrics.ID)
		r.InputCriblmetrics.Metadata = []tfTypes.InputCriblmetricsMetadata{}
		if len(r.InputCriblmetrics.Metadata) > len(resp.InputCriblmetrics.Metadata) {
			r.InputCriblmetrics.Metadata = r.InputCriblmetrics.Metadata[:len(resp.InputCriblmetrics.Metadata)]
		}
		for metadataCount18, metadataItem18 := range resp.InputCriblmetrics.Metadata {
			var metadata37 tfTypes.InputCriblmetricsMetadata
			metadata37.Name = types.StringValue(metadataItem18.Name)
			metadata37.Value = types.StringValue(metadataItem18.Value)
			if metadataCount18+1 > len(r.InputCriblmetrics.Metadata) {
				r.InputCriblmetrics.Metadata = append(r.InputCriblmetrics.Metadata, metadata37)
			} else {
				r.InputCriblmetrics.Metadata[metadataCount18].Name = metadata37.Name
				r.InputCriblmetrics.Metadata[metadataCount18].Value = metadata37.Value
			}
		}
		r.InputCriblmetrics.Pipeline = types.StringPointerValue(resp.InputCriblmetrics.Pipeline)
		if resp.InputCriblmetrics.Pq == nil {
			r.InputCriblmetrics.Pq = nil
		} else {
			r.InputCriblmetrics.Pq = &tfTypes.InputCriblmetricsPq{}
			if resp.InputCriblmetrics.Pq.CommitFrequency != nil {
				r.InputCriblmetrics.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputCriblmetrics.Pq.CommitFrequency)))
			} else {
				r.InputCriblmetrics.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputCriblmetrics.Pq.Compress != nil {
				r.InputCriblmetrics.Pq.Compress = types.StringValue(string(*resp.InputCriblmetrics.Pq.Compress))
			} else {
				r.InputCriblmetrics.Pq.Compress = types.StringNull()
			}
			if resp.InputCriblmetrics.Pq.MaxBufferSize != nil {
				r.InputCriblmetrics.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputCriblmetrics.Pq.MaxBufferSize)))
			} else {
				r.InputCriblmetrics.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputCriblmetrics.Pq.MaxFileSize = types.StringPointerValue(resp.InputCriblmetrics.Pq.MaxFileSize)
			r.InputCriblmetrics.Pq.MaxSize = types.StringPointerValue(resp.InputCriblmetrics.Pq.MaxSize)
			if resp.InputCriblmetrics.Pq.Mode != nil {
				r.InputCriblmetrics.Pq.Mode = types.StringValue(string(*resp.InputCriblmetrics.Pq.Mode))
			} else {
				r.InputCriblmetrics.Pq.Mode = types.StringNull()
			}
			r.InputCriblmetrics.Pq.Path = types.StringPointerValue(resp.InputCriblmetrics.Pq.Path)
		}
		r.InputCriblmetrics.PqEnabled = types.BoolPointerValue(resp.InputCriblmetrics.PqEnabled)
		r.InputCriblmetrics.Prefix = types.StringPointerValue(resp.InputCriblmetrics.Prefix)
		r.InputCriblmetrics.SendToRoutes = types.BoolPointerValue(resp.InputCriblmetrics.SendToRoutes)
		r.InputCriblmetrics.Streamtags = make([]types.String, 0, len(resp.InputCriblmetrics.Streamtags))
		for _, v := range resp.InputCriblmetrics.Streamtags {
			r.InputCriblmetrics.Streamtags = append(r.InputCriblmetrics.Streamtags, types.StringValue(v))
		}
		r.InputCriblmetrics.Type = types.StringValue(string(resp.InputCriblmetrics.Type))
	}
	if resp.InputCriblTCP != nil {
		r.InputCriblTCP = &tfTypes.InputCriblTCP{}
		r.InputCriblTCP.Connections = []tfTypes.InputCriblTCPConnections{}
		if len(r.InputCriblTCP.Connections) > len(resp.InputCriblTCP.Connections) {
			r.InputCriblTCP.Connections = r.InputCriblTCP.Connections[:len(resp.InputCriblTCP.Connections)]
		}
		for connectionsCount17, connectionsItem17 := range resp.InputCriblTCP.Connections {
			var connections35 tfTypes.InputCriblTCPConnections
			connections35.Output = types.StringValue(connectionsItem17.Output)
			connections35.Pipeline = types.StringPointerValue(connectionsItem17.Pipeline)
			if connectionsCount17+1 > len(r.InputCriblTCP.Connections) {
				r.InputCriblTCP.Connections = append(r.InputCriblTCP.Connections, connections35)
			} else {
				r.InputCriblTCP.Connections[connectionsCount17].Output = connections35.Output
				r.InputCriblTCP.Connections[connectionsCount17].Pipeline = connections35.Pipeline
			}
		}
		r.InputCriblTCP.Description = types.StringPointerValue(resp.InputCriblTCP.Description)
		r.InputCriblTCP.Disabled = types.BoolPointerValue(resp.InputCriblTCP.Disabled)
		r.InputCriblTCP.EnableLoadBalancing = types.BoolPointerValue(resp.InputCriblTCP.EnableLoadBalancing)
		r.InputCriblTCP.EnableProxyHeader = types.BoolPointerValue(resp.InputCriblTCP.EnableProxyHeader)
		r.InputCriblTCP.Environment = types.StringPointerValue(resp.InputCriblTCP.Environment)
		r.InputCriblTCP.Host = types.StringPointerValue(resp.InputCriblTCP.Host)
		r.InputCriblTCP.ID = types.StringPointerValue(resp.InputCriblTCP.ID)
		if resp.InputCriblTCP.MaxActiveCxn != nil {
			r.InputCriblTCP.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*resp.InputCriblTCP.MaxActiveCxn)))
		} else {
			r.InputCriblTCP.MaxActiveCxn = types.NumberNull()
		}
		r.InputCriblTCP.Metadata = []tfTypes.InputCriblTCPMetadata{}
		if len(r.InputCriblTCP.Metadata) > len(resp.InputCriblTCP.Metadata) {
			r.InputCriblTCP.Metadata = r.InputCriblTCP.Metadata[:len(resp.InputCriblTCP.Metadata)]
		}
		for metadataCount19, metadataItem19 := range resp.InputCriblTCP.Metadata {
			var metadata39 tfTypes.InputCriblTCPMetadata
			metadata39.Name = types.StringValue(metadataItem19.Name)
			metadata39.Value = types.StringValue(metadataItem19.Value)
			if metadataCount19+1 > len(r.InputCriblTCP.Metadata) {
				r.InputCriblTCP.Metadata = append(r.InputCriblTCP.Metadata, metadata39)
			} else {
				r.InputCriblTCP.Metadata[metadataCount19].Name = metadata39.Name
				r.InputCriblTCP.Metadata[metadataCount19].Value = metadata39.Value
			}
		}
		r.InputCriblTCP.Pipeline = types.StringPointerValue(resp.InputCriblTCP.Pipeline)
		r.InputCriblTCP.Port = types.NumberValue(big.NewFloat(float64(resp.InputCriblTCP.Port)))
		if resp.InputCriblTCP.Pq == nil {
			r.InputCriblTCP.Pq = nil
		} else {
			r.InputCriblTCP.Pq = &tfTypes.InputCriblTCPPq{}
			if resp.InputCriblTCP.Pq.CommitFrequency != nil {
				r.InputCriblTCP.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputCriblTCP.Pq.CommitFrequency)))
			} else {
				r.InputCriblTCP.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputCriblTCP.Pq.Compress != nil {
				r.InputCriblTCP.Pq.Compress = types.StringValue(string(*resp.InputCriblTCP.Pq.Compress))
			} else {
				r.InputCriblTCP.Pq.Compress = types.StringNull()
			}
			if resp.InputCriblTCP.Pq.MaxBufferSize != nil {
				r.InputCriblTCP.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputCriblTCP.Pq.MaxBufferSize)))
			} else {
				r.InputCriblTCP.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputCriblTCP.Pq.MaxFileSize = types.StringPointerValue(resp.InputCriblTCP.Pq.MaxFileSize)
			r.InputCriblTCP.Pq.MaxSize = types.StringPointerValue(resp.InputCriblTCP.Pq.MaxSize)
			if resp.InputCriblTCP.Pq.Mode != nil {
				r.InputCriblTCP.Pq.Mode = types.StringValue(string(*resp.InputCriblTCP.Pq.Mode))
			} else {
				r.InputCriblTCP.Pq.Mode = types.StringNull()
			}
			r.InputCriblTCP.Pq.Path = types.StringPointerValue(resp.InputCriblTCP.Pq.Path)
		}
		r.InputCriblTCP.PqEnabled = types.BoolPointerValue(resp.InputCriblTCP.PqEnabled)
		r.InputCriblTCP.SendToRoutes = types.BoolPointerValue(resp.InputCriblTCP.SendToRoutes)
		if resp.InputCriblTCP.SocketEndingMaxWait != nil {
			r.InputCriblTCP.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*resp.InputCriblTCP.SocketEndingMaxWait)))
		} else {
			r.InputCriblTCP.SocketEndingMaxWait = types.NumberNull()
		}
		if resp.InputCriblTCP.SocketIdleTimeout != nil {
			r.InputCriblTCP.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputCriblTCP.SocketIdleTimeout)))
		} else {
			r.InputCriblTCP.SocketIdleTimeout = types.NumberNull()
		}
		if resp.InputCriblTCP.SocketMaxLifespan != nil {
			r.InputCriblTCP.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*resp.InputCriblTCP.SocketMaxLifespan)))
		} else {
			r.InputCriblTCP.SocketMaxLifespan = types.NumberNull()
		}
		r.InputCriblTCP.Streamtags = make([]types.String, 0, len(resp.InputCriblTCP.Streamtags))
		for _, v := range resp.InputCriblTCP.Streamtags {
			r.InputCriblTCP.Streamtags = append(r.InputCriblTCP.Streamtags, types.StringValue(v))
		}
		if resp.InputCriblTCP.TLS == nil {
			r.InputCriblTCP.TLS = nil
		} else {
			r.InputCriblTCP.TLS = &tfTypes.InputCriblTCPTLSSettingsServerSide{}
			r.InputCriblTCP.TLS.CaPath = types.StringPointerValue(resp.InputCriblTCP.TLS.CaPath)
			r.InputCriblTCP.TLS.CertificateName = types.StringPointerValue(resp.InputCriblTCP.TLS.CertificateName)
			r.InputCriblTCP.TLS.CertPath = types.StringPointerValue(resp.InputCriblTCP.TLS.CertPath)
			if resp.InputCriblTCP.TLS.CommonNameRegex == nil {
				r.InputCriblTCP.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult4, _ := json.Marshal(resp.InputCriblTCP.TLS.CommonNameRegex)
				r.InputCriblTCP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult4))
			}
			r.InputCriblTCP.TLS.Disabled = types.BoolPointerValue(resp.InputCriblTCP.TLS.Disabled)
			if resp.InputCriblTCP.TLS.MaxVersion != nil {
				r.InputCriblTCP.TLS.MaxVersion = types.StringValue(string(*resp.InputCriblTCP.TLS.MaxVersion))
			} else {
				r.InputCriblTCP.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputCriblTCP.TLS.MinVersion != nil {
				r.InputCriblTCP.TLS.MinVersion = types.StringValue(string(*resp.InputCriblTCP.TLS.MinVersion))
			} else {
				r.InputCriblTCP.TLS.MinVersion = types.StringNull()
			}
			r.InputCriblTCP.TLS.Passphrase = types.StringPointerValue(resp.InputCriblTCP.TLS.Passphrase)
			r.InputCriblTCP.TLS.PrivKeyPath = types.StringPointerValue(resp.InputCriblTCP.TLS.PrivKeyPath)
			if resp.InputCriblTCP.TLS.RejectUnauthorized == nil {
				r.InputCriblTCP.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult4, _ := json.Marshal(resp.InputCriblTCP.TLS.RejectUnauthorized)
				r.InputCriblTCP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult4))
			}
			r.InputCriblTCP.TLS.RequestCert = types.BoolPointerValue(resp.InputCriblTCP.TLS.RequestCert)
		}
		if resp.InputCriblTCP.Type != nil {
			r.InputCriblTCP.Type = types.StringValue(string(*resp.InputCriblTCP.Type))
		} else {
			r.InputCriblTCP.Type = types.StringNull()
		}
	}
	if resp.InputCrowdstrike != nil {
		r.InputCrowdstrike = &tfTypes.InputCrowdstrike{}
		r.InputCrowdstrike.AssumeRoleArn = types.StringPointerValue(resp.InputCrowdstrike.AssumeRoleArn)
		r.InputCrowdstrike.AssumeRoleExternalID = types.StringPointerValue(resp.InputCrowdstrike.AssumeRoleExternalID)
		r.InputCrowdstrike.AwsAccountID = types.StringPointerValue(resp.InputCrowdstrike.AwsAccountID)
		r.InputCrowdstrike.AwsAPIKey = types.StringPointerValue(resp.InputCrowdstrike.AwsAPIKey)
		if resp.InputCrowdstrike.AwsAuthenticationMethod != nil {
			r.InputCrowdstrike.AwsAuthenticationMethod = types.StringValue(string(*resp.InputCrowdstrike.AwsAuthenticationMethod))
		} else {
			r.InputCrowdstrike.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputCrowdstrike.AwsSecret = types.StringPointerValue(resp.InputCrowdstrike.AwsSecret)
		r.InputCrowdstrike.AwsSecretKey = types.StringPointerValue(resp.InputCrowdstrike.AwsSecretKey)
		r.InputCrowdstrike.BreakerRulesets = make([]types.String, 0, len(resp.InputCrowdstrike.BreakerRulesets))
		for _, v := range resp.InputCrowdstrike.BreakerRulesets {
			r.InputCrowdstrike.BreakerRulesets = append(r.InputCrowdstrike.BreakerRulesets, types.StringValue(v))
		}
		if resp.InputCrowdstrike.Checkpointing == nil {
			r.InputCrowdstrike.Checkpointing = nil
		} else {
			r.InputCrowdstrike.Checkpointing = &tfTypes.Checkpointing{}
			r.InputCrowdstrike.Checkpointing.Enabled = types.BoolPointerValue(resp.InputCrowdstrike.Checkpointing.Enabled)
			if resp.InputCrowdstrike.Checkpointing.Retries != nil {
				r.InputCrowdstrike.Checkpointing.Retries = types.NumberValue(big.NewFloat(float64(*resp.InputCrowdstrike.Checkpointing.Retries)))
			} else {
				r.InputCrowdstrike.Checkpointing.Retries = types.NumberNull()
			}
		}
		r.InputCrowdstrike.Connections = []tfTypes.InputCrowdstrikeConnections{}
		if len(r.InputCrowdstrike.Connections) > len(resp.InputCrowdstrike.Connections) {
			r.InputCrowdstrike.Connections = r.InputCrowdstrike.Connections[:len(resp.InputCrowdstrike.Connections)]
		}
		for connectionsCount18, connectionsItem18 := range resp.InputCrowdstrike.Connections {
			var connections37 tfTypes.InputCrowdstrikeConnections
			connections37.Output = types.StringValue(connectionsItem18.Output)
			connections37.Pipeline = types.StringPointerValue(connectionsItem18.Pipeline)
			if connectionsCount18+1 > len(r.InputCrowdstrike.Connections) {
				r.InputCrowdstrike.Connections = append(r.InputCrowdstrike.Connections, connections37)
			} else {
				r.InputCrowdstrike.Connections[connectionsCount18].Output = connections37.Output
				r.InputCrowdstrike.Connections[connectionsCount18].Pipeline = connections37.Pipeline
			}
		}
		r.InputCrowdstrike.Description = types.StringPointerValue(resp.InputCrowdstrike.Description)
		r.InputCrowdstrike.Disabled = types.BoolPointerValue(resp.InputCrowdstrike.Disabled)
		if resp.InputCrowdstrike.DurationSeconds != nil {
			r.InputCrowdstrike.DurationSeconds = types.NumberValue(big.NewFloat(float64(*resp.InputCrowdstrike.DurationSeconds)))
		} else {
			r.InputCrowdstrike.DurationSeconds = types.NumberNull()
		}
		r.InputCrowdstrike.EnableAssumeRole = types.BoolPointerValue(resp.InputCrowdstrike.EnableAssumeRole)
		r.InputCrowdstrike.EnableSQSAssumeRole = types.BoolPointerValue(resp.InputCrowdstrike.EnableSQSAssumeRole)
		r.InputCrowdstrike.Encoding = types.StringPointerValue(resp.InputCrowdstrike.Encoding)
		r.InputCrowdstrike.Endpoint = types.StringPointerValue(resp.InputCrowdstrike.Endpoint)
		r.InputCrowdstrike.Environment = types.StringPointerValue(resp.InputCrowdstrike.Environment)
		r.InputCrowdstrike.FileFilter = types.StringPointerValue(resp.InputCrowdstrike.FileFilter)
		r.InputCrowdstrike.ID = types.StringPointerValue(resp.InputCrowdstrike.ID)
		if resp.InputCrowdstrike.MaxMessages != nil {
			r.InputCrowdstrike.MaxMessages = types.NumberValue(big.NewFloat(float64(*resp.InputCrowdstrike.MaxMessages)))
		} else {
			r.InputCrowdstrike.MaxMessages = types.NumberNull()
		}
		r.InputCrowdstrike.Metadata = []tfTypes.InputCrowdstrikeMetadata{}
		if len(r.InputCrowdstrike.Metadata) > len(resp.InputCrowdstrike.Metadata) {
			r.InputCrowdstrike.Metadata = r.InputCrowdstrike.Metadata[:len(resp.InputCrowdstrike.Metadata)]
		}
		for metadataCount20, metadataItem20 := range resp.InputCrowdstrike.Metadata {
			var metadata41 tfTypes.InputCrowdstrikeMetadata
			metadata41.Name = types.StringValue(metadataItem20.Name)
			metadata41.Value = types.StringValue(metadataItem20.Value)
			if metadataCount20+1 > len(r.InputCrowdstrike.Metadata) {
				r.InputCrowdstrike.Metadata = append(r.InputCrowdstrike.Metadata, metadata41)
			} else {
				r.InputCrowdstrike.Metadata[metadataCount20].Name = metadata41.Name
				r.InputCrowdstrike.Metadata[metadataCount20].Value = metadata41.Value
			}
		}
		if resp.InputCrowdstrike.NumReceivers != nil {
			r.InputCrowdstrike.NumReceivers = types.NumberValue(big.NewFloat(float64(*resp.InputCrowdstrike.NumReceivers)))
		} else {
			r.InputCrowdstrike.NumReceivers = types.NumberNull()
		}
		r.InputCrowdstrike.Pipeline = types.StringPointerValue(resp.InputCrowdstrike.Pipeline)
		if resp.InputCrowdstrike.PollTimeout != nil {
			r.InputCrowdstrike.PollTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputCrowdstrike.PollTimeout)))
		} else {
			r.InputCrowdstrike.PollTimeout = types.NumberNull()
		}
		if resp.InputCrowdstrike.Pq == nil {
			r.InputCrowdstrike.Pq = nil
		} else {
			r.InputCrowdstrike.Pq = &tfTypes.InputCrowdstrikePq{}
			if resp.InputCrowdstrike.Pq.CommitFrequency != nil {
				r.InputCrowdstrike.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputCrowdstrike.Pq.CommitFrequency)))
			} else {
				r.InputCrowdstrike.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputCrowdstrike.Pq.Compress != nil {
				r.InputCrowdstrike.Pq.Compress = types.StringValue(string(*resp.InputCrowdstrike.Pq.Compress))
			} else {
				r.InputCrowdstrike.Pq.Compress = types.StringNull()
			}
			if resp.InputCrowdstrike.Pq.MaxBufferSize != nil {
				r.InputCrowdstrike.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputCrowdstrike.Pq.MaxBufferSize)))
			} else {
				r.InputCrowdstrike.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputCrowdstrike.Pq.MaxFileSize = types.StringPointerValue(resp.InputCrowdstrike.Pq.MaxFileSize)
			r.InputCrowdstrike.Pq.MaxSize = types.StringPointerValue(resp.InputCrowdstrike.Pq.MaxSize)
			if resp.InputCrowdstrike.Pq.Mode != nil {
				r.InputCrowdstrike.Pq.Mode = types.StringValue(string(*resp.InputCrowdstrike.Pq.Mode))
			} else {
				r.InputCrowdstrike.Pq.Mode = types.StringNull()
			}
			r.InputCrowdstrike.Pq.Path = types.StringPointerValue(resp.InputCrowdstrike.Pq.Path)
		}
		r.InputCrowdstrike.PqEnabled = types.BoolPointerValue(resp.InputCrowdstrike.PqEnabled)
		if resp.InputCrowdstrike.Preprocess == nil {
			r.InputCrowdstrike.Preprocess = nil
		} else {
			r.InputCrowdstrike.Preprocess = &tfTypes.InputCrowdstrikePreprocess{}
			r.InputCrowdstrike.Preprocess.Args = make([]types.String, 0, len(resp.InputCrowdstrike.Preprocess.Args))
			for _, v := range resp.InputCrowdstrike.Preprocess.Args {
				r.InputCrowdstrike.Preprocess.Args = append(r.InputCrowdstrike.Preprocess.Args, types.StringValue(v))
			}
			r.InputCrowdstrike.Preprocess.Command = types.StringPointerValue(resp.InputCrowdstrike.Preprocess.Command)
			r.InputCrowdstrike.Preprocess.Disabled = types.BoolPointerValue(resp.InputCrowdstrike.Preprocess.Disabled)
		}
		r.InputCrowdstrike.QueueName = types.StringValue(resp.InputCrowdstrike.QueueName)
		r.InputCrowdstrike.Region = types.StringPointerValue(resp.InputCrowdstrike.Region)
		r.InputCrowdstrike.RejectUnauthorized = types.BoolPointerValue(resp.InputCrowdstrike.RejectUnauthorized)
		r.InputCrowdstrike.ReuseConnections = types.BoolPointerValue(resp.InputCrowdstrike.ReuseConnections)
		r.InputCrowdstrike.SendToRoutes = types.BoolPointerValue(resp.InputCrowdstrike.SendToRoutes)
		if resp.InputCrowdstrike.SignatureVersion != nil {
			r.InputCrowdstrike.SignatureVersion = types.StringValue(string(*resp.InputCrowdstrike.SignatureVersion))
		} else {
			r.InputCrowdstrike.SignatureVersion = types.StringNull()
		}
		r.InputCrowdstrike.SkipOnError = types.BoolPointerValue(resp.InputCrowdstrike.SkipOnError)
		if resp.InputCrowdstrike.SocketTimeout != nil {
			r.InputCrowdstrike.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputCrowdstrike.SocketTimeout)))
		} else {
			r.InputCrowdstrike.SocketTimeout = types.NumberNull()
		}
		if resp.InputCrowdstrike.StaleChannelFlushMs != nil {
			r.InputCrowdstrike.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputCrowdstrike.StaleChannelFlushMs)))
		} else {
			r.InputCrowdstrike.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputCrowdstrike.Streamtags = make([]types.String, 0, len(resp.InputCrowdstrike.Streamtags))
		for _, v := range resp.InputCrowdstrike.Streamtags {
			r.InputCrowdstrike.Streamtags = append(r.InputCrowdstrike.Streamtags, types.StringValue(v))
		}
		r.InputCrowdstrike.Type = types.StringValue(string(resp.InputCrowdstrike.Type))
		if resp.InputCrowdstrike.VisibilityTimeout != nil {
			r.InputCrowdstrike.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputCrowdstrike.VisibilityTimeout)))
		} else {
			r.InputCrowdstrike.VisibilityTimeout = types.NumberNull()
		}
	}
	if resp.InputDatadogAgent != nil {
		r.InputDatadogAgent = &tfTypes.InputDatadogAgent{}
		if resp.InputDatadogAgent.ActivityLogSampleRate != nil {
			r.InputDatadogAgent.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputDatadogAgent.ActivityLogSampleRate)))
		} else {
			r.InputDatadogAgent.ActivityLogSampleRate = types.NumberNull()
		}
		r.InputDatadogAgent.CaptureHeaders = types.BoolPointerValue(resp.InputDatadogAgent.CaptureHeaders)
		r.InputDatadogAgent.Connections = []tfTypes.InputDatadogAgentConnections{}
		if len(r.InputDatadogAgent.Connections) > len(resp.InputDatadogAgent.Connections) {
			r.InputDatadogAgent.Connections = r.InputDatadogAgent.Connections[:len(resp.InputDatadogAgent.Connections)]
		}
		for connectionsCount19, connectionsItem19 := range resp.InputDatadogAgent.Connections {
			var connections39 tfTypes.InputDatadogAgentConnections
			connections39.Output = types.StringValue(connectionsItem19.Output)
			connections39.Pipeline = types.StringPointerValue(connectionsItem19.Pipeline)
			if connectionsCount19+1 > len(r.InputDatadogAgent.Connections) {
				r.InputDatadogAgent.Connections = append(r.InputDatadogAgent.Connections, connections39)
			} else {
				r.InputDatadogAgent.Connections[connectionsCount19].Output = connections39.Output
				r.InputDatadogAgent.Connections[connectionsCount19].Pipeline = connections39.Pipeline
			}
		}
		r.InputDatadogAgent.Description = types.StringPointerValue(resp.InputDatadogAgent.Description)
		r.InputDatadogAgent.Disabled = types.BoolPointerValue(resp.InputDatadogAgent.Disabled)
		r.InputDatadogAgent.EnableHealthCheck = types.BoolPointerValue(resp.InputDatadogAgent.EnableHealthCheck)
		r.InputDatadogAgent.EnableProxyHeader = types.BoolPointerValue(resp.InputDatadogAgent.EnableProxyHeader)
		r.InputDatadogAgent.Environment = types.StringPointerValue(resp.InputDatadogAgent.Environment)
		r.InputDatadogAgent.ExtractMetrics = types.BoolPointerValue(resp.InputDatadogAgent.ExtractMetrics)
		r.InputDatadogAgent.Host = types.StringPointerValue(resp.InputDatadogAgent.Host)
		r.InputDatadogAgent.ID = types.StringPointerValue(resp.InputDatadogAgent.ID)
		r.InputDatadogAgent.IPAllowlistRegex = types.StringPointerValue(resp.InputDatadogAgent.IPAllowlistRegex)
		r.InputDatadogAgent.IPDenylistRegex = types.StringPointerValue(resp.InputDatadogAgent.IPDenylistRegex)
		if resp.InputDatadogAgent.KeepAliveTimeout != nil {
			r.InputDatadogAgent.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputDatadogAgent.KeepAliveTimeout)))
		} else {
			r.InputDatadogAgent.KeepAliveTimeout = types.NumberNull()
		}
		if resp.InputDatadogAgent.MaxActiveReq != nil {
			r.InputDatadogAgent.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputDatadogAgent.MaxActiveReq)))
		} else {
			r.InputDatadogAgent.MaxActiveReq = types.NumberNull()
		}
		r.InputDatadogAgent.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputDatadogAgent.MaxRequestsPerSocket)
		r.InputDatadogAgent.Metadata = []tfTypes.InputDatadogAgentMetadata{}
		if len(r.InputDatadogAgent.Metadata) > len(resp.InputDatadogAgent.Metadata) {
			r.InputDatadogAgent.Metadata = r.InputDatadogAgent.Metadata[:len(resp.InputDatadogAgent.Metadata)]
		}
		for metadataCount21, metadataItem21 := range resp.InputDatadogAgent.Metadata {
			var metadata43 tfTypes.InputDatadogAgentMetadata
			metadata43.Name = types.StringValue(metadataItem21.Name)
			metadata43.Value = types.StringValue(metadataItem21.Value)
			if metadataCount21+1 > len(r.InputDatadogAgent.Metadata) {
				r.InputDatadogAgent.Metadata = append(r.InputDatadogAgent.Metadata, metadata43)
			} else {
				r.InputDatadogAgent.Metadata[metadataCount21].Name = metadata43.Name
				r.InputDatadogAgent.Metadata[metadataCount21].Value = metadata43.Value
			}
		}
		r.InputDatadogAgent.Pipeline = types.StringPointerValue(resp.InputDatadogAgent.Pipeline)
		r.InputDatadogAgent.Port = types.NumberValue(big.NewFloat(float64(resp.InputDatadogAgent.Port)))
		if resp.InputDatadogAgent.Pq == nil {
			r.InputDatadogAgent.Pq = nil
		} else {
			r.InputDatadogAgent.Pq = &tfTypes.InputDatadogAgentPq{}
			if resp.InputDatadogAgent.Pq.CommitFrequency != nil {
				r.InputDatadogAgent.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputDatadogAgent.Pq.CommitFrequency)))
			} else {
				r.InputDatadogAgent.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputDatadogAgent.Pq.Compress != nil {
				r.InputDatadogAgent.Pq.Compress = types.StringValue(string(*resp.InputDatadogAgent.Pq.Compress))
			} else {
				r.InputDatadogAgent.Pq.Compress = types.StringNull()
			}
			if resp.InputDatadogAgent.Pq.MaxBufferSize != nil {
				r.InputDatadogAgent.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputDatadogAgent.Pq.MaxBufferSize)))
			} else {
				r.InputDatadogAgent.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputDatadogAgent.Pq.MaxFileSize = types.StringPointerValue(resp.InputDatadogAgent.Pq.MaxFileSize)
			r.InputDatadogAgent.Pq.MaxSize = types.StringPointerValue(resp.InputDatadogAgent.Pq.MaxSize)
			if resp.InputDatadogAgent.Pq.Mode != nil {
				r.InputDatadogAgent.Pq.Mode = types.StringValue(string(*resp.InputDatadogAgent.Pq.Mode))
			} else {
				r.InputDatadogAgent.Pq.Mode = types.StringNull()
			}
			r.InputDatadogAgent.Pq.Path = types.StringPointerValue(resp.InputDatadogAgent.Pq.Path)
		}
		r.InputDatadogAgent.PqEnabled = types.BoolPointerValue(resp.InputDatadogAgent.PqEnabled)
		if resp.InputDatadogAgent.ProxyMode == nil {
			r.InputDatadogAgent.ProxyMode = nil
		} else {
			r.InputDatadogAgent.ProxyMode = &tfTypes.InputDatadogAgentProxyMode{}
			r.InputDatadogAgent.ProxyMode.Enabled = types.BoolPointerValue(resp.InputDatadogAgent.ProxyMode.Enabled)
			r.InputDatadogAgent.ProxyMode.RejectUnauthorized = types.BoolPointerValue(resp.InputDatadogAgent.ProxyMode.RejectUnauthorized)
		}
		if resp.InputDatadogAgent.RequestTimeout != nil {
			r.InputDatadogAgent.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputDatadogAgent.RequestTimeout)))
		} else {
			r.InputDatadogAgent.RequestTimeout = types.NumberNull()
		}
		r.InputDatadogAgent.SendToRoutes = types.BoolPointerValue(resp.InputDatadogAgent.SendToRoutes)
		if resp.InputDatadogAgent.SocketTimeout != nil {
			r.InputDatadogAgent.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputDatadogAgent.SocketTimeout)))
		} else {
			r.InputDatadogAgent.SocketTimeout = types.NumberNull()
		}
		r.InputDatadogAgent.Streamtags = make([]types.String, 0, len(resp.InputDatadogAgent.Streamtags))
		for _, v := range resp.InputDatadogAgent.Streamtags {
			r.InputDatadogAgent.Streamtags = append(r.InputDatadogAgent.Streamtags, types.StringValue(v))
		}
		if resp.InputDatadogAgent.TLS == nil {
			r.InputDatadogAgent.TLS = nil
		} else {
			r.InputDatadogAgent.TLS = &tfTypes.InputDatadogAgentTLSSettingsServerSide{}
			r.InputDatadogAgent.TLS.CaPath = types.StringPointerValue(resp.InputDatadogAgent.TLS.CaPath)
			r.InputDatadogAgent.TLS.CertificateName = types.StringPointerValue(resp.InputDatadogAgent.TLS.CertificateName)
			r.InputDatadogAgent.TLS.CertPath = types.StringPointerValue(resp.InputDatadogAgent.TLS.CertPath)
			if resp.InputDatadogAgent.TLS.CommonNameRegex == nil {
				r.InputDatadogAgent.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult5, _ := json.Marshal(resp.InputDatadogAgent.TLS.CommonNameRegex)
				r.InputDatadogAgent.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult5))
			}
			r.InputDatadogAgent.TLS.Disabled = types.BoolPointerValue(resp.InputDatadogAgent.TLS.Disabled)
			if resp.InputDatadogAgent.TLS.MaxVersion != nil {
				r.InputDatadogAgent.TLS.MaxVersion = types.StringValue(string(*resp.InputDatadogAgent.TLS.MaxVersion))
			} else {
				r.InputDatadogAgent.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputDatadogAgent.TLS.MinVersion != nil {
				r.InputDatadogAgent.TLS.MinVersion = types.StringValue(string(*resp.InputDatadogAgent.TLS.MinVersion))
			} else {
				r.InputDatadogAgent.TLS.MinVersion = types.StringNull()
			}
			r.InputDatadogAgent.TLS.Passphrase = types.StringPointerValue(resp.InputDatadogAgent.TLS.Passphrase)
			r.InputDatadogAgent.TLS.PrivKeyPath = types.StringPointerValue(resp.InputDatadogAgent.TLS.PrivKeyPath)
			if resp.InputDatadogAgent.TLS.RejectUnauthorized == nil {
				r.InputDatadogAgent.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult5, _ := json.Marshal(resp.InputDatadogAgent.TLS.RejectUnauthorized)
				r.InputDatadogAgent.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult5))
			}
			r.InputDatadogAgent.TLS.RequestCert = types.BoolPointerValue(resp.InputDatadogAgent.TLS.RequestCert)
		}
		if resp.InputDatadogAgent.Type != nil {
			r.InputDatadogAgent.Type = types.StringValue(string(*resp.InputDatadogAgent.Type))
		} else {
			r.InputDatadogAgent.Type = types.StringNull()
		}
	}
	if resp.InputDatagen != nil {
		r.InputDatagen = &tfTypes.InputDatagen{}
		r.InputDatagen.Connections = []tfTypes.InputDatagenConnections{}
		if len(r.InputDatagen.Connections) > len(resp.InputDatagen.Connections) {
			r.InputDatagen.Connections = r.InputDatagen.Connections[:len(resp.InputDatagen.Connections)]
		}
		for connectionsCount20, connectionsItem20 := range resp.InputDatagen.Connections {
			var connections41 tfTypes.InputDatagenConnections
			connections41.Output = types.StringValue(connectionsItem20.Output)
			connections41.Pipeline = types.StringPointerValue(connectionsItem20.Pipeline)
			if connectionsCount20+1 > len(r.InputDatagen.Connections) {
				r.InputDatagen.Connections = append(r.InputDatagen.Connections, connections41)
			} else {
				r.InputDatagen.Connections[connectionsCount20].Output = connections41.Output
				r.InputDatagen.Connections[connectionsCount20].Pipeline = connections41.Pipeline
			}
		}
		r.InputDatagen.Description = types.StringPointerValue(resp.InputDatagen.Description)
		r.InputDatagen.Disabled = types.BoolPointerValue(resp.InputDatagen.Disabled)
		r.InputDatagen.Environment = types.StringPointerValue(resp.InputDatagen.Environment)
		r.InputDatagen.ID = types.StringPointerValue(resp.InputDatagen.ID)
		r.InputDatagen.Metadata = []tfTypes.InputDatagenMetadata{}
		if len(r.InputDatagen.Metadata) > len(resp.InputDatagen.Metadata) {
			r.InputDatagen.Metadata = r.InputDatagen.Metadata[:len(resp.InputDatagen.Metadata)]
		}
		for metadataCount22, metadataItem22 := range resp.InputDatagen.Metadata {
			var metadata45 tfTypes.InputDatagenMetadata
			metadata45.Name = types.StringValue(metadataItem22.Name)
			metadata45.Value = types.StringValue(metadataItem22.Value)
			if metadataCount22+1 > len(r.InputDatagen.Metadata) {
				r.InputDatagen.Metadata = append(r.InputDatagen.Metadata, metadata45)
			} else {
				r.InputDatagen.Metadata[metadataCount22].Name = metadata45.Name
				r.InputDatagen.Metadata[metadataCount22].Value = metadata45.Value
			}
		}
		r.InputDatagen.Pipeline = types.StringPointerValue(resp.InputDatagen.Pipeline)
		if resp.InputDatagen.Pq == nil {
			r.InputDatagen.Pq = nil
		} else {
			r.InputDatagen.Pq = &tfTypes.InputDatagenPq{}
			if resp.InputDatagen.Pq.CommitFrequency != nil {
				r.InputDatagen.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputDatagen.Pq.CommitFrequency)))
			} else {
				r.InputDatagen.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputDatagen.Pq.Compress != nil {
				r.InputDatagen.Pq.Compress = types.StringValue(string(*resp.InputDatagen.Pq.Compress))
			} else {
				r.InputDatagen.Pq.Compress = types.StringNull()
			}
			if resp.InputDatagen.Pq.MaxBufferSize != nil {
				r.InputDatagen.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputDatagen.Pq.MaxBufferSize)))
			} else {
				r.InputDatagen.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputDatagen.Pq.MaxFileSize = types.StringPointerValue(resp.InputDatagen.Pq.MaxFileSize)
			r.InputDatagen.Pq.MaxSize = types.StringPointerValue(resp.InputDatagen.Pq.MaxSize)
			if resp.InputDatagen.Pq.Mode != nil {
				r.InputDatagen.Pq.Mode = types.StringValue(string(*resp.InputDatagen.Pq.Mode))
			} else {
				r.InputDatagen.Pq.Mode = types.StringNull()
			}
			r.InputDatagen.Pq.Path = types.StringPointerValue(resp.InputDatagen.Pq.Path)
		}
		r.InputDatagen.PqEnabled = types.BoolPointerValue(resp.InputDatagen.PqEnabled)
		r.InputDatagen.Samples = []tfTypes.Samples{}
		if len(r.InputDatagen.Samples) > len(resp.InputDatagen.Samples) {
			r.InputDatagen.Samples = r.InputDatagen.Samples[:len(resp.InputDatagen.Samples)]
		}
		for samplesCount, samplesItem := range resp.InputDatagen.Samples {
			var samples1 tfTypes.Samples
			if samplesItem.EventsPerSec != nil {
				samples1.EventsPerSec = types.NumberValue(big.NewFloat(float64(*samplesItem.EventsPerSec)))
			} else {
				samples1.EventsPerSec = types.NumberNull()
			}
			samples1.Sample = types.StringValue(samplesItem.Sample)
			if samplesCount+1 > len(r.InputDatagen.Samples) {
				r.InputDatagen.Samples = append(r.InputDatagen.Samples, samples1)
			} else {
				r.InputDatagen.Samples[samplesCount].EventsPerSec = samples1.EventsPerSec
				r.InputDatagen.Samples[samplesCount].Sample = samples1.Sample
			}
		}
		r.InputDatagen.SendToRoutes = types.BoolPointerValue(resp.InputDatagen.SendToRoutes)
		r.InputDatagen.Streamtags = make([]types.String, 0, len(resp.InputDatagen.Streamtags))
		for _, v := range resp.InputDatagen.Streamtags {
			r.InputDatagen.Streamtags = append(r.InputDatagen.Streamtags, types.StringValue(v))
		}
		r.InputDatagen.Type = types.StringValue(string(resp.InputDatagen.Type))
	}
	if resp.InputEdgePrometheus != nil {
		r.InputEdgePrometheus = &tfTypes.InputEdgePrometheus{}
		r.InputEdgePrometheus.AssumeRoleArn = types.StringPointerValue(resp.InputEdgePrometheus.AssumeRoleArn)
		r.InputEdgePrometheus.AssumeRoleExternalID = types.StringPointerValue(resp.InputEdgePrometheus.AssumeRoleExternalID)
		if resp.InputEdgePrometheus.AuthType != nil {
			r.InputEdgePrometheus.AuthType = types.StringValue(string(*resp.InputEdgePrometheus.AuthType))
		} else {
			r.InputEdgePrometheus.AuthType = types.StringNull()
		}
		if resp.InputEdgePrometheus.AwsAuthenticationMethod != nil {
			r.InputEdgePrometheus.AwsAuthenticationMethod = types.StringValue(string(*resp.InputEdgePrometheus.AwsAuthenticationMethod))
		} else {
			r.InputEdgePrometheus.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputEdgePrometheus.AwsSecretKey = types.StringPointerValue(resp.InputEdgePrometheus.AwsSecretKey)
		r.InputEdgePrometheus.Connections = []tfTypes.InputEdgePrometheusConnections{}
		if len(r.InputEdgePrometheus.Connections) > len(resp.InputEdgePrometheus.Connections) {
			r.InputEdgePrometheus.Connections = r.InputEdgePrometheus.Connections[:len(resp.InputEdgePrometheus.Connections)]
		}
		for connectionsCount21, connectionsItem21 := range resp.InputEdgePrometheus.Connections {
			var connections43 tfTypes.InputEdgePrometheusConnections
			connections43.Output = types.StringValue(connectionsItem21.Output)
			connections43.Pipeline = types.StringPointerValue(connectionsItem21.Pipeline)
			if connectionsCount21+1 > len(r.InputEdgePrometheus.Connections) {
				r.InputEdgePrometheus.Connections = append(r.InputEdgePrometheus.Connections, connections43)
			} else {
				r.InputEdgePrometheus.Connections[connectionsCount21].Output = connections43.Output
				r.InputEdgePrometheus.Connections[connectionsCount21].Pipeline = connections43.Pipeline
			}
		}
		r.InputEdgePrometheus.CredentialsSecret = types.StringPointerValue(resp.InputEdgePrometheus.CredentialsSecret)
		r.InputEdgePrometheus.Description = types.StringPointerValue(resp.InputEdgePrometheus.Description)
		r.InputEdgePrometheus.DimensionList = make([]types.String, 0, len(resp.InputEdgePrometheus.DimensionList))
		for _, v := range resp.InputEdgePrometheus.DimensionList {
			r.InputEdgePrometheus.DimensionList = append(r.InputEdgePrometheus.DimensionList, types.StringValue(v))
		}
		r.InputEdgePrometheus.Disabled = types.BoolPointerValue(resp.InputEdgePrometheus.Disabled)
		if resp.InputEdgePrometheus.DiscoveryType != nil {
			r.InputEdgePrometheus.DiscoveryType = types.StringValue(string(*resp.InputEdgePrometheus.DiscoveryType))
		} else {
			r.InputEdgePrometheus.DiscoveryType = types.StringNull()
		}
		if resp.InputEdgePrometheus.DurationSeconds != nil {
			r.InputEdgePrometheus.DurationSeconds = types.NumberValue(big.NewFloat(float64(*resp.InputEdgePrometheus.DurationSeconds)))
		} else {
			r.InputEdgePrometheus.DurationSeconds = types.NumberNull()
		}
		r.InputEdgePrometheus.EnableAssumeRole = types.BoolPointerValue(resp.InputEdgePrometheus.EnableAssumeRole)
		r.InputEdgePrometheus.Endpoint = types.StringPointerValue(resp.InputEdgePrometheus.Endpoint)
		r.InputEdgePrometheus.Environment = types.StringPointerValue(resp.InputEdgePrometheus.Environment)
		r.InputEdgePrometheus.ID = types.StringPointerValue(resp.InputEdgePrometheus.ID)
		if resp.InputEdgePrometheus.Interval != nil {
			r.InputEdgePrometheus.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputEdgePrometheus.Interval)))
		} else {
			r.InputEdgePrometheus.Interval = types.NumberNull()
		}
		r.InputEdgePrometheus.Metadata = []tfTypes.InputEdgePrometheusMetadata{}
		if len(r.InputEdgePrometheus.Metadata) > len(resp.InputEdgePrometheus.Metadata) {
			r.InputEdgePrometheus.Metadata = r.InputEdgePrometheus.Metadata[:len(resp.InputEdgePrometheus.Metadata)]
		}
		for metadataCount23, metadataItem23 := range resp.InputEdgePrometheus.Metadata {
			var metadata47 tfTypes.InputEdgePrometheusMetadata
			metadata47.Name = types.StringValue(metadataItem23.Name)
			metadata47.Value = types.StringValue(metadataItem23.Value)
			if metadataCount23+1 > len(r.InputEdgePrometheus.Metadata) {
				r.InputEdgePrometheus.Metadata = append(r.InputEdgePrometheus.Metadata, metadata47)
			} else {
				r.InputEdgePrometheus.Metadata[metadataCount23].Name = metadata47.Name
				r.InputEdgePrometheus.Metadata[metadataCount23].Value = metadata47.Value
			}
		}
		r.InputEdgePrometheus.NameList = make([]types.String, 0, len(resp.InputEdgePrometheus.NameList))
		for _, v := range resp.InputEdgePrometheus.NameList {
			r.InputEdgePrometheus.NameList = append(r.InputEdgePrometheus.NameList, types.StringValue(v))
		}
		r.InputEdgePrometheus.Password = types.StringPointerValue(resp.InputEdgePrometheus.Password)
		if resp.InputEdgePrometheus.Persistence == nil {
			r.InputEdgePrometheus.Persistence = nil
		} else {
			r.InputEdgePrometheus.Persistence = &tfTypes.DiskSpooling{}
			if resp.InputEdgePrometheus.Persistence.Compress != nil {
				r.InputEdgePrometheus.Persistence.Compress = types.StringValue(string(*resp.InputEdgePrometheus.Persistence.Compress))
			} else {
				r.InputEdgePrometheus.Persistence.Compress = types.StringNull()
			}
			r.InputEdgePrometheus.Persistence.Enable = types.BoolPointerValue(resp.InputEdgePrometheus.Persistence.Enable)
			r.InputEdgePrometheus.Persistence.MaxDataSize = types.StringPointerValue(resp.InputEdgePrometheus.Persistence.MaxDataSize)
			r.InputEdgePrometheus.Persistence.MaxDataTime = types.StringPointerValue(resp.InputEdgePrometheus.Persistence.MaxDataTime)
			r.InputEdgePrometheus.Persistence.TimeWindow = types.StringPointerValue(resp.InputEdgePrometheus.Persistence.TimeWindow)
		}
		r.InputEdgePrometheus.Pipeline = types.StringPointerValue(resp.InputEdgePrometheus.Pipeline)
		r.InputEdgePrometheus.PodFilter = []tfTypes.PodFilter{}
		if len(r.InputEdgePrometheus.PodFilter) > len(resp.InputEdgePrometheus.PodFilter) {
			r.InputEdgePrometheus.PodFilter = r.InputEdgePrometheus.PodFilter[:len(resp.InputEdgePrometheus.PodFilter)]
		}
		for podFilterCount, podFilterItem := range resp.InputEdgePrometheus.PodFilter {
			var podFilter1 tfTypes.PodFilter
			podFilter1.Description = types.StringPointerValue(podFilterItem.Description)
			podFilter1.Filter = types.StringValue(podFilterItem.Filter)
			if podFilterCount+1 > len(r.InputEdgePrometheus.PodFilter) {
				r.InputEdgePrometheus.PodFilter = append(r.InputEdgePrometheus.PodFilter, podFilter1)
			} else {
				r.InputEdgePrometheus.PodFilter[podFilterCount].Description = podFilter1.Description
				r.InputEdgePrometheus.PodFilter[podFilterCount].Filter = podFilter1.Filter
			}
		}
		if resp.InputEdgePrometheus.Pq == nil {
			r.InputEdgePrometheus.Pq = nil
		} else {
			r.InputEdgePrometheus.Pq = &tfTypes.InputEdgePrometheusPq{}
			if resp.InputEdgePrometheus.Pq.CommitFrequency != nil {
				r.InputEdgePrometheus.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputEdgePrometheus.Pq.CommitFrequency)))
			} else {
				r.InputEdgePrometheus.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputEdgePrometheus.Pq.Compress != nil {
				r.InputEdgePrometheus.Pq.Compress = types.StringValue(string(*resp.InputEdgePrometheus.Pq.Compress))
			} else {
				r.InputEdgePrometheus.Pq.Compress = types.StringNull()
			}
			if resp.InputEdgePrometheus.Pq.MaxBufferSize != nil {
				r.InputEdgePrometheus.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputEdgePrometheus.Pq.MaxBufferSize)))
			} else {
				r.InputEdgePrometheus.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputEdgePrometheus.Pq.MaxFileSize = types.StringPointerValue(resp.InputEdgePrometheus.Pq.MaxFileSize)
			r.InputEdgePrometheus.Pq.MaxSize = types.StringPointerValue(resp.InputEdgePrometheus.Pq.MaxSize)
			if resp.InputEdgePrometheus.Pq.Mode != nil {
				r.InputEdgePrometheus.Pq.Mode = types.StringValue(string(*resp.InputEdgePrometheus.Pq.Mode))
			} else {
				r.InputEdgePrometheus.Pq.Mode = types.StringNull()
			}
			r.InputEdgePrometheus.Pq.Path = types.StringPointerValue(resp.InputEdgePrometheus.Pq.Path)
		}
		r.InputEdgePrometheus.PqEnabled = types.BoolPointerValue(resp.InputEdgePrometheus.PqEnabled)
		if resp.InputEdgePrometheus.RecordType != nil {
			r.InputEdgePrometheus.RecordType = types.StringValue(string(*resp.InputEdgePrometheus.RecordType))
		} else {
			r.InputEdgePrometheus.RecordType = types.StringNull()
		}
		r.InputEdgePrometheus.Region = types.StringPointerValue(resp.InputEdgePrometheus.Region)
		r.InputEdgePrometheus.RejectUnauthorized = types.BoolPointerValue(resp.InputEdgePrometheus.RejectUnauthorized)
		r.InputEdgePrometheus.ReuseConnections = types.BoolPointerValue(resp.InputEdgePrometheus.ReuseConnections)
		r.InputEdgePrometheus.ScrapePath = types.StringPointerValue(resp.InputEdgePrometheus.ScrapePath)
		r.InputEdgePrometheus.ScrapePathExpr = types.StringPointerValue(resp.InputEdgePrometheus.ScrapePathExpr)
		if resp.InputEdgePrometheus.ScrapePort != nil {
			r.InputEdgePrometheus.ScrapePort = types.NumberValue(big.NewFloat(float64(*resp.InputEdgePrometheus.ScrapePort)))
		} else {
			r.InputEdgePrometheus.ScrapePort = types.NumberNull()
		}
		r.InputEdgePrometheus.ScrapePortExpr = types.StringPointerValue(resp.InputEdgePrometheus.ScrapePortExpr)
		if resp.InputEdgePrometheus.ScrapeProtocol != nil {
			r.InputEdgePrometheus.ScrapeProtocol = types.StringValue(string(*resp.InputEdgePrometheus.ScrapeProtocol))
		} else {
			r.InputEdgePrometheus.ScrapeProtocol = types.StringNull()
		}
		r.InputEdgePrometheus.ScrapeProtocolExpr = types.StringPointerValue(resp.InputEdgePrometheus.ScrapeProtocolExpr)
		r.InputEdgePrometheus.SearchFilter = []tfTypes.InputEdgePrometheusSearchFilter{}
		if len(r.InputEdgePrometheus.SearchFilter) > len(resp.InputEdgePrometheus.SearchFilter) {
			r.InputEdgePrometheus.SearchFilter = r.InputEdgePrometheus.SearchFilter[:len(resp.InputEdgePrometheus.SearchFilter)]
		}
		for searchFilterCount, searchFilterItem := range resp.InputEdgePrometheus.SearchFilter {
			var searchFilter1 tfTypes.InputEdgePrometheusSearchFilter
			searchFilter1.Name = types.StringValue(searchFilterItem.Name)
			searchFilter1.Values = make([]types.String, 0, len(searchFilterItem.Values))
			for _, v := range searchFilterItem.Values {
				searchFilter1.Values = append(searchFilter1.Values, types.StringValue(v))
			}
			if searchFilterCount+1 > len(r.InputEdgePrometheus.SearchFilter) {
				r.InputEdgePrometheus.SearchFilter = append(r.InputEdgePrometheus.SearchFilter, searchFilter1)
			} else {
				r.InputEdgePrometheus.SearchFilter[searchFilterCount].Name = searchFilter1.Name
				r.InputEdgePrometheus.SearchFilter[searchFilterCount].Values = searchFilter1.Values
			}
		}
		r.InputEdgePrometheus.SendToRoutes = types.BoolPointerValue(resp.InputEdgePrometheus.SendToRoutes)
		if resp.InputEdgePrometheus.SignatureVersion != nil {
			r.InputEdgePrometheus.SignatureVersion = types.StringValue(string(*resp.InputEdgePrometheus.SignatureVersion))
		} else {
			r.InputEdgePrometheus.SignatureVersion = types.StringNull()
		}
		r.InputEdgePrometheus.Streamtags = make([]types.String, 0, len(resp.InputEdgePrometheus.Streamtags))
		for _, v := range resp.InputEdgePrometheus.Streamtags {
			r.InputEdgePrometheus.Streamtags = append(r.InputEdgePrometheus.Streamtags, types.StringValue(v))
		}
		r.InputEdgePrometheus.Targets = []tfTypes.Targets{}
		if len(r.InputEdgePrometheus.Targets) > len(resp.InputEdgePrometheus.Targets) {
			r.InputEdgePrometheus.Targets = r.InputEdgePrometheus.Targets[:len(resp.InputEdgePrometheus.Targets)]
		}
		for targetsCount, targetsItem := range resp.InputEdgePrometheus.Targets {
			var targets2 tfTypes.Targets
			targets2.Host = types.StringValue(targetsItem.Host)
			targets2.Path = types.StringPointerValue(targetsItem.Path)
			if targetsItem.Port != nil {
				targets2.Port = types.NumberValue(big.NewFloat(float64(*targetsItem.Port)))
			} else {
				targets2.Port = types.NumberNull()
			}
			if targetsItem.Protocol != nil {
				targets2.Protocol = types.StringValue(string(*targetsItem.Protocol))
			} else {
				targets2.Protocol = types.StringNull()
			}
			if targetsCount+1 > len(r.InputEdgePrometheus.Targets) {
				r.InputEdgePrometheus.Targets = append(r.InputEdgePrometheus.Targets, targets2)
			} else {
				r.InputEdgePrometheus.Targets[targetsCount].Host = targets2.Host
				r.InputEdgePrometheus.Targets[targetsCount].Path = targets2.Path
				r.InputEdgePrometheus.Targets[targetsCount].Port = targets2.Port
				r.InputEdgePrometheus.Targets[targetsCount].Protocol = targets2.Protocol
			}
		}
		if resp.InputEdgePrometheus.Timeout != nil {
			r.InputEdgePrometheus.Timeout = types.NumberValue(big.NewFloat(float64(*resp.InputEdgePrometheus.Timeout)))
		} else {
			r.InputEdgePrometheus.Timeout = types.NumberNull()
		}
		if resp.InputEdgePrometheus.Type != nil {
			r.InputEdgePrometheus.Type = types.StringValue(string(*resp.InputEdgePrometheus.Type))
		} else {
			r.InputEdgePrometheus.Type = types.StringNull()
		}
		r.InputEdgePrometheus.UsePublicIP = types.BoolPointerValue(resp.InputEdgePrometheus.UsePublicIP)
		r.InputEdgePrometheus.Username = types.StringPointerValue(resp.InputEdgePrometheus.Username)
	}
	if resp.InputElastic != nil {
		r.InputElastic = &tfTypes.InputElastic{}
		if resp.InputElastic.ActivityLogSampleRate != nil {
			r.InputElastic.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputElastic.ActivityLogSampleRate)))
		} else {
			r.InputElastic.ActivityLogSampleRate = types.NumberNull()
		}
		if resp.InputElastic.APIVersion != nil {
			r.InputElastic.APIVersion = types.StringValue(string(*resp.InputElastic.APIVersion))
		} else {
			r.InputElastic.APIVersion = types.StringNull()
		}
		r.InputElastic.AuthTokens = make([]types.String, 0, len(resp.InputElastic.AuthTokens))
		for _, v := range resp.InputElastic.AuthTokens {
			r.InputElastic.AuthTokens = append(r.InputElastic.AuthTokens, types.StringValue(v))
		}
		if resp.InputElastic.AuthType != nil {
			r.InputElastic.AuthType = types.StringValue(string(*resp.InputElastic.AuthType))
		} else {
			r.InputElastic.AuthType = types.StringNull()
		}
		r.InputElastic.CaptureHeaders = types.BoolPointerValue(resp.InputElastic.CaptureHeaders)
		r.InputElastic.Connections = []tfTypes.InputElasticConnections{}
		if len(r.InputElastic.Connections) > len(resp.InputElastic.Connections) {
			r.InputElastic.Connections = r.InputElastic.Connections[:len(resp.InputElastic.Connections)]
		}
		for connectionsCount22, connectionsItem22 := range resp.InputElastic.Connections {
			var connections45 tfTypes.InputElasticConnections
			connections45.Output = types.StringValue(connectionsItem22.Output)
			connections45.Pipeline = types.StringPointerValue(connectionsItem22.Pipeline)
			if connectionsCount22+1 > len(r.InputElastic.Connections) {
				r.InputElastic.Connections = append(r.InputElastic.Connections, connections45)
			} else {
				r.InputElastic.Connections[connectionsCount22].Output = connections45.Output
				r.InputElastic.Connections[connectionsCount22].Pipeline = connections45.Pipeline
			}
		}
		r.InputElastic.CredentialsSecret = types.StringPointerValue(resp.InputElastic.CredentialsSecret)
		r.InputElastic.CustomAPIVersion = types.StringPointerValue(resp.InputElastic.CustomAPIVersion)
		r.InputElastic.Description = types.StringPointerValue(resp.InputElastic.Description)
		r.InputElastic.Disabled = types.BoolPointerValue(resp.InputElastic.Disabled)
		r.InputElastic.ElasticAPI = types.StringPointerValue(resp.InputElastic.ElasticAPI)
		r.InputElastic.EnableHealthCheck = types.BoolPointerValue(resp.InputElastic.EnableHealthCheck)
		r.InputElastic.EnableProxyHeader = types.BoolPointerValue(resp.InputElastic.EnableProxyHeader)
		r.InputElastic.Environment = types.StringPointerValue(resp.InputElastic.Environment)
		r.InputElastic.ExtraHTTPHeaders = []tfTypes.ExtraHTTPHeaders{}
		if len(r.InputElastic.ExtraHTTPHeaders) > len(resp.InputElastic.ExtraHTTPHeaders) {
			r.InputElastic.ExtraHTTPHeaders = r.InputElastic.ExtraHTTPHeaders[:len(resp.InputElastic.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount, extraHTTPHeadersItem := range resp.InputElastic.ExtraHTTPHeaders {
			var extraHTTPHeaders1 tfTypes.ExtraHTTPHeaders
			extraHTTPHeaders1.Name = types.StringPointerValue(extraHTTPHeadersItem.Name)
			extraHTTPHeaders1.Value = types.StringValue(extraHTTPHeadersItem.Value)
			if extraHTTPHeadersCount+1 > len(r.InputElastic.ExtraHTTPHeaders) {
				r.InputElastic.ExtraHTTPHeaders = append(r.InputElastic.ExtraHTTPHeaders, extraHTTPHeaders1)
			} else {
				r.InputElastic.ExtraHTTPHeaders[extraHTTPHeadersCount].Name = extraHTTPHeaders1.Name
				r.InputElastic.ExtraHTTPHeaders[extraHTTPHeadersCount].Value = extraHTTPHeaders1.Value
			}
		}
		r.InputElastic.Host = types.StringPointerValue(resp.InputElastic.Host)
		r.InputElastic.ID = types.StringPointerValue(resp.InputElastic.ID)
		r.InputElastic.IgnoreStandardHeaders = types.BoolPointerValue(resp.InputElastic.IgnoreStandardHeaders)
		r.InputElastic.IPAllowlistRegex = types.StringPointerValue(resp.InputElastic.IPAllowlistRegex)
		r.InputElastic.IPDenylistRegex = types.StringPointerValue(resp.InputElastic.IPDenylistRegex)
		if resp.InputElastic.KeepAliveTimeout != nil {
			r.InputElastic.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputElastic.KeepAliveTimeout)))
		} else {
			r.InputElastic.KeepAliveTimeout = types.NumberNull()
		}
		if resp.InputElastic.MaxActiveReq != nil {
			r.InputElastic.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputElastic.MaxActiveReq)))
		} else {
			r.InputElastic.MaxActiveReq = types.NumberNull()
		}
		r.InputElastic.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputElastic.MaxRequestsPerSocket)
		r.InputElastic.Metadata = []tfTypes.InputElasticMetadata{}
		if len(r.InputElastic.Metadata) > len(resp.InputElastic.Metadata) {
			r.InputElastic.Metadata = r.InputElastic.Metadata[:len(resp.InputElastic.Metadata)]
		}
		for metadataCount24, metadataItem24 := range resp.InputElastic.Metadata {
			var metadata49 tfTypes.InputElasticMetadata
			metadata49.Name = types.StringValue(metadataItem24.Name)
			metadata49.Value = types.StringValue(metadataItem24.Value)
			if metadataCount24+1 > len(r.InputElastic.Metadata) {
				r.InputElastic.Metadata = append(r.InputElastic.Metadata, metadata49)
			} else {
				r.InputElastic.Metadata[metadataCount24].Name = metadata49.Name
				r.InputElastic.Metadata[metadataCount24].Value = metadata49.Value
			}
		}
		r.InputElastic.Password = types.StringPointerValue(resp.InputElastic.Password)
		r.InputElastic.Pipeline = types.StringPointerValue(resp.InputElastic.Pipeline)
		r.InputElastic.Port = types.NumberValue(big.NewFloat(float64(resp.InputElastic.Port)))
		if resp.InputElastic.Pq == nil {
			r.InputElastic.Pq = nil
		} else {
			r.InputElastic.Pq = &tfTypes.InputElasticPq{}
			if resp.InputElastic.Pq.CommitFrequency != nil {
				r.InputElastic.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputElastic.Pq.CommitFrequency)))
			} else {
				r.InputElastic.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputElastic.Pq.Compress != nil {
				r.InputElastic.Pq.Compress = types.StringValue(string(*resp.InputElastic.Pq.Compress))
			} else {
				r.InputElastic.Pq.Compress = types.StringNull()
			}
			if resp.InputElastic.Pq.MaxBufferSize != nil {
				r.InputElastic.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputElastic.Pq.MaxBufferSize)))
			} else {
				r.InputElastic.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputElastic.Pq.MaxFileSize = types.StringPointerValue(resp.InputElastic.Pq.MaxFileSize)
			r.InputElastic.Pq.MaxSize = types.StringPointerValue(resp.InputElastic.Pq.MaxSize)
			if resp.InputElastic.Pq.Mode != nil {
				r.InputElastic.Pq.Mode = types.StringValue(string(*resp.InputElastic.Pq.Mode))
			} else {
				r.InputElastic.Pq.Mode = types.StringNull()
			}
			r.InputElastic.Pq.Path = types.StringPointerValue(resp.InputElastic.Pq.Path)
		}
		r.InputElastic.PqEnabled = types.BoolPointerValue(resp.InputElastic.PqEnabled)
		if resp.InputElastic.ProxyMode == nil {
			r.InputElastic.ProxyMode = nil
		} else {
			r.InputElastic.ProxyMode = &tfTypes.ProxyMode{}
			if resp.InputElastic.ProxyMode.AuthType != nil {
				r.InputElastic.ProxyMode.AuthType = types.StringValue(string(*resp.InputElastic.ProxyMode.AuthType))
			} else {
				r.InputElastic.ProxyMode.AuthType = types.StringNull()
			}
			r.InputElastic.ProxyMode.Enabled = types.BoolPointerValue(resp.InputElastic.ProxyMode.Enabled)
			r.InputElastic.ProxyMode.RejectUnauthorized = types.BoolPointerValue(resp.InputElastic.ProxyMode.RejectUnauthorized)
			r.InputElastic.ProxyMode.RemoveHeaders = make([]types.String, 0, len(resp.InputElastic.ProxyMode.RemoveHeaders))
			for _, v := range resp.InputElastic.ProxyMode.RemoveHeaders {
				r.InputElastic.ProxyMode.RemoveHeaders = append(r.InputElastic.ProxyMode.RemoveHeaders, types.StringValue(v))
			}
			if resp.InputElastic.ProxyMode.TimeoutSec != nil {
				r.InputElastic.ProxyMode.TimeoutSec = types.NumberValue(big.NewFloat(float64(*resp.InputElastic.ProxyMode.TimeoutSec)))
			} else {
				r.InputElastic.ProxyMode.TimeoutSec = types.NumberNull()
			}
			r.InputElastic.ProxyMode.URL = types.StringPointerValue(resp.InputElastic.ProxyMode.URL)
		}
		if resp.InputElastic.RequestTimeout != nil {
			r.InputElastic.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputElastic.RequestTimeout)))
		} else {
			r.InputElastic.RequestTimeout = types.NumberNull()
		}
		r.InputElastic.SendToRoutes = types.BoolPointerValue(resp.InputElastic.SendToRoutes)
		if resp.InputElastic.SocketTimeout != nil {
			r.InputElastic.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputElastic.SocketTimeout)))
		} else {
			r.InputElastic.SocketTimeout = types.NumberNull()
		}
		r.InputElastic.Streamtags = make([]types.String, 0, len(resp.InputElastic.Streamtags))
		for _, v := range resp.InputElastic.Streamtags {
			r.InputElastic.Streamtags = append(r.InputElastic.Streamtags, types.StringValue(v))
		}
		if resp.InputElastic.TLS == nil {
			r.InputElastic.TLS = nil
		} else {
			r.InputElastic.TLS = &tfTypes.InputElasticTLSSettingsServerSide{}
			r.InputElastic.TLS.CaPath = types.StringPointerValue(resp.InputElastic.TLS.CaPath)
			r.InputElastic.TLS.CertificateName = types.StringPointerValue(resp.InputElastic.TLS.CertificateName)
			r.InputElastic.TLS.CertPath = types.StringPointerValue(resp.InputElastic.TLS.CertPath)
			if resp.InputElastic.TLS.CommonNameRegex == nil {
				r.InputElastic.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult6, _ := json.Marshal(resp.InputElastic.TLS.CommonNameRegex)
				r.InputElastic.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult6))
			}
			r.InputElastic.TLS.Disabled = types.BoolPointerValue(resp.InputElastic.TLS.Disabled)
			if resp.InputElastic.TLS.MaxVersion != nil {
				r.InputElastic.TLS.MaxVersion = types.StringValue(string(*resp.InputElastic.TLS.MaxVersion))
			} else {
				r.InputElastic.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputElastic.TLS.MinVersion != nil {
				r.InputElastic.TLS.MinVersion = types.StringValue(string(*resp.InputElastic.TLS.MinVersion))
			} else {
				r.InputElastic.TLS.MinVersion = types.StringNull()
			}
			r.InputElastic.TLS.Passphrase = types.StringPointerValue(resp.InputElastic.TLS.Passphrase)
			r.InputElastic.TLS.PrivKeyPath = types.StringPointerValue(resp.InputElastic.TLS.PrivKeyPath)
			if resp.InputElastic.TLS.RejectUnauthorized == nil {
				r.InputElastic.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult6, _ := json.Marshal(resp.InputElastic.TLS.RejectUnauthorized)
				r.InputElastic.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult6))
			}
			r.InputElastic.TLS.RequestCert = types.BoolPointerValue(resp.InputElastic.TLS.RequestCert)
		}
		if resp.InputElastic.Type != nil {
			r.InputElastic.Type = types.StringValue(string(*resp.InputElastic.Type))
		} else {
			r.InputElastic.Type = types.StringNull()
		}
		r.InputElastic.Username = types.StringPointerValue(resp.InputElastic.Username)
	}
	if resp.InputEventhub != nil {
		r.InputEventhub = &tfTypes.InputEventhub{}
		if resp.InputEventhub.AuthenticationTimeout != nil {
			r.InputEventhub.AuthenticationTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.AuthenticationTimeout)))
		} else {
			r.InputEventhub.AuthenticationTimeout = types.NumberNull()
		}
		if resp.InputEventhub.AutoCommitInterval != nil {
			r.InputEventhub.AutoCommitInterval = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.AutoCommitInterval)))
		} else {
			r.InputEventhub.AutoCommitInterval = types.NumberNull()
		}
		if resp.InputEventhub.AutoCommitThreshold != nil {
			r.InputEventhub.AutoCommitThreshold = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.AutoCommitThreshold)))
		} else {
			r.InputEventhub.AutoCommitThreshold = types.NumberNull()
		}
		if resp.InputEventhub.BackoffRate != nil {
			r.InputEventhub.BackoffRate = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.BackoffRate)))
		} else {
			r.InputEventhub.BackoffRate = types.NumberNull()
		}
		r.InputEventhub.Brokers = make([]types.String, 0, len(resp.InputEventhub.Brokers))
		for _, v := range resp.InputEventhub.Brokers {
			r.InputEventhub.Brokers = append(r.InputEventhub.Brokers, types.StringValue(v))
		}
		r.InputEventhub.Connections = []tfTypes.InputEventhubConnections{}
		if len(r.InputEventhub.Connections) > len(resp.InputEventhub.Connections) {
			r.InputEventhub.Connections = r.InputEventhub.Connections[:len(resp.InputEventhub.Connections)]
		}
		for connectionsCount23, connectionsItem23 := range resp.InputEventhub.Connections {
			var connections47 tfTypes.InputEventhubConnections
			connections47.Output = types.StringValue(connectionsItem23.Output)
			connections47.Pipeline = types.StringPointerValue(connectionsItem23.Pipeline)
			if connectionsCount23+1 > len(r.InputEventhub.Connections) {
				r.InputEventhub.Connections = append(r.InputEventhub.Connections, connections47)
			} else {
				r.InputEventhub.Connections[connectionsCount23].Output = connections47.Output
				r.InputEventhub.Connections[connectionsCount23].Pipeline = connections47.Pipeline
			}
		}
		if resp.InputEventhub.ConnectionTimeout != nil {
			r.InputEventhub.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.ConnectionTimeout)))
		} else {
			r.InputEventhub.ConnectionTimeout = types.NumberNull()
		}
		r.InputEventhub.Description = types.StringPointerValue(resp.InputEventhub.Description)
		r.InputEventhub.Disabled = types.BoolPointerValue(resp.InputEventhub.Disabled)
		r.InputEventhub.Environment = types.StringPointerValue(resp.InputEventhub.Environment)
		r.InputEventhub.FromBeginning = types.BoolPointerValue(resp.InputEventhub.FromBeginning)
		r.InputEventhub.GroupID = types.StringPointerValue(resp.InputEventhub.GroupID)
		if resp.InputEventhub.HeartbeatInterval != nil {
			r.InputEventhub.HeartbeatInterval = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.HeartbeatInterval)))
		} else {
			r.InputEventhub.HeartbeatInterval = types.NumberNull()
		}
		r.InputEventhub.ID = types.StringPointerValue(resp.InputEventhub.ID)
		if resp.InputEventhub.InitialBackoff != nil {
			r.InputEventhub.InitialBackoff = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.InitialBackoff)))
		} else {
			r.InputEventhub.InitialBackoff = types.NumberNull()
		}
		if resp.InputEventhub.MaxBackOff != nil {
			r.InputEventhub.MaxBackOff = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.MaxBackOff)))
		} else {
			r.InputEventhub.MaxBackOff = types.NumberNull()
		}
		if resp.InputEventhub.MaxBytes != nil {
			r.InputEventhub.MaxBytes = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.MaxBytes)))
		} else {
			r.InputEventhub.MaxBytes = types.NumberNull()
		}
		if resp.InputEventhub.MaxBytesPerPartition != nil {
			r.InputEventhub.MaxBytesPerPartition = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.MaxBytesPerPartition)))
		} else {
			r.InputEventhub.MaxBytesPerPartition = types.NumberNull()
		}
		if resp.InputEventhub.MaxRetries != nil {
			r.InputEventhub.MaxRetries = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.MaxRetries)))
		} else {
			r.InputEventhub.MaxRetries = types.NumberNull()
		}
		if resp.InputEventhub.MaxSocketErrors != nil {
			r.InputEventhub.MaxSocketErrors = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.MaxSocketErrors)))
		} else {
			r.InputEventhub.MaxSocketErrors = types.NumberNull()
		}
		r.InputEventhub.Metadata = []tfTypes.InputEventhubMetadata{}
		if len(r.InputEventhub.Metadata) > len(resp.InputEventhub.Metadata) {
			r.InputEventhub.Metadata = r.InputEventhub.Metadata[:len(resp.InputEventhub.Metadata)]
		}
		for metadataCount25, metadataItem25 := range resp.InputEventhub.Metadata {
			var metadata51 tfTypes.InputEventhubMetadata
			metadata51.Name = types.StringValue(metadataItem25.Name)
			metadata51.Value = types.StringValue(metadataItem25.Value)
			if metadataCount25+1 > len(r.InputEventhub.Metadata) {
				r.InputEventhub.Metadata = append(r.InputEventhub.Metadata, metadata51)
			} else {
				r.InputEventhub.Metadata[metadataCount25].Name = metadata51.Name
				r.InputEventhub.Metadata[metadataCount25].Value = metadata51.Value
			}
		}
		r.InputEventhub.MinimizeDuplicates = types.BoolPointerValue(resp.InputEventhub.MinimizeDuplicates)
		r.InputEventhub.Pipeline = types.StringPointerValue(resp.InputEventhub.Pipeline)
		if resp.InputEventhub.Pq == nil {
			r.InputEventhub.Pq = nil
		} else {
			r.InputEventhub.Pq = &tfTypes.InputEventhubPq{}
			if resp.InputEventhub.Pq.CommitFrequency != nil {
				r.InputEventhub.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.Pq.CommitFrequency)))
			} else {
				r.InputEventhub.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputEventhub.Pq.Compress != nil {
				r.InputEventhub.Pq.Compress = types.StringValue(string(*resp.InputEventhub.Pq.Compress))
			} else {
				r.InputEventhub.Pq.Compress = types.StringNull()
			}
			if resp.InputEventhub.Pq.MaxBufferSize != nil {
				r.InputEventhub.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.Pq.MaxBufferSize)))
			} else {
				r.InputEventhub.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputEventhub.Pq.MaxFileSize = types.StringPointerValue(resp.InputEventhub.Pq.MaxFileSize)
			r.InputEventhub.Pq.MaxSize = types.StringPointerValue(resp.InputEventhub.Pq.MaxSize)
			if resp.InputEventhub.Pq.Mode != nil {
				r.InputEventhub.Pq.Mode = types.StringValue(string(*resp.InputEventhub.Pq.Mode))
			} else {
				r.InputEventhub.Pq.Mode = types.StringNull()
			}
			r.InputEventhub.Pq.Path = types.StringPointerValue(resp.InputEventhub.Pq.Path)
		}
		r.InputEventhub.PqEnabled = types.BoolPointerValue(resp.InputEventhub.PqEnabled)
		if resp.InputEventhub.ReauthenticationThreshold != nil {
			r.InputEventhub.ReauthenticationThreshold = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.ReauthenticationThreshold)))
		} else {
			r.InputEventhub.ReauthenticationThreshold = types.NumberNull()
		}
		if resp.InputEventhub.RebalanceTimeout != nil {
			r.InputEventhub.RebalanceTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.RebalanceTimeout)))
		} else {
			r.InputEventhub.RebalanceTimeout = types.NumberNull()
		}
		if resp.InputEventhub.RequestTimeout != nil {
			r.InputEventhub.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.RequestTimeout)))
		} else {
			r.InputEventhub.RequestTimeout = types.NumberNull()
		}
		if resp.InputEventhub.Sasl == nil {
			r.InputEventhub.Sasl = nil
		} else {
			r.InputEventhub.Sasl = &tfTypes.InputEventhubAuthentication{}
			r.InputEventhub.Sasl.Disabled = types.BoolPointerValue(resp.InputEventhub.Sasl.Disabled)
			if resp.InputEventhub.Sasl.Mechanism != nil {
				r.InputEventhub.Sasl.Mechanism = types.StringValue(string(*resp.InputEventhub.Sasl.Mechanism))
			} else {
				r.InputEventhub.Sasl.Mechanism = types.StringNull()
			}
		}
		r.InputEventhub.SendToRoutes = types.BoolPointerValue(resp.InputEventhub.SendToRoutes)
		if resp.InputEventhub.SessionTimeout != nil {
			r.InputEventhub.SessionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputEventhub.SessionTimeout)))
		} else {
			r.InputEventhub.SessionTimeout = types.NumberNull()
		}
		r.InputEventhub.Streamtags = make([]types.String, 0, len(resp.InputEventhub.Streamtags))
		for _, v := range resp.InputEventhub.Streamtags {
			r.InputEventhub.Streamtags = append(r.InputEventhub.Streamtags, types.StringValue(v))
		}
		if resp.InputEventhub.TLS == nil {
			r.InputEventhub.TLS = nil
		} else {
			r.InputEventhub.TLS = &tfTypes.InputEventhubTLSSettingsClientSide{}
			r.InputEventhub.TLS.Disabled = types.BoolPointerValue(resp.InputEventhub.TLS.Disabled)
			r.InputEventhub.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputEventhub.TLS.RejectUnauthorized)
		}
		r.InputEventhub.Topics = make([]types.String, 0, len(resp.InputEventhub.Topics))
		for _, v := range resp.InputEventhub.Topics {
			r.InputEventhub.Topics = append(r.InputEventhub.Topics, types.StringValue(v))
		}
		if resp.InputEventhub.Type != nil {
			r.InputEventhub.Type = types.StringValue(string(*resp.InputEventhub.Type))
		} else {
			r.InputEventhub.Type = types.StringNull()
		}
	}
	if resp.InputExec != nil {
		r.InputExec = &tfTypes.InputExec{}
		r.InputExec.BreakerRulesets = make([]types.String, 0, len(resp.InputExec.BreakerRulesets))
		for _, v := range resp.InputExec.BreakerRulesets {
			r.InputExec.BreakerRulesets = append(r.InputExec.BreakerRulesets, types.StringValue(v))
		}
		r.InputExec.Command = types.StringValue(resp.InputExec.Command)
		r.InputExec.Connections = []tfTypes.InputExecConnections{}
		if len(r.InputExec.Connections) > len(resp.InputExec.Connections) {
			r.InputExec.Connections = r.InputExec.Connections[:len(resp.InputExec.Connections)]
		}
		for connectionsCount24, connectionsItem24 := range resp.InputExec.Connections {
			var connections49 tfTypes.InputExecConnections
			connections49.Output = types.StringValue(connectionsItem24.Output)
			connections49.Pipeline = types.StringPointerValue(connectionsItem24.Pipeline)
			if connectionsCount24+1 > len(r.InputExec.Connections) {
				r.InputExec.Connections = append(r.InputExec.Connections, connections49)
			} else {
				r.InputExec.Connections[connectionsCount24].Output = connections49.Output
				r.InputExec.Connections[connectionsCount24].Pipeline = connections49.Pipeline
			}
		}
		r.InputExec.CronSchedule = types.StringPointerValue(resp.InputExec.CronSchedule)
		r.InputExec.Description = types.StringPointerValue(resp.InputExec.Description)
		r.InputExec.Disabled = types.BoolPointerValue(resp.InputExec.Disabled)
		r.InputExec.Environment = types.StringPointerValue(resp.InputExec.Environment)
		r.InputExec.ID = types.StringPointerValue(resp.InputExec.ID)
		if resp.InputExec.Interval != nil {
			r.InputExec.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputExec.Interval)))
		} else {
			r.InputExec.Interval = types.NumberNull()
		}
		r.InputExec.Metadata = []tfTypes.InputExecMetadata{}
		if len(r.InputExec.Metadata) > len(resp.InputExec.Metadata) {
			r.InputExec.Metadata = r.InputExec.Metadata[:len(resp.InputExec.Metadata)]
		}
		for metadataCount26, metadataItem26 := range resp.InputExec.Metadata {
			var metadata53 tfTypes.InputExecMetadata
			metadata53.Name = types.StringValue(metadataItem26.Name)
			metadata53.Value = types.StringValue(metadataItem26.Value)
			if metadataCount26+1 > len(r.InputExec.Metadata) {
				r.InputExec.Metadata = append(r.InputExec.Metadata, metadata53)
			} else {
				r.InputExec.Metadata[metadataCount26].Name = metadata53.Name
				r.InputExec.Metadata[metadataCount26].Value = metadata53.Value
			}
		}
		r.InputExec.Pipeline = types.StringPointerValue(resp.InputExec.Pipeline)
		if resp.InputExec.Pq == nil {
			r.InputExec.Pq = nil
		} else {
			r.InputExec.Pq = &tfTypes.InputExecPq{}
			if resp.InputExec.Pq.CommitFrequency != nil {
				r.InputExec.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputExec.Pq.CommitFrequency)))
			} else {
				r.InputExec.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputExec.Pq.Compress != nil {
				r.InputExec.Pq.Compress = types.StringValue(string(*resp.InputExec.Pq.Compress))
			} else {
				r.InputExec.Pq.Compress = types.StringNull()
			}
			if resp.InputExec.Pq.MaxBufferSize != nil {
				r.InputExec.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputExec.Pq.MaxBufferSize)))
			} else {
				r.InputExec.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputExec.Pq.MaxFileSize = types.StringPointerValue(resp.InputExec.Pq.MaxFileSize)
			r.InputExec.Pq.MaxSize = types.StringPointerValue(resp.InputExec.Pq.MaxSize)
			if resp.InputExec.Pq.Mode != nil {
				r.InputExec.Pq.Mode = types.StringValue(string(*resp.InputExec.Pq.Mode))
			} else {
				r.InputExec.Pq.Mode = types.StringNull()
			}
			r.InputExec.Pq.Path = types.StringPointerValue(resp.InputExec.Pq.Path)
		}
		r.InputExec.PqEnabled = types.BoolPointerValue(resp.InputExec.PqEnabled)
		if resp.InputExec.Retries != nil {
			r.InputExec.Retries = types.NumberValue(big.NewFloat(float64(*resp.InputExec.Retries)))
		} else {
			r.InputExec.Retries = types.NumberNull()
		}
		if resp.InputExec.ScheduleType != nil {
			r.InputExec.ScheduleType = types.StringValue(string(*resp.InputExec.ScheduleType))
		} else {
			r.InputExec.ScheduleType = types.StringNull()
		}
		r.InputExec.SendToRoutes = types.BoolPointerValue(resp.InputExec.SendToRoutes)
		if resp.InputExec.StaleChannelFlushMs != nil {
			r.InputExec.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputExec.StaleChannelFlushMs)))
		} else {
			r.InputExec.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputExec.Streamtags = make([]types.String, 0, len(resp.InputExec.Streamtags))
		for _, v := range resp.InputExec.Streamtags {
			r.InputExec.Streamtags = append(r.InputExec.Streamtags, types.StringValue(v))
		}
		r.InputExec.Type = types.StringValue(string(resp.InputExec.Type))
	}
	if resp.InputFirehose != nil {
		r.InputFirehose = &tfTypes.InputFirehose{}
		if resp.InputFirehose.ActivityLogSampleRate != nil {
			r.InputFirehose.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputFirehose.ActivityLogSampleRate)))
		} else {
			r.InputFirehose.ActivityLogSampleRate = types.NumberNull()
		}
		r.InputFirehose.AuthTokens = make([]types.String, 0, len(resp.InputFirehose.AuthTokens))
		for _, v := range resp.InputFirehose.AuthTokens {
			r.InputFirehose.AuthTokens = append(r.InputFirehose.AuthTokens, types.StringValue(v))
		}
		r.InputFirehose.CaptureHeaders = types.BoolPointerValue(resp.InputFirehose.CaptureHeaders)
		r.InputFirehose.Connections = []tfTypes.InputFirehoseConnections{}
		if len(r.InputFirehose.Connections) > len(resp.InputFirehose.Connections) {
			r.InputFirehose.Connections = r.InputFirehose.Connections[:len(resp.InputFirehose.Connections)]
		}
		for connectionsCount25, connectionsItem25 := range resp.InputFirehose.Connections {
			var connections51 tfTypes.InputFirehoseConnections
			connections51.Output = types.StringValue(connectionsItem25.Output)
			connections51.Pipeline = types.StringPointerValue(connectionsItem25.Pipeline)
			if connectionsCount25+1 > len(r.InputFirehose.Connections) {
				r.InputFirehose.Connections = append(r.InputFirehose.Connections, connections51)
			} else {
				r.InputFirehose.Connections[connectionsCount25].Output = connections51.Output
				r.InputFirehose.Connections[connectionsCount25].Pipeline = connections51.Pipeline
			}
		}
		r.InputFirehose.Description = types.StringPointerValue(resp.InputFirehose.Description)
		r.InputFirehose.Disabled = types.BoolPointerValue(resp.InputFirehose.Disabled)
		r.InputFirehose.EnableHealthCheck = types.BoolPointerValue(resp.InputFirehose.EnableHealthCheck)
		r.InputFirehose.EnableProxyHeader = types.BoolPointerValue(resp.InputFirehose.EnableProxyHeader)
		r.InputFirehose.Environment = types.StringPointerValue(resp.InputFirehose.Environment)
		r.InputFirehose.Host = types.StringPointerValue(resp.InputFirehose.Host)
		r.InputFirehose.ID = types.StringPointerValue(resp.InputFirehose.ID)
		r.InputFirehose.IPAllowlistRegex = types.StringPointerValue(resp.InputFirehose.IPAllowlistRegex)
		r.InputFirehose.IPDenylistRegex = types.StringPointerValue(resp.InputFirehose.IPDenylistRegex)
		if resp.InputFirehose.KeepAliveTimeout != nil {
			r.InputFirehose.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputFirehose.KeepAliveTimeout)))
		} else {
			r.InputFirehose.KeepAliveTimeout = types.NumberNull()
		}
		if resp.InputFirehose.MaxActiveReq != nil {
			r.InputFirehose.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputFirehose.MaxActiveReq)))
		} else {
			r.InputFirehose.MaxActiveReq = types.NumberNull()
		}
		r.InputFirehose.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputFirehose.MaxRequestsPerSocket)
		r.InputFirehose.Metadata = []tfTypes.InputFirehoseMetadata{}
		if len(r.InputFirehose.Metadata) > len(resp.InputFirehose.Metadata) {
			r.InputFirehose.Metadata = r.InputFirehose.Metadata[:len(resp.InputFirehose.Metadata)]
		}
		for metadataCount27, metadataItem27 := range resp.InputFirehose.Metadata {
			var metadata55 tfTypes.InputFirehoseMetadata
			metadata55.Name = types.StringValue(metadataItem27.Name)
			metadata55.Value = types.StringValue(metadataItem27.Value)
			if metadataCount27+1 > len(r.InputFirehose.Metadata) {
				r.InputFirehose.Metadata = append(r.InputFirehose.Metadata, metadata55)
			} else {
				r.InputFirehose.Metadata[metadataCount27].Name = metadata55.Name
				r.InputFirehose.Metadata[metadataCount27].Value = metadata55.Value
			}
		}
		r.InputFirehose.Pipeline = types.StringPointerValue(resp.InputFirehose.Pipeline)
		r.InputFirehose.Port = types.NumberValue(big.NewFloat(float64(resp.InputFirehose.Port)))
		if resp.InputFirehose.Pq == nil {
			r.InputFirehose.Pq = nil
		} else {
			r.InputFirehose.Pq = &tfTypes.InputFirehosePq{}
			if resp.InputFirehose.Pq.CommitFrequency != nil {
				r.InputFirehose.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputFirehose.Pq.CommitFrequency)))
			} else {
				r.InputFirehose.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputFirehose.Pq.Compress != nil {
				r.InputFirehose.Pq.Compress = types.StringValue(string(*resp.InputFirehose.Pq.Compress))
			} else {
				r.InputFirehose.Pq.Compress = types.StringNull()
			}
			if resp.InputFirehose.Pq.MaxBufferSize != nil {
				r.InputFirehose.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputFirehose.Pq.MaxBufferSize)))
			} else {
				r.InputFirehose.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputFirehose.Pq.MaxFileSize = types.StringPointerValue(resp.InputFirehose.Pq.MaxFileSize)
			r.InputFirehose.Pq.MaxSize = types.StringPointerValue(resp.InputFirehose.Pq.MaxSize)
			if resp.InputFirehose.Pq.Mode != nil {
				r.InputFirehose.Pq.Mode = types.StringValue(string(*resp.InputFirehose.Pq.Mode))
			} else {
				r.InputFirehose.Pq.Mode = types.StringNull()
			}
			r.InputFirehose.Pq.Path = types.StringPointerValue(resp.InputFirehose.Pq.Path)
		}
		r.InputFirehose.PqEnabled = types.BoolPointerValue(resp.InputFirehose.PqEnabled)
		if resp.InputFirehose.RequestTimeout != nil {
			r.InputFirehose.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputFirehose.RequestTimeout)))
		} else {
			r.InputFirehose.RequestTimeout = types.NumberNull()
		}
		r.InputFirehose.SendToRoutes = types.BoolPointerValue(resp.InputFirehose.SendToRoutes)
		if resp.InputFirehose.SocketTimeout != nil {
			r.InputFirehose.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputFirehose.SocketTimeout)))
		} else {
			r.InputFirehose.SocketTimeout = types.NumberNull()
		}
		r.InputFirehose.Streamtags = make([]types.String, 0, len(resp.InputFirehose.Streamtags))
		for _, v := range resp.InputFirehose.Streamtags {
			r.InputFirehose.Streamtags = append(r.InputFirehose.Streamtags, types.StringValue(v))
		}
		if resp.InputFirehose.TLS == nil {
			r.InputFirehose.TLS = nil
		} else {
			r.InputFirehose.TLS = &tfTypes.InputFirehoseTLSSettingsServerSide{}
			r.InputFirehose.TLS.CaPath = types.StringPointerValue(resp.InputFirehose.TLS.CaPath)
			r.InputFirehose.TLS.CertificateName = types.StringPointerValue(resp.InputFirehose.TLS.CertificateName)
			r.InputFirehose.TLS.CertPath = types.StringPointerValue(resp.InputFirehose.TLS.CertPath)
			if resp.InputFirehose.TLS.CommonNameRegex == nil {
				r.InputFirehose.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult7, _ := json.Marshal(resp.InputFirehose.TLS.CommonNameRegex)
				r.InputFirehose.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult7))
			}
			r.InputFirehose.TLS.Disabled = types.BoolPointerValue(resp.InputFirehose.TLS.Disabled)
			if resp.InputFirehose.TLS.MaxVersion != nil {
				r.InputFirehose.TLS.MaxVersion = types.StringValue(string(*resp.InputFirehose.TLS.MaxVersion))
			} else {
				r.InputFirehose.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputFirehose.TLS.MinVersion != nil {
				r.InputFirehose.TLS.MinVersion = types.StringValue(string(*resp.InputFirehose.TLS.MinVersion))
			} else {
				r.InputFirehose.TLS.MinVersion = types.StringNull()
			}
			r.InputFirehose.TLS.Passphrase = types.StringPointerValue(resp.InputFirehose.TLS.Passphrase)
			r.InputFirehose.TLS.PrivKeyPath = types.StringPointerValue(resp.InputFirehose.TLS.PrivKeyPath)
			if resp.InputFirehose.TLS.RejectUnauthorized == nil {
				r.InputFirehose.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult7, _ := json.Marshal(resp.InputFirehose.TLS.RejectUnauthorized)
				r.InputFirehose.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult7))
			}
			r.InputFirehose.TLS.RequestCert = types.BoolPointerValue(resp.InputFirehose.TLS.RequestCert)
		}
		if resp.InputFirehose.Type != nil {
			r.InputFirehose.Type = types.StringValue(string(*resp.InputFirehose.Type))
		} else {
			r.InputFirehose.Type = types.StringNull()
		}
	}
	if resp.InputGooglePubsub != nil {
		r.InputGooglePubsub = &tfTypes.InputGooglePubsub{}
		if resp.InputGooglePubsub.Concurrency != nil {
			r.InputGooglePubsub.Concurrency = types.NumberValue(big.NewFloat(float64(*resp.InputGooglePubsub.Concurrency)))
		} else {
			r.InputGooglePubsub.Concurrency = types.NumberNull()
		}
		r.InputGooglePubsub.Connections = []tfTypes.InputGooglePubsubConnections{}
		if len(r.InputGooglePubsub.Connections) > len(resp.InputGooglePubsub.Connections) {
			r.InputGooglePubsub.Connections = r.InputGooglePubsub.Connections[:len(resp.InputGooglePubsub.Connections)]
		}
		for connectionsCount26, connectionsItem26 := range resp.InputGooglePubsub.Connections {
			var connections53 tfTypes.InputGooglePubsubConnections
			connections53.Output = types.StringValue(connectionsItem26.Output)
			connections53.Pipeline = types.StringPointerValue(connectionsItem26.Pipeline)
			if connectionsCount26+1 > len(r.InputGooglePubsub.Connections) {
				r.InputGooglePubsub.Connections = append(r.InputGooglePubsub.Connections, connections53)
			} else {
				r.InputGooglePubsub.Connections[connectionsCount26].Output = connections53.Output
				r.InputGooglePubsub.Connections[connectionsCount26].Pipeline = connections53.Pipeline
			}
		}
		r.InputGooglePubsub.CreateSubscription = types.BoolPointerValue(resp.InputGooglePubsub.CreateSubscription)
		r.InputGooglePubsub.CreateTopic = types.BoolPointerValue(resp.InputGooglePubsub.CreateTopic)
		r.InputGooglePubsub.Description = types.StringPointerValue(resp.InputGooglePubsub.Description)
		r.InputGooglePubsub.Disabled = types.BoolPointerValue(resp.InputGooglePubsub.Disabled)
		r.InputGooglePubsub.Environment = types.StringPointerValue(resp.InputGooglePubsub.Environment)
		if resp.InputGooglePubsub.GoogleAuthMethod != nil {
			r.InputGooglePubsub.GoogleAuthMethod = types.StringValue(string(*resp.InputGooglePubsub.GoogleAuthMethod))
		} else {
			r.InputGooglePubsub.GoogleAuthMethod = types.StringNull()
		}
		r.InputGooglePubsub.ID = types.StringPointerValue(resp.InputGooglePubsub.ID)
		if resp.InputGooglePubsub.MaxBacklog != nil {
			r.InputGooglePubsub.MaxBacklog = types.NumberValue(big.NewFloat(float64(*resp.InputGooglePubsub.MaxBacklog)))
		} else {
			r.InputGooglePubsub.MaxBacklog = types.NumberNull()
		}
		r.InputGooglePubsub.Metadata = []tfTypes.InputGooglePubsubMetadata{}
		if len(r.InputGooglePubsub.Metadata) > len(resp.InputGooglePubsub.Metadata) {
			r.InputGooglePubsub.Metadata = r.InputGooglePubsub.Metadata[:len(resp.InputGooglePubsub.Metadata)]
		}
		for metadataCount28, metadataItem28 := range resp.InputGooglePubsub.Metadata {
			var metadata57 tfTypes.InputGooglePubsubMetadata
			metadata57.Name = types.StringValue(metadataItem28.Name)
			metadata57.Value = types.StringValue(metadataItem28.Value)
			if metadataCount28+1 > len(r.InputGooglePubsub.Metadata) {
				r.InputGooglePubsub.Metadata = append(r.InputGooglePubsub.Metadata, metadata57)
			} else {
				r.InputGooglePubsub.Metadata[metadataCount28].Name = metadata57.Name
				r.InputGooglePubsub.Metadata[metadataCount28].Value = metadata57.Value
			}
		}
		r.InputGooglePubsub.OrderedDelivery = types.BoolPointerValue(resp.InputGooglePubsub.OrderedDelivery)
		r.InputGooglePubsub.Pipeline = types.StringPointerValue(resp.InputGooglePubsub.Pipeline)
		if resp.InputGooglePubsub.Pq == nil {
			r.InputGooglePubsub.Pq = nil
		} else {
			r.InputGooglePubsub.Pq = &tfTypes.InputGooglePubsubPq{}
			if resp.InputGooglePubsub.Pq.CommitFrequency != nil {
				r.InputGooglePubsub.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputGooglePubsub.Pq.CommitFrequency)))
			} else {
				r.InputGooglePubsub.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputGooglePubsub.Pq.Compress != nil {
				r.InputGooglePubsub.Pq.Compress = types.StringValue(string(*resp.InputGooglePubsub.Pq.Compress))
			} else {
				r.InputGooglePubsub.Pq.Compress = types.StringNull()
			}
			if resp.InputGooglePubsub.Pq.MaxBufferSize != nil {
				r.InputGooglePubsub.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputGooglePubsub.Pq.MaxBufferSize)))
			} else {
				r.InputGooglePubsub.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputGooglePubsub.Pq.MaxFileSize = types.StringPointerValue(resp.InputGooglePubsub.Pq.MaxFileSize)
			r.InputGooglePubsub.Pq.MaxSize = types.StringPointerValue(resp.InputGooglePubsub.Pq.MaxSize)
			if resp.InputGooglePubsub.Pq.Mode != nil {
				r.InputGooglePubsub.Pq.Mode = types.StringValue(string(*resp.InputGooglePubsub.Pq.Mode))
			} else {
				r.InputGooglePubsub.Pq.Mode = types.StringNull()
			}
			r.InputGooglePubsub.Pq.Path = types.StringPointerValue(resp.InputGooglePubsub.Pq.Path)
		}
		r.InputGooglePubsub.PqEnabled = types.BoolPointerValue(resp.InputGooglePubsub.PqEnabled)
		r.InputGooglePubsub.Region = types.StringPointerValue(resp.InputGooglePubsub.Region)
		if resp.InputGooglePubsub.RequestTimeout != nil {
			r.InputGooglePubsub.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputGooglePubsub.RequestTimeout)))
		} else {
			r.InputGooglePubsub.RequestTimeout = types.NumberNull()
		}
		r.InputGooglePubsub.Secret = types.StringPointerValue(resp.InputGooglePubsub.Secret)
		r.InputGooglePubsub.SendToRoutes = types.BoolPointerValue(resp.InputGooglePubsub.SendToRoutes)
		r.InputGooglePubsub.ServiceAccountCredentials = types.StringPointerValue(resp.InputGooglePubsub.ServiceAccountCredentials)
		r.InputGooglePubsub.Streamtags = make([]types.String, 0, len(resp.InputGooglePubsub.Streamtags))
		for _, v := range resp.InputGooglePubsub.Streamtags {
			r.InputGooglePubsub.Streamtags = append(r.InputGooglePubsub.Streamtags, types.StringValue(v))
		}
		r.InputGooglePubsub.SubscriptionName = types.StringValue(resp.InputGooglePubsub.SubscriptionName)
		r.InputGooglePubsub.TopicName = types.StringValue(resp.InputGooglePubsub.TopicName)
		if resp.InputGooglePubsub.Type != nil {
			r.InputGooglePubsub.Type = types.StringValue(string(*resp.InputGooglePubsub.Type))
		} else {
			r.InputGooglePubsub.Type = types.StringNull()
		}
	}
	if resp.InputGrafana != nil {
		r.InputGrafana = &tfTypes.InputGrafana{}
		if resp.InputGrafana.InputGrafana1 != nil {
			r.InputGrafana.One = &tfTypes.InputGrafana1{}
			if resp.InputGrafana.InputGrafana1.ActivityLogSampleRate != nil {
				r.InputGrafana.One.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana1.ActivityLogSampleRate)))
			} else {
				r.InputGrafana.One.ActivityLogSampleRate = types.NumberNull()
			}
			r.InputGrafana.One.CaptureHeaders = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.CaptureHeaders)
			r.InputGrafana.One.Connections = []tfTypes.InputGrafanaConnections{}
			if len(r.InputGrafana.One.Connections) > len(resp.InputGrafana.InputGrafana1.Connections) {
				r.InputGrafana.One.Connections = r.InputGrafana.One.Connections[:len(resp.InputGrafana.InputGrafana1.Connections)]
			}
			for connectionsCount27, connectionsItem27 := range resp.InputGrafana.InputGrafana1.Connections {
				var connections55 tfTypes.InputGrafanaConnections
				connections55.Output = types.StringValue(connectionsItem27.Output)
				connections55.Pipeline = types.StringPointerValue(connectionsItem27.Pipeline)
				if connectionsCount27+1 > len(r.InputGrafana.One.Connections) {
					r.InputGrafana.One.Connections = append(r.InputGrafana.One.Connections, connections55)
				} else {
					r.InputGrafana.One.Connections[connectionsCount27].Output = connections55.Output
					r.InputGrafana.One.Connections[connectionsCount27].Pipeline = connections55.Pipeline
				}
			}
			r.InputGrafana.One.Description = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Description)
			r.InputGrafana.One.Disabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.Disabled)
			r.InputGrafana.One.EnableHealthCheck = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.EnableHealthCheck)
			r.InputGrafana.One.EnableProxyHeader = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.EnableProxyHeader)
			r.InputGrafana.One.Environment = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Environment)
			r.InputGrafana.One.Host = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Host)
			r.InputGrafana.One.ID = types.StringPointerValue(resp.InputGrafana.InputGrafana1.ID)
			r.InputGrafana.One.IPAllowlistRegex = types.StringPointerValue(resp.InputGrafana.InputGrafana1.IPAllowlistRegex)
			r.InputGrafana.One.IPDenylistRegex = types.StringPointerValue(resp.InputGrafana.InputGrafana1.IPDenylistRegex)
			if resp.InputGrafana.InputGrafana1.KeepAliveTimeout != nil {
				r.InputGrafana.One.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana1.KeepAliveTimeout)))
			} else {
				r.InputGrafana.One.KeepAliveTimeout = types.NumberNull()
			}
			r.InputGrafana.One.LokiAPI = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAPI)
			if resp.InputGrafana.InputGrafana1.LokiAuth == nil {
				r.InputGrafana.One.LokiAuth = nil
			} else {
				r.InputGrafana.One.LokiAuth = &tfTypes.LokiAuth{}
				r.InputGrafana.One.LokiAuth.AuthHeaderExpr = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.AuthHeaderExpr)
				if resp.InputGrafana.InputGrafana1.LokiAuth.AuthType != nil {
					r.InputGrafana.One.LokiAuth.AuthType = types.StringValue(string(*resp.InputGrafana.InputGrafana1.LokiAuth.AuthType))
				} else {
					r.InputGrafana.One.LokiAuth.AuthType = types.StringNull()
				}
				r.InputGrafana.One.LokiAuth.CredentialsSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.CredentialsSecret)
				r.InputGrafana.One.LokiAuth.LoginURL = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.LoginURL)
				r.InputGrafana.One.LokiAuth.OauthHeaders = []tfTypes.InputGrafana1OauthHeaders{}
				if len(r.InputGrafana.One.LokiAuth.OauthHeaders) > len(resp.InputGrafana.InputGrafana1.LokiAuth.OauthHeaders) {
					r.InputGrafana.One.LokiAuth.OauthHeaders = r.InputGrafana.One.LokiAuth.OauthHeaders[:len(resp.InputGrafana.InputGrafana1.LokiAuth.OauthHeaders)]
				}
				for oauthHeadersCount, oauthHeadersItem := range resp.InputGrafana.InputGrafana1.LokiAuth.OauthHeaders {
					var oauthHeaders1 tfTypes.InputGrafana1OauthHeaders
					oauthHeaders1.Name = types.StringValue(oauthHeadersItem.Name)
					oauthHeaders1.Value = types.StringValue(oauthHeadersItem.Value)
					if oauthHeadersCount+1 > len(r.InputGrafana.One.LokiAuth.OauthHeaders) {
						r.InputGrafana.One.LokiAuth.OauthHeaders = append(r.InputGrafana.One.LokiAuth.OauthHeaders, oauthHeaders1)
					} else {
						r.InputGrafana.One.LokiAuth.OauthHeaders[oauthHeadersCount].Name = oauthHeaders1.Name
						r.InputGrafana.One.LokiAuth.OauthHeaders[oauthHeadersCount].Value = oauthHeaders1.Value
					}
				}
				r.InputGrafana.One.LokiAuth.OauthParams = []tfTypes.InputGrafana1OauthParams{}
				if len(r.InputGrafana.One.LokiAuth.OauthParams) > len(resp.InputGrafana.InputGrafana1.LokiAuth.OauthParams) {
					r.InputGrafana.One.LokiAuth.OauthParams = r.InputGrafana.One.LokiAuth.OauthParams[:len(resp.InputGrafana.InputGrafana1.LokiAuth.OauthParams)]
				}
				for oauthParamsCount, oauthParamsItem := range resp.InputGrafana.InputGrafana1.LokiAuth.OauthParams {
					var oauthParams1 tfTypes.InputGrafana1OauthParams
					oauthParams1.Name = types.StringValue(oauthParamsItem.Name)
					oauthParams1.Value = types.StringValue(oauthParamsItem.Value)
					if oauthParamsCount+1 > len(r.InputGrafana.One.LokiAuth.OauthParams) {
						r.InputGrafana.One.LokiAuth.OauthParams = append(r.InputGrafana.One.LokiAuth.OauthParams, oauthParams1)
					} else {
						r.InputGrafana.One.LokiAuth.OauthParams[oauthParamsCount].Name = oauthParams1.Name
						r.InputGrafana.One.LokiAuth.OauthParams[oauthParamsCount].Value = oauthParams1.Value
					}
				}
				r.InputGrafana.One.LokiAuth.Password = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.Password)
				r.InputGrafana.One.LokiAuth.Secret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.Secret)
				r.InputGrafana.One.LokiAuth.SecretParamName = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.SecretParamName)
				r.InputGrafana.One.LokiAuth.TextSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.TextSecret)
				r.InputGrafana.One.LokiAuth.Token = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.Token)
				r.InputGrafana.One.LokiAuth.TokenAttributeName = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.TokenAttributeName)
				if resp.InputGrafana.InputGrafana1.LokiAuth.TokenTimeoutSecs != nil {
					r.InputGrafana.One.LokiAuth.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana1.LokiAuth.TokenTimeoutSecs)))
				} else {
					r.InputGrafana.One.LokiAuth.TokenTimeoutSecs = types.NumberNull()
				}
				r.InputGrafana.One.LokiAuth.Username = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.Username)
			}
			if resp.InputGrafana.InputGrafana1.MaxActiveReq != nil {
				r.InputGrafana.One.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana1.MaxActiveReq)))
			} else {
				r.InputGrafana.One.MaxActiveReq = types.NumberNull()
			}
			r.InputGrafana.One.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputGrafana.InputGrafana1.MaxRequestsPerSocket)
			r.InputGrafana.One.Metadata = []tfTypes.InputGrafanaMetadata{}
			if len(r.InputGrafana.One.Metadata) > len(resp.InputGrafana.InputGrafana1.Metadata) {
				r.InputGrafana.One.Metadata = r.InputGrafana.One.Metadata[:len(resp.InputGrafana.InputGrafana1.Metadata)]
			}
			for metadataCount29, metadataItem29 := range resp.InputGrafana.InputGrafana1.Metadata {
				var metadata59 tfTypes.InputGrafanaMetadata
				metadata59.Name = types.StringValue(metadataItem29.Name)
				metadata59.Value = types.StringValue(metadataItem29.Value)
				if metadataCount29+1 > len(r.InputGrafana.One.Metadata) {
					r.InputGrafana.One.Metadata = append(r.InputGrafana.One.Metadata, metadata59)
				} else {
					r.InputGrafana.One.Metadata[metadataCount29].Name = metadata59.Name
					r.InputGrafana.One.Metadata[metadataCount29].Value = metadata59.Value
				}
			}
			r.InputGrafana.One.Pipeline = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Pipeline)
			r.InputGrafana.One.Port = types.NumberValue(big.NewFloat(float64(resp.InputGrafana.InputGrafana1.Port)))
			if resp.InputGrafana.InputGrafana1.Pq == nil {
				r.InputGrafana.One.Pq = nil
			} else {
				r.InputGrafana.One.Pq = &tfTypes.InputGrafanaPq{}
				if resp.InputGrafana.InputGrafana1.Pq.CommitFrequency != nil {
					r.InputGrafana.One.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana1.Pq.CommitFrequency)))
				} else {
					r.InputGrafana.One.Pq.CommitFrequency = types.NumberNull()
				}
				if resp.InputGrafana.InputGrafana1.Pq.Compress != nil {
					r.InputGrafana.One.Pq.Compress = types.StringValue(string(*resp.InputGrafana.InputGrafana1.Pq.Compress))
				} else {
					r.InputGrafana.One.Pq.Compress = types.StringNull()
				}
				if resp.InputGrafana.InputGrafana1.Pq.MaxBufferSize != nil {
					r.InputGrafana.One.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana1.Pq.MaxBufferSize)))
				} else {
					r.InputGrafana.One.Pq.MaxBufferSize = types.NumberNull()
				}
				r.InputGrafana.One.Pq.MaxFileSize = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Pq.MaxFileSize)
				r.InputGrafana.One.Pq.MaxSize = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Pq.MaxSize)
				if resp.InputGrafana.InputGrafana1.Pq.Mode != nil {
					r.InputGrafana.One.Pq.Mode = types.StringValue(string(*resp.InputGrafana.InputGrafana1.Pq.Mode))
				} else {
					r.InputGrafana.One.Pq.Mode = types.StringNull()
				}
				r.InputGrafana.One.Pq.Path = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Pq.Path)
			}
			r.InputGrafana.One.PqEnabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.PqEnabled)
			r.InputGrafana.One.PrometheusAPI = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAPI)
			if resp.InputGrafana.InputGrafana1.PrometheusAuth == nil {
				r.InputGrafana.One.PrometheusAuth = nil
			} else {
				r.InputGrafana.One.PrometheusAuth = &tfTypes.PrometheusAuth{}
				r.InputGrafana.One.PrometheusAuth.AuthHeaderExpr = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.AuthHeaderExpr)
				if resp.InputGrafana.InputGrafana1.PrometheusAuth.AuthType != nil {
					r.InputGrafana.One.PrometheusAuth.AuthType = types.StringValue(string(*resp.InputGrafana.InputGrafana1.PrometheusAuth.AuthType))
				} else {
					r.InputGrafana.One.PrometheusAuth.AuthType = types.StringNull()
				}
				r.InputGrafana.One.PrometheusAuth.CredentialsSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.CredentialsSecret)
				r.InputGrafana.One.PrometheusAuth.LoginURL = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.LoginURL)
				r.InputGrafana.One.PrometheusAuth.OauthHeaders = []tfTypes.InputGrafanaOauthHeaders{}
				if len(r.InputGrafana.One.PrometheusAuth.OauthHeaders) > len(resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthHeaders) {
					r.InputGrafana.One.PrometheusAuth.OauthHeaders = r.InputGrafana.One.PrometheusAuth.OauthHeaders[:len(resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthHeaders)]
				}
				for oauthHeadersCount1, oauthHeadersItem1 := range resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthHeaders {
					var oauthHeaders3 tfTypes.InputGrafanaOauthHeaders
					oauthHeaders3.Name = types.StringValue(oauthHeadersItem1.Name)
					oauthHeaders3.Value = types.StringValue(oauthHeadersItem1.Value)
					if oauthHeadersCount1+1 > len(r.InputGrafana.One.PrometheusAuth.OauthHeaders) {
						r.InputGrafana.One.PrometheusAuth.OauthHeaders = append(r.InputGrafana.One.PrometheusAuth.OauthHeaders, oauthHeaders3)
					} else {
						r.InputGrafana.One.PrometheusAuth.OauthHeaders[oauthHeadersCount1].Name = oauthHeaders3.Name
						r.InputGrafana.One.PrometheusAuth.OauthHeaders[oauthHeadersCount1].Value = oauthHeaders3.Value
					}
				}
				r.InputGrafana.One.PrometheusAuth.OauthParams = []tfTypes.InputGrafanaOauthParams{}
				if len(r.InputGrafana.One.PrometheusAuth.OauthParams) > len(resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthParams) {
					r.InputGrafana.One.PrometheusAuth.OauthParams = r.InputGrafana.One.PrometheusAuth.OauthParams[:len(resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthParams)]
				}
				for oauthParamsCount1, oauthParamsItem1 := range resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthParams {
					var oauthParams3 tfTypes.InputGrafanaOauthParams
					oauthParams3.Name = types.StringValue(oauthParamsItem1.Name)
					oauthParams3.Value = types.StringValue(oauthParamsItem1.Value)
					if oauthParamsCount1+1 > len(r.InputGrafana.One.PrometheusAuth.OauthParams) {
						r.InputGrafana.One.PrometheusAuth.OauthParams = append(r.InputGrafana.One.PrometheusAuth.OauthParams, oauthParams3)
					} else {
						r.InputGrafana.One.PrometheusAuth.OauthParams[oauthParamsCount1].Name = oauthParams3.Name
						r.InputGrafana.One.PrometheusAuth.OauthParams[oauthParamsCount1].Value = oauthParams3.Value
					}
				}
				r.InputGrafana.One.PrometheusAuth.Password = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.Password)
				r.InputGrafana.One.PrometheusAuth.Secret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.Secret)
				r.InputGrafana.One.PrometheusAuth.SecretParamName = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.SecretParamName)
				r.InputGrafana.One.PrometheusAuth.TextSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.TextSecret)
				r.InputGrafana.One.PrometheusAuth.Token = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.Token)
				r.InputGrafana.One.PrometheusAuth.TokenAttributeName = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.TokenAttributeName)
				if resp.InputGrafana.InputGrafana1.PrometheusAuth.TokenTimeoutSecs != nil {
					r.InputGrafana.One.PrometheusAuth.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana1.PrometheusAuth.TokenTimeoutSecs)))
				} else {
					r.InputGrafana.One.PrometheusAuth.TokenTimeoutSecs = types.NumberNull()
				}
				r.InputGrafana.One.PrometheusAuth.Username = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.Username)
			}
			if resp.InputGrafana.InputGrafana1.RequestTimeout != nil {
				r.InputGrafana.One.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana1.RequestTimeout)))
			} else {
				r.InputGrafana.One.RequestTimeout = types.NumberNull()
			}
			r.InputGrafana.One.SendToRoutes = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.SendToRoutes)
			if resp.InputGrafana.InputGrafana1.SocketTimeout != nil {
				r.InputGrafana.One.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana1.SocketTimeout)))
			} else {
				r.InputGrafana.One.SocketTimeout = types.NumberNull()
			}
			r.InputGrafana.One.Streamtags = make([]types.String, 0, len(resp.InputGrafana.InputGrafana1.Streamtags))
			for _, v := range resp.InputGrafana.InputGrafana1.Streamtags {
				r.InputGrafana.One.Streamtags = append(r.InputGrafana.One.Streamtags, types.StringValue(v))
			}
			if resp.InputGrafana.InputGrafana1.TLS == nil {
				r.InputGrafana.One.TLS = nil
			} else {
				r.InputGrafana.One.TLS = &tfTypes.InputGrafanaTLSSettingsServerSide{}
				r.InputGrafana.One.TLS.CaPath = types.StringPointerValue(resp.InputGrafana.InputGrafana1.TLS.CaPath)
				r.InputGrafana.One.TLS.CertificateName = types.StringPointerValue(resp.InputGrafana.InputGrafana1.TLS.CertificateName)
				r.InputGrafana.One.TLS.CertPath = types.StringPointerValue(resp.InputGrafana.InputGrafana1.TLS.CertPath)
				if resp.InputGrafana.InputGrafana1.TLS.CommonNameRegex == nil {
					r.InputGrafana.One.TLS.CommonNameRegex = types.StringNull()
				} else {
					commonNameRegexResult8, _ := json.Marshal(resp.InputGrafana.InputGrafana1.TLS.CommonNameRegex)
					r.InputGrafana.One.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult8))
				}
				r.InputGrafana.One.TLS.Disabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.TLS.Disabled)
				if resp.InputGrafana.InputGrafana1.TLS.MaxVersion != nil {
					r.InputGrafana.One.TLS.MaxVersion = types.StringValue(string(*resp.InputGrafana.InputGrafana1.TLS.MaxVersion))
				} else {
					r.InputGrafana.One.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputGrafana.InputGrafana1.TLS.MinVersion != nil {
					r.InputGrafana.One.TLS.MinVersion = types.StringValue(string(*resp.InputGrafana.InputGrafana1.TLS.MinVersion))
				} else {
					r.InputGrafana.One.TLS.MinVersion = types.StringNull()
				}
				r.InputGrafana.One.TLS.Passphrase = types.StringPointerValue(resp.InputGrafana.InputGrafana1.TLS.Passphrase)
				r.InputGrafana.One.TLS.PrivKeyPath = types.StringPointerValue(resp.InputGrafana.InputGrafana1.TLS.PrivKeyPath)
				if resp.InputGrafana.InputGrafana1.TLS.RejectUnauthorized == nil {
					r.InputGrafana.One.TLS.RejectUnauthorized = types.StringNull()
				} else {
					rejectUnauthorizedResult8, _ := json.Marshal(resp.InputGrafana.InputGrafana1.TLS.RejectUnauthorized)
					r.InputGrafana.One.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult8))
				}
				r.InputGrafana.One.TLS.RequestCert = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.TLS.RequestCert)
			}
			if resp.InputGrafana.InputGrafana1.Type != nil {
				r.InputGrafana.One.Type = types.StringValue(string(*resp.InputGrafana.InputGrafana1.Type))
			} else {
				r.InputGrafana.One.Type = types.StringNull()
			}
		}
		if resp.InputGrafana.InputGrafana2 != nil {
			r.InputGrafana.Two = &tfTypes.InputGrafana2{}
			if resp.InputGrafana.InputGrafana2.ActivityLogSampleRate != nil {
				r.InputGrafana.Two.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana2.ActivityLogSampleRate)))
			} else {
				r.InputGrafana.Two.ActivityLogSampleRate = types.NumberNull()
			}
			r.InputGrafana.Two.CaptureHeaders = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.CaptureHeaders)
			r.InputGrafana.Two.Connections = []tfTypes.InputGrafana2Connections{}
			if len(r.InputGrafana.Two.Connections) > len(resp.InputGrafana.InputGrafana2.Connections) {
				r.InputGrafana.Two.Connections = r.InputGrafana.Two.Connections[:len(resp.InputGrafana.InputGrafana2.Connections)]
			}
			for connectionsCount28, connectionsItem28 := range resp.InputGrafana.InputGrafana2.Connections {
				var connections57 tfTypes.InputGrafana2Connections
				connections57.Output = types.StringValue(connectionsItem28.Output)
				connections57.Pipeline = types.StringPointerValue(connectionsItem28.Pipeline)
				if connectionsCount28+1 > len(r.InputGrafana.Two.Connections) {
					r.InputGrafana.Two.Connections = append(r.InputGrafana.Two.Connections, connections57)
				} else {
					r.InputGrafana.Two.Connections[connectionsCount28].Output = connections57.Output
					r.InputGrafana.Two.Connections[connectionsCount28].Pipeline = connections57.Pipeline
				}
			}
			r.InputGrafana.Two.Description = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Description)
			r.InputGrafana.Two.Disabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.Disabled)
			r.InputGrafana.Two.EnableHealthCheck = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.EnableHealthCheck)
			r.InputGrafana.Two.EnableProxyHeader = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.EnableProxyHeader)
			r.InputGrafana.Two.Environment = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Environment)
			r.InputGrafana.Two.Host = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Host)
			r.InputGrafana.Two.ID = types.StringPointerValue(resp.InputGrafana.InputGrafana2.ID)
			r.InputGrafana.Two.IPAllowlistRegex = types.StringPointerValue(resp.InputGrafana.InputGrafana2.IPAllowlistRegex)
			r.InputGrafana.Two.IPDenylistRegex = types.StringPointerValue(resp.InputGrafana.InputGrafana2.IPDenylistRegex)
			if resp.InputGrafana.InputGrafana2.KeepAliveTimeout != nil {
				r.InputGrafana.Two.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana2.KeepAliveTimeout)))
			} else {
				r.InputGrafana.Two.KeepAliveTimeout = types.NumberNull()
			}
			r.InputGrafana.Two.LokiAPI = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAPI)
			if resp.InputGrafana.InputGrafana2.LokiAuth == nil {
				r.InputGrafana.Two.LokiAuth = nil
			} else {
				r.InputGrafana.Two.LokiAuth = &tfTypes.InputGrafanaLokiAuth{}
				r.InputGrafana.Two.LokiAuth.AuthHeaderExpr = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.AuthHeaderExpr)
				if resp.InputGrafana.InputGrafana2.LokiAuth.AuthType != nil {
					r.InputGrafana.Two.LokiAuth.AuthType = types.StringValue(string(*resp.InputGrafana.InputGrafana2.LokiAuth.AuthType))
				} else {
					r.InputGrafana.Two.LokiAuth.AuthType = types.StringNull()
				}
				r.InputGrafana.Two.LokiAuth.CredentialsSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.CredentialsSecret)
				r.InputGrafana.Two.LokiAuth.LoginURL = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.LoginURL)
				r.InputGrafana.Two.LokiAuth.OauthHeaders = []tfTypes.InputGrafana2LokiAuthOauthHeaders{}
				if len(r.InputGrafana.Two.LokiAuth.OauthHeaders) > len(resp.InputGrafana.InputGrafana2.LokiAuth.OauthHeaders) {
					r.InputGrafana.Two.LokiAuth.OauthHeaders = r.InputGrafana.Two.LokiAuth.OauthHeaders[:len(resp.InputGrafana.InputGrafana2.LokiAuth.OauthHeaders)]
				}
				for oauthHeadersCount2, oauthHeadersItem2 := range resp.InputGrafana.InputGrafana2.LokiAuth.OauthHeaders {
					var oauthHeaders5 tfTypes.InputGrafana2LokiAuthOauthHeaders
					oauthHeaders5.Name = types.StringValue(oauthHeadersItem2.Name)
					oauthHeaders5.Value = types.StringValue(oauthHeadersItem2.Value)
					if oauthHeadersCount2+1 > len(r.InputGrafana.Two.LokiAuth.OauthHeaders) {
						r.InputGrafana.Two.LokiAuth.OauthHeaders = append(r.InputGrafana.Two.LokiAuth.OauthHeaders, oauthHeaders5)
					} else {
						r.InputGrafana.Two.LokiAuth.OauthHeaders[oauthHeadersCount2].Name = oauthHeaders5.Name
						r.InputGrafana.Two.LokiAuth.OauthHeaders[oauthHeadersCount2].Value = oauthHeaders5.Value
					}
				}
				r.InputGrafana.Two.LokiAuth.OauthParams = []tfTypes.InputGrafana2LokiAuthOauthParams{}
				if len(r.InputGrafana.Two.LokiAuth.OauthParams) > len(resp.InputGrafana.InputGrafana2.LokiAuth.OauthParams) {
					r.InputGrafana.Two.LokiAuth.OauthParams = r.InputGrafana.Two.LokiAuth.OauthParams[:len(resp.InputGrafana.InputGrafana2.LokiAuth.OauthParams)]
				}
				for oauthParamsCount2, oauthParamsItem2 := range resp.InputGrafana.InputGrafana2.LokiAuth.OauthParams {
					var oauthParams5 tfTypes.InputGrafana2LokiAuthOauthParams
					oauthParams5.Name = types.StringValue(oauthParamsItem2.Name)
					oauthParams5.Value = types.StringValue(oauthParamsItem2.Value)
					if oauthParamsCount2+1 > len(r.InputGrafana.Two.LokiAuth.OauthParams) {
						r.InputGrafana.Two.LokiAuth.OauthParams = append(r.InputGrafana.Two.LokiAuth.OauthParams, oauthParams5)
					} else {
						r.InputGrafana.Two.LokiAuth.OauthParams[oauthParamsCount2].Name = oauthParams5.Name
						r.InputGrafana.Two.LokiAuth.OauthParams[oauthParamsCount2].Value = oauthParams5.Value
					}
				}
				r.InputGrafana.Two.LokiAuth.Password = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.Password)
				r.InputGrafana.Two.LokiAuth.Secret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.Secret)
				r.InputGrafana.Two.LokiAuth.SecretParamName = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.SecretParamName)
				r.InputGrafana.Two.LokiAuth.TextSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.TextSecret)
				r.InputGrafana.Two.LokiAuth.Token = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.Token)
				r.InputGrafana.Two.LokiAuth.TokenAttributeName = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.TokenAttributeName)
				if resp.InputGrafana.InputGrafana2.LokiAuth.TokenTimeoutSecs != nil {
					r.InputGrafana.Two.LokiAuth.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana2.LokiAuth.TokenTimeoutSecs)))
				} else {
					r.InputGrafana.Two.LokiAuth.TokenTimeoutSecs = types.NumberNull()
				}
				r.InputGrafana.Two.LokiAuth.Username = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.Username)
			}
			if resp.InputGrafana.InputGrafana2.MaxActiveReq != nil {
				r.InputGrafana.Two.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana2.MaxActiveReq)))
			} else {
				r.InputGrafana.Two.MaxActiveReq = types.NumberNull()
			}
			r.InputGrafana.Two.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputGrafana.InputGrafana2.MaxRequestsPerSocket)
			r.InputGrafana.Two.Metadata = []tfTypes.InputGrafana2Metadata{}
			if len(r.InputGrafana.Two.Metadata) > len(resp.InputGrafana.InputGrafana2.Metadata) {
				r.InputGrafana.Two.Metadata = r.InputGrafana.Two.Metadata[:len(resp.InputGrafana.InputGrafana2.Metadata)]
			}
			for metadataCount30, metadataItem30 := range resp.InputGrafana.InputGrafana2.Metadata {
				var metadata61 tfTypes.InputGrafana2Metadata
				metadata61.Name = types.StringValue(metadataItem30.Name)
				metadata61.Value = types.StringValue(metadataItem30.Value)
				if metadataCount30+1 > len(r.InputGrafana.Two.Metadata) {
					r.InputGrafana.Two.Metadata = append(r.InputGrafana.Two.Metadata, metadata61)
				} else {
					r.InputGrafana.Two.Metadata[metadataCount30].Name = metadata61.Name
					r.InputGrafana.Two.Metadata[metadataCount30].Value = metadata61.Value
				}
			}
			r.InputGrafana.Two.Pipeline = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Pipeline)
			r.InputGrafana.Two.Port = types.NumberValue(big.NewFloat(float64(resp.InputGrafana.InputGrafana2.Port)))
			if resp.InputGrafana.InputGrafana2.Pq == nil {
				r.InputGrafana.Two.Pq = nil
			} else {
				r.InputGrafana.Two.Pq = &tfTypes.InputGrafana2Pq{}
				if resp.InputGrafana.InputGrafana2.Pq.CommitFrequency != nil {
					r.InputGrafana.Two.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana2.Pq.CommitFrequency)))
				} else {
					r.InputGrafana.Two.Pq.CommitFrequency = types.NumberNull()
				}
				if resp.InputGrafana.InputGrafana2.Pq.Compress != nil {
					r.InputGrafana.Two.Pq.Compress = types.StringValue(string(*resp.InputGrafana.InputGrafana2.Pq.Compress))
				} else {
					r.InputGrafana.Two.Pq.Compress = types.StringNull()
				}
				if resp.InputGrafana.InputGrafana2.Pq.MaxBufferSize != nil {
					r.InputGrafana.Two.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana2.Pq.MaxBufferSize)))
				} else {
					r.InputGrafana.Two.Pq.MaxBufferSize = types.NumberNull()
				}
				r.InputGrafana.Two.Pq.MaxFileSize = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Pq.MaxFileSize)
				r.InputGrafana.Two.Pq.MaxSize = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Pq.MaxSize)
				if resp.InputGrafana.InputGrafana2.Pq.Mode != nil {
					r.InputGrafana.Two.Pq.Mode = types.StringValue(string(*resp.InputGrafana.InputGrafana2.Pq.Mode))
				} else {
					r.InputGrafana.Two.Pq.Mode = types.StringNull()
				}
				r.InputGrafana.Two.Pq.Path = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Pq.Path)
			}
			r.InputGrafana.Two.PqEnabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.PqEnabled)
			r.InputGrafana.Two.PrometheusAPI = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAPI)
			if resp.InputGrafana.InputGrafana2.PrometheusAuth == nil {
				r.InputGrafana.Two.PrometheusAuth = nil
			} else {
				r.InputGrafana.Two.PrometheusAuth = &tfTypes.InputGrafanaPrometheusAuth{}
				r.InputGrafana.Two.PrometheusAuth.AuthHeaderExpr = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.AuthHeaderExpr)
				if resp.InputGrafana.InputGrafana2.PrometheusAuth.AuthType != nil {
					r.InputGrafana.Two.PrometheusAuth.AuthType = types.StringValue(string(*resp.InputGrafana.InputGrafana2.PrometheusAuth.AuthType))
				} else {
					r.InputGrafana.Two.PrometheusAuth.AuthType = types.StringNull()
				}
				r.InputGrafana.Two.PrometheusAuth.CredentialsSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.CredentialsSecret)
				r.InputGrafana.Two.PrometheusAuth.LoginURL = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.LoginURL)
				r.InputGrafana.Two.PrometheusAuth.OauthHeaders = []tfTypes.InputGrafana2OauthHeaders{}
				if len(r.InputGrafana.Two.PrometheusAuth.OauthHeaders) > len(resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthHeaders) {
					r.InputGrafana.Two.PrometheusAuth.OauthHeaders = r.InputGrafana.Two.PrometheusAuth.OauthHeaders[:len(resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthHeaders)]
				}
				for oauthHeadersCount3, oauthHeadersItem3 := range resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthHeaders {
					var oauthHeaders7 tfTypes.InputGrafana2OauthHeaders
					oauthHeaders7.Name = types.StringValue(oauthHeadersItem3.Name)
					oauthHeaders7.Value = types.StringValue(oauthHeadersItem3.Value)
					if oauthHeadersCount3+1 > len(r.InputGrafana.Two.PrometheusAuth.OauthHeaders) {
						r.InputGrafana.Two.PrometheusAuth.OauthHeaders = append(r.InputGrafana.Two.PrometheusAuth.OauthHeaders, oauthHeaders7)
					} else {
						r.InputGrafana.Two.PrometheusAuth.OauthHeaders[oauthHeadersCount3].Name = oauthHeaders7.Name
						r.InputGrafana.Two.PrometheusAuth.OauthHeaders[oauthHeadersCount3].Value = oauthHeaders7.Value
					}
				}
				r.InputGrafana.Two.PrometheusAuth.OauthParams = []tfTypes.InputGrafana2OauthParams{}
				if len(r.InputGrafana.Two.PrometheusAuth.OauthParams) > len(resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthParams) {
					r.InputGrafana.Two.PrometheusAuth.OauthParams = r.InputGrafana.Two.PrometheusAuth.OauthParams[:len(resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthParams)]
				}
				for oauthParamsCount3, oauthParamsItem3 := range resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthParams {
					var oauthParams7 tfTypes.InputGrafana2OauthParams
					oauthParams7.Name = types.StringValue(oauthParamsItem3.Name)
					oauthParams7.Value = types.StringValue(oauthParamsItem3.Value)
					if oauthParamsCount3+1 > len(r.InputGrafana.Two.PrometheusAuth.OauthParams) {
						r.InputGrafana.Two.PrometheusAuth.OauthParams = append(r.InputGrafana.Two.PrometheusAuth.OauthParams, oauthParams7)
					} else {
						r.InputGrafana.Two.PrometheusAuth.OauthParams[oauthParamsCount3].Name = oauthParams7.Name
						r.InputGrafana.Two.PrometheusAuth.OauthParams[oauthParamsCount3].Value = oauthParams7.Value
					}
				}
				r.InputGrafana.Two.PrometheusAuth.Password = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.Password)
				r.InputGrafana.Two.PrometheusAuth.Secret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.Secret)
				r.InputGrafana.Two.PrometheusAuth.SecretParamName = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.SecretParamName)
				r.InputGrafana.Two.PrometheusAuth.TextSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.TextSecret)
				r.InputGrafana.Two.PrometheusAuth.Token = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.Token)
				r.InputGrafana.Two.PrometheusAuth.TokenAttributeName = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.TokenAttributeName)
				if resp.InputGrafana.InputGrafana2.PrometheusAuth.TokenTimeoutSecs != nil {
					r.InputGrafana.Two.PrometheusAuth.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana2.PrometheusAuth.TokenTimeoutSecs)))
				} else {
					r.InputGrafana.Two.PrometheusAuth.TokenTimeoutSecs = types.NumberNull()
				}
				r.InputGrafana.Two.PrometheusAuth.Username = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.Username)
			}
			if resp.InputGrafana.InputGrafana2.RequestTimeout != nil {
				r.InputGrafana.Two.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana2.RequestTimeout)))
			} else {
				r.InputGrafana.Two.RequestTimeout = types.NumberNull()
			}
			r.InputGrafana.Two.SendToRoutes = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.SendToRoutes)
			if resp.InputGrafana.InputGrafana2.SocketTimeout != nil {
				r.InputGrafana.Two.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputGrafana.InputGrafana2.SocketTimeout)))
			} else {
				r.InputGrafana.Two.SocketTimeout = types.NumberNull()
			}
			r.InputGrafana.Two.Streamtags = make([]types.String, 0, len(resp.InputGrafana.InputGrafana2.Streamtags))
			for _, v := range resp.InputGrafana.InputGrafana2.Streamtags {
				r.InputGrafana.Two.Streamtags = append(r.InputGrafana.Two.Streamtags, types.StringValue(v))
			}
			if resp.InputGrafana.InputGrafana2.TLS == nil {
				r.InputGrafana.Two.TLS = nil
			} else {
				r.InputGrafana.Two.TLS = &tfTypes.InputGrafana2TLSSettingsServerSide{}
				r.InputGrafana.Two.TLS.CaPath = types.StringPointerValue(resp.InputGrafana.InputGrafana2.TLS.CaPath)
				r.InputGrafana.Two.TLS.CertificateName = types.StringPointerValue(resp.InputGrafana.InputGrafana2.TLS.CertificateName)
				r.InputGrafana.Two.TLS.CertPath = types.StringPointerValue(resp.InputGrafana.InputGrafana2.TLS.CertPath)
				if resp.InputGrafana.InputGrafana2.TLS.CommonNameRegex == nil {
					r.InputGrafana.Two.TLS.CommonNameRegex = types.StringNull()
				} else {
					commonNameRegexResult9, _ := json.Marshal(resp.InputGrafana.InputGrafana2.TLS.CommonNameRegex)
					r.InputGrafana.Two.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult9))
				}
				r.InputGrafana.Two.TLS.Disabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.TLS.Disabled)
				if resp.InputGrafana.InputGrafana2.TLS.MaxVersion != nil {
					r.InputGrafana.Two.TLS.MaxVersion = types.StringValue(string(*resp.InputGrafana.InputGrafana2.TLS.MaxVersion))
				} else {
					r.InputGrafana.Two.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputGrafana.InputGrafana2.TLS.MinVersion != nil {
					r.InputGrafana.Two.TLS.MinVersion = types.StringValue(string(*resp.InputGrafana.InputGrafana2.TLS.MinVersion))
				} else {
					r.InputGrafana.Two.TLS.MinVersion = types.StringNull()
				}
				r.InputGrafana.Two.TLS.Passphrase = types.StringPointerValue(resp.InputGrafana.InputGrafana2.TLS.Passphrase)
				r.InputGrafana.Two.TLS.PrivKeyPath = types.StringPointerValue(resp.InputGrafana.InputGrafana2.TLS.PrivKeyPath)
				if resp.InputGrafana.InputGrafana2.TLS.RejectUnauthorized == nil {
					r.InputGrafana.Two.TLS.RejectUnauthorized = types.StringNull()
				} else {
					rejectUnauthorizedResult9, _ := json.Marshal(resp.InputGrafana.InputGrafana2.TLS.RejectUnauthorized)
					r.InputGrafana.Two.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult9))
				}
				r.InputGrafana.Two.TLS.RequestCert = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.TLS.RequestCert)
			}
			if resp.InputGrafana.InputGrafana2.Type != nil {
				r.InputGrafana.Two.Type = types.StringValue(string(*resp.InputGrafana.InputGrafana2.Type))
			} else {
				r.InputGrafana.Two.Type = types.StringNull()
			}
		}
	}
	if resp.InputHTTP != nil {
		r.InputHTTP = &tfTypes.InputHTTP{}
		if resp.InputHTTP.ActivityLogSampleRate != nil {
			r.InputHTTP.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputHTTP.ActivityLogSampleRate)))
		} else {
			r.InputHTTP.ActivityLogSampleRate = types.NumberNull()
		}
		r.InputHTTP.AuthTokens = make([]types.String, 0, len(resp.InputHTTP.AuthTokens))
		for _, v := range resp.InputHTTP.AuthTokens {
			r.InputHTTP.AuthTokens = append(r.InputHTTP.AuthTokens, types.StringValue(v))
		}
		r.InputHTTP.AuthTokensExt = []tfTypes.AuthTokensExt{}
		if len(r.InputHTTP.AuthTokensExt) > len(resp.InputHTTP.AuthTokensExt) {
			r.InputHTTP.AuthTokensExt = r.InputHTTP.AuthTokensExt[:len(resp.InputHTTP.AuthTokensExt)]
		}
		for authTokensExtCount, authTokensExtItem := range resp.InputHTTP.AuthTokensExt {
			var authTokensExt1 tfTypes.AuthTokensExt
			authTokensExt1.Description = types.StringPointerValue(authTokensExtItem.Description)
			authTokensExt1.Metadata = []tfTypes.InputHTTPAuthTokensExtMetadata{}
			for metadataCount31, metadataItem31 := range authTokensExtItem.Metadata {
				var metadata63 tfTypes.InputHTTPAuthTokensExtMetadata
				metadata63.Name = types.StringValue(metadataItem31.Name)
				metadata63.Value = types.StringValue(metadataItem31.Value)
				if metadataCount31+1 > len(authTokensExt1.Metadata) {
					authTokensExt1.Metadata = append(authTokensExt1.Metadata, metadata63)
				} else {
					authTokensExt1.Metadata[metadataCount31].Name = metadata63.Name
					authTokensExt1.Metadata[metadataCount31].Value = metadata63.Value
				}
			}
			authTokensExt1.Token = types.StringValue(authTokensExtItem.Token)
			if authTokensExtCount+1 > len(r.InputHTTP.AuthTokensExt) {
				r.InputHTTP.AuthTokensExt = append(r.InputHTTP.AuthTokensExt, authTokensExt1)
			} else {
				r.InputHTTP.AuthTokensExt[authTokensExtCount].Description = authTokensExt1.Description
				r.InputHTTP.AuthTokensExt[authTokensExtCount].Metadata = authTokensExt1.Metadata
				r.InputHTTP.AuthTokensExt[authTokensExtCount].Token = authTokensExt1.Token
			}
		}
		r.InputHTTP.CaptureHeaders = types.BoolPointerValue(resp.InputHTTP.CaptureHeaders)
		r.InputHTTP.Connections = []tfTypes.InputHTTPConnections{}
		if len(r.InputHTTP.Connections) > len(resp.InputHTTP.Connections) {
			r.InputHTTP.Connections = r.InputHTTP.Connections[:len(resp.InputHTTP.Connections)]
		}
		for connectionsCount29, connectionsItem29 := range resp.InputHTTP.Connections {
			var connections59 tfTypes.InputHTTPConnections
			connections59.Output = types.StringValue(connectionsItem29.Output)
			connections59.Pipeline = types.StringPointerValue(connectionsItem29.Pipeline)
			if connectionsCount29+1 > len(r.InputHTTP.Connections) {
				r.InputHTTP.Connections = append(r.InputHTTP.Connections, connections59)
			} else {
				r.InputHTTP.Connections[connectionsCount29].Output = connections59.Output
				r.InputHTTP.Connections[connectionsCount29].Pipeline = connections59.Pipeline
			}
		}
		r.InputHTTP.CriblAPI = types.StringPointerValue(resp.InputHTTP.CriblAPI)
		r.InputHTTP.Description = types.StringPointerValue(resp.InputHTTP.Description)
		r.InputHTTP.Disabled = types.BoolPointerValue(resp.InputHTTP.Disabled)
		r.InputHTTP.ElasticAPI = types.StringPointerValue(resp.InputHTTP.ElasticAPI)
		r.InputHTTP.EnableHealthCheck = types.BoolPointerValue(resp.InputHTTP.EnableHealthCheck)
		r.InputHTTP.EnableProxyHeader = types.BoolPointerValue(resp.InputHTTP.EnableProxyHeader)
		r.InputHTTP.Environment = types.StringPointerValue(resp.InputHTTP.Environment)
		r.InputHTTP.Host = types.StringPointerValue(resp.InputHTTP.Host)
		r.InputHTTP.ID = types.StringPointerValue(resp.InputHTTP.ID)
		r.InputHTTP.IPAllowlistRegex = types.StringPointerValue(resp.InputHTTP.IPAllowlistRegex)
		r.InputHTTP.IPDenylistRegex = types.StringPointerValue(resp.InputHTTP.IPDenylistRegex)
		if resp.InputHTTP.KeepAliveTimeout != nil {
			r.InputHTTP.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputHTTP.KeepAliveTimeout)))
		} else {
			r.InputHTTP.KeepAliveTimeout = types.NumberNull()
		}
		if resp.InputHTTP.MaxActiveReq != nil {
			r.InputHTTP.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputHTTP.MaxActiveReq)))
		} else {
			r.InputHTTP.MaxActiveReq = types.NumberNull()
		}
		r.InputHTTP.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputHTTP.MaxRequestsPerSocket)
		r.InputHTTP.Metadata = []tfTypes.InputHTTPMetadata{}
		if len(r.InputHTTP.Metadata) > len(resp.InputHTTP.Metadata) {
			r.InputHTTP.Metadata = r.InputHTTP.Metadata[:len(resp.InputHTTP.Metadata)]
		}
		for metadataCount32, metadataItem32 := range resp.InputHTTP.Metadata {
			var metadata65 tfTypes.InputHTTPMetadata
			metadata65.Name = types.StringValue(metadataItem32.Name)
			metadata65.Value = types.StringValue(metadataItem32.Value)
			if metadataCount32+1 > len(r.InputHTTP.Metadata) {
				r.InputHTTP.Metadata = append(r.InputHTTP.Metadata, metadata65)
			} else {
				r.InputHTTP.Metadata[metadataCount32].Name = metadata65.Name
				r.InputHTTP.Metadata[metadataCount32].Value = metadata65.Value
			}
		}
		r.InputHTTP.Pipeline = types.StringPointerValue(resp.InputHTTP.Pipeline)
		r.InputHTTP.Port = types.NumberValue(big.NewFloat(float64(resp.InputHTTP.Port)))
		if resp.InputHTTP.Pq == nil {
			r.InputHTTP.Pq = nil
		} else {
			r.InputHTTP.Pq = &tfTypes.InputHTTPPq{}
			if resp.InputHTTP.Pq.CommitFrequency != nil {
				r.InputHTTP.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputHTTP.Pq.CommitFrequency)))
			} else {
				r.InputHTTP.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputHTTP.Pq.Compress != nil {
				r.InputHTTP.Pq.Compress = types.StringValue(string(*resp.InputHTTP.Pq.Compress))
			} else {
				r.InputHTTP.Pq.Compress = types.StringNull()
			}
			if resp.InputHTTP.Pq.MaxBufferSize != nil {
				r.InputHTTP.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputHTTP.Pq.MaxBufferSize)))
			} else {
				r.InputHTTP.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputHTTP.Pq.MaxFileSize = types.StringPointerValue(resp.InputHTTP.Pq.MaxFileSize)
			r.InputHTTP.Pq.MaxSize = types.StringPointerValue(resp.InputHTTP.Pq.MaxSize)
			if resp.InputHTTP.Pq.Mode != nil {
				r.InputHTTP.Pq.Mode = types.StringValue(string(*resp.InputHTTP.Pq.Mode))
			} else {
				r.InputHTTP.Pq.Mode = types.StringNull()
			}
			r.InputHTTP.Pq.Path = types.StringPointerValue(resp.InputHTTP.Pq.Path)
		}
		r.InputHTTP.PqEnabled = types.BoolPointerValue(resp.InputHTTP.PqEnabled)
		if resp.InputHTTP.RequestTimeout != nil {
			r.InputHTTP.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputHTTP.RequestTimeout)))
		} else {
			r.InputHTTP.RequestTimeout = types.NumberNull()
		}
		r.InputHTTP.SendToRoutes = types.BoolPointerValue(resp.InputHTTP.SendToRoutes)
		if resp.InputHTTP.SocketTimeout != nil {
			r.InputHTTP.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputHTTP.SocketTimeout)))
		} else {
			r.InputHTTP.SocketTimeout = types.NumberNull()
		}
		r.InputHTTP.SplunkHecAcks = types.BoolPointerValue(resp.InputHTTP.SplunkHecAcks)
		r.InputHTTP.SplunkHecAPI = types.StringPointerValue(resp.InputHTTP.SplunkHecAPI)
		r.InputHTTP.Streamtags = make([]types.String, 0, len(resp.InputHTTP.Streamtags))
		for _, v := range resp.InputHTTP.Streamtags {
			r.InputHTTP.Streamtags = append(r.InputHTTP.Streamtags, types.StringValue(v))
		}
		if resp.InputHTTP.TLS == nil {
			r.InputHTTP.TLS = nil
		} else {
			r.InputHTTP.TLS = &tfTypes.TLSSettingsServerSide{}
			r.InputHTTP.TLS.CaPath = types.StringPointerValue(resp.InputHTTP.TLS.CaPath)
			r.InputHTTP.TLS.CertificateName = types.StringPointerValue(resp.InputHTTP.TLS.CertificateName)
			r.InputHTTP.TLS.CertPath = types.StringPointerValue(resp.InputHTTP.TLS.CertPath)
			if resp.InputHTTP.TLS.CommonNameRegex == nil {
				r.InputHTTP.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult10, _ := json.Marshal(resp.InputHTTP.TLS.CommonNameRegex)
				r.InputHTTP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult10))
			}
			r.InputHTTP.TLS.Disabled = types.BoolPointerValue(resp.InputHTTP.TLS.Disabled)
			if resp.InputHTTP.TLS.MaxVersion != nil {
				r.InputHTTP.TLS.MaxVersion = types.StringValue(string(*resp.InputHTTP.TLS.MaxVersion))
			} else {
				r.InputHTTP.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputHTTP.TLS.MinVersion != nil {
				r.InputHTTP.TLS.MinVersion = types.StringValue(string(*resp.InputHTTP.TLS.MinVersion))
			} else {
				r.InputHTTP.TLS.MinVersion = types.StringNull()
			}
			r.InputHTTP.TLS.Passphrase = types.StringPointerValue(resp.InputHTTP.TLS.Passphrase)
			r.InputHTTP.TLS.PrivKeyPath = types.StringPointerValue(resp.InputHTTP.TLS.PrivKeyPath)
			if resp.InputHTTP.TLS.RejectUnauthorized == nil {
				r.InputHTTP.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult10, _ := json.Marshal(resp.InputHTTP.TLS.RejectUnauthorized)
				r.InputHTTP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult10))
			}
			r.InputHTTP.TLS.RequestCert = types.BoolPointerValue(resp.InputHTTP.TLS.RequestCert)
		}
		if resp.InputHTTP.Type != nil {
			r.InputHTTP.Type = types.StringValue(string(*resp.InputHTTP.Type))
		} else {
			r.InputHTTP.Type = types.StringNull()
		}
	}
	if resp.InputHTTPRaw != nil {
		r.InputHTTPRaw = &tfTypes.InputHTTPRaw{}
		if resp.InputHTTPRaw.ActivityLogSampleRate != nil {
			r.InputHTTPRaw.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputHTTPRaw.ActivityLogSampleRate)))
		} else {
			r.InputHTTPRaw.ActivityLogSampleRate = types.NumberNull()
		}
		r.InputHTTPRaw.AllowedMethods = make([]types.String, 0, len(resp.InputHTTPRaw.AllowedMethods))
		for _, v := range resp.InputHTTPRaw.AllowedMethods {
			r.InputHTTPRaw.AllowedMethods = append(r.InputHTTPRaw.AllowedMethods, types.StringValue(v))
		}
		r.InputHTTPRaw.AllowedPaths = make([]types.String, 0, len(resp.InputHTTPRaw.AllowedPaths))
		for _, v := range resp.InputHTTPRaw.AllowedPaths {
			r.InputHTTPRaw.AllowedPaths = append(r.InputHTTPRaw.AllowedPaths, types.StringValue(v))
		}
		r.InputHTTPRaw.AuthTokens = make([]types.String, 0, len(resp.InputHTTPRaw.AuthTokens))
		for _, v := range resp.InputHTTPRaw.AuthTokens {
			r.InputHTTPRaw.AuthTokens = append(r.InputHTTPRaw.AuthTokens, types.StringValue(v))
		}
		r.InputHTTPRaw.AuthTokensExt = []tfTypes.InputHTTPRawAuthTokensExt{}
		if len(r.InputHTTPRaw.AuthTokensExt) > len(resp.InputHTTPRaw.AuthTokensExt) {
			r.InputHTTPRaw.AuthTokensExt = r.InputHTTPRaw.AuthTokensExt[:len(resp.InputHTTPRaw.AuthTokensExt)]
		}
		for authTokensExtCount1, authTokensExtItem1 := range resp.InputHTTPRaw.AuthTokensExt {
			var authTokensExt3 tfTypes.InputHTTPRawAuthTokensExt
			authTokensExt3.Description = types.StringPointerValue(authTokensExtItem1.Description)
			authTokensExt3.Metadata = []tfTypes.InputHTTPRawAuthTokensExtMetadata{}
			for metadataCount33, metadataItem33 := range authTokensExtItem1.Metadata {
				var metadata67 tfTypes.InputHTTPRawAuthTokensExtMetadata
				metadata67.Name = types.StringValue(metadataItem33.Name)
				metadata67.Value = types.StringValue(metadataItem33.Value)
				if metadataCount33+1 > len(authTokensExt3.Metadata) {
					authTokensExt3.Metadata = append(authTokensExt3.Metadata, metadata67)
				} else {
					authTokensExt3.Metadata[metadataCount33].Name = metadata67.Name
					authTokensExt3.Metadata[metadataCount33].Value = metadata67.Value
				}
			}
			authTokensExt3.Token = types.StringValue(authTokensExtItem1.Token)
			if authTokensExtCount1+1 > len(r.InputHTTPRaw.AuthTokensExt) {
				r.InputHTTPRaw.AuthTokensExt = append(r.InputHTTPRaw.AuthTokensExt, authTokensExt3)
			} else {
				r.InputHTTPRaw.AuthTokensExt[authTokensExtCount1].Description = authTokensExt3.Description
				r.InputHTTPRaw.AuthTokensExt[authTokensExtCount1].Metadata = authTokensExt3.Metadata
				r.InputHTTPRaw.AuthTokensExt[authTokensExtCount1].Token = authTokensExt3.Token
			}
		}
		r.InputHTTPRaw.BreakerRulesets = make([]types.String, 0, len(resp.InputHTTPRaw.BreakerRulesets))
		for _, v := range resp.InputHTTPRaw.BreakerRulesets {
			r.InputHTTPRaw.BreakerRulesets = append(r.InputHTTPRaw.BreakerRulesets, types.StringValue(v))
		}
		r.InputHTTPRaw.CaptureHeaders = types.BoolPointerValue(resp.InputHTTPRaw.CaptureHeaders)
		r.InputHTTPRaw.Connections = []tfTypes.InputHTTPRawConnections{}
		if len(r.InputHTTPRaw.Connections) > len(resp.InputHTTPRaw.Connections) {
			r.InputHTTPRaw.Connections = r.InputHTTPRaw.Connections[:len(resp.InputHTTPRaw.Connections)]
		}
		for connectionsCount30, connectionsItem30 := range resp.InputHTTPRaw.Connections {
			var connections61 tfTypes.InputHTTPRawConnections
			connections61.Output = types.StringValue(connectionsItem30.Output)
			connections61.Pipeline = types.StringPointerValue(connectionsItem30.Pipeline)
			if connectionsCount30+1 > len(r.InputHTTPRaw.Connections) {
				r.InputHTTPRaw.Connections = append(r.InputHTTPRaw.Connections, connections61)
			} else {
				r.InputHTTPRaw.Connections[connectionsCount30].Output = connections61.Output
				r.InputHTTPRaw.Connections[connectionsCount30].Pipeline = connections61.Pipeline
			}
		}
		r.InputHTTPRaw.Description = types.StringPointerValue(resp.InputHTTPRaw.Description)
		r.InputHTTPRaw.Disabled = types.BoolPointerValue(resp.InputHTTPRaw.Disabled)
		r.InputHTTPRaw.EnableHealthCheck = types.BoolPointerValue(resp.InputHTTPRaw.EnableHealthCheck)
		r.InputHTTPRaw.EnableProxyHeader = types.BoolPointerValue(resp.InputHTTPRaw.EnableProxyHeader)
		r.InputHTTPRaw.Environment = types.StringPointerValue(resp.InputHTTPRaw.Environment)
		r.InputHTTPRaw.Host = types.StringPointerValue(resp.InputHTTPRaw.Host)
		r.InputHTTPRaw.ID = types.StringPointerValue(resp.InputHTTPRaw.ID)
		r.InputHTTPRaw.IPAllowlistRegex = types.StringPointerValue(resp.InputHTTPRaw.IPAllowlistRegex)
		r.InputHTTPRaw.IPDenylistRegex = types.StringPointerValue(resp.InputHTTPRaw.IPDenylistRegex)
		if resp.InputHTTPRaw.KeepAliveTimeout != nil {
			r.InputHTTPRaw.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputHTTPRaw.KeepAliveTimeout)))
		} else {
			r.InputHTTPRaw.KeepAliveTimeout = types.NumberNull()
		}
		if resp.InputHTTPRaw.MaxActiveReq != nil {
			r.InputHTTPRaw.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputHTTPRaw.MaxActiveReq)))
		} else {
			r.InputHTTPRaw.MaxActiveReq = types.NumberNull()
		}
		r.InputHTTPRaw.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputHTTPRaw.MaxRequestsPerSocket)
		r.InputHTTPRaw.Metadata = []tfTypes.InputHTTPRawMetadata{}
		if len(r.InputHTTPRaw.Metadata) > len(resp.InputHTTPRaw.Metadata) {
			r.InputHTTPRaw.Metadata = r.InputHTTPRaw.Metadata[:len(resp.InputHTTPRaw.Metadata)]
		}
		for metadataCount34, metadataItem34 := range resp.InputHTTPRaw.Metadata {
			var metadata69 tfTypes.InputHTTPRawMetadata
			metadata69.Name = types.StringValue(metadataItem34.Name)
			metadata69.Value = types.StringValue(metadataItem34.Value)
			if metadataCount34+1 > len(r.InputHTTPRaw.Metadata) {
				r.InputHTTPRaw.Metadata = append(r.InputHTTPRaw.Metadata, metadata69)
			} else {
				r.InputHTTPRaw.Metadata[metadataCount34].Name = metadata69.Name
				r.InputHTTPRaw.Metadata[metadataCount34].Value = metadata69.Value
			}
		}
		r.InputHTTPRaw.Pipeline = types.StringPointerValue(resp.InputHTTPRaw.Pipeline)
		r.InputHTTPRaw.Port = types.NumberValue(big.NewFloat(float64(resp.InputHTTPRaw.Port)))
		if resp.InputHTTPRaw.Pq == nil {
			r.InputHTTPRaw.Pq = nil
		} else {
			r.InputHTTPRaw.Pq = &tfTypes.InputHTTPRawPq{}
			if resp.InputHTTPRaw.Pq.CommitFrequency != nil {
				r.InputHTTPRaw.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputHTTPRaw.Pq.CommitFrequency)))
			} else {
				r.InputHTTPRaw.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputHTTPRaw.Pq.Compress != nil {
				r.InputHTTPRaw.Pq.Compress = types.StringValue(string(*resp.InputHTTPRaw.Pq.Compress))
			} else {
				r.InputHTTPRaw.Pq.Compress = types.StringNull()
			}
			if resp.InputHTTPRaw.Pq.MaxBufferSize != nil {
				r.InputHTTPRaw.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputHTTPRaw.Pq.MaxBufferSize)))
			} else {
				r.InputHTTPRaw.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputHTTPRaw.Pq.MaxFileSize = types.StringPointerValue(resp.InputHTTPRaw.Pq.MaxFileSize)
			r.InputHTTPRaw.Pq.MaxSize = types.StringPointerValue(resp.InputHTTPRaw.Pq.MaxSize)
			if resp.InputHTTPRaw.Pq.Mode != nil {
				r.InputHTTPRaw.Pq.Mode = types.StringValue(string(*resp.InputHTTPRaw.Pq.Mode))
			} else {
				r.InputHTTPRaw.Pq.Mode = types.StringNull()
			}
			r.InputHTTPRaw.Pq.Path = types.StringPointerValue(resp.InputHTTPRaw.Pq.Path)
		}
		r.InputHTTPRaw.PqEnabled = types.BoolPointerValue(resp.InputHTTPRaw.PqEnabled)
		if resp.InputHTTPRaw.RequestTimeout != nil {
			r.InputHTTPRaw.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputHTTPRaw.RequestTimeout)))
		} else {
			r.InputHTTPRaw.RequestTimeout = types.NumberNull()
		}
		r.InputHTTPRaw.SendToRoutes = types.BoolPointerValue(resp.InputHTTPRaw.SendToRoutes)
		if resp.InputHTTPRaw.SocketTimeout != nil {
			r.InputHTTPRaw.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputHTTPRaw.SocketTimeout)))
		} else {
			r.InputHTTPRaw.SocketTimeout = types.NumberNull()
		}
		if resp.InputHTTPRaw.StaleChannelFlushMs != nil {
			r.InputHTTPRaw.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputHTTPRaw.StaleChannelFlushMs)))
		} else {
			r.InputHTTPRaw.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputHTTPRaw.Streamtags = make([]types.String, 0, len(resp.InputHTTPRaw.Streamtags))
		for _, v := range resp.InputHTTPRaw.Streamtags {
			r.InputHTTPRaw.Streamtags = append(r.InputHTTPRaw.Streamtags, types.StringValue(v))
		}
		if resp.InputHTTPRaw.TLS == nil {
			r.InputHTTPRaw.TLS = nil
		} else {
			r.InputHTTPRaw.TLS = &tfTypes.InputHTTPRawTLSSettingsServerSide{}
			r.InputHTTPRaw.TLS.CaPath = types.StringPointerValue(resp.InputHTTPRaw.TLS.CaPath)
			r.InputHTTPRaw.TLS.CertificateName = types.StringPointerValue(resp.InputHTTPRaw.TLS.CertificateName)
			r.InputHTTPRaw.TLS.CertPath = types.StringPointerValue(resp.InputHTTPRaw.TLS.CertPath)
			if resp.InputHTTPRaw.TLS.CommonNameRegex == nil {
				r.InputHTTPRaw.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult11, _ := json.Marshal(resp.InputHTTPRaw.TLS.CommonNameRegex)
				r.InputHTTPRaw.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult11))
			}
			r.InputHTTPRaw.TLS.Disabled = types.BoolPointerValue(resp.InputHTTPRaw.TLS.Disabled)
			if resp.InputHTTPRaw.TLS.MaxVersion != nil {
				r.InputHTTPRaw.TLS.MaxVersion = types.StringValue(string(*resp.InputHTTPRaw.TLS.MaxVersion))
			} else {
				r.InputHTTPRaw.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputHTTPRaw.TLS.MinVersion != nil {
				r.InputHTTPRaw.TLS.MinVersion = types.StringValue(string(*resp.InputHTTPRaw.TLS.MinVersion))
			} else {
				r.InputHTTPRaw.TLS.MinVersion = types.StringNull()
			}
			r.InputHTTPRaw.TLS.Passphrase = types.StringPointerValue(resp.InputHTTPRaw.TLS.Passphrase)
			r.InputHTTPRaw.TLS.PrivKeyPath = types.StringPointerValue(resp.InputHTTPRaw.TLS.PrivKeyPath)
			if resp.InputHTTPRaw.TLS.RejectUnauthorized == nil {
				r.InputHTTPRaw.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult11, _ := json.Marshal(resp.InputHTTPRaw.TLS.RejectUnauthorized)
				r.InputHTTPRaw.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult11))
			}
			r.InputHTTPRaw.TLS.RequestCert = types.BoolPointerValue(resp.InputHTTPRaw.TLS.RequestCert)
		}
		if resp.InputHTTPRaw.Type != nil {
			r.InputHTTPRaw.Type = types.StringValue(string(*resp.InputHTTPRaw.Type))
		} else {
			r.InputHTTPRaw.Type = types.StringNull()
		}
	}
	if resp.InputKafka != nil {
		r.InputKafka = &tfTypes.InputKafka{}
		if resp.InputKafka.AuthenticationTimeout != nil {
			r.InputKafka.AuthenticationTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.AuthenticationTimeout)))
		} else {
			r.InputKafka.AuthenticationTimeout = types.NumberNull()
		}
		if resp.InputKafka.AutoCommitInterval != nil {
			r.InputKafka.AutoCommitInterval = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.AutoCommitInterval)))
		} else {
			r.InputKafka.AutoCommitInterval = types.NumberNull()
		}
		if resp.InputKafka.AutoCommitThreshold != nil {
			r.InputKafka.AutoCommitThreshold = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.AutoCommitThreshold)))
		} else {
			r.InputKafka.AutoCommitThreshold = types.NumberNull()
		}
		if resp.InputKafka.BackoffRate != nil {
			r.InputKafka.BackoffRate = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.BackoffRate)))
		} else {
			r.InputKafka.BackoffRate = types.NumberNull()
		}
		r.InputKafka.Brokers = make([]types.String, 0, len(resp.InputKafka.Brokers))
		for _, v := range resp.InputKafka.Brokers {
			r.InputKafka.Brokers = append(r.InputKafka.Brokers, types.StringValue(v))
		}
		r.InputKafka.Connections = []tfTypes.InputKafkaConnections{}
		if len(r.InputKafka.Connections) > len(resp.InputKafka.Connections) {
			r.InputKafka.Connections = r.InputKafka.Connections[:len(resp.InputKafka.Connections)]
		}
		for connectionsCount31, connectionsItem31 := range resp.InputKafka.Connections {
			var connections63 tfTypes.InputKafkaConnections
			connections63.Output = types.StringValue(connectionsItem31.Output)
			connections63.Pipeline = types.StringPointerValue(connectionsItem31.Pipeline)
			if connectionsCount31+1 > len(r.InputKafka.Connections) {
				r.InputKafka.Connections = append(r.InputKafka.Connections, connections63)
			} else {
				r.InputKafka.Connections[connectionsCount31].Output = connections63.Output
				r.InputKafka.Connections[connectionsCount31].Pipeline = connections63.Pipeline
			}
		}
		if resp.InputKafka.ConnectionTimeout != nil {
			r.InputKafka.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.ConnectionTimeout)))
		} else {
			r.InputKafka.ConnectionTimeout = types.NumberNull()
		}
		r.InputKafka.Description = types.StringPointerValue(resp.InputKafka.Description)
		r.InputKafka.Disabled = types.BoolPointerValue(resp.InputKafka.Disabled)
		r.InputKafka.Environment = types.StringPointerValue(resp.InputKafka.Environment)
		r.InputKafka.FromBeginning = types.BoolPointerValue(resp.InputKafka.FromBeginning)
		r.InputKafka.GroupID = types.StringPointerValue(resp.InputKafka.GroupID)
		if resp.InputKafka.HeartbeatInterval != nil {
			r.InputKafka.HeartbeatInterval = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.HeartbeatInterval)))
		} else {
			r.InputKafka.HeartbeatInterval = types.NumberNull()
		}
		r.InputKafka.ID = types.StringPointerValue(resp.InputKafka.ID)
		if resp.InputKafka.InitialBackoff != nil {
			r.InputKafka.InitialBackoff = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.InitialBackoff)))
		} else {
			r.InputKafka.InitialBackoff = types.NumberNull()
		}
		if resp.InputKafka.KafkaSchemaRegistry == nil {
			r.InputKafka.KafkaSchemaRegistry = nil
		} else {
			r.InputKafka.KafkaSchemaRegistry = &tfTypes.KafkaSchemaRegistryAuthentication{}
			if resp.InputKafka.KafkaSchemaRegistry.Auth == nil {
				r.InputKafka.KafkaSchemaRegistry.Auth = nil
			} else {
				r.InputKafka.KafkaSchemaRegistry.Auth = &tfTypes.InputKafkaAuth{}
				r.InputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.InputKafka.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.InputKafka.KafkaSchemaRegistry.Auth.Disabled)
			}
			if resp.InputKafka.KafkaSchemaRegistry.ConnectionTimeout != nil {
				r.InputKafka.KafkaSchemaRegistry.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.KafkaSchemaRegistry.ConnectionTimeout)))
			} else {
				r.InputKafka.KafkaSchemaRegistry.ConnectionTimeout = types.NumberNull()
			}
			r.InputKafka.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.InputKafka.KafkaSchemaRegistry.Disabled)
			if resp.InputKafka.KafkaSchemaRegistry.MaxRetries != nil {
				r.InputKafka.KafkaSchemaRegistry.MaxRetries = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.KafkaSchemaRegistry.MaxRetries)))
			} else {
				r.InputKafka.KafkaSchemaRegistry.MaxRetries = types.NumberNull()
			}
			if resp.InputKafka.KafkaSchemaRegistry.RequestTimeout != nil {
				r.InputKafka.KafkaSchemaRegistry.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.KafkaSchemaRegistry.RequestTimeout)))
			} else {
				r.InputKafka.KafkaSchemaRegistry.RequestTimeout = types.NumberNull()
			}
			r.InputKafka.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.InputKafka.KafkaSchemaRegistry.TLS == nil {
				r.InputKafka.KafkaSchemaRegistry.TLS = nil
			} else {
				r.InputKafka.KafkaSchemaRegistry.TLS = &tfTypes.InputKafkaTLSSettingsClientSide{}
				r.InputKafka.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.CaPath)
				r.InputKafka.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.CertificateName)
				r.InputKafka.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.CertPath)
				r.InputKafka.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.Disabled)
				if resp.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputKafka.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.InputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.InputKafka.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.InputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.InputKafka.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.Passphrase)
				r.InputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.InputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.InputKafka.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		if resp.InputKafka.MaxBackOff != nil {
			r.InputKafka.MaxBackOff = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.MaxBackOff)))
		} else {
			r.InputKafka.MaxBackOff = types.NumberNull()
		}
		if resp.InputKafka.MaxBytes != nil {
			r.InputKafka.MaxBytes = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.MaxBytes)))
		} else {
			r.InputKafka.MaxBytes = types.NumberNull()
		}
		if resp.InputKafka.MaxBytesPerPartition != nil {
			r.InputKafka.MaxBytesPerPartition = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.MaxBytesPerPartition)))
		} else {
			r.InputKafka.MaxBytesPerPartition = types.NumberNull()
		}
		if resp.InputKafka.MaxRetries != nil {
			r.InputKafka.MaxRetries = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.MaxRetries)))
		} else {
			r.InputKafka.MaxRetries = types.NumberNull()
		}
		if resp.InputKafka.MaxSocketErrors != nil {
			r.InputKafka.MaxSocketErrors = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.MaxSocketErrors)))
		} else {
			r.InputKafka.MaxSocketErrors = types.NumberNull()
		}
		r.InputKafka.Metadata = []tfTypes.InputKafkaMetadata{}
		if len(r.InputKafka.Metadata) > len(resp.InputKafka.Metadata) {
			r.InputKafka.Metadata = r.InputKafka.Metadata[:len(resp.InputKafka.Metadata)]
		}
		for metadataCount35, metadataItem35 := range resp.InputKafka.Metadata {
			var metadata71 tfTypes.InputKafkaMetadata
			metadata71.Name = types.StringValue(metadataItem35.Name)
			metadata71.Value = types.StringValue(metadataItem35.Value)
			if metadataCount35+1 > len(r.InputKafka.Metadata) {
				r.InputKafka.Metadata = append(r.InputKafka.Metadata, metadata71)
			} else {
				r.InputKafka.Metadata[metadataCount35].Name = metadata71.Name
				r.InputKafka.Metadata[metadataCount35].Value = metadata71.Value
			}
		}
		r.InputKafka.Pipeline = types.StringPointerValue(resp.InputKafka.Pipeline)
		if resp.InputKafka.Pq == nil {
			r.InputKafka.Pq = nil
		} else {
			r.InputKafka.Pq = &tfTypes.InputKafkaPq{}
			if resp.InputKafka.Pq.CommitFrequency != nil {
				r.InputKafka.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.Pq.CommitFrequency)))
			} else {
				r.InputKafka.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputKafka.Pq.Compress != nil {
				r.InputKafka.Pq.Compress = types.StringValue(string(*resp.InputKafka.Pq.Compress))
			} else {
				r.InputKafka.Pq.Compress = types.StringNull()
			}
			if resp.InputKafka.Pq.MaxBufferSize != nil {
				r.InputKafka.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.Pq.MaxBufferSize)))
			} else {
				r.InputKafka.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputKafka.Pq.MaxFileSize = types.StringPointerValue(resp.InputKafka.Pq.MaxFileSize)
			r.InputKafka.Pq.MaxSize = types.StringPointerValue(resp.InputKafka.Pq.MaxSize)
			if resp.InputKafka.Pq.Mode != nil {
				r.InputKafka.Pq.Mode = types.StringValue(string(*resp.InputKafka.Pq.Mode))
			} else {
				r.InputKafka.Pq.Mode = types.StringNull()
			}
			r.InputKafka.Pq.Path = types.StringPointerValue(resp.InputKafka.Pq.Path)
		}
		r.InputKafka.PqEnabled = types.BoolPointerValue(resp.InputKafka.PqEnabled)
		if resp.InputKafka.ReauthenticationThreshold != nil {
			r.InputKafka.ReauthenticationThreshold = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.ReauthenticationThreshold)))
		} else {
			r.InputKafka.ReauthenticationThreshold = types.NumberNull()
		}
		if resp.InputKafka.RebalanceTimeout != nil {
			r.InputKafka.RebalanceTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.RebalanceTimeout)))
		} else {
			r.InputKafka.RebalanceTimeout = types.NumberNull()
		}
		if resp.InputKafka.RequestTimeout != nil {
			r.InputKafka.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.RequestTimeout)))
		} else {
			r.InputKafka.RequestTimeout = types.NumberNull()
		}
		if resp.InputKafka.Sasl == nil {
			r.InputKafka.Sasl = nil
		} else {
			r.InputKafka.Sasl = &tfTypes.Authentication{}
			r.InputKafka.Sasl.Disabled = types.BoolPointerValue(resp.InputKafka.Sasl.Disabled)
			if resp.InputKafka.Sasl.Mechanism != nil {
				r.InputKafka.Sasl.Mechanism = types.StringValue(string(*resp.InputKafka.Sasl.Mechanism))
			} else {
				r.InputKafka.Sasl.Mechanism = types.StringNull()
			}
		}
		r.InputKafka.SendToRoutes = types.BoolPointerValue(resp.InputKafka.SendToRoutes)
		if resp.InputKafka.SessionTimeout != nil {
			r.InputKafka.SessionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputKafka.SessionTimeout)))
		} else {
			r.InputKafka.SessionTimeout = types.NumberNull()
		}
		r.InputKafka.Streamtags = make([]types.String, 0, len(resp.InputKafka.Streamtags))
		for _, v := range resp.InputKafka.Streamtags {
			r.InputKafka.Streamtags = append(r.InputKafka.Streamtags, types.StringValue(v))
		}
		if resp.InputKafka.TLS == nil {
			r.InputKafka.TLS = nil
		} else {
			r.InputKafka.TLS = &tfTypes.TLSSettingsClientSide{}
			r.InputKafka.TLS.CaPath = types.StringPointerValue(resp.InputKafka.TLS.CaPath)
			r.InputKafka.TLS.CertificateName = types.StringPointerValue(resp.InputKafka.TLS.CertificateName)
			r.InputKafka.TLS.CertPath = types.StringPointerValue(resp.InputKafka.TLS.CertPath)
			r.InputKafka.TLS.Disabled = types.BoolPointerValue(resp.InputKafka.TLS.Disabled)
			if resp.InputKafka.TLS.MaxVersion != nil {
				r.InputKafka.TLS.MaxVersion = types.StringValue(string(*resp.InputKafka.TLS.MaxVersion))
			} else {
				r.InputKafka.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputKafka.TLS.MinVersion != nil {
				r.InputKafka.TLS.MinVersion = types.StringValue(string(*resp.InputKafka.TLS.MinVersion))
			} else {
				r.InputKafka.TLS.MinVersion = types.StringNull()
			}
			r.InputKafka.TLS.Passphrase = types.StringPointerValue(resp.InputKafka.TLS.Passphrase)
			r.InputKafka.TLS.PrivKeyPath = types.StringPointerValue(resp.InputKafka.TLS.PrivKeyPath)
			r.InputKafka.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputKafka.TLS.RejectUnauthorized)
			r.InputKafka.TLS.Servername = types.StringPointerValue(resp.InputKafka.TLS.Servername)
		}
		r.InputKafka.Topics = make([]types.String, 0, len(resp.InputKafka.Topics))
		for _, v := range resp.InputKafka.Topics {
			r.InputKafka.Topics = append(r.InputKafka.Topics, types.StringValue(v))
		}
		if resp.InputKafka.Type != nil {
			r.InputKafka.Type = types.StringValue(string(*resp.InputKafka.Type))
		} else {
			r.InputKafka.Type = types.StringNull()
		}
	}
	if resp.InputKinesis != nil {
		r.InputKinesis = &tfTypes.InputKinesis{}
		r.InputKinesis.AssumeRoleArn = types.StringPointerValue(resp.InputKinesis.AssumeRoleArn)
		r.InputKinesis.AssumeRoleExternalID = types.StringPointerValue(resp.InputKinesis.AssumeRoleExternalID)
		r.InputKinesis.AvoidDuplicates = types.BoolPointerValue(resp.InputKinesis.AvoidDuplicates)
		r.InputKinesis.AwsAPIKey = types.StringPointerValue(resp.InputKinesis.AwsAPIKey)
		if resp.InputKinesis.AwsAuthenticationMethod != nil {
			r.InputKinesis.AwsAuthenticationMethod = types.StringValue(string(*resp.InputKinesis.AwsAuthenticationMethod))
		} else {
			r.InputKinesis.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputKinesis.AwsSecret = types.StringPointerValue(resp.InputKinesis.AwsSecret)
		r.InputKinesis.AwsSecretKey = types.StringPointerValue(resp.InputKinesis.AwsSecretKey)
		r.InputKinesis.Connections = []tfTypes.InputKinesisConnections{}
		if len(r.InputKinesis.Connections) > len(resp.InputKinesis.Connections) {
			r.InputKinesis.Connections = r.InputKinesis.Connections[:len(resp.InputKinesis.Connections)]
		}
		for connectionsCount32, connectionsItem32 := range resp.InputKinesis.Connections {
			var connections65 tfTypes.InputKinesisConnections
			connections65.Output = types.StringValue(connectionsItem32.Output)
			connections65.Pipeline = types.StringPointerValue(connectionsItem32.Pipeline)
			if connectionsCount32+1 > len(r.InputKinesis.Connections) {
				r.InputKinesis.Connections = append(r.InputKinesis.Connections, connections65)
			} else {
				r.InputKinesis.Connections[connectionsCount32].Output = connections65.Output
				r.InputKinesis.Connections[connectionsCount32].Pipeline = connections65.Pipeline
			}
		}
		r.InputKinesis.Description = types.StringPointerValue(resp.InputKinesis.Description)
		r.InputKinesis.Disabled = types.BoolPointerValue(resp.InputKinesis.Disabled)
		if resp.InputKinesis.DurationSeconds != nil {
			r.InputKinesis.DurationSeconds = types.NumberValue(big.NewFloat(float64(*resp.InputKinesis.DurationSeconds)))
		} else {
			r.InputKinesis.DurationSeconds = types.NumberNull()
		}
		r.InputKinesis.EnableAssumeRole = types.BoolPointerValue(resp.InputKinesis.EnableAssumeRole)
		r.InputKinesis.Endpoint = types.StringPointerValue(resp.InputKinesis.Endpoint)
		r.InputKinesis.Environment = types.StringPointerValue(resp.InputKinesis.Environment)
		if resp.InputKinesis.GetRecordsLimit != nil {
			r.InputKinesis.GetRecordsLimit = types.NumberValue(big.NewFloat(float64(*resp.InputKinesis.GetRecordsLimit)))
		} else {
			r.InputKinesis.GetRecordsLimit = types.NumberNull()
		}
		if resp.InputKinesis.GetRecordsLimitTotal != nil {
			r.InputKinesis.GetRecordsLimitTotal = types.NumberValue(big.NewFloat(float64(*resp.InputKinesis.GetRecordsLimitTotal)))
		} else {
			r.InputKinesis.GetRecordsLimitTotal = types.NumberNull()
		}
		r.InputKinesis.ID = types.StringPointerValue(resp.InputKinesis.ID)
		if resp.InputKinesis.LoadBalancingAlgorithm != nil {
			r.InputKinesis.LoadBalancingAlgorithm = types.StringValue(string(*resp.InputKinesis.LoadBalancingAlgorithm))
		} else {
			r.InputKinesis.LoadBalancingAlgorithm = types.StringNull()
		}
		r.InputKinesis.Metadata = []tfTypes.InputKinesisMetadata{}
		if len(r.InputKinesis.Metadata) > len(resp.InputKinesis.Metadata) {
			r.InputKinesis.Metadata = r.InputKinesis.Metadata[:len(resp.InputKinesis.Metadata)]
		}
		for metadataCount36, metadataItem36 := range resp.InputKinesis.Metadata {
			var metadata73 tfTypes.InputKinesisMetadata
			metadata73.Name = types.StringValue(metadataItem36.Name)
			metadata73.Value = types.StringValue(metadataItem36.Value)
			if metadataCount36+1 > len(r.InputKinesis.Metadata) {
				r.InputKinesis.Metadata = append(r.InputKinesis.Metadata, metadata73)
			} else {
				r.InputKinesis.Metadata[metadataCount36].Name = metadata73.Name
				r.InputKinesis.Metadata[metadataCount36].Value = metadata73.Value
			}
		}
		if resp.InputKinesis.PayloadFormat != nil {
			r.InputKinesis.PayloadFormat = types.StringValue(string(*resp.InputKinesis.PayloadFormat))
		} else {
			r.InputKinesis.PayloadFormat = types.StringNull()
		}
		r.InputKinesis.Pipeline = types.StringPointerValue(resp.InputKinesis.Pipeline)
		if resp.InputKinesis.Pq == nil {
			r.InputKinesis.Pq = nil
		} else {
			r.InputKinesis.Pq = &tfTypes.InputKinesisPq{}
			if resp.InputKinesis.Pq.CommitFrequency != nil {
				r.InputKinesis.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputKinesis.Pq.CommitFrequency)))
			} else {
				r.InputKinesis.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputKinesis.Pq.Compress != nil {
				r.InputKinesis.Pq.Compress = types.StringValue(string(*resp.InputKinesis.Pq.Compress))
			} else {
				r.InputKinesis.Pq.Compress = types.StringNull()
			}
			if resp.InputKinesis.Pq.MaxBufferSize != nil {
				r.InputKinesis.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputKinesis.Pq.MaxBufferSize)))
			} else {
				r.InputKinesis.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputKinesis.Pq.MaxFileSize = types.StringPointerValue(resp.InputKinesis.Pq.MaxFileSize)
			r.InputKinesis.Pq.MaxSize = types.StringPointerValue(resp.InputKinesis.Pq.MaxSize)
			if resp.InputKinesis.Pq.Mode != nil {
				r.InputKinesis.Pq.Mode = types.StringValue(string(*resp.InputKinesis.Pq.Mode))
			} else {
				r.InputKinesis.Pq.Mode = types.StringNull()
			}
			r.InputKinesis.Pq.Path = types.StringPointerValue(resp.InputKinesis.Pq.Path)
		}
		r.InputKinesis.PqEnabled = types.BoolPointerValue(resp.InputKinesis.PqEnabled)
		r.InputKinesis.Region = types.StringValue(resp.InputKinesis.Region)
		r.InputKinesis.RejectUnauthorized = types.BoolPointerValue(resp.InputKinesis.RejectUnauthorized)
		r.InputKinesis.ReuseConnections = types.BoolPointerValue(resp.InputKinesis.ReuseConnections)
		r.InputKinesis.SendToRoutes = types.BoolPointerValue(resp.InputKinesis.SendToRoutes)
		if resp.InputKinesis.ServiceInterval != nil {
			r.InputKinesis.ServiceInterval = types.NumberValue(big.NewFloat(float64(*resp.InputKinesis.ServiceInterval)))
		} else {
			r.InputKinesis.ServiceInterval = types.NumberNull()
		}
		r.InputKinesis.ShardExpr = types.StringPointerValue(resp.InputKinesis.ShardExpr)
		if resp.InputKinesis.ShardIteratorType != nil {
			r.InputKinesis.ShardIteratorType = types.StringValue(string(*resp.InputKinesis.ShardIteratorType))
		} else {
			r.InputKinesis.ShardIteratorType = types.StringNull()
		}
		if resp.InputKinesis.SignatureVersion != nil {
			r.InputKinesis.SignatureVersion = types.StringValue(string(*resp.InputKinesis.SignatureVersion))
		} else {
			r.InputKinesis.SignatureVersion = types.StringNull()
		}
		r.InputKinesis.StreamName = types.StringValue(resp.InputKinesis.StreamName)
		r.InputKinesis.Streamtags = make([]types.String, 0, len(resp.InputKinesis.Streamtags))
		for _, v := range resp.InputKinesis.Streamtags {
			r.InputKinesis.Streamtags = append(r.InputKinesis.Streamtags, types.StringValue(v))
		}
		if resp.InputKinesis.Type != nil {
			r.InputKinesis.Type = types.StringValue(string(*resp.InputKinesis.Type))
		} else {
			r.InputKinesis.Type = types.StringNull()
		}
		r.InputKinesis.VerifyKPLCheckSums = types.BoolPointerValue(resp.InputKinesis.VerifyKPLCheckSums)
	}
	if resp.InputKubeEvents != nil {
		r.InputKubeEvents = &tfTypes.InputKubeEvents{}
		r.InputKubeEvents.Connections = []tfTypes.InputKubeEventsConnections{}
		if len(r.InputKubeEvents.Connections) > len(resp.InputKubeEvents.Connections) {
			r.InputKubeEvents.Connections = r.InputKubeEvents.Connections[:len(resp.InputKubeEvents.Connections)]
		}
		for connectionsCount33, connectionsItem33 := range resp.InputKubeEvents.Connections {
			var connections67 tfTypes.InputKubeEventsConnections
			connections67.Output = types.StringValue(connectionsItem33.Output)
			connections67.Pipeline = types.StringPointerValue(connectionsItem33.Pipeline)
			if connectionsCount33+1 > len(r.InputKubeEvents.Connections) {
				r.InputKubeEvents.Connections = append(r.InputKubeEvents.Connections, connections67)
			} else {
				r.InputKubeEvents.Connections[connectionsCount33].Output = connections67.Output
				r.InputKubeEvents.Connections[connectionsCount33].Pipeline = connections67.Pipeline
			}
		}
		r.InputKubeEvents.Description = types.StringPointerValue(resp.InputKubeEvents.Description)
		r.InputKubeEvents.Disabled = types.BoolPointerValue(resp.InputKubeEvents.Disabled)
		r.InputKubeEvents.Environment = types.StringPointerValue(resp.InputKubeEvents.Environment)
		r.InputKubeEvents.ID = types.StringValue(resp.InputKubeEvents.ID)
		r.InputKubeEvents.Metadata = []tfTypes.InputKubeEventsMetadata{}
		if len(r.InputKubeEvents.Metadata) > len(resp.InputKubeEvents.Metadata) {
			r.InputKubeEvents.Metadata = r.InputKubeEvents.Metadata[:len(resp.InputKubeEvents.Metadata)]
		}
		for metadataCount37, metadataItem37 := range resp.InputKubeEvents.Metadata {
			var metadata75 tfTypes.InputKubeEventsMetadata
			metadata75.Name = types.StringValue(metadataItem37.Name)
			metadata75.Value = types.StringValue(metadataItem37.Value)
			if metadataCount37+1 > len(r.InputKubeEvents.Metadata) {
				r.InputKubeEvents.Metadata = append(r.InputKubeEvents.Metadata, metadata75)
			} else {
				r.InputKubeEvents.Metadata[metadataCount37].Name = metadata75.Name
				r.InputKubeEvents.Metadata[metadataCount37].Value = metadata75.Value
			}
		}
		r.InputKubeEvents.Pipeline = types.StringPointerValue(resp.InputKubeEvents.Pipeline)
		if resp.InputKubeEvents.Pq == nil {
			r.InputKubeEvents.Pq = nil
		} else {
			r.InputKubeEvents.Pq = &tfTypes.InputKubeEventsPq{}
			if resp.InputKubeEvents.Pq.CommitFrequency != nil {
				r.InputKubeEvents.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputKubeEvents.Pq.CommitFrequency)))
			} else {
				r.InputKubeEvents.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputKubeEvents.Pq.Compress != nil {
				r.InputKubeEvents.Pq.Compress = types.StringValue(string(*resp.InputKubeEvents.Pq.Compress))
			} else {
				r.InputKubeEvents.Pq.Compress = types.StringNull()
			}
			if resp.InputKubeEvents.Pq.MaxBufferSize != nil {
				r.InputKubeEvents.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputKubeEvents.Pq.MaxBufferSize)))
			} else {
				r.InputKubeEvents.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputKubeEvents.Pq.MaxFileSize = types.StringPointerValue(resp.InputKubeEvents.Pq.MaxFileSize)
			r.InputKubeEvents.Pq.MaxSize = types.StringPointerValue(resp.InputKubeEvents.Pq.MaxSize)
			if resp.InputKubeEvents.Pq.Mode != nil {
				r.InputKubeEvents.Pq.Mode = types.StringValue(string(*resp.InputKubeEvents.Pq.Mode))
			} else {
				r.InputKubeEvents.Pq.Mode = types.StringNull()
			}
			r.InputKubeEvents.Pq.Path = types.StringPointerValue(resp.InputKubeEvents.Pq.Path)
		}
		r.InputKubeEvents.PqEnabled = types.BoolPointerValue(resp.InputKubeEvents.PqEnabled)
		r.InputKubeEvents.Rules = []tfTypes.InputKubeEventsRules{}
		if len(r.InputKubeEvents.Rules) > len(resp.InputKubeEvents.Rules) {
			r.InputKubeEvents.Rules = r.InputKubeEvents.Rules[:len(resp.InputKubeEvents.Rules)]
		}
		for rulesCount1, rulesItem1 := range resp.InputKubeEvents.Rules {
			var rules3 tfTypes.InputKubeEventsRules
			rules3.Description = types.StringPointerValue(rulesItem1.Description)
			rules3.Filter = types.StringValue(rulesItem1.Filter)
			if rulesCount1+1 > len(r.InputKubeEvents.Rules) {
				r.InputKubeEvents.Rules = append(r.InputKubeEvents.Rules, rules3)
			} else {
				r.InputKubeEvents.Rules[rulesCount1].Description = rules3.Description
				r.InputKubeEvents.Rules[rulesCount1].Filter = rules3.Filter
			}
		}
		r.InputKubeEvents.SendToRoutes = types.BoolPointerValue(resp.InputKubeEvents.SendToRoutes)
		r.InputKubeEvents.Streamtags = make([]types.String, 0, len(resp.InputKubeEvents.Streamtags))
		for _, v := range resp.InputKubeEvents.Streamtags {
			r.InputKubeEvents.Streamtags = append(r.InputKubeEvents.Streamtags, types.StringValue(v))
		}
		r.InputKubeEvents.Type = types.StringValue(string(resp.InputKubeEvents.Type))
	}
	if resp.InputKubeLogs != nil {
		r.InputKubeLogs = &tfTypes.InputKubeLogs{}
		r.InputKubeLogs.BreakerRulesets = make([]types.String, 0, len(resp.InputKubeLogs.BreakerRulesets))
		for _, v := range resp.InputKubeLogs.BreakerRulesets {
			r.InputKubeLogs.BreakerRulesets = append(r.InputKubeLogs.BreakerRulesets, types.StringValue(v))
		}
		r.InputKubeLogs.Connections = []tfTypes.InputKubeLogsConnections{}
		if len(r.InputKubeLogs.Connections) > len(resp.InputKubeLogs.Connections) {
			r.InputKubeLogs.Connections = r.InputKubeLogs.Connections[:len(resp.InputKubeLogs.Connections)]
		}
		for connectionsCount34, connectionsItem34 := range resp.InputKubeLogs.Connections {
			var connections69 tfTypes.InputKubeLogsConnections
			connections69.Output = types.StringValue(connectionsItem34.Output)
			connections69.Pipeline = types.StringPointerValue(connectionsItem34.Pipeline)
			if connectionsCount34+1 > len(r.InputKubeLogs.Connections) {
				r.InputKubeLogs.Connections = append(r.InputKubeLogs.Connections, connections69)
			} else {
				r.InputKubeLogs.Connections[connectionsCount34].Output = connections69.Output
				r.InputKubeLogs.Connections[connectionsCount34].Pipeline = connections69.Pipeline
			}
		}
		r.InputKubeLogs.Description = types.StringPointerValue(resp.InputKubeLogs.Description)
		r.InputKubeLogs.Disabled = types.BoolPointerValue(resp.InputKubeLogs.Disabled)
		r.InputKubeLogs.EnableLoadBalancing = types.BoolPointerValue(resp.InputKubeLogs.EnableLoadBalancing)
		r.InputKubeLogs.Environment = types.StringPointerValue(resp.InputKubeLogs.Environment)
		r.InputKubeLogs.ID = types.StringValue(resp.InputKubeLogs.ID)
		if resp.InputKubeLogs.Interval != nil {
			r.InputKubeLogs.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputKubeLogs.Interval)))
		} else {
			r.InputKubeLogs.Interval = types.NumberNull()
		}
		r.InputKubeLogs.Metadata = []tfTypes.InputKubeLogsMetadata{}
		if len(r.InputKubeLogs.Metadata) > len(resp.InputKubeLogs.Metadata) {
			r.InputKubeLogs.Metadata = r.InputKubeLogs.Metadata[:len(resp.InputKubeLogs.Metadata)]
		}
		for metadataCount38, metadataItem38 := range resp.InputKubeLogs.Metadata {
			var metadata77 tfTypes.InputKubeLogsMetadata
			metadata77.Name = types.StringValue(metadataItem38.Name)
			metadata77.Value = types.StringValue(metadataItem38.Value)
			if metadataCount38+1 > len(r.InputKubeLogs.Metadata) {
				r.InputKubeLogs.Metadata = append(r.InputKubeLogs.Metadata, metadata77)
			} else {
				r.InputKubeLogs.Metadata[metadataCount38].Name = metadata77.Name
				r.InputKubeLogs.Metadata[metadataCount38].Value = metadata77.Value
			}
		}
		if resp.InputKubeLogs.Persistence == nil {
			r.InputKubeLogs.Persistence = nil
		} else {
			r.InputKubeLogs.Persistence = &tfTypes.InputKubeLogsDiskSpooling{}
			if resp.InputKubeLogs.Persistence.Compress != nil {
				r.InputKubeLogs.Persistence.Compress = types.StringValue(string(*resp.InputKubeLogs.Persistence.Compress))
			} else {
				r.InputKubeLogs.Persistence.Compress = types.StringNull()
			}
			r.InputKubeLogs.Persistence.Enable = types.BoolPointerValue(resp.InputKubeLogs.Persistence.Enable)
			r.InputKubeLogs.Persistence.MaxDataSize = types.StringPointerValue(resp.InputKubeLogs.Persistence.MaxDataSize)
			r.InputKubeLogs.Persistence.MaxDataTime = types.StringPointerValue(resp.InputKubeLogs.Persistence.MaxDataTime)
			r.InputKubeLogs.Persistence.TimeWindow = types.StringPointerValue(resp.InputKubeLogs.Persistence.TimeWindow)
		}
		r.InputKubeLogs.Pipeline = types.StringPointerValue(resp.InputKubeLogs.Pipeline)
		if resp.InputKubeLogs.Pq == nil {
			r.InputKubeLogs.Pq = nil
		} else {
			r.InputKubeLogs.Pq = &tfTypes.InputKubeLogsPq{}
			if resp.InputKubeLogs.Pq.CommitFrequency != nil {
				r.InputKubeLogs.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputKubeLogs.Pq.CommitFrequency)))
			} else {
				r.InputKubeLogs.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputKubeLogs.Pq.Compress != nil {
				r.InputKubeLogs.Pq.Compress = types.StringValue(string(*resp.InputKubeLogs.Pq.Compress))
			} else {
				r.InputKubeLogs.Pq.Compress = types.StringNull()
			}
			if resp.InputKubeLogs.Pq.MaxBufferSize != nil {
				r.InputKubeLogs.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputKubeLogs.Pq.MaxBufferSize)))
			} else {
				r.InputKubeLogs.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputKubeLogs.Pq.MaxFileSize = types.StringPointerValue(resp.InputKubeLogs.Pq.MaxFileSize)
			r.InputKubeLogs.Pq.MaxSize = types.StringPointerValue(resp.InputKubeLogs.Pq.MaxSize)
			if resp.InputKubeLogs.Pq.Mode != nil {
				r.InputKubeLogs.Pq.Mode = types.StringValue(string(*resp.InputKubeLogs.Pq.Mode))
			} else {
				r.InputKubeLogs.Pq.Mode = types.StringNull()
			}
			r.InputKubeLogs.Pq.Path = types.StringPointerValue(resp.InputKubeLogs.Pq.Path)
		}
		r.InputKubeLogs.PqEnabled = types.BoolPointerValue(resp.InputKubeLogs.PqEnabled)
		r.InputKubeLogs.Rules = []tfTypes.InputKubeLogsRules{}
		if len(r.InputKubeLogs.Rules) > len(resp.InputKubeLogs.Rules) {
			r.InputKubeLogs.Rules = r.InputKubeLogs.Rules[:len(resp.InputKubeLogs.Rules)]
		}
		for rulesCount2, rulesItem2 := range resp.InputKubeLogs.Rules {
			var rules5 tfTypes.InputKubeLogsRules
			rules5.Description = types.StringPointerValue(rulesItem2.Description)
			rules5.Filter = types.StringValue(rulesItem2.Filter)
			if rulesCount2+1 > len(r.InputKubeLogs.Rules) {
				r.InputKubeLogs.Rules = append(r.InputKubeLogs.Rules, rules5)
			} else {
				r.InputKubeLogs.Rules[rulesCount2].Description = rules5.Description
				r.InputKubeLogs.Rules[rulesCount2].Filter = rules5.Filter
			}
		}
		r.InputKubeLogs.SendToRoutes = types.BoolPointerValue(resp.InputKubeLogs.SendToRoutes)
		if resp.InputKubeLogs.StaleChannelFlushMs != nil {
			r.InputKubeLogs.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputKubeLogs.StaleChannelFlushMs)))
		} else {
			r.InputKubeLogs.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputKubeLogs.Streamtags = make([]types.String, 0, len(resp.InputKubeLogs.Streamtags))
		for _, v := range resp.InputKubeLogs.Streamtags {
			r.InputKubeLogs.Streamtags = append(r.InputKubeLogs.Streamtags, types.StringValue(v))
		}
		r.InputKubeLogs.Timestamps = types.BoolPointerValue(resp.InputKubeLogs.Timestamps)
		r.InputKubeLogs.Type = types.StringValue(string(resp.InputKubeLogs.Type))
	}
	if resp.InputKubeMetrics != nil {
		r.InputKubeMetrics = &tfTypes.InputKubeMetrics{}
		r.InputKubeMetrics.Connections = []tfTypes.InputKubeMetricsConnections{}
		if len(r.InputKubeMetrics.Connections) > len(resp.InputKubeMetrics.Connections) {
			r.InputKubeMetrics.Connections = r.InputKubeMetrics.Connections[:len(resp.InputKubeMetrics.Connections)]
		}
		for connectionsCount35, connectionsItem35 := range resp.InputKubeMetrics.Connections {
			var connections71 tfTypes.InputKubeMetricsConnections
			connections71.Output = types.StringValue(connectionsItem35.Output)
			connections71.Pipeline = types.StringPointerValue(connectionsItem35.Pipeline)
			if connectionsCount35+1 > len(r.InputKubeMetrics.Connections) {
				r.InputKubeMetrics.Connections = append(r.InputKubeMetrics.Connections, connections71)
			} else {
				r.InputKubeMetrics.Connections[connectionsCount35].Output = connections71.Output
				r.InputKubeMetrics.Connections[connectionsCount35].Pipeline = connections71.Pipeline
			}
		}
		r.InputKubeMetrics.Description = types.StringPointerValue(resp.InputKubeMetrics.Description)
		r.InputKubeMetrics.Disabled = types.BoolPointerValue(resp.InputKubeMetrics.Disabled)
		r.InputKubeMetrics.Environment = types.StringPointerValue(resp.InputKubeMetrics.Environment)
		r.InputKubeMetrics.ID = types.StringValue(resp.InputKubeMetrics.ID)
		if resp.InputKubeMetrics.Interval != nil {
			r.InputKubeMetrics.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputKubeMetrics.Interval)))
		} else {
			r.InputKubeMetrics.Interval = types.NumberNull()
		}
		r.InputKubeMetrics.Metadata = []tfTypes.InputKubeMetricsMetadata{}
		if len(r.InputKubeMetrics.Metadata) > len(resp.InputKubeMetrics.Metadata) {
			r.InputKubeMetrics.Metadata = r.InputKubeMetrics.Metadata[:len(resp.InputKubeMetrics.Metadata)]
		}
		for metadataCount39, metadataItem39 := range resp.InputKubeMetrics.Metadata {
			var metadata79 tfTypes.InputKubeMetricsMetadata
			metadata79.Name = types.StringValue(metadataItem39.Name)
			metadata79.Value = types.StringValue(metadataItem39.Value)
			if metadataCount39+1 > len(r.InputKubeMetrics.Metadata) {
				r.InputKubeMetrics.Metadata = append(r.InputKubeMetrics.Metadata, metadata79)
			} else {
				r.InputKubeMetrics.Metadata[metadataCount39].Name = metadata79.Name
				r.InputKubeMetrics.Metadata[metadataCount39].Value = metadata79.Value
			}
		}
		if resp.InputKubeMetrics.Persistence == nil {
			r.InputKubeMetrics.Persistence = nil
		} else {
			r.InputKubeMetrics.Persistence = &tfTypes.InputKubeMetricsPersistence{}
			if resp.InputKubeMetrics.Persistence.Compress != nil {
				r.InputKubeMetrics.Persistence.Compress = types.StringValue(string(*resp.InputKubeMetrics.Persistence.Compress))
			} else {
				r.InputKubeMetrics.Persistence.Compress = types.StringNull()
			}
			r.InputKubeMetrics.Persistence.DestPath = types.StringPointerValue(resp.InputKubeMetrics.Persistence.DestPath)
			r.InputKubeMetrics.Persistence.Enable = types.BoolPointerValue(resp.InputKubeMetrics.Persistence.Enable)
			r.InputKubeMetrics.Persistence.MaxDataSize = types.StringPointerValue(resp.InputKubeMetrics.Persistence.MaxDataSize)
			r.InputKubeMetrics.Persistence.MaxDataTime = types.StringPointerValue(resp.InputKubeMetrics.Persistence.MaxDataTime)
			r.InputKubeMetrics.Persistence.TimeWindow = types.StringPointerValue(resp.InputKubeMetrics.Persistence.TimeWindow)
		}
		r.InputKubeMetrics.Pipeline = types.StringPointerValue(resp.InputKubeMetrics.Pipeline)
		if resp.InputKubeMetrics.Pq == nil {
			r.InputKubeMetrics.Pq = nil
		} else {
			r.InputKubeMetrics.Pq = &tfTypes.InputKubeMetricsPq{}
			if resp.InputKubeMetrics.Pq.CommitFrequency != nil {
				r.InputKubeMetrics.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputKubeMetrics.Pq.CommitFrequency)))
			} else {
				r.InputKubeMetrics.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputKubeMetrics.Pq.Compress != nil {
				r.InputKubeMetrics.Pq.Compress = types.StringValue(string(*resp.InputKubeMetrics.Pq.Compress))
			} else {
				r.InputKubeMetrics.Pq.Compress = types.StringNull()
			}
			if resp.InputKubeMetrics.Pq.MaxBufferSize != nil {
				r.InputKubeMetrics.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputKubeMetrics.Pq.MaxBufferSize)))
			} else {
				r.InputKubeMetrics.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputKubeMetrics.Pq.MaxFileSize = types.StringPointerValue(resp.InputKubeMetrics.Pq.MaxFileSize)
			r.InputKubeMetrics.Pq.MaxSize = types.StringPointerValue(resp.InputKubeMetrics.Pq.MaxSize)
			if resp.InputKubeMetrics.Pq.Mode != nil {
				r.InputKubeMetrics.Pq.Mode = types.StringValue(string(*resp.InputKubeMetrics.Pq.Mode))
			} else {
				r.InputKubeMetrics.Pq.Mode = types.StringNull()
			}
			r.InputKubeMetrics.Pq.Path = types.StringPointerValue(resp.InputKubeMetrics.Pq.Path)
		}
		r.InputKubeMetrics.PqEnabled = types.BoolPointerValue(resp.InputKubeMetrics.PqEnabled)
		r.InputKubeMetrics.Rules = []tfTypes.InputKubeMetricsRules{}
		if len(r.InputKubeMetrics.Rules) > len(resp.InputKubeMetrics.Rules) {
			r.InputKubeMetrics.Rules = r.InputKubeMetrics.Rules[:len(resp.InputKubeMetrics.Rules)]
		}
		for rulesCount3, rulesItem3 := range resp.InputKubeMetrics.Rules {
			var rules7 tfTypes.InputKubeMetricsRules
			rules7.Description = types.StringPointerValue(rulesItem3.Description)
			rules7.Filter = types.StringValue(rulesItem3.Filter)
			if rulesCount3+1 > len(r.InputKubeMetrics.Rules) {
				r.InputKubeMetrics.Rules = append(r.InputKubeMetrics.Rules, rules7)
			} else {
				r.InputKubeMetrics.Rules[rulesCount3].Description = rules7.Description
				r.InputKubeMetrics.Rules[rulesCount3].Filter = rules7.Filter
			}
		}
		r.InputKubeMetrics.SendToRoutes = types.BoolPointerValue(resp.InputKubeMetrics.SendToRoutes)
		r.InputKubeMetrics.Streamtags = make([]types.String, 0, len(resp.InputKubeMetrics.Streamtags))
		for _, v := range resp.InputKubeMetrics.Streamtags {
			r.InputKubeMetrics.Streamtags = append(r.InputKubeMetrics.Streamtags, types.StringValue(v))
		}
		r.InputKubeMetrics.Type = types.StringValue(string(resp.InputKubeMetrics.Type))
	}
	if resp.InputLoki != nil {
		r.InputLoki = &tfTypes.InputLoki{}
		if resp.InputLoki.ActivityLogSampleRate != nil {
			r.InputLoki.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputLoki.ActivityLogSampleRate)))
		} else {
			r.InputLoki.ActivityLogSampleRate = types.NumberNull()
		}
		r.InputLoki.AuthHeaderExpr = types.StringPointerValue(resp.InputLoki.AuthHeaderExpr)
		if resp.InputLoki.AuthType != nil {
			r.InputLoki.AuthType = types.StringValue(string(*resp.InputLoki.AuthType))
		} else {
			r.InputLoki.AuthType = types.StringNull()
		}
		r.InputLoki.CaptureHeaders = types.BoolPointerValue(resp.InputLoki.CaptureHeaders)
		r.InputLoki.Connections = []tfTypes.InputLokiConnections{}
		if len(r.InputLoki.Connections) > len(resp.InputLoki.Connections) {
			r.InputLoki.Connections = r.InputLoki.Connections[:len(resp.InputLoki.Connections)]
		}
		for connectionsCount36, connectionsItem36 := range resp.InputLoki.Connections {
			var connections73 tfTypes.InputLokiConnections
			connections73.Output = types.StringValue(connectionsItem36.Output)
			connections73.Pipeline = types.StringPointerValue(connectionsItem36.Pipeline)
			if connectionsCount36+1 > len(r.InputLoki.Connections) {
				r.InputLoki.Connections = append(r.InputLoki.Connections, connections73)
			} else {
				r.InputLoki.Connections[connectionsCount36].Output = connections73.Output
				r.InputLoki.Connections[connectionsCount36].Pipeline = connections73.Pipeline
			}
		}
		r.InputLoki.CredentialsSecret = types.StringPointerValue(resp.InputLoki.CredentialsSecret)
		r.InputLoki.Description = types.StringPointerValue(resp.InputLoki.Description)
		r.InputLoki.Disabled = types.BoolPointerValue(resp.InputLoki.Disabled)
		r.InputLoki.EnableHealthCheck = types.BoolPointerValue(resp.InputLoki.EnableHealthCheck)
		r.InputLoki.EnableProxyHeader = types.BoolPointerValue(resp.InputLoki.EnableProxyHeader)
		r.InputLoki.Environment = types.StringPointerValue(resp.InputLoki.Environment)
		r.InputLoki.Host = types.StringPointerValue(resp.InputLoki.Host)
		r.InputLoki.ID = types.StringPointerValue(resp.InputLoki.ID)
		r.InputLoki.IPAllowlistRegex = types.StringPointerValue(resp.InputLoki.IPAllowlistRegex)
		r.InputLoki.IPDenylistRegex = types.StringPointerValue(resp.InputLoki.IPDenylistRegex)
		if resp.InputLoki.KeepAliveTimeout != nil {
			r.InputLoki.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputLoki.KeepAliveTimeout)))
		} else {
			r.InputLoki.KeepAliveTimeout = types.NumberNull()
		}
		r.InputLoki.LoginURL = types.StringPointerValue(resp.InputLoki.LoginURL)
		r.InputLoki.LokiAPI = types.StringPointerValue(resp.InputLoki.LokiAPI)
		if resp.InputLoki.MaxActiveReq != nil {
			r.InputLoki.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputLoki.MaxActiveReq)))
		} else {
			r.InputLoki.MaxActiveReq = types.NumberNull()
		}
		r.InputLoki.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputLoki.MaxRequestsPerSocket)
		r.InputLoki.Metadata = []tfTypes.InputLokiMetadata{}
		if len(r.InputLoki.Metadata) > len(resp.InputLoki.Metadata) {
			r.InputLoki.Metadata = r.InputLoki.Metadata[:len(resp.InputLoki.Metadata)]
		}
		for metadataCount40, metadataItem40 := range resp.InputLoki.Metadata {
			var metadata81 tfTypes.InputLokiMetadata
			metadata81.Name = types.StringValue(metadataItem40.Name)
			metadata81.Value = types.StringValue(metadataItem40.Value)
			if metadataCount40+1 > len(r.InputLoki.Metadata) {
				r.InputLoki.Metadata = append(r.InputLoki.Metadata, metadata81)
			} else {
				r.InputLoki.Metadata[metadataCount40].Name = metadata81.Name
				r.InputLoki.Metadata[metadataCount40].Value = metadata81.Value
			}
		}
		r.InputLoki.OauthHeaders = []tfTypes.InputLokiOauthHeaders{}
		if len(r.InputLoki.OauthHeaders) > len(resp.InputLoki.OauthHeaders) {
			r.InputLoki.OauthHeaders = r.InputLoki.OauthHeaders[:len(resp.InputLoki.OauthHeaders)]
		}
		for oauthHeadersCount4, oauthHeadersItem4 := range resp.InputLoki.OauthHeaders {
			var oauthHeaders9 tfTypes.InputLokiOauthHeaders
			oauthHeaders9.Name = types.StringValue(oauthHeadersItem4.Name)
			oauthHeaders9.Value = types.StringValue(oauthHeadersItem4.Value)
			if oauthHeadersCount4+1 > len(r.InputLoki.OauthHeaders) {
				r.InputLoki.OauthHeaders = append(r.InputLoki.OauthHeaders, oauthHeaders9)
			} else {
				r.InputLoki.OauthHeaders[oauthHeadersCount4].Name = oauthHeaders9.Name
				r.InputLoki.OauthHeaders[oauthHeadersCount4].Value = oauthHeaders9.Value
			}
		}
		r.InputLoki.OauthParams = []tfTypes.InputLokiOauthParams{}
		if len(r.InputLoki.OauthParams) > len(resp.InputLoki.OauthParams) {
			r.InputLoki.OauthParams = r.InputLoki.OauthParams[:len(resp.InputLoki.OauthParams)]
		}
		for oauthParamsCount4, oauthParamsItem4 := range resp.InputLoki.OauthParams {
			var oauthParams9 tfTypes.InputLokiOauthParams
			oauthParams9.Name = types.StringValue(oauthParamsItem4.Name)
			oauthParams9.Value = types.StringValue(oauthParamsItem4.Value)
			if oauthParamsCount4+1 > len(r.InputLoki.OauthParams) {
				r.InputLoki.OauthParams = append(r.InputLoki.OauthParams, oauthParams9)
			} else {
				r.InputLoki.OauthParams[oauthParamsCount4].Name = oauthParams9.Name
				r.InputLoki.OauthParams[oauthParamsCount4].Value = oauthParams9.Value
			}
		}
		r.InputLoki.Password = types.StringPointerValue(resp.InputLoki.Password)
		r.InputLoki.Pipeline = types.StringPointerValue(resp.InputLoki.Pipeline)
		r.InputLoki.Port = types.NumberValue(big.NewFloat(float64(resp.InputLoki.Port)))
		if resp.InputLoki.Pq == nil {
			r.InputLoki.Pq = nil
		} else {
			r.InputLoki.Pq = &tfTypes.InputLokiPq{}
			if resp.InputLoki.Pq.CommitFrequency != nil {
				r.InputLoki.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputLoki.Pq.CommitFrequency)))
			} else {
				r.InputLoki.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputLoki.Pq.Compress != nil {
				r.InputLoki.Pq.Compress = types.StringValue(string(*resp.InputLoki.Pq.Compress))
			} else {
				r.InputLoki.Pq.Compress = types.StringNull()
			}
			if resp.InputLoki.Pq.MaxBufferSize != nil {
				r.InputLoki.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputLoki.Pq.MaxBufferSize)))
			} else {
				r.InputLoki.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputLoki.Pq.MaxFileSize = types.StringPointerValue(resp.InputLoki.Pq.MaxFileSize)
			r.InputLoki.Pq.MaxSize = types.StringPointerValue(resp.InputLoki.Pq.MaxSize)
			if resp.InputLoki.Pq.Mode != nil {
				r.InputLoki.Pq.Mode = types.StringValue(string(*resp.InputLoki.Pq.Mode))
			} else {
				r.InputLoki.Pq.Mode = types.StringNull()
			}
			r.InputLoki.Pq.Path = types.StringPointerValue(resp.InputLoki.Pq.Path)
		}
		r.InputLoki.PqEnabled = types.BoolPointerValue(resp.InputLoki.PqEnabled)
		if resp.InputLoki.RequestTimeout != nil {
			r.InputLoki.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputLoki.RequestTimeout)))
		} else {
			r.InputLoki.RequestTimeout = types.NumberNull()
		}
		r.InputLoki.Secret = types.StringPointerValue(resp.InputLoki.Secret)
		r.InputLoki.SecretParamName = types.StringPointerValue(resp.InputLoki.SecretParamName)
		r.InputLoki.SendToRoutes = types.BoolPointerValue(resp.InputLoki.SendToRoutes)
		if resp.InputLoki.SocketTimeout != nil {
			r.InputLoki.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputLoki.SocketTimeout)))
		} else {
			r.InputLoki.SocketTimeout = types.NumberNull()
		}
		r.InputLoki.Streamtags = make([]types.String, 0, len(resp.InputLoki.Streamtags))
		for _, v := range resp.InputLoki.Streamtags {
			r.InputLoki.Streamtags = append(r.InputLoki.Streamtags, types.StringValue(v))
		}
		r.InputLoki.TextSecret = types.StringPointerValue(resp.InputLoki.TextSecret)
		if resp.InputLoki.TLS == nil {
			r.InputLoki.TLS = nil
		} else {
			r.InputLoki.TLS = &tfTypes.InputLokiTLSSettingsServerSide{}
			r.InputLoki.TLS.CaPath = types.StringPointerValue(resp.InputLoki.TLS.CaPath)
			r.InputLoki.TLS.CertificateName = types.StringPointerValue(resp.InputLoki.TLS.CertificateName)
			r.InputLoki.TLS.CertPath = types.StringPointerValue(resp.InputLoki.TLS.CertPath)
			if resp.InputLoki.TLS.CommonNameRegex == nil {
				r.InputLoki.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult12, _ := json.Marshal(resp.InputLoki.TLS.CommonNameRegex)
				r.InputLoki.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult12))
			}
			r.InputLoki.TLS.Disabled = types.BoolPointerValue(resp.InputLoki.TLS.Disabled)
			if resp.InputLoki.TLS.MaxVersion != nil {
				r.InputLoki.TLS.MaxVersion = types.StringValue(string(*resp.InputLoki.TLS.MaxVersion))
			} else {
				r.InputLoki.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputLoki.TLS.MinVersion != nil {
				r.InputLoki.TLS.MinVersion = types.StringValue(string(*resp.InputLoki.TLS.MinVersion))
			} else {
				r.InputLoki.TLS.MinVersion = types.StringNull()
			}
			r.InputLoki.TLS.Passphrase = types.StringPointerValue(resp.InputLoki.TLS.Passphrase)
			r.InputLoki.TLS.PrivKeyPath = types.StringPointerValue(resp.InputLoki.TLS.PrivKeyPath)
			if resp.InputLoki.TLS.RejectUnauthorized == nil {
				r.InputLoki.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult12, _ := json.Marshal(resp.InputLoki.TLS.RejectUnauthorized)
				r.InputLoki.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult12))
			}
			r.InputLoki.TLS.RequestCert = types.BoolPointerValue(resp.InputLoki.TLS.RequestCert)
		}
		r.InputLoki.Token = types.StringPointerValue(resp.InputLoki.Token)
		r.InputLoki.TokenAttributeName = types.StringPointerValue(resp.InputLoki.TokenAttributeName)
		if resp.InputLoki.TokenTimeoutSecs != nil {
			r.InputLoki.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*resp.InputLoki.TokenTimeoutSecs)))
		} else {
			r.InputLoki.TokenTimeoutSecs = types.NumberNull()
		}
		if resp.InputLoki.Type != nil {
			r.InputLoki.Type = types.StringValue(string(*resp.InputLoki.Type))
		} else {
			r.InputLoki.Type = types.StringNull()
		}
		r.InputLoki.Username = types.StringPointerValue(resp.InputLoki.Username)
	}
	if resp.InputMetrics != nil {
		r.InputMetrics = &tfTypes.InputMetrics{}
		r.InputMetrics.Connections = []tfTypes.InputMetricsConnections{}
		if len(r.InputMetrics.Connections) > len(resp.InputMetrics.Connections) {
			r.InputMetrics.Connections = r.InputMetrics.Connections[:len(resp.InputMetrics.Connections)]
		}
		for connectionsCount37, connectionsItem37 := range resp.InputMetrics.Connections {
			var connections75 tfTypes.InputMetricsConnections
			connections75.Output = types.StringValue(connectionsItem37.Output)
			connections75.Pipeline = types.StringPointerValue(connectionsItem37.Pipeline)
			if connectionsCount37+1 > len(r.InputMetrics.Connections) {
				r.InputMetrics.Connections = append(r.InputMetrics.Connections, connections75)
			} else {
				r.InputMetrics.Connections[connectionsCount37].Output = connections75.Output
				r.InputMetrics.Connections[connectionsCount37].Pipeline = connections75.Pipeline
			}
		}
		r.InputMetrics.Description = types.StringPointerValue(resp.InputMetrics.Description)
		r.InputMetrics.Disabled = types.BoolPointerValue(resp.InputMetrics.Disabled)
		r.InputMetrics.EnableProxyHeader = types.BoolPointerValue(resp.InputMetrics.EnableProxyHeader)
		r.InputMetrics.Environment = types.StringPointerValue(resp.InputMetrics.Environment)
		r.InputMetrics.Host = types.StringPointerValue(resp.InputMetrics.Host)
		r.InputMetrics.ID = types.StringPointerValue(resp.InputMetrics.ID)
		r.InputMetrics.IPWhitelistRegex = types.StringPointerValue(resp.InputMetrics.IPWhitelistRegex)
		if resp.InputMetrics.MaxBufferSize != nil {
			r.InputMetrics.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputMetrics.MaxBufferSize)))
		} else {
			r.InputMetrics.MaxBufferSize = types.NumberNull()
		}
		r.InputMetrics.Metadata = []tfTypes.InputMetricsMetadata{}
		if len(r.InputMetrics.Metadata) > len(resp.InputMetrics.Metadata) {
			r.InputMetrics.Metadata = r.InputMetrics.Metadata[:len(resp.InputMetrics.Metadata)]
		}
		for metadataCount41, metadataItem41 := range resp.InputMetrics.Metadata {
			var metadata83 tfTypes.InputMetricsMetadata
			metadata83.Name = types.StringValue(metadataItem41.Name)
			metadata83.Value = types.StringValue(metadataItem41.Value)
			if metadataCount41+1 > len(r.InputMetrics.Metadata) {
				r.InputMetrics.Metadata = append(r.InputMetrics.Metadata, metadata83)
			} else {
				r.InputMetrics.Metadata[metadataCount41].Name = metadata83.Name
				r.InputMetrics.Metadata[metadataCount41].Value = metadata83.Value
			}
		}
		r.InputMetrics.Pipeline = types.StringPointerValue(resp.InputMetrics.Pipeline)
		if resp.InputMetrics.Pq == nil {
			r.InputMetrics.Pq = nil
		} else {
			r.InputMetrics.Pq = &tfTypes.InputMetricsPq{}
			if resp.InputMetrics.Pq.CommitFrequency != nil {
				r.InputMetrics.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputMetrics.Pq.CommitFrequency)))
			} else {
				r.InputMetrics.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputMetrics.Pq.Compress != nil {
				r.InputMetrics.Pq.Compress = types.StringValue(string(*resp.InputMetrics.Pq.Compress))
			} else {
				r.InputMetrics.Pq.Compress = types.StringNull()
			}
			if resp.InputMetrics.Pq.MaxBufferSize != nil {
				r.InputMetrics.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputMetrics.Pq.MaxBufferSize)))
			} else {
				r.InputMetrics.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputMetrics.Pq.MaxFileSize = types.StringPointerValue(resp.InputMetrics.Pq.MaxFileSize)
			r.InputMetrics.Pq.MaxSize = types.StringPointerValue(resp.InputMetrics.Pq.MaxSize)
			if resp.InputMetrics.Pq.Mode != nil {
				r.InputMetrics.Pq.Mode = types.StringValue(string(*resp.InputMetrics.Pq.Mode))
			} else {
				r.InputMetrics.Pq.Mode = types.StringNull()
			}
			r.InputMetrics.Pq.Path = types.StringPointerValue(resp.InputMetrics.Pq.Path)
		}
		r.InputMetrics.PqEnabled = types.BoolPointerValue(resp.InputMetrics.PqEnabled)
		r.InputMetrics.SendToRoutes = types.BoolPointerValue(resp.InputMetrics.SendToRoutes)
		r.InputMetrics.Streamtags = make([]types.String, 0, len(resp.InputMetrics.Streamtags))
		for _, v := range resp.InputMetrics.Streamtags {
			r.InputMetrics.Streamtags = append(r.InputMetrics.Streamtags, types.StringValue(v))
		}
		if resp.InputMetrics.TCPPort != nil {
			r.InputMetrics.TCPPort = types.NumberValue(big.NewFloat(float64(*resp.InputMetrics.TCPPort)))
		} else {
			r.InputMetrics.TCPPort = types.NumberNull()
		}
		if resp.InputMetrics.TLS == nil {
			r.InputMetrics.TLS = nil
		} else {
			r.InputMetrics.TLS = &tfTypes.InputMetricsTLSSettingsServerSide{}
			r.InputMetrics.TLS.CaPath = types.StringPointerValue(resp.InputMetrics.TLS.CaPath)
			r.InputMetrics.TLS.CertificateName = types.StringPointerValue(resp.InputMetrics.TLS.CertificateName)
			r.InputMetrics.TLS.CertPath = types.StringPointerValue(resp.InputMetrics.TLS.CertPath)
			if resp.InputMetrics.TLS.CommonNameRegex == nil {
				r.InputMetrics.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult13, _ := json.Marshal(resp.InputMetrics.TLS.CommonNameRegex)
				r.InputMetrics.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult13))
			}
			r.InputMetrics.TLS.Disabled = types.BoolPointerValue(resp.InputMetrics.TLS.Disabled)
			if resp.InputMetrics.TLS.MaxVersion != nil {
				r.InputMetrics.TLS.MaxVersion = types.StringValue(string(*resp.InputMetrics.TLS.MaxVersion))
			} else {
				r.InputMetrics.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputMetrics.TLS.MinVersion != nil {
				r.InputMetrics.TLS.MinVersion = types.StringValue(string(*resp.InputMetrics.TLS.MinVersion))
			} else {
				r.InputMetrics.TLS.MinVersion = types.StringNull()
			}
			r.InputMetrics.TLS.Passphrase = types.StringPointerValue(resp.InputMetrics.TLS.Passphrase)
			r.InputMetrics.TLS.PrivKeyPath = types.StringPointerValue(resp.InputMetrics.TLS.PrivKeyPath)
			if resp.InputMetrics.TLS.RejectUnauthorized == nil {
				r.InputMetrics.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult13, _ := json.Marshal(resp.InputMetrics.TLS.RejectUnauthorized)
				r.InputMetrics.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult13))
			}
			r.InputMetrics.TLS.RequestCert = types.BoolPointerValue(resp.InputMetrics.TLS.RequestCert)
		}
		r.InputMetrics.Type = types.StringValue(string(resp.InputMetrics.Type))
		if resp.InputMetrics.UDPPort != nil {
			r.InputMetrics.UDPPort = types.NumberValue(big.NewFloat(float64(*resp.InputMetrics.UDPPort)))
		} else {
			r.InputMetrics.UDPPort = types.NumberNull()
		}
		if resp.InputMetrics.UDPSocketRxBufSize != nil {
			r.InputMetrics.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*resp.InputMetrics.UDPSocketRxBufSize)))
		} else {
			r.InputMetrics.UDPSocketRxBufSize = types.NumberNull()
		}
	}
	if resp.InputModelDrivenTelemetry != nil {
		r.InputModelDrivenTelemetry = &tfTypes.InputModelDrivenTelemetry{}
		r.InputModelDrivenTelemetry.Connections = []tfTypes.InputModelDrivenTelemetryConnections{}
		if len(r.InputModelDrivenTelemetry.Connections) > len(resp.InputModelDrivenTelemetry.Connections) {
			r.InputModelDrivenTelemetry.Connections = r.InputModelDrivenTelemetry.Connections[:len(resp.InputModelDrivenTelemetry.Connections)]
		}
		for connectionsCount38, connectionsItem38 := range resp.InputModelDrivenTelemetry.Connections {
			var connections77 tfTypes.InputModelDrivenTelemetryConnections
			connections77.Output = types.StringValue(connectionsItem38.Output)
			connections77.Pipeline = types.StringPointerValue(connectionsItem38.Pipeline)
			if connectionsCount38+1 > len(r.InputModelDrivenTelemetry.Connections) {
				r.InputModelDrivenTelemetry.Connections = append(r.InputModelDrivenTelemetry.Connections, connections77)
			} else {
				r.InputModelDrivenTelemetry.Connections[connectionsCount38].Output = connections77.Output
				r.InputModelDrivenTelemetry.Connections[connectionsCount38].Pipeline = connections77.Pipeline
			}
		}
		r.InputModelDrivenTelemetry.Description = types.StringPointerValue(resp.InputModelDrivenTelemetry.Description)
		r.InputModelDrivenTelemetry.Disabled = types.BoolPointerValue(resp.InputModelDrivenTelemetry.Disabled)
		r.InputModelDrivenTelemetry.Environment = types.StringPointerValue(resp.InputModelDrivenTelemetry.Environment)
		r.InputModelDrivenTelemetry.Host = types.StringPointerValue(resp.InputModelDrivenTelemetry.Host)
		r.InputModelDrivenTelemetry.ID = types.StringPointerValue(resp.InputModelDrivenTelemetry.ID)
		if resp.InputModelDrivenTelemetry.MaxActiveCxn != nil {
			r.InputModelDrivenTelemetry.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*resp.InputModelDrivenTelemetry.MaxActiveCxn)))
		} else {
			r.InputModelDrivenTelemetry.MaxActiveCxn = types.NumberNull()
		}
		r.InputModelDrivenTelemetry.Metadata = []tfTypes.InputModelDrivenTelemetryMetadata{}
		if len(r.InputModelDrivenTelemetry.Metadata) > len(resp.InputModelDrivenTelemetry.Metadata) {
			r.InputModelDrivenTelemetry.Metadata = r.InputModelDrivenTelemetry.Metadata[:len(resp.InputModelDrivenTelemetry.Metadata)]
		}
		for metadataCount42, metadataItem42 := range resp.InputModelDrivenTelemetry.Metadata {
			var metadata85 tfTypes.InputModelDrivenTelemetryMetadata
			metadata85.Name = types.StringValue(metadataItem42.Name)
			metadata85.Value = types.StringValue(metadataItem42.Value)
			if metadataCount42+1 > len(r.InputModelDrivenTelemetry.Metadata) {
				r.InputModelDrivenTelemetry.Metadata = append(r.InputModelDrivenTelemetry.Metadata, metadata85)
			} else {
				r.InputModelDrivenTelemetry.Metadata[metadataCount42].Name = metadata85.Name
				r.InputModelDrivenTelemetry.Metadata[metadataCount42].Value = metadata85.Value
			}
		}
		r.InputModelDrivenTelemetry.Pipeline = types.StringPointerValue(resp.InputModelDrivenTelemetry.Pipeline)
		if resp.InputModelDrivenTelemetry.Port != nil {
			r.InputModelDrivenTelemetry.Port = types.NumberValue(big.NewFloat(float64(*resp.InputModelDrivenTelemetry.Port)))
		} else {
			r.InputModelDrivenTelemetry.Port = types.NumberNull()
		}
		if resp.InputModelDrivenTelemetry.Pq == nil {
			r.InputModelDrivenTelemetry.Pq = nil
		} else {
			r.InputModelDrivenTelemetry.Pq = &tfTypes.InputModelDrivenTelemetryPq{}
			if resp.InputModelDrivenTelemetry.Pq.CommitFrequency != nil {
				r.InputModelDrivenTelemetry.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputModelDrivenTelemetry.Pq.CommitFrequency)))
			} else {
				r.InputModelDrivenTelemetry.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputModelDrivenTelemetry.Pq.Compress != nil {
				r.InputModelDrivenTelemetry.Pq.Compress = types.StringValue(string(*resp.InputModelDrivenTelemetry.Pq.Compress))
			} else {
				r.InputModelDrivenTelemetry.Pq.Compress = types.StringNull()
			}
			if resp.InputModelDrivenTelemetry.Pq.MaxBufferSize != nil {
				r.InputModelDrivenTelemetry.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputModelDrivenTelemetry.Pq.MaxBufferSize)))
			} else {
				r.InputModelDrivenTelemetry.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputModelDrivenTelemetry.Pq.MaxFileSize = types.StringPointerValue(resp.InputModelDrivenTelemetry.Pq.MaxFileSize)
			r.InputModelDrivenTelemetry.Pq.MaxSize = types.StringPointerValue(resp.InputModelDrivenTelemetry.Pq.MaxSize)
			if resp.InputModelDrivenTelemetry.Pq.Mode != nil {
				r.InputModelDrivenTelemetry.Pq.Mode = types.StringValue(string(*resp.InputModelDrivenTelemetry.Pq.Mode))
			} else {
				r.InputModelDrivenTelemetry.Pq.Mode = types.StringNull()
			}
			r.InputModelDrivenTelemetry.Pq.Path = types.StringPointerValue(resp.InputModelDrivenTelemetry.Pq.Path)
		}
		r.InputModelDrivenTelemetry.PqEnabled = types.BoolPointerValue(resp.InputModelDrivenTelemetry.PqEnabled)
		r.InputModelDrivenTelemetry.SendToRoutes = types.BoolPointerValue(resp.InputModelDrivenTelemetry.SendToRoutes)
		if resp.InputModelDrivenTelemetry.ShutdownTimeoutMs != nil {
			r.InputModelDrivenTelemetry.ShutdownTimeoutMs = types.NumberValue(big.NewFloat(float64(*resp.InputModelDrivenTelemetry.ShutdownTimeoutMs)))
		} else {
			r.InputModelDrivenTelemetry.ShutdownTimeoutMs = types.NumberNull()
		}
		r.InputModelDrivenTelemetry.Streamtags = make([]types.String, 0, len(resp.InputModelDrivenTelemetry.Streamtags))
		for _, v := range resp.InputModelDrivenTelemetry.Streamtags {
			r.InputModelDrivenTelemetry.Streamtags = append(r.InputModelDrivenTelemetry.Streamtags, types.StringValue(v))
		}
		if resp.InputModelDrivenTelemetry.TLS == nil {
			r.InputModelDrivenTelemetry.TLS = nil
		} else {
			r.InputModelDrivenTelemetry.TLS = &tfTypes.InputModelDrivenTelemetryTLSSettingsServerSide{}
			r.InputModelDrivenTelemetry.TLS.CaPath = types.StringPointerValue(resp.InputModelDrivenTelemetry.TLS.CaPath)
			r.InputModelDrivenTelemetry.TLS.CertificateName = types.StringPointerValue(resp.InputModelDrivenTelemetry.TLS.CertificateName)
			r.InputModelDrivenTelemetry.TLS.CertPath = types.StringPointerValue(resp.InputModelDrivenTelemetry.TLS.CertPath)
			if resp.InputModelDrivenTelemetry.TLS.CommonNameRegex == nil {
				r.InputModelDrivenTelemetry.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult14, _ := json.Marshal(resp.InputModelDrivenTelemetry.TLS.CommonNameRegex)
				r.InputModelDrivenTelemetry.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult14))
			}
			r.InputModelDrivenTelemetry.TLS.Disabled = types.BoolPointerValue(resp.InputModelDrivenTelemetry.TLS.Disabled)
			if resp.InputModelDrivenTelemetry.TLS.MaxVersion != nil {
				r.InputModelDrivenTelemetry.TLS.MaxVersion = types.StringValue(string(*resp.InputModelDrivenTelemetry.TLS.MaxVersion))
			} else {
				r.InputModelDrivenTelemetry.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputModelDrivenTelemetry.TLS.MinVersion != nil {
				r.InputModelDrivenTelemetry.TLS.MinVersion = types.StringValue(string(*resp.InputModelDrivenTelemetry.TLS.MinVersion))
			} else {
				r.InputModelDrivenTelemetry.TLS.MinVersion = types.StringNull()
			}
			r.InputModelDrivenTelemetry.TLS.PrivKeyPath = types.StringPointerValue(resp.InputModelDrivenTelemetry.TLS.PrivKeyPath)
			if resp.InputModelDrivenTelemetry.TLS.RejectUnauthorized == nil {
				r.InputModelDrivenTelemetry.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult14, _ := json.Marshal(resp.InputModelDrivenTelemetry.TLS.RejectUnauthorized)
				r.InputModelDrivenTelemetry.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult14))
			}
			r.InputModelDrivenTelemetry.TLS.RequestCert = types.BoolPointerValue(resp.InputModelDrivenTelemetry.TLS.RequestCert)
		}
		if resp.InputModelDrivenTelemetry.Type != nil {
			r.InputModelDrivenTelemetry.Type = types.StringValue(string(*resp.InputModelDrivenTelemetry.Type))
		} else {
			r.InputModelDrivenTelemetry.Type = types.StringNull()
		}
	}
	if resp.InputMsk != nil {
		r.InputMsk = &tfTypes.InputMsk{}
		r.InputMsk.AssumeRoleArn = types.StringPointerValue(resp.InputMsk.AssumeRoleArn)
		r.InputMsk.AssumeRoleExternalID = types.StringPointerValue(resp.InputMsk.AssumeRoleExternalID)
		if resp.InputMsk.AuthenticationTimeout != nil {
			r.InputMsk.AuthenticationTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.AuthenticationTimeout)))
		} else {
			r.InputMsk.AuthenticationTimeout = types.NumberNull()
		}
		if resp.InputMsk.AutoCommitInterval != nil {
			r.InputMsk.AutoCommitInterval = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.AutoCommitInterval)))
		} else {
			r.InputMsk.AutoCommitInterval = types.NumberNull()
		}
		if resp.InputMsk.AutoCommitThreshold != nil {
			r.InputMsk.AutoCommitThreshold = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.AutoCommitThreshold)))
		} else {
			r.InputMsk.AutoCommitThreshold = types.NumberNull()
		}
		r.InputMsk.AwsAPIKey = types.StringPointerValue(resp.InputMsk.AwsAPIKey)
		if resp.InputMsk.AwsAuthenticationMethod != nil {
			r.InputMsk.AwsAuthenticationMethod = types.StringValue(string(*resp.InputMsk.AwsAuthenticationMethod))
		} else {
			r.InputMsk.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputMsk.AwsSecret = types.StringPointerValue(resp.InputMsk.AwsSecret)
		r.InputMsk.AwsSecretKey = types.StringPointerValue(resp.InputMsk.AwsSecretKey)
		if resp.InputMsk.BackoffRate != nil {
			r.InputMsk.BackoffRate = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.BackoffRate)))
		} else {
			r.InputMsk.BackoffRate = types.NumberNull()
		}
		r.InputMsk.Brokers = make([]types.String, 0, len(resp.InputMsk.Brokers))
		for _, v := range resp.InputMsk.Brokers {
			r.InputMsk.Brokers = append(r.InputMsk.Brokers, types.StringValue(v))
		}
		r.InputMsk.Connections = []tfTypes.InputMskConnections{}
		if len(r.InputMsk.Connections) > len(resp.InputMsk.Connections) {
			r.InputMsk.Connections = r.InputMsk.Connections[:len(resp.InputMsk.Connections)]
		}
		for connectionsCount39, connectionsItem39 := range resp.InputMsk.Connections {
			var connections79 tfTypes.InputMskConnections
			connections79.Output = types.StringValue(connectionsItem39.Output)
			connections79.Pipeline = types.StringPointerValue(connectionsItem39.Pipeline)
			if connectionsCount39+1 > len(r.InputMsk.Connections) {
				r.InputMsk.Connections = append(r.InputMsk.Connections, connections79)
			} else {
				r.InputMsk.Connections[connectionsCount39].Output = connections79.Output
				r.InputMsk.Connections[connectionsCount39].Pipeline = connections79.Pipeline
			}
		}
		if resp.InputMsk.ConnectionTimeout != nil {
			r.InputMsk.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.ConnectionTimeout)))
		} else {
			r.InputMsk.ConnectionTimeout = types.NumberNull()
		}
		r.InputMsk.Description = types.StringPointerValue(resp.InputMsk.Description)
		r.InputMsk.Disabled = types.BoolPointerValue(resp.InputMsk.Disabled)
		if resp.InputMsk.DurationSeconds != nil {
			r.InputMsk.DurationSeconds = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.DurationSeconds)))
		} else {
			r.InputMsk.DurationSeconds = types.NumberNull()
		}
		r.InputMsk.EnableAssumeRole = types.BoolPointerValue(resp.InputMsk.EnableAssumeRole)
		r.InputMsk.Endpoint = types.StringPointerValue(resp.InputMsk.Endpoint)
		r.InputMsk.Environment = types.StringPointerValue(resp.InputMsk.Environment)
		r.InputMsk.FromBeginning = types.BoolPointerValue(resp.InputMsk.FromBeginning)
		r.InputMsk.GroupID = types.StringPointerValue(resp.InputMsk.GroupID)
		if resp.InputMsk.HeartbeatInterval != nil {
			r.InputMsk.HeartbeatInterval = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.HeartbeatInterval)))
		} else {
			r.InputMsk.HeartbeatInterval = types.NumberNull()
		}
		r.InputMsk.ID = types.StringPointerValue(resp.InputMsk.ID)
		if resp.InputMsk.InitialBackoff != nil {
			r.InputMsk.InitialBackoff = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.InitialBackoff)))
		} else {
			r.InputMsk.InitialBackoff = types.NumberNull()
		}
		if resp.InputMsk.KafkaSchemaRegistry == nil {
			r.InputMsk.KafkaSchemaRegistry = nil
		} else {
			r.InputMsk.KafkaSchemaRegistry = &tfTypes.InputMskKafkaSchemaRegistryAuthentication{}
			if resp.InputMsk.KafkaSchemaRegistry.Auth == nil {
				r.InputMsk.KafkaSchemaRegistry.Auth = nil
			} else {
				r.InputMsk.KafkaSchemaRegistry.Auth = &tfTypes.InputMskAuth{}
				r.InputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.InputMsk.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.InputMsk.KafkaSchemaRegistry.Auth.Disabled)
			}
			if resp.InputMsk.KafkaSchemaRegistry.ConnectionTimeout != nil {
				r.InputMsk.KafkaSchemaRegistry.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.KafkaSchemaRegistry.ConnectionTimeout)))
			} else {
				r.InputMsk.KafkaSchemaRegistry.ConnectionTimeout = types.NumberNull()
			}
			r.InputMsk.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.InputMsk.KafkaSchemaRegistry.Disabled)
			if resp.InputMsk.KafkaSchemaRegistry.MaxRetries != nil {
				r.InputMsk.KafkaSchemaRegistry.MaxRetries = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.KafkaSchemaRegistry.MaxRetries)))
			} else {
				r.InputMsk.KafkaSchemaRegistry.MaxRetries = types.NumberNull()
			}
			if resp.InputMsk.KafkaSchemaRegistry.RequestTimeout != nil {
				r.InputMsk.KafkaSchemaRegistry.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.KafkaSchemaRegistry.RequestTimeout)))
			} else {
				r.InputMsk.KafkaSchemaRegistry.RequestTimeout = types.NumberNull()
			}
			r.InputMsk.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.InputMsk.KafkaSchemaRegistry.TLS == nil {
				r.InputMsk.KafkaSchemaRegistry.TLS = nil
			} else {
				r.InputMsk.KafkaSchemaRegistry.TLS = &tfTypes.InputMskKafkaSchemaRegistryTLSSettingsClientSide{}
				r.InputMsk.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.CaPath)
				r.InputMsk.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.CertificateName)
				r.InputMsk.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.CertPath)
				r.InputMsk.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.Disabled)
				if resp.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputMsk.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.InputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.InputMsk.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.InputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.InputMsk.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.Passphrase)
				r.InputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.InputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.InputMsk.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		if resp.InputMsk.MaxBackOff != nil {
			r.InputMsk.MaxBackOff = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.MaxBackOff)))
		} else {
			r.InputMsk.MaxBackOff = types.NumberNull()
		}
		if resp.InputMsk.MaxBytes != nil {
			r.InputMsk.MaxBytes = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.MaxBytes)))
		} else {
			r.InputMsk.MaxBytes = types.NumberNull()
		}
		if resp.InputMsk.MaxBytesPerPartition != nil {
			r.InputMsk.MaxBytesPerPartition = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.MaxBytesPerPartition)))
		} else {
			r.InputMsk.MaxBytesPerPartition = types.NumberNull()
		}
		if resp.InputMsk.MaxRetries != nil {
			r.InputMsk.MaxRetries = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.MaxRetries)))
		} else {
			r.InputMsk.MaxRetries = types.NumberNull()
		}
		if resp.InputMsk.MaxSocketErrors != nil {
			r.InputMsk.MaxSocketErrors = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.MaxSocketErrors)))
		} else {
			r.InputMsk.MaxSocketErrors = types.NumberNull()
		}
		r.InputMsk.Metadata = []tfTypes.InputMskMetadata{}
		if len(r.InputMsk.Metadata) > len(resp.InputMsk.Metadata) {
			r.InputMsk.Metadata = r.InputMsk.Metadata[:len(resp.InputMsk.Metadata)]
		}
		for metadataCount43, metadataItem43 := range resp.InputMsk.Metadata {
			var metadata87 tfTypes.InputMskMetadata
			metadata87.Name = types.StringValue(metadataItem43.Name)
			metadata87.Value = types.StringValue(metadataItem43.Value)
			if metadataCount43+1 > len(r.InputMsk.Metadata) {
				r.InputMsk.Metadata = append(r.InputMsk.Metadata, metadata87)
			} else {
				r.InputMsk.Metadata[metadataCount43].Name = metadata87.Name
				r.InputMsk.Metadata[metadataCount43].Value = metadata87.Value
			}
		}
		r.InputMsk.Pipeline = types.StringPointerValue(resp.InputMsk.Pipeline)
		if resp.InputMsk.Pq == nil {
			r.InputMsk.Pq = nil
		} else {
			r.InputMsk.Pq = &tfTypes.InputMskPq{}
			if resp.InputMsk.Pq.CommitFrequency != nil {
				r.InputMsk.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.Pq.CommitFrequency)))
			} else {
				r.InputMsk.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputMsk.Pq.Compress != nil {
				r.InputMsk.Pq.Compress = types.StringValue(string(*resp.InputMsk.Pq.Compress))
			} else {
				r.InputMsk.Pq.Compress = types.StringNull()
			}
			if resp.InputMsk.Pq.MaxBufferSize != nil {
				r.InputMsk.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.Pq.MaxBufferSize)))
			} else {
				r.InputMsk.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputMsk.Pq.MaxFileSize = types.StringPointerValue(resp.InputMsk.Pq.MaxFileSize)
			r.InputMsk.Pq.MaxSize = types.StringPointerValue(resp.InputMsk.Pq.MaxSize)
			if resp.InputMsk.Pq.Mode != nil {
				r.InputMsk.Pq.Mode = types.StringValue(string(*resp.InputMsk.Pq.Mode))
			} else {
				r.InputMsk.Pq.Mode = types.StringNull()
			}
			r.InputMsk.Pq.Path = types.StringPointerValue(resp.InputMsk.Pq.Path)
		}
		r.InputMsk.PqEnabled = types.BoolPointerValue(resp.InputMsk.PqEnabled)
		if resp.InputMsk.ReauthenticationThreshold != nil {
			r.InputMsk.ReauthenticationThreshold = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.ReauthenticationThreshold)))
		} else {
			r.InputMsk.ReauthenticationThreshold = types.NumberNull()
		}
		if resp.InputMsk.RebalanceTimeout != nil {
			r.InputMsk.RebalanceTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.RebalanceTimeout)))
		} else {
			r.InputMsk.RebalanceTimeout = types.NumberNull()
		}
		r.InputMsk.Region = types.StringValue(resp.InputMsk.Region)
		r.InputMsk.RejectUnauthorized = types.BoolPointerValue(resp.InputMsk.RejectUnauthorized)
		if resp.InputMsk.RequestTimeout != nil {
			r.InputMsk.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.RequestTimeout)))
		} else {
			r.InputMsk.RequestTimeout = types.NumberNull()
		}
		r.InputMsk.ReuseConnections = types.BoolPointerValue(resp.InputMsk.ReuseConnections)
		r.InputMsk.SendToRoutes = types.BoolPointerValue(resp.InputMsk.SendToRoutes)
		if resp.InputMsk.SessionTimeout != nil {
			r.InputMsk.SessionTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputMsk.SessionTimeout)))
		} else {
			r.InputMsk.SessionTimeout = types.NumberNull()
		}
		if resp.InputMsk.SignatureVersion != nil {
			r.InputMsk.SignatureVersion = types.StringValue(string(*resp.InputMsk.SignatureVersion))
		} else {
			r.InputMsk.SignatureVersion = types.StringNull()
		}
		r.InputMsk.Streamtags = make([]types.String, 0, len(resp.InputMsk.Streamtags))
		for _, v := range resp.InputMsk.Streamtags {
			r.InputMsk.Streamtags = append(r.InputMsk.Streamtags, types.StringValue(v))
		}
		if resp.InputMsk.TLS == nil {
			r.InputMsk.TLS = nil
		} else {
			r.InputMsk.TLS = &tfTypes.InputMskTLSSettingsClientSide{}
			r.InputMsk.TLS.CaPath = types.StringPointerValue(resp.InputMsk.TLS.CaPath)
			r.InputMsk.TLS.CertificateName = types.StringPointerValue(resp.InputMsk.TLS.CertificateName)
			r.InputMsk.TLS.CertPath = types.StringPointerValue(resp.InputMsk.TLS.CertPath)
			r.InputMsk.TLS.Disabled = types.BoolPointerValue(resp.InputMsk.TLS.Disabled)
			if resp.InputMsk.TLS.MaxVersion != nil {
				r.InputMsk.TLS.MaxVersion = types.StringValue(string(*resp.InputMsk.TLS.MaxVersion))
			} else {
				r.InputMsk.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputMsk.TLS.MinVersion != nil {
				r.InputMsk.TLS.MinVersion = types.StringValue(string(*resp.InputMsk.TLS.MinVersion))
			} else {
				r.InputMsk.TLS.MinVersion = types.StringNull()
			}
			r.InputMsk.TLS.Passphrase = types.StringPointerValue(resp.InputMsk.TLS.Passphrase)
			r.InputMsk.TLS.PrivKeyPath = types.StringPointerValue(resp.InputMsk.TLS.PrivKeyPath)
			r.InputMsk.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputMsk.TLS.RejectUnauthorized)
			r.InputMsk.TLS.Servername = types.StringPointerValue(resp.InputMsk.TLS.Servername)
		}
		r.InputMsk.Topics = make([]types.String, 0, len(resp.InputMsk.Topics))
		for _, v := range resp.InputMsk.Topics {
			r.InputMsk.Topics = append(r.InputMsk.Topics, types.StringValue(v))
		}
		if resp.InputMsk.Type != nil {
			r.InputMsk.Type = types.StringValue(string(*resp.InputMsk.Type))
		} else {
			r.InputMsk.Type = types.StringNull()
		}
	}
	if resp.InputOffice365Mgmt != nil {
		r.InputOffice365Mgmt = &tfTypes.InputOffice365Mgmt{}
		r.InputOffice365Mgmt.AppID = types.StringValue(resp.InputOffice365Mgmt.AppID)
		if resp.InputOffice365Mgmt.AuthType != nil {
			r.InputOffice365Mgmt.AuthType = types.StringValue(string(*resp.InputOffice365Mgmt.AuthType))
		} else {
			r.InputOffice365Mgmt.AuthType = types.StringNull()
		}
		r.InputOffice365Mgmt.ClientSecret = types.StringPointerValue(resp.InputOffice365Mgmt.ClientSecret)
		r.InputOffice365Mgmt.Connections = []tfTypes.InputOffice365MgmtConnections{}
		if len(r.InputOffice365Mgmt.Connections) > len(resp.InputOffice365Mgmt.Connections) {
			r.InputOffice365Mgmt.Connections = r.InputOffice365Mgmt.Connections[:len(resp.InputOffice365Mgmt.Connections)]
		}
		for connectionsCount40, connectionsItem40 := range resp.InputOffice365Mgmt.Connections {
			var connections81 tfTypes.InputOffice365MgmtConnections
			connections81.Output = types.StringValue(connectionsItem40.Output)
			connections81.Pipeline = types.StringPointerValue(connectionsItem40.Pipeline)
			if connectionsCount40+1 > len(r.InputOffice365Mgmt.Connections) {
				r.InputOffice365Mgmt.Connections = append(r.InputOffice365Mgmt.Connections, connections81)
			} else {
				r.InputOffice365Mgmt.Connections[connectionsCount40].Output = connections81.Output
				r.InputOffice365Mgmt.Connections[connectionsCount40].Pipeline = connections81.Pipeline
			}
		}
		r.InputOffice365Mgmt.ContentConfig = []tfTypes.ContentConfig{}
		if len(r.InputOffice365Mgmt.ContentConfig) > len(resp.InputOffice365Mgmt.ContentConfig) {
			r.InputOffice365Mgmt.ContentConfig = r.InputOffice365Mgmt.ContentConfig[:len(resp.InputOffice365Mgmt.ContentConfig)]
		}
		for contentConfigCount1, contentConfigItem1 := range resp.InputOffice365Mgmt.ContentConfig {
			var contentConfig3 tfTypes.ContentConfig
			contentConfig3.ContentType = types.StringPointerValue(contentConfigItem1.ContentType)
			contentConfig3.Description = types.StringPointerValue(contentConfigItem1.Description)
			contentConfig3.Enabled = types.BoolPointerValue(contentConfigItem1.Enabled)
			if contentConfigItem1.Interval != nil {
				contentConfig3.Interval = types.NumberValue(big.NewFloat(float64(*contentConfigItem1.Interval)))
			} else {
				contentConfig3.Interval = types.NumberNull()
			}
			if contentConfigItem1.LogLevel != nil {
				contentConfig3.LogLevel = types.StringValue(string(*contentConfigItem1.LogLevel))
			} else {
				contentConfig3.LogLevel = types.StringNull()
			}
			if contentConfigCount1+1 > len(r.InputOffice365Mgmt.ContentConfig) {
				r.InputOffice365Mgmt.ContentConfig = append(r.InputOffice365Mgmt.ContentConfig, contentConfig3)
			} else {
				r.InputOffice365Mgmt.ContentConfig[contentConfigCount1].ContentType = contentConfig3.ContentType
				r.InputOffice365Mgmt.ContentConfig[contentConfigCount1].Description = contentConfig3.Description
				r.InputOffice365Mgmt.ContentConfig[contentConfigCount1].Enabled = contentConfig3.Enabled
				r.InputOffice365Mgmt.ContentConfig[contentConfigCount1].Interval = contentConfig3.Interval
				r.InputOffice365Mgmt.ContentConfig[contentConfigCount1].LogLevel = contentConfig3.LogLevel
			}
		}
		r.InputOffice365Mgmt.Description = types.StringPointerValue(resp.InputOffice365Mgmt.Description)
		r.InputOffice365Mgmt.Disabled = types.BoolPointerValue(resp.InputOffice365Mgmt.Disabled)
		r.InputOffice365Mgmt.Environment = types.StringPointerValue(resp.InputOffice365Mgmt.Environment)
		r.InputOffice365Mgmt.ID = types.StringPointerValue(resp.InputOffice365Mgmt.ID)
		if resp.InputOffice365Mgmt.IngestionLag != nil {
			r.InputOffice365Mgmt.IngestionLag = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Mgmt.IngestionLag)))
		} else {
			r.InputOffice365Mgmt.IngestionLag = types.NumberNull()
		}
		r.InputOffice365Mgmt.JobTimeout = types.StringPointerValue(resp.InputOffice365Mgmt.JobTimeout)
		if resp.InputOffice365Mgmt.KeepAliveTime != nil {
			r.InputOffice365Mgmt.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Mgmt.KeepAliveTime)))
		} else {
			r.InputOffice365Mgmt.KeepAliveTime = types.NumberNull()
		}
		if resp.InputOffice365Mgmt.MaxMissedKeepAlives != nil {
			r.InputOffice365Mgmt.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Mgmt.MaxMissedKeepAlives)))
		} else {
			r.InputOffice365Mgmt.MaxMissedKeepAlives = types.NumberNull()
		}
		r.InputOffice365Mgmt.Metadata = []tfTypes.InputOffice365MgmtMetadata{}
		if len(r.InputOffice365Mgmt.Metadata) > len(resp.InputOffice365Mgmt.Metadata) {
			r.InputOffice365Mgmt.Metadata = r.InputOffice365Mgmt.Metadata[:len(resp.InputOffice365Mgmt.Metadata)]
		}
		for metadataCount44, metadataItem44 := range resp.InputOffice365Mgmt.Metadata {
			var metadata89 tfTypes.InputOffice365MgmtMetadata
			metadata89.Name = types.StringValue(metadataItem44.Name)
			metadata89.Value = types.StringValue(metadataItem44.Value)
			if metadataCount44+1 > len(r.InputOffice365Mgmt.Metadata) {
				r.InputOffice365Mgmt.Metadata = append(r.InputOffice365Mgmt.Metadata, metadata89)
			} else {
				r.InputOffice365Mgmt.Metadata[metadataCount44].Name = metadata89.Name
				r.InputOffice365Mgmt.Metadata[metadataCount44].Value = metadata89.Value
			}
		}
		r.InputOffice365Mgmt.Pipeline = types.StringPointerValue(resp.InputOffice365Mgmt.Pipeline)
		if resp.InputOffice365Mgmt.PlanType != nil {
			r.InputOffice365Mgmt.PlanType = types.StringValue(string(*resp.InputOffice365Mgmt.PlanType))
		} else {
			r.InputOffice365Mgmt.PlanType = types.StringNull()
		}
		if resp.InputOffice365Mgmt.Pq == nil {
			r.InputOffice365Mgmt.Pq = nil
		} else {
			r.InputOffice365Mgmt.Pq = &tfTypes.InputOffice365MgmtPq{}
			if resp.InputOffice365Mgmt.Pq.CommitFrequency != nil {
				r.InputOffice365Mgmt.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Mgmt.Pq.CommitFrequency)))
			} else {
				r.InputOffice365Mgmt.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputOffice365Mgmt.Pq.Compress != nil {
				r.InputOffice365Mgmt.Pq.Compress = types.StringValue(string(*resp.InputOffice365Mgmt.Pq.Compress))
			} else {
				r.InputOffice365Mgmt.Pq.Compress = types.StringNull()
			}
			if resp.InputOffice365Mgmt.Pq.MaxBufferSize != nil {
				r.InputOffice365Mgmt.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Mgmt.Pq.MaxBufferSize)))
			} else {
				r.InputOffice365Mgmt.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputOffice365Mgmt.Pq.MaxFileSize = types.StringPointerValue(resp.InputOffice365Mgmt.Pq.MaxFileSize)
			r.InputOffice365Mgmt.Pq.MaxSize = types.StringPointerValue(resp.InputOffice365Mgmt.Pq.MaxSize)
			if resp.InputOffice365Mgmt.Pq.Mode != nil {
				r.InputOffice365Mgmt.Pq.Mode = types.StringValue(string(*resp.InputOffice365Mgmt.Pq.Mode))
			} else {
				r.InputOffice365Mgmt.Pq.Mode = types.StringNull()
			}
			r.InputOffice365Mgmt.Pq.Path = types.StringPointerValue(resp.InputOffice365Mgmt.Pq.Path)
		}
		r.InputOffice365Mgmt.PqEnabled = types.BoolPointerValue(resp.InputOffice365Mgmt.PqEnabled)
		r.InputOffice365Mgmt.PublisherIdentifier = types.StringPointerValue(resp.InputOffice365Mgmt.PublisherIdentifier)
		if resp.InputOffice365Mgmt.RetryRules == nil {
			r.InputOffice365Mgmt.RetryRules = nil
		} else {
			r.InputOffice365Mgmt.RetryRules = &tfTypes.InputOffice365MgmtRetryRules{}
			r.InputOffice365Mgmt.RetryRules.Codes = make([]types.Number, 0, len(resp.InputOffice365Mgmt.RetryRules.Codes))
			for _, v := range resp.InputOffice365Mgmt.RetryRules.Codes {
				r.InputOffice365Mgmt.RetryRules.Codes = append(r.InputOffice365Mgmt.RetryRules.Codes, types.NumberValue(big.NewFloat(float64(v))))
			}
			r.InputOffice365Mgmt.RetryRules.EnableHeader = types.BoolPointerValue(resp.InputOffice365Mgmt.RetryRules.EnableHeader)
			if resp.InputOffice365Mgmt.RetryRules.Interval != nil {
				r.InputOffice365Mgmt.RetryRules.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Mgmt.RetryRules.Interval)))
			} else {
				r.InputOffice365Mgmt.RetryRules.Interval = types.NumberNull()
			}
			if resp.InputOffice365Mgmt.RetryRules.Limit != nil {
				r.InputOffice365Mgmt.RetryRules.Limit = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Mgmt.RetryRules.Limit)))
			} else {
				r.InputOffice365Mgmt.RetryRules.Limit = types.NumberNull()
			}
			if resp.InputOffice365Mgmt.RetryRules.Multiplier != nil {
				r.InputOffice365Mgmt.RetryRules.Multiplier = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Mgmt.RetryRules.Multiplier)))
			} else {
				r.InputOffice365Mgmt.RetryRules.Multiplier = types.NumberNull()
			}
			r.InputOffice365Mgmt.RetryRules.RetryConnectReset = types.BoolPointerValue(resp.InputOffice365Mgmt.RetryRules.RetryConnectReset)
			r.InputOffice365Mgmt.RetryRules.RetryConnectTimeout = types.BoolPointerValue(resp.InputOffice365Mgmt.RetryRules.RetryConnectTimeout)
			if resp.InputOffice365Mgmt.RetryRules.Type != nil {
				r.InputOffice365Mgmt.RetryRules.Type = types.StringValue(string(*resp.InputOffice365Mgmt.RetryRules.Type))
			} else {
				r.InputOffice365Mgmt.RetryRules.Type = types.StringNull()
			}
		}
		r.InputOffice365Mgmt.SendToRoutes = types.BoolPointerValue(resp.InputOffice365Mgmt.SendToRoutes)
		r.InputOffice365Mgmt.Streamtags = make([]types.String, 0, len(resp.InputOffice365Mgmt.Streamtags))
		for _, v := range resp.InputOffice365Mgmt.Streamtags {
			r.InputOffice365Mgmt.Streamtags = append(r.InputOffice365Mgmt.Streamtags, types.StringValue(v))
		}
		r.InputOffice365Mgmt.TenantID = types.StringValue(resp.InputOffice365Mgmt.TenantID)
		r.InputOffice365Mgmt.TextSecret = types.StringPointerValue(resp.InputOffice365Mgmt.TextSecret)
		if resp.InputOffice365Mgmt.Timeout != nil {
			r.InputOffice365Mgmt.Timeout = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Mgmt.Timeout)))
		} else {
			r.InputOffice365Mgmt.Timeout = types.NumberNull()
		}
		r.InputOffice365Mgmt.TTL = types.StringPointerValue(resp.InputOffice365Mgmt.TTL)
		if resp.InputOffice365Mgmt.Type != nil {
			r.InputOffice365Mgmt.Type = types.StringValue(string(*resp.InputOffice365Mgmt.Type))
		} else {
			r.InputOffice365Mgmt.Type = types.StringNull()
		}
	}
	if resp.InputOffice365MsgTrace != nil {
		r.InputOffice365MsgTrace = &tfTypes.InputOffice365MsgTrace{}
		if resp.InputOffice365MsgTrace.AuthType != nil {
			r.InputOffice365MsgTrace.AuthType = types.StringValue(string(*resp.InputOffice365MsgTrace.AuthType))
		} else {
			r.InputOffice365MsgTrace.AuthType = types.StringNull()
		}
		if resp.InputOffice365MsgTrace.CertOptions == nil {
			r.InputOffice365MsgTrace.CertOptions = nil
		} else {
			r.InputOffice365MsgTrace.CertOptions = &tfTypes.CertOptions{}
			r.InputOffice365MsgTrace.CertOptions.CertificateName = types.StringPointerValue(resp.InputOffice365MsgTrace.CertOptions.CertificateName)
			r.InputOffice365MsgTrace.CertOptions.CertPath = types.StringValue(resp.InputOffice365MsgTrace.CertOptions.CertPath)
			r.InputOffice365MsgTrace.CertOptions.Passphrase = types.StringPointerValue(resp.InputOffice365MsgTrace.CertOptions.Passphrase)
			r.InputOffice365MsgTrace.CertOptions.PrivKeyPath = types.StringValue(resp.InputOffice365MsgTrace.CertOptions.PrivKeyPath)
		}
		r.InputOffice365MsgTrace.ClientID = types.StringPointerValue(resp.InputOffice365MsgTrace.ClientID)
		r.InputOffice365MsgTrace.ClientSecret = types.StringPointerValue(resp.InputOffice365MsgTrace.ClientSecret)
		r.InputOffice365MsgTrace.Connections = []tfTypes.InputOffice365MsgTraceConnections{}
		if len(r.InputOffice365MsgTrace.Connections) > len(resp.InputOffice365MsgTrace.Connections) {
			r.InputOffice365MsgTrace.Connections = r.InputOffice365MsgTrace.Connections[:len(resp.InputOffice365MsgTrace.Connections)]
		}
		for connectionsCount41, connectionsItem41 := range resp.InputOffice365MsgTrace.Connections {
			var connections83 tfTypes.InputOffice365MsgTraceConnections
			connections83.Output = types.StringValue(connectionsItem41.Output)
			connections83.Pipeline = types.StringPointerValue(connectionsItem41.Pipeline)
			if connectionsCount41+1 > len(r.InputOffice365MsgTrace.Connections) {
				r.InputOffice365MsgTrace.Connections = append(r.InputOffice365MsgTrace.Connections, connections83)
			} else {
				r.InputOffice365MsgTrace.Connections[connectionsCount41].Output = connections83.Output
				r.InputOffice365MsgTrace.Connections[connectionsCount41].Pipeline = connections83.Pipeline
			}
		}
		r.InputOffice365MsgTrace.CredentialsSecret = types.StringPointerValue(resp.InputOffice365MsgTrace.CredentialsSecret)
		r.InputOffice365MsgTrace.Description = types.StringPointerValue(resp.InputOffice365MsgTrace.Description)
		r.InputOffice365MsgTrace.Disabled = types.BoolPointerValue(resp.InputOffice365MsgTrace.Disabled)
		r.InputOffice365MsgTrace.DisableTimeFilter = types.BoolPointerValue(resp.InputOffice365MsgTrace.DisableTimeFilter)
		r.InputOffice365MsgTrace.EndDate = types.StringPointerValue(resp.InputOffice365MsgTrace.EndDate)
		r.InputOffice365MsgTrace.Environment = types.StringPointerValue(resp.InputOffice365MsgTrace.Environment)
		r.InputOffice365MsgTrace.ID = types.StringPointerValue(resp.InputOffice365MsgTrace.ID)
		if resp.InputOffice365MsgTrace.Interval != nil {
			r.InputOffice365MsgTrace.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365MsgTrace.Interval)))
		} else {
			r.InputOffice365MsgTrace.Interval = types.NumberNull()
		}
		r.InputOffice365MsgTrace.JobTimeout = types.StringPointerValue(resp.InputOffice365MsgTrace.JobTimeout)
		if resp.InputOffice365MsgTrace.KeepAliveTime != nil {
			r.InputOffice365MsgTrace.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365MsgTrace.KeepAliveTime)))
		} else {
			r.InputOffice365MsgTrace.KeepAliveTime = types.NumberNull()
		}
		if resp.InputOffice365MsgTrace.LogLevel != nil {
			r.InputOffice365MsgTrace.LogLevel = types.StringValue(string(*resp.InputOffice365MsgTrace.LogLevel))
		} else {
			r.InputOffice365MsgTrace.LogLevel = types.StringNull()
		}
		if resp.InputOffice365MsgTrace.MaxMissedKeepAlives != nil {
			r.InputOffice365MsgTrace.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365MsgTrace.MaxMissedKeepAlives)))
		} else {
			r.InputOffice365MsgTrace.MaxMissedKeepAlives = types.NumberNull()
		}
		if resp.InputOffice365MsgTrace.MaxTaskReschedule != nil {
			r.InputOffice365MsgTrace.MaxTaskReschedule = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365MsgTrace.MaxTaskReschedule)))
		} else {
			r.InputOffice365MsgTrace.MaxTaskReschedule = types.NumberNull()
		}
		r.InputOffice365MsgTrace.Metadata = []tfTypes.InputOffice365MsgTraceMetadata{}
		if len(r.InputOffice365MsgTrace.Metadata) > len(resp.InputOffice365MsgTrace.Metadata) {
			r.InputOffice365MsgTrace.Metadata = r.InputOffice365MsgTrace.Metadata[:len(resp.InputOffice365MsgTrace.Metadata)]
		}
		for metadataCount45, metadataItem45 := range resp.InputOffice365MsgTrace.Metadata {
			var metadata91 tfTypes.InputOffice365MsgTraceMetadata
			metadata91.Name = types.StringValue(metadataItem45.Name)
			metadata91.Value = types.StringValue(metadataItem45.Value)
			if metadataCount45+1 > len(r.InputOffice365MsgTrace.Metadata) {
				r.InputOffice365MsgTrace.Metadata = append(r.InputOffice365MsgTrace.Metadata, metadata91)
			} else {
				r.InputOffice365MsgTrace.Metadata[metadataCount45].Name = metadata91.Name
				r.InputOffice365MsgTrace.Metadata[metadataCount45].Value = metadata91.Value
			}
		}
		r.InputOffice365MsgTrace.Password = types.StringPointerValue(resp.InputOffice365MsgTrace.Password)
		r.InputOffice365MsgTrace.Pipeline = types.StringPointerValue(resp.InputOffice365MsgTrace.Pipeline)
		if resp.InputOffice365MsgTrace.PlanType != nil {
			r.InputOffice365MsgTrace.PlanType = types.StringValue(string(*resp.InputOffice365MsgTrace.PlanType))
		} else {
			r.InputOffice365MsgTrace.PlanType = types.StringNull()
		}
		if resp.InputOffice365MsgTrace.Pq == nil {
			r.InputOffice365MsgTrace.Pq = nil
		} else {
			r.InputOffice365MsgTrace.Pq = &tfTypes.InputOffice365MsgTracePq{}
			if resp.InputOffice365MsgTrace.Pq.CommitFrequency != nil {
				r.InputOffice365MsgTrace.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365MsgTrace.Pq.CommitFrequency)))
			} else {
				r.InputOffice365MsgTrace.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputOffice365MsgTrace.Pq.Compress != nil {
				r.InputOffice365MsgTrace.Pq.Compress = types.StringValue(string(*resp.InputOffice365MsgTrace.Pq.Compress))
			} else {
				r.InputOffice365MsgTrace.Pq.Compress = types.StringNull()
			}
			if resp.InputOffice365MsgTrace.Pq.MaxBufferSize != nil {
				r.InputOffice365MsgTrace.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365MsgTrace.Pq.MaxBufferSize)))
			} else {
				r.InputOffice365MsgTrace.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputOffice365MsgTrace.Pq.MaxFileSize = types.StringPointerValue(resp.InputOffice365MsgTrace.Pq.MaxFileSize)
			r.InputOffice365MsgTrace.Pq.MaxSize = types.StringPointerValue(resp.InputOffice365MsgTrace.Pq.MaxSize)
			if resp.InputOffice365MsgTrace.Pq.Mode != nil {
				r.InputOffice365MsgTrace.Pq.Mode = types.StringValue(string(*resp.InputOffice365MsgTrace.Pq.Mode))
			} else {
				r.InputOffice365MsgTrace.Pq.Mode = types.StringNull()
			}
			r.InputOffice365MsgTrace.Pq.Path = types.StringPointerValue(resp.InputOffice365MsgTrace.Pq.Path)
		}
		r.InputOffice365MsgTrace.PqEnabled = types.BoolPointerValue(resp.InputOffice365MsgTrace.PqEnabled)
		r.InputOffice365MsgTrace.RescheduleDroppedTasks = types.BoolPointerValue(resp.InputOffice365MsgTrace.RescheduleDroppedTasks)
		r.InputOffice365MsgTrace.Resource = types.StringPointerValue(resp.InputOffice365MsgTrace.Resource)
		if resp.InputOffice365MsgTrace.RetryRules == nil {
			r.InputOffice365MsgTrace.RetryRules = nil
		} else {
			r.InputOffice365MsgTrace.RetryRules = &tfTypes.InputOffice365MsgTraceRetryRules{}
			r.InputOffice365MsgTrace.RetryRules.Codes = make([]types.Number, 0, len(resp.InputOffice365MsgTrace.RetryRules.Codes))
			for _, v := range resp.InputOffice365MsgTrace.RetryRules.Codes {
				r.InputOffice365MsgTrace.RetryRules.Codes = append(r.InputOffice365MsgTrace.RetryRules.Codes, types.NumberValue(big.NewFloat(float64(v))))
			}
			r.InputOffice365MsgTrace.RetryRules.EnableHeader = types.BoolPointerValue(resp.InputOffice365MsgTrace.RetryRules.EnableHeader)
			if resp.InputOffice365MsgTrace.RetryRules.Interval != nil {
				r.InputOffice365MsgTrace.RetryRules.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365MsgTrace.RetryRules.Interval)))
			} else {
				r.InputOffice365MsgTrace.RetryRules.Interval = types.NumberNull()
			}
			if resp.InputOffice365MsgTrace.RetryRules.Limit != nil {
				r.InputOffice365MsgTrace.RetryRules.Limit = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365MsgTrace.RetryRules.Limit)))
			} else {
				r.InputOffice365MsgTrace.RetryRules.Limit = types.NumberNull()
			}
			if resp.InputOffice365MsgTrace.RetryRules.Multiplier != nil {
				r.InputOffice365MsgTrace.RetryRules.Multiplier = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365MsgTrace.RetryRules.Multiplier)))
			} else {
				r.InputOffice365MsgTrace.RetryRules.Multiplier = types.NumberNull()
			}
			r.InputOffice365MsgTrace.RetryRules.RetryConnectReset = types.BoolPointerValue(resp.InputOffice365MsgTrace.RetryRules.RetryConnectReset)
			r.InputOffice365MsgTrace.RetryRules.RetryConnectTimeout = types.BoolPointerValue(resp.InputOffice365MsgTrace.RetryRules.RetryConnectTimeout)
			if resp.InputOffice365MsgTrace.RetryRules.Type != nil {
				r.InputOffice365MsgTrace.RetryRules.Type = types.StringValue(string(*resp.InputOffice365MsgTrace.RetryRules.Type))
			} else {
				r.InputOffice365MsgTrace.RetryRules.Type = types.StringNull()
			}
		}
		r.InputOffice365MsgTrace.SendToRoutes = types.BoolPointerValue(resp.InputOffice365MsgTrace.SendToRoutes)
		r.InputOffice365MsgTrace.StartDate = types.StringPointerValue(resp.InputOffice365MsgTrace.StartDate)
		r.InputOffice365MsgTrace.Streamtags = make([]types.String, 0, len(resp.InputOffice365MsgTrace.Streamtags))
		for _, v := range resp.InputOffice365MsgTrace.Streamtags {
			r.InputOffice365MsgTrace.Streamtags = append(r.InputOffice365MsgTrace.Streamtags, types.StringValue(v))
		}
		r.InputOffice365MsgTrace.TenantID = types.StringPointerValue(resp.InputOffice365MsgTrace.TenantID)
		r.InputOffice365MsgTrace.TextSecret = types.StringPointerValue(resp.InputOffice365MsgTrace.TextSecret)
		if resp.InputOffice365MsgTrace.Timeout != nil {
			r.InputOffice365MsgTrace.Timeout = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365MsgTrace.Timeout)))
		} else {
			r.InputOffice365MsgTrace.Timeout = types.NumberNull()
		}
		r.InputOffice365MsgTrace.TTL = types.StringPointerValue(resp.InputOffice365MsgTrace.TTL)
		if resp.InputOffice365MsgTrace.Type != nil {
			r.InputOffice365MsgTrace.Type = types.StringValue(string(*resp.InputOffice365MsgTrace.Type))
		} else {
			r.InputOffice365MsgTrace.Type = types.StringNull()
		}
		r.InputOffice365MsgTrace.URL = types.StringPointerValue(resp.InputOffice365MsgTrace.URL)
		r.InputOffice365MsgTrace.Username = types.StringPointerValue(resp.InputOffice365MsgTrace.Username)
	}
	if resp.InputOffice365Service != nil {
		r.InputOffice365Service = &tfTypes.InputOffice365Service{}
		r.InputOffice365Service.AppID = types.StringValue(resp.InputOffice365Service.AppID)
		if resp.InputOffice365Service.AuthType != nil {
			r.InputOffice365Service.AuthType = types.StringValue(string(*resp.InputOffice365Service.AuthType))
		} else {
			r.InputOffice365Service.AuthType = types.StringNull()
		}
		r.InputOffice365Service.ClientSecret = types.StringPointerValue(resp.InputOffice365Service.ClientSecret)
		r.InputOffice365Service.Connections = []tfTypes.InputOffice365ServiceConnections{}
		if len(r.InputOffice365Service.Connections) > len(resp.InputOffice365Service.Connections) {
			r.InputOffice365Service.Connections = r.InputOffice365Service.Connections[:len(resp.InputOffice365Service.Connections)]
		}
		for connectionsCount42, connectionsItem42 := range resp.InputOffice365Service.Connections {
			var connections85 tfTypes.InputOffice365ServiceConnections
			connections85.Output = types.StringValue(connectionsItem42.Output)
			connections85.Pipeline = types.StringPointerValue(connectionsItem42.Pipeline)
			if connectionsCount42+1 > len(r.InputOffice365Service.Connections) {
				r.InputOffice365Service.Connections = append(r.InputOffice365Service.Connections, connections85)
			} else {
				r.InputOffice365Service.Connections[connectionsCount42].Output = connections85.Output
				r.InputOffice365Service.Connections[connectionsCount42].Pipeline = connections85.Pipeline
			}
		}
		r.InputOffice365Service.ContentConfig = []tfTypes.InputOffice365ServiceContentConfig{}
		if len(r.InputOffice365Service.ContentConfig) > len(resp.InputOffice365Service.ContentConfig) {
			r.InputOffice365Service.ContentConfig = r.InputOffice365Service.ContentConfig[:len(resp.InputOffice365Service.ContentConfig)]
		}
		for contentConfigCount2, contentConfigItem2 := range resp.InputOffice365Service.ContentConfig {
			var contentConfig5 tfTypes.InputOffice365ServiceContentConfig
			contentConfig5.ContentType = types.StringPointerValue(contentConfigItem2.ContentType)
			contentConfig5.Description = types.StringPointerValue(contentConfigItem2.Description)
			contentConfig5.Enabled = types.BoolPointerValue(contentConfigItem2.Enabled)
			if contentConfigItem2.Interval != nil {
				contentConfig5.Interval = types.NumberValue(big.NewFloat(float64(*contentConfigItem2.Interval)))
			} else {
				contentConfig5.Interval = types.NumberNull()
			}
			if contentConfigItem2.LogLevel != nil {
				contentConfig5.LogLevel = types.StringValue(string(*contentConfigItem2.LogLevel))
			} else {
				contentConfig5.LogLevel = types.StringNull()
			}
			if contentConfigCount2+1 > len(r.InputOffice365Service.ContentConfig) {
				r.InputOffice365Service.ContentConfig = append(r.InputOffice365Service.ContentConfig, contentConfig5)
			} else {
				r.InputOffice365Service.ContentConfig[contentConfigCount2].ContentType = contentConfig5.ContentType
				r.InputOffice365Service.ContentConfig[contentConfigCount2].Description = contentConfig5.Description
				r.InputOffice365Service.ContentConfig[contentConfigCount2].Enabled = contentConfig5.Enabled
				r.InputOffice365Service.ContentConfig[contentConfigCount2].Interval = contentConfig5.Interval
				r.InputOffice365Service.ContentConfig[contentConfigCount2].LogLevel = contentConfig5.LogLevel
			}
		}
		r.InputOffice365Service.Description = types.StringPointerValue(resp.InputOffice365Service.Description)
		r.InputOffice365Service.Disabled = types.BoolPointerValue(resp.InputOffice365Service.Disabled)
		r.InputOffice365Service.Environment = types.StringPointerValue(resp.InputOffice365Service.Environment)
		r.InputOffice365Service.ID = types.StringPointerValue(resp.InputOffice365Service.ID)
		r.InputOffice365Service.JobTimeout = types.StringPointerValue(resp.InputOffice365Service.JobTimeout)
		if resp.InputOffice365Service.KeepAliveTime != nil {
			r.InputOffice365Service.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Service.KeepAliveTime)))
		} else {
			r.InputOffice365Service.KeepAliveTime = types.NumberNull()
		}
		if resp.InputOffice365Service.MaxMissedKeepAlives != nil {
			r.InputOffice365Service.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Service.MaxMissedKeepAlives)))
		} else {
			r.InputOffice365Service.MaxMissedKeepAlives = types.NumberNull()
		}
		r.InputOffice365Service.Metadata = []tfTypes.InputOffice365ServiceMetadata{}
		if len(r.InputOffice365Service.Metadata) > len(resp.InputOffice365Service.Metadata) {
			r.InputOffice365Service.Metadata = r.InputOffice365Service.Metadata[:len(resp.InputOffice365Service.Metadata)]
		}
		for metadataCount46, metadataItem46 := range resp.InputOffice365Service.Metadata {
			var metadata93 tfTypes.InputOffice365ServiceMetadata
			metadata93.Name = types.StringValue(metadataItem46.Name)
			metadata93.Value = types.StringValue(metadataItem46.Value)
			if metadataCount46+1 > len(r.InputOffice365Service.Metadata) {
				r.InputOffice365Service.Metadata = append(r.InputOffice365Service.Metadata, metadata93)
			} else {
				r.InputOffice365Service.Metadata[metadataCount46].Name = metadata93.Name
				r.InputOffice365Service.Metadata[metadataCount46].Value = metadata93.Value
			}
		}
		r.InputOffice365Service.Pipeline = types.StringPointerValue(resp.InputOffice365Service.Pipeline)
		if resp.InputOffice365Service.PlanType != nil {
			r.InputOffice365Service.PlanType = types.StringValue(string(*resp.InputOffice365Service.PlanType))
		} else {
			r.InputOffice365Service.PlanType = types.StringNull()
		}
		if resp.InputOffice365Service.Pq == nil {
			r.InputOffice365Service.Pq = nil
		} else {
			r.InputOffice365Service.Pq = &tfTypes.InputOffice365ServicePq{}
			if resp.InputOffice365Service.Pq.CommitFrequency != nil {
				r.InputOffice365Service.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Service.Pq.CommitFrequency)))
			} else {
				r.InputOffice365Service.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputOffice365Service.Pq.Compress != nil {
				r.InputOffice365Service.Pq.Compress = types.StringValue(string(*resp.InputOffice365Service.Pq.Compress))
			} else {
				r.InputOffice365Service.Pq.Compress = types.StringNull()
			}
			if resp.InputOffice365Service.Pq.MaxBufferSize != nil {
				r.InputOffice365Service.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Service.Pq.MaxBufferSize)))
			} else {
				r.InputOffice365Service.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputOffice365Service.Pq.MaxFileSize = types.StringPointerValue(resp.InputOffice365Service.Pq.MaxFileSize)
			r.InputOffice365Service.Pq.MaxSize = types.StringPointerValue(resp.InputOffice365Service.Pq.MaxSize)
			if resp.InputOffice365Service.Pq.Mode != nil {
				r.InputOffice365Service.Pq.Mode = types.StringValue(string(*resp.InputOffice365Service.Pq.Mode))
			} else {
				r.InputOffice365Service.Pq.Mode = types.StringNull()
			}
			r.InputOffice365Service.Pq.Path = types.StringPointerValue(resp.InputOffice365Service.Pq.Path)
		}
		r.InputOffice365Service.PqEnabled = types.BoolPointerValue(resp.InputOffice365Service.PqEnabled)
		if resp.InputOffice365Service.RetryRules == nil {
			r.InputOffice365Service.RetryRules = nil
		} else {
			r.InputOffice365Service.RetryRules = &tfTypes.InputOffice365ServiceRetryRules{}
			r.InputOffice365Service.RetryRules.Codes = make([]types.Number, 0, len(resp.InputOffice365Service.RetryRules.Codes))
			for _, v := range resp.InputOffice365Service.RetryRules.Codes {
				r.InputOffice365Service.RetryRules.Codes = append(r.InputOffice365Service.RetryRules.Codes, types.NumberValue(big.NewFloat(float64(v))))
			}
			r.InputOffice365Service.RetryRules.EnableHeader = types.BoolPointerValue(resp.InputOffice365Service.RetryRules.EnableHeader)
			if resp.InputOffice365Service.RetryRules.Interval != nil {
				r.InputOffice365Service.RetryRules.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Service.RetryRules.Interval)))
			} else {
				r.InputOffice365Service.RetryRules.Interval = types.NumberNull()
			}
			if resp.InputOffice365Service.RetryRules.Limit != nil {
				r.InputOffice365Service.RetryRules.Limit = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Service.RetryRules.Limit)))
			} else {
				r.InputOffice365Service.RetryRules.Limit = types.NumberNull()
			}
			if resp.InputOffice365Service.RetryRules.Multiplier != nil {
				r.InputOffice365Service.RetryRules.Multiplier = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Service.RetryRules.Multiplier)))
			} else {
				r.InputOffice365Service.RetryRules.Multiplier = types.NumberNull()
			}
			r.InputOffice365Service.RetryRules.RetryConnectReset = types.BoolPointerValue(resp.InputOffice365Service.RetryRules.RetryConnectReset)
			r.InputOffice365Service.RetryRules.RetryConnectTimeout = types.BoolPointerValue(resp.InputOffice365Service.RetryRules.RetryConnectTimeout)
			if resp.InputOffice365Service.RetryRules.Type != nil {
				r.InputOffice365Service.RetryRules.Type = types.StringValue(string(*resp.InputOffice365Service.RetryRules.Type))
			} else {
				r.InputOffice365Service.RetryRules.Type = types.StringNull()
			}
		}
		r.InputOffice365Service.SendToRoutes = types.BoolPointerValue(resp.InputOffice365Service.SendToRoutes)
		r.InputOffice365Service.Streamtags = make([]types.String, 0, len(resp.InputOffice365Service.Streamtags))
		for _, v := range resp.InputOffice365Service.Streamtags {
			r.InputOffice365Service.Streamtags = append(r.InputOffice365Service.Streamtags, types.StringValue(v))
		}
		r.InputOffice365Service.TenantID = types.StringValue(resp.InputOffice365Service.TenantID)
		r.InputOffice365Service.TextSecret = types.StringPointerValue(resp.InputOffice365Service.TextSecret)
		if resp.InputOffice365Service.Timeout != nil {
			r.InputOffice365Service.Timeout = types.NumberValue(big.NewFloat(float64(*resp.InputOffice365Service.Timeout)))
		} else {
			r.InputOffice365Service.Timeout = types.NumberNull()
		}
		r.InputOffice365Service.TTL = types.StringPointerValue(resp.InputOffice365Service.TTL)
		if resp.InputOffice365Service.Type != nil {
			r.InputOffice365Service.Type = types.StringValue(string(*resp.InputOffice365Service.Type))
		} else {
			r.InputOffice365Service.Type = types.StringNull()
		}
	}
	if resp.InputOpenTelemetry != nil {
		r.InputOpenTelemetry = &tfTypes.InputOpenTelemetry{}
		if resp.InputOpenTelemetry.ActivityLogSampleRate == nil {
			r.InputOpenTelemetry.ActivityLogSampleRate = types.StringNull()
		} else {
			activityLogSampleRateResult, _ := json.Marshal(resp.InputOpenTelemetry.ActivityLogSampleRate)
			r.InputOpenTelemetry.ActivityLogSampleRate = types.StringValue(string(activityLogSampleRateResult))
		}
		r.InputOpenTelemetry.AuthHeaderExpr = types.StringPointerValue(resp.InputOpenTelemetry.AuthHeaderExpr)
		if resp.InputOpenTelemetry.AuthType != nil {
			r.InputOpenTelemetry.AuthType = types.StringValue(string(*resp.InputOpenTelemetry.AuthType))
		} else {
			r.InputOpenTelemetry.AuthType = types.StringNull()
		}
		if resp.InputOpenTelemetry.CaptureHeaders == nil {
			r.InputOpenTelemetry.CaptureHeaders = types.StringNull()
		} else {
			captureHeadersResult, _ := json.Marshal(resp.InputOpenTelemetry.CaptureHeaders)
			r.InputOpenTelemetry.CaptureHeaders = types.StringValue(string(captureHeadersResult))
		}
		r.InputOpenTelemetry.Connections = []tfTypes.InputOpenTelemetryConnections{}
		if len(r.InputOpenTelemetry.Connections) > len(resp.InputOpenTelemetry.Connections) {
			r.InputOpenTelemetry.Connections = r.InputOpenTelemetry.Connections[:len(resp.InputOpenTelemetry.Connections)]
		}
		for connectionsCount43, connectionsItem43 := range resp.InputOpenTelemetry.Connections {
			var connections87 tfTypes.InputOpenTelemetryConnections
			connections87.Output = types.StringValue(connectionsItem43.Output)
			connections87.Pipeline = types.StringPointerValue(connectionsItem43.Pipeline)
			if connectionsCount43+1 > len(r.InputOpenTelemetry.Connections) {
				r.InputOpenTelemetry.Connections = append(r.InputOpenTelemetry.Connections, connections87)
			} else {
				r.InputOpenTelemetry.Connections[connectionsCount43].Output = connections87.Output
				r.InputOpenTelemetry.Connections[connectionsCount43].Pipeline = connections87.Pipeline
			}
		}
		r.InputOpenTelemetry.CredentialsSecret = types.StringPointerValue(resp.InputOpenTelemetry.CredentialsSecret)
		r.InputOpenTelemetry.Description = types.StringPointerValue(resp.InputOpenTelemetry.Description)
		r.InputOpenTelemetry.Disabled = types.BoolPointerValue(resp.InputOpenTelemetry.Disabled)
		r.InputOpenTelemetry.EnableHealthCheck = types.BoolPointerValue(resp.InputOpenTelemetry.EnableHealthCheck)
		if resp.InputOpenTelemetry.EnableProxyHeader == nil {
			r.InputOpenTelemetry.EnableProxyHeader = types.StringNull()
		} else {
			enableProxyHeaderResult, _ := json.Marshal(resp.InputOpenTelemetry.EnableProxyHeader)
			r.InputOpenTelemetry.EnableProxyHeader = types.StringValue(string(enableProxyHeaderResult))
		}
		r.InputOpenTelemetry.Environment = types.StringPointerValue(resp.InputOpenTelemetry.Environment)
		r.InputOpenTelemetry.ExtractLogs = types.BoolPointerValue(resp.InputOpenTelemetry.ExtractLogs)
		r.InputOpenTelemetry.ExtractMetrics = types.BoolPointerValue(resp.InputOpenTelemetry.ExtractMetrics)
		r.InputOpenTelemetry.ExtractSpans = types.BoolPointerValue(resp.InputOpenTelemetry.ExtractSpans)
		r.InputOpenTelemetry.Host = types.StringPointerValue(resp.InputOpenTelemetry.Host)
		r.InputOpenTelemetry.ID = types.StringPointerValue(resp.InputOpenTelemetry.ID)
		r.InputOpenTelemetry.IPAllowlistRegex = types.StringPointerValue(resp.InputOpenTelemetry.IPAllowlistRegex)
		r.InputOpenTelemetry.IPDenylistRegex = types.StringPointerValue(resp.InputOpenTelemetry.IPDenylistRegex)
		if resp.InputOpenTelemetry.KeepAliveTimeout != nil {
			r.InputOpenTelemetry.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputOpenTelemetry.KeepAliveTimeout)))
		} else {
			r.InputOpenTelemetry.KeepAliveTimeout = types.NumberNull()
		}
		r.InputOpenTelemetry.LoginURL = types.StringPointerValue(resp.InputOpenTelemetry.LoginURL)
		if resp.InputOpenTelemetry.MaxActiveCxn != nil {
			r.InputOpenTelemetry.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*resp.InputOpenTelemetry.MaxActiveCxn)))
		} else {
			r.InputOpenTelemetry.MaxActiveCxn = types.NumberNull()
		}
		if resp.InputOpenTelemetry.MaxActiveReq != nil {
			r.InputOpenTelemetry.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputOpenTelemetry.MaxActiveReq)))
		} else {
			r.InputOpenTelemetry.MaxActiveReq = types.NumberNull()
		}
		r.InputOpenTelemetry.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputOpenTelemetry.MaxRequestsPerSocket)
		r.InputOpenTelemetry.Metadata = []tfTypes.InputOpenTelemetryMetadata{}
		if len(r.InputOpenTelemetry.Metadata) > len(resp.InputOpenTelemetry.Metadata) {
			r.InputOpenTelemetry.Metadata = r.InputOpenTelemetry.Metadata[:len(resp.InputOpenTelemetry.Metadata)]
		}
		for metadataCount47, metadataItem47 := range resp.InputOpenTelemetry.Metadata {
			var metadata95 tfTypes.InputOpenTelemetryMetadata
			metadata95.Name = types.StringValue(metadataItem47.Name)
			metadata95.Value = types.StringValue(metadataItem47.Value)
			if metadataCount47+1 > len(r.InputOpenTelemetry.Metadata) {
				r.InputOpenTelemetry.Metadata = append(r.InputOpenTelemetry.Metadata, metadata95)
			} else {
				r.InputOpenTelemetry.Metadata[metadataCount47].Name = metadata95.Name
				r.InputOpenTelemetry.Metadata[metadataCount47].Value = metadata95.Value
			}
		}
		r.InputOpenTelemetry.OauthHeaders = []tfTypes.InputOpenTelemetryOauthHeaders{}
		if len(r.InputOpenTelemetry.OauthHeaders) > len(resp.InputOpenTelemetry.OauthHeaders) {
			r.InputOpenTelemetry.OauthHeaders = r.InputOpenTelemetry.OauthHeaders[:len(resp.InputOpenTelemetry.OauthHeaders)]
		}
		for oauthHeadersCount5, oauthHeadersItem5 := range resp.InputOpenTelemetry.OauthHeaders {
			var oauthHeaders11 tfTypes.InputOpenTelemetryOauthHeaders
			oauthHeaders11.Name = types.StringValue(oauthHeadersItem5.Name)
			oauthHeaders11.Value = types.StringValue(oauthHeadersItem5.Value)
			if oauthHeadersCount5+1 > len(r.InputOpenTelemetry.OauthHeaders) {
				r.InputOpenTelemetry.OauthHeaders = append(r.InputOpenTelemetry.OauthHeaders, oauthHeaders11)
			} else {
				r.InputOpenTelemetry.OauthHeaders[oauthHeadersCount5].Name = oauthHeaders11.Name
				r.InputOpenTelemetry.OauthHeaders[oauthHeadersCount5].Value = oauthHeaders11.Value
			}
		}
		r.InputOpenTelemetry.OauthParams = []tfTypes.InputOpenTelemetryOauthParams{}
		if len(r.InputOpenTelemetry.OauthParams) > len(resp.InputOpenTelemetry.OauthParams) {
			r.InputOpenTelemetry.OauthParams = r.InputOpenTelemetry.OauthParams[:len(resp.InputOpenTelemetry.OauthParams)]
		}
		for oauthParamsCount5, oauthParamsItem5 := range resp.InputOpenTelemetry.OauthParams {
			var oauthParams11 tfTypes.InputOpenTelemetryOauthParams
			oauthParams11.Name = types.StringValue(oauthParamsItem5.Name)
			oauthParams11.Value = types.StringValue(oauthParamsItem5.Value)
			if oauthParamsCount5+1 > len(r.InputOpenTelemetry.OauthParams) {
				r.InputOpenTelemetry.OauthParams = append(r.InputOpenTelemetry.OauthParams, oauthParams11)
			} else {
				r.InputOpenTelemetry.OauthParams[oauthParamsCount5].Name = oauthParams11.Name
				r.InputOpenTelemetry.OauthParams[oauthParamsCount5].Value = oauthParams11.Value
			}
		}
		if resp.InputOpenTelemetry.OtlpVersion != nil {
			r.InputOpenTelemetry.OtlpVersion = types.StringValue(string(*resp.InputOpenTelemetry.OtlpVersion))
		} else {
			r.InputOpenTelemetry.OtlpVersion = types.StringNull()
		}
		r.InputOpenTelemetry.Password = types.StringPointerValue(resp.InputOpenTelemetry.Password)
		r.InputOpenTelemetry.Pipeline = types.StringPointerValue(resp.InputOpenTelemetry.Pipeline)
		if resp.InputOpenTelemetry.Port != nil {
			r.InputOpenTelemetry.Port = types.NumberValue(big.NewFloat(float64(*resp.InputOpenTelemetry.Port)))
		} else {
			r.InputOpenTelemetry.Port = types.NumberNull()
		}
		if resp.InputOpenTelemetry.Pq == nil {
			r.InputOpenTelemetry.Pq = nil
		} else {
			r.InputOpenTelemetry.Pq = &tfTypes.InputOpenTelemetryPq{}
			if resp.InputOpenTelemetry.Pq.CommitFrequency != nil {
				r.InputOpenTelemetry.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputOpenTelemetry.Pq.CommitFrequency)))
			} else {
				r.InputOpenTelemetry.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputOpenTelemetry.Pq.Compress != nil {
				r.InputOpenTelemetry.Pq.Compress = types.StringValue(string(*resp.InputOpenTelemetry.Pq.Compress))
			} else {
				r.InputOpenTelemetry.Pq.Compress = types.StringNull()
			}
			if resp.InputOpenTelemetry.Pq.MaxBufferSize != nil {
				r.InputOpenTelemetry.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputOpenTelemetry.Pq.MaxBufferSize)))
			} else {
				r.InputOpenTelemetry.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputOpenTelemetry.Pq.MaxFileSize = types.StringPointerValue(resp.InputOpenTelemetry.Pq.MaxFileSize)
			r.InputOpenTelemetry.Pq.MaxSize = types.StringPointerValue(resp.InputOpenTelemetry.Pq.MaxSize)
			if resp.InputOpenTelemetry.Pq.Mode != nil {
				r.InputOpenTelemetry.Pq.Mode = types.StringValue(string(*resp.InputOpenTelemetry.Pq.Mode))
			} else {
				r.InputOpenTelemetry.Pq.Mode = types.StringNull()
			}
			r.InputOpenTelemetry.Pq.Path = types.StringPointerValue(resp.InputOpenTelemetry.Pq.Path)
		}
		r.InputOpenTelemetry.PqEnabled = types.BoolPointerValue(resp.InputOpenTelemetry.PqEnabled)
		if resp.InputOpenTelemetry.Protocol != nil {
			r.InputOpenTelemetry.Protocol = types.StringValue(string(*resp.InputOpenTelemetry.Protocol))
		} else {
			r.InputOpenTelemetry.Protocol = types.StringNull()
		}
		if resp.InputOpenTelemetry.RequestTimeout != nil {
			r.InputOpenTelemetry.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputOpenTelemetry.RequestTimeout)))
		} else {
			r.InputOpenTelemetry.RequestTimeout = types.NumberNull()
		}
		r.InputOpenTelemetry.Secret = types.StringPointerValue(resp.InputOpenTelemetry.Secret)
		r.InputOpenTelemetry.SecretParamName = types.StringPointerValue(resp.InputOpenTelemetry.SecretParamName)
		r.InputOpenTelemetry.SendToRoutes = types.BoolPointerValue(resp.InputOpenTelemetry.SendToRoutes)
		if resp.InputOpenTelemetry.SocketTimeout != nil {
			r.InputOpenTelemetry.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputOpenTelemetry.SocketTimeout)))
		} else {
			r.InputOpenTelemetry.SocketTimeout = types.NumberNull()
		}
		r.InputOpenTelemetry.Streamtags = make([]types.String, 0, len(resp.InputOpenTelemetry.Streamtags))
		for _, v := range resp.InputOpenTelemetry.Streamtags {
			r.InputOpenTelemetry.Streamtags = append(r.InputOpenTelemetry.Streamtags, types.StringValue(v))
		}
		r.InputOpenTelemetry.TextSecret = types.StringPointerValue(resp.InputOpenTelemetry.TextSecret)
		if resp.InputOpenTelemetry.TLS == nil {
			r.InputOpenTelemetry.TLS = nil
		} else {
			r.InputOpenTelemetry.TLS = &tfTypes.InputOpenTelemetryTLSSettingsServerSide{}
			r.InputOpenTelemetry.TLS.CaPath = types.StringPointerValue(resp.InputOpenTelemetry.TLS.CaPath)
			r.InputOpenTelemetry.TLS.CertificateName = types.StringPointerValue(resp.InputOpenTelemetry.TLS.CertificateName)
			r.InputOpenTelemetry.TLS.CertPath = types.StringPointerValue(resp.InputOpenTelemetry.TLS.CertPath)
			if resp.InputOpenTelemetry.TLS.CommonNameRegex == nil {
				r.InputOpenTelemetry.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult15, _ := json.Marshal(resp.InputOpenTelemetry.TLS.CommonNameRegex)
				r.InputOpenTelemetry.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult15))
			}
			r.InputOpenTelemetry.TLS.Disabled = types.BoolPointerValue(resp.InputOpenTelemetry.TLS.Disabled)
			if resp.InputOpenTelemetry.TLS.MaxVersion != nil {
				r.InputOpenTelemetry.TLS.MaxVersion = types.StringValue(string(*resp.InputOpenTelemetry.TLS.MaxVersion))
			} else {
				r.InputOpenTelemetry.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputOpenTelemetry.TLS.MinVersion != nil {
				r.InputOpenTelemetry.TLS.MinVersion = types.StringValue(string(*resp.InputOpenTelemetry.TLS.MinVersion))
			} else {
				r.InputOpenTelemetry.TLS.MinVersion = types.StringNull()
			}
			r.InputOpenTelemetry.TLS.Passphrase = types.StringPointerValue(resp.InputOpenTelemetry.TLS.Passphrase)
			r.InputOpenTelemetry.TLS.PrivKeyPath = types.StringPointerValue(resp.InputOpenTelemetry.TLS.PrivKeyPath)
			if resp.InputOpenTelemetry.TLS.RejectUnauthorized == nil {
				r.InputOpenTelemetry.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult15, _ := json.Marshal(resp.InputOpenTelemetry.TLS.RejectUnauthorized)
				r.InputOpenTelemetry.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult15))
			}
			r.InputOpenTelemetry.TLS.RequestCert = types.BoolPointerValue(resp.InputOpenTelemetry.TLS.RequestCert)
		}
		r.InputOpenTelemetry.Token = types.StringPointerValue(resp.InputOpenTelemetry.Token)
		r.InputOpenTelemetry.TokenAttributeName = types.StringPointerValue(resp.InputOpenTelemetry.TokenAttributeName)
		if resp.InputOpenTelemetry.TokenTimeoutSecs != nil {
			r.InputOpenTelemetry.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*resp.InputOpenTelemetry.TokenTimeoutSecs)))
		} else {
			r.InputOpenTelemetry.TokenTimeoutSecs = types.NumberNull()
		}
		if resp.InputOpenTelemetry.Type != nil {
			r.InputOpenTelemetry.Type = types.StringValue(string(*resp.InputOpenTelemetry.Type))
		} else {
			r.InputOpenTelemetry.Type = types.StringNull()
		}
		r.InputOpenTelemetry.Username = types.StringPointerValue(resp.InputOpenTelemetry.Username)
	}
	if resp.InputPrometheus != nil {
		r.InputPrometheus = &tfTypes.InputPrometheus{}
		r.InputPrometheus.AssumeRoleArn = types.StringPointerValue(resp.InputPrometheus.AssumeRoleArn)
		r.InputPrometheus.AssumeRoleExternalID = types.StringPointerValue(resp.InputPrometheus.AssumeRoleExternalID)
		if resp.InputPrometheus.AuthType != nil {
			r.InputPrometheus.AuthType = types.StringValue(string(*resp.InputPrometheus.AuthType))
		} else {
			r.InputPrometheus.AuthType = types.StringNull()
		}
		if resp.InputPrometheus.AwsAuthenticationMethod != nil {
			r.InputPrometheus.AwsAuthenticationMethod = types.StringValue(string(*resp.InputPrometheus.AwsAuthenticationMethod))
		} else {
			r.InputPrometheus.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputPrometheus.AwsSecretKey = types.StringPointerValue(resp.InputPrometheus.AwsSecretKey)
		r.InputPrometheus.Connections = []tfTypes.InputPrometheusConnections{}
		if len(r.InputPrometheus.Connections) > len(resp.InputPrometheus.Connections) {
			r.InputPrometheus.Connections = r.InputPrometheus.Connections[:len(resp.InputPrometheus.Connections)]
		}
		for connectionsCount44, connectionsItem44 := range resp.InputPrometheus.Connections {
			var connections89 tfTypes.InputPrometheusConnections
			connections89.Output = types.StringValue(connectionsItem44.Output)
			connections89.Pipeline = types.StringPointerValue(connectionsItem44.Pipeline)
			if connectionsCount44+1 > len(r.InputPrometheus.Connections) {
				r.InputPrometheus.Connections = append(r.InputPrometheus.Connections, connections89)
			} else {
				r.InputPrometheus.Connections[connectionsCount44].Output = connections89.Output
				r.InputPrometheus.Connections[connectionsCount44].Pipeline = connections89.Pipeline
			}
		}
		r.InputPrometheus.CredentialsSecret = types.StringPointerValue(resp.InputPrometheus.CredentialsSecret)
		r.InputPrometheus.Description = types.StringPointerValue(resp.InputPrometheus.Description)
		r.InputPrometheus.DimensionList = make([]types.String, 0, len(resp.InputPrometheus.DimensionList))
		for _, v := range resp.InputPrometheus.DimensionList {
			r.InputPrometheus.DimensionList = append(r.InputPrometheus.DimensionList, types.StringValue(v))
		}
		r.InputPrometheus.Disabled = types.BoolPointerValue(resp.InputPrometheus.Disabled)
		if resp.InputPrometheus.DiscoveryType != nil {
			r.InputPrometheus.DiscoveryType = types.StringValue(string(*resp.InputPrometheus.DiscoveryType))
		} else {
			r.InputPrometheus.DiscoveryType = types.StringNull()
		}
		if resp.InputPrometheus.DurationSeconds != nil {
			r.InputPrometheus.DurationSeconds = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheus.DurationSeconds)))
		} else {
			r.InputPrometheus.DurationSeconds = types.NumberNull()
		}
		r.InputPrometheus.EnableAssumeRole = types.BoolPointerValue(resp.InputPrometheus.EnableAssumeRole)
		r.InputPrometheus.Endpoint = types.StringPointerValue(resp.InputPrometheus.Endpoint)
		r.InputPrometheus.Environment = types.StringPointerValue(resp.InputPrometheus.Environment)
		r.InputPrometheus.ID = types.StringPointerValue(resp.InputPrometheus.ID)
		if resp.InputPrometheus.Interval != nil {
			r.InputPrometheus.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheus.Interval)))
		} else {
			r.InputPrometheus.Interval = types.NumberNull()
		}
		r.InputPrometheus.JobTimeout = types.StringPointerValue(resp.InputPrometheus.JobTimeout)
		if resp.InputPrometheus.KeepAliveTime != nil {
			r.InputPrometheus.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheus.KeepAliveTime)))
		} else {
			r.InputPrometheus.KeepAliveTime = types.NumberNull()
		}
		if resp.InputPrometheus.LogLevel != nil {
			r.InputPrometheus.LogLevel = types.StringValue(string(*resp.InputPrometheus.LogLevel))
		} else {
			r.InputPrometheus.LogLevel = types.StringNull()
		}
		if resp.InputPrometheus.MaxMissedKeepAlives != nil {
			r.InputPrometheus.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheus.MaxMissedKeepAlives)))
		} else {
			r.InputPrometheus.MaxMissedKeepAlives = types.NumberNull()
		}
		r.InputPrometheus.Metadata = []tfTypes.InputPrometheusMetadata{}
		if len(r.InputPrometheus.Metadata) > len(resp.InputPrometheus.Metadata) {
			r.InputPrometheus.Metadata = r.InputPrometheus.Metadata[:len(resp.InputPrometheus.Metadata)]
		}
		for metadataCount48, metadataItem48 := range resp.InputPrometheus.Metadata {
			var metadata97 tfTypes.InputPrometheusMetadata
			metadata97.Name = types.StringValue(metadataItem48.Name)
			metadata97.Value = types.StringValue(metadataItem48.Value)
			if metadataCount48+1 > len(r.InputPrometheus.Metadata) {
				r.InputPrometheus.Metadata = append(r.InputPrometheus.Metadata, metadata97)
			} else {
				r.InputPrometheus.Metadata[metadataCount48].Name = metadata97.Name
				r.InputPrometheus.Metadata[metadataCount48].Value = metadata97.Value
			}
		}
		r.InputPrometheus.NameList = make([]types.String, 0, len(resp.InputPrometheus.NameList))
		for _, v := range resp.InputPrometheus.NameList {
			r.InputPrometheus.NameList = append(r.InputPrometheus.NameList, types.StringValue(v))
		}
		r.InputPrometheus.Password = types.StringPointerValue(resp.InputPrometheus.Password)
		r.InputPrometheus.Pipeline = types.StringPointerValue(resp.InputPrometheus.Pipeline)
		if resp.InputPrometheus.Pq == nil {
			r.InputPrometheus.Pq = nil
		} else {
			r.InputPrometheus.Pq = &tfTypes.InputPrometheusPq{}
			if resp.InputPrometheus.Pq.CommitFrequency != nil {
				r.InputPrometheus.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheus.Pq.CommitFrequency)))
			} else {
				r.InputPrometheus.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputPrometheus.Pq.Compress != nil {
				r.InputPrometheus.Pq.Compress = types.StringValue(string(*resp.InputPrometheus.Pq.Compress))
			} else {
				r.InputPrometheus.Pq.Compress = types.StringNull()
			}
			if resp.InputPrometheus.Pq.MaxBufferSize != nil {
				r.InputPrometheus.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheus.Pq.MaxBufferSize)))
			} else {
				r.InputPrometheus.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputPrometheus.Pq.MaxFileSize = types.StringPointerValue(resp.InputPrometheus.Pq.MaxFileSize)
			r.InputPrometheus.Pq.MaxSize = types.StringPointerValue(resp.InputPrometheus.Pq.MaxSize)
			if resp.InputPrometheus.Pq.Mode != nil {
				r.InputPrometheus.Pq.Mode = types.StringValue(string(*resp.InputPrometheus.Pq.Mode))
			} else {
				r.InputPrometheus.Pq.Mode = types.StringNull()
			}
			r.InputPrometheus.Pq.Path = types.StringPointerValue(resp.InputPrometheus.Pq.Path)
		}
		r.InputPrometheus.PqEnabled = types.BoolPointerValue(resp.InputPrometheus.PqEnabled)
		if resp.InputPrometheus.RecordType != nil {
			r.InputPrometheus.RecordType = types.StringValue(string(*resp.InputPrometheus.RecordType))
		} else {
			r.InputPrometheus.RecordType = types.StringNull()
		}
		r.InputPrometheus.Region = types.StringPointerValue(resp.InputPrometheus.Region)
		r.InputPrometheus.RejectUnauthorized = types.BoolPointerValue(resp.InputPrometheus.RejectUnauthorized)
		r.InputPrometheus.ReuseConnections = types.BoolPointerValue(resp.InputPrometheus.ReuseConnections)
		r.InputPrometheus.ScrapePath = types.StringPointerValue(resp.InputPrometheus.ScrapePath)
		if resp.InputPrometheus.ScrapePort != nil {
			r.InputPrometheus.ScrapePort = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheus.ScrapePort)))
		} else {
			r.InputPrometheus.ScrapePort = types.NumberNull()
		}
		if resp.InputPrometheus.ScrapeProtocol != nil {
			r.InputPrometheus.ScrapeProtocol = types.StringValue(string(*resp.InputPrometheus.ScrapeProtocol))
		} else {
			r.InputPrometheus.ScrapeProtocol = types.StringNull()
		}
		r.InputPrometheus.SearchFilter = []tfTypes.SearchFilter{}
		if len(r.InputPrometheus.SearchFilter) > len(resp.InputPrometheus.SearchFilter) {
			r.InputPrometheus.SearchFilter = r.InputPrometheus.SearchFilter[:len(resp.InputPrometheus.SearchFilter)]
		}
		for searchFilterCount1, searchFilterItem1 := range resp.InputPrometheus.SearchFilter {
			var searchFilter3 tfTypes.SearchFilter
			searchFilter3.Name = types.StringValue(searchFilterItem1.Name)
			searchFilter3.Values = make([]types.String, 0, len(searchFilterItem1.Values))
			for _, v := range searchFilterItem1.Values {
				searchFilter3.Values = append(searchFilter3.Values, types.StringValue(v))
			}
			if searchFilterCount1+1 > len(r.InputPrometheus.SearchFilter) {
				r.InputPrometheus.SearchFilter = append(r.InputPrometheus.SearchFilter, searchFilter3)
			} else {
				r.InputPrometheus.SearchFilter[searchFilterCount1].Name = searchFilter3.Name
				r.InputPrometheus.SearchFilter[searchFilterCount1].Values = searchFilter3.Values
			}
		}
		r.InputPrometheus.SendToRoutes = types.BoolPointerValue(resp.InputPrometheus.SendToRoutes)
		if resp.InputPrometheus.SignatureVersion != nil {
			r.InputPrometheus.SignatureVersion = types.StringValue(string(*resp.InputPrometheus.SignatureVersion))
		} else {
			r.InputPrometheus.SignatureVersion = types.StringNull()
		}
		r.InputPrometheus.Streamtags = make([]types.String, 0, len(resp.InputPrometheus.Streamtags))
		for _, v := range resp.InputPrometheus.Streamtags {
			r.InputPrometheus.Streamtags = append(r.InputPrometheus.Streamtags, types.StringValue(v))
		}
		r.InputPrometheus.TargetList = make([]types.String, 0, len(resp.InputPrometheus.TargetList))
		for _, v := range resp.InputPrometheus.TargetList {
			r.InputPrometheus.TargetList = append(r.InputPrometheus.TargetList, types.StringValue(v))
		}
		r.InputPrometheus.TTL = types.StringPointerValue(resp.InputPrometheus.TTL)
		if resp.InputPrometheus.Type != nil {
			r.InputPrometheus.Type = types.StringValue(string(*resp.InputPrometheus.Type))
		} else {
			r.InputPrometheus.Type = types.StringNull()
		}
		r.InputPrometheus.UsePublicIP = types.BoolPointerValue(resp.InputPrometheus.UsePublicIP)
		r.InputPrometheus.Username = types.StringPointerValue(resp.InputPrometheus.Username)
	}
	if resp.InputPrometheusRw != nil {
		r.InputPrometheusRw = &tfTypes.InputPrometheusRw{}
		if resp.InputPrometheusRw.ActivityLogSampleRate != nil {
			r.InputPrometheusRw.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheusRw.ActivityLogSampleRate)))
		} else {
			r.InputPrometheusRw.ActivityLogSampleRate = types.NumberNull()
		}
		r.InputPrometheusRw.AuthHeaderExpr = types.StringPointerValue(resp.InputPrometheusRw.AuthHeaderExpr)
		if resp.InputPrometheusRw.AuthType != nil {
			r.InputPrometheusRw.AuthType = types.StringValue(string(*resp.InputPrometheusRw.AuthType))
		} else {
			r.InputPrometheusRw.AuthType = types.StringNull()
		}
		r.InputPrometheusRw.CaptureHeaders = types.BoolPointerValue(resp.InputPrometheusRw.CaptureHeaders)
		r.InputPrometheusRw.Connections = []tfTypes.InputPrometheusRwConnections{}
		if len(r.InputPrometheusRw.Connections) > len(resp.InputPrometheusRw.Connections) {
			r.InputPrometheusRw.Connections = r.InputPrometheusRw.Connections[:len(resp.InputPrometheusRw.Connections)]
		}
		for connectionsCount45, connectionsItem45 := range resp.InputPrometheusRw.Connections {
			var connections91 tfTypes.InputPrometheusRwConnections
			connections91.Output = types.StringValue(connectionsItem45.Output)
			connections91.Pipeline = types.StringPointerValue(connectionsItem45.Pipeline)
			if connectionsCount45+1 > len(r.InputPrometheusRw.Connections) {
				r.InputPrometheusRw.Connections = append(r.InputPrometheusRw.Connections, connections91)
			} else {
				r.InputPrometheusRw.Connections[connectionsCount45].Output = connections91.Output
				r.InputPrometheusRw.Connections[connectionsCount45].Pipeline = connections91.Pipeline
			}
		}
		r.InputPrometheusRw.CredentialsSecret = types.StringPointerValue(resp.InputPrometheusRw.CredentialsSecret)
		r.InputPrometheusRw.Description = types.StringPointerValue(resp.InputPrometheusRw.Description)
		r.InputPrometheusRw.Disabled = types.BoolPointerValue(resp.InputPrometheusRw.Disabled)
		r.InputPrometheusRw.EnableHealthCheck = types.BoolPointerValue(resp.InputPrometheusRw.EnableHealthCheck)
		r.InputPrometheusRw.EnableProxyHeader = types.BoolPointerValue(resp.InputPrometheusRw.EnableProxyHeader)
		r.InputPrometheusRw.Environment = types.StringPointerValue(resp.InputPrometheusRw.Environment)
		r.InputPrometheusRw.Host = types.StringPointerValue(resp.InputPrometheusRw.Host)
		r.InputPrometheusRw.ID = types.StringPointerValue(resp.InputPrometheusRw.ID)
		r.InputPrometheusRw.IPAllowlistRegex = types.StringPointerValue(resp.InputPrometheusRw.IPAllowlistRegex)
		r.InputPrometheusRw.IPDenylistRegex = types.StringPointerValue(resp.InputPrometheusRw.IPDenylistRegex)
		if resp.InputPrometheusRw.KeepAliveTimeout != nil {
			r.InputPrometheusRw.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheusRw.KeepAliveTimeout)))
		} else {
			r.InputPrometheusRw.KeepAliveTimeout = types.NumberNull()
		}
		r.InputPrometheusRw.LoginURL = types.StringPointerValue(resp.InputPrometheusRw.LoginURL)
		if resp.InputPrometheusRw.MaxActiveReq != nil {
			r.InputPrometheusRw.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheusRw.MaxActiveReq)))
		} else {
			r.InputPrometheusRw.MaxActiveReq = types.NumberNull()
		}
		r.InputPrometheusRw.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputPrometheusRw.MaxRequestsPerSocket)
		r.InputPrometheusRw.Metadata = []tfTypes.InputPrometheusRwMetadata{}
		if len(r.InputPrometheusRw.Metadata) > len(resp.InputPrometheusRw.Metadata) {
			r.InputPrometheusRw.Metadata = r.InputPrometheusRw.Metadata[:len(resp.InputPrometheusRw.Metadata)]
		}
		for metadataCount49, metadataItem49 := range resp.InputPrometheusRw.Metadata {
			var metadata99 tfTypes.InputPrometheusRwMetadata
			metadata99.Name = types.StringValue(metadataItem49.Name)
			metadata99.Value = types.StringValue(metadataItem49.Value)
			if metadataCount49+1 > len(r.InputPrometheusRw.Metadata) {
				r.InputPrometheusRw.Metadata = append(r.InputPrometheusRw.Metadata, metadata99)
			} else {
				r.InputPrometheusRw.Metadata[metadataCount49].Name = metadata99.Name
				r.InputPrometheusRw.Metadata[metadataCount49].Value = metadata99.Value
			}
		}
		r.InputPrometheusRw.OauthHeaders = []tfTypes.InputPrometheusRwOauthHeaders{}
		if len(r.InputPrometheusRw.OauthHeaders) > len(resp.InputPrometheusRw.OauthHeaders) {
			r.InputPrometheusRw.OauthHeaders = r.InputPrometheusRw.OauthHeaders[:len(resp.InputPrometheusRw.OauthHeaders)]
		}
		for oauthHeadersCount6, oauthHeadersItem6 := range resp.InputPrometheusRw.OauthHeaders {
			var oauthHeaders13 tfTypes.InputPrometheusRwOauthHeaders
			oauthHeaders13.Name = types.StringValue(oauthHeadersItem6.Name)
			oauthHeaders13.Value = types.StringValue(oauthHeadersItem6.Value)
			if oauthHeadersCount6+1 > len(r.InputPrometheusRw.OauthHeaders) {
				r.InputPrometheusRw.OauthHeaders = append(r.InputPrometheusRw.OauthHeaders, oauthHeaders13)
			} else {
				r.InputPrometheusRw.OauthHeaders[oauthHeadersCount6].Name = oauthHeaders13.Name
				r.InputPrometheusRw.OauthHeaders[oauthHeadersCount6].Value = oauthHeaders13.Value
			}
		}
		r.InputPrometheusRw.OauthParams = []tfTypes.InputPrometheusRwOauthParams{}
		if len(r.InputPrometheusRw.OauthParams) > len(resp.InputPrometheusRw.OauthParams) {
			r.InputPrometheusRw.OauthParams = r.InputPrometheusRw.OauthParams[:len(resp.InputPrometheusRw.OauthParams)]
		}
		for oauthParamsCount6, oauthParamsItem6 := range resp.InputPrometheusRw.OauthParams {
			var oauthParams13 tfTypes.InputPrometheusRwOauthParams
			oauthParams13.Name = types.StringValue(oauthParamsItem6.Name)
			oauthParams13.Value = types.StringValue(oauthParamsItem6.Value)
			if oauthParamsCount6+1 > len(r.InputPrometheusRw.OauthParams) {
				r.InputPrometheusRw.OauthParams = append(r.InputPrometheusRw.OauthParams, oauthParams13)
			} else {
				r.InputPrometheusRw.OauthParams[oauthParamsCount6].Name = oauthParams13.Name
				r.InputPrometheusRw.OauthParams[oauthParamsCount6].Value = oauthParams13.Value
			}
		}
		r.InputPrometheusRw.Password = types.StringPointerValue(resp.InputPrometheusRw.Password)
		r.InputPrometheusRw.Pipeline = types.StringPointerValue(resp.InputPrometheusRw.Pipeline)
		r.InputPrometheusRw.Port = types.NumberValue(big.NewFloat(float64(resp.InputPrometheusRw.Port)))
		if resp.InputPrometheusRw.Pq == nil {
			r.InputPrometheusRw.Pq = nil
		} else {
			r.InputPrometheusRw.Pq = &tfTypes.InputPrometheusRwPq{}
			if resp.InputPrometheusRw.Pq.CommitFrequency != nil {
				r.InputPrometheusRw.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheusRw.Pq.CommitFrequency)))
			} else {
				r.InputPrometheusRw.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputPrometheusRw.Pq.Compress != nil {
				r.InputPrometheusRw.Pq.Compress = types.StringValue(string(*resp.InputPrometheusRw.Pq.Compress))
			} else {
				r.InputPrometheusRw.Pq.Compress = types.StringNull()
			}
			if resp.InputPrometheusRw.Pq.MaxBufferSize != nil {
				r.InputPrometheusRw.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheusRw.Pq.MaxBufferSize)))
			} else {
				r.InputPrometheusRw.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputPrometheusRw.Pq.MaxFileSize = types.StringPointerValue(resp.InputPrometheusRw.Pq.MaxFileSize)
			r.InputPrometheusRw.Pq.MaxSize = types.StringPointerValue(resp.InputPrometheusRw.Pq.MaxSize)
			if resp.InputPrometheusRw.Pq.Mode != nil {
				r.InputPrometheusRw.Pq.Mode = types.StringValue(string(*resp.InputPrometheusRw.Pq.Mode))
			} else {
				r.InputPrometheusRw.Pq.Mode = types.StringNull()
			}
			r.InputPrometheusRw.Pq.Path = types.StringPointerValue(resp.InputPrometheusRw.Pq.Path)
		}
		r.InputPrometheusRw.PqEnabled = types.BoolPointerValue(resp.InputPrometheusRw.PqEnabled)
		r.InputPrometheusRw.PrometheusAPI = types.StringPointerValue(resp.InputPrometheusRw.PrometheusAPI)
		if resp.InputPrometheusRw.RequestTimeout != nil {
			r.InputPrometheusRw.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheusRw.RequestTimeout)))
		} else {
			r.InputPrometheusRw.RequestTimeout = types.NumberNull()
		}
		r.InputPrometheusRw.Secret = types.StringPointerValue(resp.InputPrometheusRw.Secret)
		r.InputPrometheusRw.SecretParamName = types.StringPointerValue(resp.InputPrometheusRw.SecretParamName)
		r.InputPrometheusRw.SendToRoutes = types.BoolPointerValue(resp.InputPrometheusRw.SendToRoutes)
		if resp.InputPrometheusRw.SocketTimeout != nil {
			r.InputPrometheusRw.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheusRw.SocketTimeout)))
		} else {
			r.InputPrometheusRw.SocketTimeout = types.NumberNull()
		}
		r.InputPrometheusRw.Streamtags = make([]types.String, 0, len(resp.InputPrometheusRw.Streamtags))
		for _, v := range resp.InputPrometheusRw.Streamtags {
			r.InputPrometheusRw.Streamtags = append(r.InputPrometheusRw.Streamtags, types.StringValue(v))
		}
		r.InputPrometheusRw.TextSecret = types.StringPointerValue(resp.InputPrometheusRw.TextSecret)
		if resp.InputPrometheusRw.TLS == nil {
			r.InputPrometheusRw.TLS = nil
		} else {
			r.InputPrometheusRw.TLS = &tfTypes.InputPrometheusRwTLSSettingsServerSide{}
			r.InputPrometheusRw.TLS.CaPath = types.StringPointerValue(resp.InputPrometheusRw.TLS.CaPath)
			r.InputPrometheusRw.TLS.CertificateName = types.StringPointerValue(resp.InputPrometheusRw.TLS.CertificateName)
			r.InputPrometheusRw.TLS.CertPath = types.StringPointerValue(resp.InputPrometheusRw.TLS.CertPath)
			if resp.InputPrometheusRw.TLS.CommonNameRegex == nil {
				r.InputPrometheusRw.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult16, _ := json.Marshal(resp.InputPrometheusRw.TLS.CommonNameRegex)
				r.InputPrometheusRw.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult16))
			}
			r.InputPrometheusRw.TLS.Disabled = types.BoolPointerValue(resp.InputPrometheusRw.TLS.Disabled)
			if resp.InputPrometheusRw.TLS.MaxVersion != nil {
				r.InputPrometheusRw.TLS.MaxVersion = types.StringValue(string(*resp.InputPrometheusRw.TLS.MaxVersion))
			} else {
				r.InputPrometheusRw.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputPrometheusRw.TLS.MinVersion != nil {
				r.InputPrometheusRw.TLS.MinVersion = types.StringValue(string(*resp.InputPrometheusRw.TLS.MinVersion))
			} else {
				r.InputPrometheusRw.TLS.MinVersion = types.StringNull()
			}
			r.InputPrometheusRw.TLS.Passphrase = types.StringPointerValue(resp.InputPrometheusRw.TLS.Passphrase)
			r.InputPrometheusRw.TLS.PrivKeyPath = types.StringPointerValue(resp.InputPrometheusRw.TLS.PrivKeyPath)
			if resp.InputPrometheusRw.TLS.RejectUnauthorized == nil {
				r.InputPrometheusRw.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult16, _ := json.Marshal(resp.InputPrometheusRw.TLS.RejectUnauthorized)
				r.InputPrometheusRw.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult16))
			}
			r.InputPrometheusRw.TLS.RequestCert = types.BoolPointerValue(resp.InputPrometheusRw.TLS.RequestCert)
		}
		r.InputPrometheusRw.Token = types.StringPointerValue(resp.InputPrometheusRw.Token)
		r.InputPrometheusRw.TokenAttributeName = types.StringPointerValue(resp.InputPrometheusRw.TokenAttributeName)
		if resp.InputPrometheusRw.TokenTimeoutSecs != nil {
			r.InputPrometheusRw.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*resp.InputPrometheusRw.TokenTimeoutSecs)))
		} else {
			r.InputPrometheusRw.TokenTimeoutSecs = types.NumberNull()
		}
		if resp.InputPrometheusRw.Type != nil {
			r.InputPrometheusRw.Type = types.StringValue(string(*resp.InputPrometheusRw.Type))
		} else {
			r.InputPrometheusRw.Type = types.StringNull()
		}
		r.InputPrometheusRw.Username = types.StringPointerValue(resp.InputPrometheusRw.Username)
	}
	if resp.InputS3 != nil {
		r.InputS3 = &tfTypes.InputS3{}
		r.InputS3.AssumeRoleArn = types.StringPointerValue(resp.InputS3.AssumeRoleArn)
		r.InputS3.AssumeRoleExternalID = types.StringPointerValue(resp.InputS3.AssumeRoleExternalID)
		r.InputS3.AwsAccountID = types.StringPointerValue(resp.InputS3.AwsAccountID)
		r.InputS3.AwsAPIKey = types.StringPointerValue(resp.InputS3.AwsAPIKey)
		if resp.InputS3.AwsAuthenticationMethod != nil {
			r.InputS3.AwsAuthenticationMethod = types.StringValue(string(*resp.InputS3.AwsAuthenticationMethod))
		} else {
			r.InputS3.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputS3.AwsSecret = types.StringPointerValue(resp.InputS3.AwsSecret)
		r.InputS3.AwsSecretKey = types.StringPointerValue(resp.InputS3.AwsSecretKey)
		r.InputS3.BreakerRulesets = make([]types.String, 0, len(resp.InputS3.BreakerRulesets))
		for _, v := range resp.InputS3.BreakerRulesets {
			r.InputS3.BreakerRulesets = append(r.InputS3.BreakerRulesets, types.StringValue(v))
		}
		if resp.InputS3.Checkpointing == nil {
			r.InputS3.Checkpointing = nil
		} else {
			r.InputS3.Checkpointing = &tfTypes.InputS3Checkpointing{}
			r.InputS3.Checkpointing.Enabled = types.BoolPointerValue(resp.InputS3.Checkpointing.Enabled)
			if resp.InputS3.Checkpointing.Retries != nil {
				r.InputS3.Checkpointing.Retries = types.NumberValue(big.NewFloat(float64(*resp.InputS3.Checkpointing.Retries)))
			} else {
				r.InputS3.Checkpointing.Retries = types.NumberNull()
			}
		}
		r.InputS3.Connections = []tfTypes.InputS3Connections{}
		if len(r.InputS3.Connections) > len(resp.InputS3.Connections) {
			r.InputS3.Connections = r.InputS3.Connections[:len(resp.InputS3.Connections)]
		}
		for connectionsCount46, connectionsItem46 := range resp.InputS3.Connections {
			var connections93 tfTypes.InputS3Connections
			connections93.Output = types.StringValue(connectionsItem46.Output)
			connections93.Pipeline = types.StringPointerValue(connectionsItem46.Pipeline)
			if connectionsCount46+1 > len(r.InputS3.Connections) {
				r.InputS3.Connections = append(r.InputS3.Connections, connections93)
			} else {
				r.InputS3.Connections[connectionsCount46].Output = connections93.Output
				r.InputS3.Connections[connectionsCount46].Pipeline = connections93.Pipeline
			}
		}
		r.InputS3.Description = types.StringPointerValue(resp.InputS3.Description)
		r.InputS3.Disabled = types.BoolPointerValue(resp.InputS3.Disabled)
		if resp.InputS3.DurationSeconds != nil {
			r.InputS3.DurationSeconds = types.NumberValue(big.NewFloat(float64(*resp.InputS3.DurationSeconds)))
		} else {
			r.InputS3.DurationSeconds = types.NumberNull()
		}
		r.InputS3.EnableAssumeRole = types.BoolPointerValue(resp.InputS3.EnableAssumeRole)
		r.InputS3.EnableSQSAssumeRole = types.BoolPointerValue(resp.InputS3.EnableSQSAssumeRole)
		r.InputS3.Encoding = types.StringPointerValue(resp.InputS3.Encoding)
		r.InputS3.Endpoint = types.StringPointerValue(resp.InputS3.Endpoint)
		r.InputS3.Environment = types.StringPointerValue(resp.InputS3.Environment)
		r.InputS3.FileFilter = types.StringPointerValue(resp.InputS3.FileFilter)
		r.InputS3.ID = types.StringPointerValue(resp.InputS3.ID)
		if resp.InputS3.MaxMessages != nil {
			r.InputS3.MaxMessages = types.NumberValue(big.NewFloat(float64(*resp.InputS3.MaxMessages)))
		} else {
			r.InputS3.MaxMessages = types.NumberNull()
		}
		r.InputS3.Metadata = []tfTypes.InputS3Metadata{}
		if len(r.InputS3.Metadata) > len(resp.InputS3.Metadata) {
			r.InputS3.Metadata = r.InputS3.Metadata[:len(resp.InputS3.Metadata)]
		}
		for metadataCount50, metadataItem50 := range resp.InputS3.Metadata {
			var metadata101 tfTypes.InputS3Metadata
			metadata101.Name = types.StringValue(metadataItem50.Name)
			metadata101.Value = types.StringValue(metadataItem50.Value)
			if metadataCount50+1 > len(r.InputS3.Metadata) {
				r.InputS3.Metadata = append(r.InputS3.Metadata, metadata101)
			} else {
				r.InputS3.Metadata[metadataCount50].Name = metadata101.Name
				r.InputS3.Metadata[metadataCount50].Value = metadata101.Value
			}
		}
		if resp.InputS3.NumReceivers != nil {
			r.InputS3.NumReceivers = types.NumberValue(big.NewFloat(float64(*resp.InputS3.NumReceivers)))
		} else {
			r.InputS3.NumReceivers = types.NumberNull()
		}
		if resp.InputS3.ParquetChunkDownloadTimeout != nil {
			r.InputS3.ParquetChunkDownloadTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputS3.ParquetChunkDownloadTimeout)))
		} else {
			r.InputS3.ParquetChunkDownloadTimeout = types.NumberNull()
		}
		if resp.InputS3.ParquetChunkSizeMB != nil {
			r.InputS3.ParquetChunkSizeMB = types.NumberValue(big.NewFloat(float64(*resp.InputS3.ParquetChunkSizeMB)))
		} else {
			r.InputS3.ParquetChunkSizeMB = types.NumberNull()
		}
		r.InputS3.Pipeline = types.StringPointerValue(resp.InputS3.Pipeline)
		if resp.InputS3.PollTimeout != nil {
			r.InputS3.PollTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputS3.PollTimeout)))
		} else {
			r.InputS3.PollTimeout = types.NumberNull()
		}
		if resp.InputS3.Pq == nil {
			r.InputS3.Pq = nil
		} else {
			r.InputS3.Pq = &tfTypes.InputS3Pq{}
			if resp.InputS3.Pq.CommitFrequency != nil {
				r.InputS3.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputS3.Pq.CommitFrequency)))
			} else {
				r.InputS3.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputS3.Pq.Compress != nil {
				r.InputS3.Pq.Compress = types.StringValue(string(*resp.InputS3.Pq.Compress))
			} else {
				r.InputS3.Pq.Compress = types.StringNull()
			}
			if resp.InputS3.Pq.MaxBufferSize != nil {
				r.InputS3.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputS3.Pq.MaxBufferSize)))
			} else {
				r.InputS3.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputS3.Pq.MaxFileSize = types.StringPointerValue(resp.InputS3.Pq.MaxFileSize)
			r.InputS3.Pq.MaxSize = types.StringPointerValue(resp.InputS3.Pq.MaxSize)
			if resp.InputS3.Pq.Mode != nil {
				r.InputS3.Pq.Mode = types.StringValue(string(*resp.InputS3.Pq.Mode))
			} else {
				r.InputS3.Pq.Mode = types.StringNull()
			}
			r.InputS3.Pq.Path = types.StringPointerValue(resp.InputS3.Pq.Path)
		}
		r.InputS3.PqEnabled = types.BoolPointerValue(resp.InputS3.PqEnabled)
		if resp.InputS3.Preprocess == nil {
			r.InputS3.Preprocess = nil
		} else {
			r.InputS3.Preprocess = &tfTypes.InputS3Preprocess{}
			r.InputS3.Preprocess.Args = make([]types.String, 0, len(resp.InputS3.Preprocess.Args))
			for _, v := range resp.InputS3.Preprocess.Args {
				r.InputS3.Preprocess.Args = append(r.InputS3.Preprocess.Args, types.StringValue(v))
			}
			r.InputS3.Preprocess.Command = types.StringPointerValue(resp.InputS3.Preprocess.Command)
			r.InputS3.Preprocess.Disabled = types.BoolPointerValue(resp.InputS3.Preprocess.Disabled)
		}
		r.InputS3.QueueName = types.StringValue(resp.InputS3.QueueName)
		r.InputS3.Region = types.StringPointerValue(resp.InputS3.Region)
		r.InputS3.RejectUnauthorized = types.BoolPointerValue(resp.InputS3.RejectUnauthorized)
		r.InputS3.ReuseConnections = types.BoolPointerValue(resp.InputS3.ReuseConnections)
		r.InputS3.SendToRoutes = types.BoolPointerValue(resp.InputS3.SendToRoutes)
		if resp.InputS3.SignatureVersion != nil {
			r.InputS3.SignatureVersion = types.StringValue(string(*resp.InputS3.SignatureVersion))
		} else {
			r.InputS3.SignatureVersion = types.StringNull()
		}
		r.InputS3.SkipOnError = types.BoolPointerValue(resp.InputS3.SkipOnError)
		if resp.InputS3.SocketTimeout != nil {
			r.InputS3.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputS3.SocketTimeout)))
		} else {
			r.InputS3.SocketTimeout = types.NumberNull()
		}
		if resp.InputS3.StaleChannelFlushMs != nil {
			r.InputS3.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputS3.StaleChannelFlushMs)))
		} else {
			r.InputS3.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputS3.Streamtags = make([]types.String, 0, len(resp.InputS3.Streamtags))
		for _, v := range resp.InputS3.Streamtags {
			r.InputS3.Streamtags = append(r.InputS3.Streamtags, types.StringValue(v))
		}
		r.InputS3.Type = types.StringValue(string(resp.InputS3.Type))
		if resp.InputS3.VisibilityTimeout != nil {
			r.InputS3.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputS3.VisibilityTimeout)))
		} else {
			r.InputS3.VisibilityTimeout = types.NumberNull()
		}
	}
	if resp.InputS3Inventory != nil {
		r.InputS3Inventory = &tfTypes.InputS3Inventory{}
		r.InputS3Inventory.AssumeRoleArn = types.StringPointerValue(resp.InputS3Inventory.AssumeRoleArn)
		r.InputS3Inventory.AssumeRoleExternalID = types.StringPointerValue(resp.InputS3Inventory.AssumeRoleExternalID)
		r.InputS3Inventory.AwsAccountID = types.StringPointerValue(resp.InputS3Inventory.AwsAccountID)
		r.InputS3Inventory.AwsAPIKey = types.StringPointerValue(resp.InputS3Inventory.AwsAPIKey)
		if resp.InputS3Inventory.AwsAuthenticationMethod != nil {
			r.InputS3Inventory.AwsAuthenticationMethod = types.StringValue(string(*resp.InputS3Inventory.AwsAuthenticationMethod))
		} else {
			r.InputS3Inventory.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputS3Inventory.AwsSecret = types.StringPointerValue(resp.InputS3Inventory.AwsSecret)
		r.InputS3Inventory.AwsSecretKey = types.StringPointerValue(resp.InputS3Inventory.AwsSecretKey)
		r.InputS3Inventory.BreakerRulesets = make([]types.String, 0, len(resp.InputS3Inventory.BreakerRulesets))
		for _, v := range resp.InputS3Inventory.BreakerRulesets {
			r.InputS3Inventory.BreakerRulesets = append(r.InputS3Inventory.BreakerRulesets, types.StringValue(v))
		}
		if resp.InputS3Inventory.Checkpointing == nil {
			r.InputS3Inventory.Checkpointing = nil
		} else {
			r.InputS3Inventory.Checkpointing = &tfTypes.InputS3InventoryCheckpointing{}
			r.InputS3Inventory.Checkpointing.Enabled = types.BoolPointerValue(resp.InputS3Inventory.Checkpointing.Enabled)
			if resp.InputS3Inventory.Checkpointing.Retries != nil {
				r.InputS3Inventory.Checkpointing.Retries = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.Checkpointing.Retries)))
			} else {
				r.InputS3Inventory.Checkpointing.Retries = types.NumberNull()
			}
		}
		r.InputS3Inventory.ChecksumSuffix = types.StringPointerValue(resp.InputS3Inventory.ChecksumSuffix)
		r.InputS3Inventory.Connections = []tfTypes.InputS3InventoryConnections{}
		if len(r.InputS3Inventory.Connections) > len(resp.InputS3Inventory.Connections) {
			r.InputS3Inventory.Connections = r.InputS3Inventory.Connections[:len(resp.InputS3Inventory.Connections)]
		}
		for connectionsCount47, connectionsItem47 := range resp.InputS3Inventory.Connections {
			var connections95 tfTypes.InputS3InventoryConnections
			connections95.Output = types.StringValue(connectionsItem47.Output)
			connections95.Pipeline = types.StringPointerValue(connectionsItem47.Pipeline)
			if connectionsCount47+1 > len(r.InputS3Inventory.Connections) {
				r.InputS3Inventory.Connections = append(r.InputS3Inventory.Connections, connections95)
			} else {
				r.InputS3Inventory.Connections[connectionsCount47].Output = connections95.Output
				r.InputS3Inventory.Connections[connectionsCount47].Pipeline = connections95.Pipeline
			}
		}
		r.InputS3Inventory.Description = types.StringPointerValue(resp.InputS3Inventory.Description)
		r.InputS3Inventory.Disabled = types.BoolPointerValue(resp.InputS3Inventory.Disabled)
		if resp.InputS3Inventory.DurationSeconds != nil {
			r.InputS3Inventory.DurationSeconds = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.DurationSeconds)))
		} else {
			r.InputS3Inventory.DurationSeconds = types.NumberNull()
		}
		r.InputS3Inventory.EnableAssumeRole = types.BoolPointerValue(resp.InputS3Inventory.EnableAssumeRole)
		r.InputS3Inventory.EnableSQSAssumeRole = types.BoolPointerValue(resp.InputS3Inventory.EnableSQSAssumeRole)
		r.InputS3Inventory.Endpoint = types.StringPointerValue(resp.InputS3Inventory.Endpoint)
		r.InputS3Inventory.Environment = types.StringPointerValue(resp.InputS3Inventory.Environment)
		r.InputS3Inventory.FileFilter = types.StringPointerValue(resp.InputS3Inventory.FileFilter)
		r.InputS3Inventory.ID = types.StringPointerValue(resp.InputS3Inventory.ID)
		r.InputS3Inventory.MaxManifestSizeKB = types.Int64PointerValue(resp.InputS3Inventory.MaxManifestSizeKB)
		if resp.InputS3Inventory.MaxMessages != nil {
			r.InputS3Inventory.MaxMessages = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.MaxMessages)))
		} else {
			r.InputS3Inventory.MaxMessages = types.NumberNull()
		}
		r.InputS3Inventory.Metadata = []tfTypes.InputS3InventoryMetadata{}
		if len(r.InputS3Inventory.Metadata) > len(resp.InputS3Inventory.Metadata) {
			r.InputS3Inventory.Metadata = r.InputS3Inventory.Metadata[:len(resp.InputS3Inventory.Metadata)]
		}
		for metadataCount51, metadataItem51 := range resp.InputS3Inventory.Metadata {
			var metadata103 tfTypes.InputS3InventoryMetadata
			metadata103.Name = types.StringValue(metadataItem51.Name)
			metadata103.Value = types.StringValue(metadataItem51.Value)
			if metadataCount51+1 > len(r.InputS3Inventory.Metadata) {
				r.InputS3Inventory.Metadata = append(r.InputS3Inventory.Metadata, metadata103)
			} else {
				r.InputS3Inventory.Metadata[metadataCount51].Name = metadata103.Name
				r.InputS3Inventory.Metadata[metadataCount51].Value = metadata103.Value
			}
		}
		if resp.InputS3Inventory.NumReceivers != nil {
			r.InputS3Inventory.NumReceivers = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.NumReceivers)))
		} else {
			r.InputS3Inventory.NumReceivers = types.NumberNull()
		}
		if resp.InputS3Inventory.ParquetChunkDownloadTimeout != nil {
			r.InputS3Inventory.ParquetChunkDownloadTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.ParquetChunkDownloadTimeout)))
		} else {
			r.InputS3Inventory.ParquetChunkDownloadTimeout = types.NumberNull()
		}
		if resp.InputS3Inventory.ParquetChunkSizeMB != nil {
			r.InputS3Inventory.ParquetChunkSizeMB = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.ParquetChunkSizeMB)))
		} else {
			r.InputS3Inventory.ParquetChunkSizeMB = types.NumberNull()
		}
		r.InputS3Inventory.Pipeline = types.StringPointerValue(resp.InputS3Inventory.Pipeline)
		if resp.InputS3Inventory.PollTimeout != nil {
			r.InputS3Inventory.PollTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.PollTimeout)))
		} else {
			r.InputS3Inventory.PollTimeout = types.NumberNull()
		}
		if resp.InputS3Inventory.Pq == nil {
			r.InputS3Inventory.Pq = nil
		} else {
			r.InputS3Inventory.Pq = &tfTypes.InputS3InventoryPq{}
			if resp.InputS3Inventory.Pq.CommitFrequency != nil {
				r.InputS3Inventory.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.Pq.CommitFrequency)))
			} else {
				r.InputS3Inventory.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputS3Inventory.Pq.Compress != nil {
				r.InputS3Inventory.Pq.Compress = types.StringValue(string(*resp.InputS3Inventory.Pq.Compress))
			} else {
				r.InputS3Inventory.Pq.Compress = types.StringNull()
			}
			if resp.InputS3Inventory.Pq.MaxBufferSize != nil {
				r.InputS3Inventory.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.Pq.MaxBufferSize)))
			} else {
				r.InputS3Inventory.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputS3Inventory.Pq.MaxFileSize = types.StringPointerValue(resp.InputS3Inventory.Pq.MaxFileSize)
			r.InputS3Inventory.Pq.MaxSize = types.StringPointerValue(resp.InputS3Inventory.Pq.MaxSize)
			if resp.InputS3Inventory.Pq.Mode != nil {
				r.InputS3Inventory.Pq.Mode = types.StringValue(string(*resp.InputS3Inventory.Pq.Mode))
			} else {
				r.InputS3Inventory.Pq.Mode = types.StringNull()
			}
			r.InputS3Inventory.Pq.Path = types.StringPointerValue(resp.InputS3Inventory.Pq.Path)
		}
		r.InputS3Inventory.PqEnabled = types.BoolPointerValue(resp.InputS3Inventory.PqEnabled)
		if resp.InputS3Inventory.Preprocess == nil {
			r.InputS3Inventory.Preprocess = nil
		} else {
			r.InputS3Inventory.Preprocess = &tfTypes.InputS3InventoryPreprocess{}
			r.InputS3Inventory.Preprocess.Args = make([]types.String, 0, len(resp.InputS3Inventory.Preprocess.Args))
			for _, v := range resp.InputS3Inventory.Preprocess.Args {
				r.InputS3Inventory.Preprocess.Args = append(r.InputS3Inventory.Preprocess.Args, types.StringValue(v))
			}
			r.InputS3Inventory.Preprocess.Command = types.StringPointerValue(resp.InputS3Inventory.Preprocess.Command)
			r.InputS3Inventory.Preprocess.Disabled = types.BoolPointerValue(resp.InputS3Inventory.Preprocess.Disabled)
		}
		r.InputS3Inventory.QueueName = types.StringValue(resp.InputS3Inventory.QueueName)
		r.InputS3Inventory.Region = types.StringPointerValue(resp.InputS3Inventory.Region)
		r.InputS3Inventory.RejectUnauthorized = types.BoolPointerValue(resp.InputS3Inventory.RejectUnauthorized)
		r.InputS3Inventory.ReuseConnections = types.BoolPointerValue(resp.InputS3Inventory.ReuseConnections)
		r.InputS3Inventory.SendToRoutes = types.BoolPointerValue(resp.InputS3Inventory.SendToRoutes)
		if resp.InputS3Inventory.SignatureVersion != nil {
			r.InputS3Inventory.SignatureVersion = types.StringValue(string(*resp.InputS3Inventory.SignatureVersion))
		} else {
			r.InputS3Inventory.SignatureVersion = types.StringNull()
		}
		r.InputS3Inventory.SkipOnError = types.BoolPointerValue(resp.InputS3Inventory.SkipOnError)
		if resp.InputS3Inventory.SocketTimeout != nil {
			r.InputS3Inventory.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.SocketTimeout)))
		} else {
			r.InputS3Inventory.SocketTimeout = types.NumberNull()
		}
		if resp.InputS3Inventory.StaleChannelFlushMs != nil {
			r.InputS3Inventory.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.StaleChannelFlushMs)))
		} else {
			r.InputS3Inventory.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputS3Inventory.Streamtags = make([]types.String, 0, len(resp.InputS3Inventory.Streamtags))
		for _, v := range resp.InputS3Inventory.Streamtags {
			r.InputS3Inventory.Streamtags = append(r.InputS3Inventory.Streamtags, types.StringValue(v))
		}
		r.InputS3Inventory.Type = types.StringValue(string(resp.InputS3Inventory.Type))
		r.InputS3Inventory.ValidateInventoryFiles = types.BoolPointerValue(resp.InputS3Inventory.ValidateInventoryFiles)
		if resp.InputS3Inventory.VisibilityTimeout != nil {
			r.InputS3Inventory.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputS3Inventory.VisibilityTimeout)))
		} else {
			r.InputS3Inventory.VisibilityTimeout = types.NumberNull()
		}
	}
	if resp.InputSnmp != nil {
		r.InputSnmp = &tfTypes.InputSnmp{}
		r.InputSnmp.Connections = []tfTypes.InputSnmpConnections{}
		if len(r.InputSnmp.Connections) > len(resp.InputSnmp.Connections) {
			r.InputSnmp.Connections = r.InputSnmp.Connections[:len(resp.InputSnmp.Connections)]
		}
		for connectionsCount48, connectionsItem48 := range resp.InputSnmp.Connections {
			var connections97 tfTypes.InputSnmpConnections
			connections97.Output = types.StringValue(connectionsItem48.Output)
			connections97.Pipeline = types.StringPointerValue(connectionsItem48.Pipeline)
			if connectionsCount48+1 > len(r.InputSnmp.Connections) {
				r.InputSnmp.Connections = append(r.InputSnmp.Connections, connections97)
			} else {
				r.InputSnmp.Connections[connectionsCount48].Output = connections97.Output
				r.InputSnmp.Connections[connectionsCount48].Pipeline = connections97.Pipeline
			}
		}
		r.InputSnmp.Description = types.StringPointerValue(resp.InputSnmp.Description)
		r.InputSnmp.Disabled = types.BoolPointerValue(resp.InputSnmp.Disabled)
		r.InputSnmp.Environment = types.StringPointerValue(resp.InputSnmp.Environment)
		r.InputSnmp.Host = types.StringPointerValue(resp.InputSnmp.Host)
		r.InputSnmp.ID = types.StringPointerValue(resp.InputSnmp.ID)
		r.InputSnmp.IPWhitelistRegex = types.StringPointerValue(resp.InputSnmp.IPWhitelistRegex)
		if resp.InputSnmp.MaxBufferSize != nil {
			r.InputSnmp.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSnmp.MaxBufferSize)))
		} else {
			r.InputSnmp.MaxBufferSize = types.NumberNull()
		}
		r.InputSnmp.Metadata = []tfTypes.InputSnmpMetadata{}
		if len(r.InputSnmp.Metadata) > len(resp.InputSnmp.Metadata) {
			r.InputSnmp.Metadata = r.InputSnmp.Metadata[:len(resp.InputSnmp.Metadata)]
		}
		for metadataCount52, metadataItem52 := range resp.InputSnmp.Metadata {
			var metadata105 tfTypes.InputSnmpMetadata
			metadata105.Name = types.StringValue(metadataItem52.Name)
			metadata105.Value = types.StringValue(metadataItem52.Value)
			if metadataCount52+1 > len(r.InputSnmp.Metadata) {
				r.InputSnmp.Metadata = append(r.InputSnmp.Metadata, metadata105)
			} else {
				r.InputSnmp.Metadata[metadataCount52].Name = metadata105.Name
				r.InputSnmp.Metadata[metadataCount52].Value = metadata105.Value
			}
		}
		r.InputSnmp.Pipeline = types.StringPointerValue(resp.InputSnmp.Pipeline)
		if resp.InputSnmp.Port != nil {
			r.InputSnmp.Port = types.NumberValue(big.NewFloat(float64(*resp.InputSnmp.Port)))
		} else {
			r.InputSnmp.Port = types.NumberNull()
		}
		if resp.InputSnmp.Pq == nil {
			r.InputSnmp.Pq = nil
		} else {
			r.InputSnmp.Pq = &tfTypes.InputSnmpPq{}
			if resp.InputSnmp.Pq.CommitFrequency != nil {
				r.InputSnmp.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputSnmp.Pq.CommitFrequency)))
			} else {
				r.InputSnmp.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputSnmp.Pq.Compress != nil {
				r.InputSnmp.Pq.Compress = types.StringValue(string(*resp.InputSnmp.Pq.Compress))
			} else {
				r.InputSnmp.Pq.Compress = types.StringNull()
			}
			if resp.InputSnmp.Pq.MaxBufferSize != nil {
				r.InputSnmp.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSnmp.Pq.MaxBufferSize)))
			} else {
				r.InputSnmp.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputSnmp.Pq.MaxFileSize = types.StringPointerValue(resp.InputSnmp.Pq.MaxFileSize)
			r.InputSnmp.Pq.MaxSize = types.StringPointerValue(resp.InputSnmp.Pq.MaxSize)
			if resp.InputSnmp.Pq.Mode != nil {
				r.InputSnmp.Pq.Mode = types.StringValue(string(*resp.InputSnmp.Pq.Mode))
			} else {
				r.InputSnmp.Pq.Mode = types.StringNull()
			}
			r.InputSnmp.Pq.Path = types.StringPointerValue(resp.InputSnmp.Pq.Path)
		}
		r.InputSnmp.PqEnabled = types.BoolPointerValue(resp.InputSnmp.PqEnabled)
		r.InputSnmp.SendToRoutes = types.BoolPointerValue(resp.InputSnmp.SendToRoutes)
		if resp.InputSnmp.SnmpV3Auth == nil {
			r.InputSnmp.SnmpV3Auth = nil
		} else {
			r.InputSnmp.SnmpV3Auth = &tfTypes.SNMPv3Authentication{}
			r.InputSnmp.SnmpV3Auth.AllowUnmatchedTrap = types.BoolPointerValue(resp.InputSnmp.SnmpV3Auth.AllowUnmatchedTrap)
			r.InputSnmp.SnmpV3Auth.V3AuthEnabled = types.BoolPointerValue(resp.InputSnmp.SnmpV3Auth.V3AuthEnabled)
			r.InputSnmp.SnmpV3Auth.V3Users = []tfTypes.V3Users{}
			if len(r.InputSnmp.SnmpV3Auth.V3Users) > len(resp.InputSnmp.SnmpV3Auth.V3Users) {
				r.InputSnmp.SnmpV3Auth.V3Users = r.InputSnmp.SnmpV3Auth.V3Users[:len(resp.InputSnmp.SnmpV3Auth.V3Users)]
			}
			for v3UsersCount, v3UsersItem := range resp.InputSnmp.SnmpV3Auth.V3Users {
				var v3Users1 tfTypes.V3Users
				if v3UsersItem.AuthKey == nil {
					v3Users1.AuthKey = types.StringNull()
				} else {
					authKeyResult, _ := json.Marshal(v3UsersItem.AuthKey)
					v3Users1.AuthKey = types.StringValue(string(authKeyResult))
				}
				if v3UsersItem.AuthProtocol != nil {
					v3Users1.AuthProtocol = types.StringValue(string(*v3UsersItem.AuthProtocol))
				} else {
					v3Users1.AuthProtocol = types.StringNull()
				}
				v3Users1.Name = types.StringValue(v3UsersItem.Name)
				v3Users1.PrivProtocol = types.StringPointerValue(v3UsersItem.PrivProtocol)
				if v3UsersCount+1 > len(r.InputSnmp.SnmpV3Auth.V3Users) {
					r.InputSnmp.SnmpV3Auth.V3Users = append(r.InputSnmp.SnmpV3Auth.V3Users, v3Users1)
				} else {
					r.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].AuthKey = v3Users1.AuthKey
					r.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].AuthProtocol = v3Users1.AuthProtocol
					r.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].Name = v3Users1.Name
					r.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].PrivProtocol = v3Users1.PrivProtocol
				}
			}
		}
		r.InputSnmp.Streamtags = make([]types.String, 0, len(resp.InputSnmp.Streamtags))
		for _, v := range resp.InputSnmp.Streamtags {
			r.InputSnmp.Streamtags = append(r.InputSnmp.Streamtags, types.StringValue(v))
		}
		if resp.InputSnmp.Type != nil {
			r.InputSnmp.Type = types.StringValue(string(*resp.InputSnmp.Type))
		} else {
			r.InputSnmp.Type = types.StringNull()
		}
		if resp.InputSnmp.UDPSocketRxBufSize != nil {
			r.InputSnmp.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*resp.InputSnmp.UDPSocketRxBufSize)))
		} else {
			r.InputSnmp.UDPSocketRxBufSize = types.NumberNull()
		}
		r.InputSnmp.VarbindsWithTypes = types.BoolPointerValue(resp.InputSnmp.VarbindsWithTypes)
	}
	if resp.InputSplunk != nil {
		r.InputSplunk = &tfTypes.InputSplunk{}
		r.InputSplunk.AuthTokens = []tfTypes.AuthTokens{}
		if len(r.InputSplunk.AuthTokens) > len(resp.InputSplunk.AuthTokens) {
			r.InputSplunk.AuthTokens = r.InputSplunk.AuthTokens[:len(resp.InputSplunk.AuthTokens)]
		}
		for authTokensCount1, authTokensItem1 := range resp.InputSplunk.AuthTokens {
			var authTokens8 tfTypes.AuthTokens
			authTokens8.Description = types.StringPointerValue(authTokensItem1.Description)
			authTokens8.Token = types.StringValue(authTokensItem1.Token)
			if authTokensCount1+1 > len(r.InputSplunk.AuthTokens) {
				r.InputSplunk.AuthTokens = append(r.InputSplunk.AuthTokens, authTokens8)
			} else {
				r.InputSplunk.AuthTokens[authTokensCount1].Description = authTokens8.Description
				r.InputSplunk.AuthTokens[authTokensCount1].Token = authTokens8.Token
			}
		}
		r.InputSplunk.BreakerRulesets = make([]types.String, 0, len(resp.InputSplunk.BreakerRulesets))
		for _, v := range resp.InputSplunk.BreakerRulesets {
			r.InputSplunk.BreakerRulesets = append(r.InputSplunk.BreakerRulesets, types.StringValue(v))
		}
		r.InputSplunk.Compress = types.StringPointerValue(resp.InputSplunk.Compress)
		r.InputSplunk.Connections = []tfTypes.InputSplunkConnections{}
		if len(r.InputSplunk.Connections) > len(resp.InputSplunk.Connections) {
			r.InputSplunk.Connections = r.InputSplunk.Connections[:len(resp.InputSplunk.Connections)]
		}
		for connectionsCount49, connectionsItem49 := range resp.InputSplunk.Connections {
			var connections99 tfTypes.InputSplunkConnections
			connections99.Output = types.StringValue(connectionsItem49.Output)
			connections99.Pipeline = types.StringPointerValue(connectionsItem49.Pipeline)
			if connectionsCount49+1 > len(r.InputSplunk.Connections) {
				r.InputSplunk.Connections = append(r.InputSplunk.Connections, connections99)
			} else {
				r.InputSplunk.Connections[connectionsCount49].Output = connections99.Output
				r.InputSplunk.Connections[connectionsCount49].Pipeline = connections99.Pipeline
			}
		}
		r.InputSplunk.Description = types.StringPointerValue(resp.InputSplunk.Description)
		r.InputSplunk.Disabled = types.BoolPointerValue(resp.InputSplunk.Disabled)
		r.InputSplunk.DropControlFields = types.BoolPointerValue(resp.InputSplunk.DropControlFields)
		r.InputSplunk.EnableProxyHeader = types.BoolPointerValue(resp.InputSplunk.EnableProxyHeader)
		r.InputSplunk.Environment = types.StringPointerValue(resp.InputSplunk.Environment)
		r.InputSplunk.ExtractMetrics = types.BoolPointerValue(resp.InputSplunk.ExtractMetrics)
		r.InputSplunk.Host = types.StringPointerValue(resp.InputSplunk.Host)
		r.InputSplunk.ID = types.StringPointerValue(resp.InputSplunk.ID)
		r.InputSplunk.IPWhitelistRegex = types.StringPointerValue(resp.InputSplunk.IPWhitelistRegex)
		if resp.InputSplunk.MaxActiveCxn != nil {
			r.InputSplunk.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*resp.InputSplunk.MaxActiveCxn)))
		} else {
			r.InputSplunk.MaxActiveCxn = types.NumberNull()
		}
		if resp.InputSplunk.MaxS2Sversion != nil {
			r.InputSplunk.MaxS2Sversion = types.StringValue(string(*resp.InputSplunk.MaxS2Sversion))
		} else {
			r.InputSplunk.MaxS2Sversion = types.StringNull()
		}
		r.InputSplunk.Metadata = []tfTypes.InputSplunkMetadata{}
		if len(r.InputSplunk.Metadata) > len(resp.InputSplunk.Metadata) {
			r.InputSplunk.Metadata = r.InputSplunk.Metadata[:len(resp.InputSplunk.Metadata)]
		}
		for metadataCount53, metadataItem53 := range resp.InputSplunk.Metadata {
			var metadata107 tfTypes.InputSplunkMetadata
			metadata107.Name = types.StringValue(metadataItem53.Name)
			metadata107.Value = types.StringValue(metadataItem53.Value)
			if metadataCount53+1 > len(r.InputSplunk.Metadata) {
				r.InputSplunk.Metadata = append(r.InputSplunk.Metadata, metadata107)
			} else {
				r.InputSplunk.Metadata[metadataCount53].Name = metadata107.Name
				r.InputSplunk.Metadata[metadataCount53].Value = metadata107.Value
			}
		}
		r.InputSplunk.Pipeline = types.StringPointerValue(resp.InputSplunk.Pipeline)
		r.InputSplunk.Port = types.NumberValue(big.NewFloat(float64(resp.InputSplunk.Port)))
		if resp.InputSplunk.Pq == nil {
			r.InputSplunk.Pq = nil
		} else {
			r.InputSplunk.Pq = &tfTypes.InputSplunkPq{}
			if resp.InputSplunk.Pq.CommitFrequency != nil {
				r.InputSplunk.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputSplunk.Pq.CommitFrequency)))
			} else {
				r.InputSplunk.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputSplunk.Pq.Compress != nil {
				r.InputSplunk.Pq.Compress = types.StringValue(string(*resp.InputSplunk.Pq.Compress))
			} else {
				r.InputSplunk.Pq.Compress = types.StringNull()
			}
			if resp.InputSplunk.Pq.MaxBufferSize != nil {
				r.InputSplunk.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSplunk.Pq.MaxBufferSize)))
			} else {
				r.InputSplunk.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputSplunk.Pq.MaxFileSize = types.StringPointerValue(resp.InputSplunk.Pq.MaxFileSize)
			r.InputSplunk.Pq.MaxSize = types.StringPointerValue(resp.InputSplunk.Pq.MaxSize)
			if resp.InputSplunk.Pq.Mode != nil {
				r.InputSplunk.Pq.Mode = types.StringValue(string(*resp.InputSplunk.Pq.Mode))
			} else {
				r.InputSplunk.Pq.Mode = types.StringNull()
			}
			r.InputSplunk.Pq.Path = types.StringPointerValue(resp.InputSplunk.Pq.Path)
		}
		r.InputSplunk.PqEnabled = types.BoolPointerValue(resp.InputSplunk.PqEnabled)
		r.InputSplunk.SendToRoutes = types.BoolPointerValue(resp.InputSplunk.SendToRoutes)
		if resp.InputSplunk.SocketEndingMaxWait != nil {
			r.InputSplunk.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*resp.InputSplunk.SocketEndingMaxWait)))
		} else {
			r.InputSplunk.SocketEndingMaxWait = types.NumberNull()
		}
		if resp.InputSplunk.SocketIdleTimeout != nil {
			r.InputSplunk.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputSplunk.SocketIdleTimeout)))
		} else {
			r.InputSplunk.SocketIdleTimeout = types.NumberNull()
		}
		if resp.InputSplunk.SocketMaxLifespan != nil {
			r.InputSplunk.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*resp.InputSplunk.SocketMaxLifespan)))
		} else {
			r.InputSplunk.SocketMaxLifespan = types.NumberNull()
		}
		if resp.InputSplunk.StaleChannelFlushMs != nil {
			r.InputSplunk.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputSplunk.StaleChannelFlushMs)))
		} else {
			r.InputSplunk.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputSplunk.Streamtags = make([]types.String, 0, len(resp.InputSplunk.Streamtags))
		for _, v := range resp.InputSplunk.Streamtags {
			r.InputSplunk.Streamtags = append(r.InputSplunk.Streamtags, types.StringValue(v))
		}
		if resp.InputSplunk.TLS == nil {
			r.InputSplunk.TLS = nil
		} else {
			r.InputSplunk.TLS = &tfTypes.InputSplunkTLSSettingsServerSide{}
			r.InputSplunk.TLS.CaPath = types.StringPointerValue(resp.InputSplunk.TLS.CaPath)
			r.InputSplunk.TLS.CertificateName = types.StringPointerValue(resp.InputSplunk.TLS.CertificateName)
			r.InputSplunk.TLS.CertPath = types.StringPointerValue(resp.InputSplunk.TLS.CertPath)
			if resp.InputSplunk.TLS.CommonNameRegex == nil {
				r.InputSplunk.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult17, _ := json.Marshal(resp.InputSplunk.TLS.CommonNameRegex)
				r.InputSplunk.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult17))
			}
			r.InputSplunk.TLS.Disabled = types.BoolPointerValue(resp.InputSplunk.TLS.Disabled)
			if resp.InputSplunk.TLS.MaxVersion != nil {
				r.InputSplunk.TLS.MaxVersion = types.StringValue(string(*resp.InputSplunk.TLS.MaxVersion))
			} else {
				r.InputSplunk.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputSplunk.TLS.MinVersion != nil {
				r.InputSplunk.TLS.MinVersion = types.StringValue(string(*resp.InputSplunk.TLS.MinVersion))
			} else {
				r.InputSplunk.TLS.MinVersion = types.StringNull()
			}
			r.InputSplunk.TLS.Passphrase = types.StringPointerValue(resp.InputSplunk.TLS.Passphrase)
			r.InputSplunk.TLS.PrivKeyPath = types.StringPointerValue(resp.InputSplunk.TLS.PrivKeyPath)
			if resp.InputSplunk.TLS.RejectUnauthorized == nil {
				r.InputSplunk.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult17, _ := json.Marshal(resp.InputSplunk.TLS.RejectUnauthorized)
				r.InputSplunk.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult17))
			}
			r.InputSplunk.TLS.RequestCert = types.BoolPointerValue(resp.InputSplunk.TLS.RequestCert)
		}
		if resp.InputSplunk.Type != nil {
			r.InputSplunk.Type = types.StringValue(string(*resp.InputSplunk.Type))
		} else {
			r.InputSplunk.Type = types.StringNull()
		}
		r.InputSplunk.UseFwdTimezone = types.BoolPointerValue(resp.InputSplunk.UseFwdTimezone)
	}
	if resp.InputSplunkHec != nil {
		r.InputSplunkHec = &tfTypes.InputSplunkHec{}
		r.InputSplunkHec.AccessControlAllowHeaders = make([]types.String, 0, len(resp.InputSplunkHec.AccessControlAllowHeaders))
		for _, v := range resp.InputSplunkHec.AccessControlAllowHeaders {
			r.InputSplunkHec.AccessControlAllowHeaders = append(r.InputSplunkHec.AccessControlAllowHeaders, types.StringValue(v))
		}
		r.InputSplunkHec.AccessControlAllowOrigin = make([]types.String, 0, len(resp.InputSplunkHec.AccessControlAllowOrigin))
		for _, v := range resp.InputSplunkHec.AccessControlAllowOrigin {
			r.InputSplunkHec.AccessControlAllowOrigin = append(r.InputSplunkHec.AccessControlAllowOrigin, types.StringValue(v))
		}
		if resp.InputSplunkHec.ActivityLogSampleRate != nil {
			r.InputSplunkHec.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkHec.ActivityLogSampleRate)))
		} else {
			r.InputSplunkHec.ActivityLogSampleRate = types.NumberNull()
		}
		r.InputSplunkHec.AllowedIndexes = make([]types.String, 0, len(resp.InputSplunkHec.AllowedIndexes))
		for _, v := range resp.InputSplunkHec.AllowedIndexes {
			r.InputSplunkHec.AllowedIndexes = append(r.InputSplunkHec.AllowedIndexes, types.StringValue(v))
		}
		r.InputSplunkHec.AuthTokens = []tfTypes.InputSplunkHecAuthTokens{}
		if len(r.InputSplunkHec.AuthTokens) > len(resp.InputSplunkHec.AuthTokens) {
			r.InputSplunkHec.AuthTokens = r.InputSplunkHec.AuthTokens[:len(resp.InputSplunkHec.AuthTokens)]
		}
		for authTokensCount2, authTokensItem2 := range resp.InputSplunkHec.AuthTokens {
			var authTokens10 tfTypes.InputSplunkHecAuthTokens
			authTokens10.AllowedIndexesAtToken = make([]types.String, 0, len(authTokensItem2.AllowedIndexesAtToken))
			for _, v := range authTokensItem2.AllowedIndexesAtToken {
				authTokens10.AllowedIndexesAtToken = append(authTokens10.AllowedIndexesAtToken, types.StringValue(v))
			}
			if authTokensItem2.AuthType != nil {
				authTokens10.AuthType = types.StringValue(string(*authTokensItem2.AuthType))
			} else {
				authTokens10.AuthType = types.StringNull()
			}
			authTokens10.Description = types.StringPointerValue(authTokensItem2.Description)
			authTokens10.Enabled = types.BoolPointerValue(authTokensItem2.Enabled)
			authTokens10.Metadata = []tfTypes.InputSplunkHecAuthTokensMetadata{}
			for metadataCount54, metadataItem54 := range authTokensItem2.Metadata {
				var metadata109 tfTypes.InputSplunkHecAuthTokensMetadata
				metadata109.Name = types.StringValue(metadataItem54.Name)
				metadata109.Value = types.StringValue(metadataItem54.Value)
				if metadataCount54+1 > len(authTokens10.Metadata) {
					authTokens10.Metadata = append(authTokens10.Metadata, metadata109)
				} else {
					authTokens10.Metadata[metadataCount54].Name = metadata109.Name
					authTokens10.Metadata[metadataCount54].Value = metadata109.Value
				}
			}
			tokenResult1, _ := json.Marshal(authTokensItem2.Token)
			authTokens10.Token = types.StringValue(string(tokenResult1))
			if authTokensItem2.TokenSecret == nil {
				authTokens10.TokenSecret = types.StringNull()
			} else {
				tokenSecretResult1, _ := json.Marshal(authTokensItem2.TokenSecret)
				authTokens10.TokenSecret = types.StringValue(string(tokenSecretResult1))
			}
			if authTokensCount2+1 > len(r.InputSplunkHec.AuthTokens) {
				r.InputSplunkHec.AuthTokens = append(r.InputSplunkHec.AuthTokens, authTokens10)
			} else {
				r.InputSplunkHec.AuthTokens[authTokensCount2].AllowedIndexesAtToken = authTokens10.AllowedIndexesAtToken
				r.InputSplunkHec.AuthTokens[authTokensCount2].AuthType = authTokens10.AuthType
				r.InputSplunkHec.AuthTokens[authTokensCount2].Description = authTokens10.Description
				r.InputSplunkHec.AuthTokens[authTokensCount2].Enabled = authTokens10.Enabled
				r.InputSplunkHec.AuthTokens[authTokensCount2].Metadata = authTokens10.Metadata
				r.InputSplunkHec.AuthTokens[authTokensCount2].Token = authTokens10.Token
				r.InputSplunkHec.AuthTokens[authTokensCount2].TokenSecret = authTokens10.TokenSecret
			}
		}
		r.InputSplunkHec.BreakerRulesets = make([]types.String, 0, len(resp.InputSplunkHec.BreakerRulesets))
		for _, v := range resp.InputSplunkHec.BreakerRulesets {
			r.InputSplunkHec.BreakerRulesets = append(r.InputSplunkHec.BreakerRulesets, types.StringValue(v))
		}
		r.InputSplunkHec.CaptureHeaders = types.BoolPointerValue(resp.InputSplunkHec.CaptureHeaders)
		r.InputSplunkHec.Connections = []tfTypes.InputSplunkHecConnections{}
		if len(r.InputSplunkHec.Connections) > len(resp.InputSplunkHec.Connections) {
			r.InputSplunkHec.Connections = r.InputSplunkHec.Connections[:len(resp.InputSplunkHec.Connections)]
		}
		for connectionsCount50, connectionsItem50 := range resp.InputSplunkHec.Connections {
			var connections101 tfTypes.InputSplunkHecConnections
			connections101.Output = types.StringValue(connectionsItem50.Output)
			connections101.Pipeline = types.StringPointerValue(connectionsItem50.Pipeline)
			if connectionsCount50+1 > len(r.InputSplunkHec.Connections) {
				r.InputSplunkHec.Connections = append(r.InputSplunkHec.Connections, connections101)
			} else {
				r.InputSplunkHec.Connections[connectionsCount50].Output = connections101.Output
				r.InputSplunkHec.Connections[connectionsCount50].Pipeline = connections101.Pipeline
			}
		}
		r.InputSplunkHec.Description = types.StringPointerValue(resp.InputSplunkHec.Description)
		r.InputSplunkHec.Disabled = types.BoolPointerValue(resp.InputSplunkHec.Disabled)
		r.InputSplunkHec.DropControlFields = types.BoolPointerValue(resp.InputSplunkHec.DropControlFields)
		r.InputSplunkHec.EmitTokenMetrics = types.BoolPointerValue(resp.InputSplunkHec.EmitTokenMetrics)
		if resp.InputSplunkHec.EnableHealthCheck == nil {
			r.InputSplunkHec.EnableHealthCheck = types.StringNull()
		} else {
			enableHealthCheckResult1, _ := json.Marshal(resp.InputSplunkHec.EnableHealthCheck)
			r.InputSplunkHec.EnableHealthCheck = types.StringValue(string(enableHealthCheckResult1))
		}
		r.InputSplunkHec.EnableProxyHeader = types.BoolPointerValue(resp.InputSplunkHec.EnableProxyHeader)
		r.InputSplunkHec.Environment = types.StringPointerValue(resp.InputSplunkHec.Environment)
		r.InputSplunkHec.ExtractMetrics = types.BoolPointerValue(resp.InputSplunkHec.ExtractMetrics)
		r.InputSplunkHec.Host = types.StringPointerValue(resp.InputSplunkHec.Host)
		r.InputSplunkHec.ID = types.StringPointerValue(resp.InputSplunkHec.ID)
		r.InputSplunkHec.IPAllowlistRegex = types.StringPointerValue(resp.InputSplunkHec.IPAllowlistRegex)
		r.InputSplunkHec.IPDenylistRegex = types.StringPointerValue(resp.InputSplunkHec.IPDenylistRegex)
		if resp.InputSplunkHec.KeepAliveTimeout != nil {
			r.InputSplunkHec.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkHec.KeepAliveTimeout)))
		} else {
			r.InputSplunkHec.KeepAliveTimeout = types.NumberNull()
		}
		if resp.InputSplunkHec.MaxActiveReq != nil {
			r.InputSplunkHec.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkHec.MaxActiveReq)))
		} else {
			r.InputSplunkHec.MaxActiveReq = types.NumberNull()
		}
		r.InputSplunkHec.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputSplunkHec.MaxRequestsPerSocket)
		r.InputSplunkHec.Metadata = []tfTypes.InputSplunkHecMetadata{}
		if len(r.InputSplunkHec.Metadata) > len(resp.InputSplunkHec.Metadata) {
			r.InputSplunkHec.Metadata = r.InputSplunkHec.Metadata[:len(resp.InputSplunkHec.Metadata)]
		}
		for metadataCount55, metadataItem55 := range resp.InputSplunkHec.Metadata {
			var metadata111 tfTypes.InputSplunkHecMetadata
			metadata111.Name = types.StringValue(metadataItem55.Name)
			metadata111.Value = types.StringValue(metadataItem55.Value)
			if metadataCount55+1 > len(r.InputSplunkHec.Metadata) {
				r.InputSplunkHec.Metadata = append(r.InputSplunkHec.Metadata, metadata111)
			} else {
				r.InputSplunkHec.Metadata[metadataCount55].Name = metadata111.Name
				r.InputSplunkHec.Metadata[metadataCount55].Value = metadata111.Value
			}
		}
		r.InputSplunkHec.Pipeline = types.StringPointerValue(resp.InputSplunkHec.Pipeline)
		r.InputSplunkHec.Port = types.NumberValue(big.NewFloat(float64(resp.InputSplunkHec.Port)))
		if resp.InputSplunkHec.Pq == nil {
			r.InputSplunkHec.Pq = nil
		} else {
			r.InputSplunkHec.Pq = &tfTypes.InputSplunkHecPq{}
			if resp.InputSplunkHec.Pq.CommitFrequency != nil {
				r.InputSplunkHec.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkHec.Pq.CommitFrequency)))
			} else {
				r.InputSplunkHec.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputSplunkHec.Pq.Compress != nil {
				r.InputSplunkHec.Pq.Compress = types.StringValue(string(*resp.InputSplunkHec.Pq.Compress))
			} else {
				r.InputSplunkHec.Pq.Compress = types.StringNull()
			}
			if resp.InputSplunkHec.Pq.MaxBufferSize != nil {
				r.InputSplunkHec.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkHec.Pq.MaxBufferSize)))
			} else {
				r.InputSplunkHec.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputSplunkHec.Pq.MaxFileSize = types.StringPointerValue(resp.InputSplunkHec.Pq.MaxFileSize)
			r.InputSplunkHec.Pq.MaxSize = types.StringPointerValue(resp.InputSplunkHec.Pq.MaxSize)
			if resp.InputSplunkHec.Pq.Mode != nil {
				r.InputSplunkHec.Pq.Mode = types.StringValue(string(*resp.InputSplunkHec.Pq.Mode))
			} else {
				r.InputSplunkHec.Pq.Mode = types.StringNull()
			}
			r.InputSplunkHec.Pq.Path = types.StringPointerValue(resp.InputSplunkHec.Pq.Path)
		}
		r.InputSplunkHec.PqEnabled = types.BoolPointerValue(resp.InputSplunkHec.PqEnabled)
		if resp.InputSplunkHec.RequestTimeout != nil {
			r.InputSplunkHec.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkHec.RequestTimeout)))
		} else {
			r.InputSplunkHec.RequestTimeout = types.NumberNull()
		}
		r.InputSplunkHec.SendToRoutes = types.BoolPointerValue(resp.InputSplunkHec.SendToRoutes)
		if resp.InputSplunkHec.SocketTimeout != nil {
			r.InputSplunkHec.SocketTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkHec.SocketTimeout)))
		} else {
			r.InputSplunkHec.SocketTimeout = types.NumberNull()
		}
		r.InputSplunkHec.SplunkHecAcks = types.BoolPointerValue(resp.InputSplunkHec.SplunkHecAcks)
		r.InputSplunkHec.SplunkHecAPI = types.StringPointerValue(resp.InputSplunkHec.SplunkHecAPI)
		if resp.InputSplunkHec.StaleChannelFlushMs != nil {
			r.InputSplunkHec.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkHec.StaleChannelFlushMs)))
		} else {
			r.InputSplunkHec.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputSplunkHec.Streamtags = make([]types.String, 0, len(resp.InputSplunkHec.Streamtags))
		for _, v := range resp.InputSplunkHec.Streamtags {
			r.InputSplunkHec.Streamtags = append(r.InputSplunkHec.Streamtags, types.StringValue(v))
		}
		if resp.InputSplunkHec.TLS == nil {
			r.InputSplunkHec.TLS = nil
		} else {
			r.InputSplunkHec.TLS = &tfTypes.InputSplunkHecTLSSettingsServerSide{}
			r.InputSplunkHec.TLS.CaPath = types.StringPointerValue(resp.InputSplunkHec.TLS.CaPath)
			r.InputSplunkHec.TLS.CertificateName = types.StringPointerValue(resp.InputSplunkHec.TLS.CertificateName)
			r.InputSplunkHec.TLS.CertPath = types.StringPointerValue(resp.InputSplunkHec.TLS.CertPath)
			if resp.InputSplunkHec.TLS.CommonNameRegex == nil {
				r.InputSplunkHec.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult18, _ := json.Marshal(resp.InputSplunkHec.TLS.CommonNameRegex)
				r.InputSplunkHec.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult18))
			}
			r.InputSplunkHec.TLS.Disabled = types.BoolPointerValue(resp.InputSplunkHec.TLS.Disabled)
			if resp.InputSplunkHec.TLS.MaxVersion != nil {
				r.InputSplunkHec.TLS.MaxVersion = types.StringValue(string(*resp.InputSplunkHec.TLS.MaxVersion))
			} else {
				r.InputSplunkHec.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputSplunkHec.TLS.MinVersion != nil {
				r.InputSplunkHec.TLS.MinVersion = types.StringValue(string(*resp.InputSplunkHec.TLS.MinVersion))
			} else {
				r.InputSplunkHec.TLS.MinVersion = types.StringNull()
			}
			r.InputSplunkHec.TLS.Passphrase = types.StringPointerValue(resp.InputSplunkHec.TLS.Passphrase)
			r.InputSplunkHec.TLS.PrivKeyPath = types.StringPointerValue(resp.InputSplunkHec.TLS.PrivKeyPath)
			if resp.InputSplunkHec.TLS.RejectUnauthorized == nil {
				r.InputSplunkHec.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult18, _ := json.Marshal(resp.InputSplunkHec.TLS.RejectUnauthorized)
				r.InputSplunkHec.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult18))
			}
			r.InputSplunkHec.TLS.RequestCert = types.BoolPointerValue(resp.InputSplunkHec.TLS.RequestCert)
		}
		if resp.InputSplunkHec.Type != nil {
			r.InputSplunkHec.Type = types.StringValue(string(*resp.InputSplunkHec.Type))
		} else {
			r.InputSplunkHec.Type = types.StringNull()
		}
		r.InputSplunkHec.UseFwdTimezone = types.BoolPointerValue(resp.InputSplunkHec.UseFwdTimezone)
	}
	if resp.InputSplunkSearch != nil {
		r.InputSplunkSearch = &tfTypes.InputSplunkSearch{}
		r.InputSplunkSearch.AuthHeaderExpr = types.StringPointerValue(resp.InputSplunkSearch.AuthHeaderExpr)
		if resp.InputSplunkSearch.AuthType != nil {
			r.InputSplunkSearch.AuthType = types.StringValue(string(*resp.InputSplunkSearch.AuthType))
		} else {
			r.InputSplunkSearch.AuthType = types.StringNull()
		}
		r.InputSplunkSearch.BreakerRulesets = make([]types.String, 0, len(resp.InputSplunkSearch.BreakerRulesets))
		for _, v := range resp.InputSplunkSearch.BreakerRulesets {
			r.InputSplunkSearch.BreakerRulesets = append(r.InputSplunkSearch.BreakerRulesets, types.StringValue(v))
		}
		r.InputSplunkSearch.Connections = []tfTypes.InputSplunkSearchConnections{}
		if len(r.InputSplunkSearch.Connections) > len(resp.InputSplunkSearch.Connections) {
			r.InputSplunkSearch.Connections = r.InputSplunkSearch.Connections[:len(resp.InputSplunkSearch.Connections)]
		}
		for connectionsCount51, connectionsItem51 := range resp.InputSplunkSearch.Connections {
			var connections103 tfTypes.InputSplunkSearchConnections
			connections103.Output = types.StringValue(connectionsItem51.Output)
			connections103.Pipeline = types.StringPointerValue(connectionsItem51.Pipeline)
			if connectionsCount51+1 > len(r.InputSplunkSearch.Connections) {
				r.InputSplunkSearch.Connections = append(r.InputSplunkSearch.Connections, connections103)
			} else {
				r.InputSplunkSearch.Connections[connectionsCount51].Output = connections103.Output
				r.InputSplunkSearch.Connections[connectionsCount51].Pipeline = connections103.Pipeline
			}
		}
		r.InputSplunkSearch.CredentialsSecret = types.StringPointerValue(resp.InputSplunkSearch.CredentialsSecret)
		r.InputSplunkSearch.CronSchedule = types.StringPointerValue(resp.InputSplunkSearch.CronSchedule)
		r.InputSplunkSearch.Description = types.StringPointerValue(resp.InputSplunkSearch.Description)
		r.InputSplunkSearch.Disabled = types.BoolPointerValue(resp.InputSplunkSearch.Disabled)
		r.InputSplunkSearch.Earliest = types.StringPointerValue(resp.InputSplunkSearch.Earliest)
		r.InputSplunkSearch.Encoding = types.StringPointerValue(resp.InputSplunkSearch.Encoding)
		r.InputSplunkSearch.Endpoint = types.StringPointerValue(resp.InputSplunkSearch.Endpoint)
		r.InputSplunkSearch.EndpointHeaders = []tfTypes.EndpointHeaders{}
		if len(r.InputSplunkSearch.EndpointHeaders) > len(resp.InputSplunkSearch.EndpointHeaders) {
			r.InputSplunkSearch.EndpointHeaders = r.InputSplunkSearch.EndpointHeaders[:len(resp.InputSplunkSearch.EndpointHeaders)]
		}
		for endpointHeadersCount, endpointHeadersItem := range resp.InputSplunkSearch.EndpointHeaders {
			var endpointHeaders1 tfTypes.EndpointHeaders
			endpointHeaders1.Name = types.StringValue(endpointHeadersItem.Name)
			endpointHeaders1.Value = types.StringValue(endpointHeadersItem.Value)
			if endpointHeadersCount+1 > len(r.InputSplunkSearch.EndpointHeaders) {
				r.InputSplunkSearch.EndpointHeaders = append(r.InputSplunkSearch.EndpointHeaders, endpointHeaders1)
			} else {
				r.InputSplunkSearch.EndpointHeaders[endpointHeadersCount].Name = endpointHeaders1.Name
				r.InputSplunkSearch.EndpointHeaders[endpointHeadersCount].Value = endpointHeaders1.Value
			}
		}
		r.InputSplunkSearch.EndpointParams = []tfTypes.EndpointParams{}
		if len(r.InputSplunkSearch.EndpointParams) > len(resp.InputSplunkSearch.EndpointParams) {
			r.InputSplunkSearch.EndpointParams = r.InputSplunkSearch.EndpointParams[:len(resp.InputSplunkSearch.EndpointParams)]
		}
		for endpointParamsCount, endpointParamsItem := range resp.InputSplunkSearch.EndpointParams {
			var endpointParams1 tfTypes.EndpointParams
			endpointParams1.Name = types.StringValue(endpointParamsItem.Name)
			endpointParams1.Value = types.StringValue(endpointParamsItem.Value)
			if endpointParamsCount+1 > len(r.InputSplunkSearch.EndpointParams) {
				r.InputSplunkSearch.EndpointParams = append(r.InputSplunkSearch.EndpointParams, endpointParams1)
			} else {
				r.InputSplunkSearch.EndpointParams[endpointParamsCount].Name = endpointParams1.Name
				r.InputSplunkSearch.EndpointParams[endpointParamsCount].Value = endpointParams1.Value
			}
		}
		r.InputSplunkSearch.Environment = types.StringPointerValue(resp.InputSplunkSearch.Environment)
		r.InputSplunkSearch.ID = types.StringPointerValue(resp.InputSplunkSearch.ID)
		r.InputSplunkSearch.JobTimeout = types.StringPointerValue(resp.InputSplunkSearch.JobTimeout)
		if resp.InputSplunkSearch.KeepAliveTime != nil {
			r.InputSplunkSearch.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkSearch.KeepAliveTime)))
		} else {
			r.InputSplunkSearch.KeepAliveTime = types.NumberNull()
		}
		r.InputSplunkSearch.Latest = types.StringPointerValue(resp.InputSplunkSearch.Latest)
		r.InputSplunkSearch.LoginURL = types.StringPointerValue(resp.InputSplunkSearch.LoginURL)
		if resp.InputSplunkSearch.LogLevel != nil {
			r.InputSplunkSearch.LogLevel = types.StringValue(string(*resp.InputSplunkSearch.LogLevel))
		} else {
			r.InputSplunkSearch.LogLevel = types.StringNull()
		}
		if resp.InputSplunkSearch.MaxMissedKeepAlives != nil {
			r.InputSplunkSearch.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkSearch.MaxMissedKeepAlives)))
		} else {
			r.InputSplunkSearch.MaxMissedKeepAlives = types.NumberNull()
		}
		r.InputSplunkSearch.Metadata = []tfTypes.InputSplunkSearchMetadata{}
		if len(r.InputSplunkSearch.Metadata) > len(resp.InputSplunkSearch.Metadata) {
			r.InputSplunkSearch.Metadata = r.InputSplunkSearch.Metadata[:len(resp.InputSplunkSearch.Metadata)]
		}
		for metadataCount56, metadataItem56 := range resp.InputSplunkSearch.Metadata {
			var metadata113 tfTypes.InputSplunkSearchMetadata
			metadata113.Name = types.StringValue(metadataItem56.Name)
			metadata113.Value = types.StringValue(metadataItem56.Value)
			if metadataCount56+1 > len(r.InputSplunkSearch.Metadata) {
				r.InputSplunkSearch.Metadata = append(r.InputSplunkSearch.Metadata, metadata113)
			} else {
				r.InputSplunkSearch.Metadata[metadataCount56].Name = metadata113.Name
				r.InputSplunkSearch.Metadata[metadataCount56].Value = metadata113.Value
			}
		}
		r.InputSplunkSearch.OauthHeaders = []tfTypes.OauthHeaders{}
		if len(r.InputSplunkSearch.OauthHeaders) > len(resp.InputSplunkSearch.OauthHeaders) {
			r.InputSplunkSearch.OauthHeaders = r.InputSplunkSearch.OauthHeaders[:len(resp.InputSplunkSearch.OauthHeaders)]
		}
		for oauthHeadersCount7, oauthHeadersItem7 := range resp.InputSplunkSearch.OauthHeaders {
			var oauthHeaders15 tfTypes.OauthHeaders
			oauthHeaders15.Name = types.StringValue(oauthHeadersItem7.Name)
			oauthHeaders15.Value = types.StringValue(oauthHeadersItem7.Value)
			if oauthHeadersCount7+1 > len(r.InputSplunkSearch.OauthHeaders) {
				r.InputSplunkSearch.OauthHeaders = append(r.InputSplunkSearch.OauthHeaders, oauthHeaders15)
			} else {
				r.InputSplunkSearch.OauthHeaders[oauthHeadersCount7].Name = oauthHeaders15.Name
				r.InputSplunkSearch.OauthHeaders[oauthHeadersCount7].Value = oauthHeaders15.Value
			}
		}
		r.InputSplunkSearch.OauthParams = []tfTypes.OauthParams{}
		if len(r.InputSplunkSearch.OauthParams) > len(resp.InputSplunkSearch.OauthParams) {
			r.InputSplunkSearch.OauthParams = r.InputSplunkSearch.OauthParams[:len(resp.InputSplunkSearch.OauthParams)]
		}
		for oauthParamsCount7, oauthParamsItem7 := range resp.InputSplunkSearch.OauthParams {
			var oauthParams15 tfTypes.OauthParams
			oauthParams15.Name = types.StringValue(oauthParamsItem7.Name)
			oauthParams15.Value = types.StringValue(oauthParamsItem7.Value)
			if oauthParamsCount7+1 > len(r.InputSplunkSearch.OauthParams) {
				r.InputSplunkSearch.OauthParams = append(r.InputSplunkSearch.OauthParams, oauthParams15)
			} else {
				r.InputSplunkSearch.OauthParams[oauthParamsCount7].Name = oauthParams15.Name
				r.InputSplunkSearch.OauthParams[oauthParamsCount7].Value = oauthParams15.Value
			}
		}
		if resp.InputSplunkSearch.OutputMode != nil {
			r.InputSplunkSearch.OutputMode = types.StringValue(string(*resp.InputSplunkSearch.OutputMode))
		} else {
			r.InputSplunkSearch.OutputMode = types.StringNull()
		}
		r.InputSplunkSearch.Password = types.StringPointerValue(resp.InputSplunkSearch.Password)
		r.InputSplunkSearch.Pipeline = types.StringPointerValue(resp.InputSplunkSearch.Pipeline)
		if resp.InputSplunkSearch.Pq == nil {
			r.InputSplunkSearch.Pq = nil
		} else {
			r.InputSplunkSearch.Pq = &tfTypes.InputSplunkSearchPq{}
			if resp.InputSplunkSearch.Pq.CommitFrequency != nil {
				r.InputSplunkSearch.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkSearch.Pq.CommitFrequency)))
			} else {
				r.InputSplunkSearch.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputSplunkSearch.Pq.Compress != nil {
				r.InputSplunkSearch.Pq.Compress = types.StringValue(string(*resp.InputSplunkSearch.Pq.Compress))
			} else {
				r.InputSplunkSearch.Pq.Compress = types.StringNull()
			}
			if resp.InputSplunkSearch.Pq.MaxBufferSize != nil {
				r.InputSplunkSearch.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkSearch.Pq.MaxBufferSize)))
			} else {
				r.InputSplunkSearch.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputSplunkSearch.Pq.MaxFileSize = types.StringPointerValue(resp.InputSplunkSearch.Pq.MaxFileSize)
			r.InputSplunkSearch.Pq.MaxSize = types.StringPointerValue(resp.InputSplunkSearch.Pq.MaxSize)
			if resp.InputSplunkSearch.Pq.Mode != nil {
				r.InputSplunkSearch.Pq.Mode = types.StringValue(string(*resp.InputSplunkSearch.Pq.Mode))
			} else {
				r.InputSplunkSearch.Pq.Mode = types.StringNull()
			}
			r.InputSplunkSearch.Pq.Path = types.StringPointerValue(resp.InputSplunkSearch.Pq.Path)
		}
		r.InputSplunkSearch.PqEnabled = types.BoolPointerValue(resp.InputSplunkSearch.PqEnabled)
		r.InputSplunkSearch.RejectUnauthorized = types.BoolPointerValue(resp.InputSplunkSearch.RejectUnauthorized)
		if resp.InputSplunkSearch.RequestTimeout != nil {
			r.InputSplunkSearch.RequestTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkSearch.RequestTimeout)))
		} else {
			r.InputSplunkSearch.RequestTimeout = types.NumberNull()
		}
		if resp.InputSplunkSearch.RetryRules == nil {
			r.InputSplunkSearch.RetryRules = nil
		} else {
			r.InputSplunkSearch.RetryRules = &tfTypes.RetryRules{}
			r.InputSplunkSearch.RetryRules.Codes = make([]types.Number, 0, len(resp.InputSplunkSearch.RetryRules.Codes))
			for _, v := range resp.InputSplunkSearch.RetryRules.Codes {
				r.InputSplunkSearch.RetryRules.Codes = append(r.InputSplunkSearch.RetryRules.Codes, types.NumberValue(big.NewFloat(float64(v))))
			}
			r.InputSplunkSearch.RetryRules.EnableHeader = types.BoolPointerValue(resp.InputSplunkSearch.RetryRules.EnableHeader)
			if resp.InputSplunkSearch.RetryRules.Interval != nil {
				r.InputSplunkSearch.RetryRules.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkSearch.RetryRules.Interval)))
			} else {
				r.InputSplunkSearch.RetryRules.Interval = types.NumberNull()
			}
			if resp.InputSplunkSearch.RetryRules.Limit != nil {
				r.InputSplunkSearch.RetryRules.Limit = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkSearch.RetryRules.Limit)))
			} else {
				r.InputSplunkSearch.RetryRules.Limit = types.NumberNull()
			}
			if resp.InputSplunkSearch.RetryRules.Multiplier != nil {
				r.InputSplunkSearch.RetryRules.Multiplier = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkSearch.RetryRules.Multiplier)))
			} else {
				r.InputSplunkSearch.RetryRules.Multiplier = types.NumberNull()
			}
			r.InputSplunkSearch.RetryRules.RetryConnectReset = types.BoolPointerValue(resp.InputSplunkSearch.RetryRules.RetryConnectReset)
			r.InputSplunkSearch.RetryRules.RetryConnectTimeout = types.BoolPointerValue(resp.InputSplunkSearch.RetryRules.RetryConnectTimeout)
			if resp.InputSplunkSearch.RetryRules.Type != nil {
				r.InputSplunkSearch.RetryRules.Type = types.StringValue(string(*resp.InputSplunkSearch.RetryRules.Type))
			} else {
				r.InputSplunkSearch.RetryRules.Type = types.StringNull()
			}
		}
		r.InputSplunkSearch.Search = types.StringValue(resp.InputSplunkSearch.Search)
		r.InputSplunkSearch.SearchHead = types.StringPointerValue(resp.InputSplunkSearch.SearchHead)
		r.InputSplunkSearch.Secret = types.StringPointerValue(resp.InputSplunkSearch.Secret)
		r.InputSplunkSearch.SecretParamName = types.StringPointerValue(resp.InputSplunkSearch.SecretParamName)
		r.InputSplunkSearch.SendToRoutes = types.BoolPointerValue(resp.InputSplunkSearch.SendToRoutes)
		if resp.InputSplunkSearch.StaleChannelFlushMs != nil {
			r.InputSplunkSearch.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkSearch.StaleChannelFlushMs)))
		} else {
			r.InputSplunkSearch.StaleChannelFlushMs = types.NumberNull()
		}
		r.InputSplunkSearch.Streamtags = make([]types.String, 0, len(resp.InputSplunkSearch.Streamtags))
		for _, v := range resp.InputSplunkSearch.Streamtags {
			r.InputSplunkSearch.Streamtags = append(r.InputSplunkSearch.Streamtags, types.StringValue(v))
		}
		r.InputSplunkSearch.TextSecret = types.StringPointerValue(resp.InputSplunkSearch.TextSecret)
		r.InputSplunkSearch.Token = types.StringPointerValue(resp.InputSplunkSearch.Token)
		r.InputSplunkSearch.TokenAttributeName = types.StringPointerValue(resp.InputSplunkSearch.TokenAttributeName)
		if resp.InputSplunkSearch.TokenTimeoutSecs != nil {
			r.InputSplunkSearch.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*resp.InputSplunkSearch.TokenTimeoutSecs)))
		} else {
			r.InputSplunkSearch.TokenTimeoutSecs = types.NumberNull()
		}
		r.InputSplunkSearch.TTL = types.StringPointerValue(resp.InputSplunkSearch.TTL)
		if resp.InputSplunkSearch.Type != nil {
			r.InputSplunkSearch.Type = types.StringValue(string(*resp.InputSplunkSearch.Type))
		} else {
			r.InputSplunkSearch.Type = types.StringNull()
		}
		r.InputSplunkSearch.Username = types.StringPointerValue(resp.InputSplunkSearch.Username)
		r.InputSplunkSearch.UseRoundRobinDNS = types.BoolPointerValue(resp.InputSplunkSearch.UseRoundRobinDNS)
	}
	if resp.InputSqs != nil {
		r.InputSqs = &tfTypes.InputSqs{}
		r.InputSqs.AssumeRoleArn = types.StringPointerValue(resp.InputSqs.AssumeRoleArn)
		r.InputSqs.AssumeRoleExternalID = types.StringPointerValue(resp.InputSqs.AssumeRoleExternalID)
		r.InputSqs.AwsAccountID = types.StringPointerValue(resp.InputSqs.AwsAccountID)
		r.InputSqs.AwsAPIKey = types.StringPointerValue(resp.InputSqs.AwsAPIKey)
		if resp.InputSqs.AwsAuthenticationMethod != nil {
			r.InputSqs.AwsAuthenticationMethod = types.StringValue(string(*resp.InputSqs.AwsAuthenticationMethod))
		} else {
			r.InputSqs.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputSqs.AwsSecret = types.StringPointerValue(resp.InputSqs.AwsSecret)
		r.InputSqs.AwsSecretKey = types.StringPointerValue(resp.InputSqs.AwsSecretKey)
		r.InputSqs.Connections = []tfTypes.InputSqsConnections{}
		if len(r.InputSqs.Connections) > len(resp.InputSqs.Connections) {
			r.InputSqs.Connections = r.InputSqs.Connections[:len(resp.InputSqs.Connections)]
		}
		for connectionsCount52, connectionsItem52 := range resp.InputSqs.Connections {
			var connections105 tfTypes.InputSqsConnections
			connections105.Output = types.StringValue(connectionsItem52.Output)
			connections105.Pipeline = types.StringPointerValue(connectionsItem52.Pipeline)
			if connectionsCount52+1 > len(r.InputSqs.Connections) {
				r.InputSqs.Connections = append(r.InputSqs.Connections, connections105)
			} else {
				r.InputSqs.Connections[connectionsCount52].Output = connections105.Output
				r.InputSqs.Connections[connectionsCount52].Pipeline = connections105.Pipeline
			}
		}
		r.InputSqs.CreateQueue = types.BoolPointerValue(resp.InputSqs.CreateQueue)
		r.InputSqs.Description = types.StringPointerValue(resp.InputSqs.Description)
		r.InputSqs.Disabled = types.BoolPointerValue(resp.InputSqs.Disabled)
		if resp.InputSqs.DurationSeconds != nil {
			r.InputSqs.DurationSeconds = types.NumberValue(big.NewFloat(float64(*resp.InputSqs.DurationSeconds)))
		} else {
			r.InputSqs.DurationSeconds = types.NumberNull()
		}
		r.InputSqs.EnableAssumeRole = types.BoolPointerValue(resp.InputSqs.EnableAssumeRole)
		r.InputSqs.Endpoint = types.StringPointerValue(resp.InputSqs.Endpoint)
		r.InputSqs.Environment = types.StringPointerValue(resp.InputSqs.Environment)
		r.InputSqs.ID = types.StringPointerValue(resp.InputSqs.ID)
		if resp.InputSqs.MaxMessages != nil {
			r.InputSqs.MaxMessages = types.NumberValue(big.NewFloat(float64(*resp.InputSqs.MaxMessages)))
		} else {
			r.InputSqs.MaxMessages = types.NumberNull()
		}
		r.InputSqs.Metadata = []tfTypes.InputSqsMetadata{}
		if len(r.InputSqs.Metadata) > len(resp.InputSqs.Metadata) {
			r.InputSqs.Metadata = r.InputSqs.Metadata[:len(resp.InputSqs.Metadata)]
		}
		for metadataCount57, metadataItem57 := range resp.InputSqs.Metadata {
			var metadata115 tfTypes.InputSqsMetadata
			metadata115.Name = types.StringValue(metadataItem57.Name)
			metadata115.Value = types.StringValue(metadataItem57.Value)
			if metadataCount57+1 > len(r.InputSqs.Metadata) {
				r.InputSqs.Metadata = append(r.InputSqs.Metadata, metadata115)
			} else {
				r.InputSqs.Metadata[metadataCount57].Name = metadata115.Name
				r.InputSqs.Metadata[metadataCount57].Value = metadata115.Value
			}
		}
		if resp.InputSqs.NumReceivers != nil {
			r.InputSqs.NumReceivers = types.NumberValue(big.NewFloat(float64(*resp.InputSqs.NumReceivers)))
		} else {
			r.InputSqs.NumReceivers = types.NumberNull()
		}
		r.InputSqs.Pipeline = types.StringPointerValue(resp.InputSqs.Pipeline)
		if resp.InputSqs.PollTimeout != nil {
			r.InputSqs.PollTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputSqs.PollTimeout)))
		} else {
			r.InputSqs.PollTimeout = types.NumberNull()
		}
		if resp.InputSqs.Pq == nil {
			r.InputSqs.Pq = nil
		} else {
			r.InputSqs.Pq = &tfTypes.InputSqsPq{}
			if resp.InputSqs.Pq.CommitFrequency != nil {
				r.InputSqs.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputSqs.Pq.CommitFrequency)))
			} else {
				r.InputSqs.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputSqs.Pq.Compress != nil {
				r.InputSqs.Pq.Compress = types.StringValue(string(*resp.InputSqs.Pq.Compress))
			} else {
				r.InputSqs.Pq.Compress = types.StringNull()
			}
			if resp.InputSqs.Pq.MaxBufferSize != nil {
				r.InputSqs.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSqs.Pq.MaxBufferSize)))
			} else {
				r.InputSqs.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputSqs.Pq.MaxFileSize = types.StringPointerValue(resp.InputSqs.Pq.MaxFileSize)
			r.InputSqs.Pq.MaxSize = types.StringPointerValue(resp.InputSqs.Pq.MaxSize)
			if resp.InputSqs.Pq.Mode != nil {
				r.InputSqs.Pq.Mode = types.StringValue(string(*resp.InputSqs.Pq.Mode))
			} else {
				r.InputSqs.Pq.Mode = types.StringNull()
			}
			r.InputSqs.Pq.Path = types.StringPointerValue(resp.InputSqs.Pq.Path)
		}
		r.InputSqs.PqEnabled = types.BoolPointerValue(resp.InputSqs.PqEnabled)
		r.InputSqs.QueueName = types.StringValue(resp.InputSqs.QueueName)
		if resp.InputSqs.QueueType != nil {
			r.InputSqs.QueueType = types.StringValue(string(*resp.InputSqs.QueueType))
		} else {
			r.InputSqs.QueueType = types.StringNull()
		}
		r.InputSqs.Region = types.StringPointerValue(resp.InputSqs.Region)
		r.InputSqs.RejectUnauthorized = types.BoolPointerValue(resp.InputSqs.RejectUnauthorized)
		r.InputSqs.ReuseConnections = types.BoolPointerValue(resp.InputSqs.ReuseConnections)
		r.InputSqs.SendToRoutes = types.BoolPointerValue(resp.InputSqs.SendToRoutes)
		if resp.InputSqs.SignatureVersion != nil {
			r.InputSqs.SignatureVersion = types.StringValue(string(*resp.InputSqs.SignatureVersion))
		} else {
			r.InputSqs.SignatureVersion = types.StringNull()
		}
		r.InputSqs.Streamtags = make([]types.String, 0, len(resp.InputSqs.Streamtags))
		for _, v := range resp.InputSqs.Streamtags {
			r.InputSqs.Streamtags = append(r.InputSqs.Streamtags, types.StringValue(v))
		}
		if resp.InputSqs.Type != nil {
			r.InputSqs.Type = types.StringValue(string(*resp.InputSqs.Type))
		} else {
			r.InputSqs.Type = types.StringNull()
		}
		if resp.InputSqs.VisibilityTimeout != nil {
			r.InputSqs.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputSqs.VisibilityTimeout)))
		} else {
			r.InputSqs.VisibilityTimeout = types.NumberNull()
		}
	}
	if resp.InputSyslog != nil {
		r.InputSyslog = &tfTypes.InputSyslog{}
		if resp.InputSyslog.InputSyslog1 != nil {
			r.InputSyslog.One = &tfTypes.InputSyslog1{}
			r.InputSyslog.One.AllowNonStandardAppName = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.AllowNonStandardAppName)
			r.InputSyslog.One.Connections = []tfTypes.InputSyslogConnections{}
			if len(r.InputSyslog.One.Connections) > len(resp.InputSyslog.InputSyslog1.Connections) {
				r.InputSyslog.One.Connections = r.InputSyslog.One.Connections[:len(resp.InputSyslog.InputSyslog1.Connections)]
			}
			for connectionsCount53, connectionsItem53 := range resp.InputSyslog.InputSyslog1.Connections {
				var connections107 tfTypes.InputSyslogConnections
				connections107.Output = types.StringValue(connectionsItem53.Output)
				connections107.Pipeline = types.StringPointerValue(connectionsItem53.Pipeline)
				if connectionsCount53+1 > len(r.InputSyslog.One.Connections) {
					r.InputSyslog.One.Connections = append(r.InputSyslog.One.Connections, connections107)
				} else {
					r.InputSyslog.One.Connections[connectionsCount53].Output = connections107.Output
					r.InputSyslog.One.Connections[connectionsCount53].Pipeline = connections107.Pipeline
				}
			}
			r.InputSyslog.One.Description = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Description)
			r.InputSyslog.One.Disabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.Disabled)
			r.InputSyslog.One.EnableLoadBalancing = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.EnableLoadBalancing)
			r.InputSyslog.One.EnableProxyHeader = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.EnableProxyHeader)
			r.InputSyslog.One.Environment = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Environment)
			r.InputSyslog.One.Host = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Host)
			r.InputSyslog.One.ID = types.StringPointerValue(resp.InputSyslog.InputSyslog1.ID)
			r.InputSyslog.One.InferFraming = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.InferFraming)
			r.InputSyslog.One.IPWhitelistRegex = types.StringPointerValue(resp.InputSyslog.InputSyslog1.IPWhitelistRegex)
			r.InputSyslog.One.KeepFieldsList = make([]types.String, 0, len(resp.InputSyslog.InputSyslog1.KeepFieldsList))
			for _, v := range resp.InputSyslog.InputSyslog1.KeepFieldsList {
				r.InputSyslog.One.KeepFieldsList = append(r.InputSyslog.One.KeepFieldsList, types.StringValue(v))
			}
			if resp.InputSyslog.InputSyslog1.MaxActiveCxn != nil {
				r.InputSyslog.One.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog1.MaxActiveCxn)))
			} else {
				r.InputSyslog.One.MaxActiveCxn = types.NumberNull()
			}
			if resp.InputSyslog.InputSyslog1.MaxBufferSize != nil {
				r.InputSyslog.One.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog1.MaxBufferSize)))
			} else {
				r.InputSyslog.One.MaxBufferSize = types.NumberNull()
			}
			r.InputSyslog.One.Metadata = []tfTypes.InputSyslogMetadata{}
			if len(r.InputSyslog.One.Metadata) > len(resp.InputSyslog.InputSyslog1.Metadata) {
				r.InputSyslog.One.Metadata = r.InputSyslog.One.Metadata[:len(resp.InputSyslog.InputSyslog1.Metadata)]
			}
			for metadataCount58, metadataItem58 := range resp.InputSyslog.InputSyslog1.Metadata {
				var metadata117 tfTypes.InputSyslogMetadata
				metadata117.Name = types.StringValue(metadataItem58.Name)
				metadata117.Value = types.StringValue(metadataItem58.Value)
				if metadataCount58+1 > len(r.InputSyslog.One.Metadata) {
					r.InputSyslog.One.Metadata = append(r.InputSyslog.One.Metadata, metadata117)
				} else {
					r.InputSyslog.One.Metadata[metadataCount58].Name = metadata117.Name
					r.InputSyslog.One.Metadata[metadataCount58].Value = metadata117.Value
				}
			}
			r.InputSyslog.One.OctetCounting = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.OctetCounting)
			r.InputSyslog.One.Pipeline = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Pipeline)
			if resp.InputSyslog.InputSyslog1.Pq == nil {
				r.InputSyslog.One.Pq = nil
			} else {
				r.InputSyslog.One.Pq = &tfTypes.InputSyslogPq{}
				if resp.InputSyslog.InputSyslog1.Pq.CommitFrequency != nil {
					r.InputSyslog.One.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog1.Pq.CommitFrequency)))
				} else {
					r.InputSyslog.One.Pq.CommitFrequency = types.NumberNull()
				}
				if resp.InputSyslog.InputSyslog1.Pq.Compress != nil {
					r.InputSyslog.One.Pq.Compress = types.StringValue(string(*resp.InputSyslog.InputSyslog1.Pq.Compress))
				} else {
					r.InputSyslog.One.Pq.Compress = types.StringNull()
				}
				if resp.InputSyslog.InputSyslog1.Pq.MaxBufferSize != nil {
					r.InputSyslog.One.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog1.Pq.MaxBufferSize)))
				} else {
					r.InputSyslog.One.Pq.MaxBufferSize = types.NumberNull()
				}
				r.InputSyslog.One.Pq.MaxFileSize = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Pq.MaxFileSize)
				r.InputSyslog.One.Pq.MaxSize = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Pq.MaxSize)
				if resp.InputSyslog.InputSyslog1.Pq.Mode != nil {
					r.InputSyslog.One.Pq.Mode = types.StringValue(string(*resp.InputSyslog.InputSyslog1.Pq.Mode))
				} else {
					r.InputSyslog.One.Pq.Mode = types.StringNull()
				}
				r.InputSyslog.One.Pq.Path = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Pq.Path)
			}
			r.InputSyslog.One.PqEnabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.PqEnabled)
			r.InputSyslog.One.SendToRoutes = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.SendToRoutes)
			r.InputSyslog.One.SingleMsgUDPPackets = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.SingleMsgUDPPackets)
			if resp.InputSyslog.InputSyslog1.SocketEndingMaxWait != nil {
				r.InputSyslog.One.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog1.SocketEndingMaxWait)))
			} else {
				r.InputSyslog.One.SocketEndingMaxWait = types.NumberNull()
			}
			if resp.InputSyslog.InputSyslog1.SocketIdleTimeout != nil {
				r.InputSyslog.One.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog1.SocketIdleTimeout)))
			} else {
				r.InputSyslog.One.SocketIdleTimeout = types.NumberNull()
			}
			if resp.InputSyslog.InputSyslog1.SocketMaxLifespan != nil {
				r.InputSyslog.One.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog1.SocketMaxLifespan)))
			} else {
				r.InputSyslog.One.SocketMaxLifespan = types.NumberNull()
			}
			r.InputSyslog.One.Streamtags = make([]types.String, 0, len(resp.InputSyslog.InputSyslog1.Streamtags))
			for _, v := range resp.InputSyslog.InputSyslog1.Streamtags {
				r.InputSyslog.One.Streamtags = append(r.InputSyslog.One.Streamtags, types.StringValue(v))
			}
			r.InputSyslog.One.StrictlyInferOctetCounting = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.StrictlyInferOctetCounting)
			if resp.InputSyslog.InputSyslog1.TCPPort != nil {
				r.InputSyslog.One.TCPPort = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog1.TCPPort)))
			} else {
				r.InputSyslog.One.TCPPort = types.NumberNull()
			}
			r.InputSyslog.One.TimestampTimezone = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TimestampTimezone)
			if resp.InputSyslog.InputSyslog1.TLS == nil {
				r.InputSyslog.One.TLS = nil
			} else {
				r.InputSyslog.One.TLS = &tfTypes.InputSyslogTLSSettingsServerSide{}
				r.InputSyslog.One.TLS.CaPath = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TLS.CaPath)
				r.InputSyslog.One.TLS.CertificateName = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TLS.CertificateName)
				r.InputSyslog.One.TLS.CertPath = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TLS.CertPath)
				if resp.InputSyslog.InputSyslog1.TLS.CommonNameRegex == nil {
					r.InputSyslog.One.TLS.CommonNameRegex = types.StringNull()
				} else {
					commonNameRegexResult19, _ := json.Marshal(resp.InputSyslog.InputSyslog1.TLS.CommonNameRegex)
					r.InputSyslog.One.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult19))
				}
				r.InputSyslog.One.TLS.Disabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.TLS.Disabled)
				if resp.InputSyslog.InputSyslog1.TLS.MaxVersion != nil {
					r.InputSyslog.One.TLS.MaxVersion = types.StringValue(string(*resp.InputSyslog.InputSyslog1.TLS.MaxVersion))
				} else {
					r.InputSyslog.One.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputSyslog.InputSyslog1.TLS.MinVersion != nil {
					r.InputSyslog.One.TLS.MinVersion = types.StringValue(string(*resp.InputSyslog.InputSyslog1.TLS.MinVersion))
				} else {
					r.InputSyslog.One.TLS.MinVersion = types.StringNull()
				}
				r.InputSyslog.One.TLS.Passphrase = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TLS.Passphrase)
				r.InputSyslog.One.TLS.PrivKeyPath = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TLS.PrivKeyPath)
				if resp.InputSyslog.InputSyslog1.TLS.RejectUnauthorized == nil {
					r.InputSyslog.One.TLS.RejectUnauthorized = types.StringNull()
				} else {
					rejectUnauthorizedResult19, _ := json.Marshal(resp.InputSyslog.InputSyslog1.TLS.RejectUnauthorized)
					r.InputSyslog.One.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult19))
				}
				r.InputSyslog.One.TLS.RequestCert = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.TLS.RequestCert)
			}
			r.InputSyslog.One.Type = types.StringValue(string(resp.InputSyslog.InputSyslog1.Type))
			r.InputSyslog.One.UDPPort = types.NumberValue(big.NewFloat(float64(resp.InputSyslog.InputSyslog1.UDPPort)))
			if resp.InputSyslog.InputSyslog1.UDPSocketRxBufSize != nil {
				r.InputSyslog.One.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog1.UDPSocketRxBufSize)))
			} else {
				r.InputSyslog.One.UDPSocketRxBufSize = types.NumberNull()
			}
		}
		if resp.InputSyslog.InputSyslog2 != nil {
			r.InputSyslog.Two = &tfTypes.InputSyslog2{}
			r.InputSyslog.Two.AllowNonStandardAppName = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.AllowNonStandardAppName)
			r.InputSyslog.Two.Connections = []tfTypes.InputSyslog2Connections{}
			if len(r.InputSyslog.Two.Connections) > len(resp.InputSyslog.InputSyslog2.Connections) {
				r.InputSyslog.Two.Connections = r.InputSyslog.Two.Connections[:len(resp.InputSyslog.InputSyslog2.Connections)]
			}
			for connectionsCount54, connectionsItem54 := range resp.InputSyslog.InputSyslog2.Connections {
				var connections109 tfTypes.InputSyslog2Connections
				connections109.Output = types.StringValue(connectionsItem54.Output)
				connections109.Pipeline = types.StringPointerValue(connectionsItem54.Pipeline)
				if connectionsCount54+1 > len(r.InputSyslog.Two.Connections) {
					r.InputSyslog.Two.Connections = append(r.InputSyslog.Two.Connections, connections109)
				} else {
					r.InputSyslog.Two.Connections[connectionsCount54].Output = connections109.Output
					r.InputSyslog.Two.Connections[connectionsCount54].Pipeline = connections109.Pipeline
				}
			}
			r.InputSyslog.Two.Description = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Description)
			r.InputSyslog.Two.Disabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.Disabled)
			r.InputSyslog.Two.EnableLoadBalancing = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.EnableLoadBalancing)
			r.InputSyslog.Two.EnableProxyHeader = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.EnableProxyHeader)
			r.InputSyslog.Two.Environment = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Environment)
			r.InputSyslog.Two.Host = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Host)
			r.InputSyslog.Two.ID = types.StringPointerValue(resp.InputSyslog.InputSyslog2.ID)
			r.InputSyslog.Two.InferFraming = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.InferFraming)
			r.InputSyslog.Two.IPWhitelistRegex = types.StringPointerValue(resp.InputSyslog.InputSyslog2.IPWhitelistRegex)
			r.InputSyslog.Two.KeepFieldsList = make([]types.String, 0, len(resp.InputSyslog.InputSyslog2.KeepFieldsList))
			for _, v := range resp.InputSyslog.InputSyslog2.KeepFieldsList {
				r.InputSyslog.Two.KeepFieldsList = append(r.InputSyslog.Two.KeepFieldsList, types.StringValue(v))
			}
			if resp.InputSyslog.InputSyslog2.MaxActiveCxn != nil {
				r.InputSyslog.Two.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog2.MaxActiveCxn)))
			} else {
				r.InputSyslog.Two.MaxActiveCxn = types.NumberNull()
			}
			if resp.InputSyslog.InputSyslog2.MaxBufferSize != nil {
				r.InputSyslog.Two.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog2.MaxBufferSize)))
			} else {
				r.InputSyslog.Two.MaxBufferSize = types.NumberNull()
			}
			r.InputSyslog.Two.Metadata = []tfTypes.InputSyslog2Metadata{}
			if len(r.InputSyslog.Two.Metadata) > len(resp.InputSyslog.InputSyslog2.Metadata) {
				r.InputSyslog.Two.Metadata = r.InputSyslog.Two.Metadata[:len(resp.InputSyslog.InputSyslog2.Metadata)]
			}
			for metadataCount59, metadataItem59 := range resp.InputSyslog.InputSyslog2.Metadata {
				var metadata119 tfTypes.InputSyslog2Metadata
				metadata119.Name = types.StringValue(metadataItem59.Name)
				metadata119.Value = types.StringValue(metadataItem59.Value)
				if metadataCount59+1 > len(r.InputSyslog.Two.Metadata) {
					r.InputSyslog.Two.Metadata = append(r.InputSyslog.Two.Metadata, metadata119)
				} else {
					r.InputSyslog.Two.Metadata[metadataCount59].Name = metadata119.Name
					r.InputSyslog.Two.Metadata[metadataCount59].Value = metadata119.Value
				}
			}
			r.InputSyslog.Two.OctetCounting = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.OctetCounting)
			r.InputSyslog.Two.Pipeline = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Pipeline)
			if resp.InputSyslog.InputSyslog2.Pq == nil {
				r.InputSyslog.Two.Pq = nil
			} else {
				r.InputSyslog.Two.Pq = &tfTypes.InputSyslog2Pq{}
				if resp.InputSyslog.InputSyslog2.Pq.CommitFrequency != nil {
					r.InputSyslog.Two.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog2.Pq.CommitFrequency)))
				} else {
					r.InputSyslog.Two.Pq.CommitFrequency = types.NumberNull()
				}
				if resp.InputSyslog.InputSyslog2.Pq.Compress != nil {
					r.InputSyslog.Two.Pq.Compress = types.StringValue(string(*resp.InputSyslog.InputSyslog2.Pq.Compress))
				} else {
					r.InputSyslog.Two.Pq.Compress = types.StringNull()
				}
				if resp.InputSyslog.InputSyslog2.Pq.MaxBufferSize != nil {
					r.InputSyslog.Two.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog2.Pq.MaxBufferSize)))
				} else {
					r.InputSyslog.Two.Pq.MaxBufferSize = types.NumberNull()
				}
				r.InputSyslog.Two.Pq.MaxFileSize = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Pq.MaxFileSize)
				r.InputSyslog.Two.Pq.MaxSize = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Pq.MaxSize)
				if resp.InputSyslog.InputSyslog2.Pq.Mode != nil {
					r.InputSyslog.Two.Pq.Mode = types.StringValue(string(*resp.InputSyslog.InputSyslog2.Pq.Mode))
				} else {
					r.InputSyslog.Two.Pq.Mode = types.StringNull()
				}
				r.InputSyslog.Two.Pq.Path = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Pq.Path)
			}
			r.InputSyslog.Two.PqEnabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.PqEnabled)
			r.InputSyslog.Two.SendToRoutes = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.SendToRoutes)
			r.InputSyslog.Two.SingleMsgUDPPackets = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.SingleMsgUDPPackets)
			if resp.InputSyslog.InputSyslog2.SocketEndingMaxWait != nil {
				r.InputSyslog.Two.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog2.SocketEndingMaxWait)))
			} else {
				r.InputSyslog.Two.SocketEndingMaxWait = types.NumberNull()
			}
			if resp.InputSyslog.InputSyslog2.SocketIdleTimeout != nil {
				r.InputSyslog.Two.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog2.SocketIdleTimeout)))
			} else {
				r.InputSyslog.Two.SocketIdleTimeout = types.NumberNull()
			}
			if resp.InputSyslog.InputSyslog2.SocketMaxLifespan != nil {
				r.InputSyslog.Two.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog2.SocketMaxLifespan)))
			} else {
				r.InputSyslog.Two.SocketMaxLifespan = types.NumberNull()
			}
			r.InputSyslog.Two.Streamtags = make([]types.String, 0, len(resp.InputSyslog.InputSyslog2.Streamtags))
			for _, v := range resp.InputSyslog.InputSyslog2.Streamtags {
				r.InputSyslog.Two.Streamtags = append(r.InputSyslog.Two.Streamtags, types.StringValue(v))
			}
			r.InputSyslog.Two.StrictlyInferOctetCounting = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.StrictlyInferOctetCounting)
			r.InputSyslog.Two.TCPPort = types.NumberValue(big.NewFloat(float64(resp.InputSyslog.InputSyslog2.TCPPort)))
			r.InputSyslog.Two.TimestampTimezone = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TimestampTimezone)
			if resp.InputSyslog.InputSyslog2.TLS == nil {
				r.InputSyslog.Two.TLS = nil
			} else {
				r.InputSyslog.Two.TLS = &tfTypes.InputSyslog2TLSSettingsServerSide{}
				r.InputSyslog.Two.TLS.CaPath = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TLS.CaPath)
				r.InputSyslog.Two.TLS.CertificateName = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TLS.CertificateName)
				r.InputSyslog.Two.TLS.CertPath = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TLS.CertPath)
				if resp.InputSyslog.InputSyslog2.TLS.CommonNameRegex == nil {
					r.InputSyslog.Two.TLS.CommonNameRegex = types.StringNull()
				} else {
					commonNameRegexResult20, _ := json.Marshal(resp.InputSyslog.InputSyslog2.TLS.CommonNameRegex)
					r.InputSyslog.Two.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult20))
				}
				r.InputSyslog.Two.TLS.Disabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.TLS.Disabled)
				if resp.InputSyslog.InputSyslog2.TLS.MaxVersion != nil {
					r.InputSyslog.Two.TLS.MaxVersion = types.StringValue(string(*resp.InputSyslog.InputSyslog2.TLS.MaxVersion))
				} else {
					r.InputSyslog.Two.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputSyslog.InputSyslog2.TLS.MinVersion != nil {
					r.InputSyslog.Two.TLS.MinVersion = types.StringValue(string(*resp.InputSyslog.InputSyslog2.TLS.MinVersion))
				} else {
					r.InputSyslog.Two.TLS.MinVersion = types.StringNull()
				}
				r.InputSyslog.Two.TLS.Passphrase = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TLS.Passphrase)
				r.InputSyslog.Two.TLS.PrivKeyPath = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TLS.PrivKeyPath)
				if resp.InputSyslog.InputSyslog2.TLS.RejectUnauthorized == nil {
					r.InputSyslog.Two.TLS.RejectUnauthorized = types.StringNull()
				} else {
					rejectUnauthorizedResult20, _ := json.Marshal(resp.InputSyslog.InputSyslog2.TLS.RejectUnauthorized)
					r.InputSyslog.Two.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult20))
				}
				r.InputSyslog.Two.TLS.RequestCert = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.TLS.RequestCert)
			}
			r.InputSyslog.Two.Type = types.StringValue(string(resp.InputSyslog.InputSyslog2.Type))
			if resp.InputSyslog.InputSyslog2.UDPPort != nil {
				r.InputSyslog.Two.UDPPort = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog2.UDPPort)))
			} else {
				r.InputSyslog.Two.UDPPort = types.NumberNull()
			}
			if resp.InputSyslog.InputSyslog2.UDPSocketRxBufSize != nil {
				r.InputSyslog.Two.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*resp.InputSyslog.InputSyslog2.UDPSocketRxBufSize)))
			} else {
				r.InputSyslog.Two.UDPSocketRxBufSize = types.NumberNull()
			}
		}
	}
	if resp.InputSystemMetrics != nil {
		r.InputSystemMetrics = &tfTypes.InputSystemMetrics{}
		r.InputSystemMetrics.Connections = []tfTypes.InputSystemMetricsConnections{}
		if len(r.InputSystemMetrics.Connections) > len(resp.InputSystemMetrics.Connections) {
			r.InputSystemMetrics.Connections = r.InputSystemMetrics.Connections[:len(resp.InputSystemMetrics.Connections)]
		}
		for connectionsCount55, connectionsItem55 := range resp.InputSystemMetrics.Connections {
			var connections111 tfTypes.InputSystemMetricsConnections
			connections111.Output = types.StringValue(connectionsItem55.Output)
			connections111.Pipeline = types.StringPointerValue(connectionsItem55.Pipeline)
			if connectionsCount55+1 > len(r.InputSystemMetrics.Connections) {
				r.InputSystemMetrics.Connections = append(r.InputSystemMetrics.Connections, connections111)
			} else {
				r.InputSystemMetrics.Connections[connectionsCount55].Output = connections111.Output
				r.InputSystemMetrics.Connections[connectionsCount55].Pipeline = connections111.Pipeline
			}
		}
		if resp.InputSystemMetrics.Container == nil {
			r.InputSystemMetrics.Container = nil
		} else {
			r.InputSystemMetrics.Container = &tfTypes.InputSystemMetricsContainer{}
			r.InputSystemMetrics.Container.AllContainers = types.BoolPointerValue(resp.InputSystemMetrics.Container.AllContainers)
			r.InputSystemMetrics.Container.Detail = types.BoolPointerValue(resp.InputSystemMetrics.Container.Detail)
			r.InputSystemMetrics.Container.DockerSocket = make([]types.String, 0, len(resp.InputSystemMetrics.Container.DockerSocket))
			for _, v := range resp.InputSystemMetrics.Container.DockerSocket {
				r.InputSystemMetrics.Container.DockerSocket = append(r.InputSystemMetrics.Container.DockerSocket, types.StringValue(v))
			}
			if resp.InputSystemMetrics.Container.DockerTimeout != nil {
				r.InputSystemMetrics.Container.DockerTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputSystemMetrics.Container.DockerTimeout)))
			} else {
				r.InputSystemMetrics.Container.DockerTimeout = types.NumberNull()
			}
			r.InputSystemMetrics.Container.Filters = []tfTypes.Filters{}
			if len(r.InputSystemMetrics.Container.Filters) > len(resp.InputSystemMetrics.Container.Filters) {
				r.InputSystemMetrics.Container.Filters = r.InputSystemMetrics.Container.Filters[:len(resp.InputSystemMetrics.Container.Filters)]
			}
			for filtersCount, filtersItem := range resp.InputSystemMetrics.Container.Filters {
				var filters1 tfTypes.Filters
				filters1.Expr = types.StringValue(filtersItem.Expr)
				if filtersCount+1 > len(r.InputSystemMetrics.Container.Filters) {
					r.InputSystemMetrics.Container.Filters = append(r.InputSystemMetrics.Container.Filters, filters1)
				} else {
					r.InputSystemMetrics.Container.Filters[filtersCount].Expr = filters1.Expr
				}
			}
			if resp.InputSystemMetrics.Container.Mode != nil {
				r.InputSystemMetrics.Container.Mode = types.StringValue(string(*resp.InputSystemMetrics.Container.Mode))
			} else {
				r.InputSystemMetrics.Container.Mode = types.StringNull()
			}
			r.InputSystemMetrics.Container.PerDevice = types.BoolPointerValue(resp.InputSystemMetrics.Container.PerDevice)
		}
		r.InputSystemMetrics.Description = types.StringPointerValue(resp.InputSystemMetrics.Description)
		r.InputSystemMetrics.Disabled = types.BoolPointerValue(resp.InputSystemMetrics.Disabled)
		r.InputSystemMetrics.Environment = types.StringPointerValue(resp.InputSystemMetrics.Environment)
		if resp.InputSystemMetrics.Host == nil {
			r.InputSystemMetrics.Host = nil
		} else {
			r.InputSystemMetrics.Host = &tfTypes.Host{}
			if resp.InputSystemMetrics.Host.Custom == nil {
				r.InputSystemMetrics.Host.Custom = nil
			} else {
				r.InputSystemMetrics.Host.Custom = &tfTypes.Custom{}
				if resp.InputSystemMetrics.Host.Custom.CPU == nil {
					r.InputSystemMetrics.Host.Custom.CPU = nil
				} else {
					r.InputSystemMetrics.Host.Custom.CPU = &tfTypes.CPU{}
					r.InputSystemMetrics.Host.Custom.CPU.Detail = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.CPU.Detail)
					if resp.InputSystemMetrics.Host.Custom.CPU.Mode != nil {
						r.InputSystemMetrics.Host.Custom.CPU.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Custom.CPU.Mode))
					} else {
						r.InputSystemMetrics.Host.Custom.CPU.Mode = types.StringNull()
					}
					r.InputSystemMetrics.Host.Custom.CPU.PerCPU = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.CPU.PerCPU)
					r.InputSystemMetrics.Host.Custom.CPU.Time = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.CPU.Time)
				}
				if resp.InputSystemMetrics.Host.Custom.Disk == nil {
					r.InputSystemMetrics.Host.Custom.Disk = nil
				} else {
					r.InputSystemMetrics.Host.Custom.Disk = &tfTypes.Disk{}
					r.InputSystemMetrics.Host.Custom.Disk.Detail = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.Disk.Detail)
					r.InputSystemMetrics.Host.Custom.Disk.Devices = make([]types.String, 0, len(resp.InputSystemMetrics.Host.Custom.Disk.Devices))
					for _, v := range resp.InputSystemMetrics.Host.Custom.Disk.Devices {
						r.InputSystemMetrics.Host.Custom.Disk.Devices = append(r.InputSystemMetrics.Host.Custom.Disk.Devices, types.StringValue(v))
					}
					r.InputSystemMetrics.Host.Custom.Disk.Fstypes = make([]types.String, 0, len(resp.InputSystemMetrics.Host.Custom.Disk.Fstypes))
					for _, v := range resp.InputSystemMetrics.Host.Custom.Disk.Fstypes {
						r.InputSystemMetrics.Host.Custom.Disk.Fstypes = append(r.InputSystemMetrics.Host.Custom.Disk.Fstypes, types.StringValue(v))
					}
					if resp.InputSystemMetrics.Host.Custom.Disk.Mode != nil {
						r.InputSystemMetrics.Host.Custom.Disk.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Custom.Disk.Mode))
					} else {
						r.InputSystemMetrics.Host.Custom.Disk.Mode = types.StringNull()
					}
					r.InputSystemMetrics.Host.Custom.Disk.Mountpoints = make([]types.String, 0, len(resp.InputSystemMetrics.Host.Custom.Disk.Mountpoints))
					for _, v := range resp.InputSystemMetrics.Host.Custom.Disk.Mountpoints {
						r.InputSystemMetrics.Host.Custom.Disk.Mountpoints = append(r.InputSystemMetrics.Host.Custom.Disk.Mountpoints, types.StringValue(v))
					}
					r.InputSystemMetrics.Host.Custom.Disk.PerDevice = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.Disk.PerDevice)
				}
				if resp.InputSystemMetrics.Host.Custom.Memory == nil {
					r.InputSystemMetrics.Host.Custom.Memory = nil
				} else {
					r.InputSystemMetrics.Host.Custom.Memory = &tfTypes.InputSystemMetricsMemory{}
					r.InputSystemMetrics.Host.Custom.Memory.Detail = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.Memory.Detail)
					if resp.InputSystemMetrics.Host.Custom.Memory.Mode != nil {
						r.InputSystemMetrics.Host.Custom.Memory.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Custom.Memory.Mode))
					} else {
						r.InputSystemMetrics.Host.Custom.Memory.Mode = types.StringNull()
					}
				}
				if resp.InputSystemMetrics.Host.Custom.Network == nil {
					r.InputSystemMetrics.Host.Custom.Network = nil
				} else {
					r.InputSystemMetrics.Host.Custom.Network = &tfTypes.Network{}
					r.InputSystemMetrics.Host.Custom.Network.Detail = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.Network.Detail)
					r.InputSystemMetrics.Host.Custom.Network.Devices = make([]types.String, 0, len(resp.InputSystemMetrics.Host.Custom.Network.Devices))
					for _, v := range resp.InputSystemMetrics.Host.Custom.Network.Devices {
						r.InputSystemMetrics.Host.Custom.Network.Devices = append(r.InputSystemMetrics.Host.Custom.Network.Devices, types.StringValue(v))
					}
					if resp.InputSystemMetrics.Host.Custom.Network.Mode != nil {
						r.InputSystemMetrics.Host.Custom.Network.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Custom.Network.Mode))
					} else {
						r.InputSystemMetrics.Host.Custom.Network.Mode = types.StringNull()
					}
					r.InputSystemMetrics.Host.Custom.Network.PerInterface = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.Network.PerInterface)
				}
				if resp.InputSystemMetrics.Host.Custom.System == nil {
					r.InputSystemMetrics.Host.Custom.System = nil
				} else {
					r.InputSystemMetrics.Host.Custom.System = &tfTypes.InputSystemMetricsSystem{}
					if resp.InputSystemMetrics.Host.Custom.System.Mode != nil {
						r.InputSystemMetrics.Host.Custom.System.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Custom.System.Mode))
					} else {
						r.InputSystemMetrics.Host.Custom.System.Mode = types.StringNull()
					}
					r.InputSystemMetrics.Host.Custom.System.Processes = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.System.Processes)
				}
			}
			if resp.InputSystemMetrics.Host.Mode != nil {
				r.InputSystemMetrics.Host.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Mode))
			} else {
				r.InputSystemMetrics.Host.Mode = types.StringNull()
			}
		}
		r.InputSystemMetrics.ID = types.StringValue(resp.InputSystemMetrics.ID)
		if resp.InputSystemMetrics.Interval != nil {
			r.InputSystemMetrics.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputSystemMetrics.Interval)))
		} else {
			r.InputSystemMetrics.Interval = types.NumberNull()
		}
		r.InputSystemMetrics.Metadata = []tfTypes.InputSystemMetricsMetadata{}
		if len(r.InputSystemMetrics.Metadata) > len(resp.InputSystemMetrics.Metadata) {
			r.InputSystemMetrics.Metadata = r.InputSystemMetrics.Metadata[:len(resp.InputSystemMetrics.Metadata)]
		}
		for metadataCount60, metadataItem60 := range resp.InputSystemMetrics.Metadata {
			var metadata121 tfTypes.InputSystemMetricsMetadata
			metadata121.Name = types.StringValue(metadataItem60.Name)
			metadata121.Value = types.StringValue(metadataItem60.Value)
			if metadataCount60+1 > len(r.InputSystemMetrics.Metadata) {
				r.InputSystemMetrics.Metadata = append(r.InputSystemMetrics.Metadata, metadata121)
			} else {
				r.InputSystemMetrics.Metadata[metadataCount60].Name = metadata121.Name
				r.InputSystemMetrics.Metadata[metadataCount60].Value = metadata121.Value
			}
		}
		if resp.InputSystemMetrics.Persistence == nil {
			r.InputSystemMetrics.Persistence = nil
		} else {
			r.InputSystemMetrics.Persistence = &tfTypes.InputSystemMetricsPersistence{}
			if resp.InputSystemMetrics.Persistence.Compress != nil {
				r.InputSystemMetrics.Persistence.Compress = types.StringValue(string(*resp.InputSystemMetrics.Persistence.Compress))
			} else {
				r.InputSystemMetrics.Persistence.Compress = types.StringNull()
			}
			r.InputSystemMetrics.Persistence.DestPath = types.StringPointerValue(resp.InputSystemMetrics.Persistence.DestPath)
			r.InputSystemMetrics.Persistence.Enable = types.BoolPointerValue(resp.InputSystemMetrics.Persistence.Enable)
			r.InputSystemMetrics.Persistence.MaxDataSize = types.StringPointerValue(resp.InputSystemMetrics.Persistence.MaxDataSize)
			r.InputSystemMetrics.Persistence.MaxDataTime = types.StringPointerValue(resp.InputSystemMetrics.Persistence.MaxDataTime)
			r.InputSystemMetrics.Persistence.TimeWindow = types.StringPointerValue(resp.InputSystemMetrics.Persistence.TimeWindow)
		}
		r.InputSystemMetrics.Pipeline = types.StringPointerValue(resp.InputSystemMetrics.Pipeline)
		if resp.InputSystemMetrics.Pq == nil {
			r.InputSystemMetrics.Pq = nil
		} else {
			r.InputSystemMetrics.Pq = &tfTypes.InputSystemMetricsPq{}
			if resp.InputSystemMetrics.Pq.CommitFrequency != nil {
				r.InputSystemMetrics.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputSystemMetrics.Pq.CommitFrequency)))
			} else {
				r.InputSystemMetrics.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputSystemMetrics.Pq.Compress != nil {
				r.InputSystemMetrics.Pq.Compress = types.StringValue(string(*resp.InputSystemMetrics.Pq.Compress))
			} else {
				r.InputSystemMetrics.Pq.Compress = types.StringNull()
			}
			if resp.InputSystemMetrics.Pq.MaxBufferSize != nil {
				r.InputSystemMetrics.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSystemMetrics.Pq.MaxBufferSize)))
			} else {
				r.InputSystemMetrics.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputSystemMetrics.Pq.MaxFileSize = types.StringPointerValue(resp.InputSystemMetrics.Pq.MaxFileSize)
			r.InputSystemMetrics.Pq.MaxSize = types.StringPointerValue(resp.InputSystemMetrics.Pq.MaxSize)
			if resp.InputSystemMetrics.Pq.Mode != nil {
				r.InputSystemMetrics.Pq.Mode = types.StringValue(string(*resp.InputSystemMetrics.Pq.Mode))
			} else {
				r.InputSystemMetrics.Pq.Mode = types.StringNull()
			}
			r.InputSystemMetrics.Pq.Path = types.StringPointerValue(resp.InputSystemMetrics.Pq.Path)
		}
		r.InputSystemMetrics.PqEnabled = types.BoolPointerValue(resp.InputSystemMetrics.PqEnabled)
		if resp.InputSystemMetrics.Process == nil {
			r.InputSystemMetrics.Process = nil
		} else {
			r.InputSystemMetrics.Process = &tfTypes.InputSystemMetricsProcess{}
			r.InputSystemMetrics.Process.Sets = []tfTypes.Sets{}
			if len(r.InputSystemMetrics.Process.Sets) > len(resp.InputSystemMetrics.Process.Sets) {
				r.InputSystemMetrics.Process.Sets = r.InputSystemMetrics.Process.Sets[:len(resp.InputSystemMetrics.Process.Sets)]
			}
			for setsCount, setsItem := range resp.InputSystemMetrics.Process.Sets {
				var sets1 tfTypes.Sets
				sets1.Filter = types.StringValue(setsItem.Filter)
				sets1.IncludeChildren = types.BoolPointerValue(setsItem.IncludeChildren)
				sets1.Name = types.StringValue(setsItem.Name)
				if setsCount+1 > len(r.InputSystemMetrics.Process.Sets) {
					r.InputSystemMetrics.Process.Sets = append(r.InputSystemMetrics.Process.Sets, sets1)
				} else {
					r.InputSystemMetrics.Process.Sets[setsCount].Filter = sets1.Filter
					r.InputSystemMetrics.Process.Sets[setsCount].IncludeChildren = sets1.IncludeChildren
					r.InputSystemMetrics.Process.Sets[setsCount].Name = sets1.Name
				}
			}
		}
		r.InputSystemMetrics.SendToRoutes = types.BoolPointerValue(resp.InputSystemMetrics.SendToRoutes)
		r.InputSystemMetrics.Streamtags = make([]types.String, 0, len(resp.InputSystemMetrics.Streamtags))
		for _, v := range resp.InputSystemMetrics.Streamtags {
			r.InputSystemMetrics.Streamtags = append(r.InputSystemMetrics.Streamtags, types.StringValue(v))
		}
		r.InputSystemMetrics.Type = types.StringValue(string(resp.InputSystemMetrics.Type))
	}
	if resp.InputSystemState != nil {
		r.InputSystemState = &tfTypes.InputSystemState{}
		if resp.InputSystemState.Collectors == nil {
			r.InputSystemState.Collectors = nil
		} else {
			r.InputSystemState.Collectors = &tfTypes.Collectors{}
			if resp.InputSystemState.Collectors.Disk == nil {
				r.InputSystemState.Collectors.Disk = nil
			} else {
				r.InputSystemState.Collectors.Disk = &tfTypes.DisksAndFileSystems{}
				r.InputSystemState.Collectors.Disk.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Disk.Enable)
			}
			if resp.InputSystemState.Collectors.DNS == nil {
				r.InputSystemState.Collectors.DNS = nil
			} else {
				r.InputSystemState.Collectors.DNS = &tfTypes.DNS{}
				r.InputSystemState.Collectors.DNS.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.DNS.Enable)
			}
			if resp.InputSystemState.Collectors.Firewall == nil {
				r.InputSystemState.Collectors.Firewall = nil
			} else {
				r.InputSystemState.Collectors.Firewall = &tfTypes.Firewall{}
				r.InputSystemState.Collectors.Firewall.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Firewall.Enable)
			}
			if resp.InputSystemState.Collectors.Hostsfile == nil {
				r.InputSystemState.Collectors.Hostsfile = nil
			} else {
				r.InputSystemState.Collectors.Hostsfile = &tfTypes.HostsFile{}
				r.InputSystemState.Collectors.Hostsfile.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Hostsfile.Enable)
			}
			if resp.InputSystemState.Collectors.Interfaces == nil {
				r.InputSystemState.Collectors.Interfaces = nil
			} else {
				r.InputSystemState.Collectors.Interfaces = &tfTypes.InputSystemStateInterfaces{}
				r.InputSystemState.Collectors.Interfaces.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Interfaces.Enable)
			}
			if resp.InputSystemState.Collectors.LoginUsers == nil {
				r.InputSystemState.Collectors.LoginUsers = nil
			} else {
				r.InputSystemState.Collectors.LoginUsers = &tfTypes.LoggedInUsers{}
				r.InputSystemState.Collectors.LoginUsers.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.LoginUsers.Enable)
			}
			if resp.InputSystemState.Collectors.Metadata == nil {
				r.InputSystemState.Collectors.Metadata = nil
			} else {
				r.InputSystemState.Collectors.Metadata = &tfTypes.HostInfo{}
				r.InputSystemState.Collectors.Metadata.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Metadata.Enable)
			}
			if resp.InputSystemState.Collectors.Ports == nil {
				r.InputSystemState.Collectors.Ports = nil
			} else {
				r.InputSystemState.Collectors.Ports = &tfTypes.ListeningPorts{}
				r.InputSystemState.Collectors.Ports.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Ports.Enable)
			}
			if resp.InputSystemState.Collectors.Routes == nil {
				r.InputSystemState.Collectors.Routes = nil
			} else {
				r.InputSystemState.Collectors.Routes = &tfTypes.InputSystemStateRoutes{}
				r.InputSystemState.Collectors.Routes.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Routes.Enable)
			}
			if resp.InputSystemState.Collectors.Services == nil {
				r.InputSystemState.Collectors.Services = nil
			} else {
				r.InputSystemState.Collectors.Services = &tfTypes.Services{}
				r.InputSystemState.Collectors.Services.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Services.Enable)
			}
			if resp.InputSystemState.Collectors.User == nil {
				r.InputSystemState.Collectors.User = nil
			} else {
				r.InputSystemState.Collectors.User = &tfTypes.UsersAndGroups{}
				r.InputSystemState.Collectors.User.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.User.Enable)
			}
		}
		r.InputSystemState.Connections = []tfTypes.InputSystemStateConnections{}
		if len(r.InputSystemState.Connections) > len(resp.InputSystemState.Connections) {
			r.InputSystemState.Connections = r.InputSystemState.Connections[:len(resp.InputSystemState.Connections)]
		}
		for connectionsCount56, connectionsItem56 := range resp.InputSystemState.Connections {
			var connections113 tfTypes.InputSystemStateConnections
			connections113.Output = types.StringValue(connectionsItem56.Output)
			connections113.Pipeline = types.StringPointerValue(connectionsItem56.Pipeline)
			if connectionsCount56+1 > len(r.InputSystemState.Connections) {
				r.InputSystemState.Connections = append(r.InputSystemState.Connections, connections113)
			} else {
				r.InputSystemState.Connections[connectionsCount56].Output = connections113.Output
				r.InputSystemState.Connections[connectionsCount56].Pipeline = connections113.Pipeline
			}
		}
		r.InputSystemState.Description = types.StringPointerValue(resp.InputSystemState.Description)
		r.InputSystemState.Disabled = types.BoolPointerValue(resp.InputSystemState.Disabled)
		r.InputSystemState.Environment = types.StringPointerValue(resp.InputSystemState.Environment)
		r.InputSystemState.ID = types.StringValue(resp.InputSystemState.ID)
		if resp.InputSystemState.Interval != nil {
			r.InputSystemState.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputSystemState.Interval)))
		} else {
			r.InputSystemState.Interval = types.NumberNull()
		}
		r.InputSystemState.Metadata = []tfTypes.InputSystemStateMetadata{}
		if len(r.InputSystemState.Metadata) > len(resp.InputSystemState.Metadata) {
			r.InputSystemState.Metadata = r.InputSystemState.Metadata[:len(resp.InputSystemState.Metadata)]
		}
		for metadataCount61, metadataItem61 := range resp.InputSystemState.Metadata {
			var metadata124 tfTypes.InputSystemStateMetadata
			metadata124.Name = types.StringValue(metadataItem61.Name)
			metadata124.Value = types.StringValue(metadataItem61.Value)
			if metadataCount61+1 > len(r.InputSystemState.Metadata) {
				r.InputSystemState.Metadata = append(r.InputSystemState.Metadata, metadata124)
			} else {
				r.InputSystemState.Metadata[metadataCount61].Name = metadata124.Name
				r.InputSystemState.Metadata[metadataCount61].Value = metadata124.Value
			}
		}
		if resp.InputSystemState.Persistence == nil {
			r.InputSystemState.Persistence = nil
		} else {
			r.InputSystemState.Persistence = &tfTypes.Persistence{}
			if resp.InputSystemState.Persistence.Compress != nil {
				r.InputSystemState.Persistence.Compress = types.StringValue(string(*resp.InputSystemState.Persistence.Compress))
			} else {
				r.InputSystemState.Persistence.Compress = types.StringNull()
			}
			r.InputSystemState.Persistence.DestPath = types.StringPointerValue(resp.InputSystemState.Persistence.DestPath)
			r.InputSystemState.Persistence.Enable = types.BoolPointerValue(resp.InputSystemState.Persistence.Enable)
			r.InputSystemState.Persistence.MaxDataSize = types.StringPointerValue(resp.InputSystemState.Persistence.MaxDataSize)
			r.InputSystemState.Persistence.MaxDataTime = types.StringPointerValue(resp.InputSystemState.Persistence.MaxDataTime)
			r.InputSystemState.Persistence.TimeWindow = types.StringPointerValue(resp.InputSystemState.Persistence.TimeWindow)
		}
		r.InputSystemState.Pipeline = types.StringPointerValue(resp.InputSystemState.Pipeline)
		if resp.InputSystemState.Pq == nil {
			r.InputSystemState.Pq = nil
		} else {
			r.InputSystemState.Pq = &tfTypes.InputSystemStatePq{}
			if resp.InputSystemState.Pq.CommitFrequency != nil {
				r.InputSystemState.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputSystemState.Pq.CommitFrequency)))
			} else {
				r.InputSystemState.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputSystemState.Pq.Compress != nil {
				r.InputSystemState.Pq.Compress = types.StringValue(string(*resp.InputSystemState.Pq.Compress))
			} else {
				r.InputSystemState.Pq.Compress = types.StringNull()
			}
			if resp.InputSystemState.Pq.MaxBufferSize != nil {
				r.InputSystemState.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputSystemState.Pq.MaxBufferSize)))
			} else {
				r.InputSystemState.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputSystemState.Pq.MaxFileSize = types.StringPointerValue(resp.InputSystemState.Pq.MaxFileSize)
			r.InputSystemState.Pq.MaxSize = types.StringPointerValue(resp.InputSystemState.Pq.MaxSize)
			if resp.InputSystemState.Pq.Mode != nil {
				r.InputSystemState.Pq.Mode = types.StringValue(string(*resp.InputSystemState.Pq.Mode))
			} else {
				r.InputSystemState.Pq.Mode = types.StringNull()
			}
			r.InputSystemState.Pq.Path = types.StringPointerValue(resp.InputSystemState.Pq.Path)
		}
		r.InputSystemState.PqEnabled = types.BoolPointerValue(resp.InputSystemState.PqEnabled)
		r.InputSystemState.SendToRoutes = types.BoolPointerValue(resp.InputSystemState.SendToRoutes)
		r.InputSystemState.Streamtags = make([]types.String, 0, len(resp.InputSystemState.Streamtags))
		for _, v := range resp.InputSystemState.Streamtags {
			r.InputSystemState.Streamtags = append(r.InputSystemState.Streamtags, types.StringValue(v))
		}
		r.InputSystemState.Type = types.StringValue(string(resp.InputSystemState.Type))
	}
	if resp.InputTcpjson != nil {
		r.InputTcpjson = &tfTypes.InputTcpjson{}
		r.InputTcpjson.AuthToken = types.StringPointerValue(resp.InputTcpjson.AuthToken)
		if resp.InputTcpjson.AuthType != nil {
			r.InputTcpjson.AuthType = types.StringValue(string(*resp.InputTcpjson.AuthType))
		} else {
			r.InputTcpjson.AuthType = types.StringNull()
		}
		r.InputTcpjson.Connections = []tfTypes.InputTcpjsonConnections{}
		if len(r.InputTcpjson.Connections) > len(resp.InputTcpjson.Connections) {
			r.InputTcpjson.Connections = r.InputTcpjson.Connections[:len(resp.InputTcpjson.Connections)]
		}
		for connectionsCount57, connectionsItem57 := range resp.InputTcpjson.Connections {
			var connections115 tfTypes.InputTcpjsonConnections
			connections115.Output = types.StringValue(connectionsItem57.Output)
			connections115.Pipeline = types.StringPointerValue(connectionsItem57.Pipeline)
			if connectionsCount57+1 > len(r.InputTcpjson.Connections) {
				r.InputTcpjson.Connections = append(r.InputTcpjson.Connections, connections115)
			} else {
				r.InputTcpjson.Connections[connectionsCount57].Output = connections115.Output
				r.InputTcpjson.Connections[connectionsCount57].Pipeline = connections115.Pipeline
			}
		}
		r.InputTcpjson.Description = types.StringPointerValue(resp.InputTcpjson.Description)
		r.InputTcpjson.Disabled = types.BoolPointerValue(resp.InputTcpjson.Disabled)
		r.InputTcpjson.EnableLoadBalancing = types.BoolPointerValue(resp.InputTcpjson.EnableLoadBalancing)
		r.InputTcpjson.EnableProxyHeader = types.BoolPointerValue(resp.InputTcpjson.EnableProxyHeader)
		r.InputTcpjson.Environment = types.StringPointerValue(resp.InputTcpjson.Environment)
		r.InputTcpjson.Host = types.StringPointerValue(resp.InputTcpjson.Host)
		r.InputTcpjson.ID = types.StringPointerValue(resp.InputTcpjson.ID)
		r.InputTcpjson.IPWhitelistRegex = types.StringPointerValue(resp.InputTcpjson.IPWhitelistRegex)
		if resp.InputTcpjson.MaxActiveCxn != nil {
			r.InputTcpjson.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*resp.InputTcpjson.MaxActiveCxn)))
		} else {
			r.InputTcpjson.MaxActiveCxn = types.NumberNull()
		}
		r.InputTcpjson.Metadata = []tfTypes.InputTcpjsonMetadata{}
		if len(r.InputTcpjson.Metadata) > len(resp.InputTcpjson.Metadata) {
			r.InputTcpjson.Metadata = r.InputTcpjson.Metadata[:len(resp.InputTcpjson.Metadata)]
		}
		for metadataCount62, metadataItem62 := range resp.InputTcpjson.Metadata {
			var metadata126 tfTypes.InputTcpjsonMetadata
			metadata126.Name = types.StringValue(metadataItem62.Name)
			metadata126.Value = types.StringValue(metadataItem62.Value)
			if metadataCount62+1 > len(r.InputTcpjson.Metadata) {
				r.InputTcpjson.Metadata = append(r.InputTcpjson.Metadata, metadata126)
			} else {
				r.InputTcpjson.Metadata[metadataCount62].Name = metadata126.Name
				r.InputTcpjson.Metadata[metadataCount62].Value = metadata126.Value
			}
		}
		r.InputTcpjson.Pipeline = types.StringPointerValue(resp.InputTcpjson.Pipeline)
		r.InputTcpjson.Port = types.NumberValue(big.NewFloat(float64(resp.InputTcpjson.Port)))
		if resp.InputTcpjson.Pq == nil {
			r.InputTcpjson.Pq = nil
		} else {
			r.InputTcpjson.Pq = &tfTypes.InputTcpjsonPq{}
			if resp.InputTcpjson.Pq.CommitFrequency != nil {
				r.InputTcpjson.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputTcpjson.Pq.CommitFrequency)))
			} else {
				r.InputTcpjson.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputTcpjson.Pq.Compress != nil {
				r.InputTcpjson.Pq.Compress = types.StringValue(string(*resp.InputTcpjson.Pq.Compress))
			} else {
				r.InputTcpjson.Pq.Compress = types.StringNull()
			}
			if resp.InputTcpjson.Pq.MaxBufferSize != nil {
				r.InputTcpjson.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputTcpjson.Pq.MaxBufferSize)))
			} else {
				r.InputTcpjson.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputTcpjson.Pq.MaxFileSize = types.StringPointerValue(resp.InputTcpjson.Pq.MaxFileSize)
			r.InputTcpjson.Pq.MaxSize = types.StringPointerValue(resp.InputTcpjson.Pq.MaxSize)
			if resp.InputTcpjson.Pq.Mode != nil {
				r.InputTcpjson.Pq.Mode = types.StringValue(string(*resp.InputTcpjson.Pq.Mode))
			} else {
				r.InputTcpjson.Pq.Mode = types.StringNull()
			}
			r.InputTcpjson.Pq.Path = types.StringPointerValue(resp.InputTcpjson.Pq.Path)
		}
		r.InputTcpjson.PqEnabled = types.BoolPointerValue(resp.InputTcpjson.PqEnabled)
		r.InputTcpjson.SendToRoutes = types.BoolPointerValue(resp.InputTcpjson.SendToRoutes)
		if resp.InputTcpjson.SocketEndingMaxWait != nil {
			r.InputTcpjson.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*resp.InputTcpjson.SocketEndingMaxWait)))
		} else {
			r.InputTcpjson.SocketEndingMaxWait = types.NumberNull()
		}
		if resp.InputTcpjson.SocketIdleTimeout != nil {
			r.InputTcpjson.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*resp.InputTcpjson.SocketIdleTimeout)))
		} else {
			r.InputTcpjson.SocketIdleTimeout = types.NumberNull()
		}
		if resp.InputTcpjson.SocketMaxLifespan != nil {
			r.InputTcpjson.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*resp.InputTcpjson.SocketMaxLifespan)))
		} else {
			r.InputTcpjson.SocketMaxLifespan = types.NumberNull()
		}
		r.InputTcpjson.Streamtags = make([]types.String, 0, len(resp.InputTcpjson.Streamtags))
		for _, v := range resp.InputTcpjson.Streamtags {
			r.InputTcpjson.Streamtags = append(r.InputTcpjson.Streamtags, types.StringValue(v))
		}
		r.InputTcpjson.TextSecret = types.StringPointerValue(resp.InputTcpjson.TextSecret)
		if resp.InputTcpjson.TLS == nil {
			r.InputTcpjson.TLS = nil
		} else {
			r.InputTcpjson.TLS = &tfTypes.InputTcpjsonTLSSettingsServerSide{}
			r.InputTcpjson.TLS.CaPath = types.StringPointerValue(resp.InputTcpjson.TLS.CaPath)
			r.InputTcpjson.TLS.CertificateName = types.StringPointerValue(resp.InputTcpjson.TLS.CertificateName)
			r.InputTcpjson.TLS.CertPath = types.StringPointerValue(resp.InputTcpjson.TLS.CertPath)
			if resp.InputTcpjson.TLS.CommonNameRegex == nil {
				r.InputTcpjson.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult21, _ := json.Marshal(resp.InputTcpjson.TLS.CommonNameRegex)
				r.InputTcpjson.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult21))
			}
			r.InputTcpjson.TLS.Disabled = types.BoolPointerValue(resp.InputTcpjson.TLS.Disabled)
			if resp.InputTcpjson.TLS.MaxVersion != nil {
				r.InputTcpjson.TLS.MaxVersion = types.StringValue(string(*resp.InputTcpjson.TLS.MaxVersion))
			} else {
				r.InputTcpjson.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputTcpjson.TLS.MinVersion != nil {
				r.InputTcpjson.TLS.MinVersion = types.StringValue(string(*resp.InputTcpjson.TLS.MinVersion))
			} else {
				r.InputTcpjson.TLS.MinVersion = types.StringNull()
			}
			r.InputTcpjson.TLS.Passphrase = types.StringPointerValue(resp.InputTcpjson.TLS.Passphrase)
			r.InputTcpjson.TLS.PrivKeyPath = types.StringPointerValue(resp.InputTcpjson.TLS.PrivKeyPath)
			if resp.InputTcpjson.TLS.RejectUnauthorized == nil {
				r.InputTcpjson.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult21, _ := json.Marshal(resp.InputTcpjson.TLS.RejectUnauthorized)
				r.InputTcpjson.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult21))
			}
			r.InputTcpjson.TLS.RequestCert = types.BoolPointerValue(resp.InputTcpjson.TLS.RequestCert)
		}
		if resp.InputTcpjson.Type != nil {
			r.InputTcpjson.Type = types.StringValue(string(*resp.InputTcpjson.Type))
		} else {
			r.InputTcpjson.Type = types.StringNull()
		}
	}
	if resp.InputWindowsMetrics != nil {
		r.InputWindowsMetrics = &tfTypes.InputWindowsMetrics{}
		r.InputWindowsMetrics.Connections = []tfTypes.InputWindowsMetricsConnections{}
		if len(r.InputWindowsMetrics.Connections) > len(resp.InputWindowsMetrics.Connections) {
			r.InputWindowsMetrics.Connections = r.InputWindowsMetrics.Connections[:len(resp.InputWindowsMetrics.Connections)]
		}
		for connectionsCount58, connectionsItem58 := range resp.InputWindowsMetrics.Connections {
			var connections117 tfTypes.InputWindowsMetricsConnections
			connections117.Output = types.StringValue(connectionsItem58.Output)
			connections117.Pipeline = types.StringPointerValue(connectionsItem58.Pipeline)
			if connectionsCount58+1 > len(r.InputWindowsMetrics.Connections) {
				r.InputWindowsMetrics.Connections = append(r.InputWindowsMetrics.Connections, connections117)
			} else {
				r.InputWindowsMetrics.Connections[connectionsCount58].Output = connections117.Output
				r.InputWindowsMetrics.Connections[connectionsCount58].Pipeline = connections117.Pipeline
			}
		}
		r.InputWindowsMetrics.Description = types.StringPointerValue(resp.InputWindowsMetrics.Description)
		r.InputWindowsMetrics.Disabled = types.BoolPointerValue(resp.InputWindowsMetrics.Disabled)
		r.InputWindowsMetrics.DisableNativeModule = types.BoolPointerValue(resp.InputWindowsMetrics.DisableNativeModule)
		r.InputWindowsMetrics.Environment = types.StringPointerValue(resp.InputWindowsMetrics.Environment)
		if resp.InputWindowsMetrics.Host == nil {
			r.InputWindowsMetrics.Host = nil
		} else {
			r.InputWindowsMetrics.Host = &tfTypes.InputWindowsMetricsHost{}
			if resp.InputWindowsMetrics.Host.Custom == nil {
				r.InputWindowsMetrics.Host.Custom = nil
			} else {
				r.InputWindowsMetrics.Host.Custom = &tfTypes.InputWindowsMetricsCustom{}
				if resp.InputWindowsMetrics.Host.Custom.CPU == nil {
					r.InputWindowsMetrics.Host.Custom.CPU = nil
				} else {
					r.InputWindowsMetrics.Host.Custom.CPU = &tfTypes.InputWindowsMetricsCPU{}
					r.InputWindowsMetrics.Host.Custom.CPU.Detail = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.CPU.Detail)
					if resp.InputWindowsMetrics.Host.Custom.CPU.Mode != nil {
						r.InputWindowsMetrics.Host.Custom.CPU.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Custom.CPU.Mode))
					} else {
						r.InputWindowsMetrics.Host.Custom.CPU.Mode = types.StringNull()
					}
					r.InputWindowsMetrics.Host.Custom.CPU.PerCPU = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.CPU.PerCPU)
					r.InputWindowsMetrics.Host.Custom.CPU.Time = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.CPU.Time)
				}
				if resp.InputWindowsMetrics.Host.Custom.Disk == nil {
					r.InputWindowsMetrics.Host.Custom.Disk = nil
				} else {
					r.InputWindowsMetrics.Host.Custom.Disk = &tfTypes.InputWindowsMetricsDisk{}
					if resp.InputWindowsMetrics.Host.Custom.Disk.Mode != nil {
						r.InputWindowsMetrics.Host.Custom.Disk.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Custom.Disk.Mode))
					} else {
						r.InputWindowsMetrics.Host.Custom.Disk.Mode = types.StringNull()
					}
					r.InputWindowsMetrics.Host.Custom.Disk.PerVolume = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.Disk.PerVolume)
					r.InputWindowsMetrics.Host.Custom.Disk.Volumes = make([]types.String, 0, len(resp.InputWindowsMetrics.Host.Custom.Disk.Volumes))
					for _, v := range resp.InputWindowsMetrics.Host.Custom.Disk.Volumes {
						r.InputWindowsMetrics.Host.Custom.Disk.Volumes = append(r.InputWindowsMetrics.Host.Custom.Disk.Volumes, types.StringValue(v))
					}
				}
				if resp.InputWindowsMetrics.Host.Custom.Memory == nil {
					r.InputWindowsMetrics.Host.Custom.Memory = nil
				} else {
					r.InputWindowsMetrics.Host.Custom.Memory = &tfTypes.InputWindowsMetricsMemory{}
					r.InputWindowsMetrics.Host.Custom.Memory.Detail = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.Memory.Detail)
					if resp.InputWindowsMetrics.Host.Custom.Memory.Mode != nil {
						r.InputWindowsMetrics.Host.Custom.Memory.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Custom.Memory.Mode))
					} else {
						r.InputWindowsMetrics.Host.Custom.Memory.Mode = types.StringNull()
					}
				}
				if resp.InputWindowsMetrics.Host.Custom.Network == nil {
					r.InputWindowsMetrics.Host.Custom.Network = nil
				} else {
					r.InputWindowsMetrics.Host.Custom.Network = &tfTypes.InputWindowsMetricsNetwork{}
					r.InputWindowsMetrics.Host.Custom.Network.Detail = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.Network.Detail)
					r.InputWindowsMetrics.Host.Custom.Network.Devices = make([]types.String, 0, len(resp.InputWindowsMetrics.Host.Custom.Network.Devices))
					for _, v := range resp.InputWindowsMetrics.Host.Custom.Network.Devices {
						r.InputWindowsMetrics.Host.Custom.Network.Devices = append(r.InputWindowsMetrics.Host.Custom.Network.Devices, types.StringValue(v))
					}
					if resp.InputWindowsMetrics.Host.Custom.Network.Mode != nil {
						r.InputWindowsMetrics.Host.Custom.Network.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Custom.Network.Mode))
					} else {
						r.InputWindowsMetrics.Host.Custom.Network.Mode = types.StringNull()
					}
					r.InputWindowsMetrics.Host.Custom.Network.PerInterface = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.Network.PerInterface)
				}
				if resp.InputWindowsMetrics.Host.Custom.System == nil {
					r.InputWindowsMetrics.Host.Custom.System = nil
				} else {
					r.InputWindowsMetrics.Host.Custom.System = &tfTypes.InputWindowsMetricsSystem{}
					r.InputWindowsMetrics.Host.Custom.System.Detail = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.System.Detail)
					if resp.InputWindowsMetrics.Host.Custom.System.Mode != nil {
						r.InputWindowsMetrics.Host.Custom.System.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Custom.System.Mode))
					} else {
						r.InputWindowsMetrics.Host.Custom.System.Mode = types.StringNull()
					}
				}
			}
			if resp.InputWindowsMetrics.Host.Mode != nil {
				r.InputWindowsMetrics.Host.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Mode))
			} else {
				r.InputWindowsMetrics.Host.Mode = types.StringNull()
			}
		}
		r.InputWindowsMetrics.ID = types.StringValue(resp.InputWindowsMetrics.ID)
		if resp.InputWindowsMetrics.Interval != nil {
			r.InputWindowsMetrics.Interval = types.NumberValue(big.NewFloat(float64(*resp.InputWindowsMetrics.Interval)))
		} else {
			r.InputWindowsMetrics.Interval = types.NumberNull()
		}
		r.InputWindowsMetrics.Metadata = []tfTypes.InputWindowsMetricsMetadata{}
		if len(r.InputWindowsMetrics.Metadata) > len(resp.InputWindowsMetrics.Metadata) {
			r.InputWindowsMetrics.Metadata = r.InputWindowsMetrics.Metadata[:len(resp.InputWindowsMetrics.Metadata)]
		}
		for metadataCount63, metadataItem63 := range resp.InputWindowsMetrics.Metadata {
			var metadata128 tfTypes.InputWindowsMetricsMetadata
			metadata128.Name = types.StringValue(metadataItem63.Name)
			metadata128.Value = types.StringValue(metadataItem63.Value)
			if metadataCount63+1 > len(r.InputWindowsMetrics.Metadata) {
				r.InputWindowsMetrics.Metadata = append(r.InputWindowsMetrics.Metadata, metadata128)
			} else {
				r.InputWindowsMetrics.Metadata[metadataCount63].Name = metadata128.Name
				r.InputWindowsMetrics.Metadata[metadataCount63].Value = metadata128.Value
			}
		}
		if resp.InputWindowsMetrics.Persistence == nil {
			r.InputWindowsMetrics.Persistence = nil
		} else {
			r.InputWindowsMetrics.Persistence = &tfTypes.InputWindowsMetricsPersistence{}
			if resp.InputWindowsMetrics.Persistence.Compress != nil {
				r.InputWindowsMetrics.Persistence.Compress = types.StringValue(string(*resp.InputWindowsMetrics.Persistence.Compress))
			} else {
				r.InputWindowsMetrics.Persistence.Compress = types.StringNull()
			}
			r.InputWindowsMetrics.Persistence.DestPath = types.StringPointerValue(resp.InputWindowsMetrics.Persistence.DestPath)
			r.InputWindowsMetrics.Persistence.Enable = types.BoolPointerValue(resp.InputWindowsMetrics.Persistence.Enable)
			r.InputWindowsMetrics.Persistence.MaxDataSize = types.StringPointerValue(resp.InputWindowsMetrics.Persistence.MaxDataSize)
			r.InputWindowsMetrics.Persistence.MaxDataTime = types.StringPointerValue(resp.InputWindowsMetrics.Persistence.MaxDataTime)
			r.InputWindowsMetrics.Persistence.TimeWindow = types.StringPointerValue(resp.InputWindowsMetrics.Persistence.TimeWindow)
		}
		r.InputWindowsMetrics.Pipeline = types.StringPointerValue(resp.InputWindowsMetrics.Pipeline)
		if resp.InputWindowsMetrics.Pq == nil {
			r.InputWindowsMetrics.Pq = nil
		} else {
			r.InputWindowsMetrics.Pq = &tfTypes.InputWindowsMetricsPq{}
			if resp.InputWindowsMetrics.Pq.CommitFrequency != nil {
				r.InputWindowsMetrics.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*resp.InputWindowsMetrics.Pq.CommitFrequency)))
			} else {
				r.InputWindowsMetrics.Pq.CommitFrequency = types.NumberNull()
			}
			if resp.InputWindowsMetrics.Pq.Compress != nil {
				r.InputWindowsMetrics.Pq.Compress = types.StringValue(string(*resp.InputWindowsMetrics.Pq.Compress))
			} else {
				r.InputWindowsMetrics.Pq.Compress = types.StringNull()
			}
			if resp.InputWindowsMetrics.Pq.MaxBufferSize != nil {
				r.InputWindowsMetrics.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*resp.InputWindowsMetrics.Pq.MaxBufferSize)))
			} else {
				r.InputWindowsMetrics.Pq.MaxBufferSize = types.NumberNull()
			}
			r.InputWindowsMetrics.Pq.MaxFileSize = types.StringPointerValue(resp.InputWindowsMetrics.Pq.MaxFileSize)
			r.InputWindowsMetrics.Pq.MaxSize = types.StringPointerValue(resp.InputWindowsMetrics.Pq.MaxSize)
			if resp.InputWindowsMetrics.Pq.Mode != nil {
				r.InputWindowsMetrics.Pq.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Pq.Mode))
			} else {
				r.InputWindowsMetrics.Pq.Mode = types.StringNull()
			}
			r.InputWindowsMetrics.Pq.Path = types.StringPointerValue(resp.InputWindowsMetrics.Pq.Path)
		}
		r.InputWindowsMetrics.PqEnabled = types.BoolPointerValue(resp.InputWindowsMetrics.PqEnabled)
		if resp.InputWindowsMetrics.Process == nil {
			r.InputWindowsMetrics.Process = nil
		} else {
			r.InputWindowsMetrics.Process = &tfTypes.InputWindowsMetricsProcess{}
			r.InputWindowsMetrics.Process.Sets = []tfTypes.InputWindowsMetricsSets{}
			if len(r.InputWindowsMetrics.Process.Sets) > len(resp.InputWindowsMetrics.Process.Sets) {
				r.InputWindowsMetrics.Process.Sets = r.InputWindowsMetrics.Process.Sets[:len(resp.InputWindowsMetrics.Process.Sets)]
			}
			for setsCount1, setsItem1 := range resp.InputWindowsMetrics.Process.Sets {
				var sets3 tfTypes.InputWindowsMetricsSets
				sets3.Filter = types.StringValue(setsItem1.Filter)
				sets3.IncludeChildren = types.BoolPointerValue(setsItem1.IncludeChildren)
				sets3.Name = types.StringValue(setsItem1.Name)
				if setsCount1+1 > len(r.InputWindowsMetrics.Process.Sets) {
					r.InputWindowsMetrics.Process.Sets = append(r.InputWindowsMetrics.Process.Sets, sets3)
				} else {
					r.InputWindowsMetrics.Process.Sets[setsCount1].Filter = sets3.Filter
					r.InputWindowsMetrics.Process.Sets[setsCount1].IncludeChildren = sets3.IncludeChildren
					r.InputWindowsMetrics.Process.Sets[setsCount1].Name = sets3.Name
				}
			}
		}
		r.InputWindowsMetrics.SendToRoutes = types.BoolPointerValue(resp.InputWindowsMetrics.SendToRoutes)
		r.InputWindowsMetrics.Streamtags = make([]types.String, 0, len(resp.InputWindowsMetrics.Streamtags))
		for _, v := range resp.InputWindowsMetrics.Streamtags {
			r.InputWindowsMetrics.Streamtags = append(r.InputWindowsMetrics.Streamtags, types.StringValue(v))
		}
		r.InputWindowsMetrics.Type = types.StringValue(string(resp.InputWindowsMetrics.Type))
	}
}
