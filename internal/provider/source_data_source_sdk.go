// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-cribl-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/operations"
	"math/big"
)

func (r *SourceDataSourceModel) RefreshFromOperationsGetInputByIDResponseBody(resp *operations.GetInputByIDResponseBody) {
	if resp != nil {
		r.CountTotal = types.Int64PointerValue(resp.CountTotal)
		r.Items = []tfTypes.Input{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items1 tfTypes.Input
			if itemsItem.InputAppscope != nil {
				items1.InputAppscope = &tfTypes.InputAppscope{}
				items1.InputAppscope.AuthToken = types.StringPointerValue(itemsItem.InputAppscope.AuthToken)
				if itemsItem.InputAppscope.AuthType != nil {
					items1.InputAppscope.AuthType = types.StringValue(string(*itemsItem.InputAppscope.AuthType))
				} else {
					items1.InputAppscope.AuthType = types.StringNull()
				}
				items1.InputAppscope.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputAppscope.BreakerRulesets))
				for _, v := range itemsItem.InputAppscope.BreakerRulesets {
					items1.InputAppscope.BreakerRulesets = append(items1.InputAppscope.BreakerRulesets, types.StringValue(v))
				}
				items1.InputAppscope.Connections = []tfTypes.InputAppscopeConnections{}
				for connectionsCount, connectionsItem := range itemsItem.InputAppscope.Connections {
					var connections1 tfTypes.InputAppscopeConnections
					connections1.Output = types.StringValue(connectionsItem.Output)
					connections1.Pipeline = types.StringPointerValue(connectionsItem.Pipeline)
					if connectionsCount+1 > len(items1.InputAppscope.Connections) {
						items1.InputAppscope.Connections = append(items1.InputAppscope.Connections, connections1)
					} else {
						items1.InputAppscope.Connections[connectionsCount].Output = connections1.Output
						items1.InputAppscope.Connections[connectionsCount].Pipeline = connections1.Pipeline
					}
				}
				items1.InputAppscope.Description = types.StringPointerValue(itemsItem.InputAppscope.Description)
				items1.InputAppscope.Disabled = types.BoolPointerValue(itemsItem.InputAppscope.Disabled)
				items1.InputAppscope.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputAppscope.EnableProxyHeader)
				items1.InputAppscope.EnableUnixPath = types.BoolPointerValue(itemsItem.InputAppscope.EnableUnixPath)
				items1.InputAppscope.Environment = types.StringPointerValue(itemsItem.InputAppscope.Environment)
				if itemsItem.InputAppscope.Filter == nil {
					items1.InputAppscope.Filter = nil
				} else {
					items1.InputAppscope.Filter = &tfTypes.Filter{}
					items1.InputAppscope.Filter.Allow = []tfTypes.Allow{}
					for allowCount, allowItem := range itemsItem.InputAppscope.Filter.Allow {
						var allow1 tfTypes.Allow
						allow1.Arg = types.StringPointerValue(allowItem.Arg)
						allow1.Config = types.StringValue(allowItem.Config)
						allow1.Procname = types.StringValue(allowItem.Procname)
						if allowCount+1 > len(items1.InputAppscope.Filter.Allow) {
							items1.InputAppscope.Filter.Allow = append(items1.InputAppscope.Filter.Allow, allow1)
						} else {
							items1.InputAppscope.Filter.Allow[allowCount].Arg = allow1.Arg
							items1.InputAppscope.Filter.Allow[allowCount].Config = allow1.Config
							items1.InputAppscope.Filter.Allow[allowCount].Procname = allow1.Procname
						}
					}
					items1.InputAppscope.Filter.TransportURL = types.StringPointerValue(itemsItem.InputAppscope.Filter.TransportURL)
				}
				items1.InputAppscope.Host = types.StringPointerValue(itemsItem.InputAppscope.Host)
				items1.InputAppscope.ID = types.StringValue(itemsItem.InputAppscope.ID)
				items1.InputAppscope.IPWhitelistRegex = types.StringPointerValue(itemsItem.InputAppscope.IPWhitelistRegex)
				if itemsItem.InputAppscope.MaxActiveCxn != nil {
					items1.InputAppscope.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAppscope.MaxActiveCxn)))
				} else {
					items1.InputAppscope.MaxActiveCxn = types.NumberNull()
				}
				items1.InputAppscope.Metadata = []tfTypes.InputAppscopeMetadata{}
				for metadataCount, metadataItem := range itemsItem.InputAppscope.Metadata {
					var metadata1 tfTypes.InputAppscopeMetadata
					metadata1.Name = types.StringValue(metadataItem.Name)
					metadata1.Value = types.StringValue(metadataItem.Value)
					if metadataCount+1 > len(items1.InputAppscope.Metadata) {
						items1.InputAppscope.Metadata = append(items1.InputAppscope.Metadata, metadata1)
					} else {
						items1.InputAppscope.Metadata[metadataCount].Name = metadata1.Name
						items1.InputAppscope.Metadata[metadataCount].Value = metadata1.Value
					}
				}
				if itemsItem.InputAppscope.Persistence == nil {
					items1.InputAppscope.Persistence = nil
				} else {
					items1.InputAppscope.Persistence = &tfTypes.InputAppscopePersistence{}
					if itemsItem.InputAppscope.Persistence.Compress != nil {
						items1.InputAppscope.Persistence.Compress = types.StringValue(string(*itemsItem.InputAppscope.Persistence.Compress))
					} else {
						items1.InputAppscope.Persistence.Compress = types.StringNull()
					}
					items1.InputAppscope.Persistence.DestPath = types.StringPointerValue(itemsItem.InputAppscope.Persistence.DestPath)
					items1.InputAppscope.Persistence.Enable = types.BoolPointerValue(itemsItem.InputAppscope.Persistence.Enable)
					items1.InputAppscope.Persistence.MaxDataSize = types.StringPointerValue(itemsItem.InputAppscope.Persistence.MaxDataSize)
					items1.InputAppscope.Persistence.MaxDataTime = types.StringPointerValue(itemsItem.InputAppscope.Persistence.MaxDataTime)
					items1.InputAppscope.Persistence.TimeWindow = types.StringPointerValue(itemsItem.InputAppscope.Persistence.TimeWindow)
				}
				items1.InputAppscope.Pipeline = types.StringPointerValue(itemsItem.InputAppscope.Pipeline)
				if itemsItem.InputAppscope.Port != nil {
					items1.InputAppscope.Port = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAppscope.Port)))
				} else {
					items1.InputAppscope.Port = types.NumberNull()
				}
				if itemsItem.InputAppscope.Pq == nil {
					items1.InputAppscope.Pq = nil
				} else {
					items1.InputAppscope.Pq = &tfTypes.InputAppscopePq{}
					if itemsItem.InputAppscope.Pq.CommitFrequency != nil {
						items1.InputAppscope.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAppscope.Pq.CommitFrequency)))
					} else {
						items1.InputAppscope.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputAppscope.Pq.Compress != nil {
						items1.InputAppscope.Pq.Compress = types.StringValue(string(*itemsItem.InputAppscope.Pq.Compress))
					} else {
						items1.InputAppscope.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputAppscope.Pq.MaxBufferSize != nil {
						items1.InputAppscope.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAppscope.Pq.MaxBufferSize)))
					} else {
						items1.InputAppscope.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputAppscope.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputAppscope.Pq.MaxFileSize)
					items1.InputAppscope.Pq.MaxSize = types.StringPointerValue(itemsItem.InputAppscope.Pq.MaxSize)
					if itemsItem.InputAppscope.Pq.Mode != nil {
						items1.InputAppscope.Pq.Mode = types.StringValue(string(*itemsItem.InputAppscope.Pq.Mode))
					} else {
						items1.InputAppscope.Pq.Mode = types.StringNull()
					}
					items1.InputAppscope.Pq.Path = types.StringPointerValue(itemsItem.InputAppscope.Pq.Path)
				}
				items1.InputAppscope.PqEnabled = types.BoolPointerValue(itemsItem.InputAppscope.PqEnabled)
				items1.InputAppscope.SendToRoutes = types.BoolPointerValue(itemsItem.InputAppscope.SendToRoutes)
				if itemsItem.InputAppscope.SocketEndingMaxWait != nil {
					items1.InputAppscope.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAppscope.SocketEndingMaxWait)))
				} else {
					items1.InputAppscope.SocketEndingMaxWait = types.NumberNull()
				}
				if itemsItem.InputAppscope.SocketIdleTimeout != nil {
					items1.InputAppscope.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAppscope.SocketIdleTimeout)))
				} else {
					items1.InputAppscope.SocketIdleTimeout = types.NumberNull()
				}
				if itemsItem.InputAppscope.SocketMaxLifespan != nil {
					items1.InputAppscope.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAppscope.SocketMaxLifespan)))
				} else {
					items1.InputAppscope.SocketMaxLifespan = types.NumberNull()
				}
				if itemsItem.InputAppscope.StaleChannelFlushMs != nil {
					items1.InputAppscope.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAppscope.StaleChannelFlushMs)))
				} else {
					items1.InputAppscope.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputAppscope.Streamtags = make([]types.String, 0, len(itemsItem.InputAppscope.Streamtags))
				for _, v := range itemsItem.InputAppscope.Streamtags {
					items1.InputAppscope.Streamtags = append(items1.InputAppscope.Streamtags, types.StringValue(v))
				}
				items1.InputAppscope.TextSecret = types.StringPointerValue(itemsItem.InputAppscope.TextSecret)
				if itemsItem.InputAppscope.TLS == nil {
					items1.InputAppscope.TLS = nil
				} else {
					items1.InputAppscope.TLS = &tfTypes.InputAppscopeTLSSettingsServerSide{}
					items1.InputAppscope.TLS.CaPath = types.StringPointerValue(itemsItem.InputAppscope.TLS.CaPath)
					items1.InputAppscope.TLS.CertificateName = types.StringPointerValue(itemsItem.InputAppscope.TLS.CertificateName)
					items1.InputAppscope.TLS.CertPath = types.StringPointerValue(itemsItem.InputAppscope.TLS.CertPath)
					if itemsItem.InputAppscope.TLS.CommonNameRegex == nil {
						items1.InputAppscope.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult, _ := json.Marshal(itemsItem.InputAppscope.TLS.CommonNameRegex)
						items1.InputAppscope.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult))
					}
					items1.InputAppscope.TLS.Disabled = types.BoolPointerValue(itemsItem.InputAppscope.TLS.Disabled)
					if itemsItem.InputAppscope.TLS.MaxVersion != nil {
						items1.InputAppscope.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputAppscope.TLS.MaxVersion))
					} else {
						items1.InputAppscope.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputAppscope.TLS.MinVersion != nil {
						items1.InputAppscope.TLS.MinVersion = types.StringValue(string(*itemsItem.InputAppscope.TLS.MinVersion))
					} else {
						items1.InputAppscope.TLS.MinVersion = types.StringNull()
					}
					items1.InputAppscope.TLS.Passphrase = types.StringPointerValue(itemsItem.InputAppscope.TLS.Passphrase)
					items1.InputAppscope.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputAppscope.TLS.PrivKeyPath)
					if itemsItem.InputAppscope.TLS.RejectUnauthorized == nil {
						items1.InputAppscope.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult, _ := json.Marshal(itemsItem.InputAppscope.TLS.RejectUnauthorized)
						items1.InputAppscope.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult))
					}
					items1.InputAppscope.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputAppscope.TLS.RequestCert)
				}
				items1.InputAppscope.Type = types.StringValue(string(itemsItem.InputAppscope.Type))
				items1.InputAppscope.UnixSocketPath = types.StringPointerValue(itemsItem.InputAppscope.UnixSocketPath)
				items1.InputAppscope.UnixSocketPerms = types.StringPointerValue(itemsItem.InputAppscope.UnixSocketPerms)
			}
			if itemsItem.InputAzureBlob != nil {
				items1.InputAzureBlob = &tfTypes.InputAzureBlob{}
				if itemsItem.InputAzureBlob.AuthType != nil {
					items1.InputAzureBlob.AuthType = types.StringValue(string(*itemsItem.InputAzureBlob.AuthType))
				} else {
					items1.InputAzureBlob.AuthType = types.StringNull()
				}
				items1.InputAzureBlob.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputAzureBlob.BreakerRulesets))
				for _, v := range itemsItem.InputAzureBlob.BreakerRulesets {
					items1.InputAzureBlob.BreakerRulesets = append(items1.InputAzureBlob.BreakerRulesets, types.StringValue(v))
				}
				if itemsItem.InputAzureBlob.Certificate == nil {
					items1.InputAzureBlob.Certificate = nil
				} else {
					items1.InputAzureBlob.Certificate = &tfTypes.InputAzureBlobCertificate{}
					items1.InputAzureBlob.Certificate.CertificateName = types.StringValue(itemsItem.InputAzureBlob.Certificate.CertificateName)
				}
				items1.InputAzureBlob.ClientID = types.StringPointerValue(itemsItem.InputAzureBlob.ClientID)
				items1.InputAzureBlob.ClientTextSecret = types.StringPointerValue(itemsItem.InputAzureBlob.ClientTextSecret)
				items1.InputAzureBlob.Connections = []tfTypes.InputAzureBlobConnections{}
				for connectionsCount1, connectionsItem1 := range itemsItem.InputAzureBlob.Connections {
					var connections3 tfTypes.InputAzureBlobConnections
					connections3.Output = types.StringValue(connectionsItem1.Output)
					connections3.Pipeline = types.StringPointerValue(connectionsItem1.Pipeline)
					if connectionsCount1+1 > len(items1.InputAzureBlob.Connections) {
						items1.InputAzureBlob.Connections = append(items1.InputAzureBlob.Connections, connections3)
					} else {
						items1.InputAzureBlob.Connections[connectionsCount1].Output = connections3.Output
						items1.InputAzureBlob.Connections[connectionsCount1].Pipeline = connections3.Pipeline
					}
				}
				items1.InputAzureBlob.ConnectionString = types.StringPointerValue(itemsItem.InputAzureBlob.ConnectionString)
				items1.InputAzureBlob.Description = types.StringPointerValue(itemsItem.InputAzureBlob.Description)
				items1.InputAzureBlob.Disabled = types.BoolPointerValue(itemsItem.InputAzureBlob.Disabled)
				items1.InputAzureBlob.EndpointSuffix = types.StringPointerValue(itemsItem.InputAzureBlob.EndpointSuffix)
				items1.InputAzureBlob.Environment = types.StringPointerValue(itemsItem.InputAzureBlob.Environment)
				items1.InputAzureBlob.FileFilter = types.StringPointerValue(itemsItem.InputAzureBlob.FileFilter)
				items1.InputAzureBlob.ID = types.StringPointerValue(itemsItem.InputAzureBlob.ID)
				if itemsItem.InputAzureBlob.MaxMessages != nil {
					items1.InputAzureBlob.MaxMessages = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAzureBlob.MaxMessages)))
				} else {
					items1.InputAzureBlob.MaxMessages = types.NumberNull()
				}
				items1.InputAzureBlob.Metadata = []tfTypes.InputAzureBlobMetadata{}
				for metadataCount1, metadataItem1 := range itemsItem.InputAzureBlob.Metadata {
					var metadata3 tfTypes.InputAzureBlobMetadata
					metadata3.Name = types.StringValue(metadataItem1.Name)
					metadata3.Value = types.StringValue(metadataItem1.Value)
					if metadataCount1+1 > len(items1.InputAzureBlob.Metadata) {
						items1.InputAzureBlob.Metadata = append(items1.InputAzureBlob.Metadata, metadata3)
					} else {
						items1.InputAzureBlob.Metadata[metadataCount1].Name = metadata3.Name
						items1.InputAzureBlob.Metadata[metadataCount1].Value = metadata3.Value
					}
				}
				if itemsItem.InputAzureBlob.NumReceivers != nil {
					items1.InputAzureBlob.NumReceivers = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAzureBlob.NumReceivers)))
				} else {
					items1.InputAzureBlob.NumReceivers = types.NumberNull()
				}
				if itemsItem.InputAzureBlob.ParquetChunkDownloadTimeout != nil {
					items1.InputAzureBlob.ParquetChunkDownloadTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAzureBlob.ParquetChunkDownloadTimeout)))
				} else {
					items1.InputAzureBlob.ParquetChunkDownloadTimeout = types.NumberNull()
				}
				if itemsItem.InputAzureBlob.ParquetChunkSizeMB != nil {
					items1.InputAzureBlob.ParquetChunkSizeMB = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAzureBlob.ParquetChunkSizeMB)))
				} else {
					items1.InputAzureBlob.ParquetChunkSizeMB = types.NumberNull()
				}
				items1.InputAzureBlob.Pipeline = types.StringPointerValue(itemsItem.InputAzureBlob.Pipeline)
				if itemsItem.InputAzureBlob.Pq == nil {
					items1.InputAzureBlob.Pq = nil
				} else {
					items1.InputAzureBlob.Pq = &tfTypes.InputAzureBlobPq{}
					if itemsItem.InputAzureBlob.Pq.CommitFrequency != nil {
						items1.InputAzureBlob.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAzureBlob.Pq.CommitFrequency)))
					} else {
						items1.InputAzureBlob.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputAzureBlob.Pq.Compress != nil {
						items1.InputAzureBlob.Pq.Compress = types.StringValue(string(*itemsItem.InputAzureBlob.Pq.Compress))
					} else {
						items1.InputAzureBlob.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputAzureBlob.Pq.MaxBufferSize != nil {
						items1.InputAzureBlob.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAzureBlob.Pq.MaxBufferSize)))
					} else {
						items1.InputAzureBlob.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputAzureBlob.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputAzureBlob.Pq.MaxFileSize)
					items1.InputAzureBlob.Pq.MaxSize = types.StringPointerValue(itemsItem.InputAzureBlob.Pq.MaxSize)
					if itemsItem.InputAzureBlob.Pq.Mode != nil {
						items1.InputAzureBlob.Pq.Mode = types.StringValue(string(*itemsItem.InputAzureBlob.Pq.Mode))
					} else {
						items1.InputAzureBlob.Pq.Mode = types.StringNull()
					}
					items1.InputAzureBlob.Pq.Path = types.StringPointerValue(itemsItem.InputAzureBlob.Pq.Path)
				}
				items1.InputAzureBlob.PqEnabled = types.BoolPointerValue(itemsItem.InputAzureBlob.PqEnabled)
				items1.InputAzureBlob.QueueName = types.StringValue(itemsItem.InputAzureBlob.QueueName)
				items1.InputAzureBlob.SendToRoutes = types.BoolPointerValue(itemsItem.InputAzureBlob.SendToRoutes)
				if itemsItem.InputAzureBlob.ServicePeriodSecs != nil {
					items1.InputAzureBlob.ServicePeriodSecs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAzureBlob.ServicePeriodSecs)))
				} else {
					items1.InputAzureBlob.ServicePeriodSecs = types.NumberNull()
				}
				items1.InputAzureBlob.SkipOnError = types.BoolPointerValue(itemsItem.InputAzureBlob.SkipOnError)
				if itemsItem.InputAzureBlob.StaleChannelFlushMs != nil {
					items1.InputAzureBlob.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAzureBlob.StaleChannelFlushMs)))
				} else {
					items1.InputAzureBlob.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputAzureBlob.StorageAccountName = types.StringPointerValue(itemsItem.InputAzureBlob.StorageAccountName)
				items1.InputAzureBlob.Streamtags = make([]types.String, 0, len(itemsItem.InputAzureBlob.Streamtags))
				for _, v := range itemsItem.InputAzureBlob.Streamtags {
					items1.InputAzureBlob.Streamtags = append(items1.InputAzureBlob.Streamtags, types.StringValue(v))
				}
				items1.InputAzureBlob.TenantID = types.StringPointerValue(itemsItem.InputAzureBlob.TenantID)
				items1.InputAzureBlob.TextSecret = types.StringPointerValue(itemsItem.InputAzureBlob.TextSecret)
				items1.InputAzureBlob.Type = types.StringValue(string(itemsItem.InputAzureBlob.Type))
				if itemsItem.InputAzureBlob.VisibilityTimeout != nil {
					items1.InputAzureBlob.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputAzureBlob.VisibilityTimeout)))
				} else {
					items1.InputAzureBlob.VisibilityTimeout = types.NumberNull()
				}
			}
			if itemsItem.InputCollection != nil {
				items1.InputCollection = &tfTypes.InputCollection{}
				items1.InputCollection.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputCollection.BreakerRulesets))
				for _, v := range itemsItem.InputCollection.BreakerRulesets {
					items1.InputCollection.BreakerRulesets = append(items1.InputCollection.BreakerRulesets, types.StringValue(v))
				}
				items1.InputCollection.Connections = []tfTypes.Connections{}
				for connectionsCount2, connectionsItem2 := range itemsItem.InputCollection.Connections {
					var connections5 tfTypes.Connections
					connections5.Output = types.StringValue(connectionsItem2.Output)
					connections5.Pipeline = types.StringPointerValue(connectionsItem2.Pipeline)
					if connectionsCount2+1 > len(items1.InputCollection.Connections) {
						items1.InputCollection.Connections = append(items1.InputCollection.Connections, connections5)
					} else {
						items1.InputCollection.Connections[connectionsCount2].Output = connections5.Output
						items1.InputCollection.Connections[connectionsCount2].Pipeline = connections5.Pipeline
					}
				}
				items1.InputCollection.Disabled = types.BoolPointerValue(itemsItem.InputCollection.Disabled)
				items1.InputCollection.Environment = types.StringPointerValue(itemsItem.InputCollection.Environment)
				items1.InputCollection.ID = types.StringValue(itemsItem.InputCollection.ID)
				items1.InputCollection.Metadata = []tfTypes.InputCollectionMetadata{}
				for metadataCount2, metadataItem2 := range itemsItem.InputCollection.Metadata {
					var metadata5 tfTypes.InputCollectionMetadata
					metadata5.Name = types.StringValue(metadataItem2.Name)
					metadata5.Value = types.StringValue(metadataItem2.Value)
					if metadataCount2+1 > len(items1.InputCollection.Metadata) {
						items1.InputCollection.Metadata = append(items1.InputCollection.Metadata, metadata5)
					} else {
						items1.InputCollection.Metadata[metadataCount2].Name = metadata5.Name
						items1.InputCollection.Metadata[metadataCount2].Value = metadata5.Value
					}
				}
				items1.InputCollection.Output = types.StringPointerValue(itemsItem.InputCollection.Output)
				items1.InputCollection.Pipeline = types.StringPointerValue(itemsItem.InputCollection.Pipeline)
				if itemsItem.InputCollection.Pq == nil {
					items1.InputCollection.Pq = nil
				} else {
					items1.InputCollection.Pq = &tfTypes.Pq{}
					if itemsItem.InputCollection.Pq.CommitFrequency != nil {
						items1.InputCollection.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCollection.Pq.CommitFrequency)))
					} else {
						items1.InputCollection.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputCollection.Pq.Compress != nil {
						items1.InputCollection.Pq.Compress = types.StringValue(string(*itemsItem.InputCollection.Pq.Compress))
					} else {
						items1.InputCollection.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputCollection.Pq.MaxBufferSize != nil {
						items1.InputCollection.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCollection.Pq.MaxBufferSize)))
					} else {
						items1.InputCollection.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputCollection.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputCollection.Pq.MaxFileSize)
					items1.InputCollection.Pq.MaxSize = types.StringPointerValue(itemsItem.InputCollection.Pq.MaxSize)
					if itemsItem.InputCollection.Pq.Mode != nil {
						items1.InputCollection.Pq.Mode = types.StringValue(string(*itemsItem.InputCollection.Pq.Mode))
					} else {
						items1.InputCollection.Pq.Mode = types.StringNull()
					}
					items1.InputCollection.Pq.Path = types.StringPointerValue(itemsItem.InputCollection.Pq.Path)
				}
				items1.InputCollection.PqEnabled = types.BoolPointerValue(itemsItem.InputCollection.PqEnabled)
				if itemsItem.InputCollection.Preprocess == nil {
					items1.InputCollection.Preprocess = nil
				} else {
					items1.InputCollection.Preprocess = &tfTypes.Preprocess{}
					items1.InputCollection.Preprocess.Args = make([]types.String, 0, len(itemsItem.InputCollection.Preprocess.Args))
					for _, v := range itemsItem.InputCollection.Preprocess.Args {
						items1.InputCollection.Preprocess.Args = append(items1.InputCollection.Preprocess.Args, types.StringValue(v))
					}
					items1.InputCollection.Preprocess.Command = types.StringPointerValue(itemsItem.InputCollection.Preprocess.Command)
					items1.InputCollection.Preprocess.Disabled = types.BoolPointerValue(itemsItem.InputCollection.Preprocess.Disabled)
				}
				items1.InputCollection.SendToRoutes = types.BoolPointerValue(itemsItem.InputCollection.SendToRoutes)
				if itemsItem.InputCollection.StaleChannelFlushMs != nil {
					items1.InputCollection.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCollection.StaleChannelFlushMs)))
				} else {
					items1.InputCollection.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputCollection.Streamtags = make([]types.String, 0, len(itemsItem.InputCollection.Streamtags))
				for _, v := range itemsItem.InputCollection.Streamtags {
					items1.InputCollection.Streamtags = append(items1.InputCollection.Streamtags, types.StringValue(v))
				}
				items1.InputCollection.ThrottleRatePerSec = types.StringPointerValue(itemsItem.InputCollection.ThrottleRatePerSec)
				if itemsItem.InputCollection.Type != nil {
					items1.InputCollection.Type = types.StringValue(string(*itemsItem.InputCollection.Type))
				} else {
					items1.InputCollection.Type = types.StringNull()
				}
			}
			if itemsItem.InputConfluentCloud != nil {
				items1.InputConfluentCloud = &tfTypes.InputConfluentCloud{}
				if itemsItem.InputConfluentCloud.AuthenticationTimeout != nil {
					items1.InputConfluentCloud.AuthenticationTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.AuthenticationTimeout)))
				} else {
					items1.InputConfluentCloud.AuthenticationTimeout = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.AutoCommitInterval != nil {
					items1.InputConfluentCloud.AutoCommitInterval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.AutoCommitInterval)))
				} else {
					items1.InputConfluentCloud.AutoCommitInterval = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.AutoCommitThreshold != nil {
					items1.InputConfluentCloud.AutoCommitThreshold = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.AutoCommitThreshold)))
				} else {
					items1.InputConfluentCloud.AutoCommitThreshold = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.BackoffRate != nil {
					items1.InputConfluentCloud.BackoffRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.BackoffRate)))
				} else {
					items1.InputConfluentCloud.BackoffRate = types.NumberNull()
				}
				items1.InputConfluentCloud.Brokers = make([]types.String, 0, len(itemsItem.InputConfluentCloud.Brokers))
				for _, v := range itemsItem.InputConfluentCloud.Brokers {
					items1.InputConfluentCloud.Brokers = append(items1.InputConfluentCloud.Brokers, types.StringValue(v))
				}
				items1.InputConfluentCloud.Connections = []tfTypes.InputConfluentCloudConnections{}
				for connectionsCount3, connectionsItem3 := range itemsItem.InputConfluentCloud.Connections {
					var connections7 tfTypes.InputConfluentCloudConnections
					connections7.Output = types.StringValue(connectionsItem3.Output)
					connections7.Pipeline = types.StringPointerValue(connectionsItem3.Pipeline)
					if connectionsCount3+1 > len(items1.InputConfluentCloud.Connections) {
						items1.InputConfluentCloud.Connections = append(items1.InputConfluentCloud.Connections, connections7)
					} else {
						items1.InputConfluentCloud.Connections[connectionsCount3].Output = connections7.Output
						items1.InputConfluentCloud.Connections[connectionsCount3].Pipeline = connections7.Pipeline
					}
				}
				if itemsItem.InputConfluentCloud.ConnectionTimeout != nil {
					items1.InputConfluentCloud.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.ConnectionTimeout)))
				} else {
					items1.InputConfluentCloud.ConnectionTimeout = types.NumberNull()
				}
				items1.InputConfluentCloud.Description = types.StringPointerValue(itemsItem.InputConfluentCloud.Description)
				items1.InputConfluentCloud.Disabled = types.BoolPointerValue(itemsItem.InputConfluentCloud.Disabled)
				items1.InputConfluentCloud.Environment = types.StringPointerValue(itemsItem.InputConfluentCloud.Environment)
				items1.InputConfluentCloud.FromBeginning = types.BoolPointerValue(itemsItem.InputConfluentCloud.FromBeginning)
				items1.InputConfluentCloud.GroupID = types.StringPointerValue(itemsItem.InputConfluentCloud.GroupID)
				if itemsItem.InputConfluentCloud.HeartbeatInterval != nil {
					items1.InputConfluentCloud.HeartbeatInterval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.HeartbeatInterval)))
				} else {
					items1.InputConfluentCloud.HeartbeatInterval = types.NumberNull()
				}
				items1.InputConfluentCloud.ID = types.StringPointerValue(itemsItem.InputConfluentCloud.ID)
				if itemsItem.InputConfluentCloud.InitialBackoff != nil {
					items1.InputConfluentCloud.InitialBackoff = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.InitialBackoff)))
				} else {
					items1.InputConfluentCloud.InitialBackoff = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.KafkaSchemaRegistry == nil {
					items1.InputConfluentCloud.KafkaSchemaRegistry = nil
				} else {
					items1.InputConfluentCloud.KafkaSchemaRegistry = &tfTypes.InputConfluentCloudKafkaSchemaRegistryAuthentication{}
					if itemsItem.InputConfluentCloud.KafkaSchemaRegistry.Auth == nil {
						items1.InputConfluentCloud.KafkaSchemaRegistry.Auth = nil
					} else {
						items1.InputConfluentCloud.KafkaSchemaRegistry.Auth = &tfTypes.InputConfluentCloudAuth{}
						items1.InputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret)
						items1.InputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled)
					}
					if itemsItem.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout != nil {
						items1.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout)))
					} else {
						items1.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout = types.NumberNull()
					}
					items1.InputConfluentCloud.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.Disabled)
					if itemsItem.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries != nil {
						items1.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries)))
					} else {
						items1.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries = types.NumberNull()
					}
					if itemsItem.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout != nil {
						items1.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout)))
					} else {
						items1.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout = types.NumberNull()
					}
					items1.InputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL)
					if itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS == nil {
						items1.InputConfluentCloud.KafkaSchemaRegistry.TLS = nil
					} else {
						items1.InputConfluentCloud.KafkaSchemaRegistry.TLS = &tfTypes.InputConfluentCloudKafkaSchemaRegistryTLSSettingsClientSide{}
						items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath)
						items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName)
						items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath)
						items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled)
						if itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion != nil {
							items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion))
						} else {
							items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
						}
						if itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion != nil {
							items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion))
						} else {
							items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
						}
						items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase)
						items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath)
						items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized)
						items1.InputConfluentCloud.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(itemsItem.InputConfluentCloud.KafkaSchemaRegistry.TLS.Servername)
					}
				}
				if itemsItem.InputConfluentCloud.MaxBackOff != nil {
					items1.InputConfluentCloud.MaxBackOff = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.MaxBackOff)))
				} else {
					items1.InputConfluentCloud.MaxBackOff = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.MaxBytes != nil {
					items1.InputConfluentCloud.MaxBytes = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.MaxBytes)))
				} else {
					items1.InputConfluentCloud.MaxBytes = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.MaxBytesPerPartition != nil {
					items1.InputConfluentCloud.MaxBytesPerPartition = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.MaxBytesPerPartition)))
				} else {
					items1.InputConfluentCloud.MaxBytesPerPartition = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.MaxRetries != nil {
					items1.InputConfluentCloud.MaxRetries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.MaxRetries)))
				} else {
					items1.InputConfluentCloud.MaxRetries = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.MaxSocketErrors != nil {
					items1.InputConfluentCloud.MaxSocketErrors = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.MaxSocketErrors)))
				} else {
					items1.InputConfluentCloud.MaxSocketErrors = types.NumberNull()
				}
				items1.InputConfluentCloud.Metadata = []tfTypes.InputConfluentCloudMetadata{}
				for metadataCount3, metadataItem3 := range itemsItem.InputConfluentCloud.Metadata {
					var metadata7 tfTypes.InputConfluentCloudMetadata
					metadata7.Name = types.StringValue(metadataItem3.Name)
					metadata7.Value = types.StringValue(metadataItem3.Value)
					if metadataCount3+1 > len(items1.InputConfluentCloud.Metadata) {
						items1.InputConfluentCloud.Metadata = append(items1.InputConfluentCloud.Metadata, metadata7)
					} else {
						items1.InputConfluentCloud.Metadata[metadataCount3].Name = metadata7.Name
						items1.InputConfluentCloud.Metadata[metadataCount3].Value = metadata7.Value
					}
				}
				items1.InputConfluentCloud.Pipeline = types.StringPointerValue(itemsItem.InputConfluentCloud.Pipeline)
				if itemsItem.InputConfluentCloud.Pq == nil {
					items1.InputConfluentCloud.Pq = nil
				} else {
					items1.InputConfluentCloud.Pq = &tfTypes.InputConfluentCloudPq{}
					if itemsItem.InputConfluentCloud.Pq.CommitFrequency != nil {
						items1.InputConfluentCloud.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.Pq.CommitFrequency)))
					} else {
						items1.InputConfluentCloud.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputConfluentCloud.Pq.Compress != nil {
						items1.InputConfluentCloud.Pq.Compress = types.StringValue(string(*itemsItem.InputConfluentCloud.Pq.Compress))
					} else {
						items1.InputConfluentCloud.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputConfluentCloud.Pq.MaxBufferSize != nil {
						items1.InputConfluentCloud.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.Pq.MaxBufferSize)))
					} else {
						items1.InputConfluentCloud.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputConfluentCloud.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputConfluentCloud.Pq.MaxFileSize)
					items1.InputConfluentCloud.Pq.MaxSize = types.StringPointerValue(itemsItem.InputConfluentCloud.Pq.MaxSize)
					if itemsItem.InputConfluentCloud.Pq.Mode != nil {
						items1.InputConfluentCloud.Pq.Mode = types.StringValue(string(*itemsItem.InputConfluentCloud.Pq.Mode))
					} else {
						items1.InputConfluentCloud.Pq.Mode = types.StringNull()
					}
					items1.InputConfluentCloud.Pq.Path = types.StringPointerValue(itemsItem.InputConfluentCloud.Pq.Path)
				}
				items1.InputConfluentCloud.PqEnabled = types.BoolPointerValue(itemsItem.InputConfluentCloud.PqEnabled)
				if itemsItem.InputConfluentCloud.ReauthenticationThreshold != nil {
					items1.InputConfluentCloud.ReauthenticationThreshold = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.ReauthenticationThreshold)))
				} else {
					items1.InputConfluentCloud.ReauthenticationThreshold = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.RebalanceTimeout != nil {
					items1.InputConfluentCloud.RebalanceTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.RebalanceTimeout)))
				} else {
					items1.InputConfluentCloud.RebalanceTimeout = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.RequestTimeout != nil {
					items1.InputConfluentCloud.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.RequestTimeout)))
				} else {
					items1.InputConfluentCloud.RequestTimeout = types.NumberNull()
				}
				if itemsItem.InputConfluentCloud.Sasl == nil {
					items1.InputConfluentCloud.Sasl = nil
				} else {
					items1.InputConfluentCloud.Sasl = &tfTypes.InputConfluentCloudAuthentication{}
					items1.InputConfluentCloud.Sasl.Disabled = types.BoolPointerValue(itemsItem.InputConfluentCloud.Sasl.Disabled)
					if itemsItem.InputConfluentCloud.Sasl.Mechanism != nil {
						items1.InputConfluentCloud.Sasl.Mechanism = types.StringValue(string(*itemsItem.InputConfluentCloud.Sasl.Mechanism))
					} else {
						items1.InputConfluentCloud.Sasl.Mechanism = types.StringNull()
					}
				}
				items1.InputConfluentCloud.SendToRoutes = types.BoolPointerValue(itemsItem.InputConfluentCloud.SendToRoutes)
				if itemsItem.InputConfluentCloud.SessionTimeout != nil {
					items1.InputConfluentCloud.SessionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputConfluentCloud.SessionTimeout)))
				} else {
					items1.InputConfluentCloud.SessionTimeout = types.NumberNull()
				}
				items1.InputConfluentCloud.Streamtags = make([]types.String, 0, len(itemsItem.InputConfluentCloud.Streamtags))
				for _, v := range itemsItem.InputConfluentCloud.Streamtags {
					items1.InputConfluentCloud.Streamtags = append(items1.InputConfluentCloud.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputConfluentCloud.TLS == nil {
					items1.InputConfluentCloud.TLS = nil
				} else {
					items1.InputConfluentCloud.TLS = &tfTypes.InputConfluentCloudTLSSettingsClientSide{}
					items1.InputConfluentCloud.TLS.CaPath = types.StringPointerValue(itemsItem.InputConfluentCloud.TLS.CaPath)
					items1.InputConfluentCloud.TLS.CertificateName = types.StringPointerValue(itemsItem.InputConfluentCloud.TLS.CertificateName)
					items1.InputConfluentCloud.TLS.CertPath = types.StringPointerValue(itemsItem.InputConfluentCloud.TLS.CertPath)
					items1.InputConfluentCloud.TLS.Disabled = types.BoolPointerValue(itemsItem.InputConfluentCloud.TLS.Disabled)
					if itemsItem.InputConfluentCloud.TLS.MaxVersion != nil {
						items1.InputConfluentCloud.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputConfluentCloud.TLS.MaxVersion))
					} else {
						items1.InputConfluentCloud.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputConfluentCloud.TLS.MinVersion != nil {
						items1.InputConfluentCloud.TLS.MinVersion = types.StringValue(string(*itemsItem.InputConfluentCloud.TLS.MinVersion))
					} else {
						items1.InputConfluentCloud.TLS.MinVersion = types.StringNull()
					}
					items1.InputConfluentCloud.TLS.Passphrase = types.StringPointerValue(itemsItem.InputConfluentCloud.TLS.Passphrase)
					items1.InputConfluentCloud.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputConfluentCloud.TLS.PrivKeyPath)
					items1.InputConfluentCloud.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputConfluentCloud.TLS.RejectUnauthorized)
					items1.InputConfluentCloud.TLS.Servername = types.StringPointerValue(itemsItem.InputConfluentCloud.TLS.Servername)
				}
				items1.InputConfluentCloud.Topics = make([]types.String, 0, len(itemsItem.InputConfluentCloud.Topics))
				for _, v := range itemsItem.InputConfluentCloud.Topics {
					items1.InputConfluentCloud.Topics = append(items1.InputConfluentCloud.Topics, types.StringValue(v))
				}
				if itemsItem.InputConfluentCloud.Type != nil {
					items1.InputConfluentCloud.Type = types.StringValue(string(*itemsItem.InputConfluentCloud.Type))
				} else {
					items1.InputConfluentCloud.Type = types.StringNull()
				}
			}
			if itemsItem.InputCribl != nil {
				items1.InputCribl = &tfTypes.InputCribl{}
				items1.InputCribl.Connections = []tfTypes.InputCriblConnections{}
				for connectionsCount4, connectionsItem4 := range itemsItem.InputCribl.Connections {
					var connections9 tfTypes.InputCriblConnections
					connections9.Output = types.StringValue(connectionsItem4.Output)
					connections9.Pipeline = types.StringPointerValue(connectionsItem4.Pipeline)
					if connectionsCount4+1 > len(items1.InputCribl.Connections) {
						items1.InputCribl.Connections = append(items1.InputCribl.Connections, connections9)
					} else {
						items1.InputCribl.Connections[connectionsCount4].Output = connections9.Output
						items1.InputCribl.Connections[connectionsCount4].Pipeline = connections9.Pipeline
					}
				}
				items1.InputCribl.Description = types.StringPointerValue(itemsItem.InputCribl.Description)
				items1.InputCribl.Disabled = types.BoolPointerValue(itemsItem.InputCribl.Disabled)
				items1.InputCribl.Environment = types.StringPointerValue(itemsItem.InputCribl.Environment)
				items1.InputCribl.Filter = types.StringPointerValue(itemsItem.InputCribl.Filter)
				items1.InputCribl.ID = types.StringValue(itemsItem.InputCribl.ID)
				items1.InputCribl.Metadata = []tfTypes.InputCriblMetadata{}
				for metadataCount4, metadataItem4 := range itemsItem.InputCribl.Metadata {
					var metadata9 tfTypes.InputCriblMetadata
					metadata9.Name = types.StringValue(metadataItem4.Name)
					metadata9.Value = types.StringValue(metadataItem4.Value)
					if metadataCount4+1 > len(items1.InputCribl.Metadata) {
						items1.InputCribl.Metadata = append(items1.InputCribl.Metadata, metadata9)
					} else {
						items1.InputCribl.Metadata[metadataCount4].Name = metadata9.Name
						items1.InputCribl.Metadata[metadataCount4].Value = metadata9.Value
					}
				}
				items1.InputCribl.Pipeline = types.StringPointerValue(itemsItem.InputCribl.Pipeline)
				if itemsItem.InputCribl.Pq == nil {
					items1.InputCribl.Pq = nil
				} else {
					items1.InputCribl.Pq = &tfTypes.InputCriblPq{}
					if itemsItem.InputCribl.Pq.CommitFrequency != nil {
						items1.InputCribl.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCribl.Pq.CommitFrequency)))
					} else {
						items1.InputCribl.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputCribl.Pq.Compress != nil {
						items1.InputCribl.Pq.Compress = types.StringValue(string(*itemsItem.InputCribl.Pq.Compress))
					} else {
						items1.InputCribl.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputCribl.Pq.MaxBufferSize != nil {
						items1.InputCribl.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCribl.Pq.MaxBufferSize)))
					} else {
						items1.InputCribl.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputCribl.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputCribl.Pq.MaxFileSize)
					items1.InputCribl.Pq.MaxSize = types.StringPointerValue(itemsItem.InputCribl.Pq.MaxSize)
					if itemsItem.InputCribl.Pq.Mode != nil {
						items1.InputCribl.Pq.Mode = types.StringValue(string(*itemsItem.InputCribl.Pq.Mode))
					} else {
						items1.InputCribl.Pq.Mode = types.StringNull()
					}
					items1.InputCribl.Pq.Path = types.StringPointerValue(itemsItem.InputCribl.Pq.Path)
				}
				items1.InputCribl.PqEnabled = types.BoolPointerValue(itemsItem.InputCribl.PqEnabled)
				items1.InputCribl.SendToRoutes = types.BoolPointerValue(itemsItem.InputCribl.SendToRoutes)
				items1.InputCribl.Streamtags = make([]types.String, 0, len(itemsItem.InputCribl.Streamtags))
				for _, v := range itemsItem.InputCribl.Streamtags {
					items1.InputCribl.Streamtags = append(items1.InputCribl.Streamtags, types.StringValue(v))
				}
				items1.InputCribl.Type = types.StringValue(string(itemsItem.InputCribl.Type))
			}
			if itemsItem.InputCriblHTTP != nil {
				items1.InputCriblHTTP = &tfTypes.InputCriblHTTP{}
				if itemsItem.InputCriblHTTP.ActivityLogSampleRate != nil {
					items1.InputCriblHTTP.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblHTTP.ActivityLogSampleRate)))
				} else {
					items1.InputCriblHTTP.ActivityLogSampleRate = types.NumberNull()
				}
				items1.InputCriblHTTP.AuthTokens = make([]types.String, 0, len(itemsItem.InputCriblHTTP.AuthTokens))
				for _, v := range itemsItem.InputCriblHTTP.AuthTokens {
					items1.InputCriblHTTP.AuthTokens = append(items1.InputCriblHTTP.AuthTokens, types.StringValue(v))
				}
				items1.InputCriblHTTP.CaptureHeaders = types.BoolPointerValue(itemsItem.InputCriblHTTP.CaptureHeaders)
				items1.InputCriblHTTP.Connections = []tfTypes.InputCriblHTTPConnections{}
				for connectionsCount5, connectionsItem5 := range itemsItem.InputCriblHTTP.Connections {
					var connections11 tfTypes.InputCriblHTTPConnections
					connections11.Output = types.StringValue(connectionsItem5.Output)
					connections11.Pipeline = types.StringPointerValue(connectionsItem5.Pipeline)
					if connectionsCount5+1 > len(items1.InputCriblHTTP.Connections) {
						items1.InputCriblHTTP.Connections = append(items1.InputCriblHTTP.Connections, connections11)
					} else {
						items1.InputCriblHTTP.Connections[connectionsCount5].Output = connections11.Output
						items1.InputCriblHTTP.Connections[connectionsCount5].Pipeline = connections11.Pipeline
					}
				}
				items1.InputCriblHTTP.Description = types.StringPointerValue(itemsItem.InputCriblHTTP.Description)
				items1.InputCriblHTTP.Disabled = types.BoolPointerValue(itemsItem.InputCriblHTTP.Disabled)
				items1.InputCriblHTTP.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputCriblHTTP.EnableHealthCheck)
				items1.InputCriblHTTP.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputCriblHTTP.EnableProxyHeader)
				items1.InputCriblHTTP.Environment = types.StringPointerValue(itemsItem.InputCriblHTTP.Environment)
				items1.InputCriblHTTP.Host = types.StringPointerValue(itemsItem.InputCriblHTTP.Host)
				items1.InputCriblHTTP.ID = types.StringPointerValue(itemsItem.InputCriblHTTP.ID)
				items1.InputCriblHTTP.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputCriblHTTP.IPAllowlistRegex)
				items1.InputCriblHTTP.IPDenylistRegex = types.StringPointerValue(itemsItem.InputCriblHTTP.IPDenylistRegex)
				if itemsItem.InputCriblHTTP.KeepAliveTimeout != nil {
					items1.InputCriblHTTP.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblHTTP.KeepAliveTimeout)))
				} else {
					items1.InputCriblHTTP.KeepAliveTimeout = types.NumberNull()
				}
				if itemsItem.InputCriblHTTP.MaxActiveReq != nil {
					items1.InputCriblHTTP.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblHTTP.MaxActiveReq)))
				} else {
					items1.InputCriblHTTP.MaxActiveReq = types.NumberNull()
				}
				items1.InputCriblHTTP.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputCriblHTTP.MaxRequestsPerSocket)
				items1.InputCriblHTTP.Metadata = []tfTypes.InputCriblHTTPMetadata{}
				for metadataCount5, metadataItem5 := range itemsItem.InputCriblHTTP.Metadata {
					var metadata11 tfTypes.InputCriblHTTPMetadata
					metadata11.Name = types.StringValue(metadataItem5.Name)
					metadata11.Value = types.StringValue(metadataItem5.Value)
					if metadataCount5+1 > len(items1.InputCriblHTTP.Metadata) {
						items1.InputCriblHTTP.Metadata = append(items1.InputCriblHTTP.Metadata, metadata11)
					} else {
						items1.InputCriblHTTP.Metadata[metadataCount5].Name = metadata11.Name
						items1.InputCriblHTTP.Metadata[metadataCount5].Value = metadata11.Value
					}
				}
				items1.InputCriblHTTP.Pipeline = types.StringPointerValue(itemsItem.InputCriblHTTP.Pipeline)
				items1.InputCriblHTTP.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputCriblHTTP.Port)))
				if itemsItem.InputCriblHTTP.Pq == nil {
					items1.InputCriblHTTP.Pq = nil
				} else {
					items1.InputCriblHTTP.Pq = &tfTypes.InputCriblHTTPPq{}
					if itemsItem.InputCriblHTTP.Pq.CommitFrequency != nil {
						items1.InputCriblHTTP.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblHTTP.Pq.CommitFrequency)))
					} else {
						items1.InputCriblHTTP.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputCriblHTTP.Pq.Compress != nil {
						items1.InputCriblHTTP.Pq.Compress = types.StringValue(string(*itemsItem.InputCriblHTTP.Pq.Compress))
					} else {
						items1.InputCriblHTTP.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputCriblHTTP.Pq.MaxBufferSize != nil {
						items1.InputCriblHTTP.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblHTTP.Pq.MaxBufferSize)))
					} else {
						items1.InputCriblHTTP.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputCriblHTTP.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputCriblHTTP.Pq.MaxFileSize)
					items1.InputCriblHTTP.Pq.MaxSize = types.StringPointerValue(itemsItem.InputCriblHTTP.Pq.MaxSize)
					if itemsItem.InputCriblHTTP.Pq.Mode != nil {
						items1.InputCriblHTTP.Pq.Mode = types.StringValue(string(*itemsItem.InputCriblHTTP.Pq.Mode))
					} else {
						items1.InputCriblHTTP.Pq.Mode = types.StringNull()
					}
					items1.InputCriblHTTP.Pq.Path = types.StringPointerValue(itemsItem.InputCriblHTTP.Pq.Path)
				}
				items1.InputCriblHTTP.PqEnabled = types.BoolPointerValue(itemsItem.InputCriblHTTP.PqEnabled)
				if itemsItem.InputCriblHTTP.RequestTimeout != nil {
					items1.InputCriblHTTP.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblHTTP.RequestTimeout)))
				} else {
					items1.InputCriblHTTP.RequestTimeout = types.NumberNull()
				}
				items1.InputCriblHTTP.SendToRoutes = types.BoolPointerValue(itemsItem.InputCriblHTTP.SendToRoutes)
				if itemsItem.InputCriblHTTP.SocketTimeout != nil {
					items1.InputCriblHTTP.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblHTTP.SocketTimeout)))
				} else {
					items1.InputCriblHTTP.SocketTimeout = types.NumberNull()
				}
				items1.InputCriblHTTP.Streamtags = make([]types.String, 0, len(itemsItem.InputCriblHTTP.Streamtags))
				for _, v := range itemsItem.InputCriblHTTP.Streamtags {
					items1.InputCriblHTTP.Streamtags = append(items1.InputCriblHTTP.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputCriblHTTP.TLS == nil {
					items1.InputCriblHTTP.TLS = nil
				} else {
					items1.InputCriblHTTP.TLS = &tfTypes.InputCriblHTTPTLSSettingsServerSide{}
					items1.InputCriblHTTP.TLS.CaPath = types.StringPointerValue(itemsItem.InputCriblHTTP.TLS.CaPath)
					items1.InputCriblHTTP.TLS.CertificateName = types.StringPointerValue(itemsItem.InputCriblHTTP.TLS.CertificateName)
					items1.InputCriblHTTP.TLS.CertPath = types.StringPointerValue(itemsItem.InputCriblHTTP.TLS.CertPath)
					if itemsItem.InputCriblHTTP.TLS.CommonNameRegex == nil {
						items1.InputCriblHTTP.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult1, _ := json.Marshal(itemsItem.InputCriblHTTP.TLS.CommonNameRegex)
						items1.InputCriblHTTP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult1))
					}
					items1.InputCriblHTTP.TLS.Disabled = types.BoolPointerValue(itemsItem.InputCriblHTTP.TLS.Disabled)
					if itemsItem.InputCriblHTTP.TLS.MaxVersion != nil {
						items1.InputCriblHTTP.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputCriblHTTP.TLS.MaxVersion))
					} else {
						items1.InputCriblHTTP.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputCriblHTTP.TLS.MinVersion != nil {
						items1.InputCriblHTTP.TLS.MinVersion = types.StringValue(string(*itemsItem.InputCriblHTTP.TLS.MinVersion))
					} else {
						items1.InputCriblHTTP.TLS.MinVersion = types.StringNull()
					}
					items1.InputCriblHTTP.TLS.Passphrase = types.StringPointerValue(itemsItem.InputCriblHTTP.TLS.Passphrase)
					items1.InputCriblHTTP.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputCriblHTTP.TLS.PrivKeyPath)
					if itemsItem.InputCriblHTTP.TLS.RejectUnauthorized == nil {
						items1.InputCriblHTTP.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult1, _ := json.Marshal(itemsItem.InputCriblHTTP.TLS.RejectUnauthorized)
						items1.InputCriblHTTP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult1))
					}
					items1.InputCriblHTTP.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputCriblHTTP.TLS.RequestCert)
				}
				if itemsItem.InputCriblHTTP.Type != nil {
					items1.InputCriblHTTP.Type = types.StringValue(string(*itemsItem.InputCriblHTTP.Type))
				} else {
					items1.InputCriblHTTP.Type = types.StringNull()
				}
			}
			if itemsItem.InputCriblmetrics != nil {
				items1.InputCriblmetrics = &tfTypes.InputCriblmetrics{}
				items1.InputCriblmetrics.Connections = []tfTypes.InputCriblmetricsConnections{}
				for connectionsCount6, connectionsItem6 := range itemsItem.InputCriblmetrics.Connections {
					var connections13 tfTypes.InputCriblmetricsConnections
					connections13.Output = types.StringValue(connectionsItem6.Output)
					connections13.Pipeline = types.StringPointerValue(connectionsItem6.Pipeline)
					if connectionsCount6+1 > len(items1.InputCriblmetrics.Connections) {
						items1.InputCriblmetrics.Connections = append(items1.InputCriblmetrics.Connections, connections13)
					} else {
						items1.InputCriblmetrics.Connections[connectionsCount6].Output = connections13.Output
						items1.InputCriblmetrics.Connections[connectionsCount6].Pipeline = connections13.Pipeline
					}
				}
				items1.InputCriblmetrics.Description = types.StringPointerValue(itemsItem.InputCriblmetrics.Description)
				items1.InputCriblmetrics.Disabled = types.BoolPointerValue(itemsItem.InputCriblmetrics.Disabled)
				items1.InputCriblmetrics.Environment = types.StringPointerValue(itemsItem.InputCriblmetrics.Environment)
				items1.InputCriblmetrics.FullFidelity = types.BoolPointerValue(itemsItem.InputCriblmetrics.FullFidelity)
				items1.InputCriblmetrics.ID = types.StringValue(itemsItem.InputCriblmetrics.ID)
				items1.InputCriblmetrics.Metadata = []tfTypes.InputCriblmetricsMetadata{}
				for metadataCount6, metadataItem6 := range itemsItem.InputCriblmetrics.Metadata {
					var metadata13 tfTypes.InputCriblmetricsMetadata
					metadata13.Name = types.StringValue(metadataItem6.Name)
					metadata13.Value = types.StringValue(metadataItem6.Value)
					if metadataCount6+1 > len(items1.InputCriblmetrics.Metadata) {
						items1.InputCriblmetrics.Metadata = append(items1.InputCriblmetrics.Metadata, metadata13)
					} else {
						items1.InputCriblmetrics.Metadata[metadataCount6].Name = metadata13.Name
						items1.InputCriblmetrics.Metadata[metadataCount6].Value = metadata13.Value
					}
				}
				items1.InputCriblmetrics.Pipeline = types.StringPointerValue(itemsItem.InputCriblmetrics.Pipeline)
				if itemsItem.InputCriblmetrics.Pq == nil {
					items1.InputCriblmetrics.Pq = nil
				} else {
					items1.InputCriblmetrics.Pq = &tfTypes.InputCriblmetricsPq{}
					if itemsItem.InputCriblmetrics.Pq.CommitFrequency != nil {
						items1.InputCriblmetrics.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblmetrics.Pq.CommitFrequency)))
					} else {
						items1.InputCriblmetrics.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputCriblmetrics.Pq.Compress != nil {
						items1.InputCriblmetrics.Pq.Compress = types.StringValue(string(*itemsItem.InputCriblmetrics.Pq.Compress))
					} else {
						items1.InputCriblmetrics.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputCriblmetrics.Pq.MaxBufferSize != nil {
						items1.InputCriblmetrics.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblmetrics.Pq.MaxBufferSize)))
					} else {
						items1.InputCriblmetrics.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputCriblmetrics.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputCriblmetrics.Pq.MaxFileSize)
					items1.InputCriblmetrics.Pq.MaxSize = types.StringPointerValue(itemsItem.InputCriblmetrics.Pq.MaxSize)
					if itemsItem.InputCriblmetrics.Pq.Mode != nil {
						items1.InputCriblmetrics.Pq.Mode = types.StringValue(string(*itemsItem.InputCriblmetrics.Pq.Mode))
					} else {
						items1.InputCriblmetrics.Pq.Mode = types.StringNull()
					}
					items1.InputCriblmetrics.Pq.Path = types.StringPointerValue(itemsItem.InputCriblmetrics.Pq.Path)
				}
				items1.InputCriblmetrics.PqEnabled = types.BoolPointerValue(itemsItem.InputCriblmetrics.PqEnabled)
				items1.InputCriblmetrics.Prefix = types.StringPointerValue(itemsItem.InputCriblmetrics.Prefix)
				items1.InputCriblmetrics.SendToRoutes = types.BoolPointerValue(itemsItem.InputCriblmetrics.SendToRoutes)
				items1.InputCriblmetrics.Streamtags = make([]types.String, 0, len(itemsItem.InputCriblmetrics.Streamtags))
				for _, v := range itemsItem.InputCriblmetrics.Streamtags {
					items1.InputCriblmetrics.Streamtags = append(items1.InputCriblmetrics.Streamtags, types.StringValue(v))
				}
				items1.InputCriblmetrics.Type = types.StringValue(string(itemsItem.InputCriblmetrics.Type))
			}
			if itemsItem.InputCriblTCP != nil {
				items1.InputCriblTCP = &tfTypes.InputCriblTCP{}
				items1.InputCriblTCP.Connections = []tfTypes.InputCriblTCPConnections{}
				for connectionsCount7, connectionsItem7 := range itemsItem.InputCriblTCP.Connections {
					var connections15 tfTypes.InputCriblTCPConnections
					connections15.Output = types.StringValue(connectionsItem7.Output)
					connections15.Pipeline = types.StringPointerValue(connectionsItem7.Pipeline)
					if connectionsCount7+1 > len(items1.InputCriblTCP.Connections) {
						items1.InputCriblTCP.Connections = append(items1.InputCriblTCP.Connections, connections15)
					} else {
						items1.InputCriblTCP.Connections[connectionsCount7].Output = connections15.Output
						items1.InputCriblTCP.Connections[connectionsCount7].Pipeline = connections15.Pipeline
					}
				}
				items1.InputCriblTCP.Description = types.StringPointerValue(itemsItem.InputCriblTCP.Description)
				items1.InputCriblTCP.Disabled = types.BoolPointerValue(itemsItem.InputCriblTCP.Disabled)
				items1.InputCriblTCP.EnableLoadBalancing = types.BoolPointerValue(itemsItem.InputCriblTCP.EnableLoadBalancing)
				items1.InputCriblTCP.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputCriblTCP.EnableProxyHeader)
				items1.InputCriblTCP.Environment = types.StringPointerValue(itemsItem.InputCriblTCP.Environment)
				items1.InputCriblTCP.Host = types.StringPointerValue(itemsItem.InputCriblTCP.Host)
				items1.InputCriblTCP.ID = types.StringPointerValue(itemsItem.InputCriblTCP.ID)
				if itemsItem.InputCriblTCP.MaxActiveCxn != nil {
					items1.InputCriblTCP.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblTCP.MaxActiveCxn)))
				} else {
					items1.InputCriblTCP.MaxActiveCxn = types.NumberNull()
				}
				items1.InputCriblTCP.Metadata = []tfTypes.InputCriblTCPMetadata{}
				for metadataCount7, metadataItem7 := range itemsItem.InputCriblTCP.Metadata {
					var metadata15 tfTypes.InputCriblTCPMetadata
					metadata15.Name = types.StringValue(metadataItem7.Name)
					metadata15.Value = types.StringValue(metadataItem7.Value)
					if metadataCount7+1 > len(items1.InputCriblTCP.Metadata) {
						items1.InputCriblTCP.Metadata = append(items1.InputCriblTCP.Metadata, metadata15)
					} else {
						items1.InputCriblTCP.Metadata[metadataCount7].Name = metadata15.Name
						items1.InputCriblTCP.Metadata[metadataCount7].Value = metadata15.Value
					}
				}
				items1.InputCriblTCP.Pipeline = types.StringPointerValue(itemsItem.InputCriblTCP.Pipeline)
				items1.InputCriblTCP.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputCriblTCP.Port)))
				if itemsItem.InputCriblTCP.Pq == nil {
					items1.InputCriblTCP.Pq = nil
				} else {
					items1.InputCriblTCP.Pq = &tfTypes.InputCriblTCPPq{}
					if itemsItem.InputCriblTCP.Pq.CommitFrequency != nil {
						items1.InputCriblTCP.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblTCP.Pq.CommitFrequency)))
					} else {
						items1.InputCriblTCP.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputCriblTCP.Pq.Compress != nil {
						items1.InputCriblTCP.Pq.Compress = types.StringValue(string(*itemsItem.InputCriblTCP.Pq.Compress))
					} else {
						items1.InputCriblTCP.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputCriblTCP.Pq.MaxBufferSize != nil {
						items1.InputCriblTCP.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblTCP.Pq.MaxBufferSize)))
					} else {
						items1.InputCriblTCP.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputCriblTCP.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputCriblTCP.Pq.MaxFileSize)
					items1.InputCriblTCP.Pq.MaxSize = types.StringPointerValue(itemsItem.InputCriblTCP.Pq.MaxSize)
					if itemsItem.InputCriblTCP.Pq.Mode != nil {
						items1.InputCriblTCP.Pq.Mode = types.StringValue(string(*itemsItem.InputCriblTCP.Pq.Mode))
					} else {
						items1.InputCriblTCP.Pq.Mode = types.StringNull()
					}
					items1.InputCriblTCP.Pq.Path = types.StringPointerValue(itemsItem.InputCriblTCP.Pq.Path)
				}
				items1.InputCriblTCP.PqEnabled = types.BoolPointerValue(itemsItem.InputCriblTCP.PqEnabled)
				items1.InputCriblTCP.SendToRoutes = types.BoolPointerValue(itemsItem.InputCriblTCP.SendToRoutes)
				if itemsItem.InputCriblTCP.SocketEndingMaxWait != nil {
					items1.InputCriblTCP.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblTCP.SocketEndingMaxWait)))
				} else {
					items1.InputCriblTCP.SocketEndingMaxWait = types.NumberNull()
				}
				if itemsItem.InputCriblTCP.SocketIdleTimeout != nil {
					items1.InputCriblTCP.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblTCP.SocketIdleTimeout)))
				} else {
					items1.InputCriblTCP.SocketIdleTimeout = types.NumberNull()
				}
				if itemsItem.InputCriblTCP.SocketMaxLifespan != nil {
					items1.InputCriblTCP.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCriblTCP.SocketMaxLifespan)))
				} else {
					items1.InputCriblTCP.SocketMaxLifespan = types.NumberNull()
				}
				items1.InputCriblTCP.Streamtags = make([]types.String, 0, len(itemsItem.InputCriblTCP.Streamtags))
				for _, v := range itemsItem.InputCriblTCP.Streamtags {
					items1.InputCriblTCP.Streamtags = append(items1.InputCriblTCP.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputCriblTCP.TLS == nil {
					items1.InputCriblTCP.TLS = nil
				} else {
					items1.InputCriblTCP.TLS = &tfTypes.InputCriblTCPTLSSettingsServerSide{}
					items1.InputCriblTCP.TLS.CaPath = types.StringPointerValue(itemsItem.InputCriblTCP.TLS.CaPath)
					items1.InputCriblTCP.TLS.CertificateName = types.StringPointerValue(itemsItem.InputCriblTCP.TLS.CertificateName)
					items1.InputCriblTCP.TLS.CertPath = types.StringPointerValue(itemsItem.InputCriblTCP.TLS.CertPath)
					if itemsItem.InputCriblTCP.TLS.CommonNameRegex == nil {
						items1.InputCriblTCP.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult2, _ := json.Marshal(itemsItem.InputCriblTCP.TLS.CommonNameRegex)
						items1.InputCriblTCP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult2))
					}
					items1.InputCriblTCP.TLS.Disabled = types.BoolPointerValue(itemsItem.InputCriblTCP.TLS.Disabled)
					if itemsItem.InputCriblTCP.TLS.MaxVersion != nil {
						items1.InputCriblTCP.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputCriblTCP.TLS.MaxVersion))
					} else {
						items1.InputCriblTCP.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputCriblTCP.TLS.MinVersion != nil {
						items1.InputCriblTCP.TLS.MinVersion = types.StringValue(string(*itemsItem.InputCriblTCP.TLS.MinVersion))
					} else {
						items1.InputCriblTCP.TLS.MinVersion = types.StringNull()
					}
					items1.InputCriblTCP.TLS.Passphrase = types.StringPointerValue(itemsItem.InputCriblTCP.TLS.Passphrase)
					items1.InputCriblTCP.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputCriblTCP.TLS.PrivKeyPath)
					if itemsItem.InputCriblTCP.TLS.RejectUnauthorized == nil {
						items1.InputCriblTCP.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult2, _ := json.Marshal(itemsItem.InputCriblTCP.TLS.RejectUnauthorized)
						items1.InputCriblTCP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult2))
					}
					items1.InputCriblTCP.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputCriblTCP.TLS.RequestCert)
				}
				if itemsItem.InputCriblTCP.Type != nil {
					items1.InputCriblTCP.Type = types.StringValue(string(*itemsItem.InputCriblTCP.Type))
				} else {
					items1.InputCriblTCP.Type = types.StringNull()
				}
			}
			if itemsItem.InputCrowdstrike != nil {
				items1.InputCrowdstrike = &tfTypes.InputCrowdstrike{}
				items1.InputCrowdstrike.AssumeRoleArn = types.StringPointerValue(itemsItem.InputCrowdstrike.AssumeRoleArn)
				items1.InputCrowdstrike.AssumeRoleExternalID = types.StringPointerValue(itemsItem.InputCrowdstrike.AssumeRoleExternalID)
				items1.InputCrowdstrike.AwsAccountID = types.StringPointerValue(itemsItem.InputCrowdstrike.AwsAccountID)
				items1.InputCrowdstrike.AwsAPIKey = types.StringPointerValue(itemsItem.InputCrowdstrike.AwsAPIKey)
				if itemsItem.InputCrowdstrike.AwsAuthenticationMethod != nil {
					items1.InputCrowdstrike.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.InputCrowdstrike.AwsAuthenticationMethod))
				} else {
					items1.InputCrowdstrike.AwsAuthenticationMethod = types.StringNull()
				}
				items1.InputCrowdstrike.AwsSecret = types.StringPointerValue(itemsItem.InputCrowdstrike.AwsSecret)
				items1.InputCrowdstrike.AwsSecretKey = types.StringPointerValue(itemsItem.InputCrowdstrike.AwsSecretKey)
				items1.InputCrowdstrike.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputCrowdstrike.BreakerRulesets))
				for _, v := range itemsItem.InputCrowdstrike.BreakerRulesets {
					items1.InputCrowdstrike.BreakerRulesets = append(items1.InputCrowdstrike.BreakerRulesets, types.StringValue(v))
				}
				if itemsItem.InputCrowdstrike.Checkpointing == nil {
					items1.InputCrowdstrike.Checkpointing = nil
				} else {
					items1.InputCrowdstrike.Checkpointing = &tfTypes.Checkpointing{}
					items1.InputCrowdstrike.Checkpointing.Enabled = types.BoolPointerValue(itemsItem.InputCrowdstrike.Checkpointing.Enabled)
					if itemsItem.InputCrowdstrike.Checkpointing.Retries != nil {
						items1.InputCrowdstrike.Checkpointing.Retries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCrowdstrike.Checkpointing.Retries)))
					} else {
						items1.InputCrowdstrike.Checkpointing.Retries = types.NumberNull()
					}
				}
				items1.InputCrowdstrike.Connections = []tfTypes.InputCrowdstrikeConnections{}
				for connectionsCount8, connectionsItem8 := range itemsItem.InputCrowdstrike.Connections {
					var connections17 tfTypes.InputCrowdstrikeConnections
					connections17.Output = types.StringValue(connectionsItem8.Output)
					connections17.Pipeline = types.StringPointerValue(connectionsItem8.Pipeline)
					if connectionsCount8+1 > len(items1.InputCrowdstrike.Connections) {
						items1.InputCrowdstrike.Connections = append(items1.InputCrowdstrike.Connections, connections17)
					} else {
						items1.InputCrowdstrike.Connections[connectionsCount8].Output = connections17.Output
						items1.InputCrowdstrike.Connections[connectionsCount8].Pipeline = connections17.Pipeline
					}
				}
				items1.InputCrowdstrike.Description = types.StringPointerValue(itemsItem.InputCrowdstrike.Description)
				items1.InputCrowdstrike.Disabled = types.BoolPointerValue(itemsItem.InputCrowdstrike.Disabled)
				if itemsItem.InputCrowdstrike.DurationSeconds != nil {
					items1.InputCrowdstrike.DurationSeconds = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCrowdstrike.DurationSeconds)))
				} else {
					items1.InputCrowdstrike.DurationSeconds = types.NumberNull()
				}
				items1.InputCrowdstrike.EnableAssumeRole = types.BoolPointerValue(itemsItem.InputCrowdstrike.EnableAssumeRole)
				items1.InputCrowdstrike.EnableSQSAssumeRole = types.BoolPointerValue(itemsItem.InputCrowdstrike.EnableSQSAssumeRole)
				items1.InputCrowdstrike.Encoding = types.StringPointerValue(itemsItem.InputCrowdstrike.Encoding)
				items1.InputCrowdstrike.Endpoint = types.StringPointerValue(itemsItem.InputCrowdstrike.Endpoint)
				items1.InputCrowdstrike.Environment = types.StringPointerValue(itemsItem.InputCrowdstrike.Environment)
				items1.InputCrowdstrike.FileFilter = types.StringPointerValue(itemsItem.InputCrowdstrike.FileFilter)
				items1.InputCrowdstrike.ID = types.StringPointerValue(itemsItem.InputCrowdstrike.ID)
				if itemsItem.InputCrowdstrike.MaxMessages != nil {
					items1.InputCrowdstrike.MaxMessages = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCrowdstrike.MaxMessages)))
				} else {
					items1.InputCrowdstrike.MaxMessages = types.NumberNull()
				}
				items1.InputCrowdstrike.Metadata = []tfTypes.InputCrowdstrikeMetadata{}
				for metadataCount8, metadataItem8 := range itemsItem.InputCrowdstrike.Metadata {
					var metadata17 tfTypes.InputCrowdstrikeMetadata
					metadata17.Name = types.StringValue(metadataItem8.Name)
					metadata17.Value = types.StringValue(metadataItem8.Value)
					if metadataCount8+1 > len(items1.InputCrowdstrike.Metadata) {
						items1.InputCrowdstrike.Metadata = append(items1.InputCrowdstrike.Metadata, metadata17)
					} else {
						items1.InputCrowdstrike.Metadata[metadataCount8].Name = metadata17.Name
						items1.InputCrowdstrike.Metadata[metadataCount8].Value = metadata17.Value
					}
				}
				if itemsItem.InputCrowdstrike.NumReceivers != nil {
					items1.InputCrowdstrike.NumReceivers = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCrowdstrike.NumReceivers)))
				} else {
					items1.InputCrowdstrike.NumReceivers = types.NumberNull()
				}
				items1.InputCrowdstrike.Pipeline = types.StringPointerValue(itemsItem.InputCrowdstrike.Pipeline)
				if itemsItem.InputCrowdstrike.PollTimeout != nil {
					items1.InputCrowdstrike.PollTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCrowdstrike.PollTimeout)))
				} else {
					items1.InputCrowdstrike.PollTimeout = types.NumberNull()
				}
				if itemsItem.InputCrowdstrike.Pq == nil {
					items1.InputCrowdstrike.Pq = nil
				} else {
					items1.InputCrowdstrike.Pq = &tfTypes.InputCrowdstrikePq{}
					if itemsItem.InputCrowdstrike.Pq.CommitFrequency != nil {
						items1.InputCrowdstrike.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCrowdstrike.Pq.CommitFrequency)))
					} else {
						items1.InputCrowdstrike.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputCrowdstrike.Pq.Compress != nil {
						items1.InputCrowdstrike.Pq.Compress = types.StringValue(string(*itemsItem.InputCrowdstrike.Pq.Compress))
					} else {
						items1.InputCrowdstrike.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputCrowdstrike.Pq.MaxBufferSize != nil {
						items1.InputCrowdstrike.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCrowdstrike.Pq.MaxBufferSize)))
					} else {
						items1.InputCrowdstrike.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputCrowdstrike.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputCrowdstrike.Pq.MaxFileSize)
					items1.InputCrowdstrike.Pq.MaxSize = types.StringPointerValue(itemsItem.InputCrowdstrike.Pq.MaxSize)
					if itemsItem.InputCrowdstrike.Pq.Mode != nil {
						items1.InputCrowdstrike.Pq.Mode = types.StringValue(string(*itemsItem.InputCrowdstrike.Pq.Mode))
					} else {
						items1.InputCrowdstrike.Pq.Mode = types.StringNull()
					}
					items1.InputCrowdstrike.Pq.Path = types.StringPointerValue(itemsItem.InputCrowdstrike.Pq.Path)
				}
				items1.InputCrowdstrike.PqEnabled = types.BoolPointerValue(itemsItem.InputCrowdstrike.PqEnabled)
				if itemsItem.InputCrowdstrike.Preprocess == nil {
					items1.InputCrowdstrike.Preprocess = nil
				} else {
					items1.InputCrowdstrike.Preprocess = &tfTypes.InputCrowdstrikePreprocess{}
					items1.InputCrowdstrike.Preprocess.Args = make([]types.String, 0, len(itemsItem.InputCrowdstrike.Preprocess.Args))
					for _, v := range itemsItem.InputCrowdstrike.Preprocess.Args {
						items1.InputCrowdstrike.Preprocess.Args = append(items1.InputCrowdstrike.Preprocess.Args, types.StringValue(v))
					}
					items1.InputCrowdstrike.Preprocess.Command = types.StringPointerValue(itemsItem.InputCrowdstrike.Preprocess.Command)
					items1.InputCrowdstrike.Preprocess.Disabled = types.BoolPointerValue(itemsItem.InputCrowdstrike.Preprocess.Disabled)
				}
				items1.InputCrowdstrike.QueueName = types.StringValue(itemsItem.InputCrowdstrike.QueueName)
				items1.InputCrowdstrike.Region = types.StringPointerValue(itemsItem.InputCrowdstrike.Region)
				items1.InputCrowdstrike.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputCrowdstrike.RejectUnauthorized)
				items1.InputCrowdstrike.ReuseConnections = types.BoolPointerValue(itemsItem.InputCrowdstrike.ReuseConnections)
				items1.InputCrowdstrike.SendToRoutes = types.BoolPointerValue(itemsItem.InputCrowdstrike.SendToRoutes)
				if itemsItem.InputCrowdstrike.SignatureVersion != nil {
					items1.InputCrowdstrike.SignatureVersion = types.StringValue(string(*itemsItem.InputCrowdstrike.SignatureVersion))
				} else {
					items1.InputCrowdstrike.SignatureVersion = types.StringNull()
				}
				items1.InputCrowdstrike.SkipOnError = types.BoolPointerValue(itemsItem.InputCrowdstrike.SkipOnError)
				if itemsItem.InputCrowdstrike.SocketTimeout != nil {
					items1.InputCrowdstrike.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCrowdstrike.SocketTimeout)))
				} else {
					items1.InputCrowdstrike.SocketTimeout = types.NumberNull()
				}
				if itemsItem.InputCrowdstrike.StaleChannelFlushMs != nil {
					items1.InputCrowdstrike.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCrowdstrike.StaleChannelFlushMs)))
				} else {
					items1.InputCrowdstrike.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputCrowdstrike.Streamtags = make([]types.String, 0, len(itemsItem.InputCrowdstrike.Streamtags))
				for _, v := range itemsItem.InputCrowdstrike.Streamtags {
					items1.InputCrowdstrike.Streamtags = append(items1.InputCrowdstrike.Streamtags, types.StringValue(v))
				}
				items1.InputCrowdstrike.Type = types.StringValue(string(itemsItem.InputCrowdstrike.Type))
				if itemsItem.InputCrowdstrike.VisibilityTimeout != nil {
					items1.InputCrowdstrike.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputCrowdstrike.VisibilityTimeout)))
				} else {
					items1.InputCrowdstrike.VisibilityTimeout = types.NumberNull()
				}
			}
			if itemsItem.InputDatadogAgent != nil {
				items1.InputDatadogAgent = &tfTypes.InputDatadogAgent{}
				if itemsItem.InputDatadogAgent.ActivityLogSampleRate != nil {
					items1.InputDatadogAgent.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputDatadogAgent.ActivityLogSampleRate)))
				} else {
					items1.InputDatadogAgent.ActivityLogSampleRate = types.NumberNull()
				}
				items1.InputDatadogAgent.CaptureHeaders = types.BoolPointerValue(itemsItem.InputDatadogAgent.CaptureHeaders)
				items1.InputDatadogAgent.Connections = []tfTypes.InputDatadogAgentConnections{}
				for connectionsCount9, connectionsItem9 := range itemsItem.InputDatadogAgent.Connections {
					var connections19 tfTypes.InputDatadogAgentConnections
					connections19.Output = types.StringValue(connectionsItem9.Output)
					connections19.Pipeline = types.StringPointerValue(connectionsItem9.Pipeline)
					if connectionsCount9+1 > len(items1.InputDatadogAgent.Connections) {
						items1.InputDatadogAgent.Connections = append(items1.InputDatadogAgent.Connections, connections19)
					} else {
						items1.InputDatadogAgent.Connections[connectionsCount9].Output = connections19.Output
						items1.InputDatadogAgent.Connections[connectionsCount9].Pipeline = connections19.Pipeline
					}
				}
				items1.InputDatadogAgent.Description = types.StringPointerValue(itemsItem.InputDatadogAgent.Description)
				items1.InputDatadogAgent.Disabled = types.BoolPointerValue(itemsItem.InputDatadogAgent.Disabled)
				items1.InputDatadogAgent.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputDatadogAgent.EnableHealthCheck)
				items1.InputDatadogAgent.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputDatadogAgent.EnableProxyHeader)
				items1.InputDatadogAgent.Environment = types.StringPointerValue(itemsItem.InputDatadogAgent.Environment)
				items1.InputDatadogAgent.ExtractMetrics = types.BoolPointerValue(itemsItem.InputDatadogAgent.ExtractMetrics)
				items1.InputDatadogAgent.Host = types.StringPointerValue(itemsItem.InputDatadogAgent.Host)
				items1.InputDatadogAgent.ID = types.StringPointerValue(itemsItem.InputDatadogAgent.ID)
				items1.InputDatadogAgent.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputDatadogAgent.IPAllowlistRegex)
				items1.InputDatadogAgent.IPDenylistRegex = types.StringPointerValue(itemsItem.InputDatadogAgent.IPDenylistRegex)
				if itemsItem.InputDatadogAgent.KeepAliveTimeout != nil {
					items1.InputDatadogAgent.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputDatadogAgent.KeepAliveTimeout)))
				} else {
					items1.InputDatadogAgent.KeepAliveTimeout = types.NumberNull()
				}
				if itemsItem.InputDatadogAgent.MaxActiveReq != nil {
					items1.InputDatadogAgent.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputDatadogAgent.MaxActiveReq)))
				} else {
					items1.InputDatadogAgent.MaxActiveReq = types.NumberNull()
				}
				items1.InputDatadogAgent.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputDatadogAgent.MaxRequestsPerSocket)
				items1.InputDatadogAgent.Metadata = []tfTypes.InputDatadogAgentMetadata{}
				for metadataCount9, metadataItem9 := range itemsItem.InputDatadogAgent.Metadata {
					var metadata19 tfTypes.InputDatadogAgentMetadata
					metadata19.Name = types.StringValue(metadataItem9.Name)
					metadata19.Value = types.StringValue(metadataItem9.Value)
					if metadataCount9+1 > len(items1.InputDatadogAgent.Metadata) {
						items1.InputDatadogAgent.Metadata = append(items1.InputDatadogAgent.Metadata, metadata19)
					} else {
						items1.InputDatadogAgent.Metadata[metadataCount9].Name = metadata19.Name
						items1.InputDatadogAgent.Metadata[metadataCount9].Value = metadata19.Value
					}
				}
				items1.InputDatadogAgent.Pipeline = types.StringPointerValue(itemsItem.InputDatadogAgent.Pipeline)
				items1.InputDatadogAgent.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputDatadogAgent.Port)))
				if itemsItem.InputDatadogAgent.Pq == nil {
					items1.InputDatadogAgent.Pq = nil
				} else {
					items1.InputDatadogAgent.Pq = &tfTypes.InputDatadogAgentPq{}
					if itemsItem.InputDatadogAgent.Pq.CommitFrequency != nil {
						items1.InputDatadogAgent.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputDatadogAgent.Pq.CommitFrequency)))
					} else {
						items1.InputDatadogAgent.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputDatadogAgent.Pq.Compress != nil {
						items1.InputDatadogAgent.Pq.Compress = types.StringValue(string(*itemsItem.InputDatadogAgent.Pq.Compress))
					} else {
						items1.InputDatadogAgent.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputDatadogAgent.Pq.MaxBufferSize != nil {
						items1.InputDatadogAgent.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputDatadogAgent.Pq.MaxBufferSize)))
					} else {
						items1.InputDatadogAgent.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputDatadogAgent.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputDatadogAgent.Pq.MaxFileSize)
					items1.InputDatadogAgent.Pq.MaxSize = types.StringPointerValue(itemsItem.InputDatadogAgent.Pq.MaxSize)
					if itemsItem.InputDatadogAgent.Pq.Mode != nil {
						items1.InputDatadogAgent.Pq.Mode = types.StringValue(string(*itemsItem.InputDatadogAgent.Pq.Mode))
					} else {
						items1.InputDatadogAgent.Pq.Mode = types.StringNull()
					}
					items1.InputDatadogAgent.Pq.Path = types.StringPointerValue(itemsItem.InputDatadogAgent.Pq.Path)
				}
				items1.InputDatadogAgent.PqEnabled = types.BoolPointerValue(itemsItem.InputDatadogAgent.PqEnabled)
				if itemsItem.InputDatadogAgent.ProxyMode == nil {
					items1.InputDatadogAgent.ProxyMode = nil
				} else {
					items1.InputDatadogAgent.ProxyMode = &tfTypes.InputDatadogAgentProxyMode{}
					items1.InputDatadogAgent.ProxyMode.Enabled = types.BoolPointerValue(itemsItem.InputDatadogAgent.ProxyMode.Enabled)
					items1.InputDatadogAgent.ProxyMode.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputDatadogAgent.ProxyMode.RejectUnauthorized)
				}
				if itemsItem.InputDatadogAgent.RequestTimeout != nil {
					items1.InputDatadogAgent.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputDatadogAgent.RequestTimeout)))
				} else {
					items1.InputDatadogAgent.RequestTimeout = types.NumberNull()
				}
				items1.InputDatadogAgent.SendToRoutes = types.BoolPointerValue(itemsItem.InputDatadogAgent.SendToRoutes)
				if itemsItem.InputDatadogAgent.SocketTimeout != nil {
					items1.InputDatadogAgent.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputDatadogAgent.SocketTimeout)))
				} else {
					items1.InputDatadogAgent.SocketTimeout = types.NumberNull()
				}
				items1.InputDatadogAgent.Streamtags = make([]types.String, 0, len(itemsItem.InputDatadogAgent.Streamtags))
				for _, v := range itemsItem.InputDatadogAgent.Streamtags {
					items1.InputDatadogAgent.Streamtags = append(items1.InputDatadogAgent.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputDatadogAgent.TLS == nil {
					items1.InputDatadogAgent.TLS = nil
				} else {
					items1.InputDatadogAgent.TLS = &tfTypes.InputDatadogAgentTLSSettingsServerSide{}
					items1.InputDatadogAgent.TLS.CaPath = types.StringPointerValue(itemsItem.InputDatadogAgent.TLS.CaPath)
					items1.InputDatadogAgent.TLS.CertificateName = types.StringPointerValue(itemsItem.InputDatadogAgent.TLS.CertificateName)
					items1.InputDatadogAgent.TLS.CertPath = types.StringPointerValue(itemsItem.InputDatadogAgent.TLS.CertPath)
					if itemsItem.InputDatadogAgent.TLS.CommonNameRegex == nil {
						items1.InputDatadogAgent.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult3, _ := json.Marshal(itemsItem.InputDatadogAgent.TLS.CommonNameRegex)
						items1.InputDatadogAgent.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult3))
					}
					items1.InputDatadogAgent.TLS.Disabled = types.BoolPointerValue(itemsItem.InputDatadogAgent.TLS.Disabled)
					if itemsItem.InputDatadogAgent.TLS.MaxVersion != nil {
						items1.InputDatadogAgent.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputDatadogAgent.TLS.MaxVersion))
					} else {
						items1.InputDatadogAgent.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputDatadogAgent.TLS.MinVersion != nil {
						items1.InputDatadogAgent.TLS.MinVersion = types.StringValue(string(*itemsItem.InputDatadogAgent.TLS.MinVersion))
					} else {
						items1.InputDatadogAgent.TLS.MinVersion = types.StringNull()
					}
					items1.InputDatadogAgent.TLS.Passphrase = types.StringPointerValue(itemsItem.InputDatadogAgent.TLS.Passphrase)
					items1.InputDatadogAgent.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputDatadogAgent.TLS.PrivKeyPath)
					if itemsItem.InputDatadogAgent.TLS.RejectUnauthorized == nil {
						items1.InputDatadogAgent.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult3, _ := json.Marshal(itemsItem.InputDatadogAgent.TLS.RejectUnauthorized)
						items1.InputDatadogAgent.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult3))
					}
					items1.InputDatadogAgent.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputDatadogAgent.TLS.RequestCert)
				}
				if itemsItem.InputDatadogAgent.Type != nil {
					items1.InputDatadogAgent.Type = types.StringValue(string(*itemsItem.InputDatadogAgent.Type))
				} else {
					items1.InputDatadogAgent.Type = types.StringNull()
				}
			}
			if itemsItem.InputDatagen != nil {
				items1.InputDatagen = &tfTypes.InputDatagen{}
				items1.InputDatagen.Connections = []tfTypes.InputDatagenConnections{}
				for connectionsCount10, connectionsItem10 := range itemsItem.InputDatagen.Connections {
					var connections21 tfTypes.InputDatagenConnections
					connections21.Output = types.StringValue(connectionsItem10.Output)
					connections21.Pipeline = types.StringPointerValue(connectionsItem10.Pipeline)
					if connectionsCount10+1 > len(items1.InputDatagen.Connections) {
						items1.InputDatagen.Connections = append(items1.InputDatagen.Connections, connections21)
					} else {
						items1.InputDatagen.Connections[connectionsCount10].Output = connections21.Output
						items1.InputDatagen.Connections[connectionsCount10].Pipeline = connections21.Pipeline
					}
				}
				items1.InputDatagen.Description = types.StringPointerValue(itemsItem.InputDatagen.Description)
				items1.InputDatagen.Disabled = types.BoolPointerValue(itemsItem.InputDatagen.Disabled)
				items1.InputDatagen.Environment = types.StringPointerValue(itemsItem.InputDatagen.Environment)
				items1.InputDatagen.ID = types.StringPointerValue(itemsItem.InputDatagen.ID)
				items1.InputDatagen.Metadata = []tfTypes.InputDatagenMetadata{}
				for metadataCount10, metadataItem10 := range itemsItem.InputDatagen.Metadata {
					var metadata21 tfTypes.InputDatagenMetadata
					metadata21.Name = types.StringValue(metadataItem10.Name)
					metadata21.Value = types.StringValue(metadataItem10.Value)
					if metadataCount10+1 > len(items1.InputDatagen.Metadata) {
						items1.InputDatagen.Metadata = append(items1.InputDatagen.Metadata, metadata21)
					} else {
						items1.InputDatagen.Metadata[metadataCount10].Name = metadata21.Name
						items1.InputDatagen.Metadata[metadataCount10].Value = metadata21.Value
					}
				}
				items1.InputDatagen.Pipeline = types.StringPointerValue(itemsItem.InputDatagen.Pipeline)
				if itemsItem.InputDatagen.Pq == nil {
					items1.InputDatagen.Pq = nil
				} else {
					items1.InputDatagen.Pq = &tfTypes.InputDatagenPq{}
					if itemsItem.InputDatagen.Pq.CommitFrequency != nil {
						items1.InputDatagen.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputDatagen.Pq.CommitFrequency)))
					} else {
						items1.InputDatagen.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputDatagen.Pq.Compress != nil {
						items1.InputDatagen.Pq.Compress = types.StringValue(string(*itemsItem.InputDatagen.Pq.Compress))
					} else {
						items1.InputDatagen.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputDatagen.Pq.MaxBufferSize != nil {
						items1.InputDatagen.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputDatagen.Pq.MaxBufferSize)))
					} else {
						items1.InputDatagen.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputDatagen.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputDatagen.Pq.MaxFileSize)
					items1.InputDatagen.Pq.MaxSize = types.StringPointerValue(itemsItem.InputDatagen.Pq.MaxSize)
					if itemsItem.InputDatagen.Pq.Mode != nil {
						items1.InputDatagen.Pq.Mode = types.StringValue(string(*itemsItem.InputDatagen.Pq.Mode))
					} else {
						items1.InputDatagen.Pq.Mode = types.StringNull()
					}
					items1.InputDatagen.Pq.Path = types.StringPointerValue(itemsItem.InputDatagen.Pq.Path)
				}
				items1.InputDatagen.PqEnabled = types.BoolPointerValue(itemsItem.InputDatagen.PqEnabled)
				items1.InputDatagen.Samples = []tfTypes.Samples{}
				for samplesCount, samplesItem := range itemsItem.InputDatagen.Samples {
					var samples1 tfTypes.Samples
					if samplesItem.EventsPerSec != nil {
						samples1.EventsPerSec = types.NumberValue(big.NewFloat(float64(*samplesItem.EventsPerSec)))
					} else {
						samples1.EventsPerSec = types.NumberNull()
					}
					samples1.Sample = types.StringValue(samplesItem.Sample)
					if samplesCount+1 > len(items1.InputDatagen.Samples) {
						items1.InputDatagen.Samples = append(items1.InputDatagen.Samples, samples1)
					} else {
						items1.InputDatagen.Samples[samplesCount].EventsPerSec = samples1.EventsPerSec
						items1.InputDatagen.Samples[samplesCount].Sample = samples1.Sample
					}
				}
				items1.InputDatagen.SendToRoutes = types.BoolPointerValue(itemsItem.InputDatagen.SendToRoutes)
				items1.InputDatagen.Streamtags = make([]types.String, 0, len(itemsItem.InputDatagen.Streamtags))
				for _, v := range itemsItem.InputDatagen.Streamtags {
					items1.InputDatagen.Streamtags = append(items1.InputDatagen.Streamtags, types.StringValue(v))
				}
				items1.InputDatagen.Type = types.StringValue(string(itemsItem.InputDatagen.Type))
			}
			if itemsItem.InputEdgePrometheus != nil {
				items1.InputEdgePrometheus = &tfTypes.InputEdgePrometheus{}
				items1.InputEdgePrometheus.AssumeRoleArn = types.StringPointerValue(itemsItem.InputEdgePrometheus.AssumeRoleArn)
				items1.InputEdgePrometheus.AssumeRoleExternalID = types.StringPointerValue(itemsItem.InputEdgePrometheus.AssumeRoleExternalID)
				if itemsItem.InputEdgePrometheus.AuthType != nil {
					items1.InputEdgePrometheus.AuthType = types.StringValue(string(*itemsItem.InputEdgePrometheus.AuthType))
				} else {
					items1.InputEdgePrometheus.AuthType = types.StringNull()
				}
				if itemsItem.InputEdgePrometheus.AwsAuthenticationMethod != nil {
					items1.InputEdgePrometheus.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.InputEdgePrometheus.AwsAuthenticationMethod))
				} else {
					items1.InputEdgePrometheus.AwsAuthenticationMethod = types.StringNull()
				}
				items1.InputEdgePrometheus.AwsSecretKey = types.StringPointerValue(itemsItem.InputEdgePrometheus.AwsSecretKey)
				items1.InputEdgePrometheus.Connections = []tfTypes.InputEdgePrometheusConnections{}
				for connectionsCount11, connectionsItem11 := range itemsItem.InputEdgePrometheus.Connections {
					var connections23 tfTypes.InputEdgePrometheusConnections
					connections23.Output = types.StringValue(connectionsItem11.Output)
					connections23.Pipeline = types.StringPointerValue(connectionsItem11.Pipeline)
					if connectionsCount11+1 > len(items1.InputEdgePrometheus.Connections) {
						items1.InputEdgePrometheus.Connections = append(items1.InputEdgePrometheus.Connections, connections23)
					} else {
						items1.InputEdgePrometheus.Connections[connectionsCount11].Output = connections23.Output
						items1.InputEdgePrometheus.Connections[connectionsCount11].Pipeline = connections23.Pipeline
					}
				}
				items1.InputEdgePrometheus.CredentialsSecret = types.StringPointerValue(itemsItem.InputEdgePrometheus.CredentialsSecret)
				items1.InputEdgePrometheus.Description = types.StringPointerValue(itemsItem.InputEdgePrometheus.Description)
				items1.InputEdgePrometheus.DimensionList = make([]types.String, 0, len(itemsItem.InputEdgePrometheus.DimensionList))
				for _, v := range itemsItem.InputEdgePrometheus.DimensionList {
					items1.InputEdgePrometheus.DimensionList = append(items1.InputEdgePrometheus.DimensionList, types.StringValue(v))
				}
				items1.InputEdgePrometheus.Disabled = types.BoolPointerValue(itemsItem.InputEdgePrometheus.Disabled)
				if itemsItem.InputEdgePrometheus.DiscoveryType != nil {
					items1.InputEdgePrometheus.DiscoveryType = types.StringValue(string(*itemsItem.InputEdgePrometheus.DiscoveryType))
				} else {
					items1.InputEdgePrometheus.DiscoveryType = types.StringNull()
				}
				if itemsItem.InputEdgePrometheus.DurationSeconds != nil {
					items1.InputEdgePrometheus.DurationSeconds = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEdgePrometheus.DurationSeconds)))
				} else {
					items1.InputEdgePrometheus.DurationSeconds = types.NumberNull()
				}
				items1.InputEdgePrometheus.EnableAssumeRole = types.BoolPointerValue(itemsItem.InputEdgePrometheus.EnableAssumeRole)
				items1.InputEdgePrometheus.Endpoint = types.StringPointerValue(itemsItem.InputEdgePrometheus.Endpoint)
				items1.InputEdgePrometheus.Environment = types.StringPointerValue(itemsItem.InputEdgePrometheus.Environment)
				items1.InputEdgePrometheus.ID = types.StringPointerValue(itemsItem.InputEdgePrometheus.ID)
				if itemsItem.InputEdgePrometheus.Interval != nil {
					items1.InputEdgePrometheus.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEdgePrometheus.Interval)))
				} else {
					items1.InputEdgePrometheus.Interval = types.NumberNull()
				}
				items1.InputEdgePrometheus.Metadata = []tfTypes.InputEdgePrometheusMetadata{}
				for metadataCount11, metadataItem11 := range itemsItem.InputEdgePrometheus.Metadata {
					var metadata23 tfTypes.InputEdgePrometheusMetadata
					metadata23.Name = types.StringValue(metadataItem11.Name)
					metadata23.Value = types.StringValue(metadataItem11.Value)
					if metadataCount11+1 > len(items1.InputEdgePrometheus.Metadata) {
						items1.InputEdgePrometheus.Metadata = append(items1.InputEdgePrometheus.Metadata, metadata23)
					} else {
						items1.InputEdgePrometheus.Metadata[metadataCount11].Name = metadata23.Name
						items1.InputEdgePrometheus.Metadata[metadataCount11].Value = metadata23.Value
					}
				}
				items1.InputEdgePrometheus.NameList = make([]types.String, 0, len(itemsItem.InputEdgePrometheus.NameList))
				for _, v := range itemsItem.InputEdgePrometheus.NameList {
					items1.InputEdgePrometheus.NameList = append(items1.InputEdgePrometheus.NameList, types.StringValue(v))
				}
				items1.InputEdgePrometheus.Password = types.StringPointerValue(itemsItem.InputEdgePrometheus.Password)
				if itemsItem.InputEdgePrometheus.Persistence == nil {
					items1.InputEdgePrometheus.Persistence = nil
				} else {
					items1.InputEdgePrometheus.Persistence = &tfTypes.DiskSpooling{}
					if itemsItem.InputEdgePrometheus.Persistence.Compress != nil {
						items1.InputEdgePrometheus.Persistence.Compress = types.StringValue(string(*itemsItem.InputEdgePrometheus.Persistence.Compress))
					} else {
						items1.InputEdgePrometheus.Persistence.Compress = types.StringNull()
					}
					items1.InputEdgePrometheus.Persistence.Enable = types.BoolPointerValue(itemsItem.InputEdgePrometheus.Persistence.Enable)
					items1.InputEdgePrometheus.Persistence.MaxDataSize = types.StringPointerValue(itemsItem.InputEdgePrometheus.Persistence.MaxDataSize)
					items1.InputEdgePrometheus.Persistence.MaxDataTime = types.StringPointerValue(itemsItem.InputEdgePrometheus.Persistence.MaxDataTime)
					items1.InputEdgePrometheus.Persistence.TimeWindow = types.StringPointerValue(itemsItem.InputEdgePrometheus.Persistence.TimeWindow)
				}
				items1.InputEdgePrometheus.Pipeline = types.StringPointerValue(itemsItem.InputEdgePrometheus.Pipeline)
				items1.InputEdgePrometheus.PodFilter = []tfTypes.PodFilter{}
				for podFilterCount, podFilterItem := range itemsItem.InputEdgePrometheus.PodFilter {
					var podFilter1 tfTypes.PodFilter
					podFilter1.Description = types.StringPointerValue(podFilterItem.Description)
					podFilter1.Filter = types.StringValue(podFilterItem.Filter)
					if podFilterCount+1 > len(items1.InputEdgePrometheus.PodFilter) {
						items1.InputEdgePrometheus.PodFilter = append(items1.InputEdgePrometheus.PodFilter, podFilter1)
					} else {
						items1.InputEdgePrometheus.PodFilter[podFilterCount].Description = podFilter1.Description
						items1.InputEdgePrometheus.PodFilter[podFilterCount].Filter = podFilter1.Filter
					}
				}
				if itemsItem.InputEdgePrometheus.Pq == nil {
					items1.InputEdgePrometheus.Pq = nil
				} else {
					items1.InputEdgePrometheus.Pq = &tfTypes.InputEdgePrometheusPq{}
					if itemsItem.InputEdgePrometheus.Pq.CommitFrequency != nil {
						items1.InputEdgePrometheus.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEdgePrometheus.Pq.CommitFrequency)))
					} else {
						items1.InputEdgePrometheus.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputEdgePrometheus.Pq.Compress != nil {
						items1.InputEdgePrometheus.Pq.Compress = types.StringValue(string(*itemsItem.InputEdgePrometheus.Pq.Compress))
					} else {
						items1.InputEdgePrometheus.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputEdgePrometheus.Pq.MaxBufferSize != nil {
						items1.InputEdgePrometheus.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEdgePrometheus.Pq.MaxBufferSize)))
					} else {
						items1.InputEdgePrometheus.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputEdgePrometheus.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputEdgePrometheus.Pq.MaxFileSize)
					items1.InputEdgePrometheus.Pq.MaxSize = types.StringPointerValue(itemsItem.InputEdgePrometheus.Pq.MaxSize)
					if itemsItem.InputEdgePrometheus.Pq.Mode != nil {
						items1.InputEdgePrometheus.Pq.Mode = types.StringValue(string(*itemsItem.InputEdgePrometheus.Pq.Mode))
					} else {
						items1.InputEdgePrometheus.Pq.Mode = types.StringNull()
					}
					items1.InputEdgePrometheus.Pq.Path = types.StringPointerValue(itemsItem.InputEdgePrometheus.Pq.Path)
				}
				items1.InputEdgePrometheus.PqEnabled = types.BoolPointerValue(itemsItem.InputEdgePrometheus.PqEnabled)
				if itemsItem.InputEdgePrometheus.RecordType != nil {
					items1.InputEdgePrometheus.RecordType = types.StringValue(string(*itemsItem.InputEdgePrometheus.RecordType))
				} else {
					items1.InputEdgePrometheus.RecordType = types.StringNull()
				}
				items1.InputEdgePrometheus.Region = types.StringPointerValue(itemsItem.InputEdgePrometheus.Region)
				items1.InputEdgePrometheus.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputEdgePrometheus.RejectUnauthorized)
				items1.InputEdgePrometheus.ReuseConnections = types.BoolPointerValue(itemsItem.InputEdgePrometheus.ReuseConnections)
				items1.InputEdgePrometheus.ScrapePath = types.StringPointerValue(itemsItem.InputEdgePrometheus.ScrapePath)
				items1.InputEdgePrometheus.ScrapePathExpr = types.StringPointerValue(itemsItem.InputEdgePrometheus.ScrapePathExpr)
				if itemsItem.InputEdgePrometheus.ScrapePort != nil {
					items1.InputEdgePrometheus.ScrapePort = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEdgePrometheus.ScrapePort)))
				} else {
					items1.InputEdgePrometheus.ScrapePort = types.NumberNull()
				}
				items1.InputEdgePrometheus.ScrapePortExpr = types.StringPointerValue(itemsItem.InputEdgePrometheus.ScrapePortExpr)
				if itemsItem.InputEdgePrometheus.ScrapeProtocol != nil {
					items1.InputEdgePrometheus.ScrapeProtocol = types.StringValue(string(*itemsItem.InputEdgePrometheus.ScrapeProtocol))
				} else {
					items1.InputEdgePrometheus.ScrapeProtocol = types.StringNull()
				}
				items1.InputEdgePrometheus.ScrapeProtocolExpr = types.StringPointerValue(itemsItem.InputEdgePrometheus.ScrapeProtocolExpr)
				items1.InputEdgePrometheus.SearchFilter = []tfTypes.InputEdgePrometheusSearchFilter{}
				for searchFilterCount, searchFilterItem := range itemsItem.InputEdgePrometheus.SearchFilter {
					var searchFilter1 tfTypes.InputEdgePrometheusSearchFilter
					searchFilter1.Name = types.StringValue(searchFilterItem.Name)
					searchFilter1.Values = make([]types.String, 0, len(searchFilterItem.Values))
					for _, v := range searchFilterItem.Values {
						searchFilter1.Values = append(searchFilter1.Values, types.StringValue(v))
					}
					if searchFilterCount+1 > len(items1.InputEdgePrometheus.SearchFilter) {
						items1.InputEdgePrometheus.SearchFilter = append(items1.InputEdgePrometheus.SearchFilter, searchFilter1)
					} else {
						items1.InputEdgePrometheus.SearchFilter[searchFilterCount].Name = searchFilter1.Name
						items1.InputEdgePrometheus.SearchFilter[searchFilterCount].Values = searchFilter1.Values
					}
				}
				items1.InputEdgePrometheus.SendToRoutes = types.BoolPointerValue(itemsItem.InputEdgePrometheus.SendToRoutes)
				if itemsItem.InputEdgePrometheus.SignatureVersion != nil {
					items1.InputEdgePrometheus.SignatureVersion = types.StringValue(string(*itemsItem.InputEdgePrometheus.SignatureVersion))
				} else {
					items1.InputEdgePrometheus.SignatureVersion = types.StringNull()
				}
				items1.InputEdgePrometheus.Streamtags = make([]types.String, 0, len(itemsItem.InputEdgePrometheus.Streamtags))
				for _, v := range itemsItem.InputEdgePrometheus.Streamtags {
					items1.InputEdgePrometheus.Streamtags = append(items1.InputEdgePrometheus.Streamtags, types.StringValue(v))
				}
				items1.InputEdgePrometheus.Targets = []tfTypes.Targets{}
				for targetsCount, targetsItem := range itemsItem.InputEdgePrometheus.Targets {
					var targets1 tfTypes.Targets
					targets1.Host = types.StringValue(targetsItem.Host)
					targets1.Path = types.StringPointerValue(targetsItem.Path)
					if targetsItem.Port != nil {
						targets1.Port = types.NumberValue(big.NewFloat(float64(*targetsItem.Port)))
					} else {
						targets1.Port = types.NumberNull()
					}
					if targetsItem.Protocol != nil {
						targets1.Protocol = types.StringValue(string(*targetsItem.Protocol))
					} else {
						targets1.Protocol = types.StringNull()
					}
					if targetsCount+1 > len(items1.InputEdgePrometheus.Targets) {
						items1.InputEdgePrometheus.Targets = append(items1.InputEdgePrometheus.Targets, targets1)
					} else {
						items1.InputEdgePrometheus.Targets[targetsCount].Host = targets1.Host
						items1.InputEdgePrometheus.Targets[targetsCount].Path = targets1.Path
						items1.InputEdgePrometheus.Targets[targetsCount].Port = targets1.Port
						items1.InputEdgePrometheus.Targets[targetsCount].Protocol = targets1.Protocol
					}
				}
				if itemsItem.InputEdgePrometheus.Timeout != nil {
					items1.InputEdgePrometheus.Timeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEdgePrometheus.Timeout)))
				} else {
					items1.InputEdgePrometheus.Timeout = types.NumberNull()
				}
				if itemsItem.InputEdgePrometheus.Type != nil {
					items1.InputEdgePrometheus.Type = types.StringValue(string(*itemsItem.InputEdgePrometheus.Type))
				} else {
					items1.InputEdgePrometheus.Type = types.StringNull()
				}
				items1.InputEdgePrometheus.UsePublicIP = types.BoolPointerValue(itemsItem.InputEdgePrometheus.UsePublicIP)
				items1.InputEdgePrometheus.Username = types.StringPointerValue(itemsItem.InputEdgePrometheus.Username)
			}
			if itemsItem.InputElastic != nil {
				items1.InputElastic = &tfTypes.InputElastic{}
				if itemsItem.InputElastic.ActivityLogSampleRate != nil {
					items1.InputElastic.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputElastic.ActivityLogSampleRate)))
				} else {
					items1.InputElastic.ActivityLogSampleRate = types.NumberNull()
				}
				if itemsItem.InputElastic.APIVersion != nil {
					items1.InputElastic.APIVersion = types.StringValue(string(*itemsItem.InputElastic.APIVersion))
				} else {
					items1.InputElastic.APIVersion = types.StringNull()
				}
				items1.InputElastic.AuthTokens = make([]types.String, 0, len(itemsItem.InputElastic.AuthTokens))
				for _, v := range itemsItem.InputElastic.AuthTokens {
					items1.InputElastic.AuthTokens = append(items1.InputElastic.AuthTokens, types.StringValue(v))
				}
				if itemsItem.InputElastic.AuthType != nil {
					items1.InputElastic.AuthType = types.StringValue(string(*itemsItem.InputElastic.AuthType))
				} else {
					items1.InputElastic.AuthType = types.StringNull()
				}
				items1.InputElastic.CaptureHeaders = types.BoolPointerValue(itemsItem.InputElastic.CaptureHeaders)
				items1.InputElastic.Connections = []tfTypes.InputElasticConnections{}
				for connectionsCount12, connectionsItem12 := range itemsItem.InputElastic.Connections {
					var connections25 tfTypes.InputElasticConnections
					connections25.Output = types.StringValue(connectionsItem12.Output)
					connections25.Pipeline = types.StringPointerValue(connectionsItem12.Pipeline)
					if connectionsCount12+1 > len(items1.InputElastic.Connections) {
						items1.InputElastic.Connections = append(items1.InputElastic.Connections, connections25)
					} else {
						items1.InputElastic.Connections[connectionsCount12].Output = connections25.Output
						items1.InputElastic.Connections[connectionsCount12].Pipeline = connections25.Pipeline
					}
				}
				items1.InputElastic.CredentialsSecret = types.StringPointerValue(itemsItem.InputElastic.CredentialsSecret)
				items1.InputElastic.CustomAPIVersion = types.StringPointerValue(itemsItem.InputElastic.CustomAPIVersion)
				items1.InputElastic.Description = types.StringPointerValue(itemsItem.InputElastic.Description)
				items1.InputElastic.Disabled = types.BoolPointerValue(itemsItem.InputElastic.Disabled)
				items1.InputElastic.ElasticAPI = types.StringPointerValue(itemsItem.InputElastic.ElasticAPI)
				items1.InputElastic.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputElastic.EnableHealthCheck)
				items1.InputElastic.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputElastic.EnableProxyHeader)
				items1.InputElastic.Environment = types.StringPointerValue(itemsItem.InputElastic.Environment)
				items1.InputElastic.ExtraHTTPHeaders = []tfTypes.ExtraHTTPHeaders{}
				for extraHTTPHeadersCount, extraHTTPHeadersItem := range itemsItem.InputElastic.ExtraHTTPHeaders {
					var extraHTTPHeaders1 tfTypes.ExtraHTTPHeaders
					extraHTTPHeaders1.Name = types.StringPointerValue(extraHTTPHeadersItem.Name)
					extraHTTPHeaders1.Value = types.StringValue(extraHTTPHeadersItem.Value)
					if extraHTTPHeadersCount+1 > len(items1.InputElastic.ExtraHTTPHeaders) {
						items1.InputElastic.ExtraHTTPHeaders = append(items1.InputElastic.ExtraHTTPHeaders, extraHTTPHeaders1)
					} else {
						items1.InputElastic.ExtraHTTPHeaders[extraHTTPHeadersCount].Name = extraHTTPHeaders1.Name
						items1.InputElastic.ExtraHTTPHeaders[extraHTTPHeadersCount].Value = extraHTTPHeaders1.Value
					}
				}
				items1.InputElastic.Host = types.StringPointerValue(itemsItem.InputElastic.Host)
				items1.InputElastic.ID = types.StringPointerValue(itemsItem.InputElastic.ID)
				items1.InputElastic.IgnoreStandardHeaders = types.BoolPointerValue(itemsItem.InputElastic.IgnoreStandardHeaders)
				items1.InputElastic.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputElastic.IPAllowlistRegex)
				items1.InputElastic.IPDenylistRegex = types.StringPointerValue(itemsItem.InputElastic.IPDenylistRegex)
				if itemsItem.InputElastic.KeepAliveTimeout != nil {
					items1.InputElastic.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputElastic.KeepAliveTimeout)))
				} else {
					items1.InputElastic.KeepAliveTimeout = types.NumberNull()
				}
				if itemsItem.InputElastic.MaxActiveReq != nil {
					items1.InputElastic.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputElastic.MaxActiveReq)))
				} else {
					items1.InputElastic.MaxActiveReq = types.NumberNull()
				}
				items1.InputElastic.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputElastic.MaxRequestsPerSocket)
				items1.InputElastic.Metadata = []tfTypes.InputElasticMetadata{}
				for metadataCount12, metadataItem12 := range itemsItem.InputElastic.Metadata {
					var metadata25 tfTypes.InputElasticMetadata
					metadata25.Name = types.StringValue(metadataItem12.Name)
					metadata25.Value = types.StringValue(metadataItem12.Value)
					if metadataCount12+1 > len(items1.InputElastic.Metadata) {
						items1.InputElastic.Metadata = append(items1.InputElastic.Metadata, metadata25)
					} else {
						items1.InputElastic.Metadata[metadataCount12].Name = metadata25.Name
						items1.InputElastic.Metadata[metadataCount12].Value = metadata25.Value
					}
				}
				items1.InputElastic.Password = types.StringPointerValue(itemsItem.InputElastic.Password)
				items1.InputElastic.Pipeline = types.StringPointerValue(itemsItem.InputElastic.Pipeline)
				items1.InputElastic.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputElastic.Port)))
				if itemsItem.InputElastic.Pq == nil {
					items1.InputElastic.Pq = nil
				} else {
					items1.InputElastic.Pq = &tfTypes.InputElasticPq{}
					if itemsItem.InputElastic.Pq.CommitFrequency != nil {
						items1.InputElastic.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputElastic.Pq.CommitFrequency)))
					} else {
						items1.InputElastic.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputElastic.Pq.Compress != nil {
						items1.InputElastic.Pq.Compress = types.StringValue(string(*itemsItem.InputElastic.Pq.Compress))
					} else {
						items1.InputElastic.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputElastic.Pq.MaxBufferSize != nil {
						items1.InputElastic.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputElastic.Pq.MaxBufferSize)))
					} else {
						items1.InputElastic.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputElastic.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputElastic.Pq.MaxFileSize)
					items1.InputElastic.Pq.MaxSize = types.StringPointerValue(itemsItem.InputElastic.Pq.MaxSize)
					if itemsItem.InputElastic.Pq.Mode != nil {
						items1.InputElastic.Pq.Mode = types.StringValue(string(*itemsItem.InputElastic.Pq.Mode))
					} else {
						items1.InputElastic.Pq.Mode = types.StringNull()
					}
					items1.InputElastic.Pq.Path = types.StringPointerValue(itemsItem.InputElastic.Pq.Path)
				}
				items1.InputElastic.PqEnabled = types.BoolPointerValue(itemsItem.InputElastic.PqEnabled)
				if itemsItem.InputElastic.ProxyMode == nil {
					items1.InputElastic.ProxyMode = nil
				} else {
					items1.InputElastic.ProxyMode = &tfTypes.ProxyMode{}
					if itemsItem.InputElastic.ProxyMode.AuthType != nil {
						items1.InputElastic.ProxyMode.AuthType = types.StringValue(string(*itemsItem.InputElastic.ProxyMode.AuthType))
					} else {
						items1.InputElastic.ProxyMode.AuthType = types.StringNull()
					}
					items1.InputElastic.ProxyMode.Enabled = types.BoolPointerValue(itemsItem.InputElastic.ProxyMode.Enabled)
					items1.InputElastic.ProxyMode.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputElastic.ProxyMode.RejectUnauthorized)
					items1.InputElastic.ProxyMode.RemoveHeaders = make([]types.String, 0, len(itemsItem.InputElastic.ProxyMode.RemoveHeaders))
					for _, v := range itemsItem.InputElastic.ProxyMode.RemoveHeaders {
						items1.InputElastic.ProxyMode.RemoveHeaders = append(items1.InputElastic.ProxyMode.RemoveHeaders, types.StringValue(v))
					}
					if itemsItem.InputElastic.ProxyMode.TimeoutSec != nil {
						items1.InputElastic.ProxyMode.TimeoutSec = types.NumberValue(big.NewFloat(float64(*itemsItem.InputElastic.ProxyMode.TimeoutSec)))
					} else {
						items1.InputElastic.ProxyMode.TimeoutSec = types.NumberNull()
					}
					items1.InputElastic.ProxyMode.URL = types.StringPointerValue(itemsItem.InputElastic.ProxyMode.URL)
				}
				if itemsItem.InputElastic.RequestTimeout != nil {
					items1.InputElastic.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputElastic.RequestTimeout)))
				} else {
					items1.InputElastic.RequestTimeout = types.NumberNull()
				}
				items1.InputElastic.SendToRoutes = types.BoolPointerValue(itemsItem.InputElastic.SendToRoutes)
				if itemsItem.InputElastic.SocketTimeout != nil {
					items1.InputElastic.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputElastic.SocketTimeout)))
				} else {
					items1.InputElastic.SocketTimeout = types.NumberNull()
				}
				items1.InputElastic.Streamtags = make([]types.String, 0, len(itemsItem.InputElastic.Streamtags))
				for _, v := range itemsItem.InputElastic.Streamtags {
					items1.InputElastic.Streamtags = append(items1.InputElastic.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputElastic.TLS == nil {
					items1.InputElastic.TLS = nil
				} else {
					items1.InputElastic.TLS = &tfTypes.InputElasticTLSSettingsServerSide{}
					items1.InputElastic.TLS.CaPath = types.StringPointerValue(itemsItem.InputElastic.TLS.CaPath)
					items1.InputElastic.TLS.CertificateName = types.StringPointerValue(itemsItem.InputElastic.TLS.CertificateName)
					items1.InputElastic.TLS.CertPath = types.StringPointerValue(itemsItem.InputElastic.TLS.CertPath)
					if itemsItem.InputElastic.TLS.CommonNameRegex == nil {
						items1.InputElastic.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult4, _ := json.Marshal(itemsItem.InputElastic.TLS.CommonNameRegex)
						items1.InputElastic.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult4))
					}
					items1.InputElastic.TLS.Disabled = types.BoolPointerValue(itemsItem.InputElastic.TLS.Disabled)
					if itemsItem.InputElastic.TLS.MaxVersion != nil {
						items1.InputElastic.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputElastic.TLS.MaxVersion))
					} else {
						items1.InputElastic.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputElastic.TLS.MinVersion != nil {
						items1.InputElastic.TLS.MinVersion = types.StringValue(string(*itemsItem.InputElastic.TLS.MinVersion))
					} else {
						items1.InputElastic.TLS.MinVersion = types.StringNull()
					}
					items1.InputElastic.TLS.Passphrase = types.StringPointerValue(itemsItem.InputElastic.TLS.Passphrase)
					items1.InputElastic.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputElastic.TLS.PrivKeyPath)
					if itemsItem.InputElastic.TLS.RejectUnauthorized == nil {
						items1.InputElastic.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult4, _ := json.Marshal(itemsItem.InputElastic.TLS.RejectUnauthorized)
						items1.InputElastic.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult4))
					}
					items1.InputElastic.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputElastic.TLS.RequestCert)
				}
				if itemsItem.InputElastic.Type != nil {
					items1.InputElastic.Type = types.StringValue(string(*itemsItem.InputElastic.Type))
				} else {
					items1.InputElastic.Type = types.StringNull()
				}
				items1.InputElastic.Username = types.StringPointerValue(itemsItem.InputElastic.Username)
			}
			if itemsItem.InputEventhub != nil {
				items1.InputEventhub = &tfTypes.InputEventhub{}
				if itemsItem.InputEventhub.AuthenticationTimeout != nil {
					items1.InputEventhub.AuthenticationTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.AuthenticationTimeout)))
				} else {
					items1.InputEventhub.AuthenticationTimeout = types.NumberNull()
				}
				if itemsItem.InputEventhub.AutoCommitInterval != nil {
					items1.InputEventhub.AutoCommitInterval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.AutoCommitInterval)))
				} else {
					items1.InputEventhub.AutoCommitInterval = types.NumberNull()
				}
				if itemsItem.InputEventhub.AutoCommitThreshold != nil {
					items1.InputEventhub.AutoCommitThreshold = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.AutoCommitThreshold)))
				} else {
					items1.InputEventhub.AutoCommitThreshold = types.NumberNull()
				}
				if itemsItem.InputEventhub.BackoffRate != nil {
					items1.InputEventhub.BackoffRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.BackoffRate)))
				} else {
					items1.InputEventhub.BackoffRate = types.NumberNull()
				}
				items1.InputEventhub.Brokers = make([]types.String, 0, len(itemsItem.InputEventhub.Brokers))
				for _, v := range itemsItem.InputEventhub.Brokers {
					items1.InputEventhub.Brokers = append(items1.InputEventhub.Brokers, types.StringValue(v))
				}
				items1.InputEventhub.Connections = []tfTypes.InputEventhubConnections{}
				for connectionsCount13, connectionsItem13 := range itemsItem.InputEventhub.Connections {
					var connections27 tfTypes.InputEventhubConnections
					connections27.Output = types.StringValue(connectionsItem13.Output)
					connections27.Pipeline = types.StringPointerValue(connectionsItem13.Pipeline)
					if connectionsCount13+1 > len(items1.InputEventhub.Connections) {
						items1.InputEventhub.Connections = append(items1.InputEventhub.Connections, connections27)
					} else {
						items1.InputEventhub.Connections[connectionsCount13].Output = connections27.Output
						items1.InputEventhub.Connections[connectionsCount13].Pipeline = connections27.Pipeline
					}
				}
				if itemsItem.InputEventhub.ConnectionTimeout != nil {
					items1.InputEventhub.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.ConnectionTimeout)))
				} else {
					items1.InputEventhub.ConnectionTimeout = types.NumberNull()
				}
				items1.InputEventhub.Description = types.StringPointerValue(itemsItem.InputEventhub.Description)
				items1.InputEventhub.Disabled = types.BoolPointerValue(itemsItem.InputEventhub.Disabled)
				items1.InputEventhub.Environment = types.StringPointerValue(itemsItem.InputEventhub.Environment)
				items1.InputEventhub.FromBeginning = types.BoolPointerValue(itemsItem.InputEventhub.FromBeginning)
				items1.InputEventhub.GroupID = types.StringPointerValue(itemsItem.InputEventhub.GroupID)
				if itemsItem.InputEventhub.HeartbeatInterval != nil {
					items1.InputEventhub.HeartbeatInterval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.HeartbeatInterval)))
				} else {
					items1.InputEventhub.HeartbeatInterval = types.NumberNull()
				}
				items1.InputEventhub.ID = types.StringPointerValue(itemsItem.InputEventhub.ID)
				if itemsItem.InputEventhub.InitialBackoff != nil {
					items1.InputEventhub.InitialBackoff = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.InitialBackoff)))
				} else {
					items1.InputEventhub.InitialBackoff = types.NumberNull()
				}
				if itemsItem.InputEventhub.MaxBackOff != nil {
					items1.InputEventhub.MaxBackOff = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.MaxBackOff)))
				} else {
					items1.InputEventhub.MaxBackOff = types.NumberNull()
				}
				if itemsItem.InputEventhub.MaxBytes != nil {
					items1.InputEventhub.MaxBytes = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.MaxBytes)))
				} else {
					items1.InputEventhub.MaxBytes = types.NumberNull()
				}
				if itemsItem.InputEventhub.MaxBytesPerPartition != nil {
					items1.InputEventhub.MaxBytesPerPartition = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.MaxBytesPerPartition)))
				} else {
					items1.InputEventhub.MaxBytesPerPartition = types.NumberNull()
				}
				if itemsItem.InputEventhub.MaxRetries != nil {
					items1.InputEventhub.MaxRetries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.MaxRetries)))
				} else {
					items1.InputEventhub.MaxRetries = types.NumberNull()
				}
				if itemsItem.InputEventhub.MaxSocketErrors != nil {
					items1.InputEventhub.MaxSocketErrors = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.MaxSocketErrors)))
				} else {
					items1.InputEventhub.MaxSocketErrors = types.NumberNull()
				}
				items1.InputEventhub.Metadata = []tfTypes.InputEventhubMetadata{}
				for metadataCount13, metadataItem13 := range itemsItem.InputEventhub.Metadata {
					var metadata27 tfTypes.InputEventhubMetadata
					metadata27.Name = types.StringValue(metadataItem13.Name)
					metadata27.Value = types.StringValue(metadataItem13.Value)
					if metadataCount13+1 > len(items1.InputEventhub.Metadata) {
						items1.InputEventhub.Metadata = append(items1.InputEventhub.Metadata, metadata27)
					} else {
						items1.InputEventhub.Metadata[metadataCount13].Name = metadata27.Name
						items1.InputEventhub.Metadata[metadataCount13].Value = metadata27.Value
					}
				}
				items1.InputEventhub.MinimizeDuplicates = types.BoolPointerValue(itemsItem.InputEventhub.MinimizeDuplicates)
				items1.InputEventhub.Pipeline = types.StringPointerValue(itemsItem.InputEventhub.Pipeline)
				if itemsItem.InputEventhub.Pq == nil {
					items1.InputEventhub.Pq = nil
				} else {
					items1.InputEventhub.Pq = &tfTypes.InputEventhubPq{}
					if itemsItem.InputEventhub.Pq.CommitFrequency != nil {
						items1.InputEventhub.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.Pq.CommitFrequency)))
					} else {
						items1.InputEventhub.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputEventhub.Pq.Compress != nil {
						items1.InputEventhub.Pq.Compress = types.StringValue(string(*itemsItem.InputEventhub.Pq.Compress))
					} else {
						items1.InputEventhub.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputEventhub.Pq.MaxBufferSize != nil {
						items1.InputEventhub.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.Pq.MaxBufferSize)))
					} else {
						items1.InputEventhub.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputEventhub.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputEventhub.Pq.MaxFileSize)
					items1.InputEventhub.Pq.MaxSize = types.StringPointerValue(itemsItem.InputEventhub.Pq.MaxSize)
					if itemsItem.InputEventhub.Pq.Mode != nil {
						items1.InputEventhub.Pq.Mode = types.StringValue(string(*itemsItem.InputEventhub.Pq.Mode))
					} else {
						items1.InputEventhub.Pq.Mode = types.StringNull()
					}
					items1.InputEventhub.Pq.Path = types.StringPointerValue(itemsItem.InputEventhub.Pq.Path)
				}
				items1.InputEventhub.PqEnabled = types.BoolPointerValue(itemsItem.InputEventhub.PqEnabled)
				if itemsItem.InputEventhub.ReauthenticationThreshold != nil {
					items1.InputEventhub.ReauthenticationThreshold = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.ReauthenticationThreshold)))
				} else {
					items1.InputEventhub.ReauthenticationThreshold = types.NumberNull()
				}
				if itemsItem.InputEventhub.RebalanceTimeout != nil {
					items1.InputEventhub.RebalanceTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.RebalanceTimeout)))
				} else {
					items1.InputEventhub.RebalanceTimeout = types.NumberNull()
				}
				if itemsItem.InputEventhub.RequestTimeout != nil {
					items1.InputEventhub.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.RequestTimeout)))
				} else {
					items1.InputEventhub.RequestTimeout = types.NumberNull()
				}
				if itemsItem.InputEventhub.Sasl == nil {
					items1.InputEventhub.Sasl = nil
				} else {
					items1.InputEventhub.Sasl = &tfTypes.InputEventhubAuthentication{}
					items1.InputEventhub.Sasl.Disabled = types.BoolPointerValue(itemsItem.InputEventhub.Sasl.Disabled)
					if itemsItem.InputEventhub.Sasl.Mechanism != nil {
						items1.InputEventhub.Sasl.Mechanism = types.StringValue(string(*itemsItem.InputEventhub.Sasl.Mechanism))
					} else {
						items1.InputEventhub.Sasl.Mechanism = types.StringNull()
					}
				}
				items1.InputEventhub.SendToRoutes = types.BoolPointerValue(itemsItem.InputEventhub.SendToRoutes)
				if itemsItem.InputEventhub.SessionTimeout != nil {
					items1.InputEventhub.SessionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputEventhub.SessionTimeout)))
				} else {
					items1.InputEventhub.SessionTimeout = types.NumberNull()
				}
				items1.InputEventhub.Streamtags = make([]types.String, 0, len(itemsItem.InputEventhub.Streamtags))
				for _, v := range itemsItem.InputEventhub.Streamtags {
					items1.InputEventhub.Streamtags = append(items1.InputEventhub.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputEventhub.TLS == nil {
					items1.InputEventhub.TLS = nil
				} else {
					items1.InputEventhub.TLS = &tfTypes.InputEventhubTLSSettingsClientSide{}
					items1.InputEventhub.TLS.Disabled = types.BoolPointerValue(itemsItem.InputEventhub.TLS.Disabled)
					items1.InputEventhub.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputEventhub.TLS.RejectUnauthorized)
				}
				items1.InputEventhub.Topics = make([]types.String, 0, len(itemsItem.InputEventhub.Topics))
				for _, v := range itemsItem.InputEventhub.Topics {
					items1.InputEventhub.Topics = append(items1.InputEventhub.Topics, types.StringValue(v))
				}
				if itemsItem.InputEventhub.Type != nil {
					items1.InputEventhub.Type = types.StringValue(string(*itemsItem.InputEventhub.Type))
				} else {
					items1.InputEventhub.Type = types.StringNull()
				}
			}
			if itemsItem.InputExec != nil {
				items1.InputExec = &tfTypes.InputExec{}
				items1.InputExec.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputExec.BreakerRulesets))
				for _, v := range itemsItem.InputExec.BreakerRulesets {
					items1.InputExec.BreakerRulesets = append(items1.InputExec.BreakerRulesets, types.StringValue(v))
				}
				items1.InputExec.Command = types.StringValue(itemsItem.InputExec.Command)
				items1.InputExec.Connections = []tfTypes.InputExecConnections{}
				for connectionsCount14, connectionsItem14 := range itemsItem.InputExec.Connections {
					var connections29 tfTypes.InputExecConnections
					connections29.Output = types.StringValue(connectionsItem14.Output)
					connections29.Pipeline = types.StringPointerValue(connectionsItem14.Pipeline)
					if connectionsCount14+1 > len(items1.InputExec.Connections) {
						items1.InputExec.Connections = append(items1.InputExec.Connections, connections29)
					} else {
						items1.InputExec.Connections[connectionsCount14].Output = connections29.Output
						items1.InputExec.Connections[connectionsCount14].Pipeline = connections29.Pipeline
					}
				}
				items1.InputExec.CronSchedule = types.StringPointerValue(itemsItem.InputExec.CronSchedule)
				items1.InputExec.Description = types.StringPointerValue(itemsItem.InputExec.Description)
				items1.InputExec.Disabled = types.BoolPointerValue(itemsItem.InputExec.Disabled)
				items1.InputExec.Environment = types.StringPointerValue(itemsItem.InputExec.Environment)
				items1.InputExec.ID = types.StringPointerValue(itemsItem.InputExec.ID)
				if itemsItem.InputExec.Interval != nil {
					items1.InputExec.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputExec.Interval)))
				} else {
					items1.InputExec.Interval = types.NumberNull()
				}
				items1.InputExec.Metadata = []tfTypes.InputExecMetadata{}
				for metadataCount14, metadataItem14 := range itemsItem.InputExec.Metadata {
					var metadata29 tfTypes.InputExecMetadata
					metadata29.Name = types.StringValue(metadataItem14.Name)
					metadata29.Value = types.StringValue(metadataItem14.Value)
					if metadataCount14+1 > len(items1.InputExec.Metadata) {
						items1.InputExec.Metadata = append(items1.InputExec.Metadata, metadata29)
					} else {
						items1.InputExec.Metadata[metadataCount14].Name = metadata29.Name
						items1.InputExec.Metadata[metadataCount14].Value = metadata29.Value
					}
				}
				items1.InputExec.Pipeline = types.StringPointerValue(itemsItem.InputExec.Pipeline)
				if itemsItem.InputExec.Pq == nil {
					items1.InputExec.Pq = nil
				} else {
					items1.InputExec.Pq = &tfTypes.InputExecPq{}
					if itemsItem.InputExec.Pq.CommitFrequency != nil {
						items1.InputExec.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputExec.Pq.CommitFrequency)))
					} else {
						items1.InputExec.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputExec.Pq.Compress != nil {
						items1.InputExec.Pq.Compress = types.StringValue(string(*itemsItem.InputExec.Pq.Compress))
					} else {
						items1.InputExec.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputExec.Pq.MaxBufferSize != nil {
						items1.InputExec.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputExec.Pq.MaxBufferSize)))
					} else {
						items1.InputExec.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputExec.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputExec.Pq.MaxFileSize)
					items1.InputExec.Pq.MaxSize = types.StringPointerValue(itemsItem.InputExec.Pq.MaxSize)
					if itemsItem.InputExec.Pq.Mode != nil {
						items1.InputExec.Pq.Mode = types.StringValue(string(*itemsItem.InputExec.Pq.Mode))
					} else {
						items1.InputExec.Pq.Mode = types.StringNull()
					}
					items1.InputExec.Pq.Path = types.StringPointerValue(itemsItem.InputExec.Pq.Path)
				}
				items1.InputExec.PqEnabled = types.BoolPointerValue(itemsItem.InputExec.PqEnabled)
				if itemsItem.InputExec.Retries != nil {
					items1.InputExec.Retries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputExec.Retries)))
				} else {
					items1.InputExec.Retries = types.NumberNull()
				}
				if itemsItem.InputExec.ScheduleType != nil {
					items1.InputExec.ScheduleType = types.StringValue(string(*itemsItem.InputExec.ScheduleType))
				} else {
					items1.InputExec.ScheduleType = types.StringNull()
				}
				items1.InputExec.SendToRoutes = types.BoolPointerValue(itemsItem.InputExec.SendToRoutes)
				if itemsItem.InputExec.StaleChannelFlushMs != nil {
					items1.InputExec.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputExec.StaleChannelFlushMs)))
				} else {
					items1.InputExec.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputExec.Streamtags = make([]types.String, 0, len(itemsItem.InputExec.Streamtags))
				for _, v := range itemsItem.InputExec.Streamtags {
					items1.InputExec.Streamtags = append(items1.InputExec.Streamtags, types.StringValue(v))
				}
				items1.InputExec.Type = types.StringValue(string(itemsItem.InputExec.Type))
			}
			if itemsItem.InputFile != nil {
				items1.InputFile = &tfTypes.InputFile{}
				items1.InputFile.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputFile.BreakerRulesets))
				for _, v := range itemsItem.InputFile.BreakerRulesets {
					items1.InputFile.BreakerRulesets = append(items1.InputFile.BreakerRulesets, types.StringValue(v))
				}
				items1.InputFile.CheckFileModTime = types.BoolPointerValue(itemsItem.InputFile.CheckFileModTime)
				items1.InputFile.Connections = []tfTypes.InputFileConnections{}
				for connectionsCount15, connectionsItem15 := range itemsItem.InputFile.Connections {
					var connections31 tfTypes.InputFileConnections
					connections31.Output = types.StringValue(connectionsItem15.Output)
					connections31.Pipeline = types.StringPointerValue(connectionsItem15.Pipeline)
					if connectionsCount15+1 > len(items1.InputFile.Connections) {
						items1.InputFile.Connections = append(items1.InputFile.Connections, connections31)
					} else {
						items1.InputFile.Connections[connectionsCount15].Output = connections31.Output
						items1.InputFile.Connections[connectionsCount15].Pipeline = connections31.Pipeline
					}
				}
				items1.InputFile.DeleteFiles = types.BoolPointerValue(itemsItem.InputFile.DeleteFiles)
				if itemsItem.InputFile.Depth != nil {
					items1.InputFile.Depth = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFile.Depth)))
				} else {
					items1.InputFile.Depth = types.NumberNull()
				}
				items1.InputFile.Description = types.StringPointerValue(itemsItem.InputFile.Description)
				items1.InputFile.Disabled = types.BoolPointerValue(itemsItem.InputFile.Disabled)
				items1.InputFile.Environment = types.StringPointerValue(itemsItem.InputFile.Environment)
				items1.InputFile.Filenames = make([]types.String, 0, len(itemsItem.InputFile.Filenames))
				for _, v := range itemsItem.InputFile.Filenames {
					items1.InputFile.Filenames = append(items1.InputFile.Filenames, types.StringValue(v))
				}
				items1.InputFile.ForceText = types.BoolPointerValue(itemsItem.InputFile.ForceText)
				if itemsItem.InputFile.HashLen != nil {
					items1.InputFile.HashLen = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFile.HashLen)))
				} else {
					items1.InputFile.HashLen = types.NumberNull()
				}
				items1.InputFile.ID = types.StringValue(itemsItem.InputFile.ID)
				if itemsItem.InputFile.IdleTimeout != nil {
					items1.InputFile.IdleTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFile.IdleTimeout)))
				} else {
					items1.InputFile.IdleTimeout = types.NumberNull()
				}
				items1.InputFile.IncludeUnidentifiableBinary = types.BoolPointerValue(itemsItem.InputFile.IncludeUnidentifiableBinary)
				if itemsItem.InputFile.Interval != nil {
					items1.InputFile.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFile.Interval)))
				} else {
					items1.InputFile.Interval = types.NumberNull()
				}
				items1.InputFile.MaxAgeDur = types.StringPointerValue(itemsItem.InputFile.MaxAgeDur)
				items1.InputFile.Metadata = []tfTypes.InputFileMetadata{}
				for metadataCount15, metadataItem15 := range itemsItem.InputFile.Metadata {
					var metadata31 tfTypes.InputFileMetadata
					metadata31.Name = types.StringValue(metadataItem15.Name)
					metadata31.Value = types.StringValue(metadataItem15.Value)
					if metadataCount15+1 > len(items1.InputFile.Metadata) {
						items1.InputFile.Metadata = append(items1.InputFile.Metadata, metadata31)
					} else {
						items1.InputFile.Metadata[metadataCount15].Name = metadata31.Name
						items1.InputFile.Metadata[metadataCount15].Value = metadata31.Value
					}
				}
				if itemsItem.InputFile.Mode != nil {
					items1.InputFile.Mode = types.StringValue(string(*itemsItem.InputFile.Mode))
				} else {
					items1.InputFile.Mode = types.StringNull()
				}
				items1.InputFile.Path = types.StringPointerValue(itemsItem.InputFile.Path)
				items1.InputFile.Pipeline = types.StringPointerValue(itemsItem.InputFile.Pipeline)
				if itemsItem.InputFile.Pq == nil {
					items1.InputFile.Pq = nil
				} else {
					items1.InputFile.Pq = &tfTypes.InputFilePq{}
					if itemsItem.InputFile.Pq.CommitFrequency != nil {
						items1.InputFile.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFile.Pq.CommitFrequency)))
					} else {
						items1.InputFile.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputFile.Pq.Compress != nil {
						items1.InputFile.Pq.Compress = types.StringValue(string(*itemsItem.InputFile.Pq.Compress))
					} else {
						items1.InputFile.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputFile.Pq.MaxBufferSize != nil {
						items1.InputFile.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFile.Pq.MaxBufferSize)))
					} else {
						items1.InputFile.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputFile.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputFile.Pq.MaxFileSize)
					items1.InputFile.Pq.MaxSize = types.StringPointerValue(itemsItem.InputFile.Pq.MaxSize)
					if itemsItem.InputFile.Pq.Mode != nil {
						items1.InputFile.Pq.Mode = types.StringValue(string(*itemsItem.InputFile.Pq.Mode))
					} else {
						items1.InputFile.Pq.Mode = types.StringNull()
					}
					items1.InputFile.Pq.Path = types.StringPointerValue(itemsItem.InputFile.Pq.Path)
				}
				items1.InputFile.PqEnabled = types.BoolPointerValue(itemsItem.InputFile.PqEnabled)
				items1.InputFile.SendToRoutes = types.BoolPointerValue(itemsItem.InputFile.SendToRoutes)
				if itemsItem.InputFile.StaleChannelFlushMs != nil {
					items1.InputFile.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFile.StaleChannelFlushMs)))
				} else {
					items1.InputFile.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputFile.Streamtags = make([]types.String, 0, len(itemsItem.InputFile.Streamtags))
				for _, v := range itemsItem.InputFile.Streamtags {
					items1.InputFile.Streamtags = append(items1.InputFile.Streamtags, types.StringValue(v))
				}
				items1.InputFile.SuppressMissingPathErrors = types.BoolPointerValue(itemsItem.InputFile.SuppressMissingPathErrors)
				items1.InputFile.TailOnly = types.BoolPointerValue(itemsItem.InputFile.TailOnly)
				items1.InputFile.Type = types.StringValue(string(itemsItem.InputFile.Type))
			}
			if itemsItem.InputFirehose != nil {
				items1.InputFirehose = &tfTypes.InputFirehose{}
				if itemsItem.InputFirehose.ActivityLogSampleRate != nil {
					items1.InputFirehose.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFirehose.ActivityLogSampleRate)))
				} else {
					items1.InputFirehose.ActivityLogSampleRate = types.NumberNull()
				}
				items1.InputFirehose.AuthTokens = make([]types.String, 0, len(itemsItem.InputFirehose.AuthTokens))
				for _, v := range itemsItem.InputFirehose.AuthTokens {
					items1.InputFirehose.AuthTokens = append(items1.InputFirehose.AuthTokens, types.StringValue(v))
				}
				items1.InputFirehose.CaptureHeaders = types.BoolPointerValue(itemsItem.InputFirehose.CaptureHeaders)
				items1.InputFirehose.Connections = []tfTypes.InputFirehoseConnections{}
				for connectionsCount16, connectionsItem16 := range itemsItem.InputFirehose.Connections {
					var connections33 tfTypes.InputFirehoseConnections
					connections33.Output = types.StringValue(connectionsItem16.Output)
					connections33.Pipeline = types.StringPointerValue(connectionsItem16.Pipeline)
					if connectionsCount16+1 > len(items1.InputFirehose.Connections) {
						items1.InputFirehose.Connections = append(items1.InputFirehose.Connections, connections33)
					} else {
						items1.InputFirehose.Connections[connectionsCount16].Output = connections33.Output
						items1.InputFirehose.Connections[connectionsCount16].Pipeline = connections33.Pipeline
					}
				}
				items1.InputFirehose.Description = types.StringPointerValue(itemsItem.InputFirehose.Description)
				items1.InputFirehose.Disabled = types.BoolPointerValue(itemsItem.InputFirehose.Disabled)
				items1.InputFirehose.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputFirehose.EnableHealthCheck)
				items1.InputFirehose.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputFirehose.EnableProxyHeader)
				items1.InputFirehose.Environment = types.StringPointerValue(itemsItem.InputFirehose.Environment)
				items1.InputFirehose.Host = types.StringPointerValue(itemsItem.InputFirehose.Host)
				items1.InputFirehose.ID = types.StringPointerValue(itemsItem.InputFirehose.ID)
				items1.InputFirehose.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputFirehose.IPAllowlistRegex)
				items1.InputFirehose.IPDenylistRegex = types.StringPointerValue(itemsItem.InputFirehose.IPDenylistRegex)
				if itemsItem.InputFirehose.KeepAliveTimeout != nil {
					items1.InputFirehose.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFirehose.KeepAliveTimeout)))
				} else {
					items1.InputFirehose.KeepAliveTimeout = types.NumberNull()
				}
				if itemsItem.InputFirehose.MaxActiveReq != nil {
					items1.InputFirehose.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFirehose.MaxActiveReq)))
				} else {
					items1.InputFirehose.MaxActiveReq = types.NumberNull()
				}
				items1.InputFirehose.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputFirehose.MaxRequestsPerSocket)
				items1.InputFirehose.Metadata = []tfTypes.InputFirehoseMetadata{}
				for metadataCount16, metadataItem16 := range itemsItem.InputFirehose.Metadata {
					var metadata33 tfTypes.InputFirehoseMetadata
					metadata33.Name = types.StringValue(metadataItem16.Name)
					metadata33.Value = types.StringValue(metadataItem16.Value)
					if metadataCount16+1 > len(items1.InputFirehose.Metadata) {
						items1.InputFirehose.Metadata = append(items1.InputFirehose.Metadata, metadata33)
					} else {
						items1.InputFirehose.Metadata[metadataCount16].Name = metadata33.Name
						items1.InputFirehose.Metadata[metadataCount16].Value = metadata33.Value
					}
				}
				items1.InputFirehose.Pipeline = types.StringPointerValue(itemsItem.InputFirehose.Pipeline)
				items1.InputFirehose.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputFirehose.Port)))
				if itemsItem.InputFirehose.Pq == nil {
					items1.InputFirehose.Pq = nil
				} else {
					items1.InputFirehose.Pq = &tfTypes.InputFirehosePq{}
					if itemsItem.InputFirehose.Pq.CommitFrequency != nil {
						items1.InputFirehose.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFirehose.Pq.CommitFrequency)))
					} else {
						items1.InputFirehose.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputFirehose.Pq.Compress != nil {
						items1.InputFirehose.Pq.Compress = types.StringValue(string(*itemsItem.InputFirehose.Pq.Compress))
					} else {
						items1.InputFirehose.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputFirehose.Pq.MaxBufferSize != nil {
						items1.InputFirehose.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFirehose.Pq.MaxBufferSize)))
					} else {
						items1.InputFirehose.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputFirehose.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputFirehose.Pq.MaxFileSize)
					items1.InputFirehose.Pq.MaxSize = types.StringPointerValue(itemsItem.InputFirehose.Pq.MaxSize)
					if itemsItem.InputFirehose.Pq.Mode != nil {
						items1.InputFirehose.Pq.Mode = types.StringValue(string(*itemsItem.InputFirehose.Pq.Mode))
					} else {
						items1.InputFirehose.Pq.Mode = types.StringNull()
					}
					items1.InputFirehose.Pq.Path = types.StringPointerValue(itemsItem.InputFirehose.Pq.Path)
				}
				items1.InputFirehose.PqEnabled = types.BoolPointerValue(itemsItem.InputFirehose.PqEnabled)
				if itemsItem.InputFirehose.RequestTimeout != nil {
					items1.InputFirehose.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFirehose.RequestTimeout)))
				} else {
					items1.InputFirehose.RequestTimeout = types.NumberNull()
				}
				items1.InputFirehose.SendToRoutes = types.BoolPointerValue(itemsItem.InputFirehose.SendToRoutes)
				if itemsItem.InputFirehose.SocketTimeout != nil {
					items1.InputFirehose.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputFirehose.SocketTimeout)))
				} else {
					items1.InputFirehose.SocketTimeout = types.NumberNull()
				}
				items1.InputFirehose.Streamtags = make([]types.String, 0, len(itemsItem.InputFirehose.Streamtags))
				for _, v := range itemsItem.InputFirehose.Streamtags {
					items1.InputFirehose.Streamtags = append(items1.InputFirehose.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputFirehose.TLS == nil {
					items1.InputFirehose.TLS = nil
				} else {
					items1.InputFirehose.TLS = &tfTypes.InputFirehoseTLSSettingsServerSide{}
					items1.InputFirehose.TLS.CaPath = types.StringPointerValue(itemsItem.InputFirehose.TLS.CaPath)
					items1.InputFirehose.TLS.CertificateName = types.StringPointerValue(itemsItem.InputFirehose.TLS.CertificateName)
					items1.InputFirehose.TLS.CertPath = types.StringPointerValue(itemsItem.InputFirehose.TLS.CertPath)
					if itemsItem.InputFirehose.TLS.CommonNameRegex == nil {
						items1.InputFirehose.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult5, _ := json.Marshal(itemsItem.InputFirehose.TLS.CommonNameRegex)
						items1.InputFirehose.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult5))
					}
					items1.InputFirehose.TLS.Disabled = types.BoolPointerValue(itemsItem.InputFirehose.TLS.Disabled)
					if itemsItem.InputFirehose.TLS.MaxVersion != nil {
						items1.InputFirehose.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputFirehose.TLS.MaxVersion))
					} else {
						items1.InputFirehose.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputFirehose.TLS.MinVersion != nil {
						items1.InputFirehose.TLS.MinVersion = types.StringValue(string(*itemsItem.InputFirehose.TLS.MinVersion))
					} else {
						items1.InputFirehose.TLS.MinVersion = types.StringNull()
					}
					items1.InputFirehose.TLS.Passphrase = types.StringPointerValue(itemsItem.InputFirehose.TLS.Passphrase)
					items1.InputFirehose.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputFirehose.TLS.PrivKeyPath)
					if itemsItem.InputFirehose.TLS.RejectUnauthorized == nil {
						items1.InputFirehose.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult5, _ := json.Marshal(itemsItem.InputFirehose.TLS.RejectUnauthorized)
						items1.InputFirehose.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult5))
					}
					items1.InputFirehose.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputFirehose.TLS.RequestCert)
				}
				if itemsItem.InputFirehose.Type != nil {
					items1.InputFirehose.Type = types.StringValue(string(*itemsItem.InputFirehose.Type))
				} else {
					items1.InputFirehose.Type = types.StringNull()
				}
			}
			if itemsItem.InputGooglePubsub != nil {
				items1.InputGooglePubsub = &tfTypes.InputGooglePubsub{}
				if itemsItem.InputGooglePubsub.Concurrency != nil {
					items1.InputGooglePubsub.Concurrency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGooglePubsub.Concurrency)))
				} else {
					items1.InputGooglePubsub.Concurrency = types.NumberNull()
				}
				items1.InputGooglePubsub.Connections = []tfTypes.InputGooglePubsubConnections{}
				for connectionsCount17, connectionsItem17 := range itemsItem.InputGooglePubsub.Connections {
					var connections35 tfTypes.InputGooglePubsubConnections
					connections35.Output = types.StringValue(connectionsItem17.Output)
					connections35.Pipeline = types.StringPointerValue(connectionsItem17.Pipeline)
					if connectionsCount17+1 > len(items1.InputGooglePubsub.Connections) {
						items1.InputGooglePubsub.Connections = append(items1.InputGooglePubsub.Connections, connections35)
					} else {
						items1.InputGooglePubsub.Connections[connectionsCount17].Output = connections35.Output
						items1.InputGooglePubsub.Connections[connectionsCount17].Pipeline = connections35.Pipeline
					}
				}
				items1.InputGooglePubsub.CreateSubscription = types.BoolPointerValue(itemsItem.InputGooglePubsub.CreateSubscription)
				items1.InputGooglePubsub.CreateTopic = types.BoolPointerValue(itemsItem.InputGooglePubsub.CreateTopic)
				items1.InputGooglePubsub.Description = types.StringPointerValue(itemsItem.InputGooglePubsub.Description)
				items1.InputGooglePubsub.Disabled = types.BoolPointerValue(itemsItem.InputGooglePubsub.Disabled)
				items1.InputGooglePubsub.Environment = types.StringPointerValue(itemsItem.InputGooglePubsub.Environment)
				if itemsItem.InputGooglePubsub.GoogleAuthMethod != nil {
					items1.InputGooglePubsub.GoogleAuthMethod = types.StringValue(string(*itemsItem.InputGooglePubsub.GoogleAuthMethod))
				} else {
					items1.InputGooglePubsub.GoogleAuthMethod = types.StringNull()
				}
				items1.InputGooglePubsub.ID = types.StringPointerValue(itemsItem.InputGooglePubsub.ID)
				if itemsItem.InputGooglePubsub.MaxBacklog != nil {
					items1.InputGooglePubsub.MaxBacklog = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGooglePubsub.MaxBacklog)))
				} else {
					items1.InputGooglePubsub.MaxBacklog = types.NumberNull()
				}
				items1.InputGooglePubsub.Metadata = []tfTypes.InputGooglePubsubMetadata{}
				for metadataCount17, metadataItem17 := range itemsItem.InputGooglePubsub.Metadata {
					var metadata35 tfTypes.InputGooglePubsubMetadata
					metadata35.Name = types.StringValue(metadataItem17.Name)
					metadata35.Value = types.StringValue(metadataItem17.Value)
					if metadataCount17+1 > len(items1.InputGooglePubsub.Metadata) {
						items1.InputGooglePubsub.Metadata = append(items1.InputGooglePubsub.Metadata, metadata35)
					} else {
						items1.InputGooglePubsub.Metadata[metadataCount17].Name = metadata35.Name
						items1.InputGooglePubsub.Metadata[metadataCount17].Value = metadata35.Value
					}
				}
				items1.InputGooglePubsub.OrderedDelivery = types.BoolPointerValue(itemsItem.InputGooglePubsub.OrderedDelivery)
				items1.InputGooglePubsub.Pipeline = types.StringPointerValue(itemsItem.InputGooglePubsub.Pipeline)
				if itemsItem.InputGooglePubsub.Pq == nil {
					items1.InputGooglePubsub.Pq = nil
				} else {
					items1.InputGooglePubsub.Pq = &tfTypes.InputGooglePubsubPq{}
					if itemsItem.InputGooglePubsub.Pq.CommitFrequency != nil {
						items1.InputGooglePubsub.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGooglePubsub.Pq.CommitFrequency)))
					} else {
						items1.InputGooglePubsub.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputGooglePubsub.Pq.Compress != nil {
						items1.InputGooglePubsub.Pq.Compress = types.StringValue(string(*itemsItem.InputGooglePubsub.Pq.Compress))
					} else {
						items1.InputGooglePubsub.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputGooglePubsub.Pq.MaxBufferSize != nil {
						items1.InputGooglePubsub.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGooglePubsub.Pq.MaxBufferSize)))
					} else {
						items1.InputGooglePubsub.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputGooglePubsub.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputGooglePubsub.Pq.MaxFileSize)
					items1.InputGooglePubsub.Pq.MaxSize = types.StringPointerValue(itemsItem.InputGooglePubsub.Pq.MaxSize)
					if itemsItem.InputGooglePubsub.Pq.Mode != nil {
						items1.InputGooglePubsub.Pq.Mode = types.StringValue(string(*itemsItem.InputGooglePubsub.Pq.Mode))
					} else {
						items1.InputGooglePubsub.Pq.Mode = types.StringNull()
					}
					items1.InputGooglePubsub.Pq.Path = types.StringPointerValue(itemsItem.InputGooglePubsub.Pq.Path)
				}
				items1.InputGooglePubsub.PqEnabled = types.BoolPointerValue(itemsItem.InputGooglePubsub.PqEnabled)
				items1.InputGooglePubsub.Region = types.StringPointerValue(itemsItem.InputGooglePubsub.Region)
				if itemsItem.InputGooglePubsub.RequestTimeout != nil {
					items1.InputGooglePubsub.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGooglePubsub.RequestTimeout)))
				} else {
					items1.InputGooglePubsub.RequestTimeout = types.NumberNull()
				}
				items1.InputGooglePubsub.Secret = types.StringPointerValue(itemsItem.InputGooglePubsub.Secret)
				items1.InputGooglePubsub.SendToRoutes = types.BoolPointerValue(itemsItem.InputGooglePubsub.SendToRoutes)
				items1.InputGooglePubsub.ServiceAccountCredentials = types.StringPointerValue(itemsItem.InputGooglePubsub.ServiceAccountCredentials)
				items1.InputGooglePubsub.Streamtags = make([]types.String, 0, len(itemsItem.InputGooglePubsub.Streamtags))
				for _, v := range itemsItem.InputGooglePubsub.Streamtags {
					items1.InputGooglePubsub.Streamtags = append(items1.InputGooglePubsub.Streamtags, types.StringValue(v))
				}
				items1.InputGooglePubsub.SubscriptionName = types.StringValue(itemsItem.InputGooglePubsub.SubscriptionName)
				items1.InputGooglePubsub.TopicName = types.StringValue(itemsItem.InputGooglePubsub.TopicName)
				if itemsItem.InputGooglePubsub.Type != nil {
					items1.InputGooglePubsub.Type = types.StringValue(string(*itemsItem.InputGooglePubsub.Type))
				} else {
					items1.InputGooglePubsub.Type = types.StringNull()
				}
			}
			if itemsItem.InputGrafana != nil {
				items1.InputGrafana = &tfTypes.InputGrafana{}
				if itemsItem.InputGrafana.InputGrafana1 != nil {
					items1.InputGrafana.One = &tfTypes.InputGrafana1{}
					if itemsItem.InputGrafana.InputGrafana1.ActivityLogSampleRate != nil {
						items1.InputGrafana.One.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana1.ActivityLogSampleRate)))
					} else {
						items1.InputGrafana.One.ActivityLogSampleRate = types.NumberNull()
					}
					items1.InputGrafana.One.CaptureHeaders = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana1.CaptureHeaders)
					items1.InputGrafana.One.Connections = []tfTypes.InputGrafanaConnections{}
					for connectionsCount18, connectionsItem18 := range itemsItem.InputGrafana.InputGrafana1.Connections {
						var connections37 tfTypes.InputGrafanaConnections
						connections37.Output = types.StringValue(connectionsItem18.Output)
						connections37.Pipeline = types.StringPointerValue(connectionsItem18.Pipeline)
						if connectionsCount18+1 > len(items1.InputGrafana.One.Connections) {
							items1.InputGrafana.One.Connections = append(items1.InputGrafana.One.Connections, connections37)
						} else {
							items1.InputGrafana.One.Connections[connectionsCount18].Output = connections37.Output
							items1.InputGrafana.One.Connections[connectionsCount18].Pipeline = connections37.Pipeline
						}
					}
					items1.InputGrafana.One.Description = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.Description)
					items1.InputGrafana.One.Disabled = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana1.Disabled)
					items1.InputGrafana.One.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana1.EnableHealthCheck)
					items1.InputGrafana.One.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana1.EnableProxyHeader)
					items1.InputGrafana.One.Environment = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.Environment)
					items1.InputGrafana.One.Host = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.Host)
					items1.InputGrafana.One.ID = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.ID)
					items1.InputGrafana.One.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.IPAllowlistRegex)
					items1.InputGrafana.One.IPDenylistRegex = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.IPDenylistRegex)
					if itemsItem.InputGrafana.InputGrafana1.KeepAliveTimeout != nil {
						items1.InputGrafana.One.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana1.KeepAliveTimeout)))
					} else {
						items1.InputGrafana.One.KeepAliveTimeout = types.NumberNull()
					}
					items1.InputGrafana.One.LokiAPI = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAPI)
					if itemsItem.InputGrafana.InputGrafana1.LokiAuth == nil {
						items1.InputGrafana.One.LokiAuth = nil
					} else {
						items1.InputGrafana.One.LokiAuth = &tfTypes.LokiAuth{}
						items1.InputGrafana.One.LokiAuth.AuthHeaderExpr = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAuth.AuthHeaderExpr)
						if itemsItem.InputGrafana.InputGrafana1.LokiAuth.AuthType != nil {
							items1.InputGrafana.One.LokiAuth.AuthType = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana1.LokiAuth.AuthType))
						} else {
							items1.InputGrafana.One.LokiAuth.AuthType = types.StringNull()
						}
						items1.InputGrafana.One.LokiAuth.CredentialsSecret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAuth.CredentialsSecret)
						items1.InputGrafana.One.LokiAuth.LoginURL = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAuth.LoginURL)
						items1.InputGrafana.One.LokiAuth.OauthHeaders = []tfTypes.InputGrafana1OauthHeaders{}
						for oauthHeadersCount, oauthHeadersItem := range itemsItem.InputGrafana.InputGrafana1.LokiAuth.OauthHeaders {
							var oauthHeaders1 tfTypes.InputGrafana1OauthHeaders
							oauthHeaders1.Name = types.StringValue(oauthHeadersItem.Name)
							oauthHeaders1.Value = types.StringValue(oauthHeadersItem.Value)
							if oauthHeadersCount+1 > len(items1.InputGrafana.One.LokiAuth.OauthHeaders) {
								items1.InputGrafana.One.LokiAuth.OauthHeaders = append(items1.InputGrafana.One.LokiAuth.OauthHeaders, oauthHeaders1)
							} else {
								items1.InputGrafana.One.LokiAuth.OauthHeaders[oauthHeadersCount].Name = oauthHeaders1.Name
								items1.InputGrafana.One.LokiAuth.OauthHeaders[oauthHeadersCount].Value = oauthHeaders1.Value
							}
						}
						items1.InputGrafana.One.LokiAuth.OauthParams = []tfTypes.InputGrafana1OauthParams{}
						for oauthParamsCount, oauthParamsItem := range itemsItem.InputGrafana.InputGrafana1.LokiAuth.OauthParams {
							var oauthParams1 tfTypes.InputGrafana1OauthParams
							oauthParams1.Name = types.StringValue(oauthParamsItem.Name)
							oauthParams1.Value = types.StringValue(oauthParamsItem.Value)
							if oauthParamsCount+1 > len(items1.InputGrafana.One.LokiAuth.OauthParams) {
								items1.InputGrafana.One.LokiAuth.OauthParams = append(items1.InputGrafana.One.LokiAuth.OauthParams, oauthParams1)
							} else {
								items1.InputGrafana.One.LokiAuth.OauthParams[oauthParamsCount].Name = oauthParams1.Name
								items1.InputGrafana.One.LokiAuth.OauthParams[oauthParamsCount].Value = oauthParams1.Value
							}
						}
						items1.InputGrafana.One.LokiAuth.Password = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAuth.Password)
						items1.InputGrafana.One.LokiAuth.Secret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAuth.Secret)
						items1.InputGrafana.One.LokiAuth.SecretParamName = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAuth.SecretParamName)
						items1.InputGrafana.One.LokiAuth.TextSecret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAuth.TextSecret)
						items1.InputGrafana.One.LokiAuth.Token = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAuth.Token)
						items1.InputGrafana.One.LokiAuth.TokenAttributeName = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAuth.TokenAttributeName)
						if itemsItem.InputGrafana.InputGrafana1.LokiAuth.TokenTimeoutSecs != nil {
							items1.InputGrafana.One.LokiAuth.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana1.LokiAuth.TokenTimeoutSecs)))
						} else {
							items1.InputGrafana.One.LokiAuth.TokenTimeoutSecs = types.NumberNull()
						}
						items1.InputGrafana.One.LokiAuth.Username = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.LokiAuth.Username)
					}
					if itemsItem.InputGrafana.InputGrafana1.MaxActiveReq != nil {
						items1.InputGrafana.One.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana1.MaxActiveReq)))
					} else {
						items1.InputGrafana.One.MaxActiveReq = types.NumberNull()
					}
					items1.InputGrafana.One.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputGrafana.InputGrafana1.MaxRequestsPerSocket)
					items1.InputGrafana.One.Metadata = []tfTypes.InputGrafanaMetadata{}
					for metadataCount18, metadataItem18 := range itemsItem.InputGrafana.InputGrafana1.Metadata {
						var metadata37 tfTypes.InputGrafanaMetadata
						metadata37.Name = types.StringValue(metadataItem18.Name)
						metadata37.Value = types.StringValue(metadataItem18.Value)
						if metadataCount18+1 > len(items1.InputGrafana.One.Metadata) {
							items1.InputGrafana.One.Metadata = append(items1.InputGrafana.One.Metadata, metadata37)
						} else {
							items1.InputGrafana.One.Metadata[metadataCount18].Name = metadata37.Name
							items1.InputGrafana.One.Metadata[metadataCount18].Value = metadata37.Value
						}
					}
					items1.InputGrafana.One.Pipeline = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.Pipeline)
					items1.InputGrafana.One.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputGrafana.InputGrafana1.Port)))
					if itemsItem.InputGrafana.InputGrafana1.Pq == nil {
						items1.InputGrafana.One.Pq = nil
					} else {
						items1.InputGrafana.One.Pq = &tfTypes.InputGrafanaPq{}
						if itemsItem.InputGrafana.InputGrafana1.Pq.CommitFrequency != nil {
							items1.InputGrafana.One.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana1.Pq.CommitFrequency)))
						} else {
							items1.InputGrafana.One.Pq.CommitFrequency = types.NumberNull()
						}
						if itemsItem.InputGrafana.InputGrafana1.Pq.Compress != nil {
							items1.InputGrafana.One.Pq.Compress = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana1.Pq.Compress))
						} else {
							items1.InputGrafana.One.Pq.Compress = types.StringNull()
						}
						if itemsItem.InputGrafana.InputGrafana1.Pq.MaxBufferSize != nil {
							items1.InputGrafana.One.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana1.Pq.MaxBufferSize)))
						} else {
							items1.InputGrafana.One.Pq.MaxBufferSize = types.NumberNull()
						}
						items1.InputGrafana.One.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.Pq.MaxFileSize)
						items1.InputGrafana.One.Pq.MaxSize = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.Pq.MaxSize)
						if itemsItem.InputGrafana.InputGrafana1.Pq.Mode != nil {
							items1.InputGrafana.One.Pq.Mode = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana1.Pq.Mode))
						} else {
							items1.InputGrafana.One.Pq.Mode = types.StringNull()
						}
						items1.InputGrafana.One.Pq.Path = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.Pq.Path)
					}
					items1.InputGrafana.One.PqEnabled = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana1.PqEnabled)
					items1.InputGrafana.One.PrometheusAPI = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAPI)
					if itemsItem.InputGrafana.InputGrafana1.PrometheusAuth == nil {
						items1.InputGrafana.One.PrometheusAuth = nil
					} else {
						items1.InputGrafana.One.PrometheusAuth = &tfTypes.PrometheusAuth{}
						items1.InputGrafana.One.PrometheusAuth.AuthHeaderExpr = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.AuthHeaderExpr)
						if itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.AuthType != nil {
							items1.InputGrafana.One.PrometheusAuth.AuthType = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.AuthType))
						} else {
							items1.InputGrafana.One.PrometheusAuth.AuthType = types.StringNull()
						}
						items1.InputGrafana.One.PrometheusAuth.CredentialsSecret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.CredentialsSecret)
						items1.InputGrafana.One.PrometheusAuth.LoginURL = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.LoginURL)
						items1.InputGrafana.One.PrometheusAuth.OauthHeaders = []tfTypes.InputGrafanaOauthHeaders{}
						for oauthHeadersCount1, oauthHeadersItem1 := range itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.OauthHeaders {
							var oauthHeaders3 tfTypes.InputGrafanaOauthHeaders
							oauthHeaders3.Name = types.StringValue(oauthHeadersItem1.Name)
							oauthHeaders3.Value = types.StringValue(oauthHeadersItem1.Value)
							if oauthHeadersCount1+1 > len(items1.InputGrafana.One.PrometheusAuth.OauthHeaders) {
								items1.InputGrafana.One.PrometheusAuth.OauthHeaders = append(items1.InputGrafana.One.PrometheusAuth.OauthHeaders, oauthHeaders3)
							} else {
								items1.InputGrafana.One.PrometheusAuth.OauthHeaders[oauthHeadersCount1].Name = oauthHeaders3.Name
								items1.InputGrafana.One.PrometheusAuth.OauthHeaders[oauthHeadersCount1].Value = oauthHeaders3.Value
							}
						}
						items1.InputGrafana.One.PrometheusAuth.OauthParams = []tfTypes.InputGrafanaOauthParams{}
						for oauthParamsCount1, oauthParamsItem1 := range itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.OauthParams {
							var oauthParams3 tfTypes.InputGrafanaOauthParams
							oauthParams3.Name = types.StringValue(oauthParamsItem1.Name)
							oauthParams3.Value = types.StringValue(oauthParamsItem1.Value)
							if oauthParamsCount1+1 > len(items1.InputGrafana.One.PrometheusAuth.OauthParams) {
								items1.InputGrafana.One.PrometheusAuth.OauthParams = append(items1.InputGrafana.One.PrometheusAuth.OauthParams, oauthParams3)
							} else {
								items1.InputGrafana.One.PrometheusAuth.OauthParams[oauthParamsCount1].Name = oauthParams3.Name
								items1.InputGrafana.One.PrometheusAuth.OauthParams[oauthParamsCount1].Value = oauthParams3.Value
							}
						}
						items1.InputGrafana.One.PrometheusAuth.Password = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.Password)
						items1.InputGrafana.One.PrometheusAuth.Secret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.Secret)
						items1.InputGrafana.One.PrometheusAuth.SecretParamName = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.SecretParamName)
						items1.InputGrafana.One.PrometheusAuth.TextSecret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.TextSecret)
						items1.InputGrafana.One.PrometheusAuth.Token = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.Token)
						items1.InputGrafana.One.PrometheusAuth.TokenAttributeName = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.TokenAttributeName)
						if itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.TokenTimeoutSecs != nil {
							items1.InputGrafana.One.PrometheusAuth.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.TokenTimeoutSecs)))
						} else {
							items1.InputGrafana.One.PrometheusAuth.TokenTimeoutSecs = types.NumberNull()
						}
						items1.InputGrafana.One.PrometheusAuth.Username = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.PrometheusAuth.Username)
					}
					if itemsItem.InputGrafana.InputGrafana1.RequestTimeout != nil {
						items1.InputGrafana.One.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana1.RequestTimeout)))
					} else {
						items1.InputGrafana.One.RequestTimeout = types.NumberNull()
					}
					items1.InputGrafana.One.SendToRoutes = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana1.SendToRoutes)
					if itemsItem.InputGrafana.InputGrafana1.SocketTimeout != nil {
						items1.InputGrafana.One.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana1.SocketTimeout)))
					} else {
						items1.InputGrafana.One.SocketTimeout = types.NumberNull()
					}
					items1.InputGrafana.One.Streamtags = make([]types.String, 0, len(itemsItem.InputGrafana.InputGrafana1.Streamtags))
					for _, v := range itemsItem.InputGrafana.InputGrafana1.Streamtags {
						items1.InputGrafana.One.Streamtags = append(items1.InputGrafana.One.Streamtags, types.StringValue(v))
					}
					if itemsItem.InputGrafana.InputGrafana1.TLS == nil {
						items1.InputGrafana.One.TLS = nil
					} else {
						items1.InputGrafana.One.TLS = &tfTypes.InputGrafanaTLSSettingsServerSide{}
						items1.InputGrafana.One.TLS.CaPath = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.TLS.CaPath)
						items1.InputGrafana.One.TLS.CertificateName = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.TLS.CertificateName)
						items1.InputGrafana.One.TLS.CertPath = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.TLS.CertPath)
						if itemsItem.InputGrafana.InputGrafana1.TLS.CommonNameRegex == nil {
							items1.InputGrafana.One.TLS.CommonNameRegex = types.StringNull()
						} else {
							commonNameRegexResult6, _ := json.Marshal(itemsItem.InputGrafana.InputGrafana1.TLS.CommonNameRegex)
							items1.InputGrafana.One.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult6))
						}
						items1.InputGrafana.One.TLS.Disabled = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana1.TLS.Disabled)
						if itemsItem.InputGrafana.InputGrafana1.TLS.MaxVersion != nil {
							items1.InputGrafana.One.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana1.TLS.MaxVersion))
						} else {
							items1.InputGrafana.One.TLS.MaxVersion = types.StringNull()
						}
						if itemsItem.InputGrafana.InputGrafana1.TLS.MinVersion != nil {
							items1.InputGrafana.One.TLS.MinVersion = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana1.TLS.MinVersion))
						} else {
							items1.InputGrafana.One.TLS.MinVersion = types.StringNull()
						}
						items1.InputGrafana.One.TLS.Passphrase = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.TLS.Passphrase)
						items1.InputGrafana.One.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana1.TLS.PrivKeyPath)
						if itemsItem.InputGrafana.InputGrafana1.TLS.RejectUnauthorized == nil {
							items1.InputGrafana.One.TLS.RejectUnauthorized = types.StringNull()
						} else {
							rejectUnauthorizedResult6, _ := json.Marshal(itemsItem.InputGrafana.InputGrafana1.TLS.RejectUnauthorized)
							items1.InputGrafana.One.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult6))
						}
						items1.InputGrafana.One.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana1.TLS.RequestCert)
					}
					if itemsItem.InputGrafana.InputGrafana1.Type != nil {
						items1.InputGrafana.One.Type = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana1.Type))
					} else {
						items1.InputGrafana.One.Type = types.StringNull()
					}
				}
				if itemsItem.InputGrafana.InputGrafana2 != nil {
					items1.InputGrafana.Two = &tfTypes.InputGrafana2{}
					if itemsItem.InputGrafana.InputGrafana2.ActivityLogSampleRate != nil {
						items1.InputGrafana.Two.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana2.ActivityLogSampleRate)))
					} else {
						items1.InputGrafana.Two.ActivityLogSampleRate = types.NumberNull()
					}
					items1.InputGrafana.Two.CaptureHeaders = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana2.CaptureHeaders)
					items1.InputGrafana.Two.Connections = []tfTypes.InputGrafana2Connections{}
					for connectionsCount19, connectionsItem19 := range itemsItem.InputGrafana.InputGrafana2.Connections {
						var connections39 tfTypes.InputGrafana2Connections
						connections39.Output = types.StringValue(connectionsItem19.Output)
						connections39.Pipeline = types.StringPointerValue(connectionsItem19.Pipeline)
						if connectionsCount19+1 > len(items1.InputGrafana.Two.Connections) {
							items1.InputGrafana.Two.Connections = append(items1.InputGrafana.Two.Connections, connections39)
						} else {
							items1.InputGrafana.Two.Connections[connectionsCount19].Output = connections39.Output
							items1.InputGrafana.Two.Connections[connectionsCount19].Pipeline = connections39.Pipeline
						}
					}
					items1.InputGrafana.Two.Description = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.Description)
					items1.InputGrafana.Two.Disabled = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana2.Disabled)
					items1.InputGrafana.Two.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana2.EnableHealthCheck)
					items1.InputGrafana.Two.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana2.EnableProxyHeader)
					items1.InputGrafana.Two.Environment = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.Environment)
					items1.InputGrafana.Two.Host = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.Host)
					items1.InputGrafana.Two.ID = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.ID)
					items1.InputGrafana.Two.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.IPAllowlistRegex)
					items1.InputGrafana.Two.IPDenylistRegex = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.IPDenylistRegex)
					if itemsItem.InputGrafana.InputGrafana2.KeepAliveTimeout != nil {
						items1.InputGrafana.Two.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana2.KeepAliveTimeout)))
					} else {
						items1.InputGrafana.Two.KeepAliveTimeout = types.NumberNull()
					}
					items1.InputGrafana.Two.LokiAPI = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAPI)
					if itemsItem.InputGrafana.InputGrafana2.LokiAuth == nil {
						items1.InputGrafana.Two.LokiAuth = nil
					} else {
						items1.InputGrafana.Two.LokiAuth = &tfTypes.InputGrafanaLokiAuth{}
						items1.InputGrafana.Two.LokiAuth.AuthHeaderExpr = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAuth.AuthHeaderExpr)
						if itemsItem.InputGrafana.InputGrafana2.LokiAuth.AuthType != nil {
							items1.InputGrafana.Two.LokiAuth.AuthType = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana2.LokiAuth.AuthType))
						} else {
							items1.InputGrafana.Two.LokiAuth.AuthType = types.StringNull()
						}
						items1.InputGrafana.Two.LokiAuth.CredentialsSecret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAuth.CredentialsSecret)
						items1.InputGrafana.Two.LokiAuth.LoginURL = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAuth.LoginURL)
						items1.InputGrafana.Two.LokiAuth.OauthHeaders = []tfTypes.InputGrafana2LokiAuthOauthHeaders{}
						for oauthHeadersCount2, oauthHeadersItem2 := range itemsItem.InputGrafana.InputGrafana2.LokiAuth.OauthHeaders {
							var oauthHeaders5 tfTypes.InputGrafana2LokiAuthOauthHeaders
							oauthHeaders5.Name = types.StringValue(oauthHeadersItem2.Name)
							oauthHeaders5.Value = types.StringValue(oauthHeadersItem2.Value)
							if oauthHeadersCount2+1 > len(items1.InputGrafana.Two.LokiAuth.OauthHeaders) {
								items1.InputGrafana.Two.LokiAuth.OauthHeaders = append(items1.InputGrafana.Two.LokiAuth.OauthHeaders, oauthHeaders5)
							} else {
								items1.InputGrafana.Two.LokiAuth.OauthHeaders[oauthHeadersCount2].Name = oauthHeaders5.Name
								items1.InputGrafana.Two.LokiAuth.OauthHeaders[oauthHeadersCount2].Value = oauthHeaders5.Value
							}
						}
						items1.InputGrafana.Two.LokiAuth.OauthParams = []tfTypes.InputGrafana2LokiAuthOauthParams{}
						for oauthParamsCount2, oauthParamsItem2 := range itemsItem.InputGrafana.InputGrafana2.LokiAuth.OauthParams {
							var oauthParams5 tfTypes.InputGrafana2LokiAuthOauthParams
							oauthParams5.Name = types.StringValue(oauthParamsItem2.Name)
							oauthParams5.Value = types.StringValue(oauthParamsItem2.Value)
							if oauthParamsCount2+1 > len(items1.InputGrafana.Two.LokiAuth.OauthParams) {
								items1.InputGrafana.Two.LokiAuth.OauthParams = append(items1.InputGrafana.Two.LokiAuth.OauthParams, oauthParams5)
							} else {
								items1.InputGrafana.Two.LokiAuth.OauthParams[oauthParamsCount2].Name = oauthParams5.Name
								items1.InputGrafana.Two.LokiAuth.OauthParams[oauthParamsCount2].Value = oauthParams5.Value
							}
						}
						items1.InputGrafana.Two.LokiAuth.Password = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAuth.Password)
						items1.InputGrafana.Two.LokiAuth.Secret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAuth.Secret)
						items1.InputGrafana.Two.LokiAuth.SecretParamName = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAuth.SecretParamName)
						items1.InputGrafana.Two.LokiAuth.TextSecret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAuth.TextSecret)
						items1.InputGrafana.Two.LokiAuth.Token = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAuth.Token)
						items1.InputGrafana.Two.LokiAuth.TokenAttributeName = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAuth.TokenAttributeName)
						if itemsItem.InputGrafana.InputGrafana2.LokiAuth.TokenTimeoutSecs != nil {
							items1.InputGrafana.Two.LokiAuth.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana2.LokiAuth.TokenTimeoutSecs)))
						} else {
							items1.InputGrafana.Two.LokiAuth.TokenTimeoutSecs = types.NumberNull()
						}
						items1.InputGrafana.Two.LokiAuth.Username = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.LokiAuth.Username)
					}
					if itemsItem.InputGrafana.InputGrafana2.MaxActiveReq != nil {
						items1.InputGrafana.Two.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana2.MaxActiveReq)))
					} else {
						items1.InputGrafana.Two.MaxActiveReq = types.NumberNull()
					}
					items1.InputGrafana.Two.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputGrafana.InputGrafana2.MaxRequestsPerSocket)
					items1.InputGrafana.Two.Metadata = []tfTypes.InputGrafana2Metadata{}
					for metadataCount19, metadataItem19 := range itemsItem.InputGrafana.InputGrafana2.Metadata {
						var metadata39 tfTypes.InputGrafana2Metadata
						metadata39.Name = types.StringValue(metadataItem19.Name)
						metadata39.Value = types.StringValue(metadataItem19.Value)
						if metadataCount19+1 > len(items1.InputGrafana.Two.Metadata) {
							items1.InputGrafana.Two.Metadata = append(items1.InputGrafana.Two.Metadata, metadata39)
						} else {
							items1.InputGrafana.Two.Metadata[metadataCount19].Name = metadata39.Name
							items1.InputGrafana.Two.Metadata[metadataCount19].Value = metadata39.Value
						}
					}
					items1.InputGrafana.Two.Pipeline = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.Pipeline)
					items1.InputGrafana.Two.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputGrafana.InputGrafana2.Port)))
					if itemsItem.InputGrafana.InputGrafana2.Pq == nil {
						items1.InputGrafana.Two.Pq = nil
					} else {
						items1.InputGrafana.Two.Pq = &tfTypes.InputGrafana2Pq{}
						if itemsItem.InputGrafana.InputGrafana2.Pq.CommitFrequency != nil {
							items1.InputGrafana.Two.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana2.Pq.CommitFrequency)))
						} else {
							items1.InputGrafana.Two.Pq.CommitFrequency = types.NumberNull()
						}
						if itemsItem.InputGrafana.InputGrafana2.Pq.Compress != nil {
							items1.InputGrafana.Two.Pq.Compress = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana2.Pq.Compress))
						} else {
							items1.InputGrafana.Two.Pq.Compress = types.StringNull()
						}
						if itemsItem.InputGrafana.InputGrafana2.Pq.MaxBufferSize != nil {
							items1.InputGrafana.Two.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana2.Pq.MaxBufferSize)))
						} else {
							items1.InputGrafana.Two.Pq.MaxBufferSize = types.NumberNull()
						}
						items1.InputGrafana.Two.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.Pq.MaxFileSize)
						items1.InputGrafana.Two.Pq.MaxSize = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.Pq.MaxSize)
						if itemsItem.InputGrafana.InputGrafana2.Pq.Mode != nil {
							items1.InputGrafana.Two.Pq.Mode = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana2.Pq.Mode))
						} else {
							items1.InputGrafana.Two.Pq.Mode = types.StringNull()
						}
						items1.InputGrafana.Two.Pq.Path = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.Pq.Path)
					}
					items1.InputGrafana.Two.PqEnabled = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana2.PqEnabled)
					items1.InputGrafana.Two.PrometheusAPI = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAPI)
					if itemsItem.InputGrafana.InputGrafana2.PrometheusAuth == nil {
						items1.InputGrafana.Two.PrometheusAuth = nil
					} else {
						items1.InputGrafana.Two.PrometheusAuth = &tfTypes.InputGrafanaPrometheusAuth{}
						items1.InputGrafana.Two.PrometheusAuth.AuthHeaderExpr = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.AuthHeaderExpr)
						if itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.AuthType != nil {
							items1.InputGrafana.Two.PrometheusAuth.AuthType = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.AuthType))
						} else {
							items1.InputGrafana.Two.PrometheusAuth.AuthType = types.StringNull()
						}
						items1.InputGrafana.Two.PrometheusAuth.CredentialsSecret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.CredentialsSecret)
						items1.InputGrafana.Two.PrometheusAuth.LoginURL = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.LoginURL)
						items1.InputGrafana.Two.PrometheusAuth.OauthHeaders = []tfTypes.InputGrafana2OauthHeaders{}
						for oauthHeadersCount3, oauthHeadersItem3 := range itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.OauthHeaders {
							var oauthHeaders7 tfTypes.InputGrafana2OauthHeaders
							oauthHeaders7.Name = types.StringValue(oauthHeadersItem3.Name)
							oauthHeaders7.Value = types.StringValue(oauthHeadersItem3.Value)
							if oauthHeadersCount3+1 > len(items1.InputGrafana.Two.PrometheusAuth.OauthHeaders) {
								items1.InputGrafana.Two.PrometheusAuth.OauthHeaders = append(items1.InputGrafana.Two.PrometheusAuth.OauthHeaders, oauthHeaders7)
							} else {
								items1.InputGrafana.Two.PrometheusAuth.OauthHeaders[oauthHeadersCount3].Name = oauthHeaders7.Name
								items1.InputGrafana.Two.PrometheusAuth.OauthHeaders[oauthHeadersCount3].Value = oauthHeaders7.Value
							}
						}
						items1.InputGrafana.Two.PrometheusAuth.OauthParams = []tfTypes.InputGrafana2OauthParams{}
						for oauthParamsCount3, oauthParamsItem3 := range itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.OauthParams {
							var oauthParams7 tfTypes.InputGrafana2OauthParams
							oauthParams7.Name = types.StringValue(oauthParamsItem3.Name)
							oauthParams7.Value = types.StringValue(oauthParamsItem3.Value)
							if oauthParamsCount3+1 > len(items1.InputGrafana.Two.PrometheusAuth.OauthParams) {
								items1.InputGrafana.Two.PrometheusAuth.OauthParams = append(items1.InputGrafana.Two.PrometheusAuth.OauthParams, oauthParams7)
							} else {
								items1.InputGrafana.Two.PrometheusAuth.OauthParams[oauthParamsCount3].Name = oauthParams7.Name
								items1.InputGrafana.Two.PrometheusAuth.OauthParams[oauthParamsCount3].Value = oauthParams7.Value
							}
						}
						items1.InputGrafana.Two.PrometheusAuth.Password = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.Password)
						items1.InputGrafana.Two.PrometheusAuth.Secret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.Secret)
						items1.InputGrafana.Two.PrometheusAuth.SecretParamName = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.SecretParamName)
						items1.InputGrafana.Two.PrometheusAuth.TextSecret = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.TextSecret)
						items1.InputGrafana.Two.PrometheusAuth.Token = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.Token)
						items1.InputGrafana.Two.PrometheusAuth.TokenAttributeName = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.TokenAttributeName)
						if itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.TokenTimeoutSecs != nil {
							items1.InputGrafana.Two.PrometheusAuth.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.TokenTimeoutSecs)))
						} else {
							items1.InputGrafana.Two.PrometheusAuth.TokenTimeoutSecs = types.NumberNull()
						}
						items1.InputGrafana.Two.PrometheusAuth.Username = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.PrometheusAuth.Username)
					}
					if itemsItem.InputGrafana.InputGrafana2.RequestTimeout != nil {
						items1.InputGrafana.Two.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana2.RequestTimeout)))
					} else {
						items1.InputGrafana.Two.RequestTimeout = types.NumberNull()
					}
					items1.InputGrafana.Two.SendToRoutes = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana2.SendToRoutes)
					if itemsItem.InputGrafana.InputGrafana2.SocketTimeout != nil {
						items1.InputGrafana.Two.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputGrafana.InputGrafana2.SocketTimeout)))
					} else {
						items1.InputGrafana.Two.SocketTimeout = types.NumberNull()
					}
					items1.InputGrafana.Two.Streamtags = make([]types.String, 0, len(itemsItem.InputGrafana.InputGrafana2.Streamtags))
					for _, v := range itemsItem.InputGrafana.InputGrafana2.Streamtags {
						items1.InputGrafana.Two.Streamtags = append(items1.InputGrafana.Two.Streamtags, types.StringValue(v))
					}
					if itemsItem.InputGrafana.InputGrafana2.TLS == nil {
						items1.InputGrafana.Two.TLS = nil
					} else {
						items1.InputGrafana.Two.TLS = &tfTypes.InputGrafana2TLSSettingsServerSide{}
						items1.InputGrafana.Two.TLS.CaPath = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.TLS.CaPath)
						items1.InputGrafana.Two.TLS.CertificateName = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.TLS.CertificateName)
						items1.InputGrafana.Two.TLS.CertPath = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.TLS.CertPath)
						if itemsItem.InputGrafana.InputGrafana2.TLS.CommonNameRegex == nil {
							items1.InputGrafana.Two.TLS.CommonNameRegex = types.StringNull()
						} else {
							commonNameRegexResult7, _ := json.Marshal(itemsItem.InputGrafana.InputGrafana2.TLS.CommonNameRegex)
							items1.InputGrafana.Two.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult7))
						}
						items1.InputGrafana.Two.TLS.Disabled = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana2.TLS.Disabled)
						if itemsItem.InputGrafana.InputGrafana2.TLS.MaxVersion != nil {
							items1.InputGrafana.Two.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana2.TLS.MaxVersion))
						} else {
							items1.InputGrafana.Two.TLS.MaxVersion = types.StringNull()
						}
						if itemsItem.InputGrafana.InputGrafana2.TLS.MinVersion != nil {
							items1.InputGrafana.Two.TLS.MinVersion = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana2.TLS.MinVersion))
						} else {
							items1.InputGrafana.Two.TLS.MinVersion = types.StringNull()
						}
						items1.InputGrafana.Two.TLS.Passphrase = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.TLS.Passphrase)
						items1.InputGrafana.Two.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputGrafana.InputGrafana2.TLS.PrivKeyPath)
						if itemsItem.InputGrafana.InputGrafana2.TLS.RejectUnauthorized == nil {
							items1.InputGrafana.Two.TLS.RejectUnauthorized = types.StringNull()
						} else {
							rejectUnauthorizedResult7, _ := json.Marshal(itemsItem.InputGrafana.InputGrafana2.TLS.RejectUnauthorized)
							items1.InputGrafana.Two.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult7))
						}
						items1.InputGrafana.Two.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputGrafana.InputGrafana2.TLS.RequestCert)
					}
					if itemsItem.InputGrafana.InputGrafana2.Type != nil {
						items1.InputGrafana.Two.Type = types.StringValue(string(*itemsItem.InputGrafana.InputGrafana2.Type))
					} else {
						items1.InputGrafana.Two.Type = types.StringNull()
					}
				}
			}
			if itemsItem.InputHTTP != nil {
				items1.InputHTTP = &tfTypes.InputHTTP{}
				if itemsItem.InputHTTP.ActivityLogSampleRate != nil {
					items1.InputHTTP.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTP.ActivityLogSampleRate)))
				} else {
					items1.InputHTTP.ActivityLogSampleRate = types.NumberNull()
				}
				items1.InputHTTP.AuthTokens = make([]types.String, 0, len(itemsItem.InputHTTP.AuthTokens))
				for _, v := range itemsItem.InputHTTP.AuthTokens {
					items1.InputHTTP.AuthTokens = append(items1.InputHTTP.AuthTokens, types.StringValue(v))
				}
				items1.InputHTTP.AuthTokensExt = []tfTypes.AuthTokensExt{}
				for authTokensExtCount, authTokensExtItem := range itemsItem.InputHTTP.AuthTokensExt {
					var authTokensExt1 tfTypes.AuthTokensExt
					authTokensExt1.Description = types.StringPointerValue(authTokensExtItem.Description)
					authTokensExt1.Metadata = []tfTypes.InputHTTPAuthTokensExtMetadata{}
					for metadataCount20, metadataItem20 := range authTokensExtItem.Metadata {
						var metadata41 tfTypes.InputHTTPAuthTokensExtMetadata
						metadata41.Name = types.StringValue(metadataItem20.Name)
						metadata41.Value = types.StringValue(metadataItem20.Value)
						if metadataCount20+1 > len(authTokensExt1.Metadata) {
							authTokensExt1.Metadata = append(authTokensExt1.Metadata, metadata41)
						} else {
							authTokensExt1.Metadata[metadataCount20].Name = metadata41.Name
							authTokensExt1.Metadata[metadataCount20].Value = metadata41.Value
						}
					}
					authTokensExt1.Token = types.StringValue(authTokensExtItem.Token)
					if authTokensExtCount+1 > len(items1.InputHTTP.AuthTokensExt) {
						items1.InputHTTP.AuthTokensExt = append(items1.InputHTTP.AuthTokensExt, authTokensExt1)
					} else {
						items1.InputHTTP.AuthTokensExt[authTokensExtCount].Description = authTokensExt1.Description
						items1.InputHTTP.AuthTokensExt[authTokensExtCount].Metadata = authTokensExt1.Metadata
						items1.InputHTTP.AuthTokensExt[authTokensExtCount].Token = authTokensExt1.Token
					}
				}
				items1.InputHTTP.CaptureHeaders = types.BoolPointerValue(itemsItem.InputHTTP.CaptureHeaders)
				items1.InputHTTP.Connections = []tfTypes.InputHTTPConnections{}
				for connectionsCount20, connectionsItem20 := range itemsItem.InputHTTP.Connections {
					var connections41 tfTypes.InputHTTPConnections
					connections41.Output = types.StringValue(connectionsItem20.Output)
					connections41.Pipeline = types.StringPointerValue(connectionsItem20.Pipeline)
					if connectionsCount20+1 > len(items1.InputHTTP.Connections) {
						items1.InputHTTP.Connections = append(items1.InputHTTP.Connections, connections41)
					} else {
						items1.InputHTTP.Connections[connectionsCount20].Output = connections41.Output
						items1.InputHTTP.Connections[connectionsCount20].Pipeline = connections41.Pipeline
					}
				}
				items1.InputHTTP.CriblAPI = types.StringPointerValue(itemsItem.InputHTTP.CriblAPI)
				items1.InputHTTP.Description = types.StringPointerValue(itemsItem.InputHTTP.Description)
				items1.InputHTTP.Disabled = types.BoolPointerValue(itemsItem.InputHTTP.Disabled)
				items1.InputHTTP.ElasticAPI = types.StringPointerValue(itemsItem.InputHTTP.ElasticAPI)
				items1.InputHTTP.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputHTTP.EnableHealthCheck)
				items1.InputHTTP.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputHTTP.EnableProxyHeader)
				items1.InputHTTP.Environment = types.StringPointerValue(itemsItem.InputHTTP.Environment)
				items1.InputHTTP.Host = types.StringPointerValue(itemsItem.InputHTTP.Host)
				items1.InputHTTP.ID = types.StringPointerValue(itemsItem.InputHTTP.ID)
				items1.InputHTTP.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputHTTP.IPAllowlistRegex)
				items1.InputHTTP.IPDenylistRegex = types.StringPointerValue(itemsItem.InputHTTP.IPDenylistRegex)
				if itemsItem.InputHTTP.KeepAliveTimeout != nil {
					items1.InputHTTP.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTP.KeepAliveTimeout)))
				} else {
					items1.InputHTTP.KeepAliveTimeout = types.NumberNull()
				}
				if itemsItem.InputHTTP.MaxActiveReq != nil {
					items1.InputHTTP.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTP.MaxActiveReq)))
				} else {
					items1.InputHTTP.MaxActiveReq = types.NumberNull()
				}
				items1.InputHTTP.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputHTTP.MaxRequestsPerSocket)
				items1.InputHTTP.Metadata = []tfTypes.InputHTTPMetadata{}
				for metadataCount21, metadataItem21 := range itemsItem.InputHTTP.Metadata {
					var metadata43 tfTypes.InputHTTPMetadata
					metadata43.Name = types.StringValue(metadataItem21.Name)
					metadata43.Value = types.StringValue(metadataItem21.Value)
					if metadataCount21+1 > len(items1.InputHTTP.Metadata) {
						items1.InputHTTP.Metadata = append(items1.InputHTTP.Metadata, metadata43)
					} else {
						items1.InputHTTP.Metadata[metadataCount21].Name = metadata43.Name
						items1.InputHTTP.Metadata[metadataCount21].Value = metadata43.Value
					}
				}
				items1.InputHTTP.Pipeline = types.StringPointerValue(itemsItem.InputHTTP.Pipeline)
				items1.InputHTTP.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputHTTP.Port)))
				if itemsItem.InputHTTP.Pq == nil {
					items1.InputHTTP.Pq = nil
				} else {
					items1.InputHTTP.Pq = &tfTypes.InputHTTPPq{}
					if itemsItem.InputHTTP.Pq.CommitFrequency != nil {
						items1.InputHTTP.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTP.Pq.CommitFrequency)))
					} else {
						items1.InputHTTP.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputHTTP.Pq.Compress != nil {
						items1.InputHTTP.Pq.Compress = types.StringValue(string(*itemsItem.InputHTTP.Pq.Compress))
					} else {
						items1.InputHTTP.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputHTTP.Pq.MaxBufferSize != nil {
						items1.InputHTTP.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTP.Pq.MaxBufferSize)))
					} else {
						items1.InputHTTP.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputHTTP.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputHTTP.Pq.MaxFileSize)
					items1.InputHTTP.Pq.MaxSize = types.StringPointerValue(itemsItem.InputHTTP.Pq.MaxSize)
					if itemsItem.InputHTTP.Pq.Mode != nil {
						items1.InputHTTP.Pq.Mode = types.StringValue(string(*itemsItem.InputHTTP.Pq.Mode))
					} else {
						items1.InputHTTP.Pq.Mode = types.StringNull()
					}
					items1.InputHTTP.Pq.Path = types.StringPointerValue(itemsItem.InputHTTP.Pq.Path)
				}
				items1.InputHTTP.PqEnabled = types.BoolPointerValue(itemsItem.InputHTTP.PqEnabled)
				if itemsItem.InputHTTP.RequestTimeout != nil {
					items1.InputHTTP.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTP.RequestTimeout)))
				} else {
					items1.InputHTTP.RequestTimeout = types.NumberNull()
				}
				items1.InputHTTP.SendToRoutes = types.BoolPointerValue(itemsItem.InputHTTP.SendToRoutes)
				if itemsItem.InputHTTP.SocketTimeout != nil {
					items1.InputHTTP.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTP.SocketTimeout)))
				} else {
					items1.InputHTTP.SocketTimeout = types.NumberNull()
				}
				items1.InputHTTP.SplunkHecAcks = types.BoolPointerValue(itemsItem.InputHTTP.SplunkHecAcks)
				items1.InputHTTP.SplunkHecAPI = types.StringPointerValue(itemsItem.InputHTTP.SplunkHecAPI)
				items1.InputHTTP.Streamtags = make([]types.String, 0, len(itemsItem.InputHTTP.Streamtags))
				for _, v := range itemsItem.InputHTTP.Streamtags {
					items1.InputHTTP.Streamtags = append(items1.InputHTTP.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputHTTP.TLS == nil {
					items1.InputHTTP.TLS = nil
				} else {
					items1.InputHTTP.TLS = &tfTypes.TLSSettingsServerSide{}
					items1.InputHTTP.TLS.CaPath = types.StringPointerValue(itemsItem.InputHTTP.TLS.CaPath)
					items1.InputHTTP.TLS.CertificateName = types.StringPointerValue(itemsItem.InputHTTP.TLS.CertificateName)
					items1.InputHTTP.TLS.CertPath = types.StringPointerValue(itemsItem.InputHTTP.TLS.CertPath)
					if itemsItem.InputHTTP.TLS.CommonNameRegex == nil {
						items1.InputHTTP.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult8, _ := json.Marshal(itemsItem.InputHTTP.TLS.CommonNameRegex)
						items1.InputHTTP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult8))
					}
					items1.InputHTTP.TLS.Disabled = types.BoolPointerValue(itemsItem.InputHTTP.TLS.Disabled)
					if itemsItem.InputHTTP.TLS.MaxVersion != nil {
						items1.InputHTTP.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputHTTP.TLS.MaxVersion))
					} else {
						items1.InputHTTP.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputHTTP.TLS.MinVersion != nil {
						items1.InputHTTP.TLS.MinVersion = types.StringValue(string(*itemsItem.InputHTTP.TLS.MinVersion))
					} else {
						items1.InputHTTP.TLS.MinVersion = types.StringNull()
					}
					items1.InputHTTP.TLS.Passphrase = types.StringPointerValue(itemsItem.InputHTTP.TLS.Passphrase)
					items1.InputHTTP.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputHTTP.TLS.PrivKeyPath)
					if itemsItem.InputHTTP.TLS.RejectUnauthorized == nil {
						items1.InputHTTP.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult8, _ := json.Marshal(itemsItem.InputHTTP.TLS.RejectUnauthorized)
						items1.InputHTTP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult8))
					}
					items1.InputHTTP.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputHTTP.TLS.RequestCert)
				}
				if itemsItem.InputHTTP.Type != nil {
					items1.InputHTTP.Type = types.StringValue(string(*itemsItem.InputHTTP.Type))
				} else {
					items1.InputHTTP.Type = types.StringNull()
				}
			}
			if itemsItem.InputHTTPRaw != nil {
				items1.InputHTTPRaw = &tfTypes.InputHTTPRaw{}
				if itemsItem.InputHTTPRaw.ActivityLogSampleRate != nil {
					items1.InputHTTPRaw.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTPRaw.ActivityLogSampleRate)))
				} else {
					items1.InputHTTPRaw.ActivityLogSampleRate = types.NumberNull()
				}
				items1.InputHTTPRaw.AllowedMethods = make([]types.String, 0, len(itemsItem.InputHTTPRaw.AllowedMethods))
				for _, v := range itemsItem.InputHTTPRaw.AllowedMethods {
					items1.InputHTTPRaw.AllowedMethods = append(items1.InputHTTPRaw.AllowedMethods, types.StringValue(v))
				}
				items1.InputHTTPRaw.AllowedPaths = make([]types.String, 0, len(itemsItem.InputHTTPRaw.AllowedPaths))
				for _, v := range itemsItem.InputHTTPRaw.AllowedPaths {
					items1.InputHTTPRaw.AllowedPaths = append(items1.InputHTTPRaw.AllowedPaths, types.StringValue(v))
				}
				items1.InputHTTPRaw.AuthTokens = make([]types.String, 0, len(itemsItem.InputHTTPRaw.AuthTokens))
				for _, v := range itemsItem.InputHTTPRaw.AuthTokens {
					items1.InputHTTPRaw.AuthTokens = append(items1.InputHTTPRaw.AuthTokens, types.StringValue(v))
				}
				items1.InputHTTPRaw.AuthTokensExt = []tfTypes.InputHTTPRawAuthTokensExt{}
				for authTokensExtCount1, authTokensExtItem1 := range itemsItem.InputHTTPRaw.AuthTokensExt {
					var authTokensExt3 tfTypes.InputHTTPRawAuthTokensExt
					authTokensExt3.Description = types.StringPointerValue(authTokensExtItem1.Description)
					authTokensExt3.Metadata = []tfTypes.InputHTTPRawAuthTokensExtMetadata{}
					for metadataCount22, metadataItem22 := range authTokensExtItem1.Metadata {
						var metadata45 tfTypes.InputHTTPRawAuthTokensExtMetadata
						metadata45.Name = types.StringValue(metadataItem22.Name)
						metadata45.Value = types.StringValue(metadataItem22.Value)
						if metadataCount22+1 > len(authTokensExt3.Metadata) {
							authTokensExt3.Metadata = append(authTokensExt3.Metadata, metadata45)
						} else {
							authTokensExt3.Metadata[metadataCount22].Name = metadata45.Name
							authTokensExt3.Metadata[metadataCount22].Value = metadata45.Value
						}
					}
					authTokensExt3.Token = types.StringValue(authTokensExtItem1.Token)
					if authTokensExtCount1+1 > len(items1.InputHTTPRaw.AuthTokensExt) {
						items1.InputHTTPRaw.AuthTokensExt = append(items1.InputHTTPRaw.AuthTokensExt, authTokensExt3)
					} else {
						items1.InputHTTPRaw.AuthTokensExt[authTokensExtCount1].Description = authTokensExt3.Description
						items1.InputHTTPRaw.AuthTokensExt[authTokensExtCount1].Metadata = authTokensExt3.Metadata
						items1.InputHTTPRaw.AuthTokensExt[authTokensExtCount1].Token = authTokensExt3.Token
					}
				}
				items1.InputHTTPRaw.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputHTTPRaw.BreakerRulesets))
				for _, v := range itemsItem.InputHTTPRaw.BreakerRulesets {
					items1.InputHTTPRaw.BreakerRulesets = append(items1.InputHTTPRaw.BreakerRulesets, types.StringValue(v))
				}
				items1.InputHTTPRaw.CaptureHeaders = types.BoolPointerValue(itemsItem.InputHTTPRaw.CaptureHeaders)
				items1.InputHTTPRaw.Connections = []tfTypes.InputHTTPRawConnections{}
				for connectionsCount21, connectionsItem21 := range itemsItem.InputHTTPRaw.Connections {
					var connections43 tfTypes.InputHTTPRawConnections
					connections43.Output = types.StringValue(connectionsItem21.Output)
					connections43.Pipeline = types.StringPointerValue(connectionsItem21.Pipeline)
					if connectionsCount21+1 > len(items1.InputHTTPRaw.Connections) {
						items1.InputHTTPRaw.Connections = append(items1.InputHTTPRaw.Connections, connections43)
					} else {
						items1.InputHTTPRaw.Connections[connectionsCount21].Output = connections43.Output
						items1.InputHTTPRaw.Connections[connectionsCount21].Pipeline = connections43.Pipeline
					}
				}
				items1.InputHTTPRaw.Description = types.StringPointerValue(itemsItem.InputHTTPRaw.Description)
				items1.InputHTTPRaw.Disabled = types.BoolPointerValue(itemsItem.InputHTTPRaw.Disabled)
				items1.InputHTTPRaw.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputHTTPRaw.EnableHealthCheck)
				items1.InputHTTPRaw.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputHTTPRaw.EnableProxyHeader)
				items1.InputHTTPRaw.Environment = types.StringPointerValue(itemsItem.InputHTTPRaw.Environment)
				items1.InputHTTPRaw.Host = types.StringPointerValue(itemsItem.InputHTTPRaw.Host)
				items1.InputHTTPRaw.ID = types.StringPointerValue(itemsItem.InputHTTPRaw.ID)
				items1.InputHTTPRaw.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputHTTPRaw.IPAllowlistRegex)
				items1.InputHTTPRaw.IPDenylistRegex = types.StringPointerValue(itemsItem.InputHTTPRaw.IPDenylistRegex)
				if itemsItem.InputHTTPRaw.KeepAliveTimeout != nil {
					items1.InputHTTPRaw.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTPRaw.KeepAliveTimeout)))
				} else {
					items1.InputHTTPRaw.KeepAliveTimeout = types.NumberNull()
				}
				if itemsItem.InputHTTPRaw.MaxActiveReq != nil {
					items1.InputHTTPRaw.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTPRaw.MaxActiveReq)))
				} else {
					items1.InputHTTPRaw.MaxActiveReq = types.NumberNull()
				}
				items1.InputHTTPRaw.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputHTTPRaw.MaxRequestsPerSocket)
				items1.InputHTTPRaw.Metadata = []tfTypes.InputHTTPRawMetadata{}
				for metadataCount23, metadataItem23 := range itemsItem.InputHTTPRaw.Metadata {
					var metadata47 tfTypes.InputHTTPRawMetadata
					metadata47.Name = types.StringValue(metadataItem23.Name)
					metadata47.Value = types.StringValue(metadataItem23.Value)
					if metadataCount23+1 > len(items1.InputHTTPRaw.Metadata) {
						items1.InputHTTPRaw.Metadata = append(items1.InputHTTPRaw.Metadata, metadata47)
					} else {
						items1.InputHTTPRaw.Metadata[metadataCount23].Name = metadata47.Name
						items1.InputHTTPRaw.Metadata[metadataCount23].Value = metadata47.Value
					}
				}
				items1.InputHTTPRaw.Pipeline = types.StringPointerValue(itemsItem.InputHTTPRaw.Pipeline)
				items1.InputHTTPRaw.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputHTTPRaw.Port)))
				if itemsItem.InputHTTPRaw.Pq == nil {
					items1.InputHTTPRaw.Pq = nil
				} else {
					items1.InputHTTPRaw.Pq = &tfTypes.InputHTTPRawPq{}
					if itemsItem.InputHTTPRaw.Pq.CommitFrequency != nil {
						items1.InputHTTPRaw.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTPRaw.Pq.CommitFrequency)))
					} else {
						items1.InputHTTPRaw.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputHTTPRaw.Pq.Compress != nil {
						items1.InputHTTPRaw.Pq.Compress = types.StringValue(string(*itemsItem.InputHTTPRaw.Pq.Compress))
					} else {
						items1.InputHTTPRaw.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputHTTPRaw.Pq.MaxBufferSize != nil {
						items1.InputHTTPRaw.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTPRaw.Pq.MaxBufferSize)))
					} else {
						items1.InputHTTPRaw.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputHTTPRaw.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputHTTPRaw.Pq.MaxFileSize)
					items1.InputHTTPRaw.Pq.MaxSize = types.StringPointerValue(itemsItem.InputHTTPRaw.Pq.MaxSize)
					if itemsItem.InputHTTPRaw.Pq.Mode != nil {
						items1.InputHTTPRaw.Pq.Mode = types.StringValue(string(*itemsItem.InputHTTPRaw.Pq.Mode))
					} else {
						items1.InputHTTPRaw.Pq.Mode = types.StringNull()
					}
					items1.InputHTTPRaw.Pq.Path = types.StringPointerValue(itemsItem.InputHTTPRaw.Pq.Path)
				}
				items1.InputHTTPRaw.PqEnabled = types.BoolPointerValue(itemsItem.InputHTTPRaw.PqEnabled)
				if itemsItem.InputHTTPRaw.RequestTimeout != nil {
					items1.InputHTTPRaw.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTPRaw.RequestTimeout)))
				} else {
					items1.InputHTTPRaw.RequestTimeout = types.NumberNull()
				}
				items1.InputHTTPRaw.SendToRoutes = types.BoolPointerValue(itemsItem.InputHTTPRaw.SendToRoutes)
				if itemsItem.InputHTTPRaw.SocketTimeout != nil {
					items1.InputHTTPRaw.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTPRaw.SocketTimeout)))
				} else {
					items1.InputHTTPRaw.SocketTimeout = types.NumberNull()
				}
				if itemsItem.InputHTTPRaw.StaleChannelFlushMs != nil {
					items1.InputHTTPRaw.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputHTTPRaw.StaleChannelFlushMs)))
				} else {
					items1.InputHTTPRaw.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputHTTPRaw.Streamtags = make([]types.String, 0, len(itemsItem.InputHTTPRaw.Streamtags))
				for _, v := range itemsItem.InputHTTPRaw.Streamtags {
					items1.InputHTTPRaw.Streamtags = append(items1.InputHTTPRaw.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputHTTPRaw.TLS == nil {
					items1.InputHTTPRaw.TLS = nil
				} else {
					items1.InputHTTPRaw.TLS = &tfTypes.InputHTTPRawTLSSettingsServerSide{}
					items1.InputHTTPRaw.TLS.CaPath = types.StringPointerValue(itemsItem.InputHTTPRaw.TLS.CaPath)
					items1.InputHTTPRaw.TLS.CertificateName = types.StringPointerValue(itemsItem.InputHTTPRaw.TLS.CertificateName)
					items1.InputHTTPRaw.TLS.CertPath = types.StringPointerValue(itemsItem.InputHTTPRaw.TLS.CertPath)
					if itemsItem.InputHTTPRaw.TLS.CommonNameRegex == nil {
						items1.InputHTTPRaw.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult9, _ := json.Marshal(itemsItem.InputHTTPRaw.TLS.CommonNameRegex)
						items1.InputHTTPRaw.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult9))
					}
					items1.InputHTTPRaw.TLS.Disabled = types.BoolPointerValue(itemsItem.InputHTTPRaw.TLS.Disabled)
					if itemsItem.InputHTTPRaw.TLS.MaxVersion != nil {
						items1.InputHTTPRaw.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputHTTPRaw.TLS.MaxVersion))
					} else {
						items1.InputHTTPRaw.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputHTTPRaw.TLS.MinVersion != nil {
						items1.InputHTTPRaw.TLS.MinVersion = types.StringValue(string(*itemsItem.InputHTTPRaw.TLS.MinVersion))
					} else {
						items1.InputHTTPRaw.TLS.MinVersion = types.StringNull()
					}
					items1.InputHTTPRaw.TLS.Passphrase = types.StringPointerValue(itemsItem.InputHTTPRaw.TLS.Passphrase)
					items1.InputHTTPRaw.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputHTTPRaw.TLS.PrivKeyPath)
					if itemsItem.InputHTTPRaw.TLS.RejectUnauthorized == nil {
						items1.InputHTTPRaw.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult9, _ := json.Marshal(itemsItem.InputHTTPRaw.TLS.RejectUnauthorized)
						items1.InputHTTPRaw.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult9))
					}
					items1.InputHTTPRaw.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputHTTPRaw.TLS.RequestCert)
				}
				if itemsItem.InputHTTPRaw.Type != nil {
					items1.InputHTTPRaw.Type = types.StringValue(string(*itemsItem.InputHTTPRaw.Type))
				} else {
					items1.InputHTTPRaw.Type = types.StringNull()
				}
			}
			if itemsItem.InputJournalFiles != nil {
				items1.InputJournalFiles = &tfTypes.InputJournalFiles{}
				items1.InputJournalFiles.Connections = []tfTypes.InputJournalFilesConnections{}
				for connectionsCount22, connectionsItem22 := range itemsItem.InputJournalFiles.Connections {
					var connections45 tfTypes.InputJournalFilesConnections
					connections45.Output = types.StringValue(connectionsItem22.Output)
					connections45.Pipeline = types.StringPointerValue(connectionsItem22.Pipeline)
					if connectionsCount22+1 > len(items1.InputJournalFiles.Connections) {
						items1.InputJournalFiles.Connections = append(items1.InputJournalFiles.Connections, connections45)
					} else {
						items1.InputJournalFiles.Connections[connectionsCount22].Output = connections45.Output
						items1.InputJournalFiles.Connections[connectionsCount22].Pipeline = connections45.Pipeline
					}
				}
				items1.InputJournalFiles.CurrentBoot = types.BoolPointerValue(itemsItem.InputJournalFiles.CurrentBoot)
				items1.InputJournalFiles.Description = types.StringPointerValue(itemsItem.InputJournalFiles.Description)
				items1.InputJournalFiles.Disabled = types.BoolPointerValue(itemsItem.InputJournalFiles.Disabled)
				items1.InputJournalFiles.Environment = types.StringPointerValue(itemsItem.InputJournalFiles.Environment)
				items1.InputJournalFiles.ID = types.StringPointerValue(itemsItem.InputJournalFiles.ID)
				if itemsItem.InputJournalFiles.Interval != nil {
					items1.InputJournalFiles.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputJournalFiles.Interval)))
				} else {
					items1.InputJournalFiles.Interval = types.NumberNull()
				}
				items1.InputJournalFiles.Journals = make([]types.String, 0, len(itemsItem.InputJournalFiles.Journals))
				for _, v := range itemsItem.InputJournalFiles.Journals {
					items1.InputJournalFiles.Journals = append(items1.InputJournalFiles.Journals, types.StringValue(v))
				}
				items1.InputJournalFiles.MaxAgeDur = types.StringPointerValue(itemsItem.InputJournalFiles.MaxAgeDur)
				items1.InputJournalFiles.Metadata = []tfTypes.InputJournalFilesMetadata{}
				for metadataCount24, metadataItem24 := range itemsItem.InputJournalFiles.Metadata {
					var metadata49 tfTypes.InputJournalFilesMetadata
					metadata49.Name = types.StringValue(metadataItem24.Name)
					metadata49.Value = types.StringValue(metadataItem24.Value)
					if metadataCount24+1 > len(items1.InputJournalFiles.Metadata) {
						items1.InputJournalFiles.Metadata = append(items1.InputJournalFiles.Metadata, metadata49)
					} else {
						items1.InputJournalFiles.Metadata[metadataCount24].Name = metadata49.Name
						items1.InputJournalFiles.Metadata[metadataCount24].Value = metadata49.Value
					}
				}
				items1.InputJournalFiles.Path = types.StringValue(itemsItem.InputJournalFiles.Path)
				items1.InputJournalFiles.Pipeline = types.StringPointerValue(itemsItem.InputJournalFiles.Pipeline)
				if itemsItem.InputJournalFiles.Pq == nil {
					items1.InputJournalFiles.Pq = nil
				} else {
					items1.InputJournalFiles.Pq = &tfTypes.InputJournalFilesPq{}
					if itemsItem.InputJournalFiles.Pq.CommitFrequency != nil {
						items1.InputJournalFiles.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputJournalFiles.Pq.CommitFrequency)))
					} else {
						items1.InputJournalFiles.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputJournalFiles.Pq.Compress != nil {
						items1.InputJournalFiles.Pq.Compress = types.StringValue(string(*itemsItem.InputJournalFiles.Pq.Compress))
					} else {
						items1.InputJournalFiles.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputJournalFiles.Pq.MaxBufferSize != nil {
						items1.InputJournalFiles.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputJournalFiles.Pq.MaxBufferSize)))
					} else {
						items1.InputJournalFiles.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputJournalFiles.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputJournalFiles.Pq.MaxFileSize)
					items1.InputJournalFiles.Pq.MaxSize = types.StringPointerValue(itemsItem.InputJournalFiles.Pq.MaxSize)
					if itemsItem.InputJournalFiles.Pq.Mode != nil {
						items1.InputJournalFiles.Pq.Mode = types.StringValue(string(*itemsItem.InputJournalFiles.Pq.Mode))
					} else {
						items1.InputJournalFiles.Pq.Mode = types.StringNull()
					}
					items1.InputJournalFiles.Pq.Path = types.StringPointerValue(itemsItem.InputJournalFiles.Pq.Path)
				}
				items1.InputJournalFiles.PqEnabled = types.BoolPointerValue(itemsItem.InputJournalFiles.PqEnabled)
				items1.InputJournalFiles.Rules = []tfTypes.InputJournalFilesRules{}
				for rulesCount, rulesItem := range itemsItem.InputJournalFiles.Rules {
					var rules1 tfTypes.InputJournalFilesRules
					rules1.Description = types.StringPointerValue(rulesItem.Description)
					rules1.Filter = types.StringValue(rulesItem.Filter)
					if rulesCount+1 > len(items1.InputJournalFiles.Rules) {
						items1.InputJournalFiles.Rules = append(items1.InputJournalFiles.Rules, rules1)
					} else {
						items1.InputJournalFiles.Rules[rulesCount].Description = rules1.Description
						items1.InputJournalFiles.Rules[rulesCount].Filter = rules1.Filter
					}
				}
				items1.InputJournalFiles.SendToRoutes = types.BoolPointerValue(itemsItem.InputJournalFiles.SendToRoutes)
				items1.InputJournalFiles.Streamtags = make([]types.String, 0, len(itemsItem.InputJournalFiles.Streamtags))
				for _, v := range itemsItem.InputJournalFiles.Streamtags {
					items1.InputJournalFiles.Streamtags = append(items1.InputJournalFiles.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputJournalFiles.Type != nil {
					items1.InputJournalFiles.Type = types.StringValue(string(*itemsItem.InputJournalFiles.Type))
				} else {
					items1.InputJournalFiles.Type = types.StringNull()
				}
			}
			if itemsItem.InputKafka != nil {
				items1.InputKafka = &tfTypes.InputKafka{}
				if itemsItem.InputKafka.AuthenticationTimeout != nil {
					items1.InputKafka.AuthenticationTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.AuthenticationTimeout)))
				} else {
					items1.InputKafka.AuthenticationTimeout = types.NumberNull()
				}
				if itemsItem.InputKafka.AutoCommitInterval != nil {
					items1.InputKafka.AutoCommitInterval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.AutoCommitInterval)))
				} else {
					items1.InputKafka.AutoCommitInterval = types.NumberNull()
				}
				if itemsItem.InputKafka.AutoCommitThreshold != nil {
					items1.InputKafka.AutoCommitThreshold = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.AutoCommitThreshold)))
				} else {
					items1.InputKafka.AutoCommitThreshold = types.NumberNull()
				}
				if itemsItem.InputKafka.BackoffRate != nil {
					items1.InputKafka.BackoffRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.BackoffRate)))
				} else {
					items1.InputKafka.BackoffRate = types.NumberNull()
				}
				items1.InputKafka.Brokers = make([]types.String, 0, len(itemsItem.InputKafka.Brokers))
				for _, v := range itemsItem.InputKafka.Brokers {
					items1.InputKafka.Brokers = append(items1.InputKafka.Brokers, types.StringValue(v))
				}
				items1.InputKafka.Connections = []tfTypes.InputKafkaConnections{}
				for connectionsCount23, connectionsItem23 := range itemsItem.InputKafka.Connections {
					var connections47 tfTypes.InputKafkaConnections
					connections47.Output = types.StringValue(connectionsItem23.Output)
					connections47.Pipeline = types.StringPointerValue(connectionsItem23.Pipeline)
					if connectionsCount23+1 > len(items1.InputKafka.Connections) {
						items1.InputKafka.Connections = append(items1.InputKafka.Connections, connections47)
					} else {
						items1.InputKafka.Connections[connectionsCount23].Output = connections47.Output
						items1.InputKafka.Connections[connectionsCount23].Pipeline = connections47.Pipeline
					}
				}
				if itemsItem.InputKafka.ConnectionTimeout != nil {
					items1.InputKafka.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.ConnectionTimeout)))
				} else {
					items1.InputKafka.ConnectionTimeout = types.NumberNull()
				}
				items1.InputKafka.Description = types.StringPointerValue(itemsItem.InputKafka.Description)
				items1.InputKafka.Disabled = types.BoolPointerValue(itemsItem.InputKafka.Disabled)
				items1.InputKafka.Environment = types.StringPointerValue(itemsItem.InputKafka.Environment)
				items1.InputKafka.FromBeginning = types.BoolPointerValue(itemsItem.InputKafka.FromBeginning)
				items1.InputKafka.GroupID = types.StringPointerValue(itemsItem.InputKafka.GroupID)
				if itemsItem.InputKafka.HeartbeatInterval != nil {
					items1.InputKafka.HeartbeatInterval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.HeartbeatInterval)))
				} else {
					items1.InputKafka.HeartbeatInterval = types.NumberNull()
				}
				items1.InputKafka.ID = types.StringPointerValue(itemsItem.InputKafka.ID)
				if itemsItem.InputKafka.InitialBackoff != nil {
					items1.InputKafka.InitialBackoff = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.InitialBackoff)))
				} else {
					items1.InputKafka.InitialBackoff = types.NumberNull()
				}
				if itemsItem.InputKafka.KafkaSchemaRegistry == nil {
					items1.InputKafka.KafkaSchemaRegistry = nil
				} else {
					items1.InputKafka.KafkaSchemaRegistry = &tfTypes.KafkaSchemaRegistryAuthentication{}
					if itemsItem.InputKafka.KafkaSchemaRegistry.Auth == nil {
						items1.InputKafka.KafkaSchemaRegistry.Auth = nil
					} else {
						items1.InputKafka.KafkaSchemaRegistry.Auth = &tfTypes.InputKafkaAuth{}
						items1.InputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret)
						items1.InputKafka.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.Auth.Disabled)
					}
					if itemsItem.InputKafka.KafkaSchemaRegistry.ConnectionTimeout != nil {
						items1.InputKafka.KafkaSchemaRegistry.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.KafkaSchemaRegistry.ConnectionTimeout)))
					} else {
						items1.InputKafka.KafkaSchemaRegistry.ConnectionTimeout = types.NumberNull()
					}
					items1.InputKafka.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.Disabled)
					if itemsItem.InputKafka.KafkaSchemaRegistry.MaxRetries != nil {
						items1.InputKafka.KafkaSchemaRegistry.MaxRetries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.KafkaSchemaRegistry.MaxRetries)))
					} else {
						items1.InputKafka.KafkaSchemaRegistry.MaxRetries = types.NumberNull()
					}
					if itemsItem.InputKafka.KafkaSchemaRegistry.RequestTimeout != nil {
						items1.InputKafka.KafkaSchemaRegistry.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.KafkaSchemaRegistry.RequestTimeout)))
					} else {
						items1.InputKafka.KafkaSchemaRegistry.RequestTimeout = types.NumberNull()
					}
					items1.InputKafka.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.SchemaRegistryURL)
					if itemsItem.InputKafka.KafkaSchemaRegistry.TLS == nil {
						items1.InputKafka.KafkaSchemaRegistry.TLS = nil
					} else {
						items1.InputKafka.KafkaSchemaRegistry.TLS = &tfTypes.InputKafkaTLSSettingsClientSide{}
						items1.InputKafka.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.TLS.CaPath)
						items1.InputKafka.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.TLS.CertificateName)
						items1.InputKafka.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.TLS.CertPath)
						items1.InputKafka.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.TLS.Disabled)
						if itemsItem.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion != nil {
							items1.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion))
						} else {
							items1.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
						}
						if itemsItem.InputKafka.KafkaSchemaRegistry.TLS.MinVersion != nil {
							items1.InputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*itemsItem.InputKafka.KafkaSchemaRegistry.TLS.MinVersion))
						} else {
							items1.InputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
						}
						items1.InputKafka.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.TLS.Passphrase)
						items1.InputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath)
						items1.InputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized)
						items1.InputKafka.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(itemsItem.InputKafka.KafkaSchemaRegistry.TLS.Servername)
					}
				}
				if itemsItem.InputKafka.MaxBackOff != nil {
					items1.InputKafka.MaxBackOff = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.MaxBackOff)))
				} else {
					items1.InputKafka.MaxBackOff = types.NumberNull()
				}
				if itemsItem.InputKafka.MaxBytes != nil {
					items1.InputKafka.MaxBytes = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.MaxBytes)))
				} else {
					items1.InputKafka.MaxBytes = types.NumberNull()
				}
				if itemsItem.InputKafka.MaxBytesPerPartition != nil {
					items1.InputKafka.MaxBytesPerPartition = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.MaxBytesPerPartition)))
				} else {
					items1.InputKafka.MaxBytesPerPartition = types.NumberNull()
				}
				if itemsItem.InputKafka.MaxRetries != nil {
					items1.InputKafka.MaxRetries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.MaxRetries)))
				} else {
					items1.InputKafka.MaxRetries = types.NumberNull()
				}
				if itemsItem.InputKafka.MaxSocketErrors != nil {
					items1.InputKafka.MaxSocketErrors = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.MaxSocketErrors)))
				} else {
					items1.InputKafka.MaxSocketErrors = types.NumberNull()
				}
				items1.InputKafka.Metadata = []tfTypes.InputKafkaMetadata{}
				for metadataCount25, metadataItem25 := range itemsItem.InputKafka.Metadata {
					var metadata51 tfTypes.InputKafkaMetadata
					metadata51.Name = types.StringValue(metadataItem25.Name)
					metadata51.Value = types.StringValue(metadataItem25.Value)
					if metadataCount25+1 > len(items1.InputKafka.Metadata) {
						items1.InputKafka.Metadata = append(items1.InputKafka.Metadata, metadata51)
					} else {
						items1.InputKafka.Metadata[metadataCount25].Name = metadata51.Name
						items1.InputKafka.Metadata[metadataCount25].Value = metadata51.Value
					}
				}
				items1.InputKafka.Pipeline = types.StringPointerValue(itemsItem.InputKafka.Pipeline)
				if itemsItem.InputKafka.Pq == nil {
					items1.InputKafka.Pq = nil
				} else {
					items1.InputKafka.Pq = &tfTypes.InputKafkaPq{}
					if itemsItem.InputKafka.Pq.CommitFrequency != nil {
						items1.InputKafka.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.Pq.CommitFrequency)))
					} else {
						items1.InputKafka.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputKafka.Pq.Compress != nil {
						items1.InputKafka.Pq.Compress = types.StringValue(string(*itemsItem.InputKafka.Pq.Compress))
					} else {
						items1.InputKafka.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputKafka.Pq.MaxBufferSize != nil {
						items1.InputKafka.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.Pq.MaxBufferSize)))
					} else {
						items1.InputKafka.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputKafka.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputKafka.Pq.MaxFileSize)
					items1.InputKafka.Pq.MaxSize = types.StringPointerValue(itemsItem.InputKafka.Pq.MaxSize)
					if itemsItem.InputKafka.Pq.Mode != nil {
						items1.InputKafka.Pq.Mode = types.StringValue(string(*itemsItem.InputKafka.Pq.Mode))
					} else {
						items1.InputKafka.Pq.Mode = types.StringNull()
					}
					items1.InputKafka.Pq.Path = types.StringPointerValue(itemsItem.InputKafka.Pq.Path)
				}
				items1.InputKafka.PqEnabled = types.BoolPointerValue(itemsItem.InputKafka.PqEnabled)
				if itemsItem.InputKafka.ReauthenticationThreshold != nil {
					items1.InputKafka.ReauthenticationThreshold = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.ReauthenticationThreshold)))
				} else {
					items1.InputKafka.ReauthenticationThreshold = types.NumberNull()
				}
				if itemsItem.InputKafka.RebalanceTimeout != nil {
					items1.InputKafka.RebalanceTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.RebalanceTimeout)))
				} else {
					items1.InputKafka.RebalanceTimeout = types.NumberNull()
				}
				if itemsItem.InputKafka.RequestTimeout != nil {
					items1.InputKafka.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.RequestTimeout)))
				} else {
					items1.InputKafka.RequestTimeout = types.NumberNull()
				}
				if itemsItem.InputKafka.Sasl == nil {
					items1.InputKafka.Sasl = nil
				} else {
					items1.InputKafka.Sasl = &tfTypes.Authentication{}
					items1.InputKafka.Sasl.Disabled = types.BoolPointerValue(itemsItem.InputKafka.Sasl.Disabled)
					if itemsItem.InputKafka.Sasl.Mechanism != nil {
						items1.InputKafka.Sasl.Mechanism = types.StringValue(string(*itemsItem.InputKafka.Sasl.Mechanism))
					} else {
						items1.InputKafka.Sasl.Mechanism = types.StringNull()
					}
				}
				items1.InputKafka.SendToRoutes = types.BoolPointerValue(itemsItem.InputKafka.SendToRoutes)
				if itemsItem.InputKafka.SessionTimeout != nil {
					items1.InputKafka.SessionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKafka.SessionTimeout)))
				} else {
					items1.InputKafka.SessionTimeout = types.NumberNull()
				}
				items1.InputKafka.Streamtags = make([]types.String, 0, len(itemsItem.InputKafka.Streamtags))
				for _, v := range itemsItem.InputKafka.Streamtags {
					items1.InputKafka.Streamtags = append(items1.InputKafka.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputKafka.TLS == nil {
					items1.InputKafka.TLS = nil
				} else {
					items1.InputKafka.TLS = &tfTypes.TLSSettingsClientSide{}
					items1.InputKafka.TLS.CaPath = types.StringPointerValue(itemsItem.InputKafka.TLS.CaPath)
					items1.InputKafka.TLS.CertificateName = types.StringPointerValue(itemsItem.InputKafka.TLS.CertificateName)
					items1.InputKafka.TLS.CertPath = types.StringPointerValue(itemsItem.InputKafka.TLS.CertPath)
					items1.InputKafka.TLS.Disabled = types.BoolPointerValue(itemsItem.InputKafka.TLS.Disabled)
					if itemsItem.InputKafka.TLS.MaxVersion != nil {
						items1.InputKafka.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputKafka.TLS.MaxVersion))
					} else {
						items1.InputKafka.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputKafka.TLS.MinVersion != nil {
						items1.InputKafka.TLS.MinVersion = types.StringValue(string(*itemsItem.InputKafka.TLS.MinVersion))
					} else {
						items1.InputKafka.TLS.MinVersion = types.StringNull()
					}
					items1.InputKafka.TLS.Passphrase = types.StringPointerValue(itemsItem.InputKafka.TLS.Passphrase)
					items1.InputKafka.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputKafka.TLS.PrivKeyPath)
					items1.InputKafka.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputKafka.TLS.RejectUnauthorized)
					items1.InputKafka.TLS.Servername = types.StringPointerValue(itemsItem.InputKafka.TLS.Servername)
				}
				items1.InputKafka.Topics = make([]types.String, 0, len(itemsItem.InputKafka.Topics))
				for _, v := range itemsItem.InputKafka.Topics {
					items1.InputKafka.Topics = append(items1.InputKafka.Topics, types.StringValue(v))
				}
				if itemsItem.InputKafka.Type != nil {
					items1.InputKafka.Type = types.StringValue(string(*itemsItem.InputKafka.Type))
				} else {
					items1.InputKafka.Type = types.StringNull()
				}
			}
			if itemsItem.InputKinesis != nil {
				items1.InputKinesis = &tfTypes.InputKinesis{}
				items1.InputKinesis.AssumeRoleArn = types.StringPointerValue(itemsItem.InputKinesis.AssumeRoleArn)
				items1.InputKinesis.AssumeRoleExternalID = types.StringPointerValue(itemsItem.InputKinesis.AssumeRoleExternalID)
				items1.InputKinesis.AvoidDuplicates = types.BoolPointerValue(itemsItem.InputKinesis.AvoidDuplicates)
				items1.InputKinesis.AwsAPIKey = types.StringPointerValue(itemsItem.InputKinesis.AwsAPIKey)
				if itemsItem.InputKinesis.AwsAuthenticationMethod != nil {
					items1.InputKinesis.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.InputKinesis.AwsAuthenticationMethod))
				} else {
					items1.InputKinesis.AwsAuthenticationMethod = types.StringNull()
				}
				items1.InputKinesis.AwsSecret = types.StringPointerValue(itemsItem.InputKinesis.AwsSecret)
				items1.InputKinesis.AwsSecretKey = types.StringPointerValue(itemsItem.InputKinesis.AwsSecretKey)
				items1.InputKinesis.Connections = []tfTypes.InputKinesisConnections{}
				for connectionsCount24, connectionsItem24 := range itemsItem.InputKinesis.Connections {
					var connections49 tfTypes.InputKinesisConnections
					connections49.Output = types.StringValue(connectionsItem24.Output)
					connections49.Pipeline = types.StringPointerValue(connectionsItem24.Pipeline)
					if connectionsCount24+1 > len(items1.InputKinesis.Connections) {
						items1.InputKinesis.Connections = append(items1.InputKinesis.Connections, connections49)
					} else {
						items1.InputKinesis.Connections[connectionsCount24].Output = connections49.Output
						items1.InputKinesis.Connections[connectionsCount24].Pipeline = connections49.Pipeline
					}
				}
				items1.InputKinesis.Description = types.StringPointerValue(itemsItem.InputKinesis.Description)
				items1.InputKinesis.Disabled = types.BoolPointerValue(itemsItem.InputKinesis.Disabled)
				if itemsItem.InputKinesis.DurationSeconds != nil {
					items1.InputKinesis.DurationSeconds = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKinesis.DurationSeconds)))
				} else {
					items1.InputKinesis.DurationSeconds = types.NumberNull()
				}
				items1.InputKinesis.EnableAssumeRole = types.BoolPointerValue(itemsItem.InputKinesis.EnableAssumeRole)
				items1.InputKinesis.Endpoint = types.StringPointerValue(itemsItem.InputKinesis.Endpoint)
				items1.InputKinesis.Environment = types.StringPointerValue(itemsItem.InputKinesis.Environment)
				if itemsItem.InputKinesis.GetRecordsLimit != nil {
					items1.InputKinesis.GetRecordsLimit = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKinesis.GetRecordsLimit)))
				} else {
					items1.InputKinesis.GetRecordsLimit = types.NumberNull()
				}
				if itemsItem.InputKinesis.GetRecordsLimitTotal != nil {
					items1.InputKinesis.GetRecordsLimitTotal = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKinesis.GetRecordsLimitTotal)))
				} else {
					items1.InputKinesis.GetRecordsLimitTotal = types.NumberNull()
				}
				items1.InputKinesis.ID = types.StringPointerValue(itemsItem.InputKinesis.ID)
				if itemsItem.InputKinesis.LoadBalancingAlgorithm != nil {
					items1.InputKinesis.LoadBalancingAlgorithm = types.StringValue(string(*itemsItem.InputKinesis.LoadBalancingAlgorithm))
				} else {
					items1.InputKinesis.LoadBalancingAlgorithm = types.StringNull()
				}
				items1.InputKinesis.Metadata = []tfTypes.InputKinesisMetadata{}
				for metadataCount26, metadataItem26 := range itemsItem.InputKinesis.Metadata {
					var metadata53 tfTypes.InputKinesisMetadata
					metadata53.Name = types.StringValue(metadataItem26.Name)
					metadata53.Value = types.StringValue(metadataItem26.Value)
					if metadataCount26+1 > len(items1.InputKinesis.Metadata) {
						items1.InputKinesis.Metadata = append(items1.InputKinesis.Metadata, metadata53)
					} else {
						items1.InputKinesis.Metadata[metadataCount26].Name = metadata53.Name
						items1.InputKinesis.Metadata[metadataCount26].Value = metadata53.Value
					}
				}
				if itemsItem.InputKinesis.PayloadFormat != nil {
					items1.InputKinesis.PayloadFormat = types.StringValue(string(*itemsItem.InputKinesis.PayloadFormat))
				} else {
					items1.InputKinesis.PayloadFormat = types.StringNull()
				}
				items1.InputKinesis.Pipeline = types.StringPointerValue(itemsItem.InputKinesis.Pipeline)
				if itemsItem.InputKinesis.Pq == nil {
					items1.InputKinesis.Pq = nil
				} else {
					items1.InputKinesis.Pq = &tfTypes.InputKinesisPq{}
					if itemsItem.InputKinesis.Pq.CommitFrequency != nil {
						items1.InputKinesis.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKinesis.Pq.CommitFrequency)))
					} else {
						items1.InputKinesis.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputKinesis.Pq.Compress != nil {
						items1.InputKinesis.Pq.Compress = types.StringValue(string(*itemsItem.InputKinesis.Pq.Compress))
					} else {
						items1.InputKinesis.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputKinesis.Pq.MaxBufferSize != nil {
						items1.InputKinesis.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKinesis.Pq.MaxBufferSize)))
					} else {
						items1.InputKinesis.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputKinesis.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputKinesis.Pq.MaxFileSize)
					items1.InputKinesis.Pq.MaxSize = types.StringPointerValue(itemsItem.InputKinesis.Pq.MaxSize)
					if itemsItem.InputKinesis.Pq.Mode != nil {
						items1.InputKinesis.Pq.Mode = types.StringValue(string(*itemsItem.InputKinesis.Pq.Mode))
					} else {
						items1.InputKinesis.Pq.Mode = types.StringNull()
					}
					items1.InputKinesis.Pq.Path = types.StringPointerValue(itemsItem.InputKinesis.Pq.Path)
				}
				items1.InputKinesis.PqEnabled = types.BoolPointerValue(itemsItem.InputKinesis.PqEnabled)
				items1.InputKinesis.Region = types.StringValue(itemsItem.InputKinesis.Region)
				items1.InputKinesis.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputKinesis.RejectUnauthorized)
				items1.InputKinesis.ReuseConnections = types.BoolPointerValue(itemsItem.InputKinesis.ReuseConnections)
				items1.InputKinesis.SendToRoutes = types.BoolPointerValue(itemsItem.InputKinesis.SendToRoutes)
				if itemsItem.InputKinesis.ServiceInterval != nil {
					items1.InputKinesis.ServiceInterval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKinesis.ServiceInterval)))
				} else {
					items1.InputKinesis.ServiceInterval = types.NumberNull()
				}
				items1.InputKinesis.ShardExpr = types.StringPointerValue(itemsItem.InputKinesis.ShardExpr)
				if itemsItem.InputKinesis.ShardIteratorType != nil {
					items1.InputKinesis.ShardIteratorType = types.StringValue(string(*itemsItem.InputKinesis.ShardIteratorType))
				} else {
					items1.InputKinesis.ShardIteratorType = types.StringNull()
				}
				if itemsItem.InputKinesis.SignatureVersion != nil {
					items1.InputKinesis.SignatureVersion = types.StringValue(string(*itemsItem.InputKinesis.SignatureVersion))
				} else {
					items1.InputKinesis.SignatureVersion = types.StringNull()
				}
				items1.InputKinesis.StreamName = types.StringValue(itemsItem.InputKinesis.StreamName)
				items1.InputKinesis.Streamtags = make([]types.String, 0, len(itemsItem.InputKinesis.Streamtags))
				for _, v := range itemsItem.InputKinesis.Streamtags {
					items1.InputKinesis.Streamtags = append(items1.InputKinesis.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputKinesis.Type != nil {
					items1.InputKinesis.Type = types.StringValue(string(*itemsItem.InputKinesis.Type))
				} else {
					items1.InputKinesis.Type = types.StringNull()
				}
				items1.InputKinesis.VerifyKPLCheckSums = types.BoolPointerValue(itemsItem.InputKinesis.VerifyKPLCheckSums)
			}
			if itemsItem.InputKubeEvents != nil {
				items1.InputKubeEvents = &tfTypes.InputKubeEvents{}
				items1.InputKubeEvents.Connections = []tfTypes.InputKubeEventsConnections{}
				for connectionsCount25, connectionsItem25 := range itemsItem.InputKubeEvents.Connections {
					var connections51 tfTypes.InputKubeEventsConnections
					connections51.Output = types.StringValue(connectionsItem25.Output)
					connections51.Pipeline = types.StringPointerValue(connectionsItem25.Pipeline)
					if connectionsCount25+1 > len(items1.InputKubeEvents.Connections) {
						items1.InputKubeEvents.Connections = append(items1.InputKubeEvents.Connections, connections51)
					} else {
						items1.InputKubeEvents.Connections[connectionsCount25].Output = connections51.Output
						items1.InputKubeEvents.Connections[connectionsCount25].Pipeline = connections51.Pipeline
					}
				}
				items1.InputKubeEvents.Description = types.StringPointerValue(itemsItem.InputKubeEvents.Description)
				items1.InputKubeEvents.Disabled = types.BoolPointerValue(itemsItem.InputKubeEvents.Disabled)
				items1.InputKubeEvents.Environment = types.StringPointerValue(itemsItem.InputKubeEvents.Environment)
				items1.InputKubeEvents.ID = types.StringValue(itemsItem.InputKubeEvents.ID)
				items1.InputKubeEvents.Metadata = []tfTypes.InputKubeEventsMetadata{}
				for metadataCount27, metadataItem27 := range itemsItem.InputKubeEvents.Metadata {
					var metadata55 tfTypes.InputKubeEventsMetadata
					metadata55.Name = types.StringValue(metadataItem27.Name)
					metadata55.Value = types.StringValue(metadataItem27.Value)
					if metadataCount27+1 > len(items1.InputKubeEvents.Metadata) {
						items1.InputKubeEvents.Metadata = append(items1.InputKubeEvents.Metadata, metadata55)
					} else {
						items1.InputKubeEvents.Metadata[metadataCount27].Name = metadata55.Name
						items1.InputKubeEvents.Metadata[metadataCount27].Value = metadata55.Value
					}
				}
				items1.InputKubeEvents.Pipeline = types.StringPointerValue(itemsItem.InputKubeEvents.Pipeline)
				if itemsItem.InputKubeEvents.Pq == nil {
					items1.InputKubeEvents.Pq = nil
				} else {
					items1.InputKubeEvents.Pq = &tfTypes.InputKubeEventsPq{}
					if itemsItem.InputKubeEvents.Pq.CommitFrequency != nil {
						items1.InputKubeEvents.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKubeEvents.Pq.CommitFrequency)))
					} else {
						items1.InputKubeEvents.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputKubeEvents.Pq.Compress != nil {
						items1.InputKubeEvents.Pq.Compress = types.StringValue(string(*itemsItem.InputKubeEvents.Pq.Compress))
					} else {
						items1.InputKubeEvents.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputKubeEvents.Pq.MaxBufferSize != nil {
						items1.InputKubeEvents.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKubeEvents.Pq.MaxBufferSize)))
					} else {
						items1.InputKubeEvents.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputKubeEvents.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputKubeEvents.Pq.MaxFileSize)
					items1.InputKubeEvents.Pq.MaxSize = types.StringPointerValue(itemsItem.InputKubeEvents.Pq.MaxSize)
					if itemsItem.InputKubeEvents.Pq.Mode != nil {
						items1.InputKubeEvents.Pq.Mode = types.StringValue(string(*itemsItem.InputKubeEvents.Pq.Mode))
					} else {
						items1.InputKubeEvents.Pq.Mode = types.StringNull()
					}
					items1.InputKubeEvents.Pq.Path = types.StringPointerValue(itemsItem.InputKubeEvents.Pq.Path)
				}
				items1.InputKubeEvents.PqEnabled = types.BoolPointerValue(itemsItem.InputKubeEvents.PqEnabled)
				items1.InputKubeEvents.Rules = []tfTypes.InputKubeEventsRules{}
				for rulesCount1, rulesItem1 := range itemsItem.InputKubeEvents.Rules {
					var rules3 tfTypes.InputKubeEventsRules
					rules3.Description = types.StringPointerValue(rulesItem1.Description)
					rules3.Filter = types.StringValue(rulesItem1.Filter)
					if rulesCount1+1 > len(items1.InputKubeEvents.Rules) {
						items1.InputKubeEvents.Rules = append(items1.InputKubeEvents.Rules, rules3)
					} else {
						items1.InputKubeEvents.Rules[rulesCount1].Description = rules3.Description
						items1.InputKubeEvents.Rules[rulesCount1].Filter = rules3.Filter
					}
				}
				items1.InputKubeEvents.SendToRoutes = types.BoolPointerValue(itemsItem.InputKubeEvents.SendToRoutes)
				items1.InputKubeEvents.Streamtags = make([]types.String, 0, len(itemsItem.InputKubeEvents.Streamtags))
				for _, v := range itemsItem.InputKubeEvents.Streamtags {
					items1.InputKubeEvents.Streamtags = append(items1.InputKubeEvents.Streamtags, types.StringValue(v))
				}
				items1.InputKubeEvents.Type = types.StringValue(string(itemsItem.InputKubeEvents.Type))
			}
			if itemsItem.InputKubeLogs != nil {
				items1.InputKubeLogs = &tfTypes.InputKubeLogs{}
				items1.InputKubeLogs.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputKubeLogs.BreakerRulesets))
				for _, v := range itemsItem.InputKubeLogs.BreakerRulesets {
					items1.InputKubeLogs.BreakerRulesets = append(items1.InputKubeLogs.BreakerRulesets, types.StringValue(v))
				}
				items1.InputKubeLogs.Connections = []tfTypes.InputKubeLogsConnections{}
				for connectionsCount26, connectionsItem26 := range itemsItem.InputKubeLogs.Connections {
					var connections53 tfTypes.InputKubeLogsConnections
					connections53.Output = types.StringValue(connectionsItem26.Output)
					connections53.Pipeline = types.StringPointerValue(connectionsItem26.Pipeline)
					if connectionsCount26+1 > len(items1.InputKubeLogs.Connections) {
						items1.InputKubeLogs.Connections = append(items1.InputKubeLogs.Connections, connections53)
					} else {
						items1.InputKubeLogs.Connections[connectionsCount26].Output = connections53.Output
						items1.InputKubeLogs.Connections[connectionsCount26].Pipeline = connections53.Pipeline
					}
				}
				items1.InputKubeLogs.Description = types.StringPointerValue(itemsItem.InputKubeLogs.Description)
				items1.InputKubeLogs.Disabled = types.BoolPointerValue(itemsItem.InputKubeLogs.Disabled)
				items1.InputKubeLogs.EnableLoadBalancing = types.BoolPointerValue(itemsItem.InputKubeLogs.EnableLoadBalancing)
				items1.InputKubeLogs.Environment = types.StringPointerValue(itemsItem.InputKubeLogs.Environment)
				items1.InputKubeLogs.ID = types.StringValue(itemsItem.InputKubeLogs.ID)
				if itemsItem.InputKubeLogs.Interval != nil {
					items1.InputKubeLogs.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKubeLogs.Interval)))
				} else {
					items1.InputKubeLogs.Interval = types.NumberNull()
				}
				items1.InputKubeLogs.Metadata = []tfTypes.InputKubeLogsMetadata{}
				for metadataCount28, metadataItem28 := range itemsItem.InputKubeLogs.Metadata {
					var metadata57 tfTypes.InputKubeLogsMetadata
					metadata57.Name = types.StringValue(metadataItem28.Name)
					metadata57.Value = types.StringValue(metadataItem28.Value)
					if metadataCount28+1 > len(items1.InputKubeLogs.Metadata) {
						items1.InputKubeLogs.Metadata = append(items1.InputKubeLogs.Metadata, metadata57)
					} else {
						items1.InputKubeLogs.Metadata[metadataCount28].Name = metadata57.Name
						items1.InputKubeLogs.Metadata[metadataCount28].Value = metadata57.Value
					}
				}
				if itemsItem.InputKubeLogs.Persistence == nil {
					items1.InputKubeLogs.Persistence = nil
				} else {
					items1.InputKubeLogs.Persistence = &tfTypes.InputKubeLogsDiskSpooling{}
					if itemsItem.InputKubeLogs.Persistence.Compress != nil {
						items1.InputKubeLogs.Persistence.Compress = types.StringValue(string(*itemsItem.InputKubeLogs.Persistence.Compress))
					} else {
						items1.InputKubeLogs.Persistence.Compress = types.StringNull()
					}
					items1.InputKubeLogs.Persistence.Enable = types.BoolPointerValue(itemsItem.InputKubeLogs.Persistence.Enable)
					items1.InputKubeLogs.Persistence.MaxDataSize = types.StringPointerValue(itemsItem.InputKubeLogs.Persistence.MaxDataSize)
					items1.InputKubeLogs.Persistence.MaxDataTime = types.StringPointerValue(itemsItem.InputKubeLogs.Persistence.MaxDataTime)
					items1.InputKubeLogs.Persistence.TimeWindow = types.StringPointerValue(itemsItem.InputKubeLogs.Persistence.TimeWindow)
				}
				items1.InputKubeLogs.Pipeline = types.StringPointerValue(itemsItem.InputKubeLogs.Pipeline)
				if itemsItem.InputKubeLogs.Pq == nil {
					items1.InputKubeLogs.Pq = nil
				} else {
					items1.InputKubeLogs.Pq = &tfTypes.InputKubeLogsPq{}
					if itemsItem.InputKubeLogs.Pq.CommitFrequency != nil {
						items1.InputKubeLogs.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKubeLogs.Pq.CommitFrequency)))
					} else {
						items1.InputKubeLogs.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputKubeLogs.Pq.Compress != nil {
						items1.InputKubeLogs.Pq.Compress = types.StringValue(string(*itemsItem.InputKubeLogs.Pq.Compress))
					} else {
						items1.InputKubeLogs.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputKubeLogs.Pq.MaxBufferSize != nil {
						items1.InputKubeLogs.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKubeLogs.Pq.MaxBufferSize)))
					} else {
						items1.InputKubeLogs.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputKubeLogs.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputKubeLogs.Pq.MaxFileSize)
					items1.InputKubeLogs.Pq.MaxSize = types.StringPointerValue(itemsItem.InputKubeLogs.Pq.MaxSize)
					if itemsItem.InputKubeLogs.Pq.Mode != nil {
						items1.InputKubeLogs.Pq.Mode = types.StringValue(string(*itemsItem.InputKubeLogs.Pq.Mode))
					} else {
						items1.InputKubeLogs.Pq.Mode = types.StringNull()
					}
					items1.InputKubeLogs.Pq.Path = types.StringPointerValue(itemsItem.InputKubeLogs.Pq.Path)
				}
				items1.InputKubeLogs.PqEnabled = types.BoolPointerValue(itemsItem.InputKubeLogs.PqEnabled)
				items1.InputKubeLogs.Rules = []tfTypes.InputKubeLogsRules{}
				for rulesCount2, rulesItem2 := range itemsItem.InputKubeLogs.Rules {
					var rules5 tfTypes.InputKubeLogsRules
					rules5.Description = types.StringPointerValue(rulesItem2.Description)
					rules5.Filter = types.StringValue(rulesItem2.Filter)
					if rulesCount2+1 > len(items1.InputKubeLogs.Rules) {
						items1.InputKubeLogs.Rules = append(items1.InputKubeLogs.Rules, rules5)
					} else {
						items1.InputKubeLogs.Rules[rulesCount2].Description = rules5.Description
						items1.InputKubeLogs.Rules[rulesCount2].Filter = rules5.Filter
					}
				}
				items1.InputKubeLogs.SendToRoutes = types.BoolPointerValue(itemsItem.InputKubeLogs.SendToRoutes)
				if itemsItem.InputKubeLogs.StaleChannelFlushMs != nil {
					items1.InputKubeLogs.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKubeLogs.StaleChannelFlushMs)))
				} else {
					items1.InputKubeLogs.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputKubeLogs.Streamtags = make([]types.String, 0, len(itemsItem.InputKubeLogs.Streamtags))
				for _, v := range itemsItem.InputKubeLogs.Streamtags {
					items1.InputKubeLogs.Streamtags = append(items1.InputKubeLogs.Streamtags, types.StringValue(v))
				}
				items1.InputKubeLogs.Timestamps = types.BoolPointerValue(itemsItem.InputKubeLogs.Timestamps)
				items1.InputKubeLogs.Type = types.StringValue(string(itemsItem.InputKubeLogs.Type))
			}
			if itemsItem.InputKubeMetrics != nil {
				items1.InputKubeMetrics = &tfTypes.InputKubeMetrics{}
				items1.InputKubeMetrics.Connections = []tfTypes.InputKubeMetricsConnections{}
				for connectionsCount27, connectionsItem27 := range itemsItem.InputKubeMetrics.Connections {
					var connections55 tfTypes.InputKubeMetricsConnections
					connections55.Output = types.StringValue(connectionsItem27.Output)
					connections55.Pipeline = types.StringPointerValue(connectionsItem27.Pipeline)
					if connectionsCount27+1 > len(items1.InputKubeMetrics.Connections) {
						items1.InputKubeMetrics.Connections = append(items1.InputKubeMetrics.Connections, connections55)
					} else {
						items1.InputKubeMetrics.Connections[connectionsCount27].Output = connections55.Output
						items1.InputKubeMetrics.Connections[connectionsCount27].Pipeline = connections55.Pipeline
					}
				}
				items1.InputKubeMetrics.Description = types.StringPointerValue(itemsItem.InputKubeMetrics.Description)
				items1.InputKubeMetrics.Disabled = types.BoolPointerValue(itemsItem.InputKubeMetrics.Disabled)
				items1.InputKubeMetrics.Environment = types.StringPointerValue(itemsItem.InputKubeMetrics.Environment)
				items1.InputKubeMetrics.ID = types.StringValue(itemsItem.InputKubeMetrics.ID)
				if itemsItem.InputKubeMetrics.Interval != nil {
					items1.InputKubeMetrics.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKubeMetrics.Interval)))
				} else {
					items1.InputKubeMetrics.Interval = types.NumberNull()
				}
				items1.InputKubeMetrics.Metadata = []tfTypes.InputKubeMetricsMetadata{}
				for metadataCount29, metadataItem29 := range itemsItem.InputKubeMetrics.Metadata {
					var metadata59 tfTypes.InputKubeMetricsMetadata
					metadata59.Name = types.StringValue(metadataItem29.Name)
					metadata59.Value = types.StringValue(metadataItem29.Value)
					if metadataCount29+1 > len(items1.InputKubeMetrics.Metadata) {
						items1.InputKubeMetrics.Metadata = append(items1.InputKubeMetrics.Metadata, metadata59)
					} else {
						items1.InputKubeMetrics.Metadata[metadataCount29].Name = metadata59.Name
						items1.InputKubeMetrics.Metadata[metadataCount29].Value = metadata59.Value
					}
				}
				if itemsItem.InputKubeMetrics.Persistence == nil {
					items1.InputKubeMetrics.Persistence = nil
				} else {
					items1.InputKubeMetrics.Persistence = &tfTypes.InputKubeMetricsPersistence{}
					if itemsItem.InputKubeMetrics.Persistence.Compress != nil {
						items1.InputKubeMetrics.Persistence.Compress = types.StringValue(string(*itemsItem.InputKubeMetrics.Persistence.Compress))
					} else {
						items1.InputKubeMetrics.Persistence.Compress = types.StringNull()
					}
					items1.InputKubeMetrics.Persistence.DestPath = types.StringPointerValue(itemsItem.InputKubeMetrics.Persistence.DestPath)
					items1.InputKubeMetrics.Persistence.Enable = types.BoolPointerValue(itemsItem.InputKubeMetrics.Persistence.Enable)
					items1.InputKubeMetrics.Persistence.MaxDataSize = types.StringPointerValue(itemsItem.InputKubeMetrics.Persistence.MaxDataSize)
					items1.InputKubeMetrics.Persistence.MaxDataTime = types.StringPointerValue(itemsItem.InputKubeMetrics.Persistence.MaxDataTime)
					items1.InputKubeMetrics.Persistence.TimeWindow = types.StringPointerValue(itemsItem.InputKubeMetrics.Persistence.TimeWindow)
				}
				items1.InputKubeMetrics.Pipeline = types.StringPointerValue(itemsItem.InputKubeMetrics.Pipeline)
				if itemsItem.InputKubeMetrics.Pq == nil {
					items1.InputKubeMetrics.Pq = nil
				} else {
					items1.InputKubeMetrics.Pq = &tfTypes.InputKubeMetricsPq{}
					if itemsItem.InputKubeMetrics.Pq.CommitFrequency != nil {
						items1.InputKubeMetrics.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKubeMetrics.Pq.CommitFrequency)))
					} else {
						items1.InputKubeMetrics.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputKubeMetrics.Pq.Compress != nil {
						items1.InputKubeMetrics.Pq.Compress = types.StringValue(string(*itemsItem.InputKubeMetrics.Pq.Compress))
					} else {
						items1.InputKubeMetrics.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputKubeMetrics.Pq.MaxBufferSize != nil {
						items1.InputKubeMetrics.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputKubeMetrics.Pq.MaxBufferSize)))
					} else {
						items1.InputKubeMetrics.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputKubeMetrics.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputKubeMetrics.Pq.MaxFileSize)
					items1.InputKubeMetrics.Pq.MaxSize = types.StringPointerValue(itemsItem.InputKubeMetrics.Pq.MaxSize)
					if itemsItem.InputKubeMetrics.Pq.Mode != nil {
						items1.InputKubeMetrics.Pq.Mode = types.StringValue(string(*itemsItem.InputKubeMetrics.Pq.Mode))
					} else {
						items1.InputKubeMetrics.Pq.Mode = types.StringNull()
					}
					items1.InputKubeMetrics.Pq.Path = types.StringPointerValue(itemsItem.InputKubeMetrics.Pq.Path)
				}
				items1.InputKubeMetrics.PqEnabled = types.BoolPointerValue(itemsItem.InputKubeMetrics.PqEnabled)
				items1.InputKubeMetrics.Rules = []tfTypes.InputKubeMetricsRules{}
				for rulesCount3, rulesItem3 := range itemsItem.InputKubeMetrics.Rules {
					var rules7 tfTypes.InputKubeMetricsRules
					rules7.Description = types.StringPointerValue(rulesItem3.Description)
					rules7.Filter = types.StringValue(rulesItem3.Filter)
					if rulesCount3+1 > len(items1.InputKubeMetrics.Rules) {
						items1.InputKubeMetrics.Rules = append(items1.InputKubeMetrics.Rules, rules7)
					} else {
						items1.InputKubeMetrics.Rules[rulesCount3].Description = rules7.Description
						items1.InputKubeMetrics.Rules[rulesCount3].Filter = rules7.Filter
					}
				}
				items1.InputKubeMetrics.SendToRoutes = types.BoolPointerValue(itemsItem.InputKubeMetrics.SendToRoutes)
				items1.InputKubeMetrics.Streamtags = make([]types.String, 0, len(itemsItem.InputKubeMetrics.Streamtags))
				for _, v := range itemsItem.InputKubeMetrics.Streamtags {
					items1.InputKubeMetrics.Streamtags = append(items1.InputKubeMetrics.Streamtags, types.StringValue(v))
				}
				items1.InputKubeMetrics.Type = types.StringValue(string(itemsItem.InputKubeMetrics.Type))
			}
			if itemsItem.InputLoki != nil {
				items1.InputLoki = &tfTypes.InputLoki{}
				if itemsItem.InputLoki.ActivityLogSampleRate != nil {
					items1.InputLoki.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputLoki.ActivityLogSampleRate)))
				} else {
					items1.InputLoki.ActivityLogSampleRate = types.NumberNull()
				}
				items1.InputLoki.AuthHeaderExpr = types.StringPointerValue(itemsItem.InputLoki.AuthHeaderExpr)
				if itemsItem.InputLoki.AuthType != nil {
					items1.InputLoki.AuthType = types.StringValue(string(*itemsItem.InputLoki.AuthType))
				} else {
					items1.InputLoki.AuthType = types.StringNull()
				}
				items1.InputLoki.CaptureHeaders = types.BoolPointerValue(itemsItem.InputLoki.CaptureHeaders)
				items1.InputLoki.Connections = []tfTypes.InputLokiConnections{}
				for connectionsCount28, connectionsItem28 := range itemsItem.InputLoki.Connections {
					var connections57 tfTypes.InputLokiConnections
					connections57.Output = types.StringValue(connectionsItem28.Output)
					connections57.Pipeline = types.StringPointerValue(connectionsItem28.Pipeline)
					if connectionsCount28+1 > len(items1.InputLoki.Connections) {
						items1.InputLoki.Connections = append(items1.InputLoki.Connections, connections57)
					} else {
						items1.InputLoki.Connections[connectionsCount28].Output = connections57.Output
						items1.InputLoki.Connections[connectionsCount28].Pipeline = connections57.Pipeline
					}
				}
				items1.InputLoki.CredentialsSecret = types.StringPointerValue(itemsItem.InputLoki.CredentialsSecret)
				items1.InputLoki.Description = types.StringPointerValue(itemsItem.InputLoki.Description)
				items1.InputLoki.Disabled = types.BoolPointerValue(itemsItem.InputLoki.Disabled)
				items1.InputLoki.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputLoki.EnableHealthCheck)
				items1.InputLoki.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputLoki.EnableProxyHeader)
				items1.InputLoki.Environment = types.StringPointerValue(itemsItem.InputLoki.Environment)
				items1.InputLoki.Host = types.StringPointerValue(itemsItem.InputLoki.Host)
				items1.InputLoki.ID = types.StringPointerValue(itemsItem.InputLoki.ID)
				items1.InputLoki.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputLoki.IPAllowlistRegex)
				items1.InputLoki.IPDenylistRegex = types.StringPointerValue(itemsItem.InputLoki.IPDenylistRegex)
				if itemsItem.InputLoki.KeepAliveTimeout != nil {
					items1.InputLoki.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputLoki.KeepAliveTimeout)))
				} else {
					items1.InputLoki.KeepAliveTimeout = types.NumberNull()
				}
				items1.InputLoki.LoginURL = types.StringPointerValue(itemsItem.InputLoki.LoginURL)
				items1.InputLoki.LokiAPI = types.StringPointerValue(itemsItem.InputLoki.LokiAPI)
				if itemsItem.InputLoki.MaxActiveReq != nil {
					items1.InputLoki.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputLoki.MaxActiveReq)))
				} else {
					items1.InputLoki.MaxActiveReq = types.NumberNull()
				}
				items1.InputLoki.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputLoki.MaxRequestsPerSocket)
				items1.InputLoki.Metadata = []tfTypes.InputLokiMetadata{}
				for metadataCount30, metadataItem30 := range itemsItem.InputLoki.Metadata {
					var metadata61 tfTypes.InputLokiMetadata
					metadata61.Name = types.StringValue(metadataItem30.Name)
					metadata61.Value = types.StringValue(metadataItem30.Value)
					if metadataCount30+1 > len(items1.InputLoki.Metadata) {
						items1.InputLoki.Metadata = append(items1.InputLoki.Metadata, metadata61)
					} else {
						items1.InputLoki.Metadata[metadataCount30].Name = metadata61.Name
						items1.InputLoki.Metadata[metadataCount30].Value = metadata61.Value
					}
				}
				items1.InputLoki.OauthHeaders = []tfTypes.InputLokiOauthHeaders{}
				for oauthHeadersCount4, oauthHeadersItem4 := range itemsItem.InputLoki.OauthHeaders {
					var oauthHeaders9 tfTypes.InputLokiOauthHeaders
					oauthHeaders9.Name = types.StringValue(oauthHeadersItem4.Name)
					oauthHeaders9.Value = types.StringValue(oauthHeadersItem4.Value)
					if oauthHeadersCount4+1 > len(items1.InputLoki.OauthHeaders) {
						items1.InputLoki.OauthHeaders = append(items1.InputLoki.OauthHeaders, oauthHeaders9)
					} else {
						items1.InputLoki.OauthHeaders[oauthHeadersCount4].Name = oauthHeaders9.Name
						items1.InputLoki.OauthHeaders[oauthHeadersCount4].Value = oauthHeaders9.Value
					}
				}
				items1.InputLoki.OauthParams = []tfTypes.InputLokiOauthParams{}
				for oauthParamsCount4, oauthParamsItem4 := range itemsItem.InputLoki.OauthParams {
					var oauthParams9 tfTypes.InputLokiOauthParams
					oauthParams9.Name = types.StringValue(oauthParamsItem4.Name)
					oauthParams9.Value = types.StringValue(oauthParamsItem4.Value)
					if oauthParamsCount4+1 > len(items1.InputLoki.OauthParams) {
						items1.InputLoki.OauthParams = append(items1.InputLoki.OauthParams, oauthParams9)
					} else {
						items1.InputLoki.OauthParams[oauthParamsCount4].Name = oauthParams9.Name
						items1.InputLoki.OauthParams[oauthParamsCount4].Value = oauthParams9.Value
					}
				}
				items1.InputLoki.Password = types.StringPointerValue(itemsItem.InputLoki.Password)
				items1.InputLoki.Pipeline = types.StringPointerValue(itemsItem.InputLoki.Pipeline)
				items1.InputLoki.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputLoki.Port)))
				if itemsItem.InputLoki.Pq == nil {
					items1.InputLoki.Pq = nil
				} else {
					items1.InputLoki.Pq = &tfTypes.InputLokiPq{}
					if itemsItem.InputLoki.Pq.CommitFrequency != nil {
						items1.InputLoki.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputLoki.Pq.CommitFrequency)))
					} else {
						items1.InputLoki.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputLoki.Pq.Compress != nil {
						items1.InputLoki.Pq.Compress = types.StringValue(string(*itemsItem.InputLoki.Pq.Compress))
					} else {
						items1.InputLoki.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputLoki.Pq.MaxBufferSize != nil {
						items1.InputLoki.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputLoki.Pq.MaxBufferSize)))
					} else {
						items1.InputLoki.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputLoki.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputLoki.Pq.MaxFileSize)
					items1.InputLoki.Pq.MaxSize = types.StringPointerValue(itemsItem.InputLoki.Pq.MaxSize)
					if itemsItem.InputLoki.Pq.Mode != nil {
						items1.InputLoki.Pq.Mode = types.StringValue(string(*itemsItem.InputLoki.Pq.Mode))
					} else {
						items1.InputLoki.Pq.Mode = types.StringNull()
					}
					items1.InputLoki.Pq.Path = types.StringPointerValue(itemsItem.InputLoki.Pq.Path)
				}
				items1.InputLoki.PqEnabled = types.BoolPointerValue(itemsItem.InputLoki.PqEnabled)
				if itemsItem.InputLoki.RequestTimeout != nil {
					items1.InputLoki.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputLoki.RequestTimeout)))
				} else {
					items1.InputLoki.RequestTimeout = types.NumberNull()
				}
				items1.InputLoki.Secret = types.StringPointerValue(itemsItem.InputLoki.Secret)
				items1.InputLoki.SecretParamName = types.StringPointerValue(itemsItem.InputLoki.SecretParamName)
				items1.InputLoki.SendToRoutes = types.BoolPointerValue(itemsItem.InputLoki.SendToRoutes)
				if itemsItem.InputLoki.SocketTimeout != nil {
					items1.InputLoki.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputLoki.SocketTimeout)))
				} else {
					items1.InputLoki.SocketTimeout = types.NumberNull()
				}
				items1.InputLoki.Streamtags = make([]types.String, 0, len(itemsItem.InputLoki.Streamtags))
				for _, v := range itemsItem.InputLoki.Streamtags {
					items1.InputLoki.Streamtags = append(items1.InputLoki.Streamtags, types.StringValue(v))
				}
				items1.InputLoki.TextSecret = types.StringPointerValue(itemsItem.InputLoki.TextSecret)
				if itemsItem.InputLoki.TLS == nil {
					items1.InputLoki.TLS = nil
				} else {
					items1.InputLoki.TLS = &tfTypes.InputLokiTLSSettingsServerSide{}
					items1.InputLoki.TLS.CaPath = types.StringPointerValue(itemsItem.InputLoki.TLS.CaPath)
					items1.InputLoki.TLS.CertificateName = types.StringPointerValue(itemsItem.InputLoki.TLS.CertificateName)
					items1.InputLoki.TLS.CertPath = types.StringPointerValue(itemsItem.InputLoki.TLS.CertPath)
					if itemsItem.InputLoki.TLS.CommonNameRegex == nil {
						items1.InputLoki.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult10, _ := json.Marshal(itemsItem.InputLoki.TLS.CommonNameRegex)
						items1.InputLoki.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult10))
					}
					items1.InputLoki.TLS.Disabled = types.BoolPointerValue(itemsItem.InputLoki.TLS.Disabled)
					if itemsItem.InputLoki.TLS.MaxVersion != nil {
						items1.InputLoki.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputLoki.TLS.MaxVersion))
					} else {
						items1.InputLoki.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputLoki.TLS.MinVersion != nil {
						items1.InputLoki.TLS.MinVersion = types.StringValue(string(*itemsItem.InputLoki.TLS.MinVersion))
					} else {
						items1.InputLoki.TLS.MinVersion = types.StringNull()
					}
					items1.InputLoki.TLS.Passphrase = types.StringPointerValue(itemsItem.InputLoki.TLS.Passphrase)
					items1.InputLoki.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputLoki.TLS.PrivKeyPath)
					if itemsItem.InputLoki.TLS.RejectUnauthorized == nil {
						items1.InputLoki.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult10, _ := json.Marshal(itemsItem.InputLoki.TLS.RejectUnauthorized)
						items1.InputLoki.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult10))
					}
					items1.InputLoki.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputLoki.TLS.RequestCert)
				}
				items1.InputLoki.Token = types.StringPointerValue(itemsItem.InputLoki.Token)
				items1.InputLoki.TokenAttributeName = types.StringPointerValue(itemsItem.InputLoki.TokenAttributeName)
				if itemsItem.InputLoki.TokenTimeoutSecs != nil {
					items1.InputLoki.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputLoki.TokenTimeoutSecs)))
				} else {
					items1.InputLoki.TokenTimeoutSecs = types.NumberNull()
				}
				if itemsItem.InputLoki.Type != nil {
					items1.InputLoki.Type = types.StringValue(string(*itemsItem.InputLoki.Type))
				} else {
					items1.InputLoki.Type = types.StringNull()
				}
				items1.InputLoki.Username = types.StringPointerValue(itemsItem.InputLoki.Username)
			}
			if itemsItem.InputMetrics != nil {
				items1.InputMetrics = &tfTypes.InputMetrics{}
				items1.InputMetrics.Connections = []tfTypes.InputMetricsConnections{}
				for connectionsCount29, connectionsItem29 := range itemsItem.InputMetrics.Connections {
					var connections59 tfTypes.InputMetricsConnections
					connections59.Output = types.StringValue(connectionsItem29.Output)
					connections59.Pipeline = types.StringPointerValue(connectionsItem29.Pipeline)
					if connectionsCount29+1 > len(items1.InputMetrics.Connections) {
						items1.InputMetrics.Connections = append(items1.InputMetrics.Connections, connections59)
					} else {
						items1.InputMetrics.Connections[connectionsCount29].Output = connections59.Output
						items1.InputMetrics.Connections[connectionsCount29].Pipeline = connections59.Pipeline
					}
				}
				items1.InputMetrics.Description = types.StringPointerValue(itemsItem.InputMetrics.Description)
				items1.InputMetrics.Disabled = types.BoolPointerValue(itemsItem.InputMetrics.Disabled)
				items1.InputMetrics.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputMetrics.EnableProxyHeader)
				items1.InputMetrics.Environment = types.StringPointerValue(itemsItem.InputMetrics.Environment)
				items1.InputMetrics.Host = types.StringPointerValue(itemsItem.InputMetrics.Host)
				items1.InputMetrics.ID = types.StringPointerValue(itemsItem.InputMetrics.ID)
				items1.InputMetrics.IPWhitelistRegex = types.StringPointerValue(itemsItem.InputMetrics.IPWhitelistRegex)
				if itemsItem.InputMetrics.MaxBufferSize != nil {
					items1.InputMetrics.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMetrics.MaxBufferSize)))
				} else {
					items1.InputMetrics.MaxBufferSize = types.NumberNull()
				}
				items1.InputMetrics.Metadata = []tfTypes.InputMetricsMetadata{}
				for metadataCount31, metadataItem31 := range itemsItem.InputMetrics.Metadata {
					var metadata63 tfTypes.InputMetricsMetadata
					metadata63.Name = types.StringValue(metadataItem31.Name)
					metadata63.Value = types.StringValue(metadataItem31.Value)
					if metadataCount31+1 > len(items1.InputMetrics.Metadata) {
						items1.InputMetrics.Metadata = append(items1.InputMetrics.Metadata, metadata63)
					} else {
						items1.InputMetrics.Metadata[metadataCount31].Name = metadata63.Name
						items1.InputMetrics.Metadata[metadataCount31].Value = metadata63.Value
					}
				}
				items1.InputMetrics.Pipeline = types.StringPointerValue(itemsItem.InputMetrics.Pipeline)
				if itemsItem.InputMetrics.Pq == nil {
					items1.InputMetrics.Pq = nil
				} else {
					items1.InputMetrics.Pq = &tfTypes.InputMetricsPq{}
					if itemsItem.InputMetrics.Pq.CommitFrequency != nil {
						items1.InputMetrics.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMetrics.Pq.CommitFrequency)))
					} else {
						items1.InputMetrics.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputMetrics.Pq.Compress != nil {
						items1.InputMetrics.Pq.Compress = types.StringValue(string(*itemsItem.InputMetrics.Pq.Compress))
					} else {
						items1.InputMetrics.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputMetrics.Pq.MaxBufferSize != nil {
						items1.InputMetrics.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMetrics.Pq.MaxBufferSize)))
					} else {
						items1.InputMetrics.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputMetrics.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputMetrics.Pq.MaxFileSize)
					items1.InputMetrics.Pq.MaxSize = types.StringPointerValue(itemsItem.InputMetrics.Pq.MaxSize)
					if itemsItem.InputMetrics.Pq.Mode != nil {
						items1.InputMetrics.Pq.Mode = types.StringValue(string(*itemsItem.InputMetrics.Pq.Mode))
					} else {
						items1.InputMetrics.Pq.Mode = types.StringNull()
					}
					items1.InputMetrics.Pq.Path = types.StringPointerValue(itemsItem.InputMetrics.Pq.Path)
				}
				items1.InputMetrics.PqEnabled = types.BoolPointerValue(itemsItem.InputMetrics.PqEnabled)
				items1.InputMetrics.SendToRoutes = types.BoolPointerValue(itemsItem.InputMetrics.SendToRoutes)
				items1.InputMetrics.Streamtags = make([]types.String, 0, len(itemsItem.InputMetrics.Streamtags))
				for _, v := range itemsItem.InputMetrics.Streamtags {
					items1.InputMetrics.Streamtags = append(items1.InputMetrics.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputMetrics.TCPPort != nil {
					items1.InputMetrics.TCPPort = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMetrics.TCPPort)))
				} else {
					items1.InputMetrics.TCPPort = types.NumberNull()
				}
				if itemsItem.InputMetrics.TLS == nil {
					items1.InputMetrics.TLS = nil
				} else {
					items1.InputMetrics.TLS = &tfTypes.InputMetricsTLSSettingsServerSide{}
					items1.InputMetrics.TLS.CaPath = types.StringPointerValue(itemsItem.InputMetrics.TLS.CaPath)
					items1.InputMetrics.TLS.CertificateName = types.StringPointerValue(itemsItem.InputMetrics.TLS.CertificateName)
					items1.InputMetrics.TLS.CertPath = types.StringPointerValue(itemsItem.InputMetrics.TLS.CertPath)
					if itemsItem.InputMetrics.TLS.CommonNameRegex == nil {
						items1.InputMetrics.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult11, _ := json.Marshal(itemsItem.InputMetrics.TLS.CommonNameRegex)
						items1.InputMetrics.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult11))
					}
					items1.InputMetrics.TLS.Disabled = types.BoolPointerValue(itemsItem.InputMetrics.TLS.Disabled)
					if itemsItem.InputMetrics.TLS.MaxVersion != nil {
						items1.InputMetrics.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputMetrics.TLS.MaxVersion))
					} else {
						items1.InputMetrics.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputMetrics.TLS.MinVersion != nil {
						items1.InputMetrics.TLS.MinVersion = types.StringValue(string(*itemsItem.InputMetrics.TLS.MinVersion))
					} else {
						items1.InputMetrics.TLS.MinVersion = types.StringNull()
					}
					items1.InputMetrics.TLS.Passphrase = types.StringPointerValue(itemsItem.InputMetrics.TLS.Passphrase)
					items1.InputMetrics.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputMetrics.TLS.PrivKeyPath)
					if itemsItem.InputMetrics.TLS.RejectUnauthorized == nil {
						items1.InputMetrics.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult11, _ := json.Marshal(itemsItem.InputMetrics.TLS.RejectUnauthorized)
						items1.InputMetrics.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult11))
					}
					items1.InputMetrics.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputMetrics.TLS.RequestCert)
				}
				items1.InputMetrics.Type = types.StringValue(string(itemsItem.InputMetrics.Type))
				if itemsItem.InputMetrics.UDPPort != nil {
					items1.InputMetrics.UDPPort = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMetrics.UDPPort)))
				} else {
					items1.InputMetrics.UDPPort = types.NumberNull()
				}
				if itemsItem.InputMetrics.UDPSocketRxBufSize != nil {
					items1.InputMetrics.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMetrics.UDPSocketRxBufSize)))
				} else {
					items1.InputMetrics.UDPSocketRxBufSize = types.NumberNull()
				}
			}
			if itemsItem.InputModelDrivenTelemetry != nil {
				items1.InputModelDrivenTelemetry = &tfTypes.InputModelDrivenTelemetry{}
				items1.InputModelDrivenTelemetry.Connections = []tfTypes.InputModelDrivenTelemetryConnections{}
				for connectionsCount30, connectionsItem30 := range itemsItem.InputModelDrivenTelemetry.Connections {
					var connections61 tfTypes.InputModelDrivenTelemetryConnections
					connections61.Output = types.StringValue(connectionsItem30.Output)
					connections61.Pipeline = types.StringPointerValue(connectionsItem30.Pipeline)
					if connectionsCount30+1 > len(items1.InputModelDrivenTelemetry.Connections) {
						items1.InputModelDrivenTelemetry.Connections = append(items1.InputModelDrivenTelemetry.Connections, connections61)
					} else {
						items1.InputModelDrivenTelemetry.Connections[connectionsCount30].Output = connections61.Output
						items1.InputModelDrivenTelemetry.Connections[connectionsCount30].Pipeline = connections61.Pipeline
					}
				}
				items1.InputModelDrivenTelemetry.Description = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.Description)
				items1.InputModelDrivenTelemetry.Disabled = types.BoolPointerValue(itemsItem.InputModelDrivenTelemetry.Disabled)
				items1.InputModelDrivenTelemetry.Environment = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.Environment)
				items1.InputModelDrivenTelemetry.Host = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.Host)
				items1.InputModelDrivenTelemetry.ID = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.ID)
				if itemsItem.InputModelDrivenTelemetry.MaxActiveCxn != nil {
					items1.InputModelDrivenTelemetry.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*itemsItem.InputModelDrivenTelemetry.MaxActiveCxn)))
				} else {
					items1.InputModelDrivenTelemetry.MaxActiveCxn = types.NumberNull()
				}
				items1.InputModelDrivenTelemetry.Metadata = []tfTypes.InputModelDrivenTelemetryMetadata{}
				for metadataCount32, metadataItem32 := range itemsItem.InputModelDrivenTelemetry.Metadata {
					var metadata65 tfTypes.InputModelDrivenTelemetryMetadata
					metadata65.Name = types.StringValue(metadataItem32.Name)
					metadata65.Value = types.StringValue(metadataItem32.Value)
					if metadataCount32+1 > len(items1.InputModelDrivenTelemetry.Metadata) {
						items1.InputModelDrivenTelemetry.Metadata = append(items1.InputModelDrivenTelemetry.Metadata, metadata65)
					} else {
						items1.InputModelDrivenTelemetry.Metadata[metadataCount32].Name = metadata65.Name
						items1.InputModelDrivenTelemetry.Metadata[metadataCount32].Value = metadata65.Value
					}
				}
				items1.InputModelDrivenTelemetry.Pipeline = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.Pipeline)
				if itemsItem.InputModelDrivenTelemetry.Port != nil {
					items1.InputModelDrivenTelemetry.Port = types.NumberValue(big.NewFloat(float64(*itemsItem.InputModelDrivenTelemetry.Port)))
				} else {
					items1.InputModelDrivenTelemetry.Port = types.NumberNull()
				}
				if itemsItem.InputModelDrivenTelemetry.Pq == nil {
					items1.InputModelDrivenTelemetry.Pq = nil
				} else {
					items1.InputModelDrivenTelemetry.Pq = &tfTypes.InputModelDrivenTelemetryPq{}
					if itemsItem.InputModelDrivenTelemetry.Pq.CommitFrequency != nil {
						items1.InputModelDrivenTelemetry.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputModelDrivenTelemetry.Pq.CommitFrequency)))
					} else {
						items1.InputModelDrivenTelemetry.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputModelDrivenTelemetry.Pq.Compress != nil {
						items1.InputModelDrivenTelemetry.Pq.Compress = types.StringValue(string(*itemsItem.InputModelDrivenTelemetry.Pq.Compress))
					} else {
						items1.InputModelDrivenTelemetry.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputModelDrivenTelemetry.Pq.MaxBufferSize != nil {
						items1.InputModelDrivenTelemetry.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputModelDrivenTelemetry.Pq.MaxBufferSize)))
					} else {
						items1.InputModelDrivenTelemetry.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputModelDrivenTelemetry.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.Pq.MaxFileSize)
					items1.InputModelDrivenTelemetry.Pq.MaxSize = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.Pq.MaxSize)
					if itemsItem.InputModelDrivenTelemetry.Pq.Mode != nil {
						items1.InputModelDrivenTelemetry.Pq.Mode = types.StringValue(string(*itemsItem.InputModelDrivenTelemetry.Pq.Mode))
					} else {
						items1.InputModelDrivenTelemetry.Pq.Mode = types.StringNull()
					}
					items1.InputModelDrivenTelemetry.Pq.Path = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.Pq.Path)
				}
				items1.InputModelDrivenTelemetry.PqEnabled = types.BoolPointerValue(itemsItem.InputModelDrivenTelemetry.PqEnabled)
				items1.InputModelDrivenTelemetry.SendToRoutes = types.BoolPointerValue(itemsItem.InputModelDrivenTelemetry.SendToRoutes)
				if itemsItem.InputModelDrivenTelemetry.ShutdownTimeoutMs != nil {
					items1.InputModelDrivenTelemetry.ShutdownTimeoutMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputModelDrivenTelemetry.ShutdownTimeoutMs)))
				} else {
					items1.InputModelDrivenTelemetry.ShutdownTimeoutMs = types.NumberNull()
				}
				items1.InputModelDrivenTelemetry.Streamtags = make([]types.String, 0, len(itemsItem.InputModelDrivenTelemetry.Streamtags))
				for _, v := range itemsItem.InputModelDrivenTelemetry.Streamtags {
					items1.InputModelDrivenTelemetry.Streamtags = append(items1.InputModelDrivenTelemetry.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputModelDrivenTelemetry.TLS == nil {
					items1.InputModelDrivenTelemetry.TLS = nil
				} else {
					items1.InputModelDrivenTelemetry.TLS = &tfTypes.InputModelDrivenTelemetryTLSSettingsServerSide{}
					items1.InputModelDrivenTelemetry.TLS.CaPath = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.TLS.CaPath)
					items1.InputModelDrivenTelemetry.TLS.CertificateName = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.TLS.CertificateName)
					items1.InputModelDrivenTelemetry.TLS.CertPath = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.TLS.CertPath)
					if itemsItem.InputModelDrivenTelemetry.TLS.CommonNameRegex == nil {
						items1.InputModelDrivenTelemetry.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult12, _ := json.Marshal(itemsItem.InputModelDrivenTelemetry.TLS.CommonNameRegex)
						items1.InputModelDrivenTelemetry.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult12))
					}
					items1.InputModelDrivenTelemetry.TLS.Disabled = types.BoolPointerValue(itemsItem.InputModelDrivenTelemetry.TLS.Disabled)
					if itemsItem.InputModelDrivenTelemetry.TLS.MaxVersion != nil {
						items1.InputModelDrivenTelemetry.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputModelDrivenTelemetry.TLS.MaxVersion))
					} else {
						items1.InputModelDrivenTelemetry.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputModelDrivenTelemetry.TLS.MinVersion != nil {
						items1.InputModelDrivenTelemetry.TLS.MinVersion = types.StringValue(string(*itemsItem.InputModelDrivenTelemetry.TLS.MinVersion))
					} else {
						items1.InputModelDrivenTelemetry.TLS.MinVersion = types.StringNull()
					}
					items1.InputModelDrivenTelemetry.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputModelDrivenTelemetry.TLS.PrivKeyPath)
					if itemsItem.InputModelDrivenTelemetry.TLS.RejectUnauthorized == nil {
						items1.InputModelDrivenTelemetry.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult12, _ := json.Marshal(itemsItem.InputModelDrivenTelemetry.TLS.RejectUnauthorized)
						items1.InputModelDrivenTelemetry.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult12))
					}
					items1.InputModelDrivenTelemetry.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputModelDrivenTelemetry.TLS.RequestCert)
				}
				if itemsItem.InputModelDrivenTelemetry.Type != nil {
					items1.InputModelDrivenTelemetry.Type = types.StringValue(string(*itemsItem.InputModelDrivenTelemetry.Type))
				} else {
					items1.InputModelDrivenTelemetry.Type = types.StringNull()
				}
			}
			if itemsItem.InputMsk != nil {
				items1.InputMsk = &tfTypes.InputMsk{}
				items1.InputMsk.AssumeRoleArn = types.StringPointerValue(itemsItem.InputMsk.AssumeRoleArn)
				items1.InputMsk.AssumeRoleExternalID = types.StringPointerValue(itemsItem.InputMsk.AssumeRoleExternalID)
				if itemsItem.InputMsk.AuthenticationTimeout != nil {
					items1.InputMsk.AuthenticationTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.AuthenticationTimeout)))
				} else {
					items1.InputMsk.AuthenticationTimeout = types.NumberNull()
				}
				if itemsItem.InputMsk.AutoCommitInterval != nil {
					items1.InputMsk.AutoCommitInterval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.AutoCommitInterval)))
				} else {
					items1.InputMsk.AutoCommitInterval = types.NumberNull()
				}
				if itemsItem.InputMsk.AutoCommitThreshold != nil {
					items1.InputMsk.AutoCommitThreshold = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.AutoCommitThreshold)))
				} else {
					items1.InputMsk.AutoCommitThreshold = types.NumberNull()
				}
				items1.InputMsk.AwsAPIKey = types.StringPointerValue(itemsItem.InputMsk.AwsAPIKey)
				if itemsItem.InputMsk.AwsAuthenticationMethod != nil {
					items1.InputMsk.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.InputMsk.AwsAuthenticationMethod))
				} else {
					items1.InputMsk.AwsAuthenticationMethod = types.StringNull()
				}
				items1.InputMsk.AwsSecret = types.StringPointerValue(itemsItem.InputMsk.AwsSecret)
				items1.InputMsk.AwsSecretKey = types.StringPointerValue(itemsItem.InputMsk.AwsSecretKey)
				if itemsItem.InputMsk.BackoffRate != nil {
					items1.InputMsk.BackoffRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.BackoffRate)))
				} else {
					items1.InputMsk.BackoffRate = types.NumberNull()
				}
				items1.InputMsk.Brokers = make([]types.String, 0, len(itemsItem.InputMsk.Brokers))
				for _, v := range itemsItem.InputMsk.Brokers {
					items1.InputMsk.Brokers = append(items1.InputMsk.Brokers, types.StringValue(v))
				}
				items1.InputMsk.Connections = []tfTypes.InputMskConnections{}
				for connectionsCount31, connectionsItem31 := range itemsItem.InputMsk.Connections {
					var connections63 tfTypes.InputMskConnections
					connections63.Output = types.StringValue(connectionsItem31.Output)
					connections63.Pipeline = types.StringPointerValue(connectionsItem31.Pipeline)
					if connectionsCount31+1 > len(items1.InputMsk.Connections) {
						items1.InputMsk.Connections = append(items1.InputMsk.Connections, connections63)
					} else {
						items1.InputMsk.Connections[connectionsCount31].Output = connections63.Output
						items1.InputMsk.Connections[connectionsCount31].Pipeline = connections63.Pipeline
					}
				}
				if itemsItem.InputMsk.ConnectionTimeout != nil {
					items1.InputMsk.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.ConnectionTimeout)))
				} else {
					items1.InputMsk.ConnectionTimeout = types.NumberNull()
				}
				items1.InputMsk.Description = types.StringPointerValue(itemsItem.InputMsk.Description)
				items1.InputMsk.Disabled = types.BoolPointerValue(itemsItem.InputMsk.Disabled)
				if itemsItem.InputMsk.DurationSeconds != nil {
					items1.InputMsk.DurationSeconds = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.DurationSeconds)))
				} else {
					items1.InputMsk.DurationSeconds = types.NumberNull()
				}
				items1.InputMsk.EnableAssumeRole = types.BoolPointerValue(itemsItem.InputMsk.EnableAssumeRole)
				items1.InputMsk.Endpoint = types.StringPointerValue(itemsItem.InputMsk.Endpoint)
				items1.InputMsk.Environment = types.StringPointerValue(itemsItem.InputMsk.Environment)
				items1.InputMsk.FromBeginning = types.BoolPointerValue(itemsItem.InputMsk.FromBeginning)
				items1.InputMsk.GroupID = types.StringPointerValue(itemsItem.InputMsk.GroupID)
				if itemsItem.InputMsk.HeartbeatInterval != nil {
					items1.InputMsk.HeartbeatInterval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.HeartbeatInterval)))
				} else {
					items1.InputMsk.HeartbeatInterval = types.NumberNull()
				}
				items1.InputMsk.ID = types.StringPointerValue(itemsItem.InputMsk.ID)
				if itemsItem.InputMsk.InitialBackoff != nil {
					items1.InputMsk.InitialBackoff = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.InitialBackoff)))
				} else {
					items1.InputMsk.InitialBackoff = types.NumberNull()
				}
				if itemsItem.InputMsk.KafkaSchemaRegistry == nil {
					items1.InputMsk.KafkaSchemaRegistry = nil
				} else {
					items1.InputMsk.KafkaSchemaRegistry = &tfTypes.InputMskKafkaSchemaRegistryAuthentication{}
					if itemsItem.InputMsk.KafkaSchemaRegistry.Auth == nil {
						items1.InputMsk.KafkaSchemaRegistry.Auth = nil
					} else {
						items1.InputMsk.KafkaSchemaRegistry.Auth = &tfTypes.InputMskAuth{}
						items1.InputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret)
						items1.InputMsk.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.Auth.Disabled)
					}
					if itemsItem.InputMsk.KafkaSchemaRegistry.ConnectionTimeout != nil {
						items1.InputMsk.KafkaSchemaRegistry.ConnectionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.KafkaSchemaRegistry.ConnectionTimeout)))
					} else {
						items1.InputMsk.KafkaSchemaRegistry.ConnectionTimeout = types.NumberNull()
					}
					items1.InputMsk.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.Disabled)
					if itemsItem.InputMsk.KafkaSchemaRegistry.MaxRetries != nil {
						items1.InputMsk.KafkaSchemaRegistry.MaxRetries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.KafkaSchemaRegistry.MaxRetries)))
					} else {
						items1.InputMsk.KafkaSchemaRegistry.MaxRetries = types.NumberNull()
					}
					if itemsItem.InputMsk.KafkaSchemaRegistry.RequestTimeout != nil {
						items1.InputMsk.KafkaSchemaRegistry.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.KafkaSchemaRegistry.RequestTimeout)))
					} else {
						items1.InputMsk.KafkaSchemaRegistry.RequestTimeout = types.NumberNull()
					}
					items1.InputMsk.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.SchemaRegistryURL)
					if itemsItem.InputMsk.KafkaSchemaRegistry.TLS == nil {
						items1.InputMsk.KafkaSchemaRegistry.TLS = nil
					} else {
						items1.InputMsk.KafkaSchemaRegistry.TLS = &tfTypes.InputMskKafkaSchemaRegistryTLSSettingsClientSide{}
						items1.InputMsk.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.TLS.CaPath)
						items1.InputMsk.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.TLS.CertificateName)
						items1.InputMsk.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.TLS.CertPath)
						items1.InputMsk.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.TLS.Disabled)
						if itemsItem.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion != nil {
							items1.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion))
						} else {
							items1.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
						}
						if itemsItem.InputMsk.KafkaSchemaRegistry.TLS.MinVersion != nil {
							items1.InputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*itemsItem.InputMsk.KafkaSchemaRegistry.TLS.MinVersion))
						} else {
							items1.InputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
						}
						items1.InputMsk.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.TLS.Passphrase)
						items1.InputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath)
						items1.InputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized)
						items1.InputMsk.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(itemsItem.InputMsk.KafkaSchemaRegistry.TLS.Servername)
					}
				}
				if itemsItem.InputMsk.MaxBackOff != nil {
					items1.InputMsk.MaxBackOff = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.MaxBackOff)))
				} else {
					items1.InputMsk.MaxBackOff = types.NumberNull()
				}
				if itemsItem.InputMsk.MaxBytes != nil {
					items1.InputMsk.MaxBytes = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.MaxBytes)))
				} else {
					items1.InputMsk.MaxBytes = types.NumberNull()
				}
				if itemsItem.InputMsk.MaxBytesPerPartition != nil {
					items1.InputMsk.MaxBytesPerPartition = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.MaxBytesPerPartition)))
				} else {
					items1.InputMsk.MaxBytesPerPartition = types.NumberNull()
				}
				if itemsItem.InputMsk.MaxRetries != nil {
					items1.InputMsk.MaxRetries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.MaxRetries)))
				} else {
					items1.InputMsk.MaxRetries = types.NumberNull()
				}
				if itemsItem.InputMsk.MaxSocketErrors != nil {
					items1.InputMsk.MaxSocketErrors = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.MaxSocketErrors)))
				} else {
					items1.InputMsk.MaxSocketErrors = types.NumberNull()
				}
				items1.InputMsk.Metadata = []tfTypes.InputMskMetadata{}
				for metadataCount33, metadataItem33 := range itemsItem.InputMsk.Metadata {
					var metadata67 tfTypes.InputMskMetadata
					metadata67.Name = types.StringValue(metadataItem33.Name)
					metadata67.Value = types.StringValue(metadataItem33.Value)
					if metadataCount33+1 > len(items1.InputMsk.Metadata) {
						items1.InputMsk.Metadata = append(items1.InputMsk.Metadata, metadata67)
					} else {
						items1.InputMsk.Metadata[metadataCount33].Name = metadata67.Name
						items1.InputMsk.Metadata[metadataCount33].Value = metadata67.Value
					}
				}
				items1.InputMsk.Pipeline = types.StringPointerValue(itemsItem.InputMsk.Pipeline)
				if itemsItem.InputMsk.Pq == nil {
					items1.InputMsk.Pq = nil
				} else {
					items1.InputMsk.Pq = &tfTypes.InputMskPq{}
					if itemsItem.InputMsk.Pq.CommitFrequency != nil {
						items1.InputMsk.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.Pq.CommitFrequency)))
					} else {
						items1.InputMsk.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputMsk.Pq.Compress != nil {
						items1.InputMsk.Pq.Compress = types.StringValue(string(*itemsItem.InputMsk.Pq.Compress))
					} else {
						items1.InputMsk.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputMsk.Pq.MaxBufferSize != nil {
						items1.InputMsk.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.Pq.MaxBufferSize)))
					} else {
						items1.InputMsk.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputMsk.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputMsk.Pq.MaxFileSize)
					items1.InputMsk.Pq.MaxSize = types.StringPointerValue(itemsItem.InputMsk.Pq.MaxSize)
					if itemsItem.InputMsk.Pq.Mode != nil {
						items1.InputMsk.Pq.Mode = types.StringValue(string(*itemsItem.InputMsk.Pq.Mode))
					} else {
						items1.InputMsk.Pq.Mode = types.StringNull()
					}
					items1.InputMsk.Pq.Path = types.StringPointerValue(itemsItem.InputMsk.Pq.Path)
				}
				items1.InputMsk.PqEnabled = types.BoolPointerValue(itemsItem.InputMsk.PqEnabled)
				if itemsItem.InputMsk.ReauthenticationThreshold != nil {
					items1.InputMsk.ReauthenticationThreshold = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.ReauthenticationThreshold)))
				} else {
					items1.InputMsk.ReauthenticationThreshold = types.NumberNull()
				}
				if itemsItem.InputMsk.RebalanceTimeout != nil {
					items1.InputMsk.RebalanceTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.RebalanceTimeout)))
				} else {
					items1.InputMsk.RebalanceTimeout = types.NumberNull()
				}
				items1.InputMsk.Region = types.StringValue(itemsItem.InputMsk.Region)
				items1.InputMsk.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputMsk.RejectUnauthorized)
				if itemsItem.InputMsk.RequestTimeout != nil {
					items1.InputMsk.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.RequestTimeout)))
				} else {
					items1.InputMsk.RequestTimeout = types.NumberNull()
				}
				items1.InputMsk.ReuseConnections = types.BoolPointerValue(itemsItem.InputMsk.ReuseConnections)
				items1.InputMsk.SendToRoutes = types.BoolPointerValue(itemsItem.InputMsk.SendToRoutes)
				if itemsItem.InputMsk.SessionTimeout != nil {
					items1.InputMsk.SessionTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputMsk.SessionTimeout)))
				} else {
					items1.InputMsk.SessionTimeout = types.NumberNull()
				}
				if itemsItem.InputMsk.SignatureVersion != nil {
					items1.InputMsk.SignatureVersion = types.StringValue(string(*itemsItem.InputMsk.SignatureVersion))
				} else {
					items1.InputMsk.SignatureVersion = types.StringNull()
				}
				items1.InputMsk.Streamtags = make([]types.String, 0, len(itemsItem.InputMsk.Streamtags))
				for _, v := range itemsItem.InputMsk.Streamtags {
					items1.InputMsk.Streamtags = append(items1.InputMsk.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputMsk.TLS == nil {
					items1.InputMsk.TLS = nil
				} else {
					items1.InputMsk.TLS = &tfTypes.InputMskTLSSettingsClientSide{}
					items1.InputMsk.TLS.CaPath = types.StringPointerValue(itemsItem.InputMsk.TLS.CaPath)
					items1.InputMsk.TLS.CertificateName = types.StringPointerValue(itemsItem.InputMsk.TLS.CertificateName)
					items1.InputMsk.TLS.CertPath = types.StringPointerValue(itemsItem.InputMsk.TLS.CertPath)
					items1.InputMsk.TLS.Disabled = types.BoolPointerValue(itemsItem.InputMsk.TLS.Disabled)
					if itemsItem.InputMsk.TLS.MaxVersion != nil {
						items1.InputMsk.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputMsk.TLS.MaxVersion))
					} else {
						items1.InputMsk.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputMsk.TLS.MinVersion != nil {
						items1.InputMsk.TLS.MinVersion = types.StringValue(string(*itemsItem.InputMsk.TLS.MinVersion))
					} else {
						items1.InputMsk.TLS.MinVersion = types.StringNull()
					}
					items1.InputMsk.TLS.Passphrase = types.StringPointerValue(itemsItem.InputMsk.TLS.Passphrase)
					items1.InputMsk.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputMsk.TLS.PrivKeyPath)
					items1.InputMsk.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputMsk.TLS.RejectUnauthorized)
					items1.InputMsk.TLS.Servername = types.StringPointerValue(itemsItem.InputMsk.TLS.Servername)
				}
				items1.InputMsk.Topics = make([]types.String, 0, len(itemsItem.InputMsk.Topics))
				for _, v := range itemsItem.InputMsk.Topics {
					items1.InputMsk.Topics = append(items1.InputMsk.Topics, types.StringValue(v))
				}
				if itemsItem.InputMsk.Type != nil {
					items1.InputMsk.Type = types.StringValue(string(*itemsItem.InputMsk.Type))
				} else {
					items1.InputMsk.Type = types.StringNull()
				}
			}
			if itemsItem.InputNetflow != nil {
				items1.InputNetflow = &tfTypes.InputNetflow{}
				items1.InputNetflow.Connections = []tfTypes.InputNetflowConnections{}
				for connectionsCount32, connectionsItem32 := range itemsItem.InputNetflow.Connections {
					var connections65 tfTypes.InputNetflowConnections
					connections65.Output = types.StringValue(connectionsItem32.Output)
					connections65.Pipeline = types.StringPointerValue(connectionsItem32.Pipeline)
					if connectionsCount32+1 > len(items1.InputNetflow.Connections) {
						items1.InputNetflow.Connections = append(items1.InputNetflow.Connections, connections65)
					} else {
						items1.InputNetflow.Connections[connectionsCount32].Output = connections65.Output
						items1.InputNetflow.Connections[connectionsCount32].Pipeline = connections65.Pipeline
					}
				}
				items1.InputNetflow.Description = types.StringPointerValue(itemsItem.InputNetflow.Description)
				items1.InputNetflow.Disabled = types.BoolPointerValue(itemsItem.InputNetflow.Disabled)
				items1.InputNetflow.EnablePassThrough = types.BoolPointerValue(itemsItem.InputNetflow.EnablePassThrough)
				items1.InputNetflow.Environment = types.StringPointerValue(itemsItem.InputNetflow.Environment)
				items1.InputNetflow.Host = types.StringPointerValue(itemsItem.InputNetflow.Host)
				items1.InputNetflow.ID = types.StringPointerValue(itemsItem.InputNetflow.ID)
				items1.InputNetflow.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputNetflow.IPAllowlistRegex)
				items1.InputNetflow.IPDenylistRegex = types.StringPointerValue(itemsItem.InputNetflow.IPDenylistRegex)
				items1.InputNetflow.IpfixEnabled = types.BoolPointerValue(itemsItem.InputNetflow.IpfixEnabled)
				items1.InputNetflow.Metadata = []tfTypes.InputNetflowMetadata{}
				for metadataCount34, metadataItem34 := range itemsItem.InputNetflow.Metadata {
					var metadata69 tfTypes.InputNetflowMetadata
					metadata69.Name = types.StringValue(metadataItem34.Name)
					metadata69.Value = types.StringValue(metadataItem34.Value)
					if metadataCount34+1 > len(items1.InputNetflow.Metadata) {
						items1.InputNetflow.Metadata = append(items1.InputNetflow.Metadata, metadata69)
					} else {
						items1.InputNetflow.Metadata[metadataCount34].Name = metadata69.Name
						items1.InputNetflow.Metadata[metadataCount34].Value = metadata69.Value
					}
				}
				items1.InputNetflow.Pipeline = types.StringPointerValue(itemsItem.InputNetflow.Pipeline)
				if itemsItem.InputNetflow.Port != nil {
					items1.InputNetflow.Port = types.NumberValue(big.NewFloat(float64(*itemsItem.InputNetflow.Port)))
				} else {
					items1.InputNetflow.Port = types.NumberNull()
				}
				if itemsItem.InputNetflow.Pq == nil {
					items1.InputNetflow.Pq = nil
				} else {
					items1.InputNetflow.Pq = &tfTypes.InputNetflowPq{}
					if itemsItem.InputNetflow.Pq.CommitFrequency != nil {
						items1.InputNetflow.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputNetflow.Pq.CommitFrequency)))
					} else {
						items1.InputNetflow.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputNetflow.Pq.Compress != nil {
						items1.InputNetflow.Pq.Compress = types.StringValue(string(*itemsItem.InputNetflow.Pq.Compress))
					} else {
						items1.InputNetflow.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputNetflow.Pq.MaxBufferSize != nil {
						items1.InputNetflow.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputNetflow.Pq.MaxBufferSize)))
					} else {
						items1.InputNetflow.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputNetflow.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputNetflow.Pq.MaxFileSize)
					items1.InputNetflow.Pq.MaxSize = types.StringPointerValue(itemsItem.InputNetflow.Pq.MaxSize)
					if itemsItem.InputNetflow.Pq.Mode != nil {
						items1.InputNetflow.Pq.Mode = types.StringValue(string(*itemsItem.InputNetflow.Pq.Mode))
					} else {
						items1.InputNetflow.Pq.Mode = types.StringNull()
					}
					items1.InputNetflow.Pq.Path = types.StringPointerValue(itemsItem.InputNetflow.Pq.Path)
				}
				items1.InputNetflow.PqEnabled = types.BoolPointerValue(itemsItem.InputNetflow.PqEnabled)
				items1.InputNetflow.SendToRoutes = types.BoolPointerValue(itemsItem.InputNetflow.SendToRoutes)
				items1.InputNetflow.Streamtags = make([]types.String, 0, len(itemsItem.InputNetflow.Streamtags))
				for _, v := range itemsItem.InputNetflow.Streamtags {
					items1.InputNetflow.Streamtags = append(items1.InputNetflow.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputNetflow.TemplateCacheMinutes != nil {
					items1.InputNetflow.TemplateCacheMinutes = types.NumberValue(big.NewFloat(float64(*itemsItem.InputNetflow.TemplateCacheMinutes)))
				} else {
					items1.InputNetflow.TemplateCacheMinutes = types.NumberNull()
				}
				if itemsItem.InputNetflow.Type != nil {
					items1.InputNetflow.Type = types.StringValue(string(*itemsItem.InputNetflow.Type))
				} else {
					items1.InputNetflow.Type = types.StringNull()
				}
				if itemsItem.InputNetflow.UDPSocketRxBufSize != nil {
					items1.InputNetflow.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputNetflow.UDPSocketRxBufSize)))
				} else {
					items1.InputNetflow.UDPSocketRxBufSize = types.NumberNull()
				}
				items1.InputNetflow.V5Enabled = types.BoolPointerValue(itemsItem.InputNetflow.V5Enabled)
				items1.InputNetflow.V9Enabled = types.BoolPointerValue(itemsItem.InputNetflow.V9Enabled)
			}
			if itemsItem.InputOffice365Mgmt != nil {
				items1.InputOffice365Mgmt = &tfTypes.InputOffice365Mgmt{}
				items1.InputOffice365Mgmt.AppID = types.StringValue(itemsItem.InputOffice365Mgmt.AppID)
				if itemsItem.InputOffice365Mgmt.AuthType != nil {
					items1.InputOffice365Mgmt.AuthType = types.StringValue(string(*itemsItem.InputOffice365Mgmt.AuthType))
				} else {
					items1.InputOffice365Mgmt.AuthType = types.StringNull()
				}
				items1.InputOffice365Mgmt.ClientSecret = types.StringPointerValue(itemsItem.InputOffice365Mgmt.ClientSecret)
				items1.InputOffice365Mgmt.Connections = []tfTypes.InputOffice365MgmtConnections{}
				for connectionsCount33, connectionsItem33 := range itemsItem.InputOffice365Mgmt.Connections {
					var connections67 tfTypes.InputOffice365MgmtConnections
					connections67.Output = types.StringValue(connectionsItem33.Output)
					connections67.Pipeline = types.StringPointerValue(connectionsItem33.Pipeline)
					if connectionsCount33+1 > len(items1.InputOffice365Mgmt.Connections) {
						items1.InputOffice365Mgmt.Connections = append(items1.InputOffice365Mgmt.Connections, connections67)
					} else {
						items1.InputOffice365Mgmt.Connections[connectionsCount33].Output = connections67.Output
						items1.InputOffice365Mgmt.Connections[connectionsCount33].Pipeline = connections67.Pipeline
					}
				}
				items1.InputOffice365Mgmt.ContentConfig = []tfTypes.ContentConfig{}
				for contentConfigCount, contentConfigItem := range itemsItem.InputOffice365Mgmt.ContentConfig {
					var contentConfig1 tfTypes.ContentConfig
					contentConfig1.ContentType = types.StringPointerValue(contentConfigItem.ContentType)
					contentConfig1.Description = types.StringPointerValue(contentConfigItem.Description)
					contentConfig1.Enabled = types.BoolPointerValue(contentConfigItem.Enabled)
					if contentConfigItem.Interval != nil {
						contentConfig1.Interval = types.NumberValue(big.NewFloat(float64(*contentConfigItem.Interval)))
					} else {
						contentConfig1.Interval = types.NumberNull()
					}
					if contentConfigItem.LogLevel != nil {
						contentConfig1.LogLevel = types.StringValue(string(*contentConfigItem.LogLevel))
					} else {
						contentConfig1.LogLevel = types.StringNull()
					}
					if contentConfigCount+1 > len(items1.InputOffice365Mgmt.ContentConfig) {
						items1.InputOffice365Mgmt.ContentConfig = append(items1.InputOffice365Mgmt.ContentConfig, contentConfig1)
					} else {
						items1.InputOffice365Mgmt.ContentConfig[contentConfigCount].ContentType = contentConfig1.ContentType
						items1.InputOffice365Mgmt.ContentConfig[contentConfigCount].Description = contentConfig1.Description
						items1.InputOffice365Mgmt.ContentConfig[contentConfigCount].Enabled = contentConfig1.Enabled
						items1.InputOffice365Mgmt.ContentConfig[contentConfigCount].Interval = contentConfig1.Interval
						items1.InputOffice365Mgmt.ContentConfig[contentConfigCount].LogLevel = contentConfig1.LogLevel
					}
				}
				items1.InputOffice365Mgmt.Description = types.StringPointerValue(itemsItem.InputOffice365Mgmt.Description)
				items1.InputOffice365Mgmt.Disabled = types.BoolPointerValue(itemsItem.InputOffice365Mgmt.Disabled)
				items1.InputOffice365Mgmt.Environment = types.StringPointerValue(itemsItem.InputOffice365Mgmt.Environment)
				items1.InputOffice365Mgmt.ID = types.StringPointerValue(itemsItem.InputOffice365Mgmt.ID)
				if itemsItem.InputOffice365Mgmt.IngestionLag != nil {
					items1.InputOffice365Mgmt.IngestionLag = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Mgmt.IngestionLag)))
				} else {
					items1.InputOffice365Mgmt.IngestionLag = types.NumberNull()
				}
				items1.InputOffice365Mgmt.JobTimeout = types.StringPointerValue(itemsItem.InputOffice365Mgmt.JobTimeout)
				if itemsItem.InputOffice365Mgmt.KeepAliveTime != nil {
					items1.InputOffice365Mgmt.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Mgmt.KeepAliveTime)))
				} else {
					items1.InputOffice365Mgmt.KeepAliveTime = types.NumberNull()
				}
				if itemsItem.InputOffice365Mgmt.MaxMissedKeepAlives != nil {
					items1.InputOffice365Mgmt.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Mgmt.MaxMissedKeepAlives)))
				} else {
					items1.InputOffice365Mgmt.MaxMissedKeepAlives = types.NumberNull()
				}
				items1.InputOffice365Mgmt.Metadata = []tfTypes.InputOffice365MgmtMetadata{}
				for metadataCount35, metadataItem35 := range itemsItem.InputOffice365Mgmt.Metadata {
					var metadata71 tfTypes.InputOffice365MgmtMetadata
					metadata71.Name = types.StringValue(metadataItem35.Name)
					metadata71.Value = types.StringValue(metadataItem35.Value)
					if metadataCount35+1 > len(items1.InputOffice365Mgmt.Metadata) {
						items1.InputOffice365Mgmt.Metadata = append(items1.InputOffice365Mgmt.Metadata, metadata71)
					} else {
						items1.InputOffice365Mgmt.Metadata[metadataCount35].Name = metadata71.Name
						items1.InputOffice365Mgmt.Metadata[metadataCount35].Value = metadata71.Value
					}
				}
				items1.InputOffice365Mgmt.Pipeline = types.StringPointerValue(itemsItem.InputOffice365Mgmt.Pipeline)
				if itemsItem.InputOffice365Mgmt.PlanType != nil {
					items1.InputOffice365Mgmt.PlanType = types.StringValue(string(*itemsItem.InputOffice365Mgmt.PlanType))
				} else {
					items1.InputOffice365Mgmt.PlanType = types.StringNull()
				}
				if itemsItem.InputOffice365Mgmt.Pq == nil {
					items1.InputOffice365Mgmt.Pq = nil
				} else {
					items1.InputOffice365Mgmt.Pq = &tfTypes.InputOffice365MgmtPq{}
					if itemsItem.InputOffice365Mgmt.Pq.CommitFrequency != nil {
						items1.InputOffice365Mgmt.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Mgmt.Pq.CommitFrequency)))
					} else {
						items1.InputOffice365Mgmt.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputOffice365Mgmt.Pq.Compress != nil {
						items1.InputOffice365Mgmt.Pq.Compress = types.StringValue(string(*itemsItem.InputOffice365Mgmt.Pq.Compress))
					} else {
						items1.InputOffice365Mgmt.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputOffice365Mgmt.Pq.MaxBufferSize != nil {
						items1.InputOffice365Mgmt.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Mgmt.Pq.MaxBufferSize)))
					} else {
						items1.InputOffice365Mgmt.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputOffice365Mgmt.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputOffice365Mgmt.Pq.MaxFileSize)
					items1.InputOffice365Mgmt.Pq.MaxSize = types.StringPointerValue(itemsItem.InputOffice365Mgmt.Pq.MaxSize)
					if itemsItem.InputOffice365Mgmt.Pq.Mode != nil {
						items1.InputOffice365Mgmt.Pq.Mode = types.StringValue(string(*itemsItem.InputOffice365Mgmt.Pq.Mode))
					} else {
						items1.InputOffice365Mgmt.Pq.Mode = types.StringNull()
					}
					items1.InputOffice365Mgmt.Pq.Path = types.StringPointerValue(itemsItem.InputOffice365Mgmt.Pq.Path)
				}
				items1.InputOffice365Mgmt.PqEnabled = types.BoolPointerValue(itemsItem.InputOffice365Mgmt.PqEnabled)
				items1.InputOffice365Mgmt.PublisherIdentifier = types.StringPointerValue(itemsItem.InputOffice365Mgmt.PublisherIdentifier)
				if itemsItem.InputOffice365Mgmt.RetryRules == nil {
					items1.InputOffice365Mgmt.RetryRules = nil
				} else {
					items1.InputOffice365Mgmt.RetryRules = &tfTypes.InputOffice365MgmtRetryRules{}
					items1.InputOffice365Mgmt.RetryRules.Codes = make([]types.Number, 0, len(itemsItem.InputOffice365Mgmt.RetryRules.Codes))
					for _, v := range itemsItem.InputOffice365Mgmt.RetryRules.Codes {
						items1.InputOffice365Mgmt.RetryRules.Codes = append(items1.InputOffice365Mgmt.RetryRules.Codes, types.NumberValue(big.NewFloat(float64(v))))
					}
					items1.InputOffice365Mgmt.RetryRules.EnableHeader = types.BoolPointerValue(itemsItem.InputOffice365Mgmt.RetryRules.EnableHeader)
					if itemsItem.InputOffice365Mgmt.RetryRules.Interval != nil {
						items1.InputOffice365Mgmt.RetryRules.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Mgmt.RetryRules.Interval)))
					} else {
						items1.InputOffice365Mgmt.RetryRules.Interval = types.NumberNull()
					}
					if itemsItem.InputOffice365Mgmt.RetryRules.Limit != nil {
						items1.InputOffice365Mgmt.RetryRules.Limit = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Mgmt.RetryRules.Limit)))
					} else {
						items1.InputOffice365Mgmt.RetryRules.Limit = types.NumberNull()
					}
					if itemsItem.InputOffice365Mgmt.RetryRules.Multiplier != nil {
						items1.InputOffice365Mgmt.RetryRules.Multiplier = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Mgmt.RetryRules.Multiplier)))
					} else {
						items1.InputOffice365Mgmt.RetryRules.Multiplier = types.NumberNull()
					}
					items1.InputOffice365Mgmt.RetryRules.RetryConnectReset = types.BoolPointerValue(itemsItem.InputOffice365Mgmt.RetryRules.RetryConnectReset)
					items1.InputOffice365Mgmt.RetryRules.RetryConnectTimeout = types.BoolPointerValue(itemsItem.InputOffice365Mgmt.RetryRules.RetryConnectTimeout)
					if itemsItem.InputOffice365Mgmt.RetryRules.Type != nil {
						items1.InputOffice365Mgmt.RetryRules.Type = types.StringValue(string(*itemsItem.InputOffice365Mgmt.RetryRules.Type))
					} else {
						items1.InputOffice365Mgmt.RetryRules.Type = types.StringNull()
					}
				}
				items1.InputOffice365Mgmt.SendToRoutes = types.BoolPointerValue(itemsItem.InputOffice365Mgmt.SendToRoutes)
				items1.InputOffice365Mgmt.Streamtags = make([]types.String, 0, len(itemsItem.InputOffice365Mgmt.Streamtags))
				for _, v := range itemsItem.InputOffice365Mgmt.Streamtags {
					items1.InputOffice365Mgmt.Streamtags = append(items1.InputOffice365Mgmt.Streamtags, types.StringValue(v))
				}
				items1.InputOffice365Mgmt.TenantID = types.StringValue(itemsItem.InputOffice365Mgmt.TenantID)
				items1.InputOffice365Mgmt.TextSecret = types.StringPointerValue(itemsItem.InputOffice365Mgmt.TextSecret)
				if itemsItem.InputOffice365Mgmt.Timeout != nil {
					items1.InputOffice365Mgmt.Timeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Mgmt.Timeout)))
				} else {
					items1.InputOffice365Mgmt.Timeout = types.NumberNull()
				}
				items1.InputOffice365Mgmt.TTL = types.StringPointerValue(itemsItem.InputOffice365Mgmt.TTL)
				if itemsItem.InputOffice365Mgmt.Type != nil {
					items1.InputOffice365Mgmt.Type = types.StringValue(string(*itemsItem.InputOffice365Mgmt.Type))
				} else {
					items1.InputOffice365Mgmt.Type = types.StringNull()
				}
			}
			if itemsItem.InputOffice365MsgTrace != nil {
				items1.InputOffice365MsgTrace = &tfTypes.InputOffice365MsgTrace{}
				if itemsItem.InputOffice365MsgTrace.AuthType != nil {
					items1.InputOffice365MsgTrace.AuthType = types.StringValue(string(*itemsItem.InputOffice365MsgTrace.AuthType))
				} else {
					items1.InputOffice365MsgTrace.AuthType = types.StringNull()
				}
				if itemsItem.InputOffice365MsgTrace.CertOptions == nil {
					items1.InputOffice365MsgTrace.CertOptions = nil
				} else {
					items1.InputOffice365MsgTrace.CertOptions = &tfTypes.CertOptions{}
					items1.InputOffice365MsgTrace.CertOptions.CertificateName = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.CertOptions.CertificateName)
					items1.InputOffice365MsgTrace.CertOptions.CertPath = types.StringValue(itemsItem.InputOffice365MsgTrace.CertOptions.CertPath)
					items1.InputOffice365MsgTrace.CertOptions.Passphrase = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.CertOptions.Passphrase)
					items1.InputOffice365MsgTrace.CertOptions.PrivKeyPath = types.StringValue(itemsItem.InputOffice365MsgTrace.CertOptions.PrivKeyPath)
				}
				items1.InputOffice365MsgTrace.ClientID = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.ClientID)
				items1.InputOffice365MsgTrace.ClientSecret = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.ClientSecret)
				items1.InputOffice365MsgTrace.Connections = []tfTypes.InputOffice365MsgTraceConnections{}
				for connectionsCount34, connectionsItem34 := range itemsItem.InputOffice365MsgTrace.Connections {
					var connections69 tfTypes.InputOffice365MsgTraceConnections
					connections69.Output = types.StringValue(connectionsItem34.Output)
					connections69.Pipeline = types.StringPointerValue(connectionsItem34.Pipeline)
					if connectionsCount34+1 > len(items1.InputOffice365MsgTrace.Connections) {
						items1.InputOffice365MsgTrace.Connections = append(items1.InputOffice365MsgTrace.Connections, connections69)
					} else {
						items1.InputOffice365MsgTrace.Connections[connectionsCount34].Output = connections69.Output
						items1.InputOffice365MsgTrace.Connections[connectionsCount34].Pipeline = connections69.Pipeline
					}
				}
				items1.InputOffice365MsgTrace.CredentialsSecret = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.CredentialsSecret)
				items1.InputOffice365MsgTrace.Description = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.Description)
				items1.InputOffice365MsgTrace.Disabled = types.BoolPointerValue(itemsItem.InputOffice365MsgTrace.Disabled)
				items1.InputOffice365MsgTrace.DisableTimeFilter = types.BoolPointerValue(itemsItem.InputOffice365MsgTrace.DisableTimeFilter)
				items1.InputOffice365MsgTrace.EndDate = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.EndDate)
				items1.InputOffice365MsgTrace.Environment = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.Environment)
				items1.InputOffice365MsgTrace.ID = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.ID)
				if itemsItem.InputOffice365MsgTrace.Interval != nil {
					items1.InputOffice365MsgTrace.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365MsgTrace.Interval)))
				} else {
					items1.InputOffice365MsgTrace.Interval = types.NumberNull()
				}
				items1.InputOffice365MsgTrace.JobTimeout = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.JobTimeout)
				if itemsItem.InputOffice365MsgTrace.KeepAliveTime != nil {
					items1.InputOffice365MsgTrace.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365MsgTrace.KeepAliveTime)))
				} else {
					items1.InputOffice365MsgTrace.KeepAliveTime = types.NumberNull()
				}
				if itemsItem.InputOffice365MsgTrace.LogLevel != nil {
					items1.InputOffice365MsgTrace.LogLevel = types.StringValue(string(*itemsItem.InputOffice365MsgTrace.LogLevel))
				} else {
					items1.InputOffice365MsgTrace.LogLevel = types.StringNull()
				}
				if itemsItem.InputOffice365MsgTrace.MaxMissedKeepAlives != nil {
					items1.InputOffice365MsgTrace.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365MsgTrace.MaxMissedKeepAlives)))
				} else {
					items1.InputOffice365MsgTrace.MaxMissedKeepAlives = types.NumberNull()
				}
				if itemsItem.InputOffice365MsgTrace.MaxTaskReschedule != nil {
					items1.InputOffice365MsgTrace.MaxTaskReschedule = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365MsgTrace.MaxTaskReschedule)))
				} else {
					items1.InputOffice365MsgTrace.MaxTaskReschedule = types.NumberNull()
				}
				items1.InputOffice365MsgTrace.Metadata = []tfTypes.InputOffice365MsgTraceMetadata{}
				for metadataCount36, metadataItem36 := range itemsItem.InputOffice365MsgTrace.Metadata {
					var metadata73 tfTypes.InputOffice365MsgTraceMetadata
					metadata73.Name = types.StringValue(metadataItem36.Name)
					metadata73.Value = types.StringValue(metadataItem36.Value)
					if metadataCount36+1 > len(items1.InputOffice365MsgTrace.Metadata) {
						items1.InputOffice365MsgTrace.Metadata = append(items1.InputOffice365MsgTrace.Metadata, metadata73)
					} else {
						items1.InputOffice365MsgTrace.Metadata[metadataCount36].Name = metadata73.Name
						items1.InputOffice365MsgTrace.Metadata[metadataCount36].Value = metadata73.Value
					}
				}
				items1.InputOffice365MsgTrace.Password = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.Password)
				items1.InputOffice365MsgTrace.Pipeline = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.Pipeline)
				if itemsItem.InputOffice365MsgTrace.PlanType != nil {
					items1.InputOffice365MsgTrace.PlanType = types.StringValue(string(*itemsItem.InputOffice365MsgTrace.PlanType))
				} else {
					items1.InputOffice365MsgTrace.PlanType = types.StringNull()
				}
				if itemsItem.InputOffice365MsgTrace.Pq == nil {
					items1.InputOffice365MsgTrace.Pq = nil
				} else {
					items1.InputOffice365MsgTrace.Pq = &tfTypes.InputOffice365MsgTracePq{}
					if itemsItem.InputOffice365MsgTrace.Pq.CommitFrequency != nil {
						items1.InputOffice365MsgTrace.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365MsgTrace.Pq.CommitFrequency)))
					} else {
						items1.InputOffice365MsgTrace.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputOffice365MsgTrace.Pq.Compress != nil {
						items1.InputOffice365MsgTrace.Pq.Compress = types.StringValue(string(*itemsItem.InputOffice365MsgTrace.Pq.Compress))
					} else {
						items1.InputOffice365MsgTrace.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputOffice365MsgTrace.Pq.MaxBufferSize != nil {
						items1.InputOffice365MsgTrace.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365MsgTrace.Pq.MaxBufferSize)))
					} else {
						items1.InputOffice365MsgTrace.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputOffice365MsgTrace.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.Pq.MaxFileSize)
					items1.InputOffice365MsgTrace.Pq.MaxSize = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.Pq.MaxSize)
					if itemsItem.InputOffice365MsgTrace.Pq.Mode != nil {
						items1.InputOffice365MsgTrace.Pq.Mode = types.StringValue(string(*itemsItem.InputOffice365MsgTrace.Pq.Mode))
					} else {
						items1.InputOffice365MsgTrace.Pq.Mode = types.StringNull()
					}
					items1.InputOffice365MsgTrace.Pq.Path = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.Pq.Path)
				}
				items1.InputOffice365MsgTrace.PqEnabled = types.BoolPointerValue(itemsItem.InputOffice365MsgTrace.PqEnabled)
				items1.InputOffice365MsgTrace.RescheduleDroppedTasks = types.BoolPointerValue(itemsItem.InputOffice365MsgTrace.RescheduleDroppedTasks)
				items1.InputOffice365MsgTrace.Resource = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.Resource)
				if itemsItem.InputOffice365MsgTrace.RetryRules == nil {
					items1.InputOffice365MsgTrace.RetryRules = nil
				} else {
					items1.InputOffice365MsgTrace.RetryRules = &tfTypes.InputOffice365MsgTraceRetryRules{}
					items1.InputOffice365MsgTrace.RetryRules.Codes = make([]types.Number, 0, len(itemsItem.InputOffice365MsgTrace.RetryRules.Codes))
					for _, v := range itemsItem.InputOffice365MsgTrace.RetryRules.Codes {
						items1.InputOffice365MsgTrace.RetryRules.Codes = append(items1.InputOffice365MsgTrace.RetryRules.Codes, types.NumberValue(big.NewFloat(float64(v))))
					}
					items1.InputOffice365MsgTrace.RetryRules.EnableHeader = types.BoolPointerValue(itemsItem.InputOffice365MsgTrace.RetryRules.EnableHeader)
					if itemsItem.InputOffice365MsgTrace.RetryRules.Interval != nil {
						items1.InputOffice365MsgTrace.RetryRules.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365MsgTrace.RetryRules.Interval)))
					} else {
						items1.InputOffice365MsgTrace.RetryRules.Interval = types.NumberNull()
					}
					if itemsItem.InputOffice365MsgTrace.RetryRules.Limit != nil {
						items1.InputOffice365MsgTrace.RetryRules.Limit = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365MsgTrace.RetryRules.Limit)))
					} else {
						items1.InputOffice365MsgTrace.RetryRules.Limit = types.NumberNull()
					}
					if itemsItem.InputOffice365MsgTrace.RetryRules.Multiplier != nil {
						items1.InputOffice365MsgTrace.RetryRules.Multiplier = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365MsgTrace.RetryRules.Multiplier)))
					} else {
						items1.InputOffice365MsgTrace.RetryRules.Multiplier = types.NumberNull()
					}
					items1.InputOffice365MsgTrace.RetryRules.RetryConnectReset = types.BoolPointerValue(itemsItem.InputOffice365MsgTrace.RetryRules.RetryConnectReset)
					items1.InputOffice365MsgTrace.RetryRules.RetryConnectTimeout = types.BoolPointerValue(itemsItem.InputOffice365MsgTrace.RetryRules.RetryConnectTimeout)
					if itemsItem.InputOffice365MsgTrace.RetryRules.Type != nil {
						items1.InputOffice365MsgTrace.RetryRules.Type = types.StringValue(string(*itemsItem.InputOffice365MsgTrace.RetryRules.Type))
					} else {
						items1.InputOffice365MsgTrace.RetryRules.Type = types.StringNull()
					}
				}
				items1.InputOffice365MsgTrace.SendToRoutes = types.BoolPointerValue(itemsItem.InputOffice365MsgTrace.SendToRoutes)
				items1.InputOffice365MsgTrace.StartDate = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.StartDate)
				items1.InputOffice365MsgTrace.Streamtags = make([]types.String, 0, len(itemsItem.InputOffice365MsgTrace.Streamtags))
				for _, v := range itemsItem.InputOffice365MsgTrace.Streamtags {
					items1.InputOffice365MsgTrace.Streamtags = append(items1.InputOffice365MsgTrace.Streamtags, types.StringValue(v))
				}
				items1.InputOffice365MsgTrace.TenantID = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.TenantID)
				items1.InputOffice365MsgTrace.TextSecret = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.TextSecret)
				if itemsItem.InputOffice365MsgTrace.Timeout != nil {
					items1.InputOffice365MsgTrace.Timeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365MsgTrace.Timeout)))
				} else {
					items1.InputOffice365MsgTrace.Timeout = types.NumberNull()
				}
				items1.InputOffice365MsgTrace.TTL = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.TTL)
				if itemsItem.InputOffice365MsgTrace.Type != nil {
					items1.InputOffice365MsgTrace.Type = types.StringValue(string(*itemsItem.InputOffice365MsgTrace.Type))
				} else {
					items1.InputOffice365MsgTrace.Type = types.StringNull()
				}
				items1.InputOffice365MsgTrace.URL = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.URL)
				items1.InputOffice365MsgTrace.Username = types.StringPointerValue(itemsItem.InputOffice365MsgTrace.Username)
			}
			if itemsItem.InputOffice365Service != nil {
				items1.InputOffice365Service = &tfTypes.InputOffice365Service{}
				items1.InputOffice365Service.AppID = types.StringValue(itemsItem.InputOffice365Service.AppID)
				if itemsItem.InputOffice365Service.AuthType != nil {
					items1.InputOffice365Service.AuthType = types.StringValue(string(*itemsItem.InputOffice365Service.AuthType))
				} else {
					items1.InputOffice365Service.AuthType = types.StringNull()
				}
				items1.InputOffice365Service.ClientSecret = types.StringPointerValue(itemsItem.InputOffice365Service.ClientSecret)
				items1.InputOffice365Service.Connections = []tfTypes.InputOffice365ServiceConnections{}
				for connectionsCount35, connectionsItem35 := range itemsItem.InputOffice365Service.Connections {
					var connections71 tfTypes.InputOffice365ServiceConnections
					connections71.Output = types.StringValue(connectionsItem35.Output)
					connections71.Pipeline = types.StringPointerValue(connectionsItem35.Pipeline)
					if connectionsCount35+1 > len(items1.InputOffice365Service.Connections) {
						items1.InputOffice365Service.Connections = append(items1.InputOffice365Service.Connections, connections71)
					} else {
						items1.InputOffice365Service.Connections[connectionsCount35].Output = connections71.Output
						items1.InputOffice365Service.Connections[connectionsCount35].Pipeline = connections71.Pipeline
					}
				}
				items1.InputOffice365Service.ContentConfig = []tfTypes.InputOffice365ServiceContentConfig{}
				for contentConfigCount1, contentConfigItem1 := range itemsItem.InputOffice365Service.ContentConfig {
					var contentConfig3 tfTypes.InputOffice365ServiceContentConfig
					contentConfig3.ContentType = types.StringPointerValue(contentConfigItem1.ContentType)
					contentConfig3.Description = types.StringPointerValue(contentConfigItem1.Description)
					contentConfig3.Enabled = types.BoolPointerValue(contentConfigItem1.Enabled)
					if contentConfigItem1.Interval != nil {
						contentConfig3.Interval = types.NumberValue(big.NewFloat(float64(*contentConfigItem1.Interval)))
					} else {
						contentConfig3.Interval = types.NumberNull()
					}
					if contentConfigItem1.LogLevel != nil {
						contentConfig3.LogLevel = types.StringValue(string(*contentConfigItem1.LogLevel))
					} else {
						contentConfig3.LogLevel = types.StringNull()
					}
					if contentConfigCount1+1 > len(items1.InputOffice365Service.ContentConfig) {
						items1.InputOffice365Service.ContentConfig = append(items1.InputOffice365Service.ContentConfig, contentConfig3)
					} else {
						items1.InputOffice365Service.ContentConfig[contentConfigCount1].ContentType = contentConfig3.ContentType
						items1.InputOffice365Service.ContentConfig[contentConfigCount1].Description = contentConfig3.Description
						items1.InputOffice365Service.ContentConfig[contentConfigCount1].Enabled = contentConfig3.Enabled
						items1.InputOffice365Service.ContentConfig[contentConfigCount1].Interval = contentConfig3.Interval
						items1.InputOffice365Service.ContentConfig[contentConfigCount1].LogLevel = contentConfig3.LogLevel
					}
				}
				items1.InputOffice365Service.Description = types.StringPointerValue(itemsItem.InputOffice365Service.Description)
				items1.InputOffice365Service.Disabled = types.BoolPointerValue(itemsItem.InputOffice365Service.Disabled)
				items1.InputOffice365Service.Environment = types.StringPointerValue(itemsItem.InputOffice365Service.Environment)
				items1.InputOffice365Service.ID = types.StringPointerValue(itemsItem.InputOffice365Service.ID)
				items1.InputOffice365Service.JobTimeout = types.StringPointerValue(itemsItem.InputOffice365Service.JobTimeout)
				if itemsItem.InputOffice365Service.KeepAliveTime != nil {
					items1.InputOffice365Service.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Service.KeepAliveTime)))
				} else {
					items1.InputOffice365Service.KeepAliveTime = types.NumberNull()
				}
				if itemsItem.InputOffice365Service.MaxMissedKeepAlives != nil {
					items1.InputOffice365Service.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Service.MaxMissedKeepAlives)))
				} else {
					items1.InputOffice365Service.MaxMissedKeepAlives = types.NumberNull()
				}
				items1.InputOffice365Service.Metadata = []tfTypes.InputOffice365ServiceMetadata{}
				for metadataCount37, metadataItem37 := range itemsItem.InputOffice365Service.Metadata {
					var metadata75 tfTypes.InputOffice365ServiceMetadata
					metadata75.Name = types.StringValue(metadataItem37.Name)
					metadata75.Value = types.StringValue(metadataItem37.Value)
					if metadataCount37+1 > len(items1.InputOffice365Service.Metadata) {
						items1.InputOffice365Service.Metadata = append(items1.InputOffice365Service.Metadata, metadata75)
					} else {
						items1.InputOffice365Service.Metadata[metadataCount37].Name = metadata75.Name
						items1.InputOffice365Service.Metadata[metadataCount37].Value = metadata75.Value
					}
				}
				items1.InputOffice365Service.Pipeline = types.StringPointerValue(itemsItem.InputOffice365Service.Pipeline)
				if itemsItem.InputOffice365Service.PlanType != nil {
					items1.InputOffice365Service.PlanType = types.StringValue(string(*itemsItem.InputOffice365Service.PlanType))
				} else {
					items1.InputOffice365Service.PlanType = types.StringNull()
				}
				if itemsItem.InputOffice365Service.Pq == nil {
					items1.InputOffice365Service.Pq = nil
				} else {
					items1.InputOffice365Service.Pq = &tfTypes.InputOffice365ServicePq{}
					if itemsItem.InputOffice365Service.Pq.CommitFrequency != nil {
						items1.InputOffice365Service.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Service.Pq.CommitFrequency)))
					} else {
						items1.InputOffice365Service.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputOffice365Service.Pq.Compress != nil {
						items1.InputOffice365Service.Pq.Compress = types.StringValue(string(*itemsItem.InputOffice365Service.Pq.Compress))
					} else {
						items1.InputOffice365Service.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputOffice365Service.Pq.MaxBufferSize != nil {
						items1.InputOffice365Service.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Service.Pq.MaxBufferSize)))
					} else {
						items1.InputOffice365Service.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputOffice365Service.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputOffice365Service.Pq.MaxFileSize)
					items1.InputOffice365Service.Pq.MaxSize = types.StringPointerValue(itemsItem.InputOffice365Service.Pq.MaxSize)
					if itemsItem.InputOffice365Service.Pq.Mode != nil {
						items1.InputOffice365Service.Pq.Mode = types.StringValue(string(*itemsItem.InputOffice365Service.Pq.Mode))
					} else {
						items1.InputOffice365Service.Pq.Mode = types.StringNull()
					}
					items1.InputOffice365Service.Pq.Path = types.StringPointerValue(itemsItem.InputOffice365Service.Pq.Path)
				}
				items1.InputOffice365Service.PqEnabled = types.BoolPointerValue(itemsItem.InputOffice365Service.PqEnabled)
				if itemsItem.InputOffice365Service.RetryRules == nil {
					items1.InputOffice365Service.RetryRules = nil
				} else {
					items1.InputOffice365Service.RetryRules = &tfTypes.InputOffice365ServiceRetryRules{}
					items1.InputOffice365Service.RetryRules.Codes = make([]types.Number, 0, len(itemsItem.InputOffice365Service.RetryRules.Codes))
					for _, v := range itemsItem.InputOffice365Service.RetryRules.Codes {
						items1.InputOffice365Service.RetryRules.Codes = append(items1.InputOffice365Service.RetryRules.Codes, types.NumberValue(big.NewFloat(float64(v))))
					}
					items1.InputOffice365Service.RetryRules.EnableHeader = types.BoolPointerValue(itemsItem.InputOffice365Service.RetryRules.EnableHeader)
					if itemsItem.InputOffice365Service.RetryRules.Interval != nil {
						items1.InputOffice365Service.RetryRules.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Service.RetryRules.Interval)))
					} else {
						items1.InputOffice365Service.RetryRules.Interval = types.NumberNull()
					}
					if itemsItem.InputOffice365Service.RetryRules.Limit != nil {
						items1.InputOffice365Service.RetryRules.Limit = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Service.RetryRules.Limit)))
					} else {
						items1.InputOffice365Service.RetryRules.Limit = types.NumberNull()
					}
					if itemsItem.InputOffice365Service.RetryRules.Multiplier != nil {
						items1.InputOffice365Service.RetryRules.Multiplier = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Service.RetryRules.Multiplier)))
					} else {
						items1.InputOffice365Service.RetryRules.Multiplier = types.NumberNull()
					}
					items1.InputOffice365Service.RetryRules.RetryConnectReset = types.BoolPointerValue(itemsItem.InputOffice365Service.RetryRules.RetryConnectReset)
					items1.InputOffice365Service.RetryRules.RetryConnectTimeout = types.BoolPointerValue(itemsItem.InputOffice365Service.RetryRules.RetryConnectTimeout)
					if itemsItem.InputOffice365Service.RetryRules.Type != nil {
						items1.InputOffice365Service.RetryRules.Type = types.StringValue(string(*itemsItem.InputOffice365Service.RetryRules.Type))
					} else {
						items1.InputOffice365Service.RetryRules.Type = types.StringNull()
					}
				}
				items1.InputOffice365Service.SendToRoutes = types.BoolPointerValue(itemsItem.InputOffice365Service.SendToRoutes)
				items1.InputOffice365Service.Streamtags = make([]types.String, 0, len(itemsItem.InputOffice365Service.Streamtags))
				for _, v := range itemsItem.InputOffice365Service.Streamtags {
					items1.InputOffice365Service.Streamtags = append(items1.InputOffice365Service.Streamtags, types.StringValue(v))
				}
				items1.InputOffice365Service.TenantID = types.StringValue(itemsItem.InputOffice365Service.TenantID)
				items1.InputOffice365Service.TextSecret = types.StringPointerValue(itemsItem.InputOffice365Service.TextSecret)
				if itemsItem.InputOffice365Service.Timeout != nil {
					items1.InputOffice365Service.Timeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOffice365Service.Timeout)))
				} else {
					items1.InputOffice365Service.Timeout = types.NumberNull()
				}
				items1.InputOffice365Service.TTL = types.StringPointerValue(itemsItem.InputOffice365Service.TTL)
				if itemsItem.InputOffice365Service.Type != nil {
					items1.InputOffice365Service.Type = types.StringValue(string(*itemsItem.InputOffice365Service.Type))
				} else {
					items1.InputOffice365Service.Type = types.StringNull()
				}
			}
			if itemsItem.InputOpenTelemetry != nil {
				items1.InputOpenTelemetry = &tfTypes.InputOpenTelemetry{}
				if itemsItem.InputOpenTelemetry.ActivityLogSampleRate == nil {
					items1.InputOpenTelemetry.ActivityLogSampleRate = types.StringNull()
				} else {
					activityLogSampleRateResult, _ := json.Marshal(itemsItem.InputOpenTelemetry.ActivityLogSampleRate)
					items1.InputOpenTelemetry.ActivityLogSampleRate = types.StringValue(string(activityLogSampleRateResult))
				}
				items1.InputOpenTelemetry.AuthHeaderExpr = types.StringPointerValue(itemsItem.InputOpenTelemetry.AuthHeaderExpr)
				if itemsItem.InputOpenTelemetry.AuthType != nil {
					items1.InputOpenTelemetry.AuthType = types.StringValue(string(*itemsItem.InputOpenTelemetry.AuthType))
				} else {
					items1.InputOpenTelemetry.AuthType = types.StringNull()
				}
				if itemsItem.InputOpenTelemetry.CaptureHeaders == nil {
					items1.InputOpenTelemetry.CaptureHeaders = types.StringNull()
				} else {
					captureHeadersResult, _ := json.Marshal(itemsItem.InputOpenTelemetry.CaptureHeaders)
					items1.InputOpenTelemetry.CaptureHeaders = types.StringValue(string(captureHeadersResult))
				}
				items1.InputOpenTelemetry.Connections = []tfTypes.InputOpenTelemetryConnections{}
				for connectionsCount36, connectionsItem36 := range itemsItem.InputOpenTelemetry.Connections {
					var connections73 tfTypes.InputOpenTelemetryConnections
					connections73.Output = types.StringValue(connectionsItem36.Output)
					connections73.Pipeline = types.StringPointerValue(connectionsItem36.Pipeline)
					if connectionsCount36+1 > len(items1.InputOpenTelemetry.Connections) {
						items1.InputOpenTelemetry.Connections = append(items1.InputOpenTelemetry.Connections, connections73)
					} else {
						items1.InputOpenTelemetry.Connections[connectionsCount36].Output = connections73.Output
						items1.InputOpenTelemetry.Connections[connectionsCount36].Pipeline = connections73.Pipeline
					}
				}
				items1.InputOpenTelemetry.CredentialsSecret = types.StringPointerValue(itemsItem.InputOpenTelemetry.CredentialsSecret)
				items1.InputOpenTelemetry.Description = types.StringPointerValue(itemsItem.InputOpenTelemetry.Description)
				items1.InputOpenTelemetry.Disabled = types.BoolPointerValue(itemsItem.InputOpenTelemetry.Disabled)
				items1.InputOpenTelemetry.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputOpenTelemetry.EnableHealthCheck)
				if itemsItem.InputOpenTelemetry.EnableProxyHeader == nil {
					items1.InputOpenTelemetry.EnableProxyHeader = types.StringNull()
				} else {
					enableProxyHeaderResult, _ := json.Marshal(itemsItem.InputOpenTelemetry.EnableProxyHeader)
					items1.InputOpenTelemetry.EnableProxyHeader = types.StringValue(string(enableProxyHeaderResult))
				}
				items1.InputOpenTelemetry.Environment = types.StringPointerValue(itemsItem.InputOpenTelemetry.Environment)
				items1.InputOpenTelemetry.ExtractLogs = types.BoolPointerValue(itemsItem.InputOpenTelemetry.ExtractLogs)
				items1.InputOpenTelemetry.ExtractMetrics = types.BoolPointerValue(itemsItem.InputOpenTelemetry.ExtractMetrics)
				items1.InputOpenTelemetry.ExtractSpans = types.BoolPointerValue(itemsItem.InputOpenTelemetry.ExtractSpans)
				items1.InputOpenTelemetry.Host = types.StringPointerValue(itemsItem.InputOpenTelemetry.Host)
				items1.InputOpenTelemetry.ID = types.StringPointerValue(itemsItem.InputOpenTelemetry.ID)
				items1.InputOpenTelemetry.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputOpenTelemetry.IPAllowlistRegex)
				items1.InputOpenTelemetry.IPDenylistRegex = types.StringPointerValue(itemsItem.InputOpenTelemetry.IPDenylistRegex)
				if itemsItem.InputOpenTelemetry.KeepAliveTimeout != nil {
					items1.InputOpenTelemetry.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOpenTelemetry.KeepAliveTimeout)))
				} else {
					items1.InputOpenTelemetry.KeepAliveTimeout = types.NumberNull()
				}
				items1.InputOpenTelemetry.LoginURL = types.StringPointerValue(itemsItem.InputOpenTelemetry.LoginURL)
				if itemsItem.InputOpenTelemetry.MaxActiveCxn != nil {
					items1.InputOpenTelemetry.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOpenTelemetry.MaxActiveCxn)))
				} else {
					items1.InputOpenTelemetry.MaxActiveCxn = types.NumberNull()
				}
				if itemsItem.InputOpenTelemetry.MaxActiveReq != nil {
					items1.InputOpenTelemetry.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOpenTelemetry.MaxActiveReq)))
				} else {
					items1.InputOpenTelemetry.MaxActiveReq = types.NumberNull()
				}
				items1.InputOpenTelemetry.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputOpenTelemetry.MaxRequestsPerSocket)
				items1.InputOpenTelemetry.Metadata = []tfTypes.InputOpenTelemetryMetadata{}
				for metadataCount38, metadataItem38 := range itemsItem.InputOpenTelemetry.Metadata {
					var metadata77 tfTypes.InputOpenTelemetryMetadata
					metadata77.Name = types.StringValue(metadataItem38.Name)
					metadata77.Value = types.StringValue(metadataItem38.Value)
					if metadataCount38+1 > len(items1.InputOpenTelemetry.Metadata) {
						items1.InputOpenTelemetry.Metadata = append(items1.InputOpenTelemetry.Metadata, metadata77)
					} else {
						items1.InputOpenTelemetry.Metadata[metadataCount38].Name = metadata77.Name
						items1.InputOpenTelemetry.Metadata[metadataCount38].Value = metadata77.Value
					}
				}
				items1.InputOpenTelemetry.OauthHeaders = []tfTypes.InputOpenTelemetryOauthHeaders{}
				for oauthHeadersCount5, oauthHeadersItem5 := range itemsItem.InputOpenTelemetry.OauthHeaders {
					var oauthHeaders11 tfTypes.InputOpenTelemetryOauthHeaders
					oauthHeaders11.Name = types.StringValue(oauthHeadersItem5.Name)
					oauthHeaders11.Value = types.StringValue(oauthHeadersItem5.Value)
					if oauthHeadersCount5+1 > len(items1.InputOpenTelemetry.OauthHeaders) {
						items1.InputOpenTelemetry.OauthHeaders = append(items1.InputOpenTelemetry.OauthHeaders, oauthHeaders11)
					} else {
						items1.InputOpenTelemetry.OauthHeaders[oauthHeadersCount5].Name = oauthHeaders11.Name
						items1.InputOpenTelemetry.OauthHeaders[oauthHeadersCount5].Value = oauthHeaders11.Value
					}
				}
				items1.InputOpenTelemetry.OauthParams = []tfTypes.InputOpenTelemetryOauthParams{}
				for oauthParamsCount5, oauthParamsItem5 := range itemsItem.InputOpenTelemetry.OauthParams {
					var oauthParams11 tfTypes.InputOpenTelemetryOauthParams
					oauthParams11.Name = types.StringValue(oauthParamsItem5.Name)
					oauthParams11.Value = types.StringValue(oauthParamsItem5.Value)
					if oauthParamsCount5+1 > len(items1.InputOpenTelemetry.OauthParams) {
						items1.InputOpenTelemetry.OauthParams = append(items1.InputOpenTelemetry.OauthParams, oauthParams11)
					} else {
						items1.InputOpenTelemetry.OauthParams[oauthParamsCount5].Name = oauthParams11.Name
						items1.InputOpenTelemetry.OauthParams[oauthParamsCount5].Value = oauthParams11.Value
					}
				}
				if itemsItem.InputOpenTelemetry.OtlpVersion != nil {
					items1.InputOpenTelemetry.OtlpVersion = types.StringValue(string(*itemsItem.InputOpenTelemetry.OtlpVersion))
				} else {
					items1.InputOpenTelemetry.OtlpVersion = types.StringNull()
				}
				items1.InputOpenTelemetry.Password = types.StringPointerValue(itemsItem.InputOpenTelemetry.Password)
				items1.InputOpenTelemetry.Pipeline = types.StringPointerValue(itemsItem.InputOpenTelemetry.Pipeline)
				if itemsItem.InputOpenTelemetry.Port != nil {
					items1.InputOpenTelemetry.Port = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOpenTelemetry.Port)))
				} else {
					items1.InputOpenTelemetry.Port = types.NumberNull()
				}
				if itemsItem.InputOpenTelemetry.Pq == nil {
					items1.InputOpenTelemetry.Pq = nil
				} else {
					items1.InputOpenTelemetry.Pq = &tfTypes.InputOpenTelemetryPq{}
					if itemsItem.InputOpenTelemetry.Pq.CommitFrequency != nil {
						items1.InputOpenTelemetry.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOpenTelemetry.Pq.CommitFrequency)))
					} else {
						items1.InputOpenTelemetry.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputOpenTelemetry.Pq.Compress != nil {
						items1.InputOpenTelemetry.Pq.Compress = types.StringValue(string(*itemsItem.InputOpenTelemetry.Pq.Compress))
					} else {
						items1.InputOpenTelemetry.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputOpenTelemetry.Pq.MaxBufferSize != nil {
						items1.InputOpenTelemetry.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOpenTelemetry.Pq.MaxBufferSize)))
					} else {
						items1.InputOpenTelemetry.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputOpenTelemetry.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputOpenTelemetry.Pq.MaxFileSize)
					items1.InputOpenTelemetry.Pq.MaxSize = types.StringPointerValue(itemsItem.InputOpenTelemetry.Pq.MaxSize)
					if itemsItem.InputOpenTelemetry.Pq.Mode != nil {
						items1.InputOpenTelemetry.Pq.Mode = types.StringValue(string(*itemsItem.InputOpenTelemetry.Pq.Mode))
					} else {
						items1.InputOpenTelemetry.Pq.Mode = types.StringNull()
					}
					items1.InputOpenTelemetry.Pq.Path = types.StringPointerValue(itemsItem.InputOpenTelemetry.Pq.Path)
				}
				items1.InputOpenTelemetry.PqEnabled = types.BoolPointerValue(itemsItem.InputOpenTelemetry.PqEnabled)
				if itemsItem.InputOpenTelemetry.Protocol != nil {
					items1.InputOpenTelemetry.Protocol = types.StringValue(string(*itemsItem.InputOpenTelemetry.Protocol))
				} else {
					items1.InputOpenTelemetry.Protocol = types.StringNull()
				}
				if itemsItem.InputOpenTelemetry.RequestTimeout != nil {
					items1.InputOpenTelemetry.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOpenTelemetry.RequestTimeout)))
				} else {
					items1.InputOpenTelemetry.RequestTimeout = types.NumberNull()
				}
				items1.InputOpenTelemetry.Secret = types.StringPointerValue(itemsItem.InputOpenTelemetry.Secret)
				items1.InputOpenTelemetry.SecretParamName = types.StringPointerValue(itemsItem.InputOpenTelemetry.SecretParamName)
				items1.InputOpenTelemetry.SendToRoutes = types.BoolPointerValue(itemsItem.InputOpenTelemetry.SendToRoutes)
				if itemsItem.InputOpenTelemetry.SocketTimeout != nil {
					items1.InputOpenTelemetry.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOpenTelemetry.SocketTimeout)))
				} else {
					items1.InputOpenTelemetry.SocketTimeout = types.NumberNull()
				}
				items1.InputOpenTelemetry.Streamtags = make([]types.String, 0, len(itemsItem.InputOpenTelemetry.Streamtags))
				for _, v := range itemsItem.InputOpenTelemetry.Streamtags {
					items1.InputOpenTelemetry.Streamtags = append(items1.InputOpenTelemetry.Streamtags, types.StringValue(v))
				}
				items1.InputOpenTelemetry.TextSecret = types.StringPointerValue(itemsItem.InputOpenTelemetry.TextSecret)
				if itemsItem.InputOpenTelemetry.TLS == nil {
					items1.InputOpenTelemetry.TLS = nil
				} else {
					items1.InputOpenTelemetry.TLS = &tfTypes.InputOpenTelemetryTLSSettingsServerSide{}
					items1.InputOpenTelemetry.TLS.CaPath = types.StringPointerValue(itemsItem.InputOpenTelemetry.TLS.CaPath)
					items1.InputOpenTelemetry.TLS.CertificateName = types.StringPointerValue(itemsItem.InputOpenTelemetry.TLS.CertificateName)
					items1.InputOpenTelemetry.TLS.CertPath = types.StringPointerValue(itemsItem.InputOpenTelemetry.TLS.CertPath)
					if itemsItem.InputOpenTelemetry.TLS.CommonNameRegex == nil {
						items1.InputOpenTelemetry.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult13, _ := json.Marshal(itemsItem.InputOpenTelemetry.TLS.CommonNameRegex)
						items1.InputOpenTelemetry.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult13))
					}
					items1.InputOpenTelemetry.TLS.Disabled = types.BoolPointerValue(itemsItem.InputOpenTelemetry.TLS.Disabled)
					if itemsItem.InputOpenTelemetry.TLS.MaxVersion != nil {
						items1.InputOpenTelemetry.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputOpenTelemetry.TLS.MaxVersion))
					} else {
						items1.InputOpenTelemetry.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputOpenTelemetry.TLS.MinVersion != nil {
						items1.InputOpenTelemetry.TLS.MinVersion = types.StringValue(string(*itemsItem.InputOpenTelemetry.TLS.MinVersion))
					} else {
						items1.InputOpenTelemetry.TLS.MinVersion = types.StringNull()
					}
					items1.InputOpenTelemetry.TLS.Passphrase = types.StringPointerValue(itemsItem.InputOpenTelemetry.TLS.Passphrase)
					items1.InputOpenTelemetry.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputOpenTelemetry.TLS.PrivKeyPath)
					if itemsItem.InputOpenTelemetry.TLS.RejectUnauthorized == nil {
						items1.InputOpenTelemetry.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult13, _ := json.Marshal(itemsItem.InputOpenTelemetry.TLS.RejectUnauthorized)
						items1.InputOpenTelemetry.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult13))
					}
					items1.InputOpenTelemetry.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputOpenTelemetry.TLS.RequestCert)
				}
				items1.InputOpenTelemetry.Token = types.StringPointerValue(itemsItem.InputOpenTelemetry.Token)
				items1.InputOpenTelemetry.TokenAttributeName = types.StringPointerValue(itemsItem.InputOpenTelemetry.TokenAttributeName)
				if itemsItem.InputOpenTelemetry.TokenTimeoutSecs != nil {
					items1.InputOpenTelemetry.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputOpenTelemetry.TokenTimeoutSecs)))
				} else {
					items1.InputOpenTelemetry.TokenTimeoutSecs = types.NumberNull()
				}
				if itemsItem.InputOpenTelemetry.Type != nil {
					items1.InputOpenTelemetry.Type = types.StringValue(string(*itemsItem.InputOpenTelemetry.Type))
				} else {
					items1.InputOpenTelemetry.Type = types.StringNull()
				}
				items1.InputOpenTelemetry.Username = types.StringPointerValue(itemsItem.InputOpenTelemetry.Username)
			}
			if itemsItem.InputPrometheus != nil {
				items1.InputPrometheus = &tfTypes.InputPrometheus{}
				items1.InputPrometheus.AssumeRoleArn = types.StringPointerValue(itemsItem.InputPrometheus.AssumeRoleArn)
				items1.InputPrometheus.AssumeRoleExternalID = types.StringPointerValue(itemsItem.InputPrometheus.AssumeRoleExternalID)
				if itemsItem.InputPrometheus.AuthType != nil {
					items1.InputPrometheus.AuthType = types.StringValue(string(*itemsItem.InputPrometheus.AuthType))
				} else {
					items1.InputPrometheus.AuthType = types.StringNull()
				}
				if itemsItem.InputPrometheus.AwsAuthenticationMethod != nil {
					items1.InputPrometheus.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.InputPrometheus.AwsAuthenticationMethod))
				} else {
					items1.InputPrometheus.AwsAuthenticationMethod = types.StringNull()
				}
				items1.InputPrometheus.AwsSecretKey = types.StringPointerValue(itemsItem.InputPrometheus.AwsSecretKey)
				items1.InputPrometheus.Connections = []tfTypes.InputPrometheusConnections{}
				for connectionsCount37, connectionsItem37 := range itemsItem.InputPrometheus.Connections {
					var connections75 tfTypes.InputPrometheusConnections
					connections75.Output = types.StringValue(connectionsItem37.Output)
					connections75.Pipeline = types.StringPointerValue(connectionsItem37.Pipeline)
					if connectionsCount37+1 > len(items1.InputPrometheus.Connections) {
						items1.InputPrometheus.Connections = append(items1.InputPrometheus.Connections, connections75)
					} else {
						items1.InputPrometheus.Connections[connectionsCount37].Output = connections75.Output
						items1.InputPrometheus.Connections[connectionsCount37].Pipeline = connections75.Pipeline
					}
				}
				items1.InputPrometheus.CredentialsSecret = types.StringPointerValue(itemsItem.InputPrometheus.CredentialsSecret)
				items1.InputPrometheus.Description = types.StringPointerValue(itemsItem.InputPrometheus.Description)
				items1.InputPrometheus.DimensionList = make([]types.String, 0, len(itemsItem.InputPrometheus.DimensionList))
				for _, v := range itemsItem.InputPrometheus.DimensionList {
					items1.InputPrometheus.DimensionList = append(items1.InputPrometheus.DimensionList, types.StringValue(v))
				}
				items1.InputPrometheus.Disabled = types.BoolPointerValue(itemsItem.InputPrometheus.Disabled)
				if itemsItem.InputPrometheus.DiscoveryType != nil {
					items1.InputPrometheus.DiscoveryType = types.StringValue(string(*itemsItem.InputPrometheus.DiscoveryType))
				} else {
					items1.InputPrometheus.DiscoveryType = types.StringNull()
				}
				if itemsItem.InputPrometheus.DurationSeconds != nil {
					items1.InputPrometheus.DurationSeconds = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheus.DurationSeconds)))
				} else {
					items1.InputPrometheus.DurationSeconds = types.NumberNull()
				}
				items1.InputPrometheus.EnableAssumeRole = types.BoolPointerValue(itemsItem.InputPrometheus.EnableAssumeRole)
				items1.InputPrometheus.Endpoint = types.StringPointerValue(itemsItem.InputPrometheus.Endpoint)
				items1.InputPrometheus.Environment = types.StringPointerValue(itemsItem.InputPrometheus.Environment)
				items1.InputPrometheus.ID = types.StringPointerValue(itemsItem.InputPrometheus.ID)
				if itemsItem.InputPrometheus.Interval != nil {
					items1.InputPrometheus.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheus.Interval)))
				} else {
					items1.InputPrometheus.Interval = types.NumberNull()
				}
				items1.InputPrometheus.JobTimeout = types.StringPointerValue(itemsItem.InputPrometheus.JobTimeout)
				if itemsItem.InputPrometheus.KeepAliveTime != nil {
					items1.InputPrometheus.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheus.KeepAliveTime)))
				} else {
					items1.InputPrometheus.KeepAliveTime = types.NumberNull()
				}
				if itemsItem.InputPrometheus.LogLevel != nil {
					items1.InputPrometheus.LogLevel = types.StringValue(string(*itemsItem.InputPrometheus.LogLevel))
				} else {
					items1.InputPrometheus.LogLevel = types.StringNull()
				}
				if itemsItem.InputPrometheus.MaxMissedKeepAlives != nil {
					items1.InputPrometheus.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheus.MaxMissedKeepAlives)))
				} else {
					items1.InputPrometheus.MaxMissedKeepAlives = types.NumberNull()
				}
				items1.InputPrometheus.Metadata = []tfTypes.InputPrometheusMetadata{}
				for metadataCount39, metadataItem39 := range itemsItem.InputPrometheus.Metadata {
					var metadata79 tfTypes.InputPrometheusMetadata
					metadata79.Name = types.StringValue(metadataItem39.Name)
					metadata79.Value = types.StringValue(metadataItem39.Value)
					if metadataCount39+1 > len(items1.InputPrometheus.Metadata) {
						items1.InputPrometheus.Metadata = append(items1.InputPrometheus.Metadata, metadata79)
					} else {
						items1.InputPrometheus.Metadata[metadataCount39].Name = metadata79.Name
						items1.InputPrometheus.Metadata[metadataCount39].Value = metadata79.Value
					}
				}
				items1.InputPrometheus.NameList = make([]types.String, 0, len(itemsItem.InputPrometheus.NameList))
				for _, v := range itemsItem.InputPrometheus.NameList {
					items1.InputPrometheus.NameList = append(items1.InputPrometheus.NameList, types.StringValue(v))
				}
				items1.InputPrometheus.Password = types.StringPointerValue(itemsItem.InputPrometheus.Password)
				items1.InputPrometheus.Pipeline = types.StringPointerValue(itemsItem.InputPrometheus.Pipeline)
				if itemsItem.InputPrometheus.Pq == nil {
					items1.InputPrometheus.Pq = nil
				} else {
					items1.InputPrometheus.Pq = &tfTypes.InputPrometheusPq{}
					if itemsItem.InputPrometheus.Pq.CommitFrequency != nil {
						items1.InputPrometheus.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheus.Pq.CommitFrequency)))
					} else {
						items1.InputPrometheus.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputPrometheus.Pq.Compress != nil {
						items1.InputPrometheus.Pq.Compress = types.StringValue(string(*itemsItem.InputPrometheus.Pq.Compress))
					} else {
						items1.InputPrometheus.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputPrometheus.Pq.MaxBufferSize != nil {
						items1.InputPrometheus.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheus.Pq.MaxBufferSize)))
					} else {
						items1.InputPrometheus.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputPrometheus.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputPrometheus.Pq.MaxFileSize)
					items1.InputPrometheus.Pq.MaxSize = types.StringPointerValue(itemsItem.InputPrometheus.Pq.MaxSize)
					if itemsItem.InputPrometheus.Pq.Mode != nil {
						items1.InputPrometheus.Pq.Mode = types.StringValue(string(*itemsItem.InputPrometheus.Pq.Mode))
					} else {
						items1.InputPrometheus.Pq.Mode = types.StringNull()
					}
					items1.InputPrometheus.Pq.Path = types.StringPointerValue(itemsItem.InputPrometheus.Pq.Path)
				}
				items1.InputPrometheus.PqEnabled = types.BoolPointerValue(itemsItem.InputPrometheus.PqEnabled)
				if itemsItem.InputPrometheus.RecordType != nil {
					items1.InputPrometheus.RecordType = types.StringValue(string(*itemsItem.InputPrometheus.RecordType))
				} else {
					items1.InputPrometheus.RecordType = types.StringNull()
				}
				items1.InputPrometheus.Region = types.StringPointerValue(itemsItem.InputPrometheus.Region)
				items1.InputPrometheus.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputPrometheus.RejectUnauthorized)
				items1.InputPrometheus.ReuseConnections = types.BoolPointerValue(itemsItem.InputPrometheus.ReuseConnections)
				items1.InputPrometheus.ScrapePath = types.StringPointerValue(itemsItem.InputPrometheus.ScrapePath)
				if itemsItem.InputPrometheus.ScrapePort != nil {
					items1.InputPrometheus.ScrapePort = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheus.ScrapePort)))
				} else {
					items1.InputPrometheus.ScrapePort = types.NumberNull()
				}
				if itemsItem.InputPrometheus.ScrapeProtocol != nil {
					items1.InputPrometheus.ScrapeProtocol = types.StringValue(string(*itemsItem.InputPrometheus.ScrapeProtocol))
				} else {
					items1.InputPrometheus.ScrapeProtocol = types.StringNull()
				}
				items1.InputPrometheus.SearchFilter = []tfTypes.SearchFilter{}
				for searchFilterCount1, searchFilterItem1 := range itemsItem.InputPrometheus.SearchFilter {
					var searchFilter3 tfTypes.SearchFilter
					searchFilter3.Name = types.StringValue(searchFilterItem1.Name)
					searchFilter3.Values = make([]types.String, 0, len(searchFilterItem1.Values))
					for _, v := range searchFilterItem1.Values {
						searchFilter3.Values = append(searchFilter3.Values, types.StringValue(v))
					}
					if searchFilterCount1+1 > len(items1.InputPrometheus.SearchFilter) {
						items1.InputPrometheus.SearchFilter = append(items1.InputPrometheus.SearchFilter, searchFilter3)
					} else {
						items1.InputPrometheus.SearchFilter[searchFilterCount1].Name = searchFilter3.Name
						items1.InputPrometheus.SearchFilter[searchFilterCount1].Values = searchFilter3.Values
					}
				}
				items1.InputPrometheus.SendToRoutes = types.BoolPointerValue(itemsItem.InputPrometheus.SendToRoutes)
				if itemsItem.InputPrometheus.SignatureVersion != nil {
					items1.InputPrometheus.SignatureVersion = types.StringValue(string(*itemsItem.InputPrometheus.SignatureVersion))
				} else {
					items1.InputPrometheus.SignatureVersion = types.StringNull()
				}
				items1.InputPrometheus.Streamtags = make([]types.String, 0, len(itemsItem.InputPrometheus.Streamtags))
				for _, v := range itemsItem.InputPrometheus.Streamtags {
					items1.InputPrometheus.Streamtags = append(items1.InputPrometheus.Streamtags, types.StringValue(v))
				}
				items1.InputPrometheus.TargetList = make([]types.String, 0, len(itemsItem.InputPrometheus.TargetList))
				for _, v := range itemsItem.InputPrometheus.TargetList {
					items1.InputPrometheus.TargetList = append(items1.InputPrometheus.TargetList, types.StringValue(v))
				}
				items1.InputPrometheus.TTL = types.StringPointerValue(itemsItem.InputPrometheus.TTL)
				if itemsItem.InputPrometheus.Type != nil {
					items1.InputPrometheus.Type = types.StringValue(string(*itemsItem.InputPrometheus.Type))
				} else {
					items1.InputPrometheus.Type = types.StringNull()
				}
				items1.InputPrometheus.UsePublicIP = types.BoolPointerValue(itemsItem.InputPrometheus.UsePublicIP)
				items1.InputPrometheus.Username = types.StringPointerValue(itemsItem.InputPrometheus.Username)
			}
			if itemsItem.InputPrometheusRw != nil {
				items1.InputPrometheusRw = &tfTypes.InputPrometheusRw{}
				if itemsItem.InputPrometheusRw.ActivityLogSampleRate != nil {
					items1.InputPrometheusRw.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheusRw.ActivityLogSampleRate)))
				} else {
					items1.InputPrometheusRw.ActivityLogSampleRate = types.NumberNull()
				}
				items1.InputPrometheusRw.AuthHeaderExpr = types.StringPointerValue(itemsItem.InputPrometheusRw.AuthHeaderExpr)
				if itemsItem.InputPrometheusRw.AuthType != nil {
					items1.InputPrometheusRw.AuthType = types.StringValue(string(*itemsItem.InputPrometheusRw.AuthType))
				} else {
					items1.InputPrometheusRw.AuthType = types.StringNull()
				}
				items1.InputPrometheusRw.CaptureHeaders = types.BoolPointerValue(itemsItem.InputPrometheusRw.CaptureHeaders)
				items1.InputPrometheusRw.Connections = []tfTypes.InputPrometheusRwConnections{}
				for connectionsCount38, connectionsItem38 := range itemsItem.InputPrometheusRw.Connections {
					var connections77 tfTypes.InputPrometheusRwConnections
					connections77.Output = types.StringValue(connectionsItem38.Output)
					connections77.Pipeline = types.StringPointerValue(connectionsItem38.Pipeline)
					if connectionsCount38+1 > len(items1.InputPrometheusRw.Connections) {
						items1.InputPrometheusRw.Connections = append(items1.InputPrometheusRw.Connections, connections77)
					} else {
						items1.InputPrometheusRw.Connections[connectionsCount38].Output = connections77.Output
						items1.InputPrometheusRw.Connections[connectionsCount38].Pipeline = connections77.Pipeline
					}
				}
				items1.InputPrometheusRw.CredentialsSecret = types.StringPointerValue(itemsItem.InputPrometheusRw.CredentialsSecret)
				items1.InputPrometheusRw.Description = types.StringPointerValue(itemsItem.InputPrometheusRw.Description)
				items1.InputPrometheusRw.Disabled = types.BoolPointerValue(itemsItem.InputPrometheusRw.Disabled)
				items1.InputPrometheusRw.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputPrometheusRw.EnableHealthCheck)
				items1.InputPrometheusRw.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputPrometheusRw.EnableProxyHeader)
				items1.InputPrometheusRw.Environment = types.StringPointerValue(itemsItem.InputPrometheusRw.Environment)
				items1.InputPrometheusRw.Host = types.StringPointerValue(itemsItem.InputPrometheusRw.Host)
				items1.InputPrometheusRw.ID = types.StringPointerValue(itemsItem.InputPrometheusRw.ID)
				items1.InputPrometheusRw.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputPrometheusRw.IPAllowlistRegex)
				items1.InputPrometheusRw.IPDenylistRegex = types.StringPointerValue(itemsItem.InputPrometheusRw.IPDenylistRegex)
				if itemsItem.InputPrometheusRw.KeepAliveTimeout != nil {
					items1.InputPrometheusRw.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheusRw.KeepAliveTimeout)))
				} else {
					items1.InputPrometheusRw.KeepAliveTimeout = types.NumberNull()
				}
				items1.InputPrometheusRw.LoginURL = types.StringPointerValue(itemsItem.InputPrometheusRw.LoginURL)
				if itemsItem.InputPrometheusRw.MaxActiveReq != nil {
					items1.InputPrometheusRw.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheusRw.MaxActiveReq)))
				} else {
					items1.InputPrometheusRw.MaxActiveReq = types.NumberNull()
				}
				items1.InputPrometheusRw.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputPrometheusRw.MaxRequestsPerSocket)
				items1.InputPrometheusRw.Metadata = []tfTypes.InputPrometheusRwMetadata{}
				for metadataCount40, metadataItem40 := range itemsItem.InputPrometheusRw.Metadata {
					var metadata81 tfTypes.InputPrometheusRwMetadata
					metadata81.Name = types.StringValue(metadataItem40.Name)
					metadata81.Value = types.StringValue(metadataItem40.Value)
					if metadataCount40+1 > len(items1.InputPrometheusRw.Metadata) {
						items1.InputPrometheusRw.Metadata = append(items1.InputPrometheusRw.Metadata, metadata81)
					} else {
						items1.InputPrometheusRw.Metadata[metadataCount40].Name = metadata81.Name
						items1.InputPrometheusRw.Metadata[metadataCount40].Value = metadata81.Value
					}
				}
				items1.InputPrometheusRw.OauthHeaders = []tfTypes.InputPrometheusRwOauthHeaders{}
				for oauthHeadersCount6, oauthHeadersItem6 := range itemsItem.InputPrometheusRw.OauthHeaders {
					var oauthHeaders13 tfTypes.InputPrometheusRwOauthHeaders
					oauthHeaders13.Name = types.StringValue(oauthHeadersItem6.Name)
					oauthHeaders13.Value = types.StringValue(oauthHeadersItem6.Value)
					if oauthHeadersCount6+1 > len(items1.InputPrometheusRw.OauthHeaders) {
						items1.InputPrometheusRw.OauthHeaders = append(items1.InputPrometheusRw.OauthHeaders, oauthHeaders13)
					} else {
						items1.InputPrometheusRw.OauthHeaders[oauthHeadersCount6].Name = oauthHeaders13.Name
						items1.InputPrometheusRw.OauthHeaders[oauthHeadersCount6].Value = oauthHeaders13.Value
					}
				}
				items1.InputPrometheusRw.OauthParams = []tfTypes.InputPrometheusRwOauthParams{}
				for oauthParamsCount6, oauthParamsItem6 := range itemsItem.InputPrometheusRw.OauthParams {
					var oauthParams13 tfTypes.InputPrometheusRwOauthParams
					oauthParams13.Name = types.StringValue(oauthParamsItem6.Name)
					oauthParams13.Value = types.StringValue(oauthParamsItem6.Value)
					if oauthParamsCount6+1 > len(items1.InputPrometheusRw.OauthParams) {
						items1.InputPrometheusRw.OauthParams = append(items1.InputPrometheusRw.OauthParams, oauthParams13)
					} else {
						items1.InputPrometheusRw.OauthParams[oauthParamsCount6].Name = oauthParams13.Name
						items1.InputPrometheusRw.OauthParams[oauthParamsCount6].Value = oauthParams13.Value
					}
				}
				items1.InputPrometheusRw.Password = types.StringPointerValue(itemsItem.InputPrometheusRw.Password)
				items1.InputPrometheusRw.Pipeline = types.StringPointerValue(itemsItem.InputPrometheusRw.Pipeline)
				items1.InputPrometheusRw.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputPrometheusRw.Port)))
				if itemsItem.InputPrometheusRw.Pq == nil {
					items1.InputPrometheusRw.Pq = nil
				} else {
					items1.InputPrometheusRw.Pq = &tfTypes.InputPrometheusRwPq{}
					if itemsItem.InputPrometheusRw.Pq.CommitFrequency != nil {
						items1.InputPrometheusRw.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheusRw.Pq.CommitFrequency)))
					} else {
						items1.InputPrometheusRw.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputPrometheusRw.Pq.Compress != nil {
						items1.InputPrometheusRw.Pq.Compress = types.StringValue(string(*itemsItem.InputPrometheusRw.Pq.Compress))
					} else {
						items1.InputPrometheusRw.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputPrometheusRw.Pq.MaxBufferSize != nil {
						items1.InputPrometheusRw.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheusRw.Pq.MaxBufferSize)))
					} else {
						items1.InputPrometheusRw.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputPrometheusRw.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputPrometheusRw.Pq.MaxFileSize)
					items1.InputPrometheusRw.Pq.MaxSize = types.StringPointerValue(itemsItem.InputPrometheusRw.Pq.MaxSize)
					if itemsItem.InputPrometheusRw.Pq.Mode != nil {
						items1.InputPrometheusRw.Pq.Mode = types.StringValue(string(*itemsItem.InputPrometheusRw.Pq.Mode))
					} else {
						items1.InputPrometheusRw.Pq.Mode = types.StringNull()
					}
					items1.InputPrometheusRw.Pq.Path = types.StringPointerValue(itemsItem.InputPrometheusRw.Pq.Path)
				}
				items1.InputPrometheusRw.PqEnabled = types.BoolPointerValue(itemsItem.InputPrometheusRw.PqEnabled)
				items1.InputPrometheusRw.PrometheusAPI = types.StringPointerValue(itemsItem.InputPrometheusRw.PrometheusAPI)
				if itemsItem.InputPrometheusRw.RequestTimeout != nil {
					items1.InputPrometheusRw.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheusRw.RequestTimeout)))
				} else {
					items1.InputPrometheusRw.RequestTimeout = types.NumberNull()
				}
				items1.InputPrometheusRw.Secret = types.StringPointerValue(itemsItem.InputPrometheusRw.Secret)
				items1.InputPrometheusRw.SecretParamName = types.StringPointerValue(itemsItem.InputPrometheusRw.SecretParamName)
				items1.InputPrometheusRw.SendToRoutes = types.BoolPointerValue(itemsItem.InputPrometheusRw.SendToRoutes)
				if itemsItem.InputPrometheusRw.SocketTimeout != nil {
					items1.InputPrometheusRw.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheusRw.SocketTimeout)))
				} else {
					items1.InputPrometheusRw.SocketTimeout = types.NumberNull()
				}
				items1.InputPrometheusRw.Streamtags = make([]types.String, 0, len(itemsItem.InputPrometheusRw.Streamtags))
				for _, v := range itemsItem.InputPrometheusRw.Streamtags {
					items1.InputPrometheusRw.Streamtags = append(items1.InputPrometheusRw.Streamtags, types.StringValue(v))
				}
				items1.InputPrometheusRw.TextSecret = types.StringPointerValue(itemsItem.InputPrometheusRw.TextSecret)
				if itemsItem.InputPrometheusRw.TLS == nil {
					items1.InputPrometheusRw.TLS = nil
				} else {
					items1.InputPrometheusRw.TLS = &tfTypes.InputPrometheusRwTLSSettingsServerSide{}
					items1.InputPrometheusRw.TLS.CaPath = types.StringPointerValue(itemsItem.InputPrometheusRw.TLS.CaPath)
					items1.InputPrometheusRw.TLS.CertificateName = types.StringPointerValue(itemsItem.InputPrometheusRw.TLS.CertificateName)
					items1.InputPrometheusRw.TLS.CertPath = types.StringPointerValue(itemsItem.InputPrometheusRw.TLS.CertPath)
					if itemsItem.InputPrometheusRw.TLS.CommonNameRegex == nil {
						items1.InputPrometheusRw.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult14, _ := json.Marshal(itemsItem.InputPrometheusRw.TLS.CommonNameRegex)
						items1.InputPrometheusRw.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult14))
					}
					items1.InputPrometheusRw.TLS.Disabled = types.BoolPointerValue(itemsItem.InputPrometheusRw.TLS.Disabled)
					if itemsItem.InputPrometheusRw.TLS.MaxVersion != nil {
						items1.InputPrometheusRw.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputPrometheusRw.TLS.MaxVersion))
					} else {
						items1.InputPrometheusRw.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputPrometheusRw.TLS.MinVersion != nil {
						items1.InputPrometheusRw.TLS.MinVersion = types.StringValue(string(*itemsItem.InputPrometheusRw.TLS.MinVersion))
					} else {
						items1.InputPrometheusRw.TLS.MinVersion = types.StringNull()
					}
					items1.InputPrometheusRw.TLS.Passphrase = types.StringPointerValue(itemsItem.InputPrometheusRw.TLS.Passphrase)
					items1.InputPrometheusRw.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputPrometheusRw.TLS.PrivKeyPath)
					if itemsItem.InputPrometheusRw.TLS.RejectUnauthorized == nil {
						items1.InputPrometheusRw.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult14, _ := json.Marshal(itemsItem.InputPrometheusRw.TLS.RejectUnauthorized)
						items1.InputPrometheusRw.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult14))
					}
					items1.InputPrometheusRw.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputPrometheusRw.TLS.RequestCert)
				}
				items1.InputPrometheusRw.Token = types.StringPointerValue(itemsItem.InputPrometheusRw.Token)
				items1.InputPrometheusRw.TokenAttributeName = types.StringPointerValue(itemsItem.InputPrometheusRw.TokenAttributeName)
				if itemsItem.InputPrometheusRw.TokenTimeoutSecs != nil {
					items1.InputPrometheusRw.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputPrometheusRw.TokenTimeoutSecs)))
				} else {
					items1.InputPrometheusRw.TokenTimeoutSecs = types.NumberNull()
				}
				if itemsItem.InputPrometheusRw.Type != nil {
					items1.InputPrometheusRw.Type = types.StringValue(string(*itemsItem.InputPrometheusRw.Type))
				} else {
					items1.InputPrometheusRw.Type = types.StringNull()
				}
				items1.InputPrometheusRw.Username = types.StringPointerValue(itemsItem.InputPrometheusRw.Username)
			}
			if itemsItem.InputRawUDP != nil {
				items1.InputRawUDP = &tfTypes.InputRawUDP{}
				items1.InputRawUDP.Connections = []tfTypes.InputRawUDPConnections{}
				for connectionsCount39, connectionsItem39 := range itemsItem.InputRawUDP.Connections {
					var connections79 tfTypes.InputRawUDPConnections
					connections79.Output = types.StringValue(connectionsItem39.Output)
					connections79.Pipeline = types.StringPointerValue(connectionsItem39.Pipeline)
					if connectionsCount39+1 > len(items1.InputRawUDP.Connections) {
						items1.InputRawUDP.Connections = append(items1.InputRawUDP.Connections, connections79)
					} else {
						items1.InputRawUDP.Connections[connectionsCount39].Output = connections79.Output
						items1.InputRawUDP.Connections[connectionsCount39].Pipeline = connections79.Pipeline
					}
				}
				items1.InputRawUDP.Description = types.StringPointerValue(itemsItem.InputRawUDP.Description)
				items1.InputRawUDP.Disabled = types.BoolPointerValue(itemsItem.InputRawUDP.Disabled)
				items1.InputRawUDP.Environment = types.StringPointerValue(itemsItem.InputRawUDP.Environment)
				items1.InputRawUDP.Host = types.StringPointerValue(itemsItem.InputRawUDP.Host)
				items1.InputRawUDP.ID = types.StringPointerValue(itemsItem.InputRawUDP.ID)
				items1.InputRawUDP.IngestRawBytes = types.BoolPointerValue(itemsItem.InputRawUDP.IngestRawBytes)
				items1.InputRawUDP.IPWhitelistRegex = types.StringPointerValue(itemsItem.InputRawUDP.IPWhitelistRegex)
				if itemsItem.InputRawUDP.MaxBufferSize != nil {
					items1.InputRawUDP.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputRawUDP.MaxBufferSize)))
				} else {
					items1.InputRawUDP.MaxBufferSize = types.NumberNull()
				}
				items1.InputRawUDP.Metadata = []tfTypes.InputRawUDPMetadata{}
				for metadataCount41, metadataItem41 := range itemsItem.InputRawUDP.Metadata {
					var metadata83 tfTypes.InputRawUDPMetadata
					metadata83.Name = types.StringValue(metadataItem41.Name)
					metadata83.Value = types.StringValue(metadataItem41.Value)
					if metadataCount41+1 > len(items1.InputRawUDP.Metadata) {
						items1.InputRawUDP.Metadata = append(items1.InputRawUDP.Metadata, metadata83)
					} else {
						items1.InputRawUDP.Metadata[metadataCount41].Name = metadata83.Name
						items1.InputRawUDP.Metadata[metadataCount41].Value = metadata83.Value
					}
				}
				items1.InputRawUDP.Pipeline = types.StringPointerValue(itemsItem.InputRawUDP.Pipeline)
				items1.InputRawUDP.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputRawUDP.Port)))
				if itemsItem.InputRawUDP.Pq == nil {
					items1.InputRawUDP.Pq = nil
				} else {
					items1.InputRawUDP.Pq = &tfTypes.InputRawUDPPq{}
					if itemsItem.InputRawUDP.Pq.CommitFrequency != nil {
						items1.InputRawUDP.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputRawUDP.Pq.CommitFrequency)))
					} else {
						items1.InputRawUDP.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputRawUDP.Pq.Compress != nil {
						items1.InputRawUDP.Pq.Compress = types.StringValue(string(*itemsItem.InputRawUDP.Pq.Compress))
					} else {
						items1.InputRawUDP.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputRawUDP.Pq.MaxBufferSize != nil {
						items1.InputRawUDP.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputRawUDP.Pq.MaxBufferSize)))
					} else {
						items1.InputRawUDP.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputRawUDP.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputRawUDP.Pq.MaxFileSize)
					items1.InputRawUDP.Pq.MaxSize = types.StringPointerValue(itemsItem.InputRawUDP.Pq.MaxSize)
					if itemsItem.InputRawUDP.Pq.Mode != nil {
						items1.InputRawUDP.Pq.Mode = types.StringValue(string(*itemsItem.InputRawUDP.Pq.Mode))
					} else {
						items1.InputRawUDP.Pq.Mode = types.StringNull()
					}
					items1.InputRawUDP.Pq.Path = types.StringPointerValue(itemsItem.InputRawUDP.Pq.Path)
				}
				items1.InputRawUDP.PqEnabled = types.BoolPointerValue(itemsItem.InputRawUDP.PqEnabled)
				items1.InputRawUDP.SendToRoutes = types.BoolPointerValue(itemsItem.InputRawUDP.SendToRoutes)
				items1.InputRawUDP.SingleMsgUDPPackets = types.BoolPointerValue(itemsItem.InputRawUDP.SingleMsgUDPPackets)
				items1.InputRawUDP.Streamtags = make([]types.String, 0, len(itemsItem.InputRawUDP.Streamtags))
				for _, v := range itemsItem.InputRawUDP.Streamtags {
					items1.InputRawUDP.Streamtags = append(items1.InputRawUDP.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputRawUDP.Type != nil {
					items1.InputRawUDP.Type = types.StringValue(string(*itemsItem.InputRawUDP.Type))
				} else {
					items1.InputRawUDP.Type = types.StringNull()
				}
				if itemsItem.InputRawUDP.UDPSocketRxBufSize != nil {
					items1.InputRawUDP.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputRawUDP.UDPSocketRxBufSize)))
				} else {
					items1.InputRawUDP.UDPSocketRxBufSize = types.NumberNull()
				}
			}
			if itemsItem.InputS3 != nil {
				items1.InputS3 = &tfTypes.InputS3{}
				items1.InputS3.AssumeRoleArn = types.StringPointerValue(itemsItem.InputS3.AssumeRoleArn)
				items1.InputS3.AssumeRoleExternalID = types.StringPointerValue(itemsItem.InputS3.AssumeRoleExternalID)
				items1.InputS3.AwsAccountID = types.StringPointerValue(itemsItem.InputS3.AwsAccountID)
				items1.InputS3.AwsAPIKey = types.StringPointerValue(itemsItem.InputS3.AwsAPIKey)
				if itemsItem.InputS3.AwsAuthenticationMethod != nil {
					items1.InputS3.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.InputS3.AwsAuthenticationMethod))
				} else {
					items1.InputS3.AwsAuthenticationMethod = types.StringNull()
				}
				items1.InputS3.AwsSecret = types.StringPointerValue(itemsItem.InputS3.AwsSecret)
				items1.InputS3.AwsSecretKey = types.StringPointerValue(itemsItem.InputS3.AwsSecretKey)
				items1.InputS3.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputS3.BreakerRulesets))
				for _, v := range itemsItem.InputS3.BreakerRulesets {
					items1.InputS3.BreakerRulesets = append(items1.InputS3.BreakerRulesets, types.StringValue(v))
				}
				if itemsItem.InputS3.Checkpointing == nil {
					items1.InputS3.Checkpointing = nil
				} else {
					items1.InputS3.Checkpointing = &tfTypes.InputS3Checkpointing{}
					items1.InputS3.Checkpointing.Enabled = types.BoolPointerValue(itemsItem.InputS3.Checkpointing.Enabled)
					if itemsItem.InputS3.Checkpointing.Retries != nil {
						items1.InputS3.Checkpointing.Retries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.Checkpointing.Retries)))
					} else {
						items1.InputS3.Checkpointing.Retries = types.NumberNull()
					}
				}
				items1.InputS3.Connections = []tfTypes.InputS3Connections{}
				for connectionsCount40, connectionsItem40 := range itemsItem.InputS3.Connections {
					var connections81 tfTypes.InputS3Connections
					connections81.Output = types.StringValue(connectionsItem40.Output)
					connections81.Pipeline = types.StringPointerValue(connectionsItem40.Pipeline)
					if connectionsCount40+1 > len(items1.InputS3.Connections) {
						items1.InputS3.Connections = append(items1.InputS3.Connections, connections81)
					} else {
						items1.InputS3.Connections[connectionsCount40].Output = connections81.Output
						items1.InputS3.Connections[connectionsCount40].Pipeline = connections81.Pipeline
					}
				}
				items1.InputS3.Description = types.StringPointerValue(itemsItem.InputS3.Description)
				items1.InputS3.Disabled = types.BoolPointerValue(itemsItem.InputS3.Disabled)
				if itemsItem.InputS3.DurationSeconds != nil {
					items1.InputS3.DurationSeconds = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.DurationSeconds)))
				} else {
					items1.InputS3.DurationSeconds = types.NumberNull()
				}
				items1.InputS3.EnableAssumeRole = types.BoolPointerValue(itemsItem.InputS3.EnableAssumeRole)
				items1.InputS3.EnableSQSAssumeRole = types.BoolPointerValue(itemsItem.InputS3.EnableSQSAssumeRole)
				items1.InputS3.Encoding = types.StringPointerValue(itemsItem.InputS3.Encoding)
				items1.InputS3.Endpoint = types.StringPointerValue(itemsItem.InputS3.Endpoint)
				items1.InputS3.Environment = types.StringPointerValue(itemsItem.InputS3.Environment)
				items1.InputS3.FileFilter = types.StringPointerValue(itemsItem.InputS3.FileFilter)
				items1.InputS3.ID = types.StringPointerValue(itemsItem.InputS3.ID)
				if itemsItem.InputS3.MaxMessages != nil {
					items1.InputS3.MaxMessages = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.MaxMessages)))
				} else {
					items1.InputS3.MaxMessages = types.NumberNull()
				}
				items1.InputS3.Metadata = []tfTypes.InputS3Metadata{}
				for metadataCount42, metadataItem42 := range itemsItem.InputS3.Metadata {
					var metadata85 tfTypes.InputS3Metadata
					metadata85.Name = types.StringValue(metadataItem42.Name)
					metadata85.Value = types.StringValue(metadataItem42.Value)
					if metadataCount42+1 > len(items1.InputS3.Metadata) {
						items1.InputS3.Metadata = append(items1.InputS3.Metadata, metadata85)
					} else {
						items1.InputS3.Metadata[metadataCount42].Name = metadata85.Name
						items1.InputS3.Metadata[metadataCount42].Value = metadata85.Value
					}
				}
				if itemsItem.InputS3.NumReceivers != nil {
					items1.InputS3.NumReceivers = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.NumReceivers)))
				} else {
					items1.InputS3.NumReceivers = types.NumberNull()
				}
				if itemsItem.InputS3.ParquetChunkDownloadTimeout != nil {
					items1.InputS3.ParquetChunkDownloadTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.ParquetChunkDownloadTimeout)))
				} else {
					items1.InputS3.ParquetChunkDownloadTimeout = types.NumberNull()
				}
				if itemsItem.InputS3.ParquetChunkSizeMB != nil {
					items1.InputS3.ParquetChunkSizeMB = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.ParquetChunkSizeMB)))
				} else {
					items1.InputS3.ParquetChunkSizeMB = types.NumberNull()
				}
				items1.InputS3.Pipeline = types.StringPointerValue(itemsItem.InputS3.Pipeline)
				if itemsItem.InputS3.PollTimeout != nil {
					items1.InputS3.PollTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.PollTimeout)))
				} else {
					items1.InputS3.PollTimeout = types.NumberNull()
				}
				if itemsItem.InputS3.Pq == nil {
					items1.InputS3.Pq = nil
				} else {
					items1.InputS3.Pq = &tfTypes.InputS3Pq{}
					if itemsItem.InputS3.Pq.CommitFrequency != nil {
						items1.InputS3.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.Pq.CommitFrequency)))
					} else {
						items1.InputS3.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputS3.Pq.Compress != nil {
						items1.InputS3.Pq.Compress = types.StringValue(string(*itemsItem.InputS3.Pq.Compress))
					} else {
						items1.InputS3.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputS3.Pq.MaxBufferSize != nil {
						items1.InputS3.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.Pq.MaxBufferSize)))
					} else {
						items1.InputS3.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputS3.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputS3.Pq.MaxFileSize)
					items1.InputS3.Pq.MaxSize = types.StringPointerValue(itemsItem.InputS3.Pq.MaxSize)
					if itemsItem.InputS3.Pq.Mode != nil {
						items1.InputS3.Pq.Mode = types.StringValue(string(*itemsItem.InputS3.Pq.Mode))
					} else {
						items1.InputS3.Pq.Mode = types.StringNull()
					}
					items1.InputS3.Pq.Path = types.StringPointerValue(itemsItem.InputS3.Pq.Path)
				}
				items1.InputS3.PqEnabled = types.BoolPointerValue(itemsItem.InputS3.PqEnabled)
				if itemsItem.InputS3.Preprocess == nil {
					items1.InputS3.Preprocess = nil
				} else {
					items1.InputS3.Preprocess = &tfTypes.InputS3Preprocess{}
					items1.InputS3.Preprocess.Args = make([]types.String, 0, len(itemsItem.InputS3.Preprocess.Args))
					for _, v := range itemsItem.InputS3.Preprocess.Args {
						items1.InputS3.Preprocess.Args = append(items1.InputS3.Preprocess.Args, types.StringValue(v))
					}
					items1.InputS3.Preprocess.Command = types.StringPointerValue(itemsItem.InputS3.Preprocess.Command)
					items1.InputS3.Preprocess.Disabled = types.BoolPointerValue(itemsItem.InputS3.Preprocess.Disabled)
				}
				items1.InputS3.QueueName = types.StringValue(itemsItem.InputS3.QueueName)
				items1.InputS3.Region = types.StringPointerValue(itemsItem.InputS3.Region)
				items1.InputS3.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputS3.RejectUnauthorized)
				items1.InputS3.ReuseConnections = types.BoolPointerValue(itemsItem.InputS3.ReuseConnections)
				items1.InputS3.SendToRoutes = types.BoolPointerValue(itemsItem.InputS3.SendToRoutes)
				if itemsItem.InputS3.SignatureVersion != nil {
					items1.InputS3.SignatureVersion = types.StringValue(string(*itemsItem.InputS3.SignatureVersion))
				} else {
					items1.InputS3.SignatureVersion = types.StringNull()
				}
				items1.InputS3.SkipOnError = types.BoolPointerValue(itemsItem.InputS3.SkipOnError)
				if itemsItem.InputS3.SocketTimeout != nil {
					items1.InputS3.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.SocketTimeout)))
				} else {
					items1.InputS3.SocketTimeout = types.NumberNull()
				}
				if itemsItem.InputS3.StaleChannelFlushMs != nil {
					items1.InputS3.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.StaleChannelFlushMs)))
				} else {
					items1.InputS3.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputS3.Streamtags = make([]types.String, 0, len(itemsItem.InputS3.Streamtags))
				for _, v := range itemsItem.InputS3.Streamtags {
					items1.InputS3.Streamtags = append(items1.InputS3.Streamtags, types.StringValue(v))
				}
				items1.InputS3.Type = types.StringValue(string(itemsItem.InputS3.Type))
				if itemsItem.InputS3.VisibilityTimeout != nil {
					items1.InputS3.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3.VisibilityTimeout)))
				} else {
					items1.InputS3.VisibilityTimeout = types.NumberNull()
				}
			}
			if itemsItem.InputS3Inventory != nil {
				items1.InputS3Inventory = &tfTypes.InputS3Inventory{}
				items1.InputS3Inventory.AssumeRoleArn = types.StringPointerValue(itemsItem.InputS3Inventory.AssumeRoleArn)
				items1.InputS3Inventory.AssumeRoleExternalID = types.StringPointerValue(itemsItem.InputS3Inventory.AssumeRoleExternalID)
				items1.InputS3Inventory.AwsAccountID = types.StringPointerValue(itemsItem.InputS3Inventory.AwsAccountID)
				items1.InputS3Inventory.AwsAPIKey = types.StringPointerValue(itemsItem.InputS3Inventory.AwsAPIKey)
				if itemsItem.InputS3Inventory.AwsAuthenticationMethod != nil {
					items1.InputS3Inventory.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.InputS3Inventory.AwsAuthenticationMethod))
				} else {
					items1.InputS3Inventory.AwsAuthenticationMethod = types.StringNull()
				}
				items1.InputS3Inventory.AwsSecret = types.StringPointerValue(itemsItem.InputS3Inventory.AwsSecret)
				items1.InputS3Inventory.AwsSecretKey = types.StringPointerValue(itemsItem.InputS3Inventory.AwsSecretKey)
				items1.InputS3Inventory.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputS3Inventory.BreakerRulesets))
				for _, v := range itemsItem.InputS3Inventory.BreakerRulesets {
					items1.InputS3Inventory.BreakerRulesets = append(items1.InputS3Inventory.BreakerRulesets, types.StringValue(v))
				}
				if itemsItem.InputS3Inventory.Checkpointing == nil {
					items1.InputS3Inventory.Checkpointing = nil
				} else {
					items1.InputS3Inventory.Checkpointing = &tfTypes.InputS3InventoryCheckpointing{}
					items1.InputS3Inventory.Checkpointing.Enabled = types.BoolPointerValue(itemsItem.InputS3Inventory.Checkpointing.Enabled)
					if itemsItem.InputS3Inventory.Checkpointing.Retries != nil {
						items1.InputS3Inventory.Checkpointing.Retries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.Checkpointing.Retries)))
					} else {
						items1.InputS3Inventory.Checkpointing.Retries = types.NumberNull()
					}
				}
				items1.InputS3Inventory.ChecksumSuffix = types.StringPointerValue(itemsItem.InputS3Inventory.ChecksumSuffix)
				items1.InputS3Inventory.Connections = []tfTypes.InputS3InventoryConnections{}
				for connectionsCount41, connectionsItem41 := range itemsItem.InputS3Inventory.Connections {
					var connections83 tfTypes.InputS3InventoryConnections
					connections83.Output = types.StringValue(connectionsItem41.Output)
					connections83.Pipeline = types.StringPointerValue(connectionsItem41.Pipeline)
					if connectionsCount41+1 > len(items1.InputS3Inventory.Connections) {
						items1.InputS3Inventory.Connections = append(items1.InputS3Inventory.Connections, connections83)
					} else {
						items1.InputS3Inventory.Connections[connectionsCount41].Output = connections83.Output
						items1.InputS3Inventory.Connections[connectionsCount41].Pipeline = connections83.Pipeline
					}
				}
				items1.InputS3Inventory.Description = types.StringPointerValue(itemsItem.InputS3Inventory.Description)
				items1.InputS3Inventory.Disabled = types.BoolPointerValue(itemsItem.InputS3Inventory.Disabled)
				if itemsItem.InputS3Inventory.DurationSeconds != nil {
					items1.InputS3Inventory.DurationSeconds = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.DurationSeconds)))
				} else {
					items1.InputS3Inventory.DurationSeconds = types.NumberNull()
				}
				items1.InputS3Inventory.EnableAssumeRole = types.BoolPointerValue(itemsItem.InputS3Inventory.EnableAssumeRole)
				items1.InputS3Inventory.EnableSQSAssumeRole = types.BoolPointerValue(itemsItem.InputS3Inventory.EnableSQSAssumeRole)
				items1.InputS3Inventory.Endpoint = types.StringPointerValue(itemsItem.InputS3Inventory.Endpoint)
				items1.InputS3Inventory.Environment = types.StringPointerValue(itemsItem.InputS3Inventory.Environment)
				items1.InputS3Inventory.FileFilter = types.StringPointerValue(itemsItem.InputS3Inventory.FileFilter)
				items1.InputS3Inventory.ID = types.StringPointerValue(itemsItem.InputS3Inventory.ID)
				items1.InputS3Inventory.MaxManifestSizeKB = types.Int64PointerValue(itemsItem.InputS3Inventory.MaxManifestSizeKB)
				if itemsItem.InputS3Inventory.MaxMessages != nil {
					items1.InputS3Inventory.MaxMessages = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.MaxMessages)))
				} else {
					items1.InputS3Inventory.MaxMessages = types.NumberNull()
				}
				items1.InputS3Inventory.Metadata = []tfTypes.InputS3InventoryMetadata{}
				for metadataCount43, metadataItem43 := range itemsItem.InputS3Inventory.Metadata {
					var metadata87 tfTypes.InputS3InventoryMetadata
					metadata87.Name = types.StringValue(metadataItem43.Name)
					metadata87.Value = types.StringValue(metadataItem43.Value)
					if metadataCount43+1 > len(items1.InputS3Inventory.Metadata) {
						items1.InputS3Inventory.Metadata = append(items1.InputS3Inventory.Metadata, metadata87)
					} else {
						items1.InputS3Inventory.Metadata[metadataCount43].Name = metadata87.Name
						items1.InputS3Inventory.Metadata[metadataCount43].Value = metadata87.Value
					}
				}
				if itemsItem.InputS3Inventory.NumReceivers != nil {
					items1.InputS3Inventory.NumReceivers = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.NumReceivers)))
				} else {
					items1.InputS3Inventory.NumReceivers = types.NumberNull()
				}
				if itemsItem.InputS3Inventory.ParquetChunkDownloadTimeout != nil {
					items1.InputS3Inventory.ParquetChunkDownloadTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.ParquetChunkDownloadTimeout)))
				} else {
					items1.InputS3Inventory.ParquetChunkDownloadTimeout = types.NumberNull()
				}
				if itemsItem.InputS3Inventory.ParquetChunkSizeMB != nil {
					items1.InputS3Inventory.ParquetChunkSizeMB = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.ParquetChunkSizeMB)))
				} else {
					items1.InputS3Inventory.ParquetChunkSizeMB = types.NumberNull()
				}
				items1.InputS3Inventory.Pipeline = types.StringPointerValue(itemsItem.InputS3Inventory.Pipeline)
				if itemsItem.InputS3Inventory.PollTimeout != nil {
					items1.InputS3Inventory.PollTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.PollTimeout)))
				} else {
					items1.InputS3Inventory.PollTimeout = types.NumberNull()
				}
				if itemsItem.InputS3Inventory.Pq == nil {
					items1.InputS3Inventory.Pq = nil
				} else {
					items1.InputS3Inventory.Pq = &tfTypes.InputS3InventoryPq{}
					if itemsItem.InputS3Inventory.Pq.CommitFrequency != nil {
						items1.InputS3Inventory.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.Pq.CommitFrequency)))
					} else {
						items1.InputS3Inventory.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputS3Inventory.Pq.Compress != nil {
						items1.InputS3Inventory.Pq.Compress = types.StringValue(string(*itemsItem.InputS3Inventory.Pq.Compress))
					} else {
						items1.InputS3Inventory.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputS3Inventory.Pq.MaxBufferSize != nil {
						items1.InputS3Inventory.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.Pq.MaxBufferSize)))
					} else {
						items1.InputS3Inventory.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputS3Inventory.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputS3Inventory.Pq.MaxFileSize)
					items1.InputS3Inventory.Pq.MaxSize = types.StringPointerValue(itemsItem.InputS3Inventory.Pq.MaxSize)
					if itemsItem.InputS3Inventory.Pq.Mode != nil {
						items1.InputS3Inventory.Pq.Mode = types.StringValue(string(*itemsItem.InputS3Inventory.Pq.Mode))
					} else {
						items1.InputS3Inventory.Pq.Mode = types.StringNull()
					}
					items1.InputS3Inventory.Pq.Path = types.StringPointerValue(itemsItem.InputS3Inventory.Pq.Path)
				}
				items1.InputS3Inventory.PqEnabled = types.BoolPointerValue(itemsItem.InputS3Inventory.PqEnabled)
				if itemsItem.InputS3Inventory.Preprocess == nil {
					items1.InputS3Inventory.Preprocess = nil
				} else {
					items1.InputS3Inventory.Preprocess = &tfTypes.InputS3InventoryPreprocess{}
					items1.InputS3Inventory.Preprocess.Args = make([]types.String, 0, len(itemsItem.InputS3Inventory.Preprocess.Args))
					for _, v := range itemsItem.InputS3Inventory.Preprocess.Args {
						items1.InputS3Inventory.Preprocess.Args = append(items1.InputS3Inventory.Preprocess.Args, types.StringValue(v))
					}
					items1.InputS3Inventory.Preprocess.Command = types.StringPointerValue(itemsItem.InputS3Inventory.Preprocess.Command)
					items1.InputS3Inventory.Preprocess.Disabled = types.BoolPointerValue(itemsItem.InputS3Inventory.Preprocess.Disabled)
				}
				items1.InputS3Inventory.QueueName = types.StringValue(itemsItem.InputS3Inventory.QueueName)
				items1.InputS3Inventory.Region = types.StringPointerValue(itemsItem.InputS3Inventory.Region)
				items1.InputS3Inventory.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputS3Inventory.RejectUnauthorized)
				items1.InputS3Inventory.ReuseConnections = types.BoolPointerValue(itemsItem.InputS3Inventory.ReuseConnections)
				items1.InputS3Inventory.SendToRoutes = types.BoolPointerValue(itemsItem.InputS3Inventory.SendToRoutes)
				if itemsItem.InputS3Inventory.SignatureVersion != nil {
					items1.InputS3Inventory.SignatureVersion = types.StringValue(string(*itemsItem.InputS3Inventory.SignatureVersion))
				} else {
					items1.InputS3Inventory.SignatureVersion = types.StringNull()
				}
				items1.InputS3Inventory.SkipOnError = types.BoolPointerValue(itemsItem.InputS3Inventory.SkipOnError)
				if itemsItem.InputS3Inventory.SocketTimeout != nil {
					items1.InputS3Inventory.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.SocketTimeout)))
				} else {
					items1.InputS3Inventory.SocketTimeout = types.NumberNull()
				}
				if itemsItem.InputS3Inventory.StaleChannelFlushMs != nil {
					items1.InputS3Inventory.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.StaleChannelFlushMs)))
				} else {
					items1.InputS3Inventory.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputS3Inventory.Streamtags = make([]types.String, 0, len(itemsItem.InputS3Inventory.Streamtags))
				for _, v := range itemsItem.InputS3Inventory.Streamtags {
					items1.InputS3Inventory.Streamtags = append(items1.InputS3Inventory.Streamtags, types.StringValue(v))
				}
				items1.InputS3Inventory.Type = types.StringValue(string(itemsItem.InputS3Inventory.Type))
				items1.InputS3Inventory.ValidateInventoryFiles = types.BoolPointerValue(itemsItem.InputS3Inventory.ValidateInventoryFiles)
				if itemsItem.InputS3Inventory.VisibilityTimeout != nil {
					items1.InputS3Inventory.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputS3Inventory.VisibilityTimeout)))
				} else {
					items1.InputS3Inventory.VisibilityTimeout = types.NumberNull()
				}
			}
			if itemsItem.InputSecurityLake != nil {
				items1.InputSecurityLake = &tfTypes.InputSecurityLake{}
				items1.InputSecurityLake.AssumeRoleArn = types.StringPointerValue(itemsItem.InputSecurityLake.AssumeRoleArn)
				items1.InputSecurityLake.AssumeRoleExternalID = types.StringPointerValue(itemsItem.InputSecurityLake.AssumeRoleExternalID)
				items1.InputSecurityLake.AwsAccountID = types.StringPointerValue(itemsItem.InputSecurityLake.AwsAccountID)
				items1.InputSecurityLake.AwsAPIKey = types.StringPointerValue(itemsItem.InputSecurityLake.AwsAPIKey)
				if itemsItem.InputSecurityLake.AwsAuthenticationMethod != nil {
					items1.InputSecurityLake.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.InputSecurityLake.AwsAuthenticationMethod))
				} else {
					items1.InputSecurityLake.AwsAuthenticationMethod = types.StringNull()
				}
				items1.InputSecurityLake.AwsSecret = types.StringPointerValue(itemsItem.InputSecurityLake.AwsSecret)
				items1.InputSecurityLake.AwsSecretKey = types.StringPointerValue(itemsItem.InputSecurityLake.AwsSecretKey)
				items1.InputSecurityLake.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputSecurityLake.BreakerRulesets))
				for _, v := range itemsItem.InputSecurityLake.BreakerRulesets {
					items1.InputSecurityLake.BreakerRulesets = append(items1.InputSecurityLake.BreakerRulesets, types.StringValue(v))
				}
				if itemsItem.InputSecurityLake.Checkpointing == nil {
					items1.InputSecurityLake.Checkpointing = nil
				} else {
					items1.InputSecurityLake.Checkpointing = &tfTypes.InputSecurityLakeCheckpointing{}
					items1.InputSecurityLake.Checkpointing.Enabled = types.BoolPointerValue(itemsItem.InputSecurityLake.Checkpointing.Enabled)
					if itemsItem.InputSecurityLake.Checkpointing.Retries != nil {
						items1.InputSecurityLake.Checkpointing.Retries = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.Checkpointing.Retries)))
					} else {
						items1.InputSecurityLake.Checkpointing.Retries = types.NumberNull()
					}
				}
				items1.InputSecurityLake.Connections = []tfTypes.InputSecurityLakeConnections{}
				for connectionsCount42, connectionsItem42 := range itemsItem.InputSecurityLake.Connections {
					var connections85 tfTypes.InputSecurityLakeConnections
					connections85.Output = types.StringValue(connectionsItem42.Output)
					connections85.Pipeline = types.StringPointerValue(connectionsItem42.Pipeline)
					if connectionsCount42+1 > len(items1.InputSecurityLake.Connections) {
						items1.InputSecurityLake.Connections = append(items1.InputSecurityLake.Connections, connections85)
					} else {
						items1.InputSecurityLake.Connections[connectionsCount42].Output = connections85.Output
						items1.InputSecurityLake.Connections[connectionsCount42].Pipeline = connections85.Pipeline
					}
				}
				items1.InputSecurityLake.Description = types.StringPointerValue(itemsItem.InputSecurityLake.Description)
				items1.InputSecurityLake.Disabled = types.BoolPointerValue(itemsItem.InputSecurityLake.Disabled)
				if itemsItem.InputSecurityLake.DurationSeconds != nil {
					items1.InputSecurityLake.DurationSeconds = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.DurationSeconds)))
				} else {
					items1.InputSecurityLake.DurationSeconds = types.NumberNull()
				}
				items1.InputSecurityLake.EnableAssumeRole = types.BoolPointerValue(itemsItem.InputSecurityLake.EnableAssumeRole)
				items1.InputSecurityLake.EnableSQSAssumeRole = types.BoolPointerValue(itemsItem.InputSecurityLake.EnableSQSAssumeRole)
				items1.InputSecurityLake.Encoding = types.StringPointerValue(itemsItem.InputSecurityLake.Encoding)
				items1.InputSecurityLake.Endpoint = types.StringPointerValue(itemsItem.InputSecurityLake.Endpoint)
				items1.InputSecurityLake.Environment = types.StringPointerValue(itemsItem.InputSecurityLake.Environment)
				items1.InputSecurityLake.FileFilter = types.StringPointerValue(itemsItem.InputSecurityLake.FileFilter)
				items1.InputSecurityLake.ID = types.StringPointerValue(itemsItem.InputSecurityLake.ID)
				if itemsItem.InputSecurityLake.MaxMessages != nil {
					items1.InputSecurityLake.MaxMessages = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.MaxMessages)))
				} else {
					items1.InputSecurityLake.MaxMessages = types.NumberNull()
				}
				items1.InputSecurityLake.Metadata = []tfTypes.InputSecurityLakeMetadata{}
				for metadataCount44, metadataItem44 := range itemsItem.InputSecurityLake.Metadata {
					var metadata89 tfTypes.InputSecurityLakeMetadata
					metadata89.Name = types.StringValue(metadataItem44.Name)
					metadata89.Value = types.StringValue(metadataItem44.Value)
					if metadataCount44+1 > len(items1.InputSecurityLake.Metadata) {
						items1.InputSecurityLake.Metadata = append(items1.InputSecurityLake.Metadata, metadata89)
					} else {
						items1.InputSecurityLake.Metadata[metadataCount44].Name = metadata89.Name
						items1.InputSecurityLake.Metadata[metadataCount44].Value = metadata89.Value
					}
				}
				if itemsItem.InputSecurityLake.NumReceivers != nil {
					items1.InputSecurityLake.NumReceivers = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.NumReceivers)))
				} else {
					items1.InputSecurityLake.NumReceivers = types.NumberNull()
				}
				if itemsItem.InputSecurityLake.ParquetChunkDownloadTimeout != nil {
					items1.InputSecurityLake.ParquetChunkDownloadTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.ParquetChunkDownloadTimeout)))
				} else {
					items1.InputSecurityLake.ParquetChunkDownloadTimeout = types.NumberNull()
				}
				if itemsItem.InputSecurityLake.ParquetChunkSizeMB != nil {
					items1.InputSecurityLake.ParquetChunkSizeMB = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.ParquetChunkSizeMB)))
				} else {
					items1.InputSecurityLake.ParquetChunkSizeMB = types.NumberNull()
				}
				items1.InputSecurityLake.Pipeline = types.StringPointerValue(itemsItem.InputSecurityLake.Pipeline)
				if itemsItem.InputSecurityLake.PollTimeout != nil {
					items1.InputSecurityLake.PollTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.PollTimeout)))
				} else {
					items1.InputSecurityLake.PollTimeout = types.NumberNull()
				}
				if itemsItem.InputSecurityLake.Pq == nil {
					items1.InputSecurityLake.Pq = nil
				} else {
					items1.InputSecurityLake.Pq = &tfTypes.InputSecurityLakePq{}
					if itemsItem.InputSecurityLake.Pq.CommitFrequency != nil {
						items1.InputSecurityLake.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.Pq.CommitFrequency)))
					} else {
						items1.InputSecurityLake.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputSecurityLake.Pq.Compress != nil {
						items1.InputSecurityLake.Pq.Compress = types.StringValue(string(*itemsItem.InputSecurityLake.Pq.Compress))
					} else {
						items1.InputSecurityLake.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputSecurityLake.Pq.MaxBufferSize != nil {
						items1.InputSecurityLake.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.Pq.MaxBufferSize)))
					} else {
						items1.InputSecurityLake.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputSecurityLake.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputSecurityLake.Pq.MaxFileSize)
					items1.InputSecurityLake.Pq.MaxSize = types.StringPointerValue(itemsItem.InputSecurityLake.Pq.MaxSize)
					if itemsItem.InputSecurityLake.Pq.Mode != nil {
						items1.InputSecurityLake.Pq.Mode = types.StringValue(string(*itemsItem.InputSecurityLake.Pq.Mode))
					} else {
						items1.InputSecurityLake.Pq.Mode = types.StringNull()
					}
					items1.InputSecurityLake.Pq.Path = types.StringPointerValue(itemsItem.InputSecurityLake.Pq.Path)
				}
				items1.InputSecurityLake.PqEnabled = types.BoolPointerValue(itemsItem.InputSecurityLake.PqEnabled)
				if itemsItem.InputSecurityLake.Preprocess == nil {
					items1.InputSecurityLake.Preprocess = nil
				} else {
					items1.InputSecurityLake.Preprocess = &tfTypes.InputSecurityLakePreprocess{}
					items1.InputSecurityLake.Preprocess.Args = make([]types.String, 0, len(itemsItem.InputSecurityLake.Preprocess.Args))
					for _, v := range itemsItem.InputSecurityLake.Preprocess.Args {
						items1.InputSecurityLake.Preprocess.Args = append(items1.InputSecurityLake.Preprocess.Args, types.StringValue(v))
					}
					items1.InputSecurityLake.Preprocess.Command = types.StringPointerValue(itemsItem.InputSecurityLake.Preprocess.Command)
					items1.InputSecurityLake.Preprocess.Disabled = types.BoolPointerValue(itemsItem.InputSecurityLake.Preprocess.Disabled)
				}
				items1.InputSecurityLake.QueueName = types.StringValue(itemsItem.InputSecurityLake.QueueName)
				items1.InputSecurityLake.Region = types.StringPointerValue(itemsItem.InputSecurityLake.Region)
				items1.InputSecurityLake.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputSecurityLake.RejectUnauthorized)
				items1.InputSecurityLake.ReuseConnections = types.BoolPointerValue(itemsItem.InputSecurityLake.ReuseConnections)
				items1.InputSecurityLake.SendToRoutes = types.BoolPointerValue(itemsItem.InputSecurityLake.SendToRoutes)
				if itemsItem.InputSecurityLake.SignatureVersion != nil {
					items1.InputSecurityLake.SignatureVersion = types.StringValue(string(*itemsItem.InputSecurityLake.SignatureVersion))
				} else {
					items1.InputSecurityLake.SignatureVersion = types.StringNull()
				}
				items1.InputSecurityLake.SkipOnError = types.BoolPointerValue(itemsItem.InputSecurityLake.SkipOnError)
				if itemsItem.InputSecurityLake.SocketTimeout != nil {
					items1.InputSecurityLake.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.SocketTimeout)))
				} else {
					items1.InputSecurityLake.SocketTimeout = types.NumberNull()
				}
				if itemsItem.InputSecurityLake.StaleChannelFlushMs != nil {
					items1.InputSecurityLake.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.StaleChannelFlushMs)))
				} else {
					items1.InputSecurityLake.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputSecurityLake.Streamtags = make([]types.String, 0, len(itemsItem.InputSecurityLake.Streamtags))
				for _, v := range itemsItem.InputSecurityLake.Streamtags {
					items1.InputSecurityLake.Streamtags = append(items1.InputSecurityLake.Streamtags, types.StringValue(v))
				}
				items1.InputSecurityLake.Type = types.StringValue(string(itemsItem.InputSecurityLake.Type))
				if itemsItem.InputSecurityLake.VisibilityTimeout != nil {
					items1.InputSecurityLake.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSecurityLake.VisibilityTimeout)))
				} else {
					items1.InputSecurityLake.VisibilityTimeout = types.NumberNull()
				}
			}
			if itemsItem.InputSnmp != nil {
				items1.InputSnmp = &tfTypes.InputSnmp{}
				items1.InputSnmp.Connections = []tfTypes.InputSnmpConnections{}
				for connectionsCount43, connectionsItem43 := range itemsItem.InputSnmp.Connections {
					var connections87 tfTypes.InputSnmpConnections
					connections87.Output = types.StringValue(connectionsItem43.Output)
					connections87.Pipeline = types.StringPointerValue(connectionsItem43.Pipeline)
					if connectionsCount43+1 > len(items1.InputSnmp.Connections) {
						items1.InputSnmp.Connections = append(items1.InputSnmp.Connections, connections87)
					} else {
						items1.InputSnmp.Connections[connectionsCount43].Output = connections87.Output
						items1.InputSnmp.Connections[connectionsCount43].Pipeline = connections87.Pipeline
					}
				}
				items1.InputSnmp.Description = types.StringPointerValue(itemsItem.InputSnmp.Description)
				items1.InputSnmp.Disabled = types.BoolPointerValue(itemsItem.InputSnmp.Disabled)
				items1.InputSnmp.Environment = types.StringPointerValue(itemsItem.InputSnmp.Environment)
				items1.InputSnmp.Host = types.StringPointerValue(itemsItem.InputSnmp.Host)
				items1.InputSnmp.ID = types.StringPointerValue(itemsItem.InputSnmp.ID)
				items1.InputSnmp.IPWhitelistRegex = types.StringPointerValue(itemsItem.InputSnmp.IPWhitelistRegex)
				if itemsItem.InputSnmp.MaxBufferSize != nil {
					items1.InputSnmp.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSnmp.MaxBufferSize)))
				} else {
					items1.InputSnmp.MaxBufferSize = types.NumberNull()
				}
				items1.InputSnmp.Metadata = []tfTypes.InputSnmpMetadata{}
				for metadataCount45, metadataItem45 := range itemsItem.InputSnmp.Metadata {
					var metadata91 tfTypes.InputSnmpMetadata
					metadata91.Name = types.StringValue(metadataItem45.Name)
					metadata91.Value = types.StringValue(metadataItem45.Value)
					if metadataCount45+1 > len(items1.InputSnmp.Metadata) {
						items1.InputSnmp.Metadata = append(items1.InputSnmp.Metadata, metadata91)
					} else {
						items1.InputSnmp.Metadata[metadataCount45].Name = metadata91.Name
						items1.InputSnmp.Metadata[metadataCount45].Value = metadata91.Value
					}
				}
				items1.InputSnmp.Pipeline = types.StringPointerValue(itemsItem.InputSnmp.Pipeline)
				if itemsItem.InputSnmp.Port != nil {
					items1.InputSnmp.Port = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSnmp.Port)))
				} else {
					items1.InputSnmp.Port = types.NumberNull()
				}
				if itemsItem.InputSnmp.Pq == nil {
					items1.InputSnmp.Pq = nil
				} else {
					items1.InputSnmp.Pq = &tfTypes.InputSnmpPq{}
					if itemsItem.InputSnmp.Pq.CommitFrequency != nil {
						items1.InputSnmp.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSnmp.Pq.CommitFrequency)))
					} else {
						items1.InputSnmp.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputSnmp.Pq.Compress != nil {
						items1.InputSnmp.Pq.Compress = types.StringValue(string(*itemsItem.InputSnmp.Pq.Compress))
					} else {
						items1.InputSnmp.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputSnmp.Pq.MaxBufferSize != nil {
						items1.InputSnmp.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSnmp.Pq.MaxBufferSize)))
					} else {
						items1.InputSnmp.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputSnmp.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputSnmp.Pq.MaxFileSize)
					items1.InputSnmp.Pq.MaxSize = types.StringPointerValue(itemsItem.InputSnmp.Pq.MaxSize)
					if itemsItem.InputSnmp.Pq.Mode != nil {
						items1.InputSnmp.Pq.Mode = types.StringValue(string(*itemsItem.InputSnmp.Pq.Mode))
					} else {
						items1.InputSnmp.Pq.Mode = types.StringNull()
					}
					items1.InputSnmp.Pq.Path = types.StringPointerValue(itemsItem.InputSnmp.Pq.Path)
				}
				items1.InputSnmp.PqEnabled = types.BoolPointerValue(itemsItem.InputSnmp.PqEnabled)
				items1.InputSnmp.SendToRoutes = types.BoolPointerValue(itemsItem.InputSnmp.SendToRoutes)
				if itemsItem.InputSnmp.SnmpV3Auth == nil {
					items1.InputSnmp.SnmpV3Auth = nil
				} else {
					items1.InputSnmp.SnmpV3Auth = &tfTypes.SNMPv3Authentication{}
					items1.InputSnmp.SnmpV3Auth.AllowUnmatchedTrap = types.BoolPointerValue(itemsItem.InputSnmp.SnmpV3Auth.AllowUnmatchedTrap)
					items1.InputSnmp.SnmpV3Auth.V3AuthEnabled = types.BoolPointerValue(itemsItem.InputSnmp.SnmpV3Auth.V3AuthEnabled)
					items1.InputSnmp.SnmpV3Auth.V3Users = []tfTypes.V3Users{}
					for v3UsersCount, v3UsersItem := range itemsItem.InputSnmp.SnmpV3Auth.V3Users {
						var v3Users1 tfTypes.V3Users
						if v3UsersItem.AuthKey == nil {
							v3Users1.AuthKey = types.StringNull()
						} else {
							authKeyResult, _ := json.Marshal(v3UsersItem.AuthKey)
							v3Users1.AuthKey = types.StringValue(string(authKeyResult))
						}
						if v3UsersItem.AuthProtocol != nil {
							v3Users1.AuthProtocol = types.StringValue(string(*v3UsersItem.AuthProtocol))
						} else {
							v3Users1.AuthProtocol = types.StringNull()
						}
						v3Users1.Name = types.StringValue(v3UsersItem.Name)
						v3Users1.PrivProtocol = types.StringPointerValue(v3UsersItem.PrivProtocol)
						if v3UsersCount+1 > len(items1.InputSnmp.SnmpV3Auth.V3Users) {
							items1.InputSnmp.SnmpV3Auth.V3Users = append(items1.InputSnmp.SnmpV3Auth.V3Users, v3Users1)
						} else {
							items1.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].AuthKey = v3Users1.AuthKey
							items1.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].AuthProtocol = v3Users1.AuthProtocol
							items1.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].Name = v3Users1.Name
							items1.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].PrivProtocol = v3Users1.PrivProtocol
						}
					}
				}
				items1.InputSnmp.Streamtags = make([]types.String, 0, len(itemsItem.InputSnmp.Streamtags))
				for _, v := range itemsItem.InputSnmp.Streamtags {
					items1.InputSnmp.Streamtags = append(items1.InputSnmp.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputSnmp.Type != nil {
					items1.InputSnmp.Type = types.StringValue(string(*itemsItem.InputSnmp.Type))
				} else {
					items1.InputSnmp.Type = types.StringNull()
				}
				if itemsItem.InputSnmp.UDPSocketRxBufSize != nil {
					items1.InputSnmp.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSnmp.UDPSocketRxBufSize)))
				} else {
					items1.InputSnmp.UDPSocketRxBufSize = types.NumberNull()
				}
				items1.InputSnmp.VarbindsWithTypes = types.BoolPointerValue(itemsItem.InputSnmp.VarbindsWithTypes)
			}
			if itemsItem.InputSplunk != nil {
				items1.InputSplunk = &tfTypes.InputSplunk{}
				items1.InputSplunk.AuthTokens = []tfTypes.AuthTokens{}
				for authTokensCount, authTokensItem := range itemsItem.InputSplunk.AuthTokens {
					var authTokens6 tfTypes.AuthTokens
					authTokens6.Description = types.StringPointerValue(authTokensItem.Description)
					authTokens6.Token = types.StringValue(authTokensItem.Token)
					if authTokensCount+1 > len(items1.InputSplunk.AuthTokens) {
						items1.InputSplunk.AuthTokens = append(items1.InputSplunk.AuthTokens, authTokens6)
					} else {
						items1.InputSplunk.AuthTokens[authTokensCount].Description = authTokens6.Description
						items1.InputSplunk.AuthTokens[authTokensCount].Token = authTokens6.Token
					}
				}
				items1.InputSplunk.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputSplunk.BreakerRulesets))
				for _, v := range itemsItem.InputSplunk.BreakerRulesets {
					items1.InputSplunk.BreakerRulesets = append(items1.InputSplunk.BreakerRulesets, types.StringValue(v))
				}
				items1.InputSplunk.Compress = types.StringPointerValue(itemsItem.InputSplunk.Compress)
				items1.InputSplunk.Connections = []tfTypes.InputSplunkConnections{}
				for connectionsCount44, connectionsItem44 := range itemsItem.InputSplunk.Connections {
					var connections89 tfTypes.InputSplunkConnections
					connections89.Output = types.StringValue(connectionsItem44.Output)
					connections89.Pipeline = types.StringPointerValue(connectionsItem44.Pipeline)
					if connectionsCount44+1 > len(items1.InputSplunk.Connections) {
						items1.InputSplunk.Connections = append(items1.InputSplunk.Connections, connections89)
					} else {
						items1.InputSplunk.Connections[connectionsCount44].Output = connections89.Output
						items1.InputSplunk.Connections[connectionsCount44].Pipeline = connections89.Pipeline
					}
				}
				items1.InputSplunk.Description = types.StringPointerValue(itemsItem.InputSplunk.Description)
				items1.InputSplunk.Disabled = types.BoolPointerValue(itemsItem.InputSplunk.Disabled)
				items1.InputSplunk.DropControlFields = types.BoolPointerValue(itemsItem.InputSplunk.DropControlFields)
				items1.InputSplunk.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputSplunk.EnableProxyHeader)
				items1.InputSplunk.Environment = types.StringPointerValue(itemsItem.InputSplunk.Environment)
				items1.InputSplunk.ExtractMetrics = types.BoolPointerValue(itemsItem.InputSplunk.ExtractMetrics)
				items1.InputSplunk.Host = types.StringPointerValue(itemsItem.InputSplunk.Host)
				items1.InputSplunk.ID = types.StringPointerValue(itemsItem.InputSplunk.ID)
				items1.InputSplunk.IPWhitelistRegex = types.StringPointerValue(itemsItem.InputSplunk.IPWhitelistRegex)
				if itemsItem.InputSplunk.MaxActiveCxn != nil {
					items1.InputSplunk.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunk.MaxActiveCxn)))
				} else {
					items1.InputSplunk.MaxActiveCxn = types.NumberNull()
				}
				if itemsItem.InputSplunk.MaxS2Sversion != nil {
					items1.InputSplunk.MaxS2Sversion = types.StringValue(string(*itemsItem.InputSplunk.MaxS2Sversion))
				} else {
					items1.InputSplunk.MaxS2Sversion = types.StringNull()
				}
				items1.InputSplunk.Metadata = []tfTypes.InputSplunkMetadata{}
				for metadataCount46, metadataItem46 := range itemsItem.InputSplunk.Metadata {
					var metadata93 tfTypes.InputSplunkMetadata
					metadata93.Name = types.StringValue(metadataItem46.Name)
					metadata93.Value = types.StringValue(metadataItem46.Value)
					if metadataCount46+1 > len(items1.InputSplunk.Metadata) {
						items1.InputSplunk.Metadata = append(items1.InputSplunk.Metadata, metadata93)
					} else {
						items1.InputSplunk.Metadata[metadataCount46].Name = metadata93.Name
						items1.InputSplunk.Metadata[metadataCount46].Value = metadata93.Value
					}
				}
				items1.InputSplunk.Pipeline = types.StringPointerValue(itemsItem.InputSplunk.Pipeline)
				items1.InputSplunk.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputSplunk.Port)))
				if itemsItem.InputSplunk.Pq == nil {
					items1.InputSplunk.Pq = nil
				} else {
					items1.InputSplunk.Pq = &tfTypes.InputSplunkPq{}
					if itemsItem.InputSplunk.Pq.CommitFrequency != nil {
						items1.InputSplunk.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunk.Pq.CommitFrequency)))
					} else {
						items1.InputSplunk.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputSplunk.Pq.Compress != nil {
						items1.InputSplunk.Pq.Compress = types.StringValue(string(*itemsItem.InputSplunk.Pq.Compress))
					} else {
						items1.InputSplunk.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputSplunk.Pq.MaxBufferSize != nil {
						items1.InputSplunk.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunk.Pq.MaxBufferSize)))
					} else {
						items1.InputSplunk.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputSplunk.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputSplunk.Pq.MaxFileSize)
					items1.InputSplunk.Pq.MaxSize = types.StringPointerValue(itemsItem.InputSplunk.Pq.MaxSize)
					if itemsItem.InputSplunk.Pq.Mode != nil {
						items1.InputSplunk.Pq.Mode = types.StringValue(string(*itemsItem.InputSplunk.Pq.Mode))
					} else {
						items1.InputSplunk.Pq.Mode = types.StringNull()
					}
					items1.InputSplunk.Pq.Path = types.StringPointerValue(itemsItem.InputSplunk.Pq.Path)
				}
				items1.InputSplunk.PqEnabled = types.BoolPointerValue(itemsItem.InputSplunk.PqEnabled)
				items1.InputSplunk.SendToRoutes = types.BoolPointerValue(itemsItem.InputSplunk.SendToRoutes)
				if itemsItem.InputSplunk.SocketEndingMaxWait != nil {
					items1.InputSplunk.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunk.SocketEndingMaxWait)))
				} else {
					items1.InputSplunk.SocketEndingMaxWait = types.NumberNull()
				}
				if itemsItem.InputSplunk.SocketIdleTimeout != nil {
					items1.InputSplunk.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunk.SocketIdleTimeout)))
				} else {
					items1.InputSplunk.SocketIdleTimeout = types.NumberNull()
				}
				if itemsItem.InputSplunk.SocketMaxLifespan != nil {
					items1.InputSplunk.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunk.SocketMaxLifespan)))
				} else {
					items1.InputSplunk.SocketMaxLifespan = types.NumberNull()
				}
				if itemsItem.InputSplunk.StaleChannelFlushMs != nil {
					items1.InputSplunk.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunk.StaleChannelFlushMs)))
				} else {
					items1.InputSplunk.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputSplunk.Streamtags = make([]types.String, 0, len(itemsItem.InputSplunk.Streamtags))
				for _, v := range itemsItem.InputSplunk.Streamtags {
					items1.InputSplunk.Streamtags = append(items1.InputSplunk.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputSplunk.TLS == nil {
					items1.InputSplunk.TLS = nil
				} else {
					items1.InputSplunk.TLS = &tfTypes.InputSplunkTLSSettingsServerSide{}
					items1.InputSplunk.TLS.CaPath = types.StringPointerValue(itemsItem.InputSplunk.TLS.CaPath)
					items1.InputSplunk.TLS.CertificateName = types.StringPointerValue(itemsItem.InputSplunk.TLS.CertificateName)
					items1.InputSplunk.TLS.CertPath = types.StringPointerValue(itemsItem.InputSplunk.TLS.CertPath)
					if itemsItem.InputSplunk.TLS.CommonNameRegex == nil {
						items1.InputSplunk.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult15, _ := json.Marshal(itemsItem.InputSplunk.TLS.CommonNameRegex)
						items1.InputSplunk.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult15))
					}
					items1.InputSplunk.TLS.Disabled = types.BoolPointerValue(itemsItem.InputSplunk.TLS.Disabled)
					if itemsItem.InputSplunk.TLS.MaxVersion != nil {
						items1.InputSplunk.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputSplunk.TLS.MaxVersion))
					} else {
						items1.InputSplunk.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputSplunk.TLS.MinVersion != nil {
						items1.InputSplunk.TLS.MinVersion = types.StringValue(string(*itemsItem.InputSplunk.TLS.MinVersion))
					} else {
						items1.InputSplunk.TLS.MinVersion = types.StringNull()
					}
					items1.InputSplunk.TLS.Passphrase = types.StringPointerValue(itemsItem.InputSplunk.TLS.Passphrase)
					items1.InputSplunk.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputSplunk.TLS.PrivKeyPath)
					if itemsItem.InputSplunk.TLS.RejectUnauthorized == nil {
						items1.InputSplunk.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult15, _ := json.Marshal(itemsItem.InputSplunk.TLS.RejectUnauthorized)
						items1.InputSplunk.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult15))
					}
					items1.InputSplunk.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputSplunk.TLS.RequestCert)
				}
				if itemsItem.InputSplunk.Type != nil {
					items1.InputSplunk.Type = types.StringValue(string(*itemsItem.InputSplunk.Type))
				} else {
					items1.InputSplunk.Type = types.StringNull()
				}
				items1.InputSplunk.UseFwdTimezone = types.BoolPointerValue(itemsItem.InputSplunk.UseFwdTimezone)
			}
			if itemsItem.InputSplunkHec != nil {
				items1.InputSplunkHec = &tfTypes.InputSplunkHec{}
				items1.InputSplunkHec.AccessControlAllowHeaders = make([]types.String, 0, len(itemsItem.InputSplunkHec.AccessControlAllowHeaders))
				for _, v := range itemsItem.InputSplunkHec.AccessControlAllowHeaders {
					items1.InputSplunkHec.AccessControlAllowHeaders = append(items1.InputSplunkHec.AccessControlAllowHeaders, types.StringValue(v))
				}
				items1.InputSplunkHec.AccessControlAllowOrigin = make([]types.String, 0, len(itemsItem.InputSplunkHec.AccessControlAllowOrigin))
				for _, v := range itemsItem.InputSplunkHec.AccessControlAllowOrigin {
					items1.InputSplunkHec.AccessControlAllowOrigin = append(items1.InputSplunkHec.AccessControlAllowOrigin, types.StringValue(v))
				}
				if itemsItem.InputSplunkHec.ActivityLogSampleRate != nil {
					items1.InputSplunkHec.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkHec.ActivityLogSampleRate)))
				} else {
					items1.InputSplunkHec.ActivityLogSampleRate = types.NumberNull()
				}
				items1.InputSplunkHec.AllowedIndexes = make([]types.String, 0, len(itemsItem.InputSplunkHec.AllowedIndexes))
				for _, v := range itemsItem.InputSplunkHec.AllowedIndexes {
					items1.InputSplunkHec.AllowedIndexes = append(items1.InputSplunkHec.AllowedIndexes, types.StringValue(v))
				}
				items1.InputSplunkHec.AuthTokens = []tfTypes.InputSplunkHecAuthTokens{}
				for authTokensCount1, authTokensItem1 := range itemsItem.InputSplunkHec.AuthTokens {
					var authTokens8 tfTypes.InputSplunkHecAuthTokens
					authTokens8.AllowedIndexesAtToken = make([]types.String, 0, len(authTokensItem1.AllowedIndexesAtToken))
					for _, v := range authTokensItem1.AllowedIndexesAtToken {
						authTokens8.AllowedIndexesAtToken = append(authTokens8.AllowedIndexesAtToken, types.StringValue(v))
					}
					if authTokensItem1.AuthType != nil {
						authTokens8.AuthType = types.StringValue(string(*authTokensItem1.AuthType))
					} else {
						authTokens8.AuthType = types.StringNull()
					}
					authTokens8.Description = types.StringPointerValue(authTokensItem1.Description)
					authTokens8.Enabled = types.BoolPointerValue(authTokensItem1.Enabled)
					authTokens8.Metadata = []tfTypes.InputSplunkHecAuthTokensMetadata{}
					for metadataCount47, metadataItem47 := range authTokensItem1.Metadata {
						var metadata95 tfTypes.InputSplunkHecAuthTokensMetadata
						metadata95.Name = types.StringValue(metadataItem47.Name)
						metadata95.Value = types.StringValue(metadataItem47.Value)
						if metadataCount47+1 > len(authTokens8.Metadata) {
							authTokens8.Metadata = append(authTokens8.Metadata, metadata95)
						} else {
							authTokens8.Metadata[metadataCount47].Name = metadata95.Name
							authTokens8.Metadata[metadataCount47].Value = metadata95.Value
						}
					}
					tokenResult, _ := json.Marshal(authTokensItem1.Token)
					authTokens8.Token = types.StringValue(string(tokenResult))
					if authTokensItem1.TokenSecret == nil {
						authTokens8.TokenSecret = types.StringNull()
					} else {
						tokenSecretResult, _ := json.Marshal(authTokensItem1.TokenSecret)
						authTokens8.TokenSecret = types.StringValue(string(tokenSecretResult))
					}
					if authTokensCount1+1 > len(items1.InputSplunkHec.AuthTokens) {
						items1.InputSplunkHec.AuthTokens = append(items1.InputSplunkHec.AuthTokens, authTokens8)
					} else {
						items1.InputSplunkHec.AuthTokens[authTokensCount1].AllowedIndexesAtToken = authTokens8.AllowedIndexesAtToken
						items1.InputSplunkHec.AuthTokens[authTokensCount1].AuthType = authTokens8.AuthType
						items1.InputSplunkHec.AuthTokens[authTokensCount1].Description = authTokens8.Description
						items1.InputSplunkHec.AuthTokens[authTokensCount1].Enabled = authTokens8.Enabled
						items1.InputSplunkHec.AuthTokens[authTokensCount1].Metadata = authTokens8.Metadata
						items1.InputSplunkHec.AuthTokens[authTokensCount1].Token = authTokens8.Token
						items1.InputSplunkHec.AuthTokens[authTokensCount1].TokenSecret = authTokens8.TokenSecret
					}
				}
				items1.InputSplunkHec.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputSplunkHec.BreakerRulesets))
				for _, v := range itemsItem.InputSplunkHec.BreakerRulesets {
					items1.InputSplunkHec.BreakerRulesets = append(items1.InputSplunkHec.BreakerRulesets, types.StringValue(v))
				}
				items1.InputSplunkHec.CaptureHeaders = types.BoolPointerValue(itemsItem.InputSplunkHec.CaptureHeaders)
				items1.InputSplunkHec.Connections = []tfTypes.InputSplunkHecConnections{}
				for connectionsCount45, connectionsItem45 := range itemsItem.InputSplunkHec.Connections {
					var connections91 tfTypes.InputSplunkHecConnections
					connections91.Output = types.StringValue(connectionsItem45.Output)
					connections91.Pipeline = types.StringPointerValue(connectionsItem45.Pipeline)
					if connectionsCount45+1 > len(items1.InputSplunkHec.Connections) {
						items1.InputSplunkHec.Connections = append(items1.InputSplunkHec.Connections, connections91)
					} else {
						items1.InputSplunkHec.Connections[connectionsCount45].Output = connections91.Output
						items1.InputSplunkHec.Connections[connectionsCount45].Pipeline = connections91.Pipeline
					}
				}
				items1.InputSplunkHec.Description = types.StringPointerValue(itemsItem.InputSplunkHec.Description)
				items1.InputSplunkHec.Disabled = types.BoolPointerValue(itemsItem.InputSplunkHec.Disabled)
				items1.InputSplunkHec.DropControlFields = types.BoolPointerValue(itemsItem.InputSplunkHec.DropControlFields)
				items1.InputSplunkHec.EmitTokenMetrics = types.BoolPointerValue(itemsItem.InputSplunkHec.EmitTokenMetrics)
				if itemsItem.InputSplunkHec.EnableHealthCheck == nil {
					items1.InputSplunkHec.EnableHealthCheck = types.StringNull()
				} else {
					enableHealthCheckResult, _ := json.Marshal(itemsItem.InputSplunkHec.EnableHealthCheck)
					items1.InputSplunkHec.EnableHealthCheck = types.StringValue(string(enableHealthCheckResult))
				}
				items1.InputSplunkHec.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputSplunkHec.EnableProxyHeader)
				items1.InputSplunkHec.Environment = types.StringPointerValue(itemsItem.InputSplunkHec.Environment)
				items1.InputSplunkHec.ExtractMetrics = types.BoolPointerValue(itemsItem.InputSplunkHec.ExtractMetrics)
				items1.InputSplunkHec.Host = types.StringPointerValue(itemsItem.InputSplunkHec.Host)
				items1.InputSplunkHec.ID = types.StringPointerValue(itemsItem.InputSplunkHec.ID)
				items1.InputSplunkHec.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputSplunkHec.IPAllowlistRegex)
				items1.InputSplunkHec.IPDenylistRegex = types.StringPointerValue(itemsItem.InputSplunkHec.IPDenylistRegex)
				if itemsItem.InputSplunkHec.KeepAliveTimeout != nil {
					items1.InputSplunkHec.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkHec.KeepAliveTimeout)))
				} else {
					items1.InputSplunkHec.KeepAliveTimeout = types.NumberNull()
				}
				if itemsItem.InputSplunkHec.MaxActiveReq != nil {
					items1.InputSplunkHec.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkHec.MaxActiveReq)))
				} else {
					items1.InputSplunkHec.MaxActiveReq = types.NumberNull()
				}
				items1.InputSplunkHec.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputSplunkHec.MaxRequestsPerSocket)
				items1.InputSplunkHec.Metadata = []tfTypes.InputSplunkHecMetadata{}
				for metadataCount48, metadataItem48 := range itemsItem.InputSplunkHec.Metadata {
					var metadata97 tfTypes.InputSplunkHecMetadata
					metadata97.Name = types.StringValue(metadataItem48.Name)
					metadata97.Value = types.StringValue(metadataItem48.Value)
					if metadataCount48+1 > len(items1.InputSplunkHec.Metadata) {
						items1.InputSplunkHec.Metadata = append(items1.InputSplunkHec.Metadata, metadata97)
					} else {
						items1.InputSplunkHec.Metadata[metadataCount48].Name = metadata97.Name
						items1.InputSplunkHec.Metadata[metadataCount48].Value = metadata97.Value
					}
				}
				items1.InputSplunkHec.Pipeline = types.StringPointerValue(itemsItem.InputSplunkHec.Pipeline)
				items1.InputSplunkHec.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputSplunkHec.Port)))
				if itemsItem.InputSplunkHec.Pq == nil {
					items1.InputSplunkHec.Pq = nil
				} else {
					items1.InputSplunkHec.Pq = &tfTypes.InputSplunkHecPq{}
					if itemsItem.InputSplunkHec.Pq.CommitFrequency != nil {
						items1.InputSplunkHec.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkHec.Pq.CommitFrequency)))
					} else {
						items1.InputSplunkHec.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputSplunkHec.Pq.Compress != nil {
						items1.InputSplunkHec.Pq.Compress = types.StringValue(string(*itemsItem.InputSplunkHec.Pq.Compress))
					} else {
						items1.InputSplunkHec.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputSplunkHec.Pq.MaxBufferSize != nil {
						items1.InputSplunkHec.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkHec.Pq.MaxBufferSize)))
					} else {
						items1.InputSplunkHec.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputSplunkHec.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputSplunkHec.Pq.MaxFileSize)
					items1.InputSplunkHec.Pq.MaxSize = types.StringPointerValue(itemsItem.InputSplunkHec.Pq.MaxSize)
					if itemsItem.InputSplunkHec.Pq.Mode != nil {
						items1.InputSplunkHec.Pq.Mode = types.StringValue(string(*itemsItem.InputSplunkHec.Pq.Mode))
					} else {
						items1.InputSplunkHec.Pq.Mode = types.StringNull()
					}
					items1.InputSplunkHec.Pq.Path = types.StringPointerValue(itemsItem.InputSplunkHec.Pq.Path)
				}
				items1.InputSplunkHec.PqEnabled = types.BoolPointerValue(itemsItem.InputSplunkHec.PqEnabled)
				if itemsItem.InputSplunkHec.RequestTimeout != nil {
					items1.InputSplunkHec.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkHec.RequestTimeout)))
				} else {
					items1.InputSplunkHec.RequestTimeout = types.NumberNull()
				}
				items1.InputSplunkHec.SendToRoutes = types.BoolPointerValue(itemsItem.InputSplunkHec.SendToRoutes)
				if itemsItem.InputSplunkHec.SocketTimeout != nil {
					items1.InputSplunkHec.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkHec.SocketTimeout)))
				} else {
					items1.InputSplunkHec.SocketTimeout = types.NumberNull()
				}
				items1.InputSplunkHec.SplunkHecAcks = types.BoolPointerValue(itemsItem.InputSplunkHec.SplunkHecAcks)
				items1.InputSplunkHec.SplunkHecAPI = types.StringPointerValue(itemsItem.InputSplunkHec.SplunkHecAPI)
				if itemsItem.InputSplunkHec.StaleChannelFlushMs != nil {
					items1.InputSplunkHec.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkHec.StaleChannelFlushMs)))
				} else {
					items1.InputSplunkHec.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputSplunkHec.Streamtags = make([]types.String, 0, len(itemsItem.InputSplunkHec.Streamtags))
				for _, v := range itemsItem.InputSplunkHec.Streamtags {
					items1.InputSplunkHec.Streamtags = append(items1.InputSplunkHec.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputSplunkHec.TLS == nil {
					items1.InputSplunkHec.TLS = nil
				} else {
					items1.InputSplunkHec.TLS = &tfTypes.InputSplunkHecTLSSettingsServerSide{}
					items1.InputSplunkHec.TLS.CaPath = types.StringPointerValue(itemsItem.InputSplunkHec.TLS.CaPath)
					items1.InputSplunkHec.TLS.CertificateName = types.StringPointerValue(itemsItem.InputSplunkHec.TLS.CertificateName)
					items1.InputSplunkHec.TLS.CertPath = types.StringPointerValue(itemsItem.InputSplunkHec.TLS.CertPath)
					if itemsItem.InputSplunkHec.TLS.CommonNameRegex == nil {
						items1.InputSplunkHec.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult16, _ := json.Marshal(itemsItem.InputSplunkHec.TLS.CommonNameRegex)
						items1.InputSplunkHec.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult16))
					}
					items1.InputSplunkHec.TLS.Disabled = types.BoolPointerValue(itemsItem.InputSplunkHec.TLS.Disabled)
					if itemsItem.InputSplunkHec.TLS.MaxVersion != nil {
						items1.InputSplunkHec.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputSplunkHec.TLS.MaxVersion))
					} else {
						items1.InputSplunkHec.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputSplunkHec.TLS.MinVersion != nil {
						items1.InputSplunkHec.TLS.MinVersion = types.StringValue(string(*itemsItem.InputSplunkHec.TLS.MinVersion))
					} else {
						items1.InputSplunkHec.TLS.MinVersion = types.StringNull()
					}
					items1.InputSplunkHec.TLS.Passphrase = types.StringPointerValue(itemsItem.InputSplunkHec.TLS.Passphrase)
					items1.InputSplunkHec.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputSplunkHec.TLS.PrivKeyPath)
					if itemsItem.InputSplunkHec.TLS.RejectUnauthorized == nil {
						items1.InputSplunkHec.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult16, _ := json.Marshal(itemsItem.InputSplunkHec.TLS.RejectUnauthorized)
						items1.InputSplunkHec.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult16))
					}
					items1.InputSplunkHec.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputSplunkHec.TLS.RequestCert)
				}
				if itemsItem.InputSplunkHec.Type != nil {
					items1.InputSplunkHec.Type = types.StringValue(string(*itemsItem.InputSplunkHec.Type))
				} else {
					items1.InputSplunkHec.Type = types.StringNull()
				}
				items1.InputSplunkHec.UseFwdTimezone = types.BoolPointerValue(itemsItem.InputSplunkHec.UseFwdTimezone)
			}
			if itemsItem.InputSplunkSearch != nil {
				items1.InputSplunkSearch = &tfTypes.InputSplunkSearch{}
				items1.InputSplunkSearch.AuthHeaderExpr = types.StringPointerValue(itemsItem.InputSplunkSearch.AuthHeaderExpr)
				if itemsItem.InputSplunkSearch.AuthType != nil {
					items1.InputSplunkSearch.AuthType = types.StringValue(string(*itemsItem.InputSplunkSearch.AuthType))
				} else {
					items1.InputSplunkSearch.AuthType = types.StringNull()
				}
				items1.InputSplunkSearch.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputSplunkSearch.BreakerRulesets))
				for _, v := range itemsItem.InputSplunkSearch.BreakerRulesets {
					items1.InputSplunkSearch.BreakerRulesets = append(items1.InputSplunkSearch.BreakerRulesets, types.StringValue(v))
				}
				items1.InputSplunkSearch.Connections = []tfTypes.InputSplunkSearchConnections{}
				for connectionsCount46, connectionsItem46 := range itemsItem.InputSplunkSearch.Connections {
					var connections93 tfTypes.InputSplunkSearchConnections
					connections93.Output = types.StringValue(connectionsItem46.Output)
					connections93.Pipeline = types.StringPointerValue(connectionsItem46.Pipeline)
					if connectionsCount46+1 > len(items1.InputSplunkSearch.Connections) {
						items1.InputSplunkSearch.Connections = append(items1.InputSplunkSearch.Connections, connections93)
					} else {
						items1.InputSplunkSearch.Connections[connectionsCount46].Output = connections93.Output
						items1.InputSplunkSearch.Connections[connectionsCount46].Pipeline = connections93.Pipeline
					}
				}
				items1.InputSplunkSearch.CredentialsSecret = types.StringPointerValue(itemsItem.InputSplunkSearch.CredentialsSecret)
				items1.InputSplunkSearch.CronSchedule = types.StringPointerValue(itemsItem.InputSplunkSearch.CronSchedule)
				items1.InputSplunkSearch.Description = types.StringPointerValue(itemsItem.InputSplunkSearch.Description)
				items1.InputSplunkSearch.Disabled = types.BoolPointerValue(itemsItem.InputSplunkSearch.Disabled)
				items1.InputSplunkSearch.Earliest = types.StringPointerValue(itemsItem.InputSplunkSearch.Earliest)
				items1.InputSplunkSearch.Encoding = types.StringPointerValue(itemsItem.InputSplunkSearch.Encoding)
				items1.InputSplunkSearch.Endpoint = types.StringPointerValue(itemsItem.InputSplunkSearch.Endpoint)
				items1.InputSplunkSearch.EndpointHeaders = []tfTypes.EndpointHeaders{}
				for endpointHeadersCount, endpointHeadersItem := range itemsItem.InputSplunkSearch.EndpointHeaders {
					var endpointHeaders1 tfTypes.EndpointHeaders
					endpointHeaders1.Name = types.StringValue(endpointHeadersItem.Name)
					endpointHeaders1.Value = types.StringValue(endpointHeadersItem.Value)
					if endpointHeadersCount+1 > len(items1.InputSplunkSearch.EndpointHeaders) {
						items1.InputSplunkSearch.EndpointHeaders = append(items1.InputSplunkSearch.EndpointHeaders, endpointHeaders1)
					} else {
						items1.InputSplunkSearch.EndpointHeaders[endpointHeadersCount].Name = endpointHeaders1.Name
						items1.InputSplunkSearch.EndpointHeaders[endpointHeadersCount].Value = endpointHeaders1.Value
					}
				}
				items1.InputSplunkSearch.EndpointParams = []tfTypes.EndpointParams{}
				for endpointParamsCount, endpointParamsItem := range itemsItem.InputSplunkSearch.EndpointParams {
					var endpointParams1 tfTypes.EndpointParams
					endpointParams1.Name = types.StringValue(endpointParamsItem.Name)
					endpointParams1.Value = types.StringValue(endpointParamsItem.Value)
					if endpointParamsCount+1 > len(items1.InputSplunkSearch.EndpointParams) {
						items1.InputSplunkSearch.EndpointParams = append(items1.InputSplunkSearch.EndpointParams, endpointParams1)
					} else {
						items1.InputSplunkSearch.EndpointParams[endpointParamsCount].Name = endpointParams1.Name
						items1.InputSplunkSearch.EndpointParams[endpointParamsCount].Value = endpointParams1.Value
					}
				}
				items1.InputSplunkSearch.Environment = types.StringPointerValue(itemsItem.InputSplunkSearch.Environment)
				items1.InputSplunkSearch.ID = types.StringPointerValue(itemsItem.InputSplunkSearch.ID)
				items1.InputSplunkSearch.JobTimeout = types.StringPointerValue(itemsItem.InputSplunkSearch.JobTimeout)
				if itemsItem.InputSplunkSearch.KeepAliveTime != nil {
					items1.InputSplunkSearch.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkSearch.KeepAliveTime)))
				} else {
					items1.InputSplunkSearch.KeepAliveTime = types.NumberNull()
				}
				items1.InputSplunkSearch.Latest = types.StringPointerValue(itemsItem.InputSplunkSearch.Latest)
				items1.InputSplunkSearch.LoginURL = types.StringPointerValue(itemsItem.InputSplunkSearch.LoginURL)
				if itemsItem.InputSplunkSearch.LogLevel != nil {
					items1.InputSplunkSearch.LogLevel = types.StringValue(string(*itemsItem.InputSplunkSearch.LogLevel))
				} else {
					items1.InputSplunkSearch.LogLevel = types.StringNull()
				}
				if itemsItem.InputSplunkSearch.MaxMissedKeepAlives != nil {
					items1.InputSplunkSearch.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkSearch.MaxMissedKeepAlives)))
				} else {
					items1.InputSplunkSearch.MaxMissedKeepAlives = types.NumberNull()
				}
				items1.InputSplunkSearch.Metadata = []tfTypes.InputSplunkSearchMetadata{}
				for metadataCount49, metadataItem49 := range itemsItem.InputSplunkSearch.Metadata {
					var metadata99 tfTypes.InputSplunkSearchMetadata
					metadata99.Name = types.StringValue(metadataItem49.Name)
					metadata99.Value = types.StringValue(metadataItem49.Value)
					if metadataCount49+1 > len(items1.InputSplunkSearch.Metadata) {
						items1.InputSplunkSearch.Metadata = append(items1.InputSplunkSearch.Metadata, metadata99)
					} else {
						items1.InputSplunkSearch.Metadata[metadataCount49].Name = metadata99.Name
						items1.InputSplunkSearch.Metadata[metadataCount49].Value = metadata99.Value
					}
				}
				items1.InputSplunkSearch.OauthHeaders = []tfTypes.OauthHeaders{}
				for oauthHeadersCount7, oauthHeadersItem7 := range itemsItem.InputSplunkSearch.OauthHeaders {
					var oauthHeaders15 tfTypes.OauthHeaders
					oauthHeaders15.Name = types.StringValue(oauthHeadersItem7.Name)
					oauthHeaders15.Value = types.StringValue(oauthHeadersItem7.Value)
					if oauthHeadersCount7+1 > len(items1.InputSplunkSearch.OauthHeaders) {
						items1.InputSplunkSearch.OauthHeaders = append(items1.InputSplunkSearch.OauthHeaders, oauthHeaders15)
					} else {
						items1.InputSplunkSearch.OauthHeaders[oauthHeadersCount7].Name = oauthHeaders15.Name
						items1.InputSplunkSearch.OauthHeaders[oauthHeadersCount7].Value = oauthHeaders15.Value
					}
				}
				items1.InputSplunkSearch.OauthParams = []tfTypes.OauthParams{}
				for oauthParamsCount7, oauthParamsItem7 := range itemsItem.InputSplunkSearch.OauthParams {
					var oauthParams15 tfTypes.OauthParams
					oauthParams15.Name = types.StringValue(oauthParamsItem7.Name)
					oauthParams15.Value = types.StringValue(oauthParamsItem7.Value)
					if oauthParamsCount7+1 > len(items1.InputSplunkSearch.OauthParams) {
						items1.InputSplunkSearch.OauthParams = append(items1.InputSplunkSearch.OauthParams, oauthParams15)
					} else {
						items1.InputSplunkSearch.OauthParams[oauthParamsCount7].Name = oauthParams15.Name
						items1.InputSplunkSearch.OauthParams[oauthParamsCount7].Value = oauthParams15.Value
					}
				}
				if itemsItem.InputSplunkSearch.OutputMode != nil {
					items1.InputSplunkSearch.OutputMode = types.StringValue(string(*itemsItem.InputSplunkSearch.OutputMode))
				} else {
					items1.InputSplunkSearch.OutputMode = types.StringNull()
				}
				items1.InputSplunkSearch.Password = types.StringPointerValue(itemsItem.InputSplunkSearch.Password)
				items1.InputSplunkSearch.Pipeline = types.StringPointerValue(itemsItem.InputSplunkSearch.Pipeline)
				if itemsItem.InputSplunkSearch.Pq == nil {
					items1.InputSplunkSearch.Pq = nil
				} else {
					items1.InputSplunkSearch.Pq = &tfTypes.InputSplunkSearchPq{}
					if itemsItem.InputSplunkSearch.Pq.CommitFrequency != nil {
						items1.InputSplunkSearch.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkSearch.Pq.CommitFrequency)))
					} else {
						items1.InputSplunkSearch.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputSplunkSearch.Pq.Compress != nil {
						items1.InputSplunkSearch.Pq.Compress = types.StringValue(string(*itemsItem.InputSplunkSearch.Pq.Compress))
					} else {
						items1.InputSplunkSearch.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputSplunkSearch.Pq.MaxBufferSize != nil {
						items1.InputSplunkSearch.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkSearch.Pq.MaxBufferSize)))
					} else {
						items1.InputSplunkSearch.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputSplunkSearch.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputSplunkSearch.Pq.MaxFileSize)
					items1.InputSplunkSearch.Pq.MaxSize = types.StringPointerValue(itemsItem.InputSplunkSearch.Pq.MaxSize)
					if itemsItem.InputSplunkSearch.Pq.Mode != nil {
						items1.InputSplunkSearch.Pq.Mode = types.StringValue(string(*itemsItem.InputSplunkSearch.Pq.Mode))
					} else {
						items1.InputSplunkSearch.Pq.Mode = types.StringNull()
					}
					items1.InputSplunkSearch.Pq.Path = types.StringPointerValue(itemsItem.InputSplunkSearch.Pq.Path)
				}
				items1.InputSplunkSearch.PqEnabled = types.BoolPointerValue(itemsItem.InputSplunkSearch.PqEnabled)
				items1.InputSplunkSearch.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputSplunkSearch.RejectUnauthorized)
				if itemsItem.InputSplunkSearch.RequestTimeout != nil {
					items1.InputSplunkSearch.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkSearch.RequestTimeout)))
				} else {
					items1.InputSplunkSearch.RequestTimeout = types.NumberNull()
				}
				if itemsItem.InputSplunkSearch.RetryRules == nil {
					items1.InputSplunkSearch.RetryRules = nil
				} else {
					items1.InputSplunkSearch.RetryRules = &tfTypes.RetryRules{}
					items1.InputSplunkSearch.RetryRules.Codes = make([]types.Number, 0, len(itemsItem.InputSplunkSearch.RetryRules.Codes))
					for _, v := range itemsItem.InputSplunkSearch.RetryRules.Codes {
						items1.InputSplunkSearch.RetryRules.Codes = append(items1.InputSplunkSearch.RetryRules.Codes, types.NumberValue(big.NewFloat(float64(v))))
					}
					items1.InputSplunkSearch.RetryRules.EnableHeader = types.BoolPointerValue(itemsItem.InputSplunkSearch.RetryRules.EnableHeader)
					if itemsItem.InputSplunkSearch.RetryRules.Interval != nil {
						items1.InputSplunkSearch.RetryRules.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkSearch.RetryRules.Interval)))
					} else {
						items1.InputSplunkSearch.RetryRules.Interval = types.NumberNull()
					}
					if itemsItem.InputSplunkSearch.RetryRules.Limit != nil {
						items1.InputSplunkSearch.RetryRules.Limit = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkSearch.RetryRules.Limit)))
					} else {
						items1.InputSplunkSearch.RetryRules.Limit = types.NumberNull()
					}
					if itemsItem.InputSplunkSearch.RetryRules.Multiplier != nil {
						items1.InputSplunkSearch.RetryRules.Multiplier = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkSearch.RetryRules.Multiplier)))
					} else {
						items1.InputSplunkSearch.RetryRules.Multiplier = types.NumberNull()
					}
					items1.InputSplunkSearch.RetryRules.RetryConnectReset = types.BoolPointerValue(itemsItem.InputSplunkSearch.RetryRules.RetryConnectReset)
					items1.InputSplunkSearch.RetryRules.RetryConnectTimeout = types.BoolPointerValue(itemsItem.InputSplunkSearch.RetryRules.RetryConnectTimeout)
					if itemsItem.InputSplunkSearch.RetryRules.Type != nil {
						items1.InputSplunkSearch.RetryRules.Type = types.StringValue(string(*itemsItem.InputSplunkSearch.RetryRules.Type))
					} else {
						items1.InputSplunkSearch.RetryRules.Type = types.StringNull()
					}
				}
				items1.InputSplunkSearch.Search = types.StringValue(itemsItem.InputSplunkSearch.Search)
				items1.InputSplunkSearch.SearchHead = types.StringPointerValue(itemsItem.InputSplunkSearch.SearchHead)
				items1.InputSplunkSearch.Secret = types.StringPointerValue(itemsItem.InputSplunkSearch.Secret)
				items1.InputSplunkSearch.SecretParamName = types.StringPointerValue(itemsItem.InputSplunkSearch.SecretParamName)
				items1.InputSplunkSearch.SendToRoutes = types.BoolPointerValue(itemsItem.InputSplunkSearch.SendToRoutes)
				if itemsItem.InputSplunkSearch.StaleChannelFlushMs != nil {
					items1.InputSplunkSearch.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkSearch.StaleChannelFlushMs)))
				} else {
					items1.InputSplunkSearch.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputSplunkSearch.Streamtags = make([]types.String, 0, len(itemsItem.InputSplunkSearch.Streamtags))
				for _, v := range itemsItem.InputSplunkSearch.Streamtags {
					items1.InputSplunkSearch.Streamtags = append(items1.InputSplunkSearch.Streamtags, types.StringValue(v))
				}
				items1.InputSplunkSearch.TextSecret = types.StringPointerValue(itemsItem.InputSplunkSearch.TextSecret)
				items1.InputSplunkSearch.Token = types.StringPointerValue(itemsItem.InputSplunkSearch.Token)
				items1.InputSplunkSearch.TokenAttributeName = types.StringPointerValue(itemsItem.InputSplunkSearch.TokenAttributeName)
				if itemsItem.InputSplunkSearch.TokenTimeoutSecs != nil {
					items1.InputSplunkSearch.TokenTimeoutSecs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSplunkSearch.TokenTimeoutSecs)))
				} else {
					items1.InputSplunkSearch.TokenTimeoutSecs = types.NumberNull()
				}
				items1.InputSplunkSearch.TTL = types.StringPointerValue(itemsItem.InputSplunkSearch.TTL)
				if itemsItem.InputSplunkSearch.Type != nil {
					items1.InputSplunkSearch.Type = types.StringValue(string(*itemsItem.InputSplunkSearch.Type))
				} else {
					items1.InputSplunkSearch.Type = types.StringNull()
				}
				items1.InputSplunkSearch.Username = types.StringPointerValue(itemsItem.InputSplunkSearch.Username)
				items1.InputSplunkSearch.UseRoundRobinDNS = types.BoolPointerValue(itemsItem.InputSplunkSearch.UseRoundRobinDNS)
			}
			if itemsItem.InputSqs != nil {
				items1.InputSqs = &tfTypes.InputSqs{}
				items1.InputSqs.AssumeRoleArn = types.StringPointerValue(itemsItem.InputSqs.AssumeRoleArn)
				items1.InputSqs.AssumeRoleExternalID = types.StringPointerValue(itemsItem.InputSqs.AssumeRoleExternalID)
				items1.InputSqs.AwsAccountID = types.StringPointerValue(itemsItem.InputSqs.AwsAccountID)
				items1.InputSqs.AwsAPIKey = types.StringPointerValue(itemsItem.InputSqs.AwsAPIKey)
				if itemsItem.InputSqs.AwsAuthenticationMethod != nil {
					items1.InputSqs.AwsAuthenticationMethod = types.StringValue(string(*itemsItem.InputSqs.AwsAuthenticationMethod))
				} else {
					items1.InputSqs.AwsAuthenticationMethod = types.StringNull()
				}
				items1.InputSqs.AwsSecret = types.StringPointerValue(itemsItem.InputSqs.AwsSecret)
				items1.InputSqs.AwsSecretKey = types.StringPointerValue(itemsItem.InputSqs.AwsSecretKey)
				items1.InputSqs.Connections = []tfTypes.InputSqsConnections{}
				for connectionsCount47, connectionsItem47 := range itemsItem.InputSqs.Connections {
					var connections95 tfTypes.InputSqsConnections
					connections95.Output = types.StringValue(connectionsItem47.Output)
					connections95.Pipeline = types.StringPointerValue(connectionsItem47.Pipeline)
					if connectionsCount47+1 > len(items1.InputSqs.Connections) {
						items1.InputSqs.Connections = append(items1.InputSqs.Connections, connections95)
					} else {
						items1.InputSqs.Connections[connectionsCount47].Output = connections95.Output
						items1.InputSqs.Connections[connectionsCount47].Pipeline = connections95.Pipeline
					}
				}
				items1.InputSqs.CreateQueue = types.BoolPointerValue(itemsItem.InputSqs.CreateQueue)
				items1.InputSqs.Description = types.StringPointerValue(itemsItem.InputSqs.Description)
				items1.InputSqs.Disabled = types.BoolPointerValue(itemsItem.InputSqs.Disabled)
				if itemsItem.InputSqs.DurationSeconds != nil {
					items1.InputSqs.DurationSeconds = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSqs.DurationSeconds)))
				} else {
					items1.InputSqs.DurationSeconds = types.NumberNull()
				}
				items1.InputSqs.EnableAssumeRole = types.BoolPointerValue(itemsItem.InputSqs.EnableAssumeRole)
				items1.InputSqs.Endpoint = types.StringPointerValue(itemsItem.InputSqs.Endpoint)
				items1.InputSqs.Environment = types.StringPointerValue(itemsItem.InputSqs.Environment)
				items1.InputSqs.ID = types.StringPointerValue(itemsItem.InputSqs.ID)
				if itemsItem.InputSqs.MaxMessages != nil {
					items1.InputSqs.MaxMessages = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSqs.MaxMessages)))
				} else {
					items1.InputSqs.MaxMessages = types.NumberNull()
				}
				items1.InputSqs.Metadata = []tfTypes.InputSqsMetadata{}
				for metadataCount50, metadataItem50 := range itemsItem.InputSqs.Metadata {
					var metadata101 tfTypes.InputSqsMetadata
					metadata101.Name = types.StringValue(metadataItem50.Name)
					metadata101.Value = types.StringValue(metadataItem50.Value)
					if metadataCount50+1 > len(items1.InputSqs.Metadata) {
						items1.InputSqs.Metadata = append(items1.InputSqs.Metadata, metadata101)
					} else {
						items1.InputSqs.Metadata[metadataCount50].Name = metadata101.Name
						items1.InputSqs.Metadata[metadataCount50].Value = metadata101.Value
					}
				}
				if itemsItem.InputSqs.NumReceivers != nil {
					items1.InputSqs.NumReceivers = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSqs.NumReceivers)))
				} else {
					items1.InputSqs.NumReceivers = types.NumberNull()
				}
				items1.InputSqs.Pipeline = types.StringPointerValue(itemsItem.InputSqs.Pipeline)
				if itemsItem.InputSqs.PollTimeout != nil {
					items1.InputSqs.PollTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSqs.PollTimeout)))
				} else {
					items1.InputSqs.PollTimeout = types.NumberNull()
				}
				if itemsItem.InputSqs.Pq == nil {
					items1.InputSqs.Pq = nil
				} else {
					items1.InputSqs.Pq = &tfTypes.InputSqsPq{}
					if itemsItem.InputSqs.Pq.CommitFrequency != nil {
						items1.InputSqs.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSqs.Pq.CommitFrequency)))
					} else {
						items1.InputSqs.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputSqs.Pq.Compress != nil {
						items1.InputSqs.Pq.Compress = types.StringValue(string(*itemsItem.InputSqs.Pq.Compress))
					} else {
						items1.InputSqs.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputSqs.Pq.MaxBufferSize != nil {
						items1.InputSqs.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSqs.Pq.MaxBufferSize)))
					} else {
						items1.InputSqs.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputSqs.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputSqs.Pq.MaxFileSize)
					items1.InputSqs.Pq.MaxSize = types.StringPointerValue(itemsItem.InputSqs.Pq.MaxSize)
					if itemsItem.InputSqs.Pq.Mode != nil {
						items1.InputSqs.Pq.Mode = types.StringValue(string(*itemsItem.InputSqs.Pq.Mode))
					} else {
						items1.InputSqs.Pq.Mode = types.StringNull()
					}
					items1.InputSqs.Pq.Path = types.StringPointerValue(itemsItem.InputSqs.Pq.Path)
				}
				items1.InputSqs.PqEnabled = types.BoolPointerValue(itemsItem.InputSqs.PqEnabled)
				items1.InputSqs.QueueName = types.StringValue(itemsItem.InputSqs.QueueName)
				if itemsItem.InputSqs.QueueType != nil {
					items1.InputSqs.QueueType = types.StringValue(string(*itemsItem.InputSqs.QueueType))
				} else {
					items1.InputSqs.QueueType = types.StringNull()
				}
				items1.InputSqs.Region = types.StringPointerValue(itemsItem.InputSqs.Region)
				items1.InputSqs.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputSqs.RejectUnauthorized)
				items1.InputSqs.ReuseConnections = types.BoolPointerValue(itemsItem.InputSqs.ReuseConnections)
				items1.InputSqs.SendToRoutes = types.BoolPointerValue(itemsItem.InputSqs.SendToRoutes)
				if itemsItem.InputSqs.SignatureVersion != nil {
					items1.InputSqs.SignatureVersion = types.StringValue(string(*itemsItem.InputSqs.SignatureVersion))
				} else {
					items1.InputSqs.SignatureVersion = types.StringNull()
				}
				items1.InputSqs.Streamtags = make([]types.String, 0, len(itemsItem.InputSqs.Streamtags))
				for _, v := range itemsItem.InputSqs.Streamtags {
					items1.InputSqs.Streamtags = append(items1.InputSqs.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputSqs.Type != nil {
					items1.InputSqs.Type = types.StringValue(string(*itemsItem.InputSqs.Type))
				} else {
					items1.InputSqs.Type = types.StringNull()
				}
				if itemsItem.InputSqs.VisibilityTimeout != nil {
					items1.InputSqs.VisibilityTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSqs.VisibilityTimeout)))
				} else {
					items1.InputSqs.VisibilityTimeout = types.NumberNull()
				}
			}
			if itemsItem.InputSyslog != nil {
				items1.InputSyslog = &tfTypes.InputSyslog{}
				if itemsItem.InputSyslog.InputSyslog1 != nil {
					items1.InputSyslog.One = &tfTypes.InputSyslog1{}
					items1.InputSyslog.One.AllowNonStandardAppName = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.AllowNonStandardAppName)
					items1.InputSyslog.One.Connections = []tfTypes.InputSyslogConnections{}
					for connectionsCount48, connectionsItem48 := range itemsItem.InputSyslog.InputSyslog1.Connections {
						var connections97 tfTypes.InputSyslogConnections
						connections97.Output = types.StringValue(connectionsItem48.Output)
						connections97.Pipeline = types.StringPointerValue(connectionsItem48.Pipeline)
						if connectionsCount48+1 > len(items1.InputSyslog.One.Connections) {
							items1.InputSyslog.One.Connections = append(items1.InputSyslog.One.Connections, connections97)
						} else {
							items1.InputSyslog.One.Connections[connectionsCount48].Output = connections97.Output
							items1.InputSyslog.One.Connections[connectionsCount48].Pipeline = connections97.Pipeline
						}
					}
					items1.InputSyslog.One.Description = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.Description)
					items1.InputSyslog.One.Disabled = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.Disabled)
					items1.InputSyslog.One.EnableLoadBalancing = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.EnableLoadBalancing)
					items1.InputSyslog.One.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.EnableProxyHeader)
					items1.InputSyslog.One.Environment = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.Environment)
					items1.InputSyslog.One.Host = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.Host)
					items1.InputSyslog.One.ID = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.ID)
					items1.InputSyslog.One.InferFraming = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.InferFraming)
					items1.InputSyslog.One.IPWhitelistRegex = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.IPWhitelistRegex)
					items1.InputSyslog.One.KeepFieldsList = make([]types.String, 0, len(itemsItem.InputSyslog.InputSyslog1.KeepFieldsList))
					for _, v := range itemsItem.InputSyslog.InputSyslog1.KeepFieldsList {
						items1.InputSyslog.One.KeepFieldsList = append(items1.InputSyslog.One.KeepFieldsList, types.StringValue(v))
					}
					if itemsItem.InputSyslog.InputSyslog1.MaxActiveCxn != nil {
						items1.InputSyslog.One.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog1.MaxActiveCxn)))
					} else {
						items1.InputSyslog.One.MaxActiveCxn = types.NumberNull()
					}
					if itemsItem.InputSyslog.InputSyslog1.MaxBufferSize != nil {
						items1.InputSyslog.One.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog1.MaxBufferSize)))
					} else {
						items1.InputSyslog.One.MaxBufferSize = types.NumberNull()
					}
					items1.InputSyslog.One.Metadata = []tfTypes.InputSyslogMetadata{}
					for metadataCount51, metadataItem51 := range itemsItem.InputSyslog.InputSyslog1.Metadata {
						var metadata103 tfTypes.InputSyslogMetadata
						metadata103.Name = types.StringValue(metadataItem51.Name)
						metadata103.Value = types.StringValue(metadataItem51.Value)
						if metadataCount51+1 > len(items1.InputSyslog.One.Metadata) {
							items1.InputSyslog.One.Metadata = append(items1.InputSyslog.One.Metadata, metadata103)
						} else {
							items1.InputSyslog.One.Metadata[metadataCount51].Name = metadata103.Name
							items1.InputSyslog.One.Metadata[metadataCount51].Value = metadata103.Value
						}
					}
					items1.InputSyslog.One.OctetCounting = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.OctetCounting)
					items1.InputSyslog.One.Pipeline = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.Pipeline)
					if itemsItem.InputSyslog.InputSyslog1.Pq == nil {
						items1.InputSyslog.One.Pq = nil
					} else {
						items1.InputSyslog.One.Pq = &tfTypes.InputSyslogPq{}
						if itemsItem.InputSyslog.InputSyslog1.Pq.CommitFrequency != nil {
							items1.InputSyslog.One.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog1.Pq.CommitFrequency)))
						} else {
							items1.InputSyslog.One.Pq.CommitFrequency = types.NumberNull()
						}
						if itemsItem.InputSyslog.InputSyslog1.Pq.Compress != nil {
							items1.InputSyslog.One.Pq.Compress = types.StringValue(string(*itemsItem.InputSyslog.InputSyslog1.Pq.Compress))
						} else {
							items1.InputSyslog.One.Pq.Compress = types.StringNull()
						}
						if itemsItem.InputSyslog.InputSyslog1.Pq.MaxBufferSize != nil {
							items1.InputSyslog.One.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog1.Pq.MaxBufferSize)))
						} else {
							items1.InputSyslog.One.Pq.MaxBufferSize = types.NumberNull()
						}
						items1.InputSyslog.One.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.Pq.MaxFileSize)
						items1.InputSyslog.One.Pq.MaxSize = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.Pq.MaxSize)
						if itemsItem.InputSyslog.InputSyslog1.Pq.Mode != nil {
							items1.InputSyslog.One.Pq.Mode = types.StringValue(string(*itemsItem.InputSyslog.InputSyslog1.Pq.Mode))
						} else {
							items1.InputSyslog.One.Pq.Mode = types.StringNull()
						}
						items1.InputSyslog.One.Pq.Path = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.Pq.Path)
					}
					items1.InputSyslog.One.PqEnabled = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.PqEnabled)
					items1.InputSyslog.One.SendToRoutes = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.SendToRoutes)
					items1.InputSyslog.One.SingleMsgUDPPackets = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.SingleMsgUDPPackets)
					if itemsItem.InputSyslog.InputSyslog1.SocketEndingMaxWait != nil {
						items1.InputSyslog.One.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog1.SocketEndingMaxWait)))
					} else {
						items1.InputSyslog.One.SocketEndingMaxWait = types.NumberNull()
					}
					if itemsItem.InputSyslog.InputSyslog1.SocketIdleTimeout != nil {
						items1.InputSyslog.One.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog1.SocketIdleTimeout)))
					} else {
						items1.InputSyslog.One.SocketIdleTimeout = types.NumberNull()
					}
					if itemsItem.InputSyslog.InputSyslog1.SocketMaxLifespan != nil {
						items1.InputSyslog.One.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog1.SocketMaxLifespan)))
					} else {
						items1.InputSyslog.One.SocketMaxLifespan = types.NumberNull()
					}
					items1.InputSyslog.One.Streamtags = make([]types.String, 0, len(itemsItem.InputSyslog.InputSyslog1.Streamtags))
					for _, v := range itemsItem.InputSyslog.InputSyslog1.Streamtags {
						items1.InputSyslog.One.Streamtags = append(items1.InputSyslog.One.Streamtags, types.StringValue(v))
					}
					items1.InputSyslog.One.StrictlyInferOctetCounting = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.StrictlyInferOctetCounting)
					if itemsItem.InputSyslog.InputSyslog1.TCPPort != nil {
						items1.InputSyslog.One.TCPPort = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog1.TCPPort)))
					} else {
						items1.InputSyslog.One.TCPPort = types.NumberNull()
					}
					items1.InputSyslog.One.TimestampTimezone = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.TimestampTimezone)
					if itemsItem.InputSyslog.InputSyslog1.TLS == nil {
						items1.InputSyslog.One.TLS = nil
					} else {
						items1.InputSyslog.One.TLS = &tfTypes.InputSyslogTLSSettingsServerSide{}
						items1.InputSyslog.One.TLS.CaPath = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.TLS.CaPath)
						items1.InputSyslog.One.TLS.CertificateName = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.TLS.CertificateName)
						items1.InputSyslog.One.TLS.CertPath = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.TLS.CertPath)
						if itemsItem.InputSyslog.InputSyslog1.TLS.CommonNameRegex == nil {
							items1.InputSyslog.One.TLS.CommonNameRegex = types.StringNull()
						} else {
							commonNameRegexResult17, _ := json.Marshal(itemsItem.InputSyslog.InputSyslog1.TLS.CommonNameRegex)
							items1.InputSyslog.One.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult17))
						}
						items1.InputSyslog.One.TLS.Disabled = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.TLS.Disabled)
						if itemsItem.InputSyslog.InputSyslog1.TLS.MaxVersion != nil {
							items1.InputSyslog.One.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputSyslog.InputSyslog1.TLS.MaxVersion))
						} else {
							items1.InputSyslog.One.TLS.MaxVersion = types.StringNull()
						}
						if itemsItem.InputSyslog.InputSyslog1.TLS.MinVersion != nil {
							items1.InputSyslog.One.TLS.MinVersion = types.StringValue(string(*itemsItem.InputSyslog.InputSyslog1.TLS.MinVersion))
						} else {
							items1.InputSyslog.One.TLS.MinVersion = types.StringNull()
						}
						items1.InputSyslog.One.TLS.Passphrase = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.TLS.Passphrase)
						items1.InputSyslog.One.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog1.TLS.PrivKeyPath)
						if itemsItem.InputSyslog.InputSyslog1.TLS.RejectUnauthorized == nil {
							items1.InputSyslog.One.TLS.RejectUnauthorized = types.StringNull()
						} else {
							rejectUnauthorizedResult17, _ := json.Marshal(itemsItem.InputSyslog.InputSyslog1.TLS.RejectUnauthorized)
							items1.InputSyslog.One.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult17))
						}
						items1.InputSyslog.One.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog1.TLS.RequestCert)
					}
					items1.InputSyslog.One.Type = types.StringValue(string(itemsItem.InputSyslog.InputSyslog1.Type))
					items1.InputSyslog.One.UDPPort = types.NumberValue(big.NewFloat(float64(itemsItem.InputSyslog.InputSyslog1.UDPPort)))
					if itemsItem.InputSyslog.InputSyslog1.UDPSocketRxBufSize != nil {
						items1.InputSyslog.One.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog1.UDPSocketRxBufSize)))
					} else {
						items1.InputSyslog.One.UDPSocketRxBufSize = types.NumberNull()
					}
				}
				if itemsItem.InputSyslog.InputSyslog2 != nil {
					items1.InputSyslog.Two = &tfTypes.InputSyslog2{}
					items1.InputSyslog.Two.AllowNonStandardAppName = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.AllowNonStandardAppName)
					items1.InputSyslog.Two.Connections = []tfTypes.InputSyslog2Connections{}
					for connectionsCount49, connectionsItem49 := range itemsItem.InputSyslog.InputSyslog2.Connections {
						var connections99 tfTypes.InputSyslog2Connections
						connections99.Output = types.StringValue(connectionsItem49.Output)
						connections99.Pipeline = types.StringPointerValue(connectionsItem49.Pipeline)
						if connectionsCount49+1 > len(items1.InputSyslog.Two.Connections) {
							items1.InputSyslog.Two.Connections = append(items1.InputSyslog.Two.Connections, connections99)
						} else {
							items1.InputSyslog.Two.Connections[connectionsCount49].Output = connections99.Output
							items1.InputSyslog.Two.Connections[connectionsCount49].Pipeline = connections99.Pipeline
						}
					}
					items1.InputSyslog.Two.Description = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.Description)
					items1.InputSyslog.Two.Disabled = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.Disabled)
					items1.InputSyslog.Two.EnableLoadBalancing = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.EnableLoadBalancing)
					items1.InputSyslog.Two.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.EnableProxyHeader)
					items1.InputSyslog.Two.Environment = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.Environment)
					items1.InputSyslog.Two.Host = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.Host)
					items1.InputSyslog.Two.ID = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.ID)
					items1.InputSyslog.Two.InferFraming = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.InferFraming)
					items1.InputSyslog.Two.IPWhitelistRegex = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.IPWhitelistRegex)
					items1.InputSyslog.Two.KeepFieldsList = make([]types.String, 0, len(itemsItem.InputSyslog.InputSyslog2.KeepFieldsList))
					for _, v := range itemsItem.InputSyslog.InputSyslog2.KeepFieldsList {
						items1.InputSyslog.Two.KeepFieldsList = append(items1.InputSyslog.Two.KeepFieldsList, types.StringValue(v))
					}
					if itemsItem.InputSyslog.InputSyslog2.MaxActiveCxn != nil {
						items1.InputSyslog.Two.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog2.MaxActiveCxn)))
					} else {
						items1.InputSyslog.Two.MaxActiveCxn = types.NumberNull()
					}
					if itemsItem.InputSyslog.InputSyslog2.MaxBufferSize != nil {
						items1.InputSyslog.Two.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog2.MaxBufferSize)))
					} else {
						items1.InputSyslog.Two.MaxBufferSize = types.NumberNull()
					}
					items1.InputSyslog.Two.Metadata = []tfTypes.InputSyslog2Metadata{}
					for metadataCount52, metadataItem52 := range itemsItem.InputSyslog.InputSyslog2.Metadata {
						var metadata105 tfTypes.InputSyslog2Metadata
						metadata105.Name = types.StringValue(metadataItem52.Name)
						metadata105.Value = types.StringValue(metadataItem52.Value)
						if metadataCount52+1 > len(items1.InputSyslog.Two.Metadata) {
							items1.InputSyslog.Two.Metadata = append(items1.InputSyslog.Two.Metadata, metadata105)
						} else {
							items1.InputSyslog.Two.Metadata[metadataCount52].Name = metadata105.Name
							items1.InputSyslog.Two.Metadata[metadataCount52].Value = metadata105.Value
						}
					}
					items1.InputSyslog.Two.OctetCounting = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.OctetCounting)
					items1.InputSyslog.Two.Pipeline = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.Pipeline)
					if itemsItem.InputSyslog.InputSyslog2.Pq == nil {
						items1.InputSyslog.Two.Pq = nil
					} else {
						items1.InputSyslog.Two.Pq = &tfTypes.InputSyslog2Pq{}
						if itemsItem.InputSyslog.InputSyslog2.Pq.CommitFrequency != nil {
							items1.InputSyslog.Two.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog2.Pq.CommitFrequency)))
						} else {
							items1.InputSyslog.Two.Pq.CommitFrequency = types.NumberNull()
						}
						if itemsItem.InputSyslog.InputSyslog2.Pq.Compress != nil {
							items1.InputSyslog.Two.Pq.Compress = types.StringValue(string(*itemsItem.InputSyslog.InputSyslog2.Pq.Compress))
						} else {
							items1.InputSyslog.Two.Pq.Compress = types.StringNull()
						}
						if itemsItem.InputSyslog.InputSyslog2.Pq.MaxBufferSize != nil {
							items1.InputSyslog.Two.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog2.Pq.MaxBufferSize)))
						} else {
							items1.InputSyslog.Two.Pq.MaxBufferSize = types.NumberNull()
						}
						items1.InputSyslog.Two.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.Pq.MaxFileSize)
						items1.InputSyslog.Two.Pq.MaxSize = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.Pq.MaxSize)
						if itemsItem.InputSyslog.InputSyslog2.Pq.Mode != nil {
							items1.InputSyslog.Two.Pq.Mode = types.StringValue(string(*itemsItem.InputSyslog.InputSyslog2.Pq.Mode))
						} else {
							items1.InputSyslog.Two.Pq.Mode = types.StringNull()
						}
						items1.InputSyslog.Two.Pq.Path = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.Pq.Path)
					}
					items1.InputSyslog.Two.PqEnabled = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.PqEnabled)
					items1.InputSyslog.Two.SendToRoutes = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.SendToRoutes)
					items1.InputSyslog.Two.SingleMsgUDPPackets = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.SingleMsgUDPPackets)
					if itemsItem.InputSyslog.InputSyslog2.SocketEndingMaxWait != nil {
						items1.InputSyslog.Two.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog2.SocketEndingMaxWait)))
					} else {
						items1.InputSyslog.Two.SocketEndingMaxWait = types.NumberNull()
					}
					if itemsItem.InputSyslog.InputSyslog2.SocketIdleTimeout != nil {
						items1.InputSyslog.Two.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog2.SocketIdleTimeout)))
					} else {
						items1.InputSyslog.Two.SocketIdleTimeout = types.NumberNull()
					}
					if itemsItem.InputSyslog.InputSyslog2.SocketMaxLifespan != nil {
						items1.InputSyslog.Two.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog2.SocketMaxLifespan)))
					} else {
						items1.InputSyslog.Two.SocketMaxLifespan = types.NumberNull()
					}
					items1.InputSyslog.Two.Streamtags = make([]types.String, 0, len(itemsItem.InputSyslog.InputSyslog2.Streamtags))
					for _, v := range itemsItem.InputSyslog.InputSyslog2.Streamtags {
						items1.InputSyslog.Two.Streamtags = append(items1.InputSyslog.Two.Streamtags, types.StringValue(v))
					}
					items1.InputSyslog.Two.StrictlyInferOctetCounting = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.StrictlyInferOctetCounting)
					items1.InputSyslog.Two.TCPPort = types.NumberValue(big.NewFloat(float64(itemsItem.InputSyslog.InputSyslog2.TCPPort)))
					items1.InputSyslog.Two.TimestampTimezone = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.TimestampTimezone)
					if itemsItem.InputSyslog.InputSyslog2.TLS == nil {
						items1.InputSyslog.Two.TLS = nil
					} else {
						items1.InputSyslog.Two.TLS = &tfTypes.InputSyslog2TLSSettingsServerSide{}
						items1.InputSyslog.Two.TLS.CaPath = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.TLS.CaPath)
						items1.InputSyslog.Two.TLS.CertificateName = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.TLS.CertificateName)
						items1.InputSyslog.Two.TLS.CertPath = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.TLS.CertPath)
						if itemsItem.InputSyslog.InputSyslog2.TLS.CommonNameRegex == nil {
							items1.InputSyslog.Two.TLS.CommonNameRegex = types.StringNull()
						} else {
							commonNameRegexResult18, _ := json.Marshal(itemsItem.InputSyslog.InputSyslog2.TLS.CommonNameRegex)
							items1.InputSyslog.Two.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult18))
						}
						items1.InputSyslog.Two.TLS.Disabled = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.TLS.Disabled)
						if itemsItem.InputSyslog.InputSyslog2.TLS.MaxVersion != nil {
							items1.InputSyslog.Two.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputSyslog.InputSyslog2.TLS.MaxVersion))
						} else {
							items1.InputSyslog.Two.TLS.MaxVersion = types.StringNull()
						}
						if itemsItem.InputSyslog.InputSyslog2.TLS.MinVersion != nil {
							items1.InputSyslog.Two.TLS.MinVersion = types.StringValue(string(*itemsItem.InputSyslog.InputSyslog2.TLS.MinVersion))
						} else {
							items1.InputSyslog.Two.TLS.MinVersion = types.StringNull()
						}
						items1.InputSyslog.Two.TLS.Passphrase = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.TLS.Passphrase)
						items1.InputSyslog.Two.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputSyslog.InputSyslog2.TLS.PrivKeyPath)
						if itemsItem.InputSyslog.InputSyslog2.TLS.RejectUnauthorized == nil {
							items1.InputSyslog.Two.TLS.RejectUnauthorized = types.StringNull()
						} else {
							rejectUnauthorizedResult18, _ := json.Marshal(itemsItem.InputSyslog.InputSyslog2.TLS.RejectUnauthorized)
							items1.InputSyslog.Two.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult18))
						}
						items1.InputSyslog.Two.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputSyslog.InputSyslog2.TLS.RequestCert)
					}
					items1.InputSyslog.Two.Type = types.StringValue(string(itemsItem.InputSyslog.InputSyslog2.Type))
					if itemsItem.InputSyslog.InputSyslog2.UDPPort != nil {
						items1.InputSyslog.Two.UDPPort = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog2.UDPPort)))
					} else {
						items1.InputSyslog.Two.UDPPort = types.NumberNull()
					}
					if itemsItem.InputSyslog.InputSyslog2.UDPSocketRxBufSize != nil {
						items1.InputSyslog.Two.UDPSocketRxBufSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSyslog.InputSyslog2.UDPSocketRxBufSize)))
					} else {
						items1.InputSyslog.Two.UDPSocketRxBufSize = types.NumberNull()
					}
				}
			}
			if itemsItem.InputSystemMetrics != nil {
				items1.InputSystemMetrics = &tfTypes.InputSystemMetrics{}
				items1.InputSystemMetrics.Connections = []tfTypes.InputSystemMetricsConnections{}
				for connectionsCount50, connectionsItem50 := range itemsItem.InputSystemMetrics.Connections {
					var connections101 tfTypes.InputSystemMetricsConnections
					connections101.Output = types.StringValue(connectionsItem50.Output)
					connections101.Pipeline = types.StringPointerValue(connectionsItem50.Pipeline)
					if connectionsCount50+1 > len(items1.InputSystemMetrics.Connections) {
						items1.InputSystemMetrics.Connections = append(items1.InputSystemMetrics.Connections, connections101)
					} else {
						items1.InputSystemMetrics.Connections[connectionsCount50].Output = connections101.Output
						items1.InputSystemMetrics.Connections[connectionsCount50].Pipeline = connections101.Pipeline
					}
				}
				if itemsItem.InputSystemMetrics.Container == nil {
					items1.InputSystemMetrics.Container = nil
				} else {
					items1.InputSystemMetrics.Container = &tfTypes.InputSystemMetricsContainer{}
					items1.InputSystemMetrics.Container.AllContainers = types.BoolPointerValue(itemsItem.InputSystemMetrics.Container.AllContainers)
					items1.InputSystemMetrics.Container.Detail = types.BoolPointerValue(itemsItem.InputSystemMetrics.Container.Detail)
					items1.InputSystemMetrics.Container.DockerSocket = make([]types.String, 0, len(itemsItem.InputSystemMetrics.Container.DockerSocket))
					for _, v := range itemsItem.InputSystemMetrics.Container.DockerSocket {
						items1.InputSystemMetrics.Container.DockerSocket = append(items1.InputSystemMetrics.Container.DockerSocket, types.StringValue(v))
					}
					if itemsItem.InputSystemMetrics.Container.DockerTimeout != nil {
						items1.InputSystemMetrics.Container.DockerTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSystemMetrics.Container.DockerTimeout)))
					} else {
						items1.InputSystemMetrics.Container.DockerTimeout = types.NumberNull()
					}
					items1.InputSystemMetrics.Container.Filters = []tfTypes.Filters{}
					for filtersCount, filtersItem := range itemsItem.InputSystemMetrics.Container.Filters {
						var filters1 tfTypes.Filters
						filters1.Expr = types.StringValue(filtersItem.Expr)
						if filtersCount+1 > len(items1.InputSystemMetrics.Container.Filters) {
							items1.InputSystemMetrics.Container.Filters = append(items1.InputSystemMetrics.Container.Filters, filters1)
						} else {
							items1.InputSystemMetrics.Container.Filters[filtersCount].Expr = filters1.Expr
						}
					}
					if itemsItem.InputSystemMetrics.Container.Mode != nil {
						items1.InputSystemMetrics.Container.Mode = types.StringValue(string(*itemsItem.InputSystemMetrics.Container.Mode))
					} else {
						items1.InputSystemMetrics.Container.Mode = types.StringNull()
					}
					items1.InputSystemMetrics.Container.PerDevice = types.BoolPointerValue(itemsItem.InputSystemMetrics.Container.PerDevice)
				}
				items1.InputSystemMetrics.Description = types.StringPointerValue(itemsItem.InputSystemMetrics.Description)
				items1.InputSystemMetrics.Disabled = types.BoolPointerValue(itemsItem.InputSystemMetrics.Disabled)
				items1.InputSystemMetrics.Environment = types.StringPointerValue(itemsItem.InputSystemMetrics.Environment)
				if itemsItem.InputSystemMetrics.Host == nil {
					items1.InputSystemMetrics.Host = nil
				} else {
					items1.InputSystemMetrics.Host = &tfTypes.Host{}
					if itemsItem.InputSystemMetrics.Host.Custom == nil {
						items1.InputSystemMetrics.Host.Custom = nil
					} else {
						items1.InputSystemMetrics.Host.Custom = &tfTypes.Custom{}
						if itemsItem.InputSystemMetrics.Host.Custom.CPU == nil {
							items1.InputSystemMetrics.Host.Custom.CPU = nil
						} else {
							items1.InputSystemMetrics.Host.Custom.CPU = &tfTypes.CPU{}
							items1.InputSystemMetrics.Host.Custom.CPU.Detail = types.BoolPointerValue(itemsItem.InputSystemMetrics.Host.Custom.CPU.Detail)
							if itemsItem.InputSystemMetrics.Host.Custom.CPU.Mode != nil {
								items1.InputSystemMetrics.Host.Custom.CPU.Mode = types.StringValue(string(*itemsItem.InputSystemMetrics.Host.Custom.CPU.Mode))
							} else {
								items1.InputSystemMetrics.Host.Custom.CPU.Mode = types.StringNull()
							}
							items1.InputSystemMetrics.Host.Custom.CPU.PerCPU = types.BoolPointerValue(itemsItem.InputSystemMetrics.Host.Custom.CPU.PerCPU)
							items1.InputSystemMetrics.Host.Custom.CPU.Time = types.BoolPointerValue(itemsItem.InputSystemMetrics.Host.Custom.CPU.Time)
						}
						if itemsItem.InputSystemMetrics.Host.Custom.Disk == nil {
							items1.InputSystemMetrics.Host.Custom.Disk = nil
						} else {
							items1.InputSystemMetrics.Host.Custom.Disk = &tfTypes.Disk{}
							items1.InputSystemMetrics.Host.Custom.Disk.Detail = types.BoolPointerValue(itemsItem.InputSystemMetrics.Host.Custom.Disk.Detail)
							items1.InputSystemMetrics.Host.Custom.Disk.Devices = make([]types.String, 0, len(itemsItem.InputSystemMetrics.Host.Custom.Disk.Devices))
							for _, v := range itemsItem.InputSystemMetrics.Host.Custom.Disk.Devices {
								items1.InputSystemMetrics.Host.Custom.Disk.Devices = append(items1.InputSystemMetrics.Host.Custom.Disk.Devices, types.StringValue(v))
							}
							items1.InputSystemMetrics.Host.Custom.Disk.Fstypes = make([]types.String, 0, len(itemsItem.InputSystemMetrics.Host.Custom.Disk.Fstypes))
							for _, v := range itemsItem.InputSystemMetrics.Host.Custom.Disk.Fstypes {
								items1.InputSystemMetrics.Host.Custom.Disk.Fstypes = append(items1.InputSystemMetrics.Host.Custom.Disk.Fstypes, types.StringValue(v))
							}
							if itemsItem.InputSystemMetrics.Host.Custom.Disk.Mode != nil {
								items1.InputSystemMetrics.Host.Custom.Disk.Mode = types.StringValue(string(*itemsItem.InputSystemMetrics.Host.Custom.Disk.Mode))
							} else {
								items1.InputSystemMetrics.Host.Custom.Disk.Mode = types.StringNull()
							}
							items1.InputSystemMetrics.Host.Custom.Disk.Mountpoints = make([]types.String, 0, len(itemsItem.InputSystemMetrics.Host.Custom.Disk.Mountpoints))
							for _, v := range itemsItem.InputSystemMetrics.Host.Custom.Disk.Mountpoints {
								items1.InputSystemMetrics.Host.Custom.Disk.Mountpoints = append(items1.InputSystemMetrics.Host.Custom.Disk.Mountpoints, types.StringValue(v))
							}
							items1.InputSystemMetrics.Host.Custom.Disk.PerDevice = types.BoolPointerValue(itemsItem.InputSystemMetrics.Host.Custom.Disk.PerDevice)
						}
						if itemsItem.InputSystemMetrics.Host.Custom.Memory == nil {
							items1.InputSystemMetrics.Host.Custom.Memory = nil
						} else {
							items1.InputSystemMetrics.Host.Custom.Memory = &tfTypes.InputSystemMetricsMemory{}
							items1.InputSystemMetrics.Host.Custom.Memory.Detail = types.BoolPointerValue(itemsItem.InputSystemMetrics.Host.Custom.Memory.Detail)
							if itemsItem.InputSystemMetrics.Host.Custom.Memory.Mode != nil {
								items1.InputSystemMetrics.Host.Custom.Memory.Mode = types.StringValue(string(*itemsItem.InputSystemMetrics.Host.Custom.Memory.Mode))
							} else {
								items1.InputSystemMetrics.Host.Custom.Memory.Mode = types.StringNull()
							}
						}
						if itemsItem.InputSystemMetrics.Host.Custom.Network == nil {
							items1.InputSystemMetrics.Host.Custom.Network = nil
						} else {
							items1.InputSystemMetrics.Host.Custom.Network = &tfTypes.Network{}
							items1.InputSystemMetrics.Host.Custom.Network.Detail = types.BoolPointerValue(itemsItem.InputSystemMetrics.Host.Custom.Network.Detail)
							items1.InputSystemMetrics.Host.Custom.Network.Devices = make([]types.String, 0, len(itemsItem.InputSystemMetrics.Host.Custom.Network.Devices))
							for _, v := range itemsItem.InputSystemMetrics.Host.Custom.Network.Devices {
								items1.InputSystemMetrics.Host.Custom.Network.Devices = append(items1.InputSystemMetrics.Host.Custom.Network.Devices, types.StringValue(v))
							}
							if itemsItem.InputSystemMetrics.Host.Custom.Network.Mode != nil {
								items1.InputSystemMetrics.Host.Custom.Network.Mode = types.StringValue(string(*itemsItem.InputSystemMetrics.Host.Custom.Network.Mode))
							} else {
								items1.InputSystemMetrics.Host.Custom.Network.Mode = types.StringNull()
							}
							items1.InputSystemMetrics.Host.Custom.Network.PerInterface = types.BoolPointerValue(itemsItem.InputSystemMetrics.Host.Custom.Network.PerInterface)
						}
						if itemsItem.InputSystemMetrics.Host.Custom.System == nil {
							items1.InputSystemMetrics.Host.Custom.System = nil
						} else {
							items1.InputSystemMetrics.Host.Custom.System = &tfTypes.InputSystemMetricsSystem{}
							if itemsItem.InputSystemMetrics.Host.Custom.System.Mode != nil {
								items1.InputSystemMetrics.Host.Custom.System.Mode = types.StringValue(string(*itemsItem.InputSystemMetrics.Host.Custom.System.Mode))
							} else {
								items1.InputSystemMetrics.Host.Custom.System.Mode = types.StringNull()
							}
							items1.InputSystemMetrics.Host.Custom.System.Processes = types.BoolPointerValue(itemsItem.InputSystemMetrics.Host.Custom.System.Processes)
						}
					}
					if itemsItem.InputSystemMetrics.Host.Mode != nil {
						items1.InputSystemMetrics.Host.Mode = types.StringValue(string(*itemsItem.InputSystemMetrics.Host.Mode))
					} else {
						items1.InputSystemMetrics.Host.Mode = types.StringNull()
					}
				}
				items1.InputSystemMetrics.ID = types.StringValue(itemsItem.InputSystemMetrics.ID)
				if itemsItem.InputSystemMetrics.Interval != nil {
					items1.InputSystemMetrics.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSystemMetrics.Interval)))
				} else {
					items1.InputSystemMetrics.Interval = types.NumberNull()
				}
				items1.InputSystemMetrics.Metadata = []tfTypes.InputSystemMetricsMetadata{}
				for metadataCount53, metadataItem53 := range itemsItem.InputSystemMetrics.Metadata {
					var metadata107 tfTypes.InputSystemMetricsMetadata
					metadata107.Name = types.StringValue(metadataItem53.Name)
					metadata107.Value = types.StringValue(metadataItem53.Value)
					if metadataCount53+1 > len(items1.InputSystemMetrics.Metadata) {
						items1.InputSystemMetrics.Metadata = append(items1.InputSystemMetrics.Metadata, metadata107)
					} else {
						items1.InputSystemMetrics.Metadata[metadataCount53].Name = metadata107.Name
						items1.InputSystemMetrics.Metadata[metadataCount53].Value = metadata107.Value
					}
				}
				if itemsItem.InputSystemMetrics.Persistence == nil {
					items1.InputSystemMetrics.Persistence = nil
				} else {
					items1.InputSystemMetrics.Persistence = &tfTypes.InputSystemMetricsPersistence{}
					if itemsItem.InputSystemMetrics.Persistence.Compress != nil {
						items1.InputSystemMetrics.Persistence.Compress = types.StringValue(string(*itemsItem.InputSystemMetrics.Persistence.Compress))
					} else {
						items1.InputSystemMetrics.Persistence.Compress = types.StringNull()
					}
					items1.InputSystemMetrics.Persistence.DestPath = types.StringPointerValue(itemsItem.InputSystemMetrics.Persistence.DestPath)
					items1.InputSystemMetrics.Persistence.Enable = types.BoolPointerValue(itemsItem.InputSystemMetrics.Persistence.Enable)
					items1.InputSystemMetrics.Persistence.MaxDataSize = types.StringPointerValue(itemsItem.InputSystemMetrics.Persistence.MaxDataSize)
					items1.InputSystemMetrics.Persistence.MaxDataTime = types.StringPointerValue(itemsItem.InputSystemMetrics.Persistence.MaxDataTime)
					items1.InputSystemMetrics.Persistence.TimeWindow = types.StringPointerValue(itemsItem.InputSystemMetrics.Persistence.TimeWindow)
				}
				items1.InputSystemMetrics.Pipeline = types.StringPointerValue(itemsItem.InputSystemMetrics.Pipeline)
				if itemsItem.InputSystemMetrics.Pq == nil {
					items1.InputSystemMetrics.Pq = nil
				} else {
					items1.InputSystemMetrics.Pq = &tfTypes.InputSystemMetricsPq{}
					if itemsItem.InputSystemMetrics.Pq.CommitFrequency != nil {
						items1.InputSystemMetrics.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSystemMetrics.Pq.CommitFrequency)))
					} else {
						items1.InputSystemMetrics.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputSystemMetrics.Pq.Compress != nil {
						items1.InputSystemMetrics.Pq.Compress = types.StringValue(string(*itemsItem.InputSystemMetrics.Pq.Compress))
					} else {
						items1.InputSystemMetrics.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputSystemMetrics.Pq.MaxBufferSize != nil {
						items1.InputSystemMetrics.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSystemMetrics.Pq.MaxBufferSize)))
					} else {
						items1.InputSystemMetrics.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputSystemMetrics.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputSystemMetrics.Pq.MaxFileSize)
					items1.InputSystemMetrics.Pq.MaxSize = types.StringPointerValue(itemsItem.InputSystemMetrics.Pq.MaxSize)
					if itemsItem.InputSystemMetrics.Pq.Mode != nil {
						items1.InputSystemMetrics.Pq.Mode = types.StringValue(string(*itemsItem.InputSystemMetrics.Pq.Mode))
					} else {
						items1.InputSystemMetrics.Pq.Mode = types.StringNull()
					}
					items1.InputSystemMetrics.Pq.Path = types.StringPointerValue(itemsItem.InputSystemMetrics.Pq.Path)
				}
				items1.InputSystemMetrics.PqEnabled = types.BoolPointerValue(itemsItem.InputSystemMetrics.PqEnabled)
				if itemsItem.InputSystemMetrics.Process == nil {
					items1.InputSystemMetrics.Process = nil
				} else {
					items1.InputSystemMetrics.Process = &tfTypes.InputSystemMetricsProcess{}
					items1.InputSystemMetrics.Process.Sets = []tfTypes.Sets{}
					for setsCount, setsItem := range itemsItem.InputSystemMetrics.Process.Sets {
						var sets1 tfTypes.Sets
						sets1.Filter = types.StringValue(setsItem.Filter)
						sets1.IncludeChildren = types.BoolPointerValue(setsItem.IncludeChildren)
						sets1.Name = types.StringValue(setsItem.Name)
						if setsCount+1 > len(items1.InputSystemMetrics.Process.Sets) {
							items1.InputSystemMetrics.Process.Sets = append(items1.InputSystemMetrics.Process.Sets, sets1)
						} else {
							items1.InputSystemMetrics.Process.Sets[setsCount].Filter = sets1.Filter
							items1.InputSystemMetrics.Process.Sets[setsCount].IncludeChildren = sets1.IncludeChildren
							items1.InputSystemMetrics.Process.Sets[setsCount].Name = sets1.Name
						}
					}
				}
				items1.InputSystemMetrics.SendToRoutes = types.BoolPointerValue(itemsItem.InputSystemMetrics.SendToRoutes)
				items1.InputSystemMetrics.Streamtags = make([]types.String, 0, len(itemsItem.InputSystemMetrics.Streamtags))
				for _, v := range itemsItem.InputSystemMetrics.Streamtags {
					items1.InputSystemMetrics.Streamtags = append(items1.InputSystemMetrics.Streamtags, types.StringValue(v))
				}
				items1.InputSystemMetrics.Type = types.StringValue(string(itemsItem.InputSystemMetrics.Type))
			}
			if itemsItem.InputSystemState != nil {
				items1.InputSystemState = &tfTypes.InputSystemState{}
				if itemsItem.InputSystemState.Collectors == nil {
					items1.InputSystemState.Collectors = nil
				} else {
					items1.InputSystemState.Collectors = &tfTypes.Collectors{}
					if itemsItem.InputSystemState.Collectors.Disk == nil {
						items1.InputSystemState.Collectors.Disk = nil
					} else {
						items1.InputSystemState.Collectors.Disk = &tfTypes.DisksAndFileSystems{}
						items1.InputSystemState.Collectors.Disk.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.Disk.Enable)
					}
					if itemsItem.InputSystemState.Collectors.DNS == nil {
						items1.InputSystemState.Collectors.DNS = nil
					} else {
						items1.InputSystemState.Collectors.DNS = &tfTypes.DNS{}
						items1.InputSystemState.Collectors.DNS.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.DNS.Enable)
					}
					if itemsItem.InputSystemState.Collectors.Firewall == nil {
						items1.InputSystemState.Collectors.Firewall = nil
					} else {
						items1.InputSystemState.Collectors.Firewall = &tfTypes.Firewall{}
						items1.InputSystemState.Collectors.Firewall.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.Firewall.Enable)
					}
					if itemsItem.InputSystemState.Collectors.Hostsfile == nil {
						items1.InputSystemState.Collectors.Hostsfile = nil
					} else {
						items1.InputSystemState.Collectors.Hostsfile = &tfTypes.HostsFile{}
						items1.InputSystemState.Collectors.Hostsfile.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.Hostsfile.Enable)
					}
					if itemsItem.InputSystemState.Collectors.Interfaces == nil {
						items1.InputSystemState.Collectors.Interfaces = nil
					} else {
						items1.InputSystemState.Collectors.Interfaces = &tfTypes.InputSystemStateInterfaces{}
						items1.InputSystemState.Collectors.Interfaces.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.Interfaces.Enable)
					}
					if itemsItem.InputSystemState.Collectors.LoginUsers == nil {
						items1.InputSystemState.Collectors.LoginUsers = nil
					} else {
						items1.InputSystemState.Collectors.LoginUsers = &tfTypes.LoggedInUsers{}
						items1.InputSystemState.Collectors.LoginUsers.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.LoginUsers.Enable)
					}
					if itemsItem.InputSystemState.Collectors.Metadata == nil {
						items1.InputSystemState.Collectors.Metadata = nil
					} else {
						items1.InputSystemState.Collectors.Metadata = &tfTypes.HostInfo{}
						items1.InputSystemState.Collectors.Metadata.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.Metadata.Enable)
					}
					if itemsItem.InputSystemState.Collectors.Ports == nil {
						items1.InputSystemState.Collectors.Ports = nil
					} else {
						items1.InputSystemState.Collectors.Ports = &tfTypes.ListeningPorts{}
						items1.InputSystemState.Collectors.Ports.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.Ports.Enable)
					}
					if itemsItem.InputSystemState.Collectors.Routes == nil {
						items1.InputSystemState.Collectors.Routes = nil
					} else {
						items1.InputSystemState.Collectors.Routes = &tfTypes.InputSystemStateRoutes{}
						items1.InputSystemState.Collectors.Routes.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.Routes.Enable)
					}
					if itemsItem.InputSystemState.Collectors.Services == nil {
						items1.InputSystemState.Collectors.Services = nil
					} else {
						items1.InputSystemState.Collectors.Services = &tfTypes.Services{}
						items1.InputSystemState.Collectors.Services.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.Services.Enable)
					}
					if itemsItem.InputSystemState.Collectors.User == nil {
						items1.InputSystemState.Collectors.User = nil
					} else {
						items1.InputSystemState.Collectors.User = &tfTypes.UsersAndGroups{}
						items1.InputSystemState.Collectors.User.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Collectors.User.Enable)
					}
				}
				items1.InputSystemState.Connections = []tfTypes.InputSystemStateConnections{}
				for connectionsCount51, connectionsItem51 := range itemsItem.InputSystemState.Connections {
					var connections103 tfTypes.InputSystemStateConnections
					connections103.Output = types.StringValue(connectionsItem51.Output)
					connections103.Pipeline = types.StringPointerValue(connectionsItem51.Pipeline)
					if connectionsCount51+1 > len(items1.InputSystemState.Connections) {
						items1.InputSystemState.Connections = append(items1.InputSystemState.Connections, connections103)
					} else {
						items1.InputSystemState.Connections[connectionsCount51].Output = connections103.Output
						items1.InputSystemState.Connections[connectionsCount51].Pipeline = connections103.Pipeline
					}
				}
				items1.InputSystemState.Description = types.StringPointerValue(itemsItem.InputSystemState.Description)
				items1.InputSystemState.Disabled = types.BoolPointerValue(itemsItem.InputSystemState.Disabled)
				items1.InputSystemState.Environment = types.StringPointerValue(itemsItem.InputSystemState.Environment)
				items1.InputSystemState.ID = types.StringValue(itemsItem.InputSystemState.ID)
				if itemsItem.InputSystemState.Interval != nil {
					items1.InputSystemState.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSystemState.Interval)))
				} else {
					items1.InputSystemState.Interval = types.NumberNull()
				}
				items1.InputSystemState.Metadata = []tfTypes.InputSystemStateMetadata{}
				for metadataCount54, metadataItem54 := range itemsItem.InputSystemState.Metadata {
					var metadata110 tfTypes.InputSystemStateMetadata
					metadata110.Name = types.StringValue(metadataItem54.Name)
					metadata110.Value = types.StringValue(metadataItem54.Value)
					if metadataCount54+1 > len(items1.InputSystemState.Metadata) {
						items1.InputSystemState.Metadata = append(items1.InputSystemState.Metadata, metadata110)
					} else {
						items1.InputSystemState.Metadata[metadataCount54].Name = metadata110.Name
						items1.InputSystemState.Metadata[metadataCount54].Value = metadata110.Value
					}
				}
				if itemsItem.InputSystemState.Persistence == nil {
					items1.InputSystemState.Persistence = nil
				} else {
					items1.InputSystemState.Persistence = &tfTypes.Persistence{}
					if itemsItem.InputSystemState.Persistence.Compress != nil {
						items1.InputSystemState.Persistence.Compress = types.StringValue(string(*itemsItem.InputSystemState.Persistence.Compress))
					} else {
						items1.InputSystemState.Persistence.Compress = types.StringNull()
					}
					items1.InputSystemState.Persistence.DestPath = types.StringPointerValue(itemsItem.InputSystemState.Persistence.DestPath)
					items1.InputSystemState.Persistence.Enable = types.BoolPointerValue(itemsItem.InputSystemState.Persistence.Enable)
					items1.InputSystemState.Persistence.MaxDataSize = types.StringPointerValue(itemsItem.InputSystemState.Persistence.MaxDataSize)
					items1.InputSystemState.Persistence.MaxDataTime = types.StringPointerValue(itemsItem.InputSystemState.Persistence.MaxDataTime)
					items1.InputSystemState.Persistence.TimeWindow = types.StringPointerValue(itemsItem.InputSystemState.Persistence.TimeWindow)
				}
				items1.InputSystemState.Pipeline = types.StringPointerValue(itemsItem.InputSystemState.Pipeline)
				if itemsItem.InputSystemState.Pq == nil {
					items1.InputSystemState.Pq = nil
				} else {
					items1.InputSystemState.Pq = &tfTypes.InputSystemStatePq{}
					if itemsItem.InputSystemState.Pq.CommitFrequency != nil {
						items1.InputSystemState.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSystemState.Pq.CommitFrequency)))
					} else {
						items1.InputSystemState.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputSystemState.Pq.Compress != nil {
						items1.InputSystemState.Pq.Compress = types.StringValue(string(*itemsItem.InputSystemState.Pq.Compress))
					} else {
						items1.InputSystemState.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputSystemState.Pq.MaxBufferSize != nil {
						items1.InputSystemState.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputSystemState.Pq.MaxBufferSize)))
					} else {
						items1.InputSystemState.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputSystemState.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputSystemState.Pq.MaxFileSize)
					items1.InputSystemState.Pq.MaxSize = types.StringPointerValue(itemsItem.InputSystemState.Pq.MaxSize)
					if itemsItem.InputSystemState.Pq.Mode != nil {
						items1.InputSystemState.Pq.Mode = types.StringValue(string(*itemsItem.InputSystemState.Pq.Mode))
					} else {
						items1.InputSystemState.Pq.Mode = types.StringNull()
					}
					items1.InputSystemState.Pq.Path = types.StringPointerValue(itemsItem.InputSystemState.Pq.Path)
				}
				items1.InputSystemState.PqEnabled = types.BoolPointerValue(itemsItem.InputSystemState.PqEnabled)
				items1.InputSystemState.SendToRoutes = types.BoolPointerValue(itemsItem.InputSystemState.SendToRoutes)
				items1.InputSystemState.Streamtags = make([]types.String, 0, len(itemsItem.InputSystemState.Streamtags))
				for _, v := range itemsItem.InputSystemState.Streamtags {
					items1.InputSystemState.Streamtags = append(items1.InputSystemState.Streamtags, types.StringValue(v))
				}
				items1.InputSystemState.Type = types.StringValue(string(itemsItem.InputSystemState.Type))
			}
			if itemsItem.InputTCP != nil {
				items1.InputTCP = &tfTypes.InputTCP{}
				if itemsItem.InputTCP.AuthType != nil {
					items1.InputTCP.AuthType = types.StringValue(string(*itemsItem.InputTCP.AuthType))
				} else {
					items1.InputTCP.AuthType = types.StringNull()
				}
				items1.InputTCP.BreakerRulesets = make([]types.String, 0, len(itemsItem.InputTCP.BreakerRulesets))
				for _, v := range itemsItem.InputTCP.BreakerRulesets {
					items1.InputTCP.BreakerRulesets = append(items1.InputTCP.BreakerRulesets, types.StringValue(v))
				}
				items1.InputTCP.Connections = []tfTypes.InputTCPConnections{}
				for connectionsCount52, connectionsItem52 := range itemsItem.InputTCP.Connections {
					var connections105 tfTypes.InputTCPConnections
					connections105.Output = types.StringValue(connectionsItem52.Output)
					connections105.Pipeline = types.StringPointerValue(connectionsItem52.Pipeline)
					if connectionsCount52+1 > len(items1.InputTCP.Connections) {
						items1.InputTCP.Connections = append(items1.InputTCP.Connections, connections105)
					} else {
						items1.InputTCP.Connections[connectionsCount52].Output = connections105.Output
						items1.InputTCP.Connections[connectionsCount52].Pipeline = connections105.Pipeline
					}
				}
				items1.InputTCP.Description = types.StringPointerValue(itemsItem.InputTCP.Description)
				items1.InputTCP.Disabled = types.BoolPointerValue(itemsItem.InputTCP.Disabled)
				items1.InputTCP.EnableHeader = types.BoolPointerValue(itemsItem.InputTCP.EnableHeader)
				items1.InputTCP.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputTCP.EnableProxyHeader)
				items1.InputTCP.Environment = types.StringPointerValue(itemsItem.InputTCP.Environment)
				items1.InputTCP.Host = types.StringPointerValue(itemsItem.InputTCP.Host)
				items1.InputTCP.ID = types.StringPointerValue(itemsItem.InputTCP.ID)
				items1.InputTCP.IPWhitelistRegex = types.StringPointerValue(itemsItem.InputTCP.IPWhitelistRegex)
				if itemsItem.InputTCP.MaxActiveCxn != nil {
					items1.InputTCP.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTCP.MaxActiveCxn)))
				} else {
					items1.InputTCP.MaxActiveCxn = types.NumberNull()
				}
				items1.InputTCP.Metadata = []tfTypes.InputTCPMetadata{}
				for metadataCount55, metadataItem55 := range itemsItem.InputTCP.Metadata {
					var metadata112 tfTypes.InputTCPMetadata
					metadata112.Name = types.StringValue(metadataItem55.Name)
					metadata112.Value = types.StringValue(metadataItem55.Value)
					if metadataCount55+1 > len(items1.InputTCP.Metadata) {
						items1.InputTCP.Metadata = append(items1.InputTCP.Metadata, metadata112)
					} else {
						items1.InputTCP.Metadata[metadataCount55].Name = metadata112.Name
						items1.InputTCP.Metadata[metadataCount55].Value = metadata112.Value
					}
				}
				items1.InputTCP.Pipeline = types.StringPointerValue(itemsItem.InputTCP.Pipeline)
				items1.InputTCP.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputTCP.Port)))
				if itemsItem.InputTCP.Pq == nil {
					items1.InputTCP.Pq = nil
				} else {
					items1.InputTCP.Pq = &tfTypes.InputTCPPq{}
					if itemsItem.InputTCP.Pq.CommitFrequency != nil {
						items1.InputTCP.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTCP.Pq.CommitFrequency)))
					} else {
						items1.InputTCP.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputTCP.Pq.Compress != nil {
						items1.InputTCP.Pq.Compress = types.StringValue(string(*itemsItem.InputTCP.Pq.Compress))
					} else {
						items1.InputTCP.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputTCP.Pq.MaxBufferSize != nil {
						items1.InputTCP.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTCP.Pq.MaxBufferSize)))
					} else {
						items1.InputTCP.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputTCP.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputTCP.Pq.MaxFileSize)
					items1.InputTCP.Pq.MaxSize = types.StringPointerValue(itemsItem.InputTCP.Pq.MaxSize)
					if itemsItem.InputTCP.Pq.Mode != nil {
						items1.InputTCP.Pq.Mode = types.StringValue(string(*itemsItem.InputTCP.Pq.Mode))
					} else {
						items1.InputTCP.Pq.Mode = types.StringNull()
					}
					items1.InputTCP.Pq.Path = types.StringPointerValue(itemsItem.InputTCP.Pq.Path)
				}
				items1.InputTCP.PqEnabled = types.BoolPointerValue(itemsItem.InputTCP.PqEnabled)
				if itemsItem.InputTCP.Preprocess == nil {
					items1.InputTCP.Preprocess = nil
				} else {
					items1.InputTCP.Preprocess = &tfTypes.InputTCPPreprocess{}
					items1.InputTCP.Preprocess.Args = make([]types.String, 0, len(itemsItem.InputTCP.Preprocess.Args))
					for _, v := range itemsItem.InputTCP.Preprocess.Args {
						items1.InputTCP.Preprocess.Args = append(items1.InputTCP.Preprocess.Args, types.StringValue(v))
					}
					items1.InputTCP.Preprocess.Command = types.StringPointerValue(itemsItem.InputTCP.Preprocess.Command)
					items1.InputTCP.Preprocess.Disabled = types.BoolPointerValue(itemsItem.InputTCP.Preprocess.Disabled)
				}
				items1.InputTCP.SendToRoutes = types.BoolPointerValue(itemsItem.InputTCP.SendToRoutes)
				if itemsItem.InputTCP.SocketEndingMaxWait != nil {
					items1.InputTCP.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTCP.SocketEndingMaxWait)))
				} else {
					items1.InputTCP.SocketEndingMaxWait = types.NumberNull()
				}
				if itemsItem.InputTCP.SocketIdleTimeout != nil {
					items1.InputTCP.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTCP.SocketIdleTimeout)))
				} else {
					items1.InputTCP.SocketIdleTimeout = types.NumberNull()
				}
				if itemsItem.InputTCP.SocketMaxLifespan != nil {
					items1.InputTCP.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTCP.SocketMaxLifespan)))
				} else {
					items1.InputTCP.SocketMaxLifespan = types.NumberNull()
				}
				if itemsItem.InputTCP.StaleChannelFlushMs != nil {
					items1.InputTCP.StaleChannelFlushMs = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTCP.StaleChannelFlushMs)))
				} else {
					items1.InputTCP.StaleChannelFlushMs = types.NumberNull()
				}
				items1.InputTCP.Streamtags = make([]types.String, 0, len(itemsItem.InputTCP.Streamtags))
				for _, v := range itemsItem.InputTCP.Streamtags {
					items1.InputTCP.Streamtags = append(items1.InputTCP.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputTCP.TLS == nil {
					items1.InputTCP.TLS = nil
				} else {
					items1.InputTCP.TLS = &tfTypes.InputTCPTLSSettingsServerSide{}
					items1.InputTCP.TLS.CaPath = types.StringPointerValue(itemsItem.InputTCP.TLS.CaPath)
					items1.InputTCP.TLS.CertificateName = types.StringPointerValue(itemsItem.InputTCP.TLS.CertificateName)
					items1.InputTCP.TLS.CertPath = types.StringPointerValue(itemsItem.InputTCP.TLS.CertPath)
					if itemsItem.InputTCP.TLS.CommonNameRegex == nil {
						items1.InputTCP.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult19, _ := json.Marshal(itemsItem.InputTCP.TLS.CommonNameRegex)
						items1.InputTCP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult19))
					}
					items1.InputTCP.TLS.Disabled = types.BoolPointerValue(itemsItem.InputTCP.TLS.Disabled)
					if itemsItem.InputTCP.TLS.MaxVersion != nil {
						items1.InputTCP.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputTCP.TLS.MaxVersion))
					} else {
						items1.InputTCP.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputTCP.TLS.MinVersion != nil {
						items1.InputTCP.TLS.MinVersion = types.StringValue(string(*itemsItem.InputTCP.TLS.MinVersion))
					} else {
						items1.InputTCP.TLS.MinVersion = types.StringNull()
					}
					items1.InputTCP.TLS.Passphrase = types.StringPointerValue(itemsItem.InputTCP.TLS.Passphrase)
					items1.InputTCP.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputTCP.TLS.PrivKeyPath)
					if itemsItem.InputTCP.TLS.RejectUnauthorized == nil {
						items1.InputTCP.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult19, _ := json.Marshal(itemsItem.InputTCP.TLS.RejectUnauthorized)
						items1.InputTCP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult19))
					}
					items1.InputTCP.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputTCP.TLS.RequestCert)
				}
				if itemsItem.InputTCP.Type != nil {
					items1.InputTCP.Type = types.StringValue(string(*itemsItem.InputTCP.Type))
				} else {
					items1.InputTCP.Type = types.StringNull()
				}
			}
			if itemsItem.InputTcpjson != nil {
				items1.InputTcpjson = &tfTypes.InputTcpjson{}
				items1.InputTcpjson.AuthToken = types.StringPointerValue(itemsItem.InputTcpjson.AuthToken)
				if itemsItem.InputTcpjson.AuthType != nil {
					items1.InputTcpjson.AuthType = types.StringValue(string(*itemsItem.InputTcpjson.AuthType))
				} else {
					items1.InputTcpjson.AuthType = types.StringNull()
				}
				items1.InputTcpjson.Connections = []tfTypes.InputTcpjsonConnections{}
				for connectionsCount53, connectionsItem53 := range itemsItem.InputTcpjson.Connections {
					var connections107 tfTypes.InputTcpjsonConnections
					connections107.Output = types.StringValue(connectionsItem53.Output)
					connections107.Pipeline = types.StringPointerValue(connectionsItem53.Pipeline)
					if connectionsCount53+1 > len(items1.InputTcpjson.Connections) {
						items1.InputTcpjson.Connections = append(items1.InputTcpjson.Connections, connections107)
					} else {
						items1.InputTcpjson.Connections[connectionsCount53].Output = connections107.Output
						items1.InputTcpjson.Connections[connectionsCount53].Pipeline = connections107.Pipeline
					}
				}
				items1.InputTcpjson.Description = types.StringPointerValue(itemsItem.InputTcpjson.Description)
				items1.InputTcpjson.Disabled = types.BoolPointerValue(itemsItem.InputTcpjson.Disabled)
				items1.InputTcpjson.EnableLoadBalancing = types.BoolPointerValue(itemsItem.InputTcpjson.EnableLoadBalancing)
				items1.InputTcpjson.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputTcpjson.EnableProxyHeader)
				items1.InputTcpjson.Environment = types.StringPointerValue(itemsItem.InputTcpjson.Environment)
				items1.InputTcpjson.Host = types.StringPointerValue(itemsItem.InputTcpjson.Host)
				items1.InputTcpjson.ID = types.StringPointerValue(itemsItem.InputTcpjson.ID)
				items1.InputTcpjson.IPWhitelistRegex = types.StringPointerValue(itemsItem.InputTcpjson.IPWhitelistRegex)
				if itemsItem.InputTcpjson.MaxActiveCxn != nil {
					items1.InputTcpjson.MaxActiveCxn = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTcpjson.MaxActiveCxn)))
				} else {
					items1.InputTcpjson.MaxActiveCxn = types.NumberNull()
				}
				items1.InputTcpjson.Metadata = []tfTypes.InputTcpjsonMetadata{}
				for metadataCount56, metadataItem56 := range itemsItem.InputTcpjson.Metadata {
					var metadata114 tfTypes.InputTcpjsonMetadata
					metadata114.Name = types.StringValue(metadataItem56.Name)
					metadata114.Value = types.StringValue(metadataItem56.Value)
					if metadataCount56+1 > len(items1.InputTcpjson.Metadata) {
						items1.InputTcpjson.Metadata = append(items1.InputTcpjson.Metadata, metadata114)
					} else {
						items1.InputTcpjson.Metadata[metadataCount56].Name = metadata114.Name
						items1.InputTcpjson.Metadata[metadataCount56].Value = metadata114.Value
					}
				}
				items1.InputTcpjson.Pipeline = types.StringPointerValue(itemsItem.InputTcpjson.Pipeline)
				items1.InputTcpjson.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputTcpjson.Port)))
				if itemsItem.InputTcpjson.Pq == nil {
					items1.InputTcpjson.Pq = nil
				} else {
					items1.InputTcpjson.Pq = &tfTypes.InputTcpjsonPq{}
					if itemsItem.InputTcpjson.Pq.CommitFrequency != nil {
						items1.InputTcpjson.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTcpjson.Pq.CommitFrequency)))
					} else {
						items1.InputTcpjson.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputTcpjson.Pq.Compress != nil {
						items1.InputTcpjson.Pq.Compress = types.StringValue(string(*itemsItem.InputTcpjson.Pq.Compress))
					} else {
						items1.InputTcpjson.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputTcpjson.Pq.MaxBufferSize != nil {
						items1.InputTcpjson.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTcpjson.Pq.MaxBufferSize)))
					} else {
						items1.InputTcpjson.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputTcpjson.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputTcpjson.Pq.MaxFileSize)
					items1.InputTcpjson.Pq.MaxSize = types.StringPointerValue(itemsItem.InputTcpjson.Pq.MaxSize)
					if itemsItem.InputTcpjson.Pq.Mode != nil {
						items1.InputTcpjson.Pq.Mode = types.StringValue(string(*itemsItem.InputTcpjson.Pq.Mode))
					} else {
						items1.InputTcpjson.Pq.Mode = types.StringNull()
					}
					items1.InputTcpjson.Pq.Path = types.StringPointerValue(itemsItem.InputTcpjson.Pq.Path)
				}
				items1.InputTcpjson.PqEnabled = types.BoolPointerValue(itemsItem.InputTcpjson.PqEnabled)
				items1.InputTcpjson.SendToRoutes = types.BoolPointerValue(itemsItem.InputTcpjson.SendToRoutes)
				if itemsItem.InputTcpjson.SocketEndingMaxWait != nil {
					items1.InputTcpjson.SocketEndingMaxWait = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTcpjson.SocketEndingMaxWait)))
				} else {
					items1.InputTcpjson.SocketEndingMaxWait = types.NumberNull()
				}
				if itemsItem.InputTcpjson.SocketIdleTimeout != nil {
					items1.InputTcpjson.SocketIdleTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTcpjson.SocketIdleTimeout)))
				} else {
					items1.InputTcpjson.SocketIdleTimeout = types.NumberNull()
				}
				if itemsItem.InputTcpjson.SocketMaxLifespan != nil {
					items1.InputTcpjson.SocketMaxLifespan = types.NumberValue(big.NewFloat(float64(*itemsItem.InputTcpjson.SocketMaxLifespan)))
				} else {
					items1.InputTcpjson.SocketMaxLifespan = types.NumberNull()
				}
				items1.InputTcpjson.Streamtags = make([]types.String, 0, len(itemsItem.InputTcpjson.Streamtags))
				for _, v := range itemsItem.InputTcpjson.Streamtags {
					items1.InputTcpjson.Streamtags = append(items1.InputTcpjson.Streamtags, types.StringValue(v))
				}
				items1.InputTcpjson.TextSecret = types.StringPointerValue(itemsItem.InputTcpjson.TextSecret)
				if itemsItem.InputTcpjson.TLS == nil {
					items1.InputTcpjson.TLS = nil
				} else {
					items1.InputTcpjson.TLS = &tfTypes.InputTcpjsonTLSSettingsServerSide{}
					items1.InputTcpjson.TLS.CaPath = types.StringPointerValue(itemsItem.InputTcpjson.TLS.CaPath)
					items1.InputTcpjson.TLS.CertificateName = types.StringPointerValue(itemsItem.InputTcpjson.TLS.CertificateName)
					items1.InputTcpjson.TLS.CertPath = types.StringPointerValue(itemsItem.InputTcpjson.TLS.CertPath)
					if itemsItem.InputTcpjson.TLS.CommonNameRegex == nil {
						items1.InputTcpjson.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult20, _ := json.Marshal(itemsItem.InputTcpjson.TLS.CommonNameRegex)
						items1.InputTcpjson.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult20))
					}
					items1.InputTcpjson.TLS.Disabled = types.BoolPointerValue(itemsItem.InputTcpjson.TLS.Disabled)
					if itemsItem.InputTcpjson.TLS.MaxVersion != nil {
						items1.InputTcpjson.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputTcpjson.TLS.MaxVersion))
					} else {
						items1.InputTcpjson.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputTcpjson.TLS.MinVersion != nil {
						items1.InputTcpjson.TLS.MinVersion = types.StringValue(string(*itemsItem.InputTcpjson.TLS.MinVersion))
					} else {
						items1.InputTcpjson.TLS.MinVersion = types.StringNull()
					}
					items1.InputTcpjson.TLS.Passphrase = types.StringPointerValue(itemsItem.InputTcpjson.TLS.Passphrase)
					items1.InputTcpjson.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputTcpjson.TLS.PrivKeyPath)
					if itemsItem.InputTcpjson.TLS.RejectUnauthorized == nil {
						items1.InputTcpjson.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult20, _ := json.Marshal(itemsItem.InputTcpjson.TLS.RejectUnauthorized)
						items1.InputTcpjson.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult20))
					}
					items1.InputTcpjson.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputTcpjson.TLS.RequestCert)
				}
				if itemsItem.InputTcpjson.Type != nil {
					items1.InputTcpjson.Type = types.StringValue(string(*itemsItem.InputTcpjson.Type))
				} else {
					items1.InputTcpjson.Type = types.StringNull()
				}
			}
			if itemsItem.InputWef != nil {
				items1.InputWef = &tfTypes.InputWef{}
				items1.InputWef.AllowMachineIDMismatch = types.BoolPointerValue(itemsItem.InputWef.AllowMachineIDMismatch)
				if itemsItem.InputWef.AuthMethod != nil {
					items1.InputWef.AuthMethod = types.StringValue(string(*itemsItem.InputWef.AuthMethod))
				} else {
					items1.InputWef.AuthMethod = types.StringNull()
				}
				items1.InputWef.CaFingerprint = types.StringPointerValue(itemsItem.InputWef.CaFingerprint)
				items1.InputWef.CaptureHeaders = types.BoolPointerValue(itemsItem.InputWef.CaptureHeaders)
				items1.InputWef.Connections = []tfTypes.InputWefConnections{}
				for connectionsCount54, connectionsItem54 := range itemsItem.InputWef.Connections {
					var connections109 tfTypes.InputWefConnections
					connections109.Output = types.StringValue(connectionsItem54.Output)
					connections109.Pipeline = types.StringPointerValue(connectionsItem54.Pipeline)
					if connectionsCount54+1 > len(items1.InputWef.Connections) {
						items1.InputWef.Connections = append(items1.InputWef.Connections, connections109)
					} else {
						items1.InputWef.Connections[connectionsCount54].Output = connections109.Output
						items1.InputWef.Connections[connectionsCount54].Pipeline = connections109.Pipeline
					}
				}
				items1.InputWef.Description = types.StringPointerValue(itemsItem.InputWef.Description)
				items1.InputWef.Disabled = types.BoolPointerValue(itemsItem.InputWef.Disabled)
				items1.InputWef.EnableHealthCheck = types.BoolPointerValue(itemsItem.InputWef.EnableHealthCheck)
				items1.InputWef.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputWef.EnableProxyHeader)
				items1.InputWef.Environment = types.StringPointerValue(itemsItem.InputWef.Environment)
				items1.InputWef.Host = types.StringPointerValue(itemsItem.InputWef.Host)
				items1.InputWef.ID = types.StringPointerValue(itemsItem.InputWef.ID)
				items1.InputWef.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputWef.IPAllowlistRegex)
				items1.InputWef.IPDenylistRegex = types.StringPointerValue(itemsItem.InputWef.IPDenylistRegex)
				if itemsItem.InputWef.KeepAliveTimeout != nil {
					items1.InputWef.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWef.KeepAliveTimeout)))
				} else {
					items1.InputWef.KeepAliveTimeout = types.NumberNull()
				}
				items1.InputWef.Keytab = types.StringPointerValue(itemsItem.InputWef.Keytab)
				if itemsItem.InputWef.MaxActiveReq != nil {
					items1.InputWef.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWef.MaxActiveReq)))
				} else {
					items1.InputWef.MaxActiveReq = types.NumberNull()
				}
				items1.InputWef.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputWef.MaxRequestsPerSocket)
				items1.InputWef.Metadata = []tfTypes.InputWefMetadata{}
				for metadataCount57, metadataItem57 := range itemsItem.InputWef.Metadata {
					var metadata116 tfTypes.InputWefMetadata
					metadata116.Name = types.StringValue(metadataItem57.Name)
					metadata116.Value = types.StringValue(metadataItem57.Value)
					if metadataCount57+1 > len(items1.InputWef.Metadata) {
						items1.InputWef.Metadata = append(items1.InputWef.Metadata, metadata116)
					} else {
						items1.InputWef.Metadata[metadataCount57].Name = metadata116.Name
						items1.InputWef.Metadata[metadataCount57].Value = metadata116.Value
					}
				}
				items1.InputWef.Pipeline = types.StringPointerValue(itemsItem.InputWef.Pipeline)
				if itemsItem.InputWef.Port != nil {
					items1.InputWef.Port = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWef.Port)))
				} else {
					items1.InputWef.Port = types.NumberNull()
				}
				if itemsItem.InputWef.Pq == nil {
					items1.InputWef.Pq = nil
				} else {
					items1.InputWef.Pq = &tfTypes.InputWefPq{}
					if itemsItem.InputWef.Pq.CommitFrequency != nil {
						items1.InputWef.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWef.Pq.CommitFrequency)))
					} else {
						items1.InputWef.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputWef.Pq.Compress != nil {
						items1.InputWef.Pq.Compress = types.StringValue(string(*itemsItem.InputWef.Pq.Compress))
					} else {
						items1.InputWef.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputWef.Pq.MaxBufferSize != nil {
						items1.InputWef.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWef.Pq.MaxBufferSize)))
					} else {
						items1.InputWef.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputWef.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputWef.Pq.MaxFileSize)
					items1.InputWef.Pq.MaxSize = types.StringPointerValue(itemsItem.InputWef.Pq.MaxSize)
					if itemsItem.InputWef.Pq.Mode != nil {
						items1.InputWef.Pq.Mode = types.StringValue(string(*itemsItem.InputWef.Pq.Mode))
					} else {
						items1.InputWef.Pq.Mode = types.StringNull()
					}
					items1.InputWef.Pq.Path = types.StringPointerValue(itemsItem.InputWef.Pq.Path)
				}
				items1.InputWef.PqEnabled = types.BoolPointerValue(itemsItem.InputWef.PqEnabled)
				items1.InputWef.Principal = types.StringPointerValue(itemsItem.InputWef.Principal)
				items1.InputWef.SendToRoutes = types.BoolPointerValue(itemsItem.InputWef.SendToRoutes)
				if itemsItem.InputWef.SocketTimeout != nil {
					items1.InputWef.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWef.SocketTimeout)))
				} else {
					items1.InputWef.SocketTimeout = types.NumberNull()
				}
				items1.InputWef.Streamtags = make([]types.String, 0, len(itemsItem.InputWef.Streamtags))
				for _, v := range itemsItem.InputWef.Streamtags {
					items1.InputWef.Streamtags = append(items1.InputWef.Streamtags, types.StringValue(v))
				}
				items1.InputWef.Subscriptions = []tfTypes.Subscriptions{}
				for subscriptionsCount, subscriptionsItem := range itemsItem.InputWef.Subscriptions {
					var subscriptions1 tfTypes.Subscriptions
					if subscriptionsItem.BatchTimeout != nil {
						subscriptions1.BatchTimeout = types.NumberValue(big.NewFloat(float64(*subscriptionsItem.BatchTimeout)))
					} else {
						subscriptions1.BatchTimeout = types.NumberNull()
					}
					subscriptions1.Compress = types.BoolPointerValue(subscriptionsItem.Compress)
					if subscriptionsItem.ContentFormat != nil {
						subscriptions1.ContentFormat = types.StringValue(string(*subscriptionsItem.ContentFormat))
					} else {
						subscriptions1.ContentFormat = types.StringNull()
					}
					if subscriptionsItem.HeartbeatInterval != nil {
						subscriptions1.HeartbeatInterval = types.NumberValue(big.NewFloat(float64(*subscriptionsItem.HeartbeatInterval)))
					} else {
						subscriptions1.HeartbeatInterval = types.NumberNull()
					}
					subscriptions1.Locale = types.StringPointerValue(subscriptionsItem.Locale)
					subscriptions1.Metadata = []tfTypes.InputWefSubscriptionsMetadata{}
					for metadataCount58, metadataItem58 := range subscriptionsItem.Metadata {
						var metadata118 tfTypes.InputWefSubscriptionsMetadata
						metadata118.Name = types.StringValue(metadataItem58.Name)
						metadata118.Value = types.StringValue(metadataItem58.Value)
						if metadataCount58+1 > len(subscriptions1.Metadata) {
							subscriptions1.Metadata = append(subscriptions1.Metadata, metadata118)
						} else {
							subscriptions1.Metadata[metadataCount58].Name = metadata118.Name
							subscriptions1.Metadata[metadataCount58].Value = metadata118.Value
						}
					}
					if subscriptionsItem.QuerySelector != nil {
						subscriptions1.QuerySelector = types.StringValue(string(*subscriptionsItem.QuerySelector))
					} else {
						subscriptions1.QuerySelector = types.StringNull()
					}
					subscriptions1.ReadExistingEvents = types.BoolPointerValue(subscriptionsItem.ReadExistingEvents)
					subscriptions1.SendBookmarks = types.BoolPointerValue(subscriptionsItem.SendBookmarks)
					subscriptions1.SubscriptionName = types.StringValue(subscriptionsItem.SubscriptionName)
					subscriptions1.Targets = make([]types.String, 0, len(subscriptionsItem.Targets))
					for _, v := range subscriptionsItem.Targets {
						subscriptions1.Targets = append(subscriptions1.Targets, types.StringValue(v))
					}
					subscriptions1.Version = types.StringPointerValue(subscriptionsItem.Version)
					if subscriptionsCount+1 > len(items1.InputWef.Subscriptions) {
						items1.InputWef.Subscriptions = append(items1.InputWef.Subscriptions, subscriptions1)
					} else {
						items1.InputWef.Subscriptions[subscriptionsCount].BatchTimeout = subscriptions1.BatchTimeout
						items1.InputWef.Subscriptions[subscriptionsCount].Compress = subscriptions1.Compress
						items1.InputWef.Subscriptions[subscriptionsCount].ContentFormat = subscriptions1.ContentFormat
						items1.InputWef.Subscriptions[subscriptionsCount].HeartbeatInterval = subscriptions1.HeartbeatInterval
						items1.InputWef.Subscriptions[subscriptionsCount].Locale = subscriptions1.Locale
						items1.InputWef.Subscriptions[subscriptionsCount].Metadata = subscriptions1.Metadata
						items1.InputWef.Subscriptions[subscriptionsCount].QuerySelector = subscriptions1.QuerySelector
						items1.InputWef.Subscriptions[subscriptionsCount].ReadExistingEvents = subscriptions1.ReadExistingEvents
						items1.InputWef.Subscriptions[subscriptionsCount].SendBookmarks = subscriptions1.SendBookmarks
						items1.InputWef.Subscriptions[subscriptionsCount].SubscriptionName = subscriptions1.SubscriptionName
						items1.InputWef.Subscriptions[subscriptionsCount].Targets = subscriptions1.Targets
						items1.InputWef.Subscriptions[subscriptionsCount].Version = subscriptions1.Version
					}
				}
				if itemsItem.InputWef.TLS == nil {
					items1.InputWef.TLS = nil
				} else {
					items1.InputWef.TLS = &tfTypes.MTLSSettings{}
					items1.InputWef.TLS.CaPath = types.StringValue(itemsItem.InputWef.TLS.CaPath)
					items1.InputWef.TLS.CertificateName = types.StringPointerValue(itemsItem.InputWef.TLS.CertificateName)
					items1.InputWef.TLS.CertPath = types.StringValue(itemsItem.InputWef.TLS.CertPath)
					items1.InputWef.TLS.CommonNameRegex = types.StringPointerValue(itemsItem.InputWef.TLS.CommonNameRegex)
					items1.InputWef.TLS.Disabled = types.BoolPointerValue(itemsItem.InputWef.TLS.Disabled)
					if itemsItem.InputWef.TLS.Keytab == nil {
						items1.InputWef.TLS.Keytab = types.StringNull()
					} else {
						keytabResult, _ := json.Marshal(itemsItem.InputWef.TLS.Keytab)
						items1.InputWef.TLS.Keytab = types.StringValue(string(keytabResult))
					}
					if itemsItem.InputWef.TLS.MaxVersion != nil {
						items1.InputWef.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputWef.TLS.MaxVersion))
					} else {
						items1.InputWef.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputWef.TLS.MinVersion != nil {
						items1.InputWef.TLS.MinVersion = types.StringValue(string(*itemsItem.InputWef.TLS.MinVersion))
					} else {
						items1.InputWef.TLS.MinVersion = types.StringNull()
					}
					items1.InputWef.TLS.OcspCheck = types.BoolPointerValue(itemsItem.InputWef.TLS.OcspCheck)
					items1.InputWef.TLS.OcspCheckFailClose = types.BoolPointerValue(itemsItem.InputWef.TLS.OcspCheckFailClose)
					items1.InputWef.TLS.Passphrase = types.StringPointerValue(itemsItem.InputWef.TLS.Passphrase)
					if itemsItem.InputWef.TLS.Principal == nil {
						items1.InputWef.TLS.Principal = types.StringNull()
					} else {
						principalResult, _ := json.Marshal(itemsItem.InputWef.TLS.Principal)
						items1.InputWef.TLS.Principal = types.StringValue(string(principalResult))
					}
					items1.InputWef.TLS.PrivKeyPath = types.StringValue(itemsItem.InputWef.TLS.PrivKeyPath)
					items1.InputWef.TLS.RejectUnauthorized = types.BoolPointerValue(itemsItem.InputWef.TLS.RejectUnauthorized)
					items1.InputWef.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputWef.TLS.RequestCert)
				}
				if itemsItem.InputWef.Type != nil {
					items1.InputWef.Type = types.StringValue(string(*itemsItem.InputWef.Type))
				} else {
					items1.InputWef.Type = types.StringNull()
				}
			}
			if itemsItem.InputWindowsMetrics != nil {
				items1.InputWindowsMetrics = &tfTypes.InputWindowsMetrics{}
				items1.InputWindowsMetrics.Connections = []tfTypes.InputWindowsMetricsConnections{}
				for connectionsCount55, connectionsItem55 := range itemsItem.InputWindowsMetrics.Connections {
					var connections111 tfTypes.InputWindowsMetricsConnections
					connections111.Output = types.StringValue(connectionsItem55.Output)
					connections111.Pipeline = types.StringPointerValue(connectionsItem55.Pipeline)
					if connectionsCount55+1 > len(items1.InputWindowsMetrics.Connections) {
						items1.InputWindowsMetrics.Connections = append(items1.InputWindowsMetrics.Connections, connections111)
					} else {
						items1.InputWindowsMetrics.Connections[connectionsCount55].Output = connections111.Output
						items1.InputWindowsMetrics.Connections[connectionsCount55].Pipeline = connections111.Pipeline
					}
				}
				items1.InputWindowsMetrics.Description = types.StringPointerValue(itemsItem.InputWindowsMetrics.Description)
				items1.InputWindowsMetrics.Disabled = types.BoolPointerValue(itemsItem.InputWindowsMetrics.Disabled)
				items1.InputWindowsMetrics.DisableNativeModule = types.BoolPointerValue(itemsItem.InputWindowsMetrics.DisableNativeModule)
				items1.InputWindowsMetrics.Environment = types.StringPointerValue(itemsItem.InputWindowsMetrics.Environment)
				if itemsItem.InputWindowsMetrics.Host == nil {
					items1.InputWindowsMetrics.Host = nil
				} else {
					items1.InputWindowsMetrics.Host = &tfTypes.InputWindowsMetricsHost{}
					if itemsItem.InputWindowsMetrics.Host.Custom == nil {
						items1.InputWindowsMetrics.Host.Custom = nil
					} else {
						items1.InputWindowsMetrics.Host.Custom = &tfTypes.InputWindowsMetricsCustom{}
						if itemsItem.InputWindowsMetrics.Host.Custom.CPU == nil {
							items1.InputWindowsMetrics.Host.Custom.CPU = nil
						} else {
							items1.InputWindowsMetrics.Host.Custom.CPU = &tfTypes.InputWindowsMetricsCPU{}
							items1.InputWindowsMetrics.Host.Custom.CPU.Detail = types.BoolPointerValue(itemsItem.InputWindowsMetrics.Host.Custom.CPU.Detail)
							if itemsItem.InputWindowsMetrics.Host.Custom.CPU.Mode != nil {
								items1.InputWindowsMetrics.Host.Custom.CPU.Mode = types.StringValue(string(*itemsItem.InputWindowsMetrics.Host.Custom.CPU.Mode))
							} else {
								items1.InputWindowsMetrics.Host.Custom.CPU.Mode = types.StringNull()
							}
							items1.InputWindowsMetrics.Host.Custom.CPU.PerCPU = types.BoolPointerValue(itemsItem.InputWindowsMetrics.Host.Custom.CPU.PerCPU)
							items1.InputWindowsMetrics.Host.Custom.CPU.Time = types.BoolPointerValue(itemsItem.InputWindowsMetrics.Host.Custom.CPU.Time)
						}
						if itemsItem.InputWindowsMetrics.Host.Custom.Disk == nil {
							items1.InputWindowsMetrics.Host.Custom.Disk = nil
						} else {
							items1.InputWindowsMetrics.Host.Custom.Disk = &tfTypes.InputWindowsMetricsDisk{}
							if itemsItem.InputWindowsMetrics.Host.Custom.Disk.Mode != nil {
								items1.InputWindowsMetrics.Host.Custom.Disk.Mode = types.StringValue(string(*itemsItem.InputWindowsMetrics.Host.Custom.Disk.Mode))
							} else {
								items1.InputWindowsMetrics.Host.Custom.Disk.Mode = types.StringNull()
							}
							items1.InputWindowsMetrics.Host.Custom.Disk.PerVolume = types.BoolPointerValue(itemsItem.InputWindowsMetrics.Host.Custom.Disk.PerVolume)
							items1.InputWindowsMetrics.Host.Custom.Disk.Volumes = make([]types.String, 0, len(itemsItem.InputWindowsMetrics.Host.Custom.Disk.Volumes))
							for _, v := range itemsItem.InputWindowsMetrics.Host.Custom.Disk.Volumes {
								items1.InputWindowsMetrics.Host.Custom.Disk.Volumes = append(items1.InputWindowsMetrics.Host.Custom.Disk.Volumes, types.StringValue(v))
							}
						}
						if itemsItem.InputWindowsMetrics.Host.Custom.Memory == nil {
							items1.InputWindowsMetrics.Host.Custom.Memory = nil
						} else {
							items1.InputWindowsMetrics.Host.Custom.Memory = &tfTypes.InputWindowsMetricsMemory{}
							items1.InputWindowsMetrics.Host.Custom.Memory.Detail = types.BoolPointerValue(itemsItem.InputWindowsMetrics.Host.Custom.Memory.Detail)
							if itemsItem.InputWindowsMetrics.Host.Custom.Memory.Mode != nil {
								items1.InputWindowsMetrics.Host.Custom.Memory.Mode = types.StringValue(string(*itemsItem.InputWindowsMetrics.Host.Custom.Memory.Mode))
							} else {
								items1.InputWindowsMetrics.Host.Custom.Memory.Mode = types.StringNull()
							}
						}
						if itemsItem.InputWindowsMetrics.Host.Custom.Network == nil {
							items1.InputWindowsMetrics.Host.Custom.Network = nil
						} else {
							items1.InputWindowsMetrics.Host.Custom.Network = &tfTypes.InputWindowsMetricsNetwork{}
							items1.InputWindowsMetrics.Host.Custom.Network.Detail = types.BoolPointerValue(itemsItem.InputWindowsMetrics.Host.Custom.Network.Detail)
							items1.InputWindowsMetrics.Host.Custom.Network.Devices = make([]types.String, 0, len(itemsItem.InputWindowsMetrics.Host.Custom.Network.Devices))
							for _, v := range itemsItem.InputWindowsMetrics.Host.Custom.Network.Devices {
								items1.InputWindowsMetrics.Host.Custom.Network.Devices = append(items1.InputWindowsMetrics.Host.Custom.Network.Devices, types.StringValue(v))
							}
							if itemsItem.InputWindowsMetrics.Host.Custom.Network.Mode != nil {
								items1.InputWindowsMetrics.Host.Custom.Network.Mode = types.StringValue(string(*itemsItem.InputWindowsMetrics.Host.Custom.Network.Mode))
							} else {
								items1.InputWindowsMetrics.Host.Custom.Network.Mode = types.StringNull()
							}
							items1.InputWindowsMetrics.Host.Custom.Network.PerInterface = types.BoolPointerValue(itemsItem.InputWindowsMetrics.Host.Custom.Network.PerInterface)
						}
						if itemsItem.InputWindowsMetrics.Host.Custom.System == nil {
							items1.InputWindowsMetrics.Host.Custom.System = nil
						} else {
							items1.InputWindowsMetrics.Host.Custom.System = &tfTypes.InputWindowsMetricsSystem{}
							items1.InputWindowsMetrics.Host.Custom.System.Detail = types.BoolPointerValue(itemsItem.InputWindowsMetrics.Host.Custom.System.Detail)
							if itemsItem.InputWindowsMetrics.Host.Custom.System.Mode != nil {
								items1.InputWindowsMetrics.Host.Custom.System.Mode = types.StringValue(string(*itemsItem.InputWindowsMetrics.Host.Custom.System.Mode))
							} else {
								items1.InputWindowsMetrics.Host.Custom.System.Mode = types.StringNull()
							}
						}
					}
					if itemsItem.InputWindowsMetrics.Host.Mode != nil {
						items1.InputWindowsMetrics.Host.Mode = types.StringValue(string(*itemsItem.InputWindowsMetrics.Host.Mode))
					} else {
						items1.InputWindowsMetrics.Host.Mode = types.StringNull()
					}
				}
				items1.InputWindowsMetrics.ID = types.StringValue(itemsItem.InputWindowsMetrics.ID)
				if itemsItem.InputWindowsMetrics.Interval != nil {
					items1.InputWindowsMetrics.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWindowsMetrics.Interval)))
				} else {
					items1.InputWindowsMetrics.Interval = types.NumberNull()
				}
				items1.InputWindowsMetrics.Metadata = []tfTypes.InputWindowsMetricsMetadata{}
				for metadataCount59, metadataItem59 := range itemsItem.InputWindowsMetrics.Metadata {
					var metadata120 tfTypes.InputWindowsMetricsMetadata
					metadata120.Name = types.StringValue(metadataItem59.Name)
					metadata120.Value = types.StringValue(metadataItem59.Value)
					if metadataCount59+1 > len(items1.InputWindowsMetrics.Metadata) {
						items1.InputWindowsMetrics.Metadata = append(items1.InputWindowsMetrics.Metadata, metadata120)
					} else {
						items1.InputWindowsMetrics.Metadata[metadataCount59].Name = metadata120.Name
						items1.InputWindowsMetrics.Metadata[metadataCount59].Value = metadata120.Value
					}
				}
				if itemsItem.InputWindowsMetrics.Persistence == nil {
					items1.InputWindowsMetrics.Persistence = nil
				} else {
					items1.InputWindowsMetrics.Persistence = &tfTypes.InputWindowsMetricsPersistence{}
					if itemsItem.InputWindowsMetrics.Persistence.Compress != nil {
						items1.InputWindowsMetrics.Persistence.Compress = types.StringValue(string(*itemsItem.InputWindowsMetrics.Persistence.Compress))
					} else {
						items1.InputWindowsMetrics.Persistence.Compress = types.StringNull()
					}
					items1.InputWindowsMetrics.Persistence.DestPath = types.StringPointerValue(itemsItem.InputWindowsMetrics.Persistence.DestPath)
					items1.InputWindowsMetrics.Persistence.Enable = types.BoolPointerValue(itemsItem.InputWindowsMetrics.Persistence.Enable)
					items1.InputWindowsMetrics.Persistence.MaxDataSize = types.StringPointerValue(itemsItem.InputWindowsMetrics.Persistence.MaxDataSize)
					items1.InputWindowsMetrics.Persistence.MaxDataTime = types.StringPointerValue(itemsItem.InputWindowsMetrics.Persistence.MaxDataTime)
					items1.InputWindowsMetrics.Persistence.TimeWindow = types.StringPointerValue(itemsItem.InputWindowsMetrics.Persistence.TimeWindow)
				}
				items1.InputWindowsMetrics.Pipeline = types.StringPointerValue(itemsItem.InputWindowsMetrics.Pipeline)
				if itemsItem.InputWindowsMetrics.Pq == nil {
					items1.InputWindowsMetrics.Pq = nil
				} else {
					items1.InputWindowsMetrics.Pq = &tfTypes.InputWindowsMetricsPq{}
					if itemsItem.InputWindowsMetrics.Pq.CommitFrequency != nil {
						items1.InputWindowsMetrics.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWindowsMetrics.Pq.CommitFrequency)))
					} else {
						items1.InputWindowsMetrics.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputWindowsMetrics.Pq.Compress != nil {
						items1.InputWindowsMetrics.Pq.Compress = types.StringValue(string(*itemsItem.InputWindowsMetrics.Pq.Compress))
					} else {
						items1.InputWindowsMetrics.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputWindowsMetrics.Pq.MaxBufferSize != nil {
						items1.InputWindowsMetrics.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWindowsMetrics.Pq.MaxBufferSize)))
					} else {
						items1.InputWindowsMetrics.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputWindowsMetrics.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputWindowsMetrics.Pq.MaxFileSize)
					items1.InputWindowsMetrics.Pq.MaxSize = types.StringPointerValue(itemsItem.InputWindowsMetrics.Pq.MaxSize)
					if itemsItem.InputWindowsMetrics.Pq.Mode != nil {
						items1.InputWindowsMetrics.Pq.Mode = types.StringValue(string(*itemsItem.InputWindowsMetrics.Pq.Mode))
					} else {
						items1.InputWindowsMetrics.Pq.Mode = types.StringNull()
					}
					items1.InputWindowsMetrics.Pq.Path = types.StringPointerValue(itemsItem.InputWindowsMetrics.Pq.Path)
				}
				items1.InputWindowsMetrics.PqEnabled = types.BoolPointerValue(itemsItem.InputWindowsMetrics.PqEnabled)
				if itemsItem.InputWindowsMetrics.Process == nil {
					items1.InputWindowsMetrics.Process = nil
				} else {
					items1.InputWindowsMetrics.Process = &tfTypes.InputWindowsMetricsProcess{}
					items1.InputWindowsMetrics.Process.Sets = []tfTypes.InputWindowsMetricsSets{}
					for setsCount1, setsItem1 := range itemsItem.InputWindowsMetrics.Process.Sets {
						var sets3 tfTypes.InputWindowsMetricsSets
						sets3.Filter = types.StringValue(setsItem1.Filter)
						sets3.IncludeChildren = types.BoolPointerValue(setsItem1.IncludeChildren)
						sets3.Name = types.StringValue(setsItem1.Name)
						if setsCount1+1 > len(items1.InputWindowsMetrics.Process.Sets) {
							items1.InputWindowsMetrics.Process.Sets = append(items1.InputWindowsMetrics.Process.Sets, sets3)
						} else {
							items1.InputWindowsMetrics.Process.Sets[setsCount1].Filter = sets3.Filter
							items1.InputWindowsMetrics.Process.Sets[setsCount1].IncludeChildren = sets3.IncludeChildren
							items1.InputWindowsMetrics.Process.Sets[setsCount1].Name = sets3.Name
						}
					}
				}
				items1.InputWindowsMetrics.SendToRoutes = types.BoolPointerValue(itemsItem.InputWindowsMetrics.SendToRoutes)
				items1.InputWindowsMetrics.Streamtags = make([]types.String, 0, len(itemsItem.InputWindowsMetrics.Streamtags))
				for _, v := range itemsItem.InputWindowsMetrics.Streamtags {
					items1.InputWindowsMetrics.Streamtags = append(items1.InputWindowsMetrics.Streamtags, types.StringValue(v))
				}
				items1.InputWindowsMetrics.Type = types.StringValue(string(itemsItem.InputWindowsMetrics.Type))
			}
			if itemsItem.InputWinEventLogs != nil {
				items1.InputWinEventLogs = &tfTypes.InputWinEventLogs{}
				if itemsItem.InputWinEventLogs.BatchSize != nil {
					items1.InputWinEventLogs.BatchSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWinEventLogs.BatchSize)))
				} else {
					items1.InputWinEventLogs.BatchSize = types.NumberNull()
				}
				items1.InputWinEventLogs.Connections = []tfTypes.InputWinEventLogsConnections{}
				for connectionsCount56, connectionsItem56 := range itemsItem.InputWinEventLogs.Connections {
					var connections113 tfTypes.InputWinEventLogsConnections
					connections113.Output = types.StringValue(connectionsItem56.Output)
					connections113.Pipeline = types.StringPointerValue(connectionsItem56.Pipeline)
					if connectionsCount56+1 > len(items1.InputWinEventLogs.Connections) {
						items1.InputWinEventLogs.Connections = append(items1.InputWinEventLogs.Connections, connections113)
					} else {
						items1.InputWinEventLogs.Connections[connectionsCount56].Output = connections113.Output
						items1.InputWinEventLogs.Connections[connectionsCount56].Pipeline = connections113.Pipeline
					}
				}
				items1.InputWinEventLogs.Description = types.StringPointerValue(itemsItem.InputWinEventLogs.Description)
				items1.InputWinEventLogs.Disabled = types.BoolPointerValue(itemsItem.InputWinEventLogs.Disabled)
				items1.InputWinEventLogs.DisableNativeModule = types.BoolPointerValue(itemsItem.InputWinEventLogs.DisableNativeModule)
				items1.InputWinEventLogs.Environment = types.StringPointerValue(itemsItem.InputWinEventLogs.Environment)
				if itemsItem.InputWinEventLogs.EventFormat != nil {
					items1.InputWinEventLogs.EventFormat = types.StringValue(string(*itemsItem.InputWinEventLogs.EventFormat))
				} else {
					items1.InputWinEventLogs.EventFormat = types.StringNull()
				}
				items1.InputWinEventLogs.ID = types.StringPointerValue(itemsItem.InputWinEventLogs.ID)
				if itemsItem.InputWinEventLogs.Interval != nil {
					items1.InputWinEventLogs.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWinEventLogs.Interval)))
				} else {
					items1.InputWinEventLogs.Interval = types.NumberNull()
				}
				items1.InputWinEventLogs.LogNames = make([]types.String, 0, len(itemsItem.InputWinEventLogs.LogNames))
				for _, v := range itemsItem.InputWinEventLogs.LogNames {
					items1.InputWinEventLogs.LogNames = append(items1.InputWinEventLogs.LogNames, types.StringValue(v))
				}
				if itemsItem.InputWinEventLogs.MaxEventBytes != nil {
					items1.InputWinEventLogs.MaxEventBytes = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWinEventLogs.MaxEventBytes)))
				} else {
					items1.InputWinEventLogs.MaxEventBytes = types.NumberNull()
				}
				items1.InputWinEventLogs.Metadata = []tfTypes.InputWinEventLogsMetadata{}
				for metadataCount60, metadataItem60 := range itemsItem.InputWinEventLogs.Metadata {
					var metadata122 tfTypes.InputWinEventLogsMetadata
					metadata122.Name = types.StringValue(metadataItem60.Name)
					metadata122.Value = types.StringValue(metadataItem60.Value)
					if metadataCount60+1 > len(items1.InputWinEventLogs.Metadata) {
						items1.InputWinEventLogs.Metadata = append(items1.InputWinEventLogs.Metadata, metadata122)
					} else {
						items1.InputWinEventLogs.Metadata[metadataCount60].Name = metadata122.Name
						items1.InputWinEventLogs.Metadata[metadataCount60].Value = metadata122.Value
					}
				}
				items1.InputWinEventLogs.Pipeline = types.StringPointerValue(itemsItem.InputWinEventLogs.Pipeline)
				if itemsItem.InputWinEventLogs.Pq == nil {
					items1.InputWinEventLogs.Pq = nil
				} else {
					items1.InputWinEventLogs.Pq = &tfTypes.InputWinEventLogsPq{}
					if itemsItem.InputWinEventLogs.Pq.CommitFrequency != nil {
						items1.InputWinEventLogs.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWinEventLogs.Pq.CommitFrequency)))
					} else {
						items1.InputWinEventLogs.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputWinEventLogs.Pq.Compress != nil {
						items1.InputWinEventLogs.Pq.Compress = types.StringValue(string(*itemsItem.InputWinEventLogs.Pq.Compress))
					} else {
						items1.InputWinEventLogs.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputWinEventLogs.Pq.MaxBufferSize != nil {
						items1.InputWinEventLogs.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWinEventLogs.Pq.MaxBufferSize)))
					} else {
						items1.InputWinEventLogs.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputWinEventLogs.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputWinEventLogs.Pq.MaxFileSize)
					items1.InputWinEventLogs.Pq.MaxSize = types.StringPointerValue(itemsItem.InputWinEventLogs.Pq.MaxSize)
					if itemsItem.InputWinEventLogs.Pq.Mode != nil {
						items1.InputWinEventLogs.Pq.Mode = types.StringValue(string(*itemsItem.InputWinEventLogs.Pq.Mode))
					} else {
						items1.InputWinEventLogs.Pq.Mode = types.StringNull()
					}
					items1.InputWinEventLogs.Pq.Path = types.StringPointerValue(itemsItem.InputWinEventLogs.Pq.Path)
				}
				items1.InputWinEventLogs.PqEnabled = types.BoolPointerValue(itemsItem.InputWinEventLogs.PqEnabled)
				if itemsItem.InputWinEventLogs.ReadMode != nil {
					items1.InputWinEventLogs.ReadMode = types.StringValue(string(*itemsItem.InputWinEventLogs.ReadMode))
				} else {
					items1.InputWinEventLogs.ReadMode = types.StringNull()
				}
				items1.InputWinEventLogs.SendToRoutes = types.BoolPointerValue(itemsItem.InputWinEventLogs.SendToRoutes)
				items1.InputWinEventLogs.Streamtags = make([]types.String, 0, len(itemsItem.InputWinEventLogs.Streamtags))
				for _, v := range itemsItem.InputWinEventLogs.Streamtags {
					items1.InputWinEventLogs.Streamtags = append(items1.InputWinEventLogs.Streamtags, types.StringValue(v))
				}
				items1.InputWinEventLogs.Type = types.StringValue(string(itemsItem.InputWinEventLogs.Type))
			}
			if itemsItem.InputWiz != nil {
				items1.InputWiz = &tfTypes.InputWiz{}
				items1.InputWiz.AuthAudienceOverride = types.StringPointerValue(itemsItem.InputWiz.AuthAudienceOverride)
				if itemsItem.InputWiz.AuthType != nil {
					items1.InputWiz.AuthType = types.StringValue(string(*itemsItem.InputWiz.AuthType))
				} else {
					items1.InputWiz.AuthType = types.StringNull()
				}
				items1.InputWiz.AuthURL = types.StringValue(itemsItem.InputWiz.AuthURL)
				items1.InputWiz.ClientID = types.StringValue(itemsItem.InputWiz.ClientID)
				items1.InputWiz.ClientSecret = types.StringPointerValue(itemsItem.InputWiz.ClientSecret)
				items1.InputWiz.Connections = []tfTypes.InputWizConnections{}
				for connectionsCount57, connectionsItem57 := range itemsItem.InputWiz.Connections {
					var connections115 tfTypes.InputWizConnections
					connections115.Output = types.StringValue(connectionsItem57.Output)
					connections115.Pipeline = types.StringPointerValue(connectionsItem57.Pipeline)
					if connectionsCount57+1 > len(items1.InputWiz.Connections) {
						items1.InputWiz.Connections = append(items1.InputWiz.Connections, connections115)
					} else {
						items1.InputWiz.Connections[connectionsCount57].Output = connections115.Output
						items1.InputWiz.Connections[connectionsCount57].Pipeline = connections115.Pipeline
					}
				}
				items1.InputWiz.ContentConfig = []tfTypes.InputWizContentConfig{}
				for contentConfigCount2, contentConfigItem2 := range itemsItem.InputWiz.ContentConfig {
					var contentConfig5 tfTypes.InputWizContentConfig
					contentConfig5.ContentDescription = types.StringPointerValue(contentConfigItem2.ContentDescription)
					contentConfig5.ContentType = types.StringValue(contentConfigItem2.ContentType)
					contentConfig5.Enabled = types.BoolPointerValue(contentConfigItem2.Enabled)
					if contentConfigCount2+1 > len(items1.InputWiz.ContentConfig) {
						items1.InputWiz.ContentConfig = append(items1.InputWiz.ContentConfig, contentConfig5)
					} else {
						items1.InputWiz.ContentConfig[contentConfigCount2].ContentDescription = contentConfig5.ContentDescription
						items1.InputWiz.ContentConfig[contentConfigCount2].ContentType = contentConfig5.ContentType
						items1.InputWiz.ContentConfig[contentConfigCount2].Enabled = contentConfig5.Enabled
					}
				}
				items1.InputWiz.Description = types.StringPointerValue(itemsItem.InputWiz.Description)
				items1.InputWiz.Disabled = types.BoolPointerValue(itemsItem.InputWiz.Disabled)
				items1.InputWiz.Endpoint = types.StringPointerValue(itemsItem.InputWiz.Endpoint)
				items1.InputWiz.Environment = types.StringPointerValue(itemsItem.InputWiz.Environment)
				items1.InputWiz.ID = types.StringPointerValue(itemsItem.InputWiz.ID)
				if itemsItem.InputWiz.KeepAliveTime != nil {
					items1.InputWiz.KeepAliveTime = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWiz.KeepAliveTime)))
				} else {
					items1.InputWiz.KeepAliveTime = types.NumberNull()
				}
				if itemsItem.InputWiz.MaxMissedKeepAlives != nil {
					items1.InputWiz.MaxMissedKeepAlives = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWiz.MaxMissedKeepAlives)))
				} else {
					items1.InputWiz.MaxMissedKeepAlives = types.NumberNull()
				}
				items1.InputWiz.Metadata = []tfTypes.InputWizMetadata{}
				for metadataCount61, metadataItem61 := range itemsItem.InputWiz.Metadata {
					var metadata124 tfTypes.InputWizMetadata
					metadata124.Name = types.StringValue(metadataItem61.Name)
					metadata124.Value = types.StringValue(metadataItem61.Value)
					if metadataCount61+1 > len(items1.InputWiz.Metadata) {
						items1.InputWiz.Metadata = append(items1.InputWiz.Metadata, metadata124)
					} else {
						items1.InputWiz.Metadata[metadataCount61].Name = metadata124.Name
						items1.InputWiz.Metadata[metadataCount61].Value = metadata124.Value
					}
				}
				items1.InputWiz.Pipeline = types.StringPointerValue(itemsItem.InputWiz.Pipeline)
				if itemsItem.InputWiz.Pq == nil {
					items1.InputWiz.Pq = nil
				} else {
					items1.InputWiz.Pq = &tfTypes.InputWizPq{}
					if itemsItem.InputWiz.Pq.CommitFrequency != nil {
						items1.InputWiz.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWiz.Pq.CommitFrequency)))
					} else {
						items1.InputWiz.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputWiz.Pq.Compress != nil {
						items1.InputWiz.Pq.Compress = types.StringValue(string(*itemsItem.InputWiz.Pq.Compress))
					} else {
						items1.InputWiz.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputWiz.Pq.MaxBufferSize != nil {
						items1.InputWiz.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWiz.Pq.MaxBufferSize)))
					} else {
						items1.InputWiz.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputWiz.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputWiz.Pq.MaxFileSize)
					items1.InputWiz.Pq.MaxSize = types.StringPointerValue(itemsItem.InputWiz.Pq.MaxSize)
					if itemsItem.InputWiz.Pq.Mode != nil {
						items1.InputWiz.Pq.Mode = types.StringValue(string(*itemsItem.InputWiz.Pq.Mode))
					} else {
						items1.InputWiz.Pq.Mode = types.StringNull()
					}
					items1.InputWiz.Pq.Path = types.StringPointerValue(itemsItem.InputWiz.Pq.Path)
				}
				items1.InputWiz.PqEnabled = types.BoolPointerValue(itemsItem.InputWiz.PqEnabled)
				if itemsItem.InputWiz.RequestTimeout != nil {
					items1.InputWiz.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWiz.RequestTimeout)))
				} else {
					items1.InputWiz.RequestTimeout = types.NumberNull()
				}
				if itemsItem.InputWiz.RetryRules == nil {
					items1.InputWiz.RetryRules = nil
				} else {
					items1.InputWiz.RetryRules = &tfTypes.InputWizRetryRules{}
					items1.InputWiz.RetryRules.Codes = make([]types.Number, 0, len(itemsItem.InputWiz.RetryRules.Codes))
					for _, v := range itemsItem.InputWiz.RetryRules.Codes {
						items1.InputWiz.RetryRules.Codes = append(items1.InputWiz.RetryRules.Codes, types.NumberValue(big.NewFloat(float64(v))))
					}
					items1.InputWiz.RetryRules.EnableHeader = types.BoolPointerValue(itemsItem.InputWiz.RetryRules.EnableHeader)
					if itemsItem.InputWiz.RetryRules.Interval != nil {
						items1.InputWiz.RetryRules.Interval = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWiz.RetryRules.Interval)))
					} else {
						items1.InputWiz.RetryRules.Interval = types.NumberNull()
					}
					if itemsItem.InputWiz.RetryRules.Limit != nil {
						items1.InputWiz.RetryRules.Limit = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWiz.RetryRules.Limit)))
					} else {
						items1.InputWiz.RetryRules.Limit = types.NumberNull()
					}
					if itemsItem.InputWiz.RetryRules.Multiplier != nil {
						items1.InputWiz.RetryRules.Multiplier = types.NumberValue(big.NewFloat(float64(*itemsItem.InputWiz.RetryRules.Multiplier)))
					} else {
						items1.InputWiz.RetryRules.Multiplier = types.NumberNull()
					}
					items1.InputWiz.RetryRules.RetryConnectReset = types.BoolPointerValue(itemsItem.InputWiz.RetryRules.RetryConnectReset)
					items1.InputWiz.RetryRules.RetryConnectTimeout = types.BoolPointerValue(itemsItem.InputWiz.RetryRules.RetryConnectTimeout)
					if itemsItem.InputWiz.RetryRules.Type != nil {
						items1.InputWiz.RetryRules.Type = types.StringValue(string(*itemsItem.InputWiz.RetryRules.Type))
					} else {
						items1.InputWiz.RetryRules.Type = types.StringNull()
					}
				}
				items1.InputWiz.SendToRoutes = types.BoolPointerValue(itemsItem.InputWiz.SendToRoutes)
				items1.InputWiz.Streamtags = make([]types.String, 0, len(itemsItem.InputWiz.Streamtags))
				for _, v := range itemsItem.InputWiz.Streamtags {
					items1.InputWiz.Streamtags = append(items1.InputWiz.Streamtags, types.StringValue(v))
				}
				items1.InputWiz.TextSecret = types.StringPointerValue(itemsItem.InputWiz.TextSecret)
				items1.InputWiz.TTL = types.StringPointerValue(itemsItem.InputWiz.TTL)
				if itemsItem.InputWiz.Type != nil {
					items1.InputWiz.Type = types.StringValue(string(*itemsItem.InputWiz.Type))
				} else {
					items1.InputWiz.Type = types.StringNull()
				}
			}
			if itemsItem.InputZscalerHec != nil {
				items1.InputZscalerHec = &tfTypes.InputZscalerHec{}
				items1.InputZscalerHec.AccessControlAllowHeaders = make([]types.String, 0, len(itemsItem.InputZscalerHec.AccessControlAllowHeaders))
				for _, v := range itemsItem.InputZscalerHec.AccessControlAllowHeaders {
					items1.InputZscalerHec.AccessControlAllowHeaders = append(items1.InputZscalerHec.AccessControlAllowHeaders, types.StringValue(v))
				}
				items1.InputZscalerHec.AccessControlAllowOrigin = make([]types.String, 0, len(itemsItem.InputZscalerHec.AccessControlAllowOrigin))
				for _, v := range itemsItem.InputZscalerHec.AccessControlAllowOrigin {
					items1.InputZscalerHec.AccessControlAllowOrigin = append(items1.InputZscalerHec.AccessControlAllowOrigin, types.StringValue(v))
				}
				if itemsItem.InputZscalerHec.ActivityLogSampleRate != nil {
					items1.InputZscalerHec.ActivityLogSampleRate = types.NumberValue(big.NewFloat(float64(*itemsItem.InputZscalerHec.ActivityLogSampleRate)))
				} else {
					items1.InputZscalerHec.ActivityLogSampleRate = types.NumberNull()
				}
				items1.InputZscalerHec.AllowedIndexes = make([]types.String, 0, len(itemsItem.InputZscalerHec.AllowedIndexes))
				for _, v := range itemsItem.InputZscalerHec.AllowedIndexes {
					items1.InputZscalerHec.AllowedIndexes = append(items1.InputZscalerHec.AllowedIndexes, types.StringValue(v))
				}
				items1.InputZscalerHec.AuthTokens = []tfTypes.InputZscalerHecAuthTokens{}
				for authTokensCount2, authTokensItem2 := range itemsItem.InputZscalerHec.AuthTokens {
					var authTokens10 tfTypes.InputZscalerHecAuthTokens
					authTokens10.AllowedIndexesAtToken = make([]types.String, 0, len(authTokensItem2.AllowedIndexesAtToken))
					for _, v := range authTokensItem2.AllowedIndexesAtToken {
						authTokens10.AllowedIndexesAtToken = append(authTokens10.AllowedIndexesAtToken, types.StringValue(v))
					}
					if authTokensItem2.AuthType != nil {
						authTokens10.AuthType = types.StringValue(string(*authTokensItem2.AuthType))
					} else {
						authTokens10.AuthType = types.StringNull()
					}
					authTokens10.Description = types.StringPointerValue(authTokensItem2.Description)
					authTokens10.Enabled = types.BoolPointerValue(authTokensItem2.Enabled)
					authTokens10.Metadata = []tfTypes.InputZscalerHecAuthTokensMetadata{}
					for metadataCount62, metadataItem62 := range authTokensItem2.Metadata {
						var metadata126 tfTypes.InputZscalerHecAuthTokensMetadata
						metadata126.Name = types.StringValue(metadataItem62.Name)
						metadata126.Value = types.StringValue(metadataItem62.Value)
						if metadataCount62+1 > len(authTokens10.Metadata) {
							authTokens10.Metadata = append(authTokens10.Metadata, metadata126)
						} else {
							authTokens10.Metadata[metadataCount62].Name = metadata126.Name
							authTokens10.Metadata[metadataCount62].Value = metadata126.Value
						}
					}
					tokenResult1, _ := json.Marshal(authTokensItem2.Token)
					authTokens10.Token = types.StringValue(string(tokenResult1))
					if authTokensItem2.TokenSecret == nil {
						authTokens10.TokenSecret = types.StringNull()
					} else {
						tokenSecretResult1, _ := json.Marshal(authTokensItem2.TokenSecret)
						authTokens10.TokenSecret = types.StringValue(string(tokenSecretResult1))
					}
					if authTokensCount2+1 > len(items1.InputZscalerHec.AuthTokens) {
						items1.InputZscalerHec.AuthTokens = append(items1.InputZscalerHec.AuthTokens, authTokens10)
					} else {
						items1.InputZscalerHec.AuthTokens[authTokensCount2].AllowedIndexesAtToken = authTokens10.AllowedIndexesAtToken
						items1.InputZscalerHec.AuthTokens[authTokensCount2].AuthType = authTokens10.AuthType
						items1.InputZscalerHec.AuthTokens[authTokensCount2].Description = authTokens10.Description
						items1.InputZscalerHec.AuthTokens[authTokensCount2].Enabled = authTokens10.Enabled
						items1.InputZscalerHec.AuthTokens[authTokensCount2].Metadata = authTokens10.Metadata
						items1.InputZscalerHec.AuthTokens[authTokensCount2].Token = authTokens10.Token
						items1.InputZscalerHec.AuthTokens[authTokensCount2].TokenSecret = authTokens10.TokenSecret
					}
				}
				items1.InputZscalerHec.CaptureHeaders = types.BoolPointerValue(itemsItem.InputZscalerHec.CaptureHeaders)
				items1.InputZscalerHec.Connections = []tfTypes.InputZscalerHecConnections{}
				for connectionsCount58, connectionsItem58 := range itemsItem.InputZscalerHec.Connections {
					var connections117 tfTypes.InputZscalerHecConnections
					connections117.Output = types.StringValue(connectionsItem58.Output)
					connections117.Pipeline = types.StringPointerValue(connectionsItem58.Pipeline)
					if connectionsCount58+1 > len(items1.InputZscalerHec.Connections) {
						items1.InputZscalerHec.Connections = append(items1.InputZscalerHec.Connections, connections117)
					} else {
						items1.InputZscalerHec.Connections[connectionsCount58].Output = connections117.Output
						items1.InputZscalerHec.Connections[connectionsCount58].Pipeline = connections117.Pipeline
					}
				}
				items1.InputZscalerHec.Description = types.StringPointerValue(itemsItem.InputZscalerHec.Description)
				items1.InputZscalerHec.Disabled = types.BoolPointerValue(itemsItem.InputZscalerHec.Disabled)
				items1.InputZscalerHec.EmitTokenMetrics = types.BoolPointerValue(itemsItem.InputZscalerHec.EmitTokenMetrics)
				if itemsItem.InputZscalerHec.EnableHealthCheck == nil {
					items1.InputZscalerHec.EnableHealthCheck = types.StringNull()
				} else {
					enableHealthCheckResult1, _ := json.Marshal(itemsItem.InputZscalerHec.EnableHealthCheck)
					items1.InputZscalerHec.EnableHealthCheck = types.StringValue(string(enableHealthCheckResult1))
				}
				items1.InputZscalerHec.EnableProxyHeader = types.BoolPointerValue(itemsItem.InputZscalerHec.EnableProxyHeader)
				items1.InputZscalerHec.Environment = types.StringPointerValue(itemsItem.InputZscalerHec.Environment)
				items1.InputZscalerHec.HecAcks = types.BoolPointerValue(itemsItem.InputZscalerHec.HecAcks)
				items1.InputZscalerHec.HecAPI = types.StringPointerValue(itemsItem.InputZscalerHec.HecAPI)
				items1.InputZscalerHec.Host = types.StringPointerValue(itemsItem.InputZscalerHec.Host)
				items1.InputZscalerHec.ID = types.StringPointerValue(itemsItem.InputZscalerHec.ID)
				items1.InputZscalerHec.IPAllowlistRegex = types.StringPointerValue(itemsItem.InputZscalerHec.IPAllowlistRegex)
				items1.InputZscalerHec.IPDenylistRegex = types.StringPointerValue(itemsItem.InputZscalerHec.IPDenylistRegex)
				if itemsItem.InputZscalerHec.KeepAliveTimeout != nil {
					items1.InputZscalerHec.KeepAliveTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputZscalerHec.KeepAliveTimeout)))
				} else {
					items1.InputZscalerHec.KeepAliveTimeout = types.NumberNull()
				}
				if itemsItem.InputZscalerHec.MaxActiveReq != nil {
					items1.InputZscalerHec.MaxActiveReq = types.NumberValue(big.NewFloat(float64(*itemsItem.InputZscalerHec.MaxActiveReq)))
				} else {
					items1.InputZscalerHec.MaxActiveReq = types.NumberNull()
				}
				items1.InputZscalerHec.MaxRequestsPerSocket = types.Int64PointerValue(itemsItem.InputZscalerHec.MaxRequestsPerSocket)
				items1.InputZscalerHec.Metadata = []tfTypes.InputZscalerHecMetadata{}
				for metadataCount63, metadataItem63 := range itemsItem.InputZscalerHec.Metadata {
					var metadata128 tfTypes.InputZscalerHecMetadata
					metadata128.Name = types.StringValue(metadataItem63.Name)
					metadata128.Value = types.StringValue(metadataItem63.Value)
					if metadataCount63+1 > len(items1.InputZscalerHec.Metadata) {
						items1.InputZscalerHec.Metadata = append(items1.InputZscalerHec.Metadata, metadata128)
					} else {
						items1.InputZscalerHec.Metadata[metadataCount63].Name = metadata128.Name
						items1.InputZscalerHec.Metadata[metadataCount63].Value = metadata128.Value
					}
				}
				items1.InputZscalerHec.Pipeline = types.StringPointerValue(itemsItem.InputZscalerHec.Pipeline)
				items1.InputZscalerHec.Port = types.NumberValue(big.NewFloat(float64(itemsItem.InputZscalerHec.Port)))
				if itemsItem.InputZscalerHec.Pq == nil {
					items1.InputZscalerHec.Pq = nil
				} else {
					items1.InputZscalerHec.Pq = &tfTypes.InputZscalerHecPq{}
					if itemsItem.InputZscalerHec.Pq.CommitFrequency != nil {
						items1.InputZscalerHec.Pq.CommitFrequency = types.NumberValue(big.NewFloat(float64(*itemsItem.InputZscalerHec.Pq.CommitFrequency)))
					} else {
						items1.InputZscalerHec.Pq.CommitFrequency = types.NumberNull()
					}
					if itemsItem.InputZscalerHec.Pq.Compress != nil {
						items1.InputZscalerHec.Pq.Compress = types.StringValue(string(*itemsItem.InputZscalerHec.Pq.Compress))
					} else {
						items1.InputZscalerHec.Pq.Compress = types.StringNull()
					}
					if itemsItem.InputZscalerHec.Pq.MaxBufferSize != nil {
						items1.InputZscalerHec.Pq.MaxBufferSize = types.NumberValue(big.NewFloat(float64(*itemsItem.InputZscalerHec.Pq.MaxBufferSize)))
					} else {
						items1.InputZscalerHec.Pq.MaxBufferSize = types.NumberNull()
					}
					items1.InputZscalerHec.Pq.MaxFileSize = types.StringPointerValue(itemsItem.InputZscalerHec.Pq.MaxFileSize)
					items1.InputZscalerHec.Pq.MaxSize = types.StringPointerValue(itemsItem.InputZscalerHec.Pq.MaxSize)
					if itemsItem.InputZscalerHec.Pq.Mode != nil {
						items1.InputZscalerHec.Pq.Mode = types.StringValue(string(*itemsItem.InputZscalerHec.Pq.Mode))
					} else {
						items1.InputZscalerHec.Pq.Mode = types.StringNull()
					}
					items1.InputZscalerHec.Pq.Path = types.StringPointerValue(itemsItem.InputZscalerHec.Pq.Path)
				}
				items1.InputZscalerHec.PqEnabled = types.BoolPointerValue(itemsItem.InputZscalerHec.PqEnabled)
				if itemsItem.InputZscalerHec.RequestTimeout != nil {
					items1.InputZscalerHec.RequestTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputZscalerHec.RequestTimeout)))
				} else {
					items1.InputZscalerHec.RequestTimeout = types.NumberNull()
				}
				items1.InputZscalerHec.SendToRoutes = types.BoolPointerValue(itemsItem.InputZscalerHec.SendToRoutes)
				if itemsItem.InputZscalerHec.SocketTimeout != nil {
					items1.InputZscalerHec.SocketTimeout = types.NumberValue(big.NewFloat(float64(*itemsItem.InputZscalerHec.SocketTimeout)))
				} else {
					items1.InputZscalerHec.SocketTimeout = types.NumberNull()
				}
				items1.InputZscalerHec.Streamtags = make([]types.String, 0, len(itemsItem.InputZscalerHec.Streamtags))
				for _, v := range itemsItem.InputZscalerHec.Streamtags {
					items1.InputZscalerHec.Streamtags = append(items1.InputZscalerHec.Streamtags, types.StringValue(v))
				}
				if itemsItem.InputZscalerHec.TLS == nil {
					items1.InputZscalerHec.TLS = nil
				} else {
					items1.InputZscalerHec.TLS = &tfTypes.InputZscalerHecTLSSettingsServerSide{}
					items1.InputZscalerHec.TLS.CaPath = types.StringPointerValue(itemsItem.InputZscalerHec.TLS.CaPath)
					items1.InputZscalerHec.TLS.CertificateName = types.StringPointerValue(itemsItem.InputZscalerHec.TLS.CertificateName)
					items1.InputZscalerHec.TLS.CertPath = types.StringPointerValue(itemsItem.InputZscalerHec.TLS.CertPath)
					if itemsItem.InputZscalerHec.TLS.CommonNameRegex == nil {
						items1.InputZscalerHec.TLS.CommonNameRegex = types.StringNull()
					} else {
						commonNameRegexResult21, _ := json.Marshal(itemsItem.InputZscalerHec.TLS.CommonNameRegex)
						items1.InputZscalerHec.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult21))
					}
					items1.InputZscalerHec.TLS.Disabled = types.BoolPointerValue(itemsItem.InputZscalerHec.TLS.Disabled)
					if itemsItem.InputZscalerHec.TLS.MaxVersion != nil {
						items1.InputZscalerHec.TLS.MaxVersion = types.StringValue(string(*itemsItem.InputZscalerHec.TLS.MaxVersion))
					} else {
						items1.InputZscalerHec.TLS.MaxVersion = types.StringNull()
					}
					if itemsItem.InputZscalerHec.TLS.MinVersion != nil {
						items1.InputZscalerHec.TLS.MinVersion = types.StringValue(string(*itemsItem.InputZscalerHec.TLS.MinVersion))
					} else {
						items1.InputZscalerHec.TLS.MinVersion = types.StringNull()
					}
					items1.InputZscalerHec.TLS.Passphrase = types.StringPointerValue(itemsItem.InputZscalerHec.TLS.Passphrase)
					items1.InputZscalerHec.TLS.PrivKeyPath = types.StringPointerValue(itemsItem.InputZscalerHec.TLS.PrivKeyPath)
					if itemsItem.InputZscalerHec.TLS.RejectUnauthorized == nil {
						items1.InputZscalerHec.TLS.RejectUnauthorized = types.StringNull()
					} else {
						rejectUnauthorizedResult21, _ := json.Marshal(itemsItem.InputZscalerHec.TLS.RejectUnauthorized)
						items1.InputZscalerHec.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult21))
					}
					items1.InputZscalerHec.TLS.RequestCert = types.BoolPointerValue(itemsItem.InputZscalerHec.TLS.RequestCert)
				}
				if itemsItem.InputZscalerHec.Type != nil {
					items1.InputZscalerHec.Type = types.StringValue(string(*itemsItem.InputZscalerHec.Type))
				} else {
					items1.InputZscalerHec.Type = types.StringNull()
				}
			}
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items1)
			} else {
				r.Items[itemsCount].InputAppscope = items1.InputAppscope
				r.Items[itemsCount].InputAzureBlob = items1.InputAzureBlob
				r.Items[itemsCount].InputCollection = items1.InputCollection
				r.Items[itemsCount].InputConfluentCloud = items1.InputConfluentCloud
				r.Items[itemsCount].InputCribl = items1.InputCribl
				r.Items[itemsCount].InputCriblHTTP = items1.InputCriblHTTP
				r.Items[itemsCount].InputCriblmetrics = items1.InputCriblmetrics
				r.Items[itemsCount].InputCriblTCP = items1.InputCriblTCP
				r.Items[itemsCount].InputCrowdstrike = items1.InputCrowdstrike
				r.Items[itemsCount].InputDatadogAgent = items1.InputDatadogAgent
				r.Items[itemsCount].InputDatagen = items1.InputDatagen
				r.Items[itemsCount].InputEdgePrometheus = items1.InputEdgePrometheus
				r.Items[itemsCount].InputElastic = items1.InputElastic
				r.Items[itemsCount].InputEventhub = items1.InputEventhub
				r.Items[itemsCount].InputExec = items1.InputExec
				r.Items[itemsCount].InputFile = items1.InputFile
				r.Items[itemsCount].InputFirehose = items1.InputFirehose
				r.Items[itemsCount].InputGooglePubsub = items1.InputGooglePubsub
				r.Items[itemsCount].InputGrafana = items1.InputGrafana
				r.Items[itemsCount].InputHTTP = items1.InputHTTP
				r.Items[itemsCount].InputHTTPRaw = items1.InputHTTPRaw
				r.Items[itemsCount].InputJournalFiles = items1.InputJournalFiles
				r.Items[itemsCount].InputKafka = items1.InputKafka
				r.Items[itemsCount].InputKinesis = items1.InputKinesis
				r.Items[itemsCount].InputKubeEvents = items1.InputKubeEvents
				r.Items[itemsCount].InputKubeLogs = items1.InputKubeLogs
				r.Items[itemsCount].InputKubeMetrics = items1.InputKubeMetrics
				r.Items[itemsCount].InputLoki = items1.InputLoki
				r.Items[itemsCount].InputMetrics = items1.InputMetrics
				r.Items[itemsCount].InputModelDrivenTelemetry = items1.InputModelDrivenTelemetry
				r.Items[itemsCount].InputMsk = items1.InputMsk
				r.Items[itemsCount].InputNetflow = items1.InputNetflow
				r.Items[itemsCount].InputOffice365Mgmt = items1.InputOffice365Mgmt
				r.Items[itemsCount].InputOffice365MsgTrace = items1.InputOffice365MsgTrace
				r.Items[itemsCount].InputOffice365Service = items1.InputOffice365Service
				r.Items[itemsCount].InputOpenTelemetry = items1.InputOpenTelemetry
				r.Items[itemsCount].InputPrometheus = items1.InputPrometheus
				r.Items[itemsCount].InputPrometheusRw = items1.InputPrometheusRw
				r.Items[itemsCount].InputRawUDP = items1.InputRawUDP
				r.Items[itemsCount].InputS3 = items1.InputS3
				r.Items[itemsCount].InputS3Inventory = items1.InputS3Inventory
				r.Items[itemsCount].InputSecurityLake = items1.InputSecurityLake
				r.Items[itemsCount].InputSnmp = items1.InputSnmp
				r.Items[itemsCount].InputSplunk = items1.InputSplunk
				r.Items[itemsCount].InputSplunkHec = items1.InputSplunkHec
				r.Items[itemsCount].InputSplunkSearch = items1.InputSplunkSearch
				r.Items[itemsCount].InputSqs = items1.InputSqs
				r.Items[itemsCount].InputSyslog = items1.InputSyslog
				r.Items[itemsCount].InputSystemMetrics = items1.InputSystemMetrics
				r.Items[itemsCount].InputSystemState = items1.InputSystemState
				r.Items[itemsCount].InputTCP = items1.InputTCP
				r.Items[itemsCount].InputTcpjson = items1.InputTcpjson
				r.Items[itemsCount].InputWef = items1.InputWef
				r.Items[itemsCount].InputWindowsMetrics = items1.InputWindowsMetrics
				r.Items[itemsCount].InputWinEventLogs = items1.InputWinEventLogs
				r.Items[itemsCount].InputWiz = items1.InputWiz
				r.Items[itemsCount].InputZscalerHec = items1.InputZscalerHec
			}
		}
	}
}
