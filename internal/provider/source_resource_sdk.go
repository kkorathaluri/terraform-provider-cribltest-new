// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-cribl-terraform/internal/provider/types"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/shared"
)

func (r *SourceResourceModel) ToSharedInput(ctx context.Context) (*shared.Input, diag.Diagnostics) {
	var diags diag.Diagnostics

	var out shared.Input
	var inputCollection *shared.InputCollection
	if r.InputCollection != nil {
		var id string
		id = r.InputCollection.ID.ValueString()

		typeVar := new(shared.InputCollectionType)
		if !r.InputCollection.Type.IsUnknown() && !r.InputCollection.Type.IsNull() {
			*typeVar = shared.InputCollectionType(r.InputCollection.Type.ValueString())
		} else {
			typeVar = nil
		}
		disabled := new(bool)
		if !r.InputCollection.Disabled.IsUnknown() && !r.InputCollection.Disabled.IsNull() {
			*disabled = r.InputCollection.Disabled.ValueBool()
		} else {
			disabled = nil
		}
		pipeline := new(string)
		if !r.InputCollection.Pipeline.IsUnknown() && !r.InputCollection.Pipeline.IsNull() {
			*pipeline = r.InputCollection.Pipeline.ValueString()
		} else {
			pipeline = nil
		}
		sendToRoutes := new(bool)
		if !r.InputCollection.SendToRoutes.IsUnknown() && !r.InputCollection.SendToRoutes.IsNull() {
			*sendToRoutes = r.InputCollection.SendToRoutes.ValueBool()
		} else {
			sendToRoutes = nil
		}
		environment := new(string)
		if !r.InputCollection.Environment.IsUnknown() && !r.InputCollection.Environment.IsNull() {
			*environment = r.InputCollection.Environment.ValueString()
		} else {
			environment = nil
		}
		pqEnabled := new(bool)
		if !r.InputCollection.PqEnabled.IsUnknown() && !r.InputCollection.PqEnabled.IsNull() {
			*pqEnabled = r.InputCollection.PqEnabled.ValueBool()
		} else {
			pqEnabled = nil
		}
		streamtags := make([]string, 0, len(r.InputCollection.Streamtags))
		for _, streamtagsItem := range r.InputCollection.Streamtags {
			streamtags = append(streamtags, streamtagsItem.ValueString())
		}
		connections := make([]shared.Connections, 0, len(r.InputCollection.Connections))
		for _, connectionsItem := range r.InputCollection.Connections {
			pipeline1 := new(string)
			if !connectionsItem.Pipeline.IsUnknown() && !connectionsItem.Pipeline.IsNull() {
				*pipeline1 = connectionsItem.Pipeline.ValueString()
			} else {
				pipeline1 = nil
			}
			var output string
			output = connectionsItem.Output.ValueString()

			connections = append(connections, shared.Connections{
				Pipeline: pipeline1,
				Output:   output,
			})
		}
		var pq *shared.Pq
		if r.InputCollection.Pq != nil {
			mode := new(shared.InputCollectionMode)
			if !r.InputCollection.Pq.Mode.IsUnknown() && !r.InputCollection.Pq.Mode.IsNull() {
				*mode = shared.InputCollectionMode(r.InputCollection.Pq.Mode.ValueString())
			} else {
				mode = nil
			}
			maxBufferSize := new(float64)
			if !r.InputCollection.Pq.MaxBufferSize.IsUnknown() && !r.InputCollection.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize = r.InputCollection.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize = nil
			}
			commitFrequency := new(float64)
			if !r.InputCollection.Pq.CommitFrequency.IsUnknown() && !r.InputCollection.Pq.CommitFrequency.IsNull() {
				*commitFrequency = r.InputCollection.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency = nil
			}
			maxFileSize := new(string)
			if !r.InputCollection.Pq.MaxFileSize.IsUnknown() && !r.InputCollection.Pq.MaxFileSize.IsNull() {
				*maxFileSize = r.InputCollection.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize = nil
			}
			maxSize := new(string)
			if !r.InputCollection.Pq.MaxSize.IsUnknown() && !r.InputCollection.Pq.MaxSize.IsNull() {
				*maxSize = r.InputCollection.Pq.MaxSize.ValueString()
			} else {
				maxSize = nil
			}
			path := new(string)
			if !r.InputCollection.Pq.Path.IsUnknown() && !r.InputCollection.Pq.Path.IsNull() {
				*path = r.InputCollection.Pq.Path.ValueString()
			} else {
				path = nil
			}
			compress := new(shared.InputCollectionCompression)
			if !r.InputCollection.Pq.Compress.IsUnknown() && !r.InputCollection.Pq.Compress.IsNull() {
				*compress = shared.InputCollectionCompression(r.InputCollection.Pq.Compress.ValueString())
			} else {
				compress = nil
			}
			pq = &shared.Pq{
				Mode:            mode,
				MaxBufferSize:   maxBufferSize,
				CommitFrequency: commitFrequency,
				MaxFileSize:     maxFileSize,
				MaxSize:         maxSize,
				Path:            path,
				Compress:        compress,
			}
		}
		breakerRulesets := make([]string, 0, len(r.InputCollection.BreakerRulesets))
		for _, breakerRulesetsItem := range r.InputCollection.BreakerRulesets {
			breakerRulesets = append(breakerRulesets, breakerRulesetsItem.ValueString())
		}
		staleChannelFlushMs := new(float64)
		if !r.InputCollection.StaleChannelFlushMs.IsUnknown() && !r.InputCollection.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs = r.InputCollection.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs = nil
		}
		var preprocess *shared.InputCollectionPreprocess
		if r.InputCollection.Preprocess != nil {
			disabled1 := new(bool)
			if !r.InputCollection.Preprocess.Disabled.IsUnknown() && !r.InputCollection.Preprocess.Disabled.IsNull() {
				*disabled1 = r.InputCollection.Preprocess.Disabled.ValueBool()
			} else {
				disabled1 = nil
			}
			command := new(string)
			if !r.InputCollection.Preprocess.Command.IsUnknown() && !r.InputCollection.Preprocess.Command.IsNull() {
				*command = r.InputCollection.Preprocess.Command.ValueString()
			} else {
				command = nil
			}
			args := make([]string, 0, len(r.InputCollection.Preprocess.Args))
			for _, argsItem := range r.InputCollection.Preprocess.Args {
				args = append(args, argsItem.ValueString())
			}
			preprocess = &shared.InputCollectionPreprocess{
				Disabled: disabled1,
				Command:  command,
				Args:     args,
			}
		}
		throttleRatePerSec := new(string)
		if !r.InputCollection.ThrottleRatePerSec.IsUnknown() && !r.InputCollection.ThrottleRatePerSec.IsNull() {
			*throttleRatePerSec = r.InputCollection.ThrottleRatePerSec.ValueString()
		} else {
			throttleRatePerSec = nil
		}
		metadata := make([]shared.InputCollectionMetadata, 0, len(r.InputCollection.Metadata))
		for _, metadataItem := range r.InputCollection.Metadata {
			var name string
			name = metadataItem.Name.ValueString()

			var value string
			value = metadataItem.Value.ValueString()

			metadata = append(metadata, shared.InputCollectionMetadata{
				Name:  name,
				Value: value,
			})
		}
		output1 := new(string)
		if !r.InputCollection.Output.IsUnknown() && !r.InputCollection.Output.IsNull() {
			*output1 = r.InputCollection.Output.ValueString()
		} else {
			output1 = nil
		}
		var status *shared.TFStatus
		if r.InputCollection.Status != nil {
			health := shared.Health(r.InputCollection.Status.Health.ValueString())
			metrics := make(map[string]interface{})
			for metricsKey, metricsValue := range r.InputCollection.Status.Metrics {
				var metricsInst interface{}
				_ = json.Unmarshal([]byte(metricsValue.ValueString()), &metricsInst)
				metrics[metricsKey] = metricsInst
			}
			var timestamp float64
			timestamp = r.InputCollection.Status.Timestamp.ValueFloat64()

			useStatusFromLB := new(bool)
			if !r.InputCollection.Status.UseStatusFromLB.IsUnknown() && !r.InputCollection.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLB = r.InputCollection.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLB = nil
			}
			status = &shared.TFStatus{
				Health:          health,
				Metrics:         metrics,
				Timestamp:       timestamp,
				UseStatusFromLB: useStatusFromLB,
			}
		}
		inputCollection = &shared.InputCollection{
			ID:                  id,
			Type:                typeVar,
			Disabled:            disabled,
			Pipeline:            pipeline,
			SendToRoutes:        sendToRoutes,
			Environment:         environment,
			PqEnabled:           pqEnabled,
			Streamtags:          streamtags,
			Connections:         connections,
			Pq:                  pq,
			BreakerRulesets:     breakerRulesets,
			StaleChannelFlushMs: staleChannelFlushMs,
			Preprocess:          preprocess,
			ThrottleRatePerSec:  throttleRatePerSec,
			Metadata:            metadata,
			Output:              output1,
			Status:              status,
		}
	}
	if inputCollection != nil {
		out = shared.Input{
			InputCollection: inputCollection,
		}
	}
	var inputKafka *shared.InputKafka
	if r.InputKafka != nil {
		id1 := new(string)
		if !r.InputKafka.ID.IsUnknown() && !r.InputKafka.ID.IsNull() {
			*id1 = r.InputKafka.ID.ValueString()
		} else {
			id1 = nil
		}
		typeVar1 := new(shared.InputKafkaType)
		if !r.InputKafka.Type.IsUnknown() && !r.InputKafka.Type.IsNull() {
			*typeVar1 = shared.InputKafkaType(r.InputKafka.Type.ValueString())
		} else {
			typeVar1 = nil
		}
		disabled2 := new(bool)
		if !r.InputKafka.Disabled.IsUnknown() && !r.InputKafka.Disabled.IsNull() {
			*disabled2 = r.InputKafka.Disabled.ValueBool()
		} else {
			disabled2 = nil
		}
		pipeline2 := new(string)
		if !r.InputKafka.Pipeline.IsUnknown() && !r.InputKafka.Pipeline.IsNull() {
			*pipeline2 = r.InputKafka.Pipeline.ValueString()
		} else {
			pipeline2 = nil
		}
		sendToRoutes1 := new(bool)
		if !r.InputKafka.SendToRoutes.IsUnknown() && !r.InputKafka.SendToRoutes.IsNull() {
			*sendToRoutes1 = r.InputKafka.SendToRoutes.ValueBool()
		} else {
			sendToRoutes1 = nil
		}
		environment1 := new(string)
		if !r.InputKafka.Environment.IsUnknown() && !r.InputKafka.Environment.IsNull() {
			*environment1 = r.InputKafka.Environment.ValueString()
		} else {
			environment1 = nil
		}
		pqEnabled1 := new(bool)
		if !r.InputKafka.PqEnabled.IsUnknown() && !r.InputKafka.PqEnabled.IsNull() {
			*pqEnabled1 = r.InputKafka.PqEnabled.ValueBool()
		} else {
			pqEnabled1 = nil
		}
		streamtags1 := make([]string, 0, len(r.InputKafka.Streamtags))
		for _, streamtagsItem1 := range r.InputKafka.Streamtags {
			streamtags1 = append(streamtags1, streamtagsItem1.ValueString())
		}
		connections1 := make([]shared.InputKafkaConnections, 0, len(r.InputKafka.Connections))
		for _, connectionsItem1 := range r.InputKafka.Connections {
			pipeline3 := new(string)
			if !connectionsItem1.Pipeline.IsUnknown() && !connectionsItem1.Pipeline.IsNull() {
				*pipeline3 = connectionsItem1.Pipeline.ValueString()
			} else {
				pipeline3 = nil
			}
			var output2 string
			output2 = connectionsItem1.Output.ValueString()

			connections1 = append(connections1, shared.InputKafkaConnections{
				Pipeline: pipeline3,
				Output:   output2,
			})
		}
		var pq1 *shared.InputKafkaPq
		if r.InputKafka.Pq != nil {
			mode1 := new(shared.InputKafkaMode)
			if !r.InputKafka.Pq.Mode.IsUnknown() && !r.InputKafka.Pq.Mode.IsNull() {
				*mode1 = shared.InputKafkaMode(r.InputKafka.Pq.Mode.ValueString())
			} else {
				mode1 = nil
			}
			maxBufferSize1 := new(float64)
			if !r.InputKafka.Pq.MaxBufferSize.IsUnknown() && !r.InputKafka.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize1 = r.InputKafka.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize1 = nil
			}
			commitFrequency1 := new(float64)
			if !r.InputKafka.Pq.CommitFrequency.IsUnknown() && !r.InputKafka.Pq.CommitFrequency.IsNull() {
				*commitFrequency1 = r.InputKafka.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency1 = nil
			}
			maxFileSize1 := new(string)
			if !r.InputKafka.Pq.MaxFileSize.IsUnknown() && !r.InputKafka.Pq.MaxFileSize.IsNull() {
				*maxFileSize1 = r.InputKafka.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize1 = nil
			}
			maxSize1 := new(string)
			if !r.InputKafka.Pq.MaxSize.IsUnknown() && !r.InputKafka.Pq.MaxSize.IsNull() {
				*maxSize1 = r.InputKafka.Pq.MaxSize.ValueString()
			} else {
				maxSize1 = nil
			}
			path1 := new(string)
			if !r.InputKafka.Pq.Path.IsUnknown() && !r.InputKafka.Pq.Path.IsNull() {
				*path1 = r.InputKafka.Pq.Path.ValueString()
			} else {
				path1 = nil
			}
			compress1 := new(shared.InputKafkaCompression)
			if !r.InputKafka.Pq.Compress.IsUnknown() && !r.InputKafka.Pq.Compress.IsNull() {
				*compress1 = shared.InputKafkaCompression(r.InputKafka.Pq.Compress.ValueString())
			} else {
				compress1 = nil
			}
			pq1 = &shared.InputKafkaPq{
				Mode:            mode1,
				MaxBufferSize:   maxBufferSize1,
				CommitFrequency: commitFrequency1,
				MaxFileSize:     maxFileSize1,
				MaxSize:         maxSize1,
				Path:            path1,
				Compress:        compress1,
			}
		}
		brokers := make([]string, 0, len(r.InputKafka.Brokers))
		for _, brokersItem := range r.InputKafka.Brokers {
			brokers = append(brokers, brokersItem.ValueString())
		}
		topics := make([]string, 0, len(r.InputKafka.Topics))
		for _, topicsItem := range r.InputKafka.Topics {
			topics = append(topics, topicsItem.ValueString())
		}
		groupID := new(string)
		if !r.InputKafka.GroupID.IsUnknown() && !r.InputKafka.GroupID.IsNull() {
			*groupID = r.InputKafka.GroupID.ValueString()
		} else {
			groupID = nil
		}
		fromBeginning := new(bool)
		if !r.InputKafka.FromBeginning.IsUnknown() && !r.InputKafka.FromBeginning.IsNull() {
			*fromBeginning = r.InputKafka.FromBeginning.ValueBool()
		} else {
			fromBeginning = nil
		}
		var kafkaSchemaRegistry *shared.KafkaSchemaRegistryAuthentication
		if r.InputKafka.KafkaSchemaRegistry != nil {
			disabled3 := new(bool)
			if !r.InputKafka.KafkaSchemaRegistry.Disabled.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.Disabled.IsNull() {
				*disabled3 = r.InputKafka.KafkaSchemaRegistry.Disabled.ValueBool()
			} else {
				disabled3 = nil
			}
			schemaRegistryURL := new(string)
			if !r.InputKafka.KafkaSchemaRegistry.SchemaRegistryURL.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.SchemaRegistryURL.IsNull() {
				*schemaRegistryURL = r.InputKafka.KafkaSchemaRegistry.SchemaRegistryURL.ValueString()
			} else {
				schemaRegistryURL = nil
			}
			connectionTimeout := new(float64)
			if !r.InputKafka.KafkaSchemaRegistry.ConnectionTimeout.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.ConnectionTimeout.IsNull() {
				*connectionTimeout = r.InputKafka.KafkaSchemaRegistry.ConnectionTimeout.ValueFloat64()
			} else {
				connectionTimeout = nil
			}
			requestTimeout := new(float64)
			if !r.InputKafka.KafkaSchemaRegistry.RequestTimeout.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.RequestTimeout.IsNull() {
				*requestTimeout = r.InputKafka.KafkaSchemaRegistry.RequestTimeout.ValueFloat64()
			} else {
				requestTimeout = nil
			}
			maxRetries := new(float64)
			if !r.InputKafka.KafkaSchemaRegistry.MaxRetries.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.MaxRetries.IsNull() {
				*maxRetries = r.InputKafka.KafkaSchemaRegistry.MaxRetries.ValueFloat64()
			} else {
				maxRetries = nil
			}
			var auth *shared.InputKafkaAuth
			if r.InputKafka.KafkaSchemaRegistry.Auth != nil {
				disabled4 := new(bool)
				if !r.InputKafka.KafkaSchemaRegistry.Auth.Disabled.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.Auth.Disabled.IsNull() {
					*disabled4 = r.InputKafka.KafkaSchemaRegistry.Auth.Disabled.ValueBool()
				} else {
					disabled4 = nil
				}
				credentialsSecret := new(string)
				if !r.InputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret.IsNull() {
					*credentialsSecret = r.InputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret = nil
				}
				auth = &shared.InputKafkaAuth{
					Disabled:          disabled4,
					CredentialsSecret: credentialsSecret,
				}
			}
			var tls *shared.InputKafkaTLSSettingsClientSide
			if r.InputKafka.KafkaSchemaRegistry.TLS != nil {
				disabled5 := new(bool)
				if !r.InputKafka.KafkaSchemaRegistry.TLS.Disabled.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.TLS.Disabled.IsNull() {
					*disabled5 = r.InputKafka.KafkaSchemaRegistry.TLS.Disabled.ValueBool()
				} else {
					disabled5 = nil
				}
				rejectUnauthorized := new(bool)
				if !r.InputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsNull() {
					*rejectUnauthorized = r.InputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized.ValueBool()
				} else {
					rejectUnauthorized = nil
				}
				servername := new(string)
				if !r.InputKafka.KafkaSchemaRegistry.TLS.Servername.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.TLS.Servername.IsNull() {
					*servername = r.InputKafka.KafkaSchemaRegistry.TLS.Servername.ValueString()
				} else {
					servername = nil
				}
				certificateName := new(string)
				if !r.InputKafka.KafkaSchemaRegistry.TLS.CertificateName.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.TLS.CertificateName.IsNull() {
					*certificateName = r.InputKafka.KafkaSchemaRegistry.TLS.CertificateName.ValueString()
				} else {
					certificateName = nil
				}
				caPath := new(string)
				if !r.InputKafka.KafkaSchemaRegistry.TLS.CaPath.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.TLS.CaPath.IsNull() {
					*caPath = r.InputKafka.KafkaSchemaRegistry.TLS.CaPath.ValueString()
				} else {
					caPath = nil
				}
				privKeyPath := new(string)
				if !r.InputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath.IsNull() {
					*privKeyPath = r.InputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath.ValueString()
				} else {
					privKeyPath = nil
				}
				certPath := new(string)
				if !r.InputKafka.KafkaSchemaRegistry.TLS.CertPath.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.TLS.CertPath.IsNull() {
					*certPath = r.InputKafka.KafkaSchemaRegistry.TLS.CertPath.ValueString()
				} else {
					certPath = nil
				}
				passphrase := new(string)
				if !r.InputKafka.KafkaSchemaRegistry.TLS.Passphrase.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.TLS.Passphrase.IsNull() {
					*passphrase = r.InputKafka.KafkaSchemaRegistry.TLS.Passphrase.ValueString()
				} else {
					passphrase = nil
				}
				minVersion := new(shared.InputKafkaMinimumTLSVersion)
				if !r.InputKafka.KafkaSchemaRegistry.TLS.MinVersion.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.TLS.MinVersion.IsNull() {
					*minVersion = shared.InputKafkaMinimumTLSVersion(r.InputKafka.KafkaSchemaRegistry.TLS.MinVersion.ValueString())
				} else {
					minVersion = nil
				}
				maxVersion := new(shared.InputKafkaMaximumTLSVersion)
				if !r.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion.IsUnknown() && !r.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion.IsNull() {
					*maxVersion = shared.InputKafkaMaximumTLSVersion(r.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion.ValueString())
				} else {
					maxVersion = nil
				}
				tls = &shared.InputKafkaTLSSettingsClientSide{
					Disabled:           disabled5,
					RejectUnauthorized: rejectUnauthorized,
					Servername:         servername,
					CertificateName:    certificateName,
					CaPath:             caPath,
					PrivKeyPath:        privKeyPath,
					CertPath:           certPath,
					Passphrase:         passphrase,
					MinVersion:         minVersion,
					MaxVersion:         maxVersion,
				}
			}
			kafkaSchemaRegistry = &shared.KafkaSchemaRegistryAuthentication{
				Disabled:          disabled3,
				SchemaRegistryURL: schemaRegistryURL,
				ConnectionTimeout: connectionTimeout,
				RequestTimeout:    requestTimeout,
				MaxRetries:        maxRetries,
				Auth:              auth,
				TLS:               tls,
			}
		}
		connectionTimeout1 := new(float64)
		if !r.InputKafka.ConnectionTimeout.IsUnknown() && !r.InputKafka.ConnectionTimeout.IsNull() {
			*connectionTimeout1 = r.InputKafka.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout1 = nil
		}
		requestTimeout1 := new(float64)
		if !r.InputKafka.RequestTimeout.IsUnknown() && !r.InputKafka.RequestTimeout.IsNull() {
			*requestTimeout1 = r.InputKafka.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout1 = nil
		}
		maxRetries1 := new(float64)
		if !r.InputKafka.MaxRetries.IsUnknown() && !r.InputKafka.MaxRetries.IsNull() {
			*maxRetries1 = r.InputKafka.MaxRetries.ValueFloat64()
		} else {
			maxRetries1 = nil
		}
		maxBackOff := new(float64)
		if !r.InputKafka.MaxBackOff.IsUnknown() && !r.InputKafka.MaxBackOff.IsNull() {
			*maxBackOff = r.InputKafka.MaxBackOff.ValueFloat64()
		} else {
			maxBackOff = nil
		}
		initialBackoff := new(float64)
		if !r.InputKafka.InitialBackoff.IsUnknown() && !r.InputKafka.InitialBackoff.IsNull() {
			*initialBackoff = r.InputKafka.InitialBackoff.ValueFloat64()
		} else {
			initialBackoff = nil
		}
		backoffRate := new(float64)
		if !r.InputKafka.BackoffRate.IsUnknown() && !r.InputKafka.BackoffRate.IsNull() {
			*backoffRate = r.InputKafka.BackoffRate.ValueFloat64()
		} else {
			backoffRate = nil
		}
		authenticationTimeout := new(float64)
		if !r.InputKafka.AuthenticationTimeout.IsUnknown() && !r.InputKafka.AuthenticationTimeout.IsNull() {
			*authenticationTimeout = r.InputKafka.AuthenticationTimeout.ValueFloat64()
		} else {
			authenticationTimeout = nil
		}
		reauthenticationThreshold := new(float64)
		if !r.InputKafka.ReauthenticationThreshold.IsUnknown() && !r.InputKafka.ReauthenticationThreshold.IsNull() {
			*reauthenticationThreshold = r.InputKafka.ReauthenticationThreshold.ValueFloat64()
		} else {
			reauthenticationThreshold = nil
		}
		var sasl *shared.Authentication
		if r.InputKafka.Sasl != nil {
			disabled6 := new(bool)
			if !r.InputKafka.Sasl.Disabled.IsUnknown() && !r.InputKafka.Sasl.Disabled.IsNull() {
				*disabled6 = r.InputKafka.Sasl.Disabled.ValueBool()
			} else {
				disabled6 = nil
			}
			mechanism := new(shared.SASLMechanism)
			if !r.InputKafka.Sasl.Mechanism.IsUnknown() && !r.InputKafka.Sasl.Mechanism.IsNull() {
				*mechanism = shared.SASLMechanism(r.InputKafka.Sasl.Mechanism.ValueString())
			} else {
				mechanism = nil
			}
			sasl = &shared.Authentication{
				Disabled:  disabled6,
				Mechanism: mechanism,
			}
		}
		var tls1 *shared.TLSSettingsClientSide
		if r.InputKafka.TLS != nil {
			disabled7 := new(bool)
			if !r.InputKafka.TLS.Disabled.IsUnknown() && !r.InputKafka.TLS.Disabled.IsNull() {
				*disabled7 = r.InputKafka.TLS.Disabled.ValueBool()
			} else {
				disabled7 = nil
			}
			rejectUnauthorized1 := new(bool)
			if !r.InputKafka.TLS.RejectUnauthorized.IsUnknown() && !r.InputKafka.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized1 = r.InputKafka.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized1 = nil
			}
			servername1 := new(string)
			if !r.InputKafka.TLS.Servername.IsUnknown() && !r.InputKafka.TLS.Servername.IsNull() {
				*servername1 = r.InputKafka.TLS.Servername.ValueString()
			} else {
				servername1 = nil
			}
			certificateName1 := new(string)
			if !r.InputKafka.TLS.CertificateName.IsUnknown() && !r.InputKafka.TLS.CertificateName.IsNull() {
				*certificateName1 = r.InputKafka.TLS.CertificateName.ValueString()
			} else {
				certificateName1 = nil
			}
			caPath1 := new(string)
			if !r.InputKafka.TLS.CaPath.IsUnknown() && !r.InputKafka.TLS.CaPath.IsNull() {
				*caPath1 = r.InputKafka.TLS.CaPath.ValueString()
			} else {
				caPath1 = nil
			}
			privKeyPath1 := new(string)
			if !r.InputKafka.TLS.PrivKeyPath.IsUnknown() && !r.InputKafka.TLS.PrivKeyPath.IsNull() {
				*privKeyPath1 = r.InputKafka.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath1 = nil
			}
			certPath1 := new(string)
			if !r.InputKafka.TLS.CertPath.IsUnknown() && !r.InputKafka.TLS.CertPath.IsNull() {
				*certPath1 = r.InputKafka.TLS.CertPath.ValueString()
			} else {
				certPath1 = nil
			}
			passphrase1 := new(string)
			if !r.InputKafka.TLS.Passphrase.IsUnknown() && !r.InputKafka.TLS.Passphrase.IsNull() {
				*passphrase1 = r.InputKafka.TLS.Passphrase.ValueString()
			} else {
				passphrase1 = nil
			}
			minVersion1 := new(shared.MinimumTLSVersion)
			if !r.InputKafka.TLS.MinVersion.IsUnknown() && !r.InputKafka.TLS.MinVersion.IsNull() {
				*minVersion1 = shared.MinimumTLSVersion(r.InputKafka.TLS.MinVersion.ValueString())
			} else {
				minVersion1 = nil
			}
			maxVersion1 := new(shared.MaximumTLSVersion)
			if !r.InputKafka.TLS.MaxVersion.IsUnknown() && !r.InputKafka.TLS.MaxVersion.IsNull() {
				*maxVersion1 = shared.MaximumTLSVersion(r.InputKafka.TLS.MaxVersion.ValueString())
			} else {
				maxVersion1 = nil
			}
			tls1 = &shared.TLSSettingsClientSide{
				Disabled:           disabled7,
				RejectUnauthorized: rejectUnauthorized1,
				Servername:         servername1,
				CertificateName:    certificateName1,
				CaPath:             caPath1,
				PrivKeyPath:        privKeyPath1,
				CertPath:           certPath1,
				Passphrase:         passphrase1,
				MinVersion:         minVersion1,
				MaxVersion:         maxVersion1,
			}
		}
		sessionTimeout := new(float64)
		if !r.InputKafka.SessionTimeout.IsUnknown() && !r.InputKafka.SessionTimeout.IsNull() {
			*sessionTimeout = r.InputKafka.SessionTimeout.ValueFloat64()
		} else {
			sessionTimeout = nil
		}
		rebalanceTimeout := new(float64)
		if !r.InputKafka.RebalanceTimeout.IsUnknown() && !r.InputKafka.RebalanceTimeout.IsNull() {
			*rebalanceTimeout = r.InputKafka.RebalanceTimeout.ValueFloat64()
		} else {
			rebalanceTimeout = nil
		}
		heartbeatInterval := new(float64)
		if !r.InputKafka.HeartbeatInterval.IsUnknown() && !r.InputKafka.HeartbeatInterval.IsNull() {
			*heartbeatInterval = r.InputKafka.HeartbeatInterval.ValueFloat64()
		} else {
			heartbeatInterval = nil
		}
		autoCommitInterval := new(float64)
		if !r.InputKafka.AutoCommitInterval.IsUnknown() && !r.InputKafka.AutoCommitInterval.IsNull() {
			*autoCommitInterval = r.InputKafka.AutoCommitInterval.ValueFloat64()
		} else {
			autoCommitInterval = nil
		}
		autoCommitThreshold := new(float64)
		if !r.InputKafka.AutoCommitThreshold.IsUnknown() && !r.InputKafka.AutoCommitThreshold.IsNull() {
			*autoCommitThreshold = r.InputKafka.AutoCommitThreshold.ValueFloat64()
		} else {
			autoCommitThreshold = nil
		}
		maxBytesPerPartition := new(float64)
		if !r.InputKafka.MaxBytesPerPartition.IsUnknown() && !r.InputKafka.MaxBytesPerPartition.IsNull() {
			*maxBytesPerPartition = r.InputKafka.MaxBytesPerPartition.ValueFloat64()
		} else {
			maxBytesPerPartition = nil
		}
		maxBytes := new(float64)
		if !r.InputKafka.MaxBytes.IsUnknown() && !r.InputKafka.MaxBytes.IsNull() {
			*maxBytes = r.InputKafka.MaxBytes.ValueFloat64()
		} else {
			maxBytes = nil
		}
		maxSocketErrors := new(float64)
		if !r.InputKafka.MaxSocketErrors.IsUnknown() && !r.InputKafka.MaxSocketErrors.IsNull() {
			*maxSocketErrors = r.InputKafka.MaxSocketErrors.ValueFloat64()
		} else {
			maxSocketErrors = nil
		}
		metadata1 := make([]shared.InputKafkaMetadata, 0, len(r.InputKafka.Metadata))
		for _, metadataItem1 := range r.InputKafka.Metadata {
			var name1 string
			name1 = metadataItem1.Name.ValueString()

			var value1 string
			value1 = metadataItem1.Value.ValueString()

			metadata1 = append(metadata1, shared.InputKafkaMetadata{
				Name:  name1,
				Value: value1,
			})
		}
		description := new(string)
		if !r.InputKafka.Description.IsUnknown() && !r.InputKafka.Description.IsNull() {
			*description = r.InputKafka.Description.ValueString()
		} else {
			description = nil
		}
		var status1 *shared.TFStatus
		if r.InputKafka.Status != nil {
			health1 := shared.Health(r.InputKafka.Status.Health.ValueString())
			metrics1 := make(map[string]interface{})
			for metricsKey1, metricsValue1 := range r.InputKafka.Status.Metrics {
				var metricsInst1 interface{}
				_ = json.Unmarshal([]byte(metricsValue1.ValueString()), &metricsInst1)
				metrics1[metricsKey1] = metricsInst1
			}
			var timestamp1 float64
			timestamp1 = r.InputKafka.Status.Timestamp.ValueFloat64()

			useStatusFromLb1 := new(bool)
			if !r.InputKafka.Status.UseStatusFromLB.IsUnknown() && !r.InputKafka.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb1 = r.InputKafka.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb1 = nil
			}
			status1 = &shared.TFStatus{
				Health:          health1,
				Metrics:         metrics1,
				Timestamp:       timestamp1,
				UseStatusFromLB: useStatusFromLb1,
			}
		}
		inputKafka = &shared.InputKafka{
			ID:                        id1,
			Type:                      typeVar1,
			Disabled:                  disabled2,
			Pipeline:                  pipeline2,
			SendToRoutes:              sendToRoutes1,
			Environment:               environment1,
			PqEnabled:                 pqEnabled1,
			Streamtags:                streamtags1,
			Connections:               connections1,
			Pq:                        pq1,
			Brokers:                   brokers,
			Topics:                    topics,
			GroupID:                   groupID,
			FromBeginning:             fromBeginning,
			KafkaSchemaRegistry:       kafkaSchemaRegistry,
			ConnectionTimeout:         connectionTimeout1,
			RequestTimeout:            requestTimeout1,
			MaxRetries:                maxRetries1,
			MaxBackOff:                maxBackOff,
			InitialBackoff:            initialBackoff,
			BackoffRate:               backoffRate,
			AuthenticationTimeout:     authenticationTimeout,
			ReauthenticationThreshold: reauthenticationThreshold,
			Sasl:                      sasl,
			TLS:                       tls1,
			SessionTimeout:            sessionTimeout,
			RebalanceTimeout:          rebalanceTimeout,
			HeartbeatInterval:         heartbeatInterval,
			AutoCommitInterval:        autoCommitInterval,
			AutoCommitThreshold:       autoCommitThreshold,
			MaxBytesPerPartition:      maxBytesPerPartition,
			MaxBytes:                  maxBytes,
			MaxSocketErrors:           maxSocketErrors,
			Metadata:                  metadata1,
			Description:               description,
			Status:                    status1,
		}
	}
	if inputKafka != nil {
		out = shared.Input{
			InputKafka: inputKafka,
		}
	}
	var inputMsk *shared.InputMsk
	if r.InputMsk != nil {
		id2 := new(string)
		if !r.InputMsk.ID.IsUnknown() && !r.InputMsk.ID.IsNull() {
			*id2 = r.InputMsk.ID.ValueString()
		} else {
			id2 = nil
		}
		typeVar2 := new(shared.InputMskType)
		if !r.InputMsk.Type.IsUnknown() && !r.InputMsk.Type.IsNull() {
			*typeVar2 = shared.InputMskType(r.InputMsk.Type.ValueString())
		} else {
			typeVar2 = nil
		}
		disabled8 := new(bool)
		if !r.InputMsk.Disabled.IsUnknown() && !r.InputMsk.Disabled.IsNull() {
			*disabled8 = r.InputMsk.Disabled.ValueBool()
		} else {
			disabled8 = nil
		}
		pipeline4 := new(string)
		if !r.InputMsk.Pipeline.IsUnknown() && !r.InputMsk.Pipeline.IsNull() {
			*pipeline4 = r.InputMsk.Pipeline.ValueString()
		} else {
			pipeline4 = nil
		}
		sendToRoutes2 := new(bool)
		if !r.InputMsk.SendToRoutes.IsUnknown() && !r.InputMsk.SendToRoutes.IsNull() {
			*sendToRoutes2 = r.InputMsk.SendToRoutes.ValueBool()
		} else {
			sendToRoutes2 = nil
		}
		environment2 := new(string)
		if !r.InputMsk.Environment.IsUnknown() && !r.InputMsk.Environment.IsNull() {
			*environment2 = r.InputMsk.Environment.ValueString()
		} else {
			environment2 = nil
		}
		pqEnabled2 := new(bool)
		if !r.InputMsk.PqEnabled.IsUnknown() && !r.InputMsk.PqEnabled.IsNull() {
			*pqEnabled2 = r.InputMsk.PqEnabled.ValueBool()
		} else {
			pqEnabled2 = nil
		}
		streamtags2 := make([]string, 0, len(r.InputMsk.Streamtags))
		for _, streamtagsItem2 := range r.InputMsk.Streamtags {
			streamtags2 = append(streamtags2, streamtagsItem2.ValueString())
		}
		connections2 := make([]shared.InputMskConnections, 0, len(r.InputMsk.Connections))
		for _, connectionsItem2 := range r.InputMsk.Connections {
			pipeline5 := new(string)
			if !connectionsItem2.Pipeline.IsUnknown() && !connectionsItem2.Pipeline.IsNull() {
				*pipeline5 = connectionsItem2.Pipeline.ValueString()
			} else {
				pipeline5 = nil
			}
			var output3 string
			output3 = connectionsItem2.Output.ValueString()

			connections2 = append(connections2, shared.InputMskConnections{
				Pipeline: pipeline5,
				Output:   output3,
			})
		}
		var pq2 *shared.InputMskPq
		if r.InputMsk.Pq != nil {
			mode2 := new(shared.InputMskMode)
			if !r.InputMsk.Pq.Mode.IsUnknown() && !r.InputMsk.Pq.Mode.IsNull() {
				*mode2 = shared.InputMskMode(r.InputMsk.Pq.Mode.ValueString())
			} else {
				mode2 = nil
			}
			maxBufferSize2 := new(float64)
			if !r.InputMsk.Pq.MaxBufferSize.IsUnknown() && !r.InputMsk.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize2 = r.InputMsk.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize2 = nil
			}
			commitFrequency2 := new(float64)
			if !r.InputMsk.Pq.CommitFrequency.IsUnknown() && !r.InputMsk.Pq.CommitFrequency.IsNull() {
				*commitFrequency2 = r.InputMsk.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency2 = nil
			}
			maxFileSize2 := new(string)
			if !r.InputMsk.Pq.MaxFileSize.IsUnknown() && !r.InputMsk.Pq.MaxFileSize.IsNull() {
				*maxFileSize2 = r.InputMsk.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize2 = nil
			}
			maxSize2 := new(string)
			if !r.InputMsk.Pq.MaxSize.IsUnknown() && !r.InputMsk.Pq.MaxSize.IsNull() {
				*maxSize2 = r.InputMsk.Pq.MaxSize.ValueString()
			} else {
				maxSize2 = nil
			}
			path2 := new(string)
			if !r.InputMsk.Pq.Path.IsUnknown() && !r.InputMsk.Pq.Path.IsNull() {
				*path2 = r.InputMsk.Pq.Path.ValueString()
			} else {
				path2 = nil
			}
			compress2 := new(shared.InputMskCompression)
			if !r.InputMsk.Pq.Compress.IsUnknown() && !r.InputMsk.Pq.Compress.IsNull() {
				*compress2 = shared.InputMskCompression(r.InputMsk.Pq.Compress.ValueString())
			} else {
				compress2 = nil
			}
			pq2 = &shared.InputMskPq{
				Mode:            mode2,
				MaxBufferSize:   maxBufferSize2,
				CommitFrequency: commitFrequency2,
				MaxFileSize:     maxFileSize2,
				MaxSize:         maxSize2,
				Path:            path2,
				Compress:        compress2,
			}
		}
		brokers1 := make([]string, 0, len(r.InputMsk.Brokers))
		for _, brokersItem1 := range r.InputMsk.Brokers {
			brokers1 = append(brokers1, brokersItem1.ValueString())
		}
		topics1 := make([]string, 0, len(r.InputMsk.Topics))
		for _, topicsItem1 := range r.InputMsk.Topics {
			topics1 = append(topics1, topicsItem1.ValueString())
		}
		groupId1 := new(string)
		if !r.InputMsk.GroupID.IsUnknown() && !r.InputMsk.GroupID.IsNull() {
			*groupId1 = r.InputMsk.GroupID.ValueString()
		} else {
			groupId1 = nil
		}
		fromBeginning1 := new(bool)
		if !r.InputMsk.FromBeginning.IsUnknown() && !r.InputMsk.FromBeginning.IsNull() {
			*fromBeginning1 = r.InputMsk.FromBeginning.ValueBool()
		} else {
			fromBeginning1 = nil
		}
		sessionTimeout1 := new(float64)
		if !r.InputMsk.SessionTimeout.IsUnknown() && !r.InputMsk.SessionTimeout.IsNull() {
			*sessionTimeout1 = r.InputMsk.SessionTimeout.ValueFloat64()
		} else {
			sessionTimeout1 = nil
		}
		rebalanceTimeout1 := new(float64)
		if !r.InputMsk.RebalanceTimeout.IsUnknown() && !r.InputMsk.RebalanceTimeout.IsNull() {
			*rebalanceTimeout1 = r.InputMsk.RebalanceTimeout.ValueFloat64()
		} else {
			rebalanceTimeout1 = nil
		}
		heartbeatInterval1 := new(float64)
		if !r.InputMsk.HeartbeatInterval.IsUnknown() && !r.InputMsk.HeartbeatInterval.IsNull() {
			*heartbeatInterval1 = r.InputMsk.HeartbeatInterval.ValueFloat64()
		} else {
			heartbeatInterval1 = nil
		}
		metadata2 := make([]shared.InputMskMetadata, 0, len(r.InputMsk.Metadata))
		for _, metadataItem2 := range r.InputMsk.Metadata {
			var name2 string
			name2 = metadataItem2.Name.ValueString()

			var value2 string
			value2 = metadataItem2.Value.ValueString()

			metadata2 = append(metadata2, shared.InputMskMetadata{
				Name:  name2,
				Value: value2,
			})
		}
		var kafkaSchemaRegistry1 *shared.InputMskKafkaSchemaRegistryAuthentication
		if r.InputMsk.KafkaSchemaRegistry != nil {
			disabled9 := new(bool)
			if !r.InputMsk.KafkaSchemaRegistry.Disabled.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.Disabled.IsNull() {
				*disabled9 = r.InputMsk.KafkaSchemaRegistry.Disabled.ValueBool()
			} else {
				disabled9 = nil
			}
			schemaRegistryUrl1 := new(string)
			if !r.InputMsk.KafkaSchemaRegistry.SchemaRegistryURL.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.SchemaRegistryURL.IsNull() {
				*schemaRegistryUrl1 = r.InputMsk.KafkaSchemaRegistry.SchemaRegistryURL.ValueString()
			} else {
				schemaRegistryUrl1 = nil
			}
			connectionTimeout2 := new(float64)
			if !r.InputMsk.KafkaSchemaRegistry.ConnectionTimeout.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.ConnectionTimeout.IsNull() {
				*connectionTimeout2 = r.InputMsk.KafkaSchemaRegistry.ConnectionTimeout.ValueFloat64()
			} else {
				connectionTimeout2 = nil
			}
			requestTimeout2 := new(float64)
			if !r.InputMsk.KafkaSchemaRegistry.RequestTimeout.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.RequestTimeout.IsNull() {
				*requestTimeout2 = r.InputMsk.KafkaSchemaRegistry.RequestTimeout.ValueFloat64()
			} else {
				requestTimeout2 = nil
			}
			maxRetries2 := new(float64)
			if !r.InputMsk.KafkaSchemaRegistry.MaxRetries.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.MaxRetries.IsNull() {
				*maxRetries2 = r.InputMsk.KafkaSchemaRegistry.MaxRetries.ValueFloat64()
			} else {
				maxRetries2 = nil
			}
			var auth1 *shared.InputMskAuth
			if r.InputMsk.KafkaSchemaRegistry.Auth != nil {
				disabled10 := new(bool)
				if !r.InputMsk.KafkaSchemaRegistry.Auth.Disabled.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.Auth.Disabled.IsNull() {
					*disabled10 = r.InputMsk.KafkaSchemaRegistry.Auth.Disabled.ValueBool()
				} else {
					disabled10 = nil
				}
				credentialsSecret1 := new(string)
				if !r.InputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret.IsNull() {
					*credentialsSecret1 = r.InputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret1 = nil
				}
				auth1 = &shared.InputMskAuth{
					Disabled:          disabled10,
					CredentialsSecret: credentialsSecret1,
				}
			}
			var tls2 *shared.InputMskInputTLSSettingsClientSide
			if r.InputMsk.KafkaSchemaRegistry.TLS != nil {
				disabled11 := new(bool)
				if !r.InputMsk.KafkaSchemaRegistry.TLS.Disabled.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.TLS.Disabled.IsNull() {
					*disabled11 = r.InputMsk.KafkaSchemaRegistry.TLS.Disabled.ValueBool()
				} else {
					disabled11 = nil
				}
				rejectUnauthorized2 := new(bool)
				if !r.InputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsNull() {
					*rejectUnauthorized2 = r.InputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized.ValueBool()
				} else {
					rejectUnauthorized2 = nil
				}
				servername2 := new(string)
				if !r.InputMsk.KafkaSchemaRegistry.TLS.Servername.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.TLS.Servername.IsNull() {
					*servername2 = r.InputMsk.KafkaSchemaRegistry.TLS.Servername.ValueString()
				} else {
					servername2 = nil
				}
				certificateName2 := new(string)
				if !r.InputMsk.KafkaSchemaRegistry.TLS.CertificateName.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.TLS.CertificateName.IsNull() {
					*certificateName2 = r.InputMsk.KafkaSchemaRegistry.TLS.CertificateName.ValueString()
				} else {
					certificateName2 = nil
				}
				caPath2 := new(string)
				if !r.InputMsk.KafkaSchemaRegistry.TLS.CaPath.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.TLS.CaPath.IsNull() {
					*caPath2 = r.InputMsk.KafkaSchemaRegistry.TLS.CaPath.ValueString()
				} else {
					caPath2 = nil
				}
				privKeyPath2 := new(string)
				if !r.InputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath.IsNull() {
					*privKeyPath2 = r.InputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath.ValueString()
				} else {
					privKeyPath2 = nil
				}
				certPath2 := new(string)
				if !r.InputMsk.KafkaSchemaRegistry.TLS.CertPath.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.TLS.CertPath.IsNull() {
					*certPath2 = r.InputMsk.KafkaSchemaRegistry.TLS.CertPath.ValueString()
				} else {
					certPath2 = nil
				}
				passphrase2 := new(string)
				if !r.InputMsk.KafkaSchemaRegistry.TLS.Passphrase.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.TLS.Passphrase.IsNull() {
					*passphrase2 = r.InputMsk.KafkaSchemaRegistry.TLS.Passphrase.ValueString()
				} else {
					passphrase2 = nil
				}
				minVersion2 := new(shared.InputMskInputMinimumTLSVersion)
				if !r.InputMsk.KafkaSchemaRegistry.TLS.MinVersion.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.TLS.MinVersion.IsNull() {
					*minVersion2 = shared.InputMskInputMinimumTLSVersion(r.InputMsk.KafkaSchemaRegistry.TLS.MinVersion.ValueString())
				} else {
					minVersion2 = nil
				}
				maxVersion2 := new(shared.InputMskInputMaximumTLSVersion)
				if !r.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion.IsUnknown() && !r.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion.IsNull() {
					*maxVersion2 = shared.InputMskInputMaximumTLSVersion(r.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion.ValueString())
				} else {
					maxVersion2 = nil
				}
				tls2 = &shared.InputMskInputTLSSettingsClientSide{
					Disabled:           disabled11,
					RejectUnauthorized: rejectUnauthorized2,
					Servername:         servername2,
					CertificateName:    certificateName2,
					CaPath:             caPath2,
					PrivKeyPath:        privKeyPath2,
					CertPath:           certPath2,
					Passphrase:         passphrase2,
					MinVersion:         minVersion2,
					MaxVersion:         maxVersion2,
				}
			}
			kafkaSchemaRegistry1 = &shared.InputMskKafkaSchemaRegistryAuthentication{
				Disabled:          disabled9,
				SchemaRegistryURL: schemaRegistryUrl1,
				ConnectionTimeout: connectionTimeout2,
				RequestTimeout:    requestTimeout2,
				MaxRetries:        maxRetries2,
				Auth:              auth1,
				TLS:               tls2,
			}
		}
		connectionTimeout3 := new(float64)
		if !r.InputMsk.ConnectionTimeout.IsUnknown() && !r.InputMsk.ConnectionTimeout.IsNull() {
			*connectionTimeout3 = r.InputMsk.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout3 = nil
		}
		requestTimeout3 := new(float64)
		if !r.InputMsk.RequestTimeout.IsUnknown() && !r.InputMsk.RequestTimeout.IsNull() {
			*requestTimeout3 = r.InputMsk.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout3 = nil
		}
		maxRetries3 := new(float64)
		if !r.InputMsk.MaxRetries.IsUnknown() && !r.InputMsk.MaxRetries.IsNull() {
			*maxRetries3 = r.InputMsk.MaxRetries.ValueFloat64()
		} else {
			maxRetries3 = nil
		}
		maxBackOff1 := new(float64)
		if !r.InputMsk.MaxBackOff.IsUnknown() && !r.InputMsk.MaxBackOff.IsNull() {
			*maxBackOff1 = r.InputMsk.MaxBackOff.ValueFloat64()
		} else {
			maxBackOff1 = nil
		}
		initialBackoff1 := new(float64)
		if !r.InputMsk.InitialBackoff.IsUnknown() && !r.InputMsk.InitialBackoff.IsNull() {
			*initialBackoff1 = r.InputMsk.InitialBackoff.ValueFloat64()
		} else {
			initialBackoff1 = nil
		}
		backoffRate1 := new(float64)
		if !r.InputMsk.BackoffRate.IsUnknown() && !r.InputMsk.BackoffRate.IsNull() {
			*backoffRate1 = r.InputMsk.BackoffRate.ValueFloat64()
		} else {
			backoffRate1 = nil
		}
		authenticationTimeout1 := new(float64)
		if !r.InputMsk.AuthenticationTimeout.IsUnknown() && !r.InputMsk.AuthenticationTimeout.IsNull() {
			*authenticationTimeout1 = r.InputMsk.AuthenticationTimeout.ValueFloat64()
		} else {
			authenticationTimeout1 = nil
		}
		reauthenticationThreshold1 := new(float64)
		if !r.InputMsk.ReauthenticationThreshold.IsUnknown() && !r.InputMsk.ReauthenticationThreshold.IsNull() {
			*reauthenticationThreshold1 = r.InputMsk.ReauthenticationThreshold.ValueFloat64()
		} else {
			reauthenticationThreshold1 = nil
		}
		awsAuthenticationMethod := new(shared.AuthenticationMethod)
		if !r.InputMsk.AwsAuthenticationMethod.IsUnknown() && !r.InputMsk.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod = shared.AuthenticationMethod(r.InputMsk.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod = nil
		}
		awsSecretKey := new(string)
		if !r.InputMsk.AwsSecretKey.IsUnknown() && !r.InputMsk.AwsSecretKey.IsNull() {
			*awsSecretKey = r.InputMsk.AwsSecretKey.ValueString()
		} else {
			awsSecretKey = nil
		}
		var region string
		region = r.InputMsk.Region.ValueString()

		endpoint := new(string)
		if !r.InputMsk.Endpoint.IsUnknown() && !r.InputMsk.Endpoint.IsNull() {
			*endpoint = r.InputMsk.Endpoint.ValueString()
		} else {
			endpoint = nil
		}
		signatureVersion := new(shared.SignatureVersion)
		if !r.InputMsk.SignatureVersion.IsUnknown() && !r.InputMsk.SignatureVersion.IsNull() {
			*signatureVersion = shared.SignatureVersion(r.InputMsk.SignatureVersion.ValueString())
		} else {
			signatureVersion = nil
		}
		reuseConnections := new(bool)
		if !r.InputMsk.ReuseConnections.IsUnknown() && !r.InputMsk.ReuseConnections.IsNull() {
			*reuseConnections = r.InputMsk.ReuseConnections.ValueBool()
		} else {
			reuseConnections = nil
		}
		rejectUnauthorized3 := new(bool)
		if !r.InputMsk.RejectUnauthorized.IsUnknown() && !r.InputMsk.RejectUnauthorized.IsNull() {
			*rejectUnauthorized3 = r.InputMsk.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized3 = nil
		}
		enableAssumeRole := new(bool)
		if !r.InputMsk.EnableAssumeRole.IsUnknown() && !r.InputMsk.EnableAssumeRole.IsNull() {
			*enableAssumeRole = r.InputMsk.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole = nil
		}
		assumeRoleArn := new(string)
		if !r.InputMsk.AssumeRoleArn.IsUnknown() && !r.InputMsk.AssumeRoleArn.IsNull() {
			*assumeRoleArn = r.InputMsk.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn = nil
		}
		assumeRoleExternalID := new(string)
		if !r.InputMsk.AssumeRoleExternalID.IsUnknown() && !r.InputMsk.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalID = r.InputMsk.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalID = nil
		}
		durationSeconds := new(float64)
		if !r.InputMsk.DurationSeconds.IsUnknown() && !r.InputMsk.DurationSeconds.IsNull() {
			*durationSeconds = r.InputMsk.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds = nil
		}
		var tls3 *shared.InputMskTLSSettingsClientSide
		if r.InputMsk.TLS != nil {
			disabled12 := new(bool)
			if !r.InputMsk.TLS.Disabled.IsUnknown() && !r.InputMsk.TLS.Disabled.IsNull() {
				*disabled12 = r.InputMsk.TLS.Disabled.ValueBool()
			} else {
				disabled12 = nil
			}
			rejectUnauthorized4 := new(bool)
			if !r.InputMsk.TLS.RejectUnauthorized.IsUnknown() && !r.InputMsk.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized4 = r.InputMsk.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized4 = nil
			}
			servername3 := new(string)
			if !r.InputMsk.TLS.Servername.IsUnknown() && !r.InputMsk.TLS.Servername.IsNull() {
				*servername3 = r.InputMsk.TLS.Servername.ValueString()
			} else {
				servername3 = nil
			}
			certificateName3 := new(string)
			if !r.InputMsk.TLS.CertificateName.IsUnknown() && !r.InputMsk.TLS.CertificateName.IsNull() {
				*certificateName3 = r.InputMsk.TLS.CertificateName.ValueString()
			} else {
				certificateName3 = nil
			}
			caPath3 := new(string)
			if !r.InputMsk.TLS.CaPath.IsUnknown() && !r.InputMsk.TLS.CaPath.IsNull() {
				*caPath3 = r.InputMsk.TLS.CaPath.ValueString()
			} else {
				caPath3 = nil
			}
			privKeyPath3 := new(string)
			if !r.InputMsk.TLS.PrivKeyPath.IsUnknown() && !r.InputMsk.TLS.PrivKeyPath.IsNull() {
				*privKeyPath3 = r.InputMsk.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath3 = nil
			}
			certPath3 := new(string)
			if !r.InputMsk.TLS.CertPath.IsUnknown() && !r.InputMsk.TLS.CertPath.IsNull() {
				*certPath3 = r.InputMsk.TLS.CertPath.ValueString()
			} else {
				certPath3 = nil
			}
			passphrase3 := new(string)
			if !r.InputMsk.TLS.Passphrase.IsUnknown() && !r.InputMsk.TLS.Passphrase.IsNull() {
				*passphrase3 = r.InputMsk.TLS.Passphrase.ValueString()
			} else {
				passphrase3 = nil
			}
			minVersion3 := new(shared.InputMskMinimumTLSVersion)
			if !r.InputMsk.TLS.MinVersion.IsUnknown() && !r.InputMsk.TLS.MinVersion.IsNull() {
				*minVersion3 = shared.InputMskMinimumTLSVersion(r.InputMsk.TLS.MinVersion.ValueString())
			} else {
				minVersion3 = nil
			}
			maxVersion3 := new(shared.InputMskMaximumTLSVersion)
			if !r.InputMsk.TLS.MaxVersion.IsUnknown() && !r.InputMsk.TLS.MaxVersion.IsNull() {
				*maxVersion3 = shared.InputMskMaximumTLSVersion(r.InputMsk.TLS.MaxVersion.ValueString())
			} else {
				maxVersion3 = nil
			}
			tls3 = &shared.InputMskTLSSettingsClientSide{
				Disabled:           disabled12,
				RejectUnauthorized: rejectUnauthorized4,
				Servername:         servername3,
				CertificateName:    certificateName3,
				CaPath:             caPath3,
				PrivKeyPath:        privKeyPath3,
				CertPath:           certPath3,
				Passphrase:         passphrase3,
				MinVersion:         minVersion3,
				MaxVersion:         maxVersion3,
			}
		}
		autoCommitInterval1 := new(float64)
		if !r.InputMsk.AutoCommitInterval.IsUnknown() && !r.InputMsk.AutoCommitInterval.IsNull() {
			*autoCommitInterval1 = r.InputMsk.AutoCommitInterval.ValueFloat64()
		} else {
			autoCommitInterval1 = nil
		}
		autoCommitThreshold1 := new(float64)
		if !r.InputMsk.AutoCommitThreshold.IsUnknown() && !r.InputMsk.AutoCommitThreshold.IsNull() {
			*autoCommitThreshold1 = r.InputMsk.AutoCommitThreshold.ValueFloat64()
		} else {
			autoCommitThreshold1 = nil
		}
		maxBytesPerPartition1 := new(float64)
		if !r.InputMsk.MaxBytesPerPartition.IsUnknown() && !r.InputMsk.MaxBytesPerPartition.IsNull() {
			*maxBytesPerPartition1 = r.InputMsk.MaxBytesPerPartition.ValueFloat64()
		} else {
			maxBytesPerPartition1 = nil
		}
		maxBytes1 := new(float64)
		if !r.InputMsk.MaxBytes.IsUnknown() && !r.InputMsk.MaxBytes.IsNull() {
			*maxBytes1 = r.InputMsk.MaxBytes.ValueFloat64()
		} else {
			maxBytes1 = nil
		}
		maxSocketErrors1 := new(float64)
		if !r.InputMsk.MaxSocketErrors.IsUnknown() && !r.InputMsk.MaxSocketErrors.IsNull() {
			*maxSocketErrors1 = r.InputMsk.MaxSocketErrors.ValueFloat64()
		} else {
			maxSocketErrors1 = nil
		}
		description1 := new(string)
		if !r.InputMsk.Description.IsUnknown() && !r.InputMsk.Description.IsNull() {
			*description1 = r.InputMsk.Description.ValueString()
		} else {
			description1 = nil
		}
		awsAPIKey := new(string)
		if !r.InputMsk.AwsAPIKey.IsUnknown() && !r.InputMsk.AwsAPIKey.IsNull() {
			*awsAPIKey = r.InputMsk.AwsAPIKey.ValueString()
		} else {
			awsAPIKey = nil
		}
		awsSecret := new(string)
		if !r.InputMsk.AwsSecret.IsUnknown() && !r.InputMsk.AwsSecret.IsNull() {
			*awsSecret = r.InputMsk.AwsSecret.ValueString()
		} else {
			awsSecret = nil
		}
		var status2 *shared.TFStatus
		if r.InputMsk.Status != nil {
			health2 := shared.Health(r.InputMsk.Status.Health.ValueString())
			metrics2 := make(map[string]interface{})
			for metricsKey2, metricsValue2 := range r.InputMsk.Status.Metrics {
				var metricsInst2 interface{}
				_ = json.Unmarshal([]byte(metricsValue2.ValueString()), &metricsInst2)
				metrics2[metricsKey2] = metricsInst2
			}
			var timestamp2 float64
			timestamp2 = r.InputMsk.Status.Timestamp.ValueFloat64()

			useStatusFromLb2 := new(bool)
			if !r.InputMsk.Status.UseStatusFromLB.IsUnknown() && !r.InputMsk.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb2 = r.InputMsk.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb2 = nil
			}
			status2 = &shared.TFStatus{
				Health:          health2,
				Metrics:         metrics2,
				Timestamp:       timestamp2,
				UseStatusFromLB: useStatusFromLb2,
			}
		}
		inputMsk = &shared.InputMsk{
			ID:                        id2,
			Type:                      typeVar2,
			Disabled:                  disabled8,
			Pipeline:                  pipeline4,
			SendToRoutes:              sendToRoutes2,
			Environment:               environment2,
			PqEnabled:                 pqEnabled2,
			Streamtags:                streamtags2,
			Connections:               connections2,
			Pq:                        pq2,
			Brokers:                   brokers1,
			Topics:                    topics1,
			GroupID:                   groupId1,
			FromBeginning:             fromBeginning1,
			SessionTimeout:            sessionTimeout1,
			RebalanceTimeout:          rebalanceTimeout1,
			HeartbeatInterval:         heartbeatInterval1,
			Metadata:                  metadata2,
			KafkaSchemaRegistry:       kafkaSchemaRegistry1,
			ConnectionTimeout:         connectionTimeout3,
			RequestTimeout:            requestTimeout3,
			MaxRetries:                maxRetries3,
			MaxBackOff:                maxBackOff1,
			InitialBackoff:            initialBackoff1,
			BackoffRate:               backoffRate1,
			AuthenticationTimeout:     authenticationTimeout1,
			ReauthenticationThreshold: reauthenticationThreshold1,
			AwsAuthenticationMethod:   awsAuthenticationMethod,
			AwsSecretKey:              awsSecretKey,
			Region:                    region,
			Endpoint:                  endpoint,
			SignatureVersion:          signatureVersion,
			ReuseConnections:          reuseConnections,
			RejectUnauthorized:        rejectUnauthorized3,
			EnableAssumeRole:          enableAssumeRole,
			AssumeRoleArn:             assumeRoleArn,
			AssumeRoleExternalID:      assumeRoleExternalID,
			DurationSeconds:           durationSeconds,
			TLS:                       tls3,
			AutoCommitInterval:        autoCommitInterval1,
			AutoCommitThreshold:       autoCommitThreshold1,
			MaxBytesPerPartition:      maxBytesPerPartition1,
			MaxBytes:                  maxBytes1,
			MaxSocketErrors:           maxSocketErrors1,
			Description:               description1,
			AwsAPIKey:                 awsAPIKey,
			AwsSecret:                 awsSecret,
			Status:                    status2,
		}
	}
	if inputMsk != nil {
		out = shared.Input{
			InputMsk: inputMsk,
		}
	}
	var inputHTTP *shared.InputHTTP
	if r.InputHTTP != nil {
		id3 := new(string)
		if !r.InputHTTP.ID.IsUnknown() && !r.InputHTTP.ID.IsNull() {
			*id3 = r.InputHTTP.ID.ValueString()
		} else {
			id3 = nil
		}
		typeVar3 := new(shared.InputHTTPType)
		if !r.InputHTTP.Type.IsUnknown() && !r.InputHTTP.Type.IsNull() {
			*typeVar3 = shared.InputHTTPType(r.InputHTTP.Type.ValueString())
		} else {
			typeVar3 = nil
		}
		disabled13 := new(bool)
		if !r.InputHTTP.Disabled.IsUnknown() && !r.InputHTTP.Disabled.IsNull() {
			*disabled13 = r.InputHTTP.Disabled.ValueBool()
		} else {
			disabled13 = nil
		}
		pipeline6 := new(string)
		if !r.InputHTTP.Pipeline.IsUnknown() && !r.InputHTTP.Pipeline.IsNull() {
			*pipeline6 = r.InputHTTP.Pipeline.ValueString()
		} else {
			pipeline6 = nil
		}
		sendToRoutes3 := new(bool)
		if !r.InputHTTP.SendToRoutes.IsUnknown() && !r.InputHTTP.SendToRoutes.IsNull() {
			*sendToRoutes3 = r.InputHTTP.SendToRoutes.ValueBool()
		} else {
			sendToRoutes3 = nil
		}
		environment3 := new(string)
		if !r.InputHTTP.Environment.IsUnknown() && !r.InputHTTP.Environment.IsNull() {
			*environment3 = r.InputHTTP.Environment.ValueString()
		} else {
			environment3 = nil
		}
		pqEnabled3 := new(bool)
		if !r.InputHTTP.PqEnabled.IsUnknown() && !r.InputHTTP.PqEnabled.IsNull() {
			*pqEnabled3 = r.InputHTTP.PqEnabled.ValueBool()
		} else {
			pqEnabled3 = nil
		}
		streamtags3 := make([]string, 0, len(r.InputHTTP.Streamtags))
		for _, streamtagsItem3 := range r.InputHTTP.Streamtags {
			streamtags3 = append(streamtags3, streamtagsItem3.ValueString())
		}
		connections3 := make([]shared.InputHTTPConnections, 0, len(r.InputHTTP.Connections))
		for _, connectionsItem3 := range r.InputHTTP.Connections {
			pipeline7 := new(string)
			if !connectionsItem3.Pipeline.IsUnknown() && !connectionsItem3.Pipeline.IsNull() {
				*pipeline7 = connectionsItem3.Pipeline.ValueString()
			} else {
				pipeline7 = nil
			}
			var output4 string
			output4 = connectionsItem3.Output.ValueString()

			connections3 = append(connections3, shared.InputHTTPConnections{
				Pipeline: pipeline7,
				Output:   output4,
			})
		}
		var pq3 *shared.InputHTTPPq
		if r.InputHTTP.Pq != nil {
			mode3 := new(shared.InputHTTPMode)
			if !r.InputHTTP.Pq.Mode.IsUnknown() && !r.InputHTTP.Pq.Mode.IsNull() {
				*mode3 = shared.InputHTTPMode(r.InputHTTP.Pq.Mode.ValueString())
			} else {
				mode3 = nil
			}
			maxBufferSize3 := new(float64)
			if !r.InputHTTP.Pq.MaxBufferSize.IsUnknown() && !r.InputHTTP.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize3 = r.InputHTTP.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize3 = nil
			}
			commitFrequency3 := new(float64)
			if !r.InputHTTP.Pq.CommitFrequency.IsUnknown() && !r.InputHTTP.Pq.CommitFrequency.IsNull() {
				*commitFrequency3 = r.InputHTTP.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency3 = nil
			}
			maxFileSize3 := new(string)
			if !r.InputHTTP.Pq.MaxFileSize.IsUnknown() && !r.InputHTTP.Pq.MaxFileSize.IsNull() {
				*maxFileSize3 = r.InputHTTP.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize3 = nil
			}
			maxSize3 := new(string)
			if !r.InputHTTP.Pq.MaxSize.IsUnknown() && !r.InputHTTP.Pq.MaxSize.IsNull() {
				*maxSize3 = r.InputHTTP.Pq.MaxSize.ValueString()
			} else {
				maxSize3 = nil
			}
			path3 := new(string)
			if !r.InputHTTP.Pq.Path.IsUnknown() && !r.InputHTTP.Pq.Path.IsNull() {
				*path3 = r.InputHTTP.Pq.Path.ValueString()
			} else {
				path3 = nil
			}
			compress3 := new(shared.InputHTTPCompression)
			if !r.InputHTTP.Pq.Compress.IsUnknown() && !r.InputHTTP.Pq.Compress.IsNull() {
				*compress3 = shared.InputHTTPCompression(r.InputHTTP.Pq.Compress.ValueString())
			} else {
				compress3 = nil
			}
			pq3 = &shared.InputHTTPPq{
				Mode:            mode3,
				MaxBufferSize:   maxBufferSize3,
				CommitFrequency: commitFrequency3,
				MaxFileSize:     maxFileSize3,
				MaxSize:         maxSize3,
				Path:            path3,
				Compress:        compress3,
			}
		}
		host := new(string)
		if !r.InputHTTP.Host.IsUnknown() && !r.InputHTTP.Host.IsNull() {
			*host = r.InputHTTP.Host.ValueString()
		} else {
			host = nil
		}
		var port float64
		port = r.InputHTTP.Port.ValueFloat64()

		authTokens := make([]string, 0, len(r.InputHTTP.AuthTokens))
		for _, authTokensItem := range r.InputHTTP.AuthTokens {
			authTokens = append(authTokens, authTokensItem.ValueString())
		}
		var tls4 *shared.TLSSettingsServerSide
		if r.InputHTTP.TLS != nil {
			disabled14 := new(bool)
			if !r.InputHTTP.TLS.Disabled.IsUnknown() && !r.InputHTTP.TLS.Disabled.IsNull() {
				*disabled14 = r.InputHTTP.TLS.Disabled.ValueBool()
			} else {
				disabled14 = nil
			}
			certificateName4 := new(string)
			if !r.InputHTTP.TLS.CertificateName.IsUnknown() && !r.InputHTTP.TLS.CertificateName.IsNull() {
				*certificateName4 = r.InputHTTP.TLS.CertificateName.ValueString()
			} else {
				certificateName4 = nil
			}
			privKeyPath4 := new(string)
			if !r.InputHTTP.TLS.PrivKeyPath.IsUnknown() && !r.InputHTTP.TLS.PrivKeyPath.IsNull() {
				*privKeyPath4 = r.InputHTTP.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath4 = nil
			}
			passphrase4 := new(string)
			if !r.InputHTTP.TLS.Passphrase.IsUnknown() && !r.InputHTTP.TLS.Passphrase.IsNull() {
				*passphrase4 = r.InputHTTP.TLS.Passphrase.ValueString()
			} else {
				passphrase4 = nil
			}
			certPath4 := new(string)
			if !r.InputHTTP.TLS.CertPath.IsUnknown() && !r.InputHTTP.TLS.CertPath.IsNull() {
				*certPath4 = r.InputHTTP.TLS.CertPath.ValueString()
			} else {
				certPath4 = nil
			}
			caPath4 := new(string)
			if !r.InputHTTP.TLS.CaPath.IsUnknown() && !r.InputHTTP.TLS.CaPath.IsNull() {
				*caPath4 = r.InputHTTP.TLS.CaPath.ValueString()
			} else {
				caPath4 = nil
			}
			requestCert := new(bool)
			if !r.InputHTTP.TLS.RequestCert.IsUnknown() && !r.InputHTTP.TLS.RequestCert.IsNull() {
				*requestCert = r.InputHTTP.TLS.RequestCert.ValueBool()
			} else {
				requestCert = nil
			}
			var rejectUnauthorized5 interface{}
			if !r.InputHTTP.TLS.RejectUnauthorized.IsUnknown() && !r.InputHTTP.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputHTTP.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized5)
			}
			var commonNameRegex interface{}
			if !r.InputHTTP.TLS.CommonNameRegex.IsUnknown() && !r.InputHTTP.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputHTTP.TLS.CommonNameRegex.ValueString()), &commonNameRegex)
			}
			minVersion4 := new(shared.InputHTTPMinimumTLSVersion)
			if !r.InputHTTP.TLS.MinVersion.IsUnknown() && !r.InputHTTP.TLS.MinVersion.IsNull() {
				*minVersion4 = shared.InputHTTPMinimumTLSVersion(r.InputHTTP.TLS.MinVersion.ValueString())
			} else {
				minVersion4 = nil
			}
			maxVersion4 := new(shared.InputHTTPMaximumTLSVersion)
			if !r.InputHTTP.TLS.MaxVersion.IsUnknown() && !r.InputHTTP.TLS.MaxVersion.IsNull() {
				*maxVersion4 = shared.InputHTTPMaximumTLSVersion(r.InputHTTP.TLS.MaxVersion.ValueString())
			} else {
				maxVersion4 = nil
			}
			tls4 = &shared.TLSSettingsServerSide{
				Disabled:           disabled14,
				CertificateName:    certificateName4,
				PrivKeyPath:        privKeyPath4,
				Passphrase:         passphrase4,
				CertPath:           certPath4,
				CaPath:             caPath4,
				RequestCert:        requestCert,
				RejectUnauthorized: rejectUnauthorized5,
				CommonNameRegex:    commonNameRegex,
				MinVersion:         minVersion4,
				MaxVersion:         maxVersion4,
			}
		}
		maxActiveReq := new(float64)
		if !r.InputHTTP.MaxActiveReq.IsUnknown() && !r.InputHTTP.MaxActiveReq.IsNull() {
			*maxActiveReq = r.InputHTTP.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq = nil
		}
		maxRequestsPerSocket := new(int64)
		if !r.InputHTTP.MaxRequestsPerSocket.IsUnknown() && !r.InputHTTP.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket = r.InputHTTP.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket = nil
		}
		enableProxyHeader := new(bool)
		if !r.InputHTTP.EnableProxyHeader.IsUnknown() && !r.InputHTTP.EnableProxyHeader.IsNull() {
			*enableProxyHeader = r.InputHTTP.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader = nil
		}
		captureHeaders := new(bool)
		if !r.InputHTTP.CaptureHeaders.IsUnknown() && !r.InputHTTP.CaptureHeaders.IsNull() {
			*captureHeaders = r.InputHTTP.CaptureHeaders.ValueBool()
		} else {
			captureHeaders = nil
		}
		activityLogSampleRate := new(float64)
		if !r.InputHTTP.ActivityLogSampleRate.IsUnknown() && !r.InputHTTP.ActivityLogSampleRate.IsNull() {
			*activityLogSampleRate = r.InputHTTP.ActivityLogSampleRate.ValueFloat64()
		} else {
			activityLogSampleRate = nil
		}
		requestTimeout4 := new(float64)
		if !r.InputHTTP.RequestTimeout.IsUnknown() && !r.InputHTTP.RequestTimeout.IsNull() {
			*requestTimeout4 = r.InputHTTP.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout4 = nil
		}
		socketTimeout := new(float64)
		if !r.InputHTTP.SocketTimeout.IsUnknown() && !r.InputHTTP.SocketTimeout.IsNull() {
			*socketTimeout = r.InputHTTP.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout = nil
		}
		keepAliveTimeout := new(float64)
		if !r.InputHTTP.KeepAliveTimeout.IsUnknown() && !r.InputHTTP.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout = r.InputHTTP.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout = nil
		}
		enableHealthCheck := new(bool)
		if !r.InputHTTP.EnableHealthCheck.IsUnknown() && !r.InputHTTP.EnableHealthCheck.IsNull() {
			*enableHealthCheck = r.InputHTTP.EnableHealthCheck.ValueBool()
		} else {
			enableHealthCheck = nil
		}
		ipAllowlistRegex := new(string)
		if !r.InputHTTP.IPAllowlistRegex.IsUnknown() && !r.InputHTTP.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex = r.InputHTTP.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex = nil
		}
		ipDenylistRegex := new(string)
		if !r.InputHTTP.IPDenylistRegex.IsUnknown() && !r.InputHTTP.IPDenylistRegex.IsNull() {
			*ipDenylistRegex = r.InputHTTP.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex = nil
		}
		criblAPI := new(string)
		if !r.InputHTTP.CriblAPI.IsUnknown() && !r.InputHTTP.CriblAPI.IsNull() {
			*criblAPI = r.InputHTTP.CriblAPI.ValueString()
		} else {
			criblAPI = nil
		}
		elasticAPI := new(string)
		if !r.InputHTTP.ElasticAPI.IsUnknown() && !r.InputHTTP.ElasticAPI.IsNull() {
			*elasticAPI = r.InputHTTP.ElasticAPI.ValueString()
		} else {
			elasticAPI = nil
		}
		splunkHecAPI := new(string)
		if !r.InputHTTP.SplunkHecAPI.IsUnknown() && !r.InputHTTP.SplunkHecAPI.IsNull() {
			*splunkHecAPI = r.InputHTTP.SplunkHecAPI.ValueString()
		} else {
			splunkHecAPI = nil
		}
		splunkHecAcks := new(bool)
		if !r.InputHTTP.SplunkHecAcks.IsUnknown() && !r.InputHTTP.SplunkHecAcks.IsNull() {
			*splunkHecAcks = r.InputHTTP.SplunkHecAcks.ValueBool()
		} else {
			splunkHecAcks = nil
		}
		metadata3 := make([]shared.InputHTTPMetadata, 0, len(r.InputHTTP.Metadata))
		for _, metadataItem3 := range r.InputHTTP.Metadata {
			var name3 string
			name3 = metadataItem3.Name.ValueString()

			var value3 string
			value3 = metadataItem3.Value.ValueString()

			metadata3 = append(metadata3, shared.InputHTTPMetadata{
				Name:  name3,
				Value: value3,
			})
		}
		authTokensExt := make([]shared.AuthTokensExt, 0, len(r.InputHTTP.AuthTokensExt))
		for _, authTokensExtItem := range r.InputHTTP.AuthTokensExt {
			var token string
			token = authTokensExtItem.Token.ValueString()

			description2 := new(string)
			if !authTokensExtItem.Description.IsUnknown() && !authTokensExtItem.Description.IsNull() {
				*description2 = authTokensExtItem.Description.ValueString()
			} else {
				description2 = nil
			}
			metadata4 := make([]shared.InputHTTPInputMetadata, 0, len(authTokensExtItem.Metadata))
			for _, metadataItem4 := range authTokensExtItem.Metadata {
				var name4 string
				name4 = metadataItem4.Name.ValueString()

				var value4 string
				value4 = metadataItem4.Value.ValueString()

				metadata4 = append(metadata4, shared.InputHTTPInputMetadata{
					Name:  name4,
					Value: value4,
				})
			}
			authTokensExt = append(authTokensExt, shared.AuthTokensExt{
				Token:       token,
				Description: description2,
				Metadata:    metadata4,
			})
		}
		description3 := new(string)
		if !r.InputHTTP.Description.IsUnknown() && !r.InputHTTP.Description.IsNull() {
			*description3 = r.InputHTTP.Description.ValueString()
		} else {
			description3 = nil
		}
		var status3 *shared.TFStatus
		if r.InputHTTP.Status != nil {
			health3 := shared.Health(r.InputHTTP.Status.Health.ValueString())
			metrics3 := make(map[string]interface{})
			for metricsKey3, metricsValue3 := range r.InputHTTP.Status.Metrics {
				var metricsInst3 interface{}
				_ = json.Unmarshal([]byte(metricsValue3.ValueString()), &metricsInst3)
				metrics3[metricsKey3] = metricsInst3
			}
			var timestamp3 float64
			timestamp3 = r.InputHTTP.Status.Timestamp.ValueFloat64()

			useStatusFromLb3 := new(bool)
			if !r.InputHTTP.Status.UseStatusFromLB.IsUnknown() && !r.InputHTTP.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb3 = r.InputHTTP.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb3 = nil
			}
			status3 = &shared.TFStatus{
				Health:          health3,
				Metrics:         metrics3,
				Timestamp:       timestamp3,
				UseStatusFromLB: useStatusFromLb3,
			}
		}
		inputHTTP = &shared.InputHTTP{
			ID:                    id3,
			Type:                  typeVar3,
			Disabled:              disabled13,
			Pipeline:              pipeline6,
			SendToRoutes:          sendToRoutes3,
			Environment:           environment3,
			PqEnabled:             pqEnabled3,
			Streamtags:            streamtags3,
			Connections:           connections3,
			Pq:                    pq3,
			Host:                  host,
			Port:                  port,
			AuthTokens:            authTokens,
			TLS:                   tls4,
			MaxActiveReq:          maxActiveReq,
			MaxRequestsPerSocket:  maxRequestsPerSocket,
			EnableProxyHeader:     enableProxyHeader,
			CaptureHeaders:        captureHeaders,
			ActivityLogSampleRate: activityLogSampleRate,
			RequestTimeout:        requestTimeout4,
			SocketTimeout:         socketTimeout,
			KeepAliveTimeout:      keepAliveTimeout,
			EnableHealthCheck:     enableHealthCheck,
			IPAllowlistRegex:      ipAllowlistRegex,
			IPDenylistRegex:       ipDenylistRegex,
			CriblAPI:              criblAPI,
			ElasticAPI:            elasticAPI,
			SplunkHecAPI:          splunkHecAPI,
			SplunkHecAcks:         splunkHecAcks,
			Metadata:              metadata3,
			AuthTokensExt:         authTokensExt,
			Description:           description3,
			Status:                status3,
		}
	}
	if inputHTTP != nil {
		out = shared.Input{
			InputHTTP: inputHTTP,
		}
	}
	var inputSplunk *shared.InputSplunk
	if r.InputSplunk != nil {
		id4 := new(string)
		if !r.InputSplunk.ID.IsUnknown() && !r.InputSplunk.ID.IsNull() {
			*id4 = r.InputSplunk.ID.ValueString()
		} else {
			id4 = nil
		}
		typeVar4 := new(shared.InputSplunkType)
		if !r.InputSplunk.Type.IsUnknown() && !r.InputSplunk.Type.IsNull() {
			*typeVar4 = shared.InputSplunkType(r.InputSplunk.Type.ValueString())
		} else {
			typeVar4 = nil
		}
		disabled15 := new(bool)
		if !r.InputSplunk.Disabled.IsUnknown() && !r.InputSplunk.Disabled.IsNull() {
			*disabled15 = r.InputSplunk.Disabled.ValueBool()
		} else {
			disabled15 = nil
		}
		pipeline8 := new(string)
		if !r.InputSplunk.Pipeline.IsUnknown() && !r.InputSplunk.Pipeline.IsNull() {
			*pipeline8 = r.InputSplunk.Pipeline.ValueString()
		} else {
			pipeline8 = nil
		}
		sendToRoutes4 := new(bool)
		if !r.InputSplunk.SendToRoutes.IsUnknown() && !r.InputSplunk.SendToRoutes.IsNull() {
			*sendToRoutes4 = r.InputSplunk.SendToRoutes.ValueBool()
		} else {
			sendToRoutes4 = nil
		}
		environment4 := new(string)
		if !r.InputSplunk.Environment.IsUnknown() && !r.InputSplunk.Environment.IsNull() {
			*environment4 = r.InputSplunk.Environment.ValueString()
		} else {
			environment4 = nil
		}
		pqEnabled4 := new(bool)
		if !r.InputSplunk.PqEnabled.IsUnknown() && !r.InputSplunk.PqEnabled.IsNull() {
			*pqEnabled4 = r.InputSplunk.PqEnabled.ValueBool()
		} else {
			pqEnabled4 = nil
		}
		streamtags4 := make([]string, 0, len(r.InputSplunk.Streamtags))
		for _, streamtagsItem4 := range r.InputSplunk.Streamtags {
			streamtags4 = append(streamtags4, streamtagsItem4.ValueString())
		}
		connections4 := make([]shared.InputSplunkConnections, 0, len(r.InputSplunk.Connections))
		for _, connectionsItem4 := range r.InputSplunk.Connections {
			pipeline9 := new(string)
			if !connectionsItem4.Pipeline.IsUnknown() && !connectionsItem4.Pipeline.IsNull() {
				*pipeline9 = connectionsItem4.Pipeline.ValueString()
			} else {
				pipeline9 = nil
			}
			var output5 string
			output5 = connectionsItem4.Output.ValueString()

			connections4 = append(connections4, shared.InputSplunkConnections{
				Pipeline: pipeline9,
				Output:   output5,
			})
		}
		var pq4 *shared.InputSplunkPq
		if r.InputSplunk.Pq != nil {
			mode4 := new(shared.InputSplunkMode)
			if !r.InputSplunk.Pq.Mode.IsUnknown() && !r.InputSplunk.Pq.Mode.IsNull() {
				*mode4 = shared.InputSplunkMode(r.InputSplunk.Pq.Mode.ValueString())
			} else {
				mode4 = nil
			}
			maxBufferSize4 := new(float64)
			if !r.InputSplunk.Pq.MaxBufferSize.IsUnknown() && !r.InputSplunk.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize4 = r.InputSplunk.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize4 = nil
			}
			commitFrequency4 := new(float64)
			if !r.InputSplunk.Pq.CommitFrequency.IsUnknown() && !r.InputSplunk.Pq.CommitFrequency.IsNull() {
				*commitFrequency4 = r.InputSplunk.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency4 = nil
			}
			maxFileSize4 := new(string)
			if !r.InputSplunk.Pq.MaxFileSize.IsUnknown() && !r.InputSplunk.Pq.MaxFileSize.IsNull() {
				*maxFileSize4 = r.InputSplunk.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize4 = nil
			}
			maxSize4 := new(string)
			if !r.InputSplunk.Pq.MaxSize.IsUnknown() && !r.InputSplunk.Pq.MaxSize.IsNull() {
				*maxSize4 = r.InputSplunk.Pq.MaxSize.ValueString()
			} else {
				maxSize4 = nil
			}
			path4 := new(string)
			if !r.InputSplunk.Pq.Path.IsUnknown() && !r.InputSplunk.Pq.Path.IsNull() {
				*path4 = r.InputSplunk.Pq.Path.ValueString()
			} else {
				path4 = nil
			}
			compress4 := new(shared.InputSplunkCompression)
			if !r.InputSplunk.Pq.Compress.IsUnknown() && !r.InputSplunk.Pq.Compress.IsNull() {
				*compress4 = shared.InputSplunkCompression(r.InputSplunk.Pq.Compress.ValueString())
			} else {
				compress4 = nil
			}
			pq4 = &shared.InputSplunkPq{
				Mode:            mode4,
				MaxBufferSize:   maxBufferSize4,
				CommitFrequency: commitFrequency4,
				MaxFileSize:     maxFileSize4,
				MaxSize:         maxSize4,
				Path:            path4,
				Compress:        compress4,
			}
		}
		host1 := new(string)
		if !r.InputSplunk.Host.IsUnknown() && !r.InputSplunk.Host.IsNull() {
			*host1 = r.InputSplunk.Host.ValueString()
		} else {
			host1 = nil
		}
		var port1 float64
		port1 = r.InputSplunk.Port.ValueFloat64()

		var tls5 *shared.InputSplunkTLSSettingsServerSide
		if r.InputSplunk.TLS != nil {
			disabled16 := new(bool)
			if !r.InputSplunk.TLS.Disabled.IsUnknown() && !r.InputSplunk.TLS.Disabled.IsNull() {
				*disabled16 = r.InputSplunk.TLS.Disabled.ValueBool()
			} else {
				disabled16 = nil
			}
			certificateName5 := new(string)
			if !r.InputSplunk.TLS.CertificateName.IsUnknown() && !r.InputSplunk.TLS.CertificateName.IsNull() {
				*certificateName5 = r.InputSplunk.TLS.CertificateName.ValueString()
			} else {
				certificateName5 = nil
			}
			privKeyPath5 := new(string)
			if !r.InputSplunk.TLS.PrivKeyPath.IsUnknown() && !r.InputSplunk.TLS.PrivKeyPath.IsNull() {
				*privKeyPath5 = r.InputSplunk.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath5 = nil
			}
			passphrase5 := new(string)
			if !r.InputSplunk.TLS.Passphrase.IsUnknown() && !r.InputSplunk.TLS.Passphrase.IsNull() {
				*passphrase5 = r.InputSplunk.TLS.Passphrase.ValueString()
			} else {
				passphrase5 = nil
			}
			certPath5 := new(string)
			if !r.InputSplunk.TLS.CertPath.IsUnknown() && !r.InputSplunk.TLS.CertPath.IsNull() {
				*certPath5 = r.InputSplunk.TLS.CertPath.ValueString()
			} else {
				certPath5 = nil
			}
			caPath5 := new(string)
			if !r.InputSplunk.TLS.CaPath.IsUnknown() && !r.InputSplunk.TLS.CaPath.IsNull() {
				*caPath5 = r.InputSplunk.TLS.CaPath.ValueString()
			} else {
				caPath5 = nil
			}
			requestCert1 := new(bool)
			if !r.InputSplunk.TLS.RequestCert.IsUnknown() && !r.InputSplunk.TLS.RequestCert.IsNull() {
				*requestCert1 = r.InputSplunk.TLS.RequestCert.ValueBool()
			} else {
				requestCert1 = nil
			}
			var rejectUnauthorized6 interface{}
			if !r.InputSplunk.TLS.RejectUnauthorized.IsUnknown() && !r.InputSplunk.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputSplunk.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized6)
			}
			var commonNameRegex1 interface{}
			if !r.InputSplunk.TLS.CommonNameRegex.IsUnknown() && !r.InputSplunk.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputSplunk.TLS.CommonNameRegex.ValueString()), &commonNameRegex1)
			}
			minVersion5 := new(shared.InputSplunkMinimumTLSVersion)
			if !r.InputSplunk.TLS.MinVersion.IsUnknown() && !r.InputSplunk.TLS.MinVersion.IsNull() {
				*minVersion5 = shared.InputSplunkMinimumTLSVersion(r.InputSplunk.TLS.MinVersion.ValueString())
			} else {
				minVersion5 = nil
			}
			maxVersion5 := new(shared.InputSplunkMaximumTLSVersion)
			if !r.InputSplunk.TLS.MaxVersion.IsUnknown() && !r.InputSplunk.TLS.MaxVersion.IsNull() {
				*maxVersion5 = shared.InputSplunkMaximumTLSVersion(r.InputSplunk.TLS.MaxVersion.ValueString())
			} else {
				maxVersion5 = nil
			}
			tls5 = &shared.InputSplunkTLSSettingsServerSide{
				Disabled:           disabled16,
				CertificateName:    certificateName5,
				PrivKeyPath:        privKeyPath5,
				Passphrase:         passphrase5,
				CertPath:           certPath5,
				CaPath:             caPath5,
				RequestCert:        requestCert1,
				RejectUnauthorized: rejectUnauthorized6,
				CommonNameRegex:    commonNameRegex1,
				MinVersion:         minVersion5,
				MaxVersion:         maxVersion5,
			}
		}
		ipWhitelistRegex := new(string)
		if !r.InputSplunk.IPWhitelistRegex.IsUnknown() && !r.InputSplunk.IPWhitelistRegex.IsNull() {
			*ipWhitelistRegex = r.InputSplunk.IPWhitelistRegex.ValueString()
		} else {
			ipWhitelistRegex = nil
		}
		maxActiveCxn := new(float64)
		if !r.InputSplunk.MaxActiveCxn.IsUnknown() && !r.InputSplunk.MaxActiveCxn.IsNull() {
			*maxActiveCxn = r.InputSplunk.MaxActiveCxn.ValueFloat64()
		} else {
			maxActiveCxn = nil
		}
		socketIdleTimeout := new(float64)
		if !r.InputSplunk.SocketIdleTimeout.IsUnknown() && !r.InputSplunk.SocketIdleTimeout.IsNull() {
			*socketIdleTimeout = r.InputSplunk.SocketIdleTimeout.ValueFloat64()
		} else {
			socketIdleTimeout = nil
		}
		socketEndingMaxWait := new(float64)
		if !r.InputSplunk.SocketEndingMaxWait.IsUnknown() && !r.InputSplunk.SocketEndingMaxWait.IsNull() {
			*socketEndingMaxWait = r.InputSplunk.SocketEndingMaxWait.ValueFloat64()
		} else {
			socketEndingMaxWait = nil
		}
		socketMaxLifespan := new(float64)
		if !r.InputSplunk.SocketMaxLifespan.IsUnknown() && !r.InputSplunk.SocketMaxLifespan.IsNull() {
			*socketMaxLifespan = r.InputSplunk.SocketMaxLifespan.ValueFloat64()
		} else {
			socketMaxLifespan = nil
		}
		enableProxyHeader1 := new(bool)
		if !r.InputSplunk.EnableProxyHeader.IsUnknown() && !r.InputSplunk.EnableProxyHeader.IsNull() {
			*enableProxyHeader1 = r.InputSplunk.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader1 = nil
		}
		metadata5 := make([]shared.InputSplunkMetadata, 0, len(r.InputSplunk.Metadata))
		for _, metadataItem5 := range r.InputSplunk.Metadata {
			var name5 string
			name5 = metadataItem5.Name.ValueString()

			var value5 string
			value5 = metadataItem5.Value.ValueString()

			metadata5 = append(metadata5, shared.InputSplunkMetadata{
				Name:  name5,
				Value: value5,
			})
		}
		breakerRulesets1 := make([]string, 0, len(r.InputSplunk.BreakerRulesets))
		for _, breakerRulesetsItem1 := range r.InputSplunk.BreakerRulesets {
			breakerRulesets1 = append(breakerRulesets1, breakerRulesetsItem1.ValueString())
		}
		staleChannelFlushMs1 := new(float64)
		if !r.InputSplunk.StaleChannelFlushMs.IsUnknown() && !r.InputSplunk.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs1 = r.InputSplunk.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs1 = nil
		}
		authTokens1 := make([]shared.AuthTokens, 0, len(r.InputSplunk.AuthTokens))
		for _, authTokensItem1 := range r.InputSplunk.AuthTokens {
			var token1 string
			token1 = authTokensItem1.Token.ValueString()

			description4 := new(string)
			if !authTokensItem1.Description.IsUnknown() && !authTokensItem1.Description.IsNull() {
				*description4 = authTokensItem1.Description.ValueString()
			} else {
				description4 = nil
			}
			authTokens1 = append(authTokens1, shared.AuthTokens{
				Token:       token1,
				Description: description4,
			})
		}
		maxS2Sversion := new(shared.MaxS2SVersion)
		if !r.InputSplunk.MaxS2Sversion.IsUnknown() && !r.InputSplunk.MaxS2Sversion.IsNull() {
			*maxS2Sversion = shared.MaxS2SVersion(r.InputSplunk.MaxS2Sversion.ValueString())
		} else {
			maxS2Sversion = nil
		}
		description5 := new(string)
		if !r.InputSplunk.Description.IsUnknown() && !r.InputSplunk.Description.IsNull() {
			*description5 = r.InputSplunk.Description.ValueString()
		} else {
			description5 = nil
		}
		useFwdTimezone := new(bool)
		if !r.InputSplunk.UseFwdTimezone.IsUnknown() && !r.InputSplunk.UseFwdTimezone.IsNull() {
			*useFwdTimezone = r.InputSplunk.UseFwdTimezone.ValueBool()
		} else {
			useFwdTimezone = nil
		}
		dropControlFields := new(bool)
		if !r.InputSplunk.DropControlFields.IsUnknown() && !r.InputSplunk.DropControlFields.IsNull() {
			*dropControlFields = r.InputSplunk.DropControlFields.ValueBool()
		} else {
			dropControlFields = nil
		}
		extractMetrics := new(bool)
		if !r.InputSplunk.ExtractMetrics.IsUnknown() && !r.InputSplunk.ExtractMetrics.IsNull() {
			*extractMetrics = r.InputSplunk.ExtractMetrics.ValueBool()
		} else {
			extractMetrics = nil
		}
		compress5 := new(shared.Compression)
		if !r.InputSplunk.Compress.IsUnknown() && !r.InputSplunk.Compress.IsNull() {
			*compress5 = shared.Compression(r.InputSplunk.Compress.ValueString())
		} else {
			compress5 = nil
		}
		var status4 *shared.TFStatus
		if r.InputSplunk.Status != nil {
			health4 := shared.Health(r.InputSplunk.Status.Health.ValueString())
			metrics4 := make(map[string]interface{})
			for metricsKey4, metricsValue4 := range r.InputSplunk.Status.Metrics {
				var metricsInst4 interface{}
				_ = json.Unmarshal([]byte(metricsValue4.ValueString()), &metricsInst4)
				metrics4[metricsKey4] = metricsInst4
			}
			var timestamp4 float64
			timestamp4 = r.InputSplunk.Status.Timestamp.ValueFloat64()

			useStatusFromLb4 := new(bool)
			if !r.InputSplunk.Status.UseStatusFromLB.IsUnknown() && !r.InputSplunk.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb4 = r.InputSplunk.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb4 = nil
			}
			status4 = &shared.TFStatus{
				Health:          health4,
				Metrics:         metrics4,
				Timestamp:       timestamp4,
				UseStatusFromLB: useStatusFromLb4,
			}
		}
		inputSplunk = &shared.InputSplunk{
			ID:                  id4,
			Type:                typeVar4,
			Disabled:            disabled15,
			Pipeline:            pipeline8,
			SendToRoutes:        sendToRoutes4,
			Environment:         environment4,
			PqEnabled:           pqEnabled4,
			Streamtags:          streamtags4,
			Connections:         connections4,
			Pq:                  pq4,
			Host:                host1,
			Port:                port1,
			TLS:                 tls5,
			IPWhitelistRegex:    ipWhitelistRegex,
			MaxActiveCxn:        maxActiveCxn,
			SocketIdleTimeout:   socketIdleTimeout,
			SocketEndingMaxWait: socketEndingMaxWait,
			SocketMaxLifespan:   socketMaxLifespan,
			EnableProxyHeader:   enableProxyHeader1,
			Metadata:            metadata5,
			BreakerRulesets:     breakerRulesets1,
			StaleChannelFlushMs: staleChannelFlushMs1,
			AuthTokens:          authTokens1,
			MaxS2Sversion:       maxS2Sversion,
			Description:         description5,
			UseFwdTimezone:      useFwdTimezone,
			DropControlFields:   dropControlFields,
			ExtractMetrics:      extractMetrics,
			Compress:            compress5,
			Status:              status4,
		}
	}
	if inputSplunk != nil {
		out = shared.Input{
			InputSplunk: inputSplunk,
		}
	}
	var inputSplunkSearch *shared.InputSplunkSearch
	if r.InputSplunkSearch != nil {
		id5 := new(string)
		if !r.InputSplunkSearch.ID.IsUnknown() && !r.InputSplunkSearch.ID.IsNull() {
			*id5 = r.InputSplunkSearch.ID.ValueString()
		} else {
			id5 = nil
		}
		typeVar5 := new(shared.InputSplunkSearchType)
		if !r.InputSplunkSearch.Type.IsUnknown() && !r.InputSplunkSearch.Type.IsNull() {
			*typeVar5 = shared.InputSplunkSearchType(r.InputSplunkSearch.Type.ValueString())
		} else {
			typeVar5 = nil
		}
		disabled17 := new(bool)
		if !r.InputSplunkSearch.Disabled.IsUnknown() && !r.InputSplunkSearch.Disabled.IsNull() {
			*disabled17 = r.InputSplunkSearch.Disabled.ValueBool()
		} else {
			disabled17 = nil
		}
		pipeline10 := new(string)
		if !r.InputSplunkSearch.Pipeline.IsUnknown() && !r.InputSplunkSearch.Pipeline.IsNull() {
			*pipeline10 = r.InputSplunkSearch.Pipeline.ValueString()
		} else {
			pipeline10 = nil
		}
		sendToRoutes5 := new(bool)
		if !r.InputSplunkSearch.SendToRoutes.IsUnknown() && !r.InputSplunkSearch.SendToRoutes.IsNull() {
			*sendToRoutes5 = r.InputSplunkSearch.SendToRoutes.ValueBool()
		} else {
			sendToRoutes5 = nil
		}
		environment5 := new(string)
		if !r.InputSplunkSearch.Environment.IsUnknown() && !r.InputSplunkSearch.Environment.IsNull() {
			*environment5 = r.InputSplunkSearch.Environment.ValueString()
		} else {
			environment5 = nil
		}
		pqEnabled5 := new(bool)
		if !r.InputSplunkSearch.PqEnabled.IsUnknown() && !r.InputSplunkSearch.PqEnabled.IsNull() {
			*pqEnabled5 = r.InputSplunkSearch.PqEnabled.ValueBool()
		} else {
			pqEnabled5 = nil
		}
		streamtags5 := make([]string, 0, len(r.InputSplunkSearch.Streamtags))
		for _, streamtagsItem5 := range r.InputSplunkSearch.Streamtags {
			streamtags5 = append(streamtags5, streamtagsItem5.ValueString())
		}
		connections5 := make([]shared.InputSplunkSearchConnections, 0, len(r.InputSplunkSearch.Connections))
		for _, connectionsItem5 := range r.InputSplunkSearch.Connections {
			pipeline11 := new(string)
			if !connectionsItem5.Pipeline.IsUnknown() && !connectionsItem5.Pipeline.IsNull() {
				*pipeline11 = connectionsItem5.Pipeline.ValueString()
			} else {
				pipeline11 = nil
			}
			var output6 string
			output6 = connectionsItem5.Output.ValueString()

			connections5 = append(connections5, shared.InputSplunkSearchConnections{
				Pipeline: pipeline11,
				Output:   output6,
			})
		}
		var pq5 *shared.InputSplunkSearchPq
		if r.InputSplunkSearch.Pq != nil {
			mode5 := new(shared.InputSplunkSearchMode)
			if !r.InputSplunkSearch.Pq.Mode.IsUnknown() && !r.InputSplunkSearch.Pq.Mode.IsNull() {
				*mode5 = shared.InputSplunkSearchMode(r.InputSplunkSearch.Pq.Mode.ValueString())
			} else {
				mode5 = nil
			}
			maxBufferSize5 := new(float64)
			if !r.InputSplunkSearch.Pq.MaxBufferSize.IsUnknown() && !r.InputSplunkSearch.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize5 = r.InputSplunkSearch.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize5 = nil
			}
			commitFrequency5 := new(float64)
			if !r.InputSplunkSearch.Pq.CommitFrequency.IsUnknown() && !r.InputSplunkSearch.Pq.CommitFrequency.IsNull() {
				*commitFrequency5 = r.InputSplunkSearch.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency5 = nil
			}
			maxFileSize5 := new(string)
			if !r.InputSplunkSearch.Pq.MaxFileSize.IsUnknown() && !r.InputSplunkSearch.Pq.MaxFileSize.IsNull() {
				*maxFileSize5 = r.InputSplunkSearch.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize5 = nil
			}
			maxSize5 := new(string)
			if !r.InputSplunkSearch.Pq.MaxSize.IsUnknown() && !r.InputSplunkSearch.Pq.MaxSize.IsNull() {
				*maxSize5 = r.InputSplunkSearch.Pq.MaxSize.ValueString()
			} else {
				maxSize5 = nil
			}
			path5 := new(string)
			if !r.InputSplunkSearch.Pq.Path.IsUnknown() && !r.InputSplunkSearch.Pq.Path.IsNull() {
				*path5 = r.InputSplunkSearch.Pq.Path.ValueString()
			} else {
				path5 = nil
			}
			compress6 := new(shared.InputSplunkSearchCompression)
			if !r.InputSplunkSearch.Pq.Compress.IsUnknown() && !r.InputSplunkSearch.Pq.Compress.IsNull() {
				*compress6 = shared.InputSplunkSearchCompression(r.InputSplunkSearch.Pq.Compress.ValueString())
			} else {
				compress6 = nil
			}
			pq5 = &shared.InputSplunkSearchPq{
				Mode:            mode5,
				MaxBufferSize:   maxBufferSize5,
				CommitFrequency: commitFrequency5,
				MaxFileSize:     maxFileSize5,
				MaxSize:         maxSize5,
				Path:            path5,
				Compress:        compress6,
			}
		}
		searchHead := new(string)
		if !r.InputSplunkSearch.SearchHead.IsUnknown() && !r.InputSplunkSearch.SearchHead.IsNull() {
			*searchHead = r.InputSplunkSearch.SearchHead.ValueString()
		} else {
			searchHead = nil
		}
		var search string
		search = r.InputSplunkSearch.Search.ValueString()

		earliest := new(string)
		if !r.InputSplunkSearch.Earliest.IsUnknown() && !r.InputSplunkSearch.Earliest.IsNull() {
			*earliest = r.InputSplunkSearch.Earliest.ValueString()
		} else {
			earliest = nil
		}
		latest := new(string)
		if !r.InputSplunkSearch.Latest.IsUnknown() && !r.InputSplunkSearch.Latest.IsNull() {
			*latest = r.InputSplunkSearch.Latest.ValueString()
		} else {
			latest = nil
		}
		cronSchedule := new(string)
		if !r.InputSplunkSearch.CronSchedule.IsUnknown() && !r.InputSplunkSearch.CronSchedule.IsNull() {
			*cronSchedule = r.InputSplunkSearch.CronSchedule.ValueString()
		} else {
			cronSchedule = nil
		}
		endpoint1 := new(string)
		if !r.InputSplunkSearch.Endpoint.IsUnknown() && !r.InputSplunkSearch.Endpoint.IsNull() {
			*endpoint1 = r.InputSplunkSearch.Endpoint.ValueString()
		} else {
			endpoint1 = nil
		}
		outputMode := new(shared.OutputMode)
		if !r.InputSplunkSearch.OutputMode.IsUnknown() && !r.InputSplunkSearch.OutputMode.IsNull() {
			*outputMode = shared.OutputMode(r.InputSplunkSearch.OutputMode.ValueString())
		} else {
			outputMode = nil
		}
		endpointParams := make([]shared.EndpointParams, 0, len(r.InputSplunkSearch.EndpointParams))
		for _, endpointParamsItem := range r.InputSplunkSearch.EndpointParams {
			var name6 string
			name6 = endpointParamsItem.Name.ValueString()

			var value6 string
			value6 = endpointParamsItem.Value.ValueString()

			endpointParams = append(endpointParams, shared.EndpointParams{
				Name:  name6,
				Value: value6,
			})
		}
		endpointHeaders := make([]shared.EndpointHeaders, 0, len(r.InputSplunkSearch.EndpointHeaders))
		for _, endpointHeadersItem := range r.InputSplunkSearch.EndpointHeaders {
			var name7 string
			name7 = endpointHeadersItem.Name.ValueString()

			var value7 string
			value7 = endpointHeadersItem.Value.ValueString()

			endpointHeaders = append(endpointHeaders, shared.EndpointHeaders{
				Name:  name7,
				Value: value7,
			})
		}
		logLevel := new(shared.InputSplunkSearchLogLevel)
		if !r.InputSplunkSearch.LogLevel.IsUnknown() && !r.InputSplunkSearch.LogLevel.IsNull() {
			*logLevel = shared.InputSplunkSearchLogLevel(r.InputSplunkSearch.LogLevel.ValueString())
		} else {
			logLevel = nil
		}
		requestTimeout5 := new(float64)
		if !r.InputSplunkSearch.RequestTimeout.IsUnknown() && !r.InputSplunkSearch.RequestTimeout.IsNull() {
			*requestTimeout5 = r.InputSplunkSearch.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout5 = nil
		}
		useRoundRobinDNS := new(bool)
		if !r.InputSplunkSearch.UseRoundRobinDNS.IsUnknown() && !r.InputSplunkSearch.UseRoundRobinDNS.IsNull() {
			*useRoundRobinDNS = r.InputSplunkSearch.UseRoundRobinDNS.ValueBool()
		} else {
			useRoundRobinDNS = nil
		}
		rejectUnauthorized7 := new(bool)
		if !r.InputSplunkSearch.RejectUnauthorized.IsUnknown() && !r.InputSplunkSearch.RejectUnauthorized.IsNull() {
			*rejectUnauthorized7 = r.InputSplunkSearch.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized7 = nil
		}
		encoding := new(string)
		if !r.InputSplunkSearch.Encoding.IsUnknown() && !r.InputSplunkSearch.Encoding.IsNull() {
			*encoding = r.InputSplunkSearch.Encoding.ValueString()
		} else {
			encoding = nil
		}
		keepAliveTime := new(float64)
		if !r.InputSplunkSearch.KeepAliveTime.IsUnknown() && !r.InputSplunkSearch.KeepAliveTime.IsNull() {
			*keepAliveTime = r.InputSplunkSearch.KeepAliveTime.ValueFloat64()
		} else {
			keepAliveTime = nil
		}
		jobTimeout := new(string)
		if !r.InputSplunkSearch.JobTimeout.IsUnknown() && !r.InputSplunkSearch.JobTimeout.IsNull() {
			*jobTimeout = r.InputSplunkSearch.JobTimeout.ValueString()
		} else {
			jobTimeout = nil
		}
		maxMissedKeepAlives := new(float64)
		if !r.InputSplunkSearch.MaxMissedKeepAlives.IsUnknown() && !r.InputSplunkSearch.MaxMissedKeepAlives.IsNull() {
			*maxMissedKeepAlives = r.InputSplunkSearch.MaxMissedKeepAlives.ValueFloat64()
		} else {
			maxMissedKeepAlives = nil
		}
		ttl := new(string)
		if !r.InputSplunkSearch.TTL.IsUnknown() && !r.InputSplunkSearch.TTL.IsNull() {
			*ttl = r.InputSplunkSearch.TTL.ValueString()
		} else {
			ttl = nil
		}
		metadata6 := make([]shared.InputSplunkSearchMetadata, 0, len(r.InputSplunkSearch.Metadata))
		for _, metadataItem6 := range r.InputSplunkSearch.Metadata {
			var name8 string
			name8 = metadataItem6.Name.ValueString()

			var value8 string
			value8 = metadataItem6.Value.ValueString()

			metadata6 = append(metadata6, shared.InputSplunkSearchMetadata{
				Name:  name8,
				Value: value8,
			})
		}
		var retryRules *shared.RetryRules
		if r.InputSplunkSearch.RetryRules != nil {
			typeVar6 := new(shared.RetryType)
			if !r.InputSplunkSearch.RetryRules.Type.IsUnknown() && !r.InputSplunkSearch.RetryRules.Type.IsNull() {
				*typeVar6 = shared.RetryType(r.InputSplunkSearch.RetryRules.Type.ValueString())
			} else {
				typeVar6 = nil
			}
			interval := new(float64)
			if !r.InputSplunkSearch.RetryRules.Interval.IsUnknown() && !r.InputSplunkSearch.RetryRules.Interval.IsNull() {
				*interval = r.InputSplunkSearch.RetryRules.Interval.ValueFloat64()
			} else {
				interval = nil
			}
			limit := new(float64)
			if !r.InputSplunkSearch.RetryRules.Limit.IsUnknown() && !r.InputSplunkSearch.RetryRules.Limit.IsNull() {
				*limit = r.InputSplunkSearch.RetryRules.Limit.ValueFloat64()
			} else {
				limit = nil
			}
			multiplier := new(float64)
			if !r.InputSplunkSearch.RetryRules.Multiplier.IsUnknown() && !r.InputSplunkSearch.RetryRules.Multiplier.IsNull() {
				*multiplier = r.InputSplunkSearch.RetryRules.Multiplier.ValueFloat64()
			} else {
				multiplier = nil
			}
			codes := make([]float64, 0, len(r.InputSplunkSearch.RetryRules.Codes))
			for _, codesItem := range r.InputSplunkSearch.RetryRules.Codes {
				codes = append(codes, codesItem.ValueFloat64())
			}
			enableHeader := new(bool)
			if !r.InputSplunkSearch.RetryRules.EnableHeader.IsUnknown() && !r.InputSplunkSearch.RetryRules.EnableHeader.IsNull() {
				*enableHeader = r.InputSplunkSearch.RetryRules.EnableHeader.ValueBool()
			} else {
				enableHeader = nil
			}
			retryConnectTimeout := new(bool)
			if !r.InputSplunkSearch.RetryRules.RetryConnectTimeout.IsUnknown() && !r.InputSplunkSearch.RetryRules.RetryConnectTimeout.IsNull() {
				*retryConnectTimeout = r.InputSplunkSearch.RetryRules.RetryConnectTimeout.ValueBool()
			} else {
				retryConnectTimeout = nil
			}
			retryConnectReset := new(bool)
			if !r.InputSplunkSearch.RetryRules.RetryConnectReset.IsUnknown() && !r.InputSplunkSearch.RetryRules.RetryConnectReset.IsNull() {
				*retryConnectReset = r.InputSplunkSearch.RetryRules.RetryConnectReset.ValueBool()
			} else {
				retryConnectReset = nil
			}
			retryRules = &shared.RetryRules{
				Type:                typeVar6,
				Interval:            interval,
				Limit:               limit,
				Multiplier:          multiplier,
				Codes:               codes,
				EnableHeader:        enableHeader,
				RetryConnectTimeout: retryConnectTimeout,
				RetryConnectReset:   retryConnectReset,
			}
		}
		breakerRulesets2 := make([]string, 0, len(r.InputSplunkSearch.BreakerRulesets))
		for _, breakerRulesetsItem2 := range r.InputSplunkSearch.BreakerRulesets {
			breakerRulesets2 = append(breakerRulesets2, breakerRulesetsItem2.ValueString())
		}
		staleChannelFlushMs2 := new(float64)
		if !r.InputSplunkSearch.StaleChannelFlushMs.IsUnknown() && !r.InputSplunkSearch.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs2 = r.InputSplunkSearch.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs2 = nil
		}
		authType := new(shared.AuthenticationType)
		if !r.InputSplunkSearch.AuthType.IsUnknown() && !r.InputSplunkSearch.AuthType.IsNull() {
			*authType = shared.AuthenticationType(r.InputSplunkSearch.AuthType.ValueString())
		} else {
			authType = nil
		}
		description6 := new(string)
		if !r.InputSplunkSearch.Description.IsUnknown() && !r.InputSplunkSearch.Description.IsNull() {
			*description6 = r.InputSplunkSearch.Description.ValueString()
		} else {
			description6 = nil
		}
		username := new(string)
		if !r.InputSplunkSearch.Username.IsUnknown() && !r.InputSplunkSearch.Username.IsNull() {
			*username = r.InputSplunkSearch.Username.ValueString()
		} else {
			username = nil
		}
		password := new(string)
		if !r.InputSplunkSearch.Password.IsUnknown() && !r.InputSplunkSearch.Password.IsNull() {
			*password = r.InputSplunkSearch.Password.ValueString()
		} else {
			password = nil
		}
		token2 := new(string)
		if !r.InputSplunkSearch.Token.IsUnknown() && !r.InputSplunkSearch.Token.IsNull() {
			*token2 = r.InputSplunkSearch.Token.ValueString()
		} else {
			token2 = nil
		}
		credentialsSecret2 := new(string)
		if !r.InputSplunkSearch.CredentialsSecret.IsUnknown() && !r.InputSplunkSearch.CredentialsSecret.IsNull() {
			*credentialsSecret2 = r.InputSplunkSearch.CredentialsSecret.ValueString()
		} else {
			credentialsSecret2 = nil
		}
		textSecret := new(string)
		if !r.InputSplunkSearch.TextSecret.IsUnknown() && !r.InputSplunkSearch.TextSecret.IsNull() {
			*textSecret = r.InputSplunkSearch.TextSecret.ValueString()
		} else {
			textSecret = nil
		}
		loginURL := new(string)
		if !r.InputSplunkSearch.LoginURL.IsUnknown() && !r.InputSplunkSearch.LoginURL.IsNull() {
			*loginURL = r.InputSplunkSearch.LoginURL.ValueString()
		} else {
			loginURL = nil
		}
		secretParamName := new(string)
		if !r.InputSplunkSearch.SecretParamName.IsUnknown() && !r.InputSplunkSearch.SecretParamName.IsNull() {
			*secretParamName = r.InputSplunkSearch.SecretParamName.ValueString()
		} else {
			secretParamName = nil
		}
		secret := new(string)
		if !r.InputSplunkSearch.Secret.IsUnknown() && !r.InputSplunkSearch.Secret.IsNull() {
			*secret = r.InputSplunkSearch.Secret.ValueString()
		} else {
			secret = nil
		}
		tokenAttributeName := new(string)
		if !r.InputSplunkSearch.TokenAttributeName.IsUnknown() && !r.InputSplunkSearch.TokenAttributeName.IsNull() {
			*tokenAttributeName = r.InputSplunkSearch.TokenAttributeName.ValueString()
		} else {
			tokenAttributeName = nil
		}
		authHeaderExpr := new(string)
		if !r.InputSplunkSearch.AuthHeaderExpr.IsUnknown() && !r.InputSplunkSearch.AuthHeaderExpr.IsNull() {
			*authHeaderExpr = r.InputSplunkSearch.AuthHeaderExpr.ValueString()
		} else {
			authHeaderExpr = nil
		}
		tokenTimeoutSecs := new(float64)
		if !r.InputSplunkSearch.TokenTimeoutSecs.IsUnknown() && !r.InputSplunkSearch.TokenTimeoutSecs.IsNull() {
			*tokenTimeoutSecs = r.InputSplunkSearch.TokenTimeoutSecs.ValueFloat64()
		} else {
			tokenTimeoutSecs = nil
		}
		oauthParams := make([]shared.OauthParams, 0, len(r.InputSplunkSearch.OauthParams))
		for _, oauthParamsItem := range r.InputSplunkSearch.OauthParams {
			var name9 string
			name9 = oauthParamsItem.Name.ValueString()

			var value9 string
			value9 = oauthParamsItem.Value.ValueString()

			oauthParams = append(oauthParams, shared.OauthParams{
				Name:  name9,
				Value: value9,
			})
		}
		oauthHeaders := make([]shared.OauthHeaders, 0, len(r.InputSplunkSearch.OauthHeaders))
		for _, oauthHeadersItem := range r.InputSplunkSearch.OauthHeaders {
			var name10 string
			name10 = oauthHeadersItem.Name.ValueString()

			var value10 string
			value10 = oauthHeadersItem.Value.ValueString()

			oauthHeaders = append(oauthHeaders, shared.OauthHeaders{
				Name:  name10,
				Value: value10,
			})
		}
		var status5 *shared.TFStatus
		if r.InputSplunkSearch.Status != nil {
			health5 := shared.Health(r.InputSplunkSearch.Status.Health.ValueString())
			metrics5 := make(map[string]interface{})
			for metricsKey5, metricsValue5 := range r.InputSplunkSearch.Status.Metrics {
				var metricsInst5 interface{}
				_ = json.Unmarshal([]byte(metricsValue5.ValueString()), &metricsInst5)
				metrics5[metricsKey5] = metricsInst5
			}
			var timestamp5 float64
			timestamp5 = r.InputSplunkSearch.Status.Timestamp.ValueFloat64()

			useStatusFromLb5 := new(bool)
			if !r.InputSplunkSearch.Status.UseStatusFromLB.IsUnknown() && !r.InputSplunkSearch.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb5 = r.InputSplunkSearch.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb5 = nil
			}
			status5 = &shared.TFStatus{
				Health:          health5,
				Metrics:         metrics5,
				Timestamp:       timestamp5,
				UseStatusFromLB: useStatusFromLb5,
			}
		}
		inputSplunkSearch = &shared.InputSplunkSearch{
			ID:                  id5,
			Type:                typeVar5,
			Disabled:            disabled17,
			Pipeline:            pipeline10,
			SendToRoutes:        sendToRoutes5,
			Environment:         environment5,
			PqEnabled:           pqEnabled5,
			Streamtags:          streamtags5,
			Connections:         connections5,
			Pq:                  pq5,
			SearchHead:          searchHead,
			Search:              search,
			Earliest:            earliest,
			Latest:              latest,
			CronSchedule:        cronSchedule,
			Endpoint:            endpoint1,
			OutputMode:          outputMode,
			EndpointParams:      endpointParams,
			EndpointHeaders:     endpointHeaders,
			LogLevel:            logLevel,
			RequestTimeout:      requestTimeout5,
			UseRoundRobinDNS:    useRoundRobinDNS,
			RejectUnauthorized:  rejectUnauthorized7,
			Encoding:            encoding,
			KeepAliveTime:       keepAliveTime,
			JobTimeout:          jobTimeout,
			MaxMissedKeepAlives: maxMissedKeepAlives,
			TTL:                 ttl,
			Metadata:            metadata6,
			RetryRules:          retryRules,
			BreakerRulesets:     breakerRulesets2,
			StaleChannelFlushMs: staleChannelFlushMs2,
			AuthType:            authType,
			Description:         description6,
			Username:            username,
			Password:            password,
			Token:               token2,
			CredentialsSecret:   credentialsSecret2,
			TextSecret:          textSecret,
			LoginURL:            loginURL,
			SecretParamName:     secretParamName,
			Secret:              secret,
			TokenAttributeName:  tokenAttributeName,
			AuthHeaderExpr:      authHeaderExpr,
			TokenTimeoutSecs:    tokenTimeoutSecs,
			OauthParams:         oauthParams,
			OauthHeaders:        oauthHeaders,
			Status:              status5,
		}
	}
	if inputSplunkSearch != nil {
		out = shared.Input{
			InputSplunkSearch: inputSplunkSearch,
		}
	}
	var inputSplunkHec *shared.InputSplunkHec
	if r.InputSplunkHec != nil {
		id6 := new(string)
		if !r.InputSplunkHec.ID.IsUnknown() && !r.InputSplunkHec.ID.IsNull() {
			*id6 = r.InputSplunkHec.ID.ValueString()
		} else {
			id6 = nil
		}
		typeVar7 := new(shared.InputSplunkHecType)
		if !r.InputSplunkHec.Type.IsUnknown() && !r.InputSplunkHec.Type.IsNull() {
			*typeVar7 = shared.InputSplunkHecType(r.InputSplunkHec.Type.ValueString())
		} else {
			typeVar7 = nil
		}
		disabled18 := new(bool)
		if !r.InputSplunkHec.Disabled.IsUnknown() && !r.InputSplunkHec.Disabled.IsNull() {
			*disabled18 = r.InputSplunkHec.Disabled.ValueBool()
		} else {
			disabled18 = nil
		}
		pipeline12 := new(string)
		if !r.InputSplunkHec.Pipeline.IsUnknown() && !r.InputSplunkHec.Pipeline.IsNull() {
			*pipeline12 = r.InputSplunkHec.Pipeline.ValueString()
		} else {
			pipeline12 = nil
		}
		sendToRoutes6 := new(bool)
		if !r.InputSplunkHec.SendToRoutes.IsUnknown() && !r.InputSplunkHec.SendToRoutes.IsNull() {
			*sendToRoutes6 = r.InputSplunkHec.SendToRoutes.ValueBool()
		} else {
			sendToRoutes6 = nil
		}
		environment6 := new(string)
		if !r.InputSplunkHec.Environment.IsUnknown() && !r.InputSplunkHec.Environment.IsNull() {
			*environment6 = r.InputSplunkHec.Environment.ValueString()
		} else {
			environment6 = nil
		}
		pqEnabled6 := new(bool)
		if !r.InputSplunkHec.PqEnabled.IsUnknown() && !r.InputSplunkHec.PqEnabled.IsNull() {
			*pqEnabled6 = r.InputSplunkHec.PqEnabled.ValueBool()
		} else {
			pqEnabled6 = nil
		}
		streamtags6 := make([]string, 0, len(r.InputSplunkHec.Streamtags))
		for _, streamtagsItem6 := range r.InputSplunkHec.Streamtags {
			streamtags6 = append(streamtags6, streamtagsItem6.ValueString())
		}
		connections6 := make([]shared.InputSplunkHecConnections, 0, len(r.InputSplunkHec.Connections))
		for _, connectionsItem6 := range r.InputSplunkHec.Connections {
			pipeline13 := new(string)
			if !connectionsItem6.Pipeline.IsUnknown() && !connectionsItem6.Pipeline.IsNull() {
				*pipeline13 = connectionsItem6.Pipeline.ValueString()
			} else {
				pipeline13 = nil
			}
			var output7 string
			output7 = connectionsItem6.Output.ValueString()

			connections6 = append(connections6, shared.InputSplunkHecConnections{
				Pipeline: pipeline13,
				Output:   output7,
			})
		}
		var pq6 *shared.InputSplunkHecPq
		if r.InputSplunkHec.Pq != nil {
			mode6 := new(shared.InputSplunkHecMode)
			if !r.InputSplunkHec.Pq.Mode.IsUnknown() && !r.InputSplunkHec.Pq.Mode.IsNull() {
				*mode6 = shared.InputSplunkHecMode(r.InputSplunkHec.Pq.Mode.ValueString())
			} else {
				mode6 = nil
			}
			maxBufferSize6 := new(float64)
			if !r.InputSplunkHec.Pq.MaxBufferSize.IsUnknown() && !r.InputSplunkHec.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize6 = r.InputSplunkHec.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize6 = nil
			}
			commitFrequency6 := new(float64)
			if !r.InputSplunkHec.Pq.CommitFrequency.IsUnknown() && !r.InputSplunkHec.Pq.CommitFrequency.IsNull() {
				*commitFrequency6 = r.InputSplunkHec.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency6 = nil
			}
			maxFileSize6 := new(string)
			if !r.InputSplunkHec.Pq.MaxFileSize.IsUnknown() && !r.InputSplunkHec.Pq.MaxFileSize.IsNull() {
				*maxFileSize6 = r.InputSplunkHec.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize6 = nil
			}
			maxSize6 := new(string)
			if !r.InputSplunkHec.Pq.MaxSize.IsUnknown() && !r.InputSplunkHec.Pq.MaxSize.IsNull() {
				*maxSize6 = r.InputSplunkHec.Pq.MaxSize.ValueString()
			} else {
				maxSize6 = nil
			}
			path6 := new(string)
			if !r.InputSplunkHec.Pq.Path.IsUnknown() && !r.InputSplunkHec.Pq.Path.IsNull() {
				*path6 = r.InputSplunkHec.Pq.Path.ValueString()
			} else {
				path6 = nil
			}
			compress7 := new(shared.InputSplunkHecCompression)
			if !r.InputSplunkHec.Pq.Compress.IsUnknown() && !r.InputSplunkHec.Pq.Compress.IsNull() {
				*compress7 = shared.InputSplunkHecCompression(r.InputSplunkHec.Pq.Compress.ValueString())
			} else {
				compress7 = nil
			}
			pq6 = &shared.InputSplunkHecPq{
				Mode:            mode6,
				MaxBufferSize:   maxBufferSize6,
				CommitFrequency: commitFrequency6,
				MaxFileSize:     maxFileSize6,
				MaxSize:         maxSize6,
				Path:            path6,
				Compress:        compress7,
			}
		}
		host2 := new(string)
		if !r.InputSplunkHec.Host.IsUnknown() && !r.InputSplunkHec.Host.IsNull() {
			*host2 = r.InputSplunkHec.Host.ValueString()
		} else {
			host2 = nil
		}
		var port2 float64
		port2 = r.InputSplunkHec.Port.ValueFloat64()

		authTokens2 := make([]shared.InputSplunkHecAuthTokens, 0, len(r.InputSplunkHec.AuthTokens))
		for _, authTokensItem2 := range r.InputSplunkHec.AuthTokens {
			authType1 := new(shared.InputSplunkHecAuthenticationMethod)
			if !authTokensItem2.AuthType.IsUnknown() && !authTokensItem2.AuthType.IsNull() {
				*authType1 = shared.InputSplunkHecAuthenticationMethod(authTokensItem2.AuthType.ValueString())
			} else {
				authType1 = nil
			}
			var tokenSecret interface{}
			if !authTokensItem2.TokenSecret.IsUnknown() && !authTokensItem2.TokenSecret.IsNull() {
				_ = json.Unmarshal([]byte(authTokensItem2.TokenSecret.ValueString()), &tokenSecret)
			}
			var token3 interface{}
			_ = json.Unmarshal([]byte(authTokensItem2.Token.ValueString()), &token3)
			enabled := new(bool)
			if !authTokensItem2.Enabled.IsUnknown() && !authTokensItem2.Enabled.IsNull() {
				*enabled = authTokensItem2.Enabled.ValueBool()
			} else {
				enabled = nil
			}
			description7 := new(string)
			if !authTokensItem2.Description.IsUnknown() && !authTokensItem2.Description.IsNull() {
				*description7 = authTokensItem2.Description.ValueString()
			} else {
				description7 = nil
			}
			allowedIndexesAtToken := make([]string, 0, len(authTokensItem2.AllowedIndexesAtToken))
			for _, allowedIndexesAtTokenItem := range authTokensItem2.AllowedIndexesAtToken {
				allowedIndexesAtToken = append(allowedIndexesAtToken, allowedIndexesAtTokenItem.ValueString())
			}
			metadata7 := make([]shared.InputSplunkHecInputMetadata, 0, len(authTokensItem2.Metadata))
			for _, metadataItem7 := range authTokensItem2.Metadata {
				var name11 string
				name11 = metadataItem7.Name.ValueString()

				var value11 string
				value11 = metadataItem7.Value.ValueString()

				metadata7 = append(metadata7, shared.InputSplunkHecInputMetadata{
					Name:  name11,
					Value: value11,
				})
			}
			authTokens2 = append(authTokens2, shared.InputSplunkHecAuthTokens{
				AuthType:              authType1,
				TokenSecret:           tokenSecret,
				Token:                 token3,
				Enabled:               enabled,
				Description:           description7,
				AllowedIndexesAtToken: allowedIndexesAtToken,
				Metadata:              metadata7,
			})
		}
		var tls6 *shared.InputSplunkHecTLSSettingsServerSide
		if r.InputSplunkHec.TLS != nil {
			disabled19 := new(bool)
			if !r.InputSplunkHec.TLS.Disabled.IsUnknown() && !r.InputSplunkHec.TLS.Disabled.IsNull() {
				*disabled19 = r.InputSplunkHec.TLS.Disabled.ValueBool()
			} else {
				disabled19 = nil
			}
			certificateName6 := new(string)
			if !r.InputSplunkHec.TLS.CertificateName.IsUnknown() && !r.InputSplunkHec.TLS.CertificateName.IsNull() {
				*certificateName6 = r.InputSplunkHec.TLS.CertificateName.ValueString()
			} else {
				certificateName6 = nil
			}
			privKeyPath6 := new(string)
			if !r.InputSplunkHec.TLS.PrivKeyPath.IsUnknown() && !r.InputSplunkHec.TLS.PrivKeyPath.IsNull() {
				*privKeyPath6 = r.InputSplunkHec.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath6 = nil
			}
			passphrase6 := new(string)
			if !r.InputSplunkHec.TLS.Passphrase.IsUnknown() && !r.InputSplunkHec.TLS.Passphrase.IsNull() {
				*passphrase6 = r.InputSplunkHec.TLS.Passphrase.ValueString()
			} else {
				passphrase6 = nil
			}
			certPath6 := new(string)
			if !r.InputSplunkHec.TLS.CertPath.IsUnknown() && !r.InputSplunkHec.TLS.CertPath.IsNull() {
				*certPath6 = r.InputSplunkHec.TLS.CertPath.ValueString()
			} else {
				certPath6 = nil
			}
			caPath6 := new(string)
			if !r.InputSplunkHec.TLS.CaPath.IsUnknown() && !r.InputSplunkHec.TLS.CaPath.IsNull() {
				*caPath6 = r.InputSplunkHec.TLS.CaPath.ValueString()
			} else {
				caPath6 = nil
			}
			requestCert2 := new(bool)
			if !r.InputSplunkHec.TLS.RequestCert.IsUnknown() && !r.InputSplunkHec.TLS.RequestCert.IsNull() {
				*requestCert2 = r.InputSplunkHec.TLS.RequestCert.ValueBool()
			} else {
				requestCert2 = nil
			}
			var rejectUnauthorized8 interface{}
			if !r.InputSplunkHec.TLS.RejectUnauthorized.IsUnknown() && !r.InputSplunkHec.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputSplunkHec.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized8)
			}
			var commonNameRegex2 interface{}
			if !r.InputSplunkHec.TLS.CommonNameRegex.IsUnknown() && !r.InputSplunkHec.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputSplunkHec.TLS.CommonNameRegex.ValueString()), &commonNameRegex2)
			}
			minVersion6 := new(shared.InputSplunkHecMinimumTLSVersion)
			if !r.InputSplunkHec.TLS.MinVersion.IsUnknown() && !r.InputSplunkHec.TLS.MinVersion.IsNull() {
				*minVersion6 = shared.InputSplunkHecMinimumTLSVersion(r.InputSplunkHec.TLS.MinVersion.ValueString())
			} else {
				minVersion6 = nil
			}
			maxVersion6 := new(shared.InputSplunkHecMaximumTLSVersion)
			if !r.InputSplunkHec.TLS.MaxVersion.IsUnknown() && !r.InputSplunkHec.TLS.MaxVersion.IsNull() {
				*maxVersion6 = shared.InputSplunkHecMaximumTLSVersion(r.InputSplunkHec.TLS.MaxVersion.ValueString())
			} else {
				maxVersion6 = nil
			}
			tls6 = &shared.InputSplunkHecTLSSettingsServerSide{
				Disabled:           disabled19,
				CertificateName:    certificateName6,
				PrivKeyPath:        privKeyPath6,
				Passphrase:         passphrase6,
				CertPath:           certPath6,
				CaPath:             caPath6,
				RequestCert:        requestCert2,
				RejectUnauthorized: rejectUnauthorized8,
				CommonNameRegex:    commonNameRegex2,
				MinVersion:         minVersion6,
				MaxVersion:         maxVersion6,
			}
		}
		maxActiveReq1 := new(float64)
		if !r.InputSplunkHec.MaxActiveReq.IsUnknown() && !r.InputSplunkHec.MaxActiveReq.IsNull() {
			*maxActiveReq1 = r.InputSplunkHec.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq1 = nil
		}
		maxRequestsPerSocket1 := new(int64)
		if !r.InputSplunkHec.MaxRequestsPerSocket.IsUnknown() && !r.InputSplunkHec.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket1 = r.InputSplunkHec.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket1 = nil
		}
		enableProxyHeader2 := new(bool)
		if !r.InputSplunkHec.EnableProxyHeader.IsUnknown() && !r.InputSplunkHec.EnableProxyHeader.IsNull() {
			*enableProxyHeader2 = r.InputSplunkHec.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader2 = nil
		}
		captureHeaders1 := new(bool)
		if !r.InputSplunkHec.CaptureHeaders.IsUnknown() && !r.InputSplunkHec.CaptureHeaders.IsNull() {
			*captureHeaders1 = r.InputSplunkHec.CaptureHeaders.ValueBool()
		} else {
			captureHeaders1 = nil
		}
		activityLogSampleRate1 := new(float64)
		if !r.InputSplunkHec.ActivityLogSampleRate.IsUnknown() && !r.InputSplunkHec.ActivityLogSampleRate.IsNull() {
			*activityLogSampleRate1 = r.InputSplunkHec.ActivityLogSampleRate.ValueFloat64()
		} else {
			activityLogSampleRate1 = nil
		}
		requestTimeout6 := new(float64)
		if !r.InputSplunkHec.RequestTimeout.IsUnknown() && !r.InputSplunkHec.RequestTimeout.IsNull() {
			*requestTimeout6 = r.InputSplunkHec.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout6 = nil
		}
		socketTimeout1 := new(float64)
		if !r.InputSplunkHec.SocketTimeout.IsUnknown() && !r.InputSplunkHec.SocketTimeout.IsNull() {
			*socketTimeout1 = r.InputSplunkHec.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout1 = nil
		}
		keepAliveTimeout1 := new(float64)
		if !r.InputSplunkHec.KeepAliveTimeout.IsUnknown() && !r.InputSplunkHec.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout1 = r.InputSplunkHec.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout1 = nil
		}
		var enableHealthCheck1 interface{}
		if !r.InputSplunkHec.EnableHealthCheck.IsUnknown() && !r.InputSplunkHec.EnableHealthCheck.IsNull() {
			_ = json.Unmarshal([]byte(r.InputSplunkHec.EnableHealthCheck.ValueString()), &enableHealthCheck1)
		}
		ipAllowlistRegex1 := new(string)
		if !r.InputSplunkHec.IPAllowlistRegex.IsUnknown() && !r.InputSplunkHec.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex1 = r.InputSplunkHec.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex1 = nil
		}
		ipDenylistRegex1 := new(string)
		if !r.InputSplunkHec.IPDenylistRegex.IsUnknown() && !r.InputSplunkHec.IPDenylistRegex.IsNull() {
			*ipDenylistRegex1 = r.InputSplunkHec.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex1 = nil
		}
		splunkHecApi1 := new(string)
		if !r.InputSplunkHec.SplunkHecAPI.IsUnknown() && !r.InputSplunkHec.SplunkHecAPI.IsNull() {
			*splunkHecApi1 = r.InputSplunkHec.SplunkHecAPI.ValueString()
		} else {
			splunkHecApi1 = nil
		}
		metadata8 := make([]shared.InputSplunkHecMetadata, 0, len(r.InputSplunkHec.Metadata))
		for _, metadataItem8 := range r.InputSplunkHec.Metadata {
			var name12 string
			name12 = metadataItem8.Name.ValueString()

			var value12 string
			value12 = metadataItem8.Value.ValueString()

			metadata8 = append(metadata8, shared.InputSplunkHecMetadata{
				Name:  name12,
				Value: value12,
			})
		}
		allowedIndexes := make([]string, 0, len(r.InputSplunkHec.AllowedIndexes))
		for _, allowedIndexesItem := range r.InputSplunkHec.AllowedIndexes {
			allowedIndexes = append(allowedIndexes, allowedIndexesItem.ValueString())
		}
		splunkHecAcks1 := new(bool)
		if !r.InputSplunkHec.SplunkHecAcks.IsUnknown() && !r.InputSplunkHec.SplunkHecAcks.IsNull() {
			*splunkHecAcks1 = r.InputSplunkHec.SplunkHecAcks.ValueBool()
		} else {
			splunkHecAcks1 = nil
		}
		breakerRulesets3 := make([]string, 0, len(r.InputSplunkHec.BreakerRulesets))
		for _, breakerRulesetsItem3 := range r.InputSplunkHec.BreakerRulesets {
			breakerRulesets3 = append(breakerRulesets3, breakerRulesetsItem3.ValueString())
		}
		staleChannelFlushMs3 := new(float64)
		if !r.InputSplunkHec.StaleChannelFlushMs.IsUnknown() && !r.InputSplunkHec.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs3 = r.InputSplunkHec.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs3 = nil
		}
		useFwdTimezone1 := new(bool)
		if !r.InputSplunkHec.UseFwdTimezone.IsUnknown() && !r.InputSplunkHec.UseFwdTimezone.IsNull() {
			*useFwdTimezone1 = r.InputSplunkHec.UseFwdTimezone.ValueBool()
		} else {
			useFwdTimezone1 = nil
		}
		dropControlFields1 := new(bool)
		if !r.InputSplunkHec.DropControlFields.IsUnknown() && !r.InputSplunkHec.DropControlFields.IsNull() {
			*dropControlFields1 = r.InputSplunkHec.DropControlFields.ValueBool()
		} else {
			dropControlFields1 = nil
		}
		extractMetrics1 := new(bool)
		if !r.InputSplunkHec.ExtractMetrics.IsUnknown() && !r.InputSplunkHec.ExtractMetrics.IsNull() {
			*extractMetrics1 = r.InputSplunkHec.ExtractMetrics.ValueBool()
		} else {
			extractMetrics1 = nil
		}
		accessControlAllowOrigin := make([]string, 0, len(r.InputSplunkHec.AccessControlAllowOrigin))
		for _, accessControlAllowOriginItem := range r.InputSplunkHec.AccessControlAllowOrigin {
			accessControlAllowOrigin = append(accessControlAllowOrigin, accessControlAllowOriginItem.ValueString())
		}
		accessControlAllowHeaders := make([]string, 0, len(r.InputSplunkHec.AccessControlAllowHeaders))
		for _, accessControlAllowHeadersItem := range r.InputSplunkHec.AccessControlAllowHeaders {
			accessControlAllowHeaders = append(accessControlAllowHeaders, accessControlAllowHeadersItem.ValueString())
		}
		emitTokenMetrics := new(bool)
		if !r.InputSplunkHec.EmitTokenMetrics.IsUnknown() && !r.InputSplunkHec.EmitTokenMetrics.IsNull() {
			*emitTokenMetrics = r.InputSplunkHec.EmitTokenMetrics.ValueBool()
		} else {
			emitTokenMetrics = nil
		}
		description8 := new(string)
		if !r.InputSplunkHec.Description.IsUnknown() && !r.InputSplunkHec.Description.IsNull() {
			*description8 = r.InputSplunkHec.Description.ValueString()
		} else {
			description8 = nil
		}
		var status6 *shared.TFStatus
		if r.InputSplunkHec.Status != nil {
			health6 := shared.Health(r.InputSplunkHec.Status.Health.ValueString())
			metrics6 := make(map[string]interface{})
			for metricsKey6, metricsValue6 := range r.InputSplunkHec.Status.Metrics {
				var metricsInst6 interface{}
				_ = json.Unmarshal([]byte(metricsValue6.ValueString()), &metricsInst6)
				metrics6[metricsKey6] = metricsInst6
			}
			var timestamp6 float64
			timestamp6 = r.InputSplunkHec.Status.Timestamp.ValueFloat64()

			useStatusFromLb6 := new(bool)
			if !r.InputSplunkHec.Status.UseStatusFromLB.IsUnknown() && !r.InputSplunkHec.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb6 = r.InputSplunkHec.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb6 = nil
			}
			status6 = &shared.TFStatus{
				Health:          health6,
				Metrics:         metrics6,
				Timestamp:       timestamp6,
				UseStatusFromLB: useStatusFromLb6,
			}
		}
		inputSplunkHec = &shared.InputSplunkHec{
			ID:                        id6,
			Type:                      typeVar7,
			Disabled:                  disabled18,
			Pipeline:                  pipeline12,
			SendToRoutes:              sendToRoutes6,
			Environment:               environment6,
			PqEnabled:                 pqEnabled6,
			Streamtags:                streamtags6,
			Connections:               connections6,
			Pq:                        pq6,
			Host:                      host2,
			Port:                      port2,
			AuthTokens:                authTokens2,
			TLS:                       tls6,
			MaxActiveReq:              maxActiveReq1,
			MaxRequestsPerSocket:      maxRequestsPerSocket1,
			EnableProxyHeader:         enableProxyHeader2,
			CaptureHeaders:            captureHeaders1,
			ActivityLogSampleRate:     activityLogSampleRate1,
			RequestTimeout:            requestTimeout6,
			SocketTimeout:             socketTimeout1,
			KeepAliveTimeout:          keepAliveTimeout1,
			EnableHealthCheck:         enableHealthCheck1,
			IPAllowlistRegex:          ipAllowlistRegex1,
			IPDenylistRegex:           ipDenylistRegex1,
			SplunkHecAPI:              splunkHecApi1,
			Metadata:                  metadata8,
			AllowedIndexes:            allowedIndexes,
			SplunkHecAcks:             splunkHecAcks1,
			BreakerRulesets:           breakerRulesets3,
			StaleChannelFlushMs:       staleChannelFlushMs3,
			UseFwdTimezone:            useFwdTimezone1,
			DropControlFields:         dropControlFields1,
			ExtractMetrics:            extractMetrics1,
			AccessControlAllowOrigin:  accessControlAllowOrigin,
			AccessControlAllowHeaders: accessControlAllowHeaders,
			EmitTokenMetrics:          emitTokenMetrics,
			Description:               description8,
			Status:                    status6,
		}
	}
	if inputSplunkHec != nil {
		out = shared.Input{
			InputSplunkHec: inputSplunkHec,
		}
	}
	var inputAzureBlob *shared.InputAzureBlob
	if r.InputAzureBlob != nil {
		id7 := new(string)
		if !r.InputAzureBlob.ID.IsUnknown() && !r.InputAzureBlob.ID.IsNull() {
			*id7 = r.InputAzureBlob.ID.ValueString()
		} else {
			id7 = nil
		}
		typeVar8 := shared.InputAzureBlobType(r.InputAzureBlob.Type.ValueString())
		disabled20 := new(bool)
		if !r.InputAzureBlob.Disabled.IsUnknown() && !r.InputAzureBlob.Disabled.IsNull() {
			*disabled20 = r.InputAzureBlob.Disabled.ValueBool()
		} else {
			disabled20 = nil
		}
		pipeline14 := new(string)
		if !r.InputAzureBlob.Pipeline.IsUnknown() && !r.InputAzureBlob.Pipeline.IsNull() {
			*pipeline14 = r.InputAzureBlob.Pipeline.ValueString()
		} else {
			pipeline14 = nil
		}
		sendToRoutes7 := new(bool)
		if !r.InputAzureBlob.SendToRoutes.IsUnknown() && !r.InputAzureBlob.SendToRoutes.IsNull() {
			*sendToRoutes7 = r.InputAzureBlob.SendToRoutes.ValueBool()
		} else {
			sendToRoutes7 = nil
		}
		environment7 := new(string)
		if !r.InputAzureBlob.Environment.IsUnknown() && !r.InputAzureBlob.Environment.IsNull() {
			*environment7 = r.InputAzureBlob.Environment.ValueString()
		} else {
			environment7 = nil
		}
		pqEnabled7 := new(bool)
		if !r.InputAzureBlob.PqEnabled.IsUnknown() && !r.InputAzureBlob.PqEnabled.IsNull() {
			*pqEnabled7 = r.InputAzureBlob.PqEnabled.ValueBool()
		} else {
			pqEnabled7 = nil
		}
		streamtags7 := make([]string, 0, len(r.InputAzureBlob.Streamtags))
		for _, streamtagsItem7 := range r.InputAzureBlob.Streamtags {
			streamtags7 = append(streamtags7, streamtagsItem7.ValueString())
		}
		connections7 := make([]shared.InputAzureBlobConnections, 0, len(r.InputAzureBlob.Connections))
		for _, connectionsItem7 := range r.InputAzureBlob.Connections {
			pipeline15 := new(string)
			if !connectionsItem7.Pipeline.IsUnknown() && !connectionsItem7.Pipeline.IsNull() {
				*pipeline15 = connectionsItem7.Pipeline.ValueString()
			} else {
				pipeline15 = nil
			}
			var output8 string
			output8 = connectionsItem7.Output.ValueString()

			connections7 = append(connections7, shared.InputAzureBlobConnections{
				Pipeline: pipeline15,
				Output:   output8,
			})
		}
		var pq7 *shared.InputAzureBlobPq
		if r.InputAzureBlob.Pq != nil {
			mode7 := new(shared.InputAzureBlobMode)
			if !r.InputAzureBlob.Pq.Mode.IsUnknown() && !r.InputAzureBlob.Pq.Mode.IsNull() {
				*mode7 = shared.InputAzureBlobMode(r.InputAzureBlob.Pq.Mode.ValueString())
			} else {
				mode7 = nil
			}
			maxBufferSize7 := new(float64)
			if !r.InputAzureBlob.Pq.MaxBufferSize.IsUnknown() && !r.InputAzureBlob.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize7 = r.InputAzureBlob.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize7 = nil
			}
			commitFrequency7 := new(float64)
			if !r.InputAzureBlob.Pq.CommitFrequency.IsUnknown() && !r.InputAzureBlob.Pq.CommitFrequency.IsNull() {
				*commitFrequency7 = r.InputAzureBlob.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency7 = nil
			}
			maxFileSize7 := new(string)
			if !r.InputAzureBlob.Pq.MaxFileSize.IsUnknown() && !r.InputAzureBlob.Pq.MaxFileSize.IsNull() {
				*maxFileSize7 = r.InputAzureBlob.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize7 = nil
			}
			maxSize7 := new(string)
			if !r.InputAzureBlob.Pq.MaxSize.IsUnknown() && !r.InputAzureBlob.Pq.MaxSize.IsNull() {
				*maxSize7 = r.InputAzureBlob.Pq.MaxSize.ValueString()
			} else {
				maxSize7 = nil
			}
			path7 := new(string)
			if !r.InputAzureBlob.Pq.Path.IsUnknown() && !r.InputAzureBlob.Pq.Path.IsNull() {
				*path7 = r.InputAzureBlob.Pq.Path.ValueString()
			} else {
				path7 = nil
			}
			compress8 := new(shared.InputAzureBlobCompression)
			if !r.InputAzureBlob.Pq.Compress.IsUnknown() && !r.InputAzureBlob.Pq.Compress.IsNull() {
				*compress8 = shared.InputAzureBlobCompression(r.InputAzureBlob.Pq.Compress.ValueString())
			} else {
				compress8 = nil
			}
			pq7 = &shared.InputAzureBlobPq{
				Mode:            mode7,
				MaxBufferSize:   maxBufferSize7,
				CommitFrequency: commitFrequency7,
				MaxFileSize:     maxFileSize7,
				MaxSize:         maxSize7,
				Path:            path7,
				Compress:        compress8,
			}
		}
		var queueName string
		queueName = r.InputAzureBlob.QueueName.ValueString()

		fileFilter := new(string)
		if !r.InputAzureBlob.FileFilter.IsUnknown() && !r.InputAzureBlob.FileFilter.IsNull() {
			*fileFilter = r.InputAzureBlob.FileFilter.ValueString()
		} else {
			fileFilter = nil
		}
		visibilityTimeout := new(float64)
		if !r.InputAzureBlob.VisibilityTimeout.IsUnknown() && !r.InputAzureBlob.VisibilityTimeout.IsNull() {
			*visibilityTimeout = r.InputAzureBlob.VisibilityTimeout.ValueFloat64()
		} else {
			visibilityTimeout = nil
		}
		numReceivers := new(float64)
		if !r.InputAzureBlob.NumReceivers.IsUnknown() && !r.InputAzureBlob.NumReceivers.IsNull() {
			*numReceivers = r.InputAzureBlob.NumReceivers.ValueFloat64()
		} else {
			numReceivers = nil
		}
		maxMessages := new(float64)
		if !r.InputAzureBlob.MaxMessages.IsUnknown() && !r.InputAzureBlob.MaxMessages.IsNull() {
			*maxMessages = r.InputAzureBlob.MaxMessages.ValueFloat64()
		} else {
			maxMessages = nil
		}
		servicePeriodSecs := new(float64)
		if !r.InputAzureBlob.ServicePeriodSecs.IsUnknown() && !r.InputAzureBlob.ServicePeriodSecs.IsNull() {
			*servicePeriodSecs = r.InputAzureBlob.ServicePeriodSecs.ValueFloat64()
		} else {
			servicePeriodSecs = nil
		}
		skipOnError := new(bool)
		if !r.InputAzureBlob.SkipOnError.IsUnknown() && !r.InputAzureBlob.SkipOnError.IsNull() {
			*skipOnError = r.InputAzureBlob.SkipOnError.ValueBool()
		} else {
			skipOnError = nil
		}
		metadata9 := make([]shared.InputAzureBlobMetadata, 0, len(r.InputAzureBlob.Metadata))
		for _, metadataItem9 := range r.InputAzureBlob.Metadata {
			var name13 string
			name13 = metadataItem9.Name.ValueString()

			var value13 string
			value13 = metadataItem9.Value.ValueString()

			metadata9 = append(metadata9, shared.InputAzureBlobMetadata{
				Name:  name13,
				Value: value13,
			})
		}
		breakerRulesets4 := make([]string, 0, len(r.InputAzureBlob.BreakerRulesets))
		for _, breakerRulesetsItem4 := range r.InputAzureBlob.BreakerRulesets {
			breakerRulesets4 = append(breakerRulesets4, breakerRulesetsItem4.ValueString())
		}
		staleChannelFlushMs4 := new(float64)
		if !r.InputAzureBlob.StaleChannelFlushMs.IsUnknown() && !r.InputAzureBlob.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs4 = r.InputAzureBlob.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs4 = nil
		}
		parquetChunkSizeMB := new(float64)
		if !r.InputAzureBlob.ParquetChunkSizeMB.IsUnknown() && !r.InputAzureBlob.ParquetChunkSizeMB.IsNull() {
			*parquetChunkSizeMB = r.InputAzureBlob.ParquetChunkSizeMB.ValueFloat64()
		} else {
			parquetChunkSizeMB = nil
		}
		parquetChunkDownloadTimeout := new(float64)
		if !r.InputAzureBlob.ParquetChunkDownloadTimeout.IsUnknown() && !r.InputAzureBlob.ParquetChunkDownloadTimeout.IsNull() {
			*parquetChunkDownloadTimeout = r.InputAzureBlob.ParquetChunkDownloadTimeout.ValueFloat64()
		} else {
			parquetChunkDownloadTimeout = nil
		}
		authType2 := new(shared.InputAzureBlobAuthenticationMethod)
		if !r.InputAzureBlob.AuthType.IsUnknown() && !r.InputAzureBlob.AuthType.IsNull() {
			*authType2 = shared.InputAzureBlobAuthenticationMethod(r.InputAzureBlob.AuthType.ValueString())
		} else {
			authType2 = nil
		}
		description9 := new(string)
		if !r.InputAzureBlob.Description.IsUnknown() && !r.InputAzureBlob.Description.IsNull() {
			*description9 = r.InputAzureBlob.Description.ValueString()
		} else {
			description9 = nil
		}
		connectionString := new(string)
		if !r.InputAzureBlob.ConnectionString.IsUnknown() && !r.InputAzureBlob.ConnectionString.IsNull() {
			*connectionString = r.InputAzureBlob.ConnectionString.ValueString()
		} else {
			connectionString = nil
		}
		textSecret1 := new(string)
		if !r.InputAzureBlob.TextSecret.IsUnknown() && !r.InputAzureBlob.TextSecret.IsNull() {
			*textSecret1 = r.InputAzureBlob.TextSecret.ValueString()
		} else {
			textSecret1 = nil
		}
		storageAccountName := new(string)
		if !r.InputAzureBlob.StorageAccountName.IsUnknown() && !r.InputAzureBlob.StorageAccountName.IsNull() {
			*storageAccountName = r.InputAzureBlob.StorageAccountName.ValueString()
		} else {
			storageAccountName = nil
		}
		tenantID := new(string)
		if !r.InputAzureBlob.TenantID.IsUnknown() && !r.InputAzureBlob.TenantID.IsNull() {
			*tenantID = r.InputAzureBlob.TenantID.ValueString()
		} else {
			tenantID = nil
		}
		clientID := new(string)
		if !r.InputAzureBlob.ClientID.IsUnknown() && !r.InputAzureBlob.ClientID.IsNull() {
			*clientID = r.InputAzureBlob.ClientID.ValueString()
		} else {
			clientID = nil
		}
		endpointSuffix := new(string)
		if !r.InputAzureBlob.EndpointSuffix.IsUnknown() && !r.InputAzureBlob.EndpointSuffix.IsNull() {
			*endpointSuffix = r.InputAzureBlob.EndpointSuffix.ValueString()
		} else {
			endpointSuffix = nil
		}
		clientTextSecret := new(string)
		if !r.InputAzureBlob.ClientTextSecret.IsUnknown() && !r.InputAzureBlob.ClientTextSecret.IsNull() {
			*clientTextSecret = r.InputAzureBlob.ClientTextSecret.ValueString()
		} else {
			clientTextSecret = nil
		}
		var certificate *shared.InputAzureBlobCertificate
		if r.InputAzureBlob.Certificate != nil {
			var certificateName7 string
			certificateName7 = r.InputAzureBlob.Certificate.CertificateName.ValueString()

			certificate = &shared.InputAzureBlobCertificate{
				CertificateName: certificateName7,
			}
		}
		var status7 *shared.TFStatus
		if r.InputAzureBlob.Status != nil {
			health7 := shared.Health(r.InputAzureBlob.Status.Health.ValueString())
			metrics7 := make(map[string]interface{})
			for metricsKey7, metricsValue7 := range r.InputAzureBlob.Status.Metrics {
				var metricsInst7 interface{}
				_ = json.Unmarshal([]byte(metricsValue7.ValueString()), &metricsInst7)
				metrics7[metricsKey7] = metricsInst7
			}
			var timestamp7 float64
			timestamp7 = r.InputAzureBlob.Status.Timestamp.ValueFloat64()

			useStatusFromLb7 := new(bool)
			if !r.InputAzureBlob.Status.UseStatusFromLB.IsUnknown() && !r.InputAzureBlob.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb7 = r.InputAzureBlob.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb7 = nil
			}
			status7 = &shared.TFStatus{
				Health:          health7,
				Metrics:         metrics7,
				Timestamp:       timestamp7,
				UseStatusFromLB: useStatusFromLb7,
			}
		}
		inputAzureBlob = &shared.InputAzureBlob{
			ID:                          id7,
			Type:                        typeVar8,
			Disabled:                    disabled20,
			Pipeline:                    pipeline14,
			SendToRoutes:                sendToRoutes7,
			Environment:                 environment7,
			PqEnabled:                   pqEnabled7,
			Streamtags:                  streamtags7,
			Connections:                 connections7,
			Pq:                          pq7,
			QueueName:                   queueName,
			FileFilter:                  fileFilter,
			VisibilityTimeout:           visibilityTimeout,
			NumReceivers:                numReceivers,
			MaxMessages:                 maxMessages,
			ServicePeriodSecs:           servicePeriodSecs,
			SkipOnError:                 skipOnError,
			Metadata:                    metadata9,
			BreakerRulesets:             breakerRulesets4,
			StaleChannelFlushMs:         staleChannelFlushMs4,
			ParquetChunkSizeMB:          parquetChunkSizeMB,
			ParquetChunkDownloadTimeout: parquetChunkDownloadTimeout,
			AuthType:                    authType2,
			Description:                 description9,
			ConnectionString:            connectionString,
			TextSecret:                  textSecret1,
			StorageAccountName:          storageAccountName,
			TenantID:                    tenantID,
			ClientID:                    clientID,
			EndpointSuffix:              endpointSuffix,
			ClientTextSecret:            clientTextSecret,
			Certificate:                 certificate,
			Status:                      status7,
		}
	}
	if inputAzureBlob != nil {
		out = shared.Input{
			InputAzureBlob: inputAzureBlob,
		}
	}
	var inputElastic *shared.InputElastic
	if r.InputElastic != nil {
		id8 := new(string)
		if !r.InputElastic.ID.IsUnknown() && !r.InputElastic.ID.IsNull() {
			*id8 = r.InputElastic.ID.ValueString()
		} else {
			id8 = nil
		}
		typeVar9 := new(shared.InputElasticType)
		if !r.InputElastic.Type.IsUnknown() && !r.InputElastic.Type.IsNull() {
			*typeVar9 = shared.InputElasticType(r.InputElastic.Type.ValueString())
		} else {
			typeVar9 = nil
		}
		disabled21 := new(bool)
		if !r.InputElastic.Disabled.IsUnknown() && !r.InputElastic.Disabled.IsNull() {
			*disabled21 = r.InputElastic.Disabled.ValueBool()
		} else {
			disabled21 = nil
		}
		pipeline16 := new(string)
		if !r.InputElastic.Pipeline.IsUnknown() && !r.InputElastic.Pipeline.IsNull() {
			*pipeline16 = r.InputElastic.Pipeline.ValueString()
		} else {
			pipeline16 = nil
		}
		sendToRoutes8 := new(bool)
		if !r.InputElastic.SendToRoutes.IsUnknown() && !r.InputElastic.SendToRoutes.IsNull() {
			*sendToRoutes8 = r.InputElastic.SendToRoutes.ValueBool()
		} else {
			sendToRoutes8 = nil
		}
		environment8 := new(string)
		if !r.InputElastic.Environment.IsUnknown() && !r.InputElastic.Environment.IsNull() {
			*environment8 = r.InputElastic.Environment.ValueString()
		} else {
			environment8 = nil
		}
		pqEnabled8 := new(bool)
		if !r.InputElastic.PqEnabled.IsUnknown() && !r.InputElastic.PqEnabled.IsNull() {
			*pqEnabled8 = r.InputElastic.PqEnabled.ValueBool()
		} else {
			pqEnabled8 = nil
		}
		streamtags8 := make([]string, 0, len(r.InputElastic.Streamtags))
		for _, streamtagsItem8 := range r.InputElastic.Streamtags {
			streamtags8 = append(streamtags8, streamtagsItem8.ValueString())
		}
		connections8 := make([]shared.InputElasticConnections, 0, len(r.InputElastic.Connections))
		for _, connectionsItem8 := range r.InputElastic.Connections {
			pipeline17 := new(string)
			if !connectionsItem8.Pipeline.IsUnknown() && !connectionsItem8.Pipeline.IsNull() {
				*pipeline17 = connectionsItem8.Pipeline.ValueString()
			} else {
				pipeline17 = nil
			}
			var output9 string
			output9 = connectionsItem8.Output.ValueString()

			connections8 = append(connections8, shared.InputElasticConnections{
				Pipeline: pipeline17,
				Output:   output9,
			})
		}
		var pq8 *shared.InputElasticPq
		if r.InputElastic.Pq != nil {
			mode8 := new(shared.InputElasticMode)
			if !r.InputElastic.Pq.Mode.IsUnknown() && !r.InputElastic.Pq.Mode.IsNull() {
				*mode8 = shared.InputElasticMode(r.InputElastic.Pq.Mode.ValueString())
			} else {
				mode8 = nil
			}
			maxBufferSize8 := new(float64)
			if !r.InputElastic.Pq.MaxBufferSize.IsUnknown() && !r.InputElastic.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize8 = r.InputElastic.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize8 = nil
			}
			commitFrequency8 := new(float64)
			if !r.InputElastic.Pq.CommitFrequency.IsUnknown() && !r.InputElastic.Pq.CommitFrequency.IsNull() {
				*commitFrequency8 = r.InputElastic.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency8 = nil
			}
			maxFileSize8 := new(string)
			if !r.InputElastic.Pq.MaxFileSize.IsUnknown() && !r.InputElastic.Pq.MaxFileSize.IsNull() {
				*maxFileSize8 = r.InputElastic.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize8 = nil
			}
			maxSize8 := new(string)
			if !r.InputElastic.Pq.MaxSize.IsUnknown() && !r.InputElastic.Pq.MaxSize.IsNull() {
				*maxSize8 = r.InputElastic.Pq.MaxSize.ValueString()
			} else {
				maxSize8 = nil
			}
			path8 := new(string)
			if !r.InputElastic.Pq.Path.IsUnknown() && !r.InputElastic.Pq.Path.IsNull() {
				*path8 = r.InputElastic.Pq.Path.ValueString()
			} else {
				path8 = nil
			}
			compress9 := new(shared.InputElasticCompression)
			if !r.InputElastic.Pq.Compress.IsUnknown() && !r.InputElastic.Pq.Compress.IsNull() {
				*compress9 = shared.InputElasticCompression(r.InputElastic.Pq.Compress.ValueString())
			} else {
				compress9 = nil
			}
			pq8 = &shared.InputElasticPq{
				Mode:            mode8,
				MaxBufferSize:   maxBufferSize8,
				CommitFrequency: commitFrequency8,
				MaxFileSize:     maxFileSize8,
				MaxSize:         maxSize8,
				Path:            path8,
				Compress:        compress9,
			}
		}
		host3 := new(string)
		if !r.InputElastic.Host.IsUnknown() && !r.InputElastic.Host.IsNull() {
			*host3 = r.InputElastic.Host.ValueString()
		} else {
			host3 = nil
		}
		var port3 float64
		port3 = r.InputElastic.Port.ValueFloat64()

		var tls7 *shared.InputElasticTLSSettingsServerSide
		if r.InputElastic.TLS != nil {
			disabled22 := new(bool)
			if !r.InputElastic.TLS.Disabled.IsUnknown() && !r.InputElastic.TLS.Disabled.IsNull() {
				*disabled22 = r.InputElastic.TLS.Disabled.ValueBool()
			} else {
				disabled22 = nil
			}
			certificateName8 := new(string)
			if !r.InputElastic.TLS.CertificateName.IsUnknown() && !r.InputElastic.TLS.CertificateName.IsNull() {
				*certificateName8 = r.InputElastic.TLS.CertificateName.ValueString()
			} else {
				certificateName8 = nil
			}
			privKeyPath7 := new(string)
			if !r.InputElastic.TLS.PrivKeyPath.IsUnknown() && !r.InputElastic.TLS.PrivKeyPath.IsNull() {
				*privKeyPath7 = r.InputElastic.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath7 = nil
			}
			passphrase7 := new(string)
			if !r.InputElastic.TLS.Passphrase.IsUnknown() && !r.InputElastic.TLS.Passphrase.IsNull() {
				*passphrase7 = r.InputElastic.TLS.Passphrase.ValueString()
			} else {
				passphrase7 = nil
			}
			certPath7 := new(string)
			if !r.InputElastic.TLS.CertPath.IsUnknown() && !r.InputElastic.TLS.CertPath.IsNull() {
				*certPath7 = r.InputElastic.TLS.CertPath.ValueString()
			} else {
				certPath7 = nil
			}
			caPath7 := new(string)
			if !r.InputElastic.TLS.CaPath.IsUnknown() && !r.InputElastic.TLS.CaPath.IsNull() {
				*caPath7 = r.InputElastic.TLS.CaPath.ValueString()
			} else {
				caPath7 = nil
			}
			requestCert3 := new(bool)
			if !r.InputElastic.TLS.RequestCert.IsUnknown() && !r.InputElastic.TLS.RequestCert.IsNull() {
				*requestCert3 = r.InputElastic.TLS.RequestCert.ValueBool()
			} else {
				requestCert3 = nil
			}
			var rejectUnauthorized9 interface{}
			if !r.InputElastic.TLS.RejectUnauthorized.IsUnknown() && !r.InputElastic.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputElastic.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized9)
			}
			var commonNameRegex3 interface{}
			if !r.InputElastic.TLS.CommonNameRegex.IsUnknown() && !r.InputElastic.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputElastic.TLS.CommonNameRegex.ValueString()), &commonNameRegex3)
			}
			minVersion7 := new(shared.InputElasticMinimumTLSVersion)
			if !r.InputElastic.TLS.MinVersion.IsUnknown() && !r.InputElastic.TLS.MinVersion.IsNull() {
				*minVersion7 = shared.InputElasticMinimumTLSVersion(r.InputElastic.TLS.MinVersion.ValueString())
			} else {
				minVersion7 = nil
			}
			maxVersion7 := new(shared.InputElasticMaximumTLSVersion)
			if !r.InputElastic.TLS.MaxVersion.IsUnknown() && !r.InputElastic.TLS.MaxVersion.IsNull() {
				*maxVersion7 = shared.InputElasticMaximumTLSVersion(r.InputElastic.TLS.MaxVersion.ValueString())
			} else {
				maxVersion7 = nil
			}
			tls7 = &shared.InputElasticTLSSettingsServerSide{
				Disabled:           disabled22,
				CertificateName:    certificateName8,
				PrivKeyPath:        privKeyPath7,
				Passphrase:         passphrase7,
				CertPath:           certPath7,
				CaPath:             caPath7,
				RequestCert:        requestCert3,
				RejectUnauthorized: rejectUnauthorized9,
				CommonNameRegex:    commonNameRegex3,
				MinVersion:         minVersion7,
				MaxVersion:         maxVersion7,
			}
		}
		maxActiveReq2 := new(float64)
		if !r.InputElastic.MaxActiveReq.IsUnknown() && !r.InputElastic.MaxActiveReq.IsNull() {
			*maxActiveReq2 = r.InputElastic.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq2 = nil
		}
		maxRequestsPerSocket2 := new(int64)
		if !r.InputElastic.MaxRequestsPerSocket.IsUnknown() && !r.InputElastic.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket2 = r.InputElastic.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket2 = nil
		}
		enableProxyHeader3 := new(bool)
		if !r.InputElastic.EnableProxyHeader.IsUnknown() && !r.InputElastic.EnableProxyHeader.IsNull() {
			*enableProxyHeader3 = r.InputElastic.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader3 = nil
		}
		captureHeaders2 := new(bool)
		if !r.InputElastic.CaptureHeaders.IsUnknown() && !r.InputElastic.CaptureHeaders.IsNull() {
			*captureHeaders2 = r.InputElastic.CaptureHeaders.ValueBool()
		} else {
			captureHeaders2 = nil
		}
		activityLogSampleRate2 := new(float64)
		if !r.InputElastic.ActivityLogSampleRate.IsUnknown() && !r.InputElastic.ActivityLogSampleRate.IsNull() {
			*activityLogSampleRate2 = r.InputElastic.ActivityLogSampleRate.ValueFloat64()
		} else {
			activityLogSampleRate2 = nil
		}
		requestTimeout7 := new(float64)
		if !r.InputElastic.RequestTimeout.IsUnknown() && !r.InputElastic.RequestTimeout.IsNull() {
			*requestTimeout7 = r.InputElastic.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout7 = nil
		}
		socketTimeout2 := new(float64)
		if !r.InputElastic.SocketTimeout.IsUnknown() && !r.InputElastic.SocketTimeout.IsNull() {
			*socketTimeout2 = r.InputElastic.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout2 = nil
		}
		keepAliveTimeout2 := new(float64)
		if !r.InputElastic.KeepAliveTimeout.IsUnknown() && !r.InputElastic.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout2 = r.InputElastic.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout2 = nil
		}
		enableHealthCheck2 := new(bool)
		if !r.InputElastic.EnableHealthCheck.IsUnknown() && !r.InputElastic.EnableHealthCheck.IsNull() {
			*enableHealthCheck2 = r.InputElastic.EnableHealthCheck.ValueBool()
		} else {
			enableHealthCheck2 = nil
		}
		ipAllowlistRegex2 := new(string)
		if !r.InputElastic.IPAllowlistRegex.IsUnknown() && !r.InputElastic.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex2 = r.InputElastic.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex2 = nil
		}
		ipDenylistRegex2 := new(string)
		if !r.InputElastic.IPDenylistRegex.IsUnknown() && !r.InputElastic.IPDenylistRegex.IsNull() {
			*ipDenylistRegex2 = r.InputElastic.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex2 = nil
		}
		elasticApi1 := new(string)
		if !r.InputElastic.ElasticAPI.IsUnknown() && !r.InputElastic.ElasticAPI.IsNull() {
			*elasticApi1 = r.InputElastic.ElasticAPI.ValueString()
		} else {
			elasticApi1 = nil
		}
		authType3 := new(shared.InputElasticAuthenticationType)
		if !r.InputElastic.AuthType.IsUnknown() && !r.InputElastic.AuthType.IsNull() {
			*authType3 = shared.InputElasticAuthenticationType(r.InputElastic.AuthType.ValueString())
		} else {
			authType3 = nil
		}
		apiVersion := new(shared.APIVersion)
		if !r.InputElastic.APIVersion.IsUnknown() && !r.InputElastic.APIVersion.IsNull() {
			*apiVersion = shared.APIVersion(r.InputElastic.APIVersion.ValueString())
		} else {
			apiVersion = nil
		}
		extraHTTPHeaders := make([]shared.ExtraHTTPHeaders, 0, len(r.InputElastic.ExtraHTTPHeaders))
		for _, extraHTTPHeadersItem := range r.InputElastic.ExtraHTTPHeaders {
			name14 := new(string)
			if !extraHTTPHeadersItem.Name.IsUnknown() && !extraHTTPHeadersItem.Name.IsNull() {
				*name14 = extraHTTPHeadersItem.Name.ValueString()
			} else {
				name14 = nil
			}
			var value14 string
			value14 = extraHTTPHeadersItem.Value.ValueString()

			extraHTTPHeaders = append(extraHTTPHeaders, shared.ExtraHTTPHeaders{
				Name:  name14,
				Value: value14,
			})
		}
		metadata10 := make([]shared.InputElasticMetadata, 0, len(r.InputElastic.Metadata))
		for _, metadataItem10 := range r.InputElastic.Metadata {
			var name15 string
			name15 = metadataItem10.Name.ValueString()

			var value15 string
			value15 = metadataItem10.Value.ValueString()

			metadata10 = append(metadata10, shared.InputElasticMetadata{
				Name:  name15,
				Value: value15,
			})
		}
		ignoreStandardHeaders := new(bool)
		if !r.InputElastic.IgnoreStandardHeaders.IsUnknown() && !r.InputElastic.IgnoreStandardHeaders.IsNull() {
			*ignoreStandardHeaders = r.InputElastic.IgnoreStandardHeaders.ValueBool()
		} else {
			ignoreStandardHeaders = nil
		}
		var proxyMode *shared.ProxyMode
		if r.InputElastic.ProxyMode != nil {
			enabled1 := new(bool)
			if !r.InputElastic.ProxyMode.Enabled.IsUnknown() && !r.InputElastic.ProxyMode.Enabled.IsNull() {
				*enabled1 = r.InputElastic.ProxyMode.Enabled.ValueBool()
			} else {
				enabled1 = nil
			}
			url := new(string)
			if !r.InputElastic.ProxyMode.URL.IsUnknown() && !r.InputElastic.ProxyMode.URL.IsNull() {
				*url = r.InputElastic.ProxyMode.URL.ValueString()
			} else {
				url = nil
			}
			rejectUnauthorized10 := new(bool)
			if !r.InputElastic.ProxyMode.RejectUnauthorized.IsUnknown() && !r.InputElastic.ProxyMode.RejectUnauthorized.IsNull() {
				*rejectUnauthorized10 = r.InputElastic.ProxyMode.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized10 = nil
			}
			removeHeaders := make([]string, 0, len(r.InputElastic.ProxyMode.RemoveHeaders))
			for _, removeHeadersItem := range r.InputElastic.ProxyMode.RemoveHeaders {
				removeHeaders = append(removeHeaders, removeHeadersItem.ValueString())
			}
			timeoutSec := new(float64)
			if !r.InputElastic.ProxyMode.TimeoutSec.IsUnknown() && !r.InputElastic.ProxyMode.TimeoutSec.IsNull() {
				*timeoutSec = r.InputElastic.ProxyMode.TimeoutSec.ValueFloat64()
			} else {
				timeoutSec = nil
			}
			authType4 := new(shared.InputElasticAuthenticationMethod)
			if !r.InputElastic.ProxyMode.AuthType.IsUnknown() && !r.InputElastic.ProxyMode.AuthType.IsNull() {
				*authType4 = shared.InputElasticAuthenticationMethod(r.InputElastic.ProxyMode.AuthType.ValueString())
			} else {
				authType4 = nil
			}
			proxyMode = &shared.ProxyMode{
				Enabled:            enabled1,
				URL:                url,
				RejectUnauthorized: rejectUnauthorized10,
				RemoveHeaders:      removeHeaders,
				TimeoutSec:         timeoutSec,
				AuthType:           authType4,
			}
		}
		description10 := new(string)
		if !r.InputElastic.Description.IsUnknown() && !r.InputElastic.Description.IsNull() {
			*description10 = r.InputElastic.Description.ValueString()
		} else {
			description10 = nil
		}
		username1 := new(string)
		if !r.InputElastic.Username.IsUnknown() && !r.InputElastic.Username.IsNull() {
			*username1 = r.InputElastic.Username.ValueString()
		} else {
			username1 = nil
		}
		password1 := new(string)
		if !r.InputElastic.Password.IsUnknown() && !r.InputElastic.Password.IsNull() {
			*password1 = r.InputElastic.Password.ValueString()
		} else {
			password1 = nil
		}
		credentialsSecret3 := new(string)
		if !r.InputElastic.CredentialsSecret.IsUnknown() && !r.InputElastic.CredentialsSecret.IsNull() {
			*credentialsSecret3 = r.InputElastic.CredentialsSecret.ValueString()
		} else {
			credentialsSecret3 = nil
		}
		authTokens3 := make([]string, 0, len(r.InputElastic.AuthTokens))
		for _, authTokensItem3 := range r.InputElastic.AuthTokens {
			authTokens3 = append(authTokens3, authTokensItem3.ValueString())
		}
		customAPIVersion := new(string)
		if !r.InputElastic.CustomAPIVersion.IsUnknown() && !r.InputElastic.CustomAPIVersion.IsNull() {
			*customAPIVersion = r.InputElastic.CustomAPIVersion.ValueString()
		} else {
			customAPIVersion = nil
		}
		var status8 *shared.TFStatus
		if r.InputElastic.Status != nil {
			health8 := shared.Health(r.InputElastic.Status.Health.ValueString())
			metrics8 := make(map[string]interface{})
			for metricsKey8, metricsValue8 := range r.InputElastic.Status.Metrics {
				var metricsInst8 interface{}
				_ = json.Unmarshal([]byte(metricsValue8.ValueString()), &metricsInst8)
				metrics8[metricsKey8] = metricsInst8
			}
			var timestamp8 float64
			timestamp8 = r.InputElastic.Status.Timestamp.ValueFloat64()

			useStatusFromLb8 := new(bool)
			if !r.InputElastic.Status.UseStatusFromLB.IsUnknown() && !r.InputElastic.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb8 = r.InputElastic.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb8 = nil
			}
			status8 = &shared.TFStatus{
				Health:          health8,
				Metrics:         metrics8,
				Timestamp:       timestamp8,
				UseStatusFromLB: useStatusFromLb8,
			}
		}
		inputElastic = &shared.InputElastic{
			ID:                    id8,
			Type:                  typeVar9,
			Disabled:              disabled21,
			Pipeline:              pipeline16,
			SendToRoutes:          sendToRoutes8,
			Environment:           environment8,
			PqEnabled:             pqEnabled8,
			Streamtags:            streamtags8,
			Connections:           connections8,
			Pq:                    pq8,
			Host:                  host3,
			Port:                  port3,
			TLS:                   tls7,
			MaxActiveReq:          maxActiveReq2,
			MaxRequestsPerSocket:  maxRequestsPerSocket2,
			EnableProxyHeader:     enableProxyHeader3,
			CaptureHeaders:        captureHeaders2,
			ActivityLogSampleRate: activityLogSampleRate2,
			RequestTimeout:        requestTimeout7,
			SocketTimeout:         socketTimeout2,
			KeepAliveTimeout:      keepAliveTimeout2,
			EnableHealthCheck:     enableHealthCheck2,
			IPAllowlistRegex:      ipAllowlistRegex2,
			IPDenylistRegex:       ipDenylistRegex2,
			ElasticAPI:            elasticApi1,
			AuthType:              authType3,
			APIVersion:            apiVersion,
			ExtraHTTPHeaders:      extraHTTPHeaders,
			Metadata:              metadata10,
			IgnoreStandardHeaders: ignoreStandardHeaders,
			ProxyMode:             proxyMode,
			Description:           description10,
			Username:              username1,
			Password:              password1,
			CredentialsSecret:     credentialsSecret3,
			AuthTokens:            authTokens3,
			CustomAPIVersion:      customAPIVersion,
			Status:                status8,
		}
	}
	if inputElastic != nil {
		out = shared.Input{
			InputElastic: inputElastic,
		}
	}
	var inputConfluentCloud *shared.InputConfluentCloud
	if r.InputConfluentCloud != nil {
		id9 := new(string)
		if !r.InputConfluentCloud.ID.IsUnknown() && !r.InputConfluentCloud.ID.IsNull() {
			*id9 = r.InputConfluentCloud.ID.ValueString()
		} else {
			id9 = nil
		}
		typeVar10 := new(shared.InputConfluentCloudType)
		if !r.InputConfluentCloud.Type.IsUnknown() && !r.InputConfluentCloud.Type.IsNull() {
			*typeVar10 = shared.InputConfluentCloudType(r.InputConfluentCloud.Type.ValueString())
		} else {
			typeVar10 = nil
		}
		disabled23 := new(bool)
		if !r.InputConfluentCloud.Disabled.IsUnknown() && !r.InputConfluentCloud.Disabled.IsNull() {
			*disabled23 = r.InputConfluentCloud.Disabled.ValueBool()
		} else {
			disabled23 = nil
		}
		pipeline18 := new(string)
		if !r.InputConfluentCloud.Pipeline.IsUnknown() && !r.InputConfluentCloud.Pipeline.IsNull() {
			*pipeline18 = r.InputConfluentCloud.Pipeline.ValueString()
		} else {
			pipeline18 = nil
		}
		sendToRoutes9 := new(bool)
		if !r.InputConfluentCloud.SendToRoutes.IsUnknown() && !r.InputConfluentCloud.SendToRoutes.IsNull() {
			*sendToRoutes9 = r.InputConfluentCloud.SendToRoutes.ValueBool()
		} else {
			sendToRoutes9 = nil
		}
		environment9 := new(string)
		if !r.InputConfluentCloud.Environment.IsUnknown() && !r.InputConfluentCloud.Environment.IsNull() {
			*environment9 = r.InputConfluentCloud.Environment.ValueString()
		} else {
			environment9 = nil
		}
		pqEnabled9 := new(bool)
		if !r.InputConfluentCloud.PqEnabled.IsUnknown() && !r.InputConfluentCloud.PqEnabled.IsNull() {
			*pqEnabled9 = r.InputConfluentCloud.PqEnabled.ValueBool()
		} else {
			pqEnabled9 = nil
		}
		streamtags9 := make([]string, 0, len(r.InputConfluentCloud.Streamtags))
		for _, streamtagsItem9 := range r.InputConfluentCloud.Streamtags {
			streamtags9 = append(streamtags9, streamtagsItem9.ValueString())
		}
		connections9 := make([]shared.InputConfluentCloudConnections, 0, len(r.InputConfluentCloud.Connections))
		for _, connectionsItem9 := range r.InputConfluentCloud.Connections {
			pipeline19 := new(string)
			if !connectionsItem9.Pipeline.IsUnknown() && !connectionsItem9.Pipeline.IsNull() {
				*pipeline19 = connectionsItem9.Pipeline.ValueString()
			} else {
				pipeline19 = nil
			}
			var output10 string
			output10 = connectionsItem9.Output.ValueString()

			connections9 = append(connections9, shared.InputConfluentCloudConnections{
				Pipeline: pipeline19,
				Output:   output10,
			})
		}
		var pq9 *shared.InputConfluentCloudPq
		if r.InputConfluentCloud.Pq != nil {
			mode9 := new(shared.InputConfluentCloudMode)
			if !r.InputConfluentCloud.Pq.Mode.IsUnknown() && !r.InputConfluentCloud.Pq.Mode.IsNull() {
				*mode9 = shared.InputConfluentCloudMode(r.InputConfluentCloud.Pq.Mode.ValueString())
			} else {
				mode9 = nil
			}
			maxBufferSize9 := new(float64)
			if !r.InputConfluentCloud.Pq.MaxBufferSize.IsUnknown() && !r.InputConfluentCloud.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize9 = r.InputConfluentCloud.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize9 = nil
			}
			commitFrequency9 := new(float64)
			if !r.InputConfluentCloud.Pq.CommitFrequency.IsUnknown() && !r.InputConfluentCloud.Pq.CommitFrequency.IsNull() {
				*commitFrequency9 = r.InputConfluentCloud.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency9 = nil
			}
			maxFileSize9 := new(string)
			if !r.InputConfluentCloud.Pq.MaxFileSize.IsUnknown() && !r.InputConfluentCloud.Pq.MaxFileSize.IsNull() {
				*maxFileSize9 = r.InputConfluentCloud.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize9 = nil
			}
			maxSize9 := new(string)
			if !r.InputConfluentCloud.Pq.MaxSize.IsUnknown() && !r.InputConfluentCloud.Pq.MaxSize.IsNull() {
				*maxSize9 = r.InputConfluentCloud.Pq.MaxSize.ValueString()
			} else {
				maxSize9 = nil
			}
			path9 := new(string)
			if !r.InputConfluentCloud.Pq.Path.IsUnknown() && !r.InputConfluentCloud.Pq.Path.IsNull() {
				*path9 = r.InputConfluentCloud.Pq.Path.ValueString()
			} else {
				path9 = nil
			}
			compress10 := new(shared.InputConfluentCloudCompression)
			if !r.InputConfluentCloud.Pq.Compress.IsUnknown() && !r.InputConfluentCloud.Pq.Compress.IsNull() {
				*compress10 = shared.InputConfluentCloudCompression(r.InputConfluentCloud.Pq.Compress.ValueString())
			} else {
				compress10 = nil
			}
			pq9 = &shared.InputConfluentCloudPq{
				Mode:            mode9,
				MaxBufferSize:   maxBufferSize9,
				CommitFrequency: commitFrequency9,
				MaxFileSize:     maxFileSize9,
				MaxSize:         maxSize9,
				Path:            path9,
				Compress:        compress10,
			}
		}
		brokers2 := make([]string, 0, len(r.InputConfluentCloud.Brokers))
		for _, brokersItem2 := range r.InputConfluentCloud.Brokers {
			brokers2 = append(brokers2, brokersItem2.ValueString())
		}
		var tls8 *shared.InputConfluentCloudTLSSettingsClientSide
		if r.InputConfluentCloud.TLS != nil {
			disabled24 := new(bool)
			if !r.InputConfluentCloud.TLS.Disabled.IsUnknown() && !r.InputConfluentCloud.TLS.Disabled.IsNull() {
				*disabled24 = r.InputConfluentCloud.TLS.Disabled.ValueBool()
			} else {
				disabled24 = nil
			}
			rejectUnauthorized11 := new(bool)
			if !r.InputConfluentCloud.TLS.RejectUnauthorized.IsUnknown() && !r.InputConfluentCloud.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized11 = r.InputConfluentCloud.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized11 = nil
			}
			servername4 := new(string)
			if !r.InputConfluentCloud.TLS.Servername.IsUnknown() && !r.InputConfluentCloud.TLS.Servername.IsNull() {
				*servername4 = r.InputConfluentCloud.TLS.Servername.ValueString()
			} else {
				servername4 = nil
			}
			certificateName9 := new(string)
			if !r.InputConfluentCloud.TLS.CertificateName.IsUnknown() && !r.InputConfluentCloud.TLS.CertificateName.IsNull() {
				*certificateName9 = r.InputConfluentCloud.TLS.CertificateName.ValueString()
			} else {
				certificateName9 = nil
			}
			caPath8 := new(string)
			if !r.InputConfluentCloud.TLS.CaPath.IsUnknown() && !r.InputConfluentCloud.TLS.CaPath.IsNull() {
				*caPath8 = r.InputConfluentCloud.TLS.CaPath.ValueString()
			} else {
				caPath8 = nil
			}
			privKeyPath8 := new(string)
			if !r.InputConfluentCloud.TLS.PrivKeyPath.IsUnknown() && !r.InputConfluentCloud.TLS.PrivKeyPath.IsNull() {
				*privKeyPath8 = r.InputConfluentCloud.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath8 = nil
			}
			certPath8 := new(string)
			if !r.InputConfluentCloud.TLS.CertPath.IsUnknown() && !r.InputConfluentCloud.TLS.CertPath.IsNull() {
				*certPath8 = r.InputConfluentCloud.TLS.CertPath.ValueString()
			} else {
				certPath8 = nil
			}
			passphrase8 := new(string)
			if !r.InputConfluentCloud.TLS.Passphrase.IsUnknown() && !r.InputConfluentCloud.TLS.Passphrase.IsNull() {
				*passphrase8 = r.InputConfluentCloud.TLS.Passphrase.ValueString()
			} else {
				passphrase8 = nil
			}
			minVersion8 := new(shared.InputConfluentCloudMinimumTLSVersion)
			if !r.InputConfluentCloud.TLS.MinVersion.IsUnknown() && !r.InputConfluentCloud.TLS.MinVersion.IsNull() {
				*minVersion8 = shared.InputConfluentCloudMinimumTLSVersion(r.InputConfluentCloud.TLS.MinVersion.ValueString())
			} else {
				minVersion8 = nil
			}
			maxVersion8 := new(shared.InputConfluentCloudMaximumTLSVersion)
			if !r.InputConfluentCloud.TLS.MaxVersion.IsUnknown() && !r.InputConfluentCloud.TLS.MaxVersion.IsNull() {
				*maxVersion8 = shared.InputConfluentCloudMaximumTLSVersion(r.InputConfluentCloud.TLS.MaxVersion.ValueString())
			} else {
				maxVersion8 = nil
			}
			tls8 = &shared.InputConfluentCloudTLSSettingsClientSide{
				Disabled:           disabled24,
				RejectUnauthorized: rejectUnauthorized11,
				Servername:         servername4,
				CertificateName:    certificateName9,
				CaPath:             caPath8,
				PrivKeyPath:        privKeyPath8,
				CertPath:           certPath8,
				Passphrase:         passphrase8,
				MinVersion:         minVersion8,
				MaxVersion:         maxVersion8,
			}
		}
		topics2 := make([]string, 0, len(r.InputConfluentCloud.Topics))
		for _, topicsItem2 := range r.InputConfluentCloud.Topics {
			topics2 = append(topics2, topicsItem2.ValueString())
		}
		groupId2 := new(string)
		if !r.InputConfluentCloud.GroupID.IsUnknown() && !r.InputConfluentCloud.GroupID.IsNull() {
			*groupId2 = r.InputConfluentCloud.GroupID.ValueString()
		} else {
			groupId2 = nil
		}
		fromBeginning2 := new(bool)
		if !r.InputConfluentCloud.FromBeginning.IsUnknown() && !r.InputConfluentCloud.FromBeginning.IsNull() {
			*fromBeginning2 = r.InputConfluentCloud.FromBeginning.ValueBool()
		} else {
			fromBeginning2 = nil
		}
		var kafkaSchemaRegistry2 *shared.InputConfluentCloudKafkaSchemaRegistryAuthentication
		if r.InputConfluentCloud.KafkaSchemaRegistry != nil {
			disabled25 := new(bool)
			if !r.InputConfluentCloud.KafkaSchemaRegistry.Disabled.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.Disabled.IsNull() {
				*disabled25 = r.InputConfluentCloud.KafkaSchemaRegistry.Disabled.ValueBool()
			} else {
				disabled25 = nil
			}
			schemaRegistryUrl2 := new(string)
			if !r.InputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL.IsNull() {
				*schemaRegistryUrl2 = r.InputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL.ValueString()
			} else {
				schemaRegistryUrl2 = nil
			}
			connectionTimeout4 := new(float64)
			if !r.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout.IsNull() {
				*connectionTimeout4 = r.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout.ValueFloat64()
			} else {
				connectionTimeout4 = nil
			}
			requestTimeout8 := new(float64)
			if !r.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout.IsNull() {
				*requestTimeout8 = r.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout.ValueFloat64()
			} else {
				requestTimeout8 = nil
			}
			maxRetries4 := new(float64)
			if !r.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries.IsNull() {
				*maxRetries4 = r.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries.ValueFloat64()
			} else {
				maxRetries4 = nil
			}
			var auth2 *shared.InputConfluentCloudAuth
			if r.InputConfluentCloud.KafkaSchemaRegistry.Auth != nil {
				disabled26 := new(bool)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled.IsNull() {
					*disabled26 = r.InputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled.ValueBool()
				} else {
					disabled26 = nil
				}
				credentialsSecret4 := new(string)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret.IsNull() {
					*credentialsSecret4 = r.InputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret4 = nil
				}
				auth2 = &shared.InputConfluentCloudAuth{
					Disabled:          disabled26,
					CredentialsSecret: credentialsSecret4,
				}
			}
			var tls9 *shared.InputConfluentCloudInputTLSSettingsClientSide
			if r.InputConfluentCloud.KafkaSchemaRegistry.TLS != nil {
				disabled27 := new(bool)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled.IsNull() {
					*disabled27 = r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled.ValueBool()
				} else {
					disabled27 = nil
				}
				rejectUnauthorized12 := new(bool)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized.IsNull() {
					*rejectUnauthorized12 = r.InputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized.ValueBool()
				} else {
					rejectUnauthorized12 = nil
				}
				servername5 := new(string)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Servername.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Servername.IsNull() {
					*servername5 = r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Servername.ValueString()
				} else {
					servername5 = nil
				}
				certificateName10 := new(string)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName.IsNull() {
					*certificateName10 = r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName.ValueString()
				} else {
					certificateName10 = nil
				}
				caPath9 := new(string)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath.IsNull() {
					*caPath9 = r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath.ValueString()
				} else {
					caPath9 = nil
				}
				privKeyPath9 := new(string)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath.IsNull() {
					*privKeyPath9 = r.InputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath.ValueString()
				} else {
					privKeyPath9 = nil
				}
				certPath9 := new(string)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath.IsNull() {
					*certPath9 = r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath.ValueString()
				} else {
					certPath9 = nil
				}
				passphrase9 := new(string)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase.IsNull() {
					*passphrase9 = r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase.ValueString()
				} else {
					passphrase9 = nil
				}
				minVersion9 := new(shared.InputConfluentCloudInputMinimumTLSVersion)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion.IsNull() {
					*minVersion9 = shared.InputConfluentCloudInputMinimumTLSVersion(r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion.ValueString())
				} else {
					minVersion9 = nil
				}
				maxVersion9 := new(shared.InputConfluentCloudInputMaximumTLSVersion)
				if !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion.IsUnknown() && !r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion.IsNull() {
					*maxVersion9 = shared.InputConfluentCloudInputMaximumTLSVersion(r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion.ValueString())
				} else {
					maxVersion9 = nil
				}
				tls9 = &shared.InputConfluentCloudInputTLSSettingsClientSide{
					Disabled:           disabled27,
					RejectUnauthorized: rejectUnauthorized12,
					Servername:         servername5,
					CertificateName:    certificateName10,
					CaPath:             caPath9,
					PrivKeyPath:        privKeyPath9,
					CertPath:           certPath9,
					Passphrase:         passphrase9,
					MinVersion:         minVersion9,
					MaxVersion:         maxVersion9,
				}
			}
			kafkaSchemaRegistry2 = &shared.InputConfluentCloudKafkaSchemaRegistryAuthentication{
				Disabled:          disabled25,
				SchemaRegistryURL: schemaRegistryUrl2,
				ConnectionTimeout: connectionTimeout4,
				RequestTimeout:    requestTimeout8,
				MaxRetries:        maxRetries4,
				Auth:              auth2,
				TLS:               tls9,
			}
		}
		connectionTimeout5 := new(float64)
		if !r.InputConfluentCloud.ConnectionTimeout.IsUnknown() && !r.InputConfluentCloud.ConnectionTimeout.IsNull() {
			*connectionTimeout5 = r.InputConfluentCloud.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout5 = nil
		}
		requestTimeout9 := new(float64)
		if !r.InputConfluentCloud.RequestTimeout.IsUnknown() && !r.InputConfluentCloud.RequestTimeout.IsNull() {
			*requestTimeout9 = r.InputConfluentCloud.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout9 = nil
		}
		maxRetries5 := new(float64)
		if !r.InputConfluentCloud.MaxRetries.IsUnknown() && !r.InputConfluentCloud.MaxRetries.IsNull() {
			*maxRetries5 = r.InputConfluentCloud.MaxRetries.ValueFloat64()
		} else {
			maxRetries5 = nil
		}
		maxBackOff2 := new(float64)
		if !r.InputConfluentCloud.MaxBackOff.IsUnknown() && !r.InputConfluentCloud.MaxBackOff.IsNull() {
			*maxBackOff2 = r.InputConfluentCloud.MaxBackOff.ValueFloat64()
		} else {
			maxBackOff2 = nil
		}
		initialBackoff2 := new(float64)
		if !r.InputConfluentCloud.InitialBackoff.IsUnknown() && !r.InputConfluentCloud.InitialBackoff.IsNull() {
			*initialBackoff2 = r.InputConfluentCloud.InitialBackoff.ValueFloat64()
		} else {
			initialBackoff2 = nil
		}
		backoffRate2 := new(float64)
		if !r.InputConfluentCloud.BackoffRate.IsUnknown() && !r.InputConfluentCloud.BackoffRate.IsNull() {
			*backoffRate2 = r.InputConfluentCloud.BackoffRate.ValueFloat64()
		} else {
			backoffRate2 = nil
		}
		authenticationTimeout2 := new(float64)
		if !r.InputConfluentCloud.AuthenticationTimeout.IsUnknown() && !r.InputConfluentCloud.AuthenticationTimeout.IsNull() {
			*authenticationTimeout2 = r.InputConfluentCloud.AuthenticationTimeout.ValueFloat64()
		} else {
			authenticationTimeout2 = nil
		}
		reauthenticationThreshold2 := new(float64)
		if !r.InputConfluentCloud.ReauthenticationThreshold.IsUnknown() && !r.InputConfluentCloud.ReauthenticationThreshold.IsNull() {
			*reauthenticationThreshold2 = r.InputConfluentCloud.ReauthenticationThreshold.ValueFloat64()
		} else {
			reauthenticationThreshold2 = nil
		}
		var sasl1 *shared.InputConfluentCloudAuthentication
		if r.InputConfluentCloud.Sasl != nil {
			disabled28 := new(bool)
			if !r.InputConfluentCloud.Sasl.Disabled.IsUnknown() && !r.InputConfluentCloud.Sasl.Disabled.IsNull() {
				*disabled28 = r.InputConfluentCloud.Sasl.Disabled.ValueBool()
			} else {
				disabled28 = nil
			}
			mechanism1 := new(shared.InputConfluentCloudSASLMechanism)
			if !r.InputConfluentCloud.Sasl.Mechanism.IsUnknown() && !r.InputConfluentCloud.Sasl.Mechanism.IsNull() {
				*mechanism1 = shared.InputConfluentCloudSASLMechanism(r.InputConfluentCloud.Sasl.Mechanism.ValueString())
			} else {
				mechanism1 = nil
			}
			sasl1 = &shared.InputConfluentCloudAuthentication{
				Disabled:  disabled28,
				Mechanism: mechanism1,
			}
		}
		sessionTimeout2 := new(float64)
		if !r.InputConfluentCloud.SessionTimeout.IsUnknown() && !r.InputConfluentCloud.SessionTimeout.IsNull() {
			*sessionTimeout2 = r.InputConfluentCloud.SessionTimeout.ValueFloat64()
		} else {
			sessionTimeout2 = nil
		}
		rebalanceTimeout2 := new(float64)
		if !r.InputConfluentCloud.RebalanceTimeout.IsUnknown() && !r.InputConfluentCloud.RebalanceTimeout.IsNull() {
			*rebalanceTimeout2 = r.InputConfluentCloud.RebalanceTimeout.ValueFloat64()
		} else {
			rebalanceTimeout2 = nil
		}
		heartbeatInterval2 := new(float64)
		if !r.InputConfluentCloud.HeartbeatInterval.IsUnknown() && !r.InputConfluentCloud.HeartbeatInterval.IsNull() {
			*heartbeatInterval2 = r.InputConfluentCloud.HeartbeatInterval.ValueFloat64()
		} else {
			heartbeatInterval2 = nil
		}
		autoCommitInterval2 := new(float64)
		if !r.InputConfluentCloud.AutoCommitInterval.IsUnknown() && !r.InputConfluentCloud.AutoCommitInterval.IsNull() {
			*autoCommitInterval2 = r.InputConfluentCloud.AutoCommitInterval.ValueFloat64()
		} else {
			autoCommitInterval2 = nil
		}
		autoCommitThreshold2 := new(float64)
		if !r.InputConfluentCloud.AutoCommitThreshold.IsUnknown() && !r.InputConfluentCloud.AutoCommitThreshold.IsNull() {
			*autoCommitThreshold2 = r.InputConfluentCloud.AutoCommitThreshold.ValueFloat64()
		} else {
			autoCommitThreshold2 = nil
		}
		maxBytesPerPartition2 := new(float64)
		if !r.InputConfluentCloud.MaxBytesPerPartition.IsUnknown() && !r.InputConfluentCloud.MaxBytesPerPartition.IsNull() {
			*maxBytesPerPartition2 = r.InputConfluentCloud.MaxBytesPerPartition.ValueFloat64()
		} else {
			maxBytesPerPartition2 = nil
		}
		maxBytes2 := new(float64)
		if !r.InputConfluentCloud.MaxBytes.IsUnknown() && !r.InputConfluentCloud.MaxBytes.IsNull() {
			*maxBytes2 = r.InputConfluentCloud.MaxBytes.ValueFloat64()
		} else {
			maxBytes2 = nil
		}
		maxSocketErrors2 := new(float64)
		if !r.InputConfluentCloud.MaxSocketErrors.IsUnknown() && !r.InputConfluentCloud.MaxSocketErrors.IsNull() {
			*maxSocketErrors2 = r.InputConfluentCloud.MaxSocketErrors.ValueFloat64()
		} else {
			maxSocketErrors2 = nil
		}
		metadata11 := make([]shared.InputConfluentCloudMetadata, 0, len(r.InputConfluentCloud.Metadata))
		for _, metadataItem11 := range r.InputConfluentCloud.Metadata {
			var name16 string
			name16 = metadataItem11.Name.ValueString()

			var value16 string
			value16 = metadataItem11.Value.ValueString()

			metadata11 = append(metadata11, shared.InputConfluentCloudMetadata{
				Name:  name16,
				Value: value16,
			})
		}
		description11 := new(string)
		if !r.InputConfluentCloud.Description.IsUnknown() && !r.InputConfluentCloud.Description.IsNull() {
			*description11 = r.InputConfluentCloud.Description.ValueString()
		} else {
			description11 = nil
		}
		var status9 *shared.TFStatus
		if r.InputConfluentCloud.Status != nil {
			health9 := shared.Health(r.InputConfluentCloud.Status.Health.ValueString())
			metrics9 := make(map[string]interface{})
			for metricsKey9, metricsValue9 := range r.InputConfluentCloud.Status.Metrics {
				var metricsInst9 interface{}
				_ = json.Unmarshal([]byte(metricsValue9.ValueString()), &metricsInst9)
				metrics9[metricsKey9] = metricsInst9
			}
			var timestamp9 float64
			timestamp9 = r.InputConfluentCloud.Status.Timestamp.ValueFloat64()

			useStatusFromLb9 := new(bool)
			if !r.InputConfluentCloud.Status.UseStatusFromLB.IsUnknown() && !r.InputConfluentCloud.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb9 = r.InputConfluentCloud.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb9 = nil
			}
			status9 = &shared.TFStatus{
				Health:          health9,
				Metrics:         metrics9,
				Timestamp:       timestamp9,
				UseStatusFromLB: useStatusFromLb9,
			}
		}
		inputConfluentCloud = &shared.InputConfluentCloud{
			ID:                        id9,
			Type:                      typeVar10,
			Disabled:                  disabled23,
			Pipeline:                  pipeline18,
			SendToRoutes:              sendToRoutes9,
			Environment:               environment9,
			PqEnabled:                 pqEnabled9,
			Streamtags:                streamtags9,
			Connections:               connections9,
			Pq:                        pq9,
			Brokers:                   brokers2,
			TLS:                       tls8,
			Topics:                    topics2,
			GroupID:                   groupId2,
			FromBeginning:             fromBeginning2,
			KafkaSchemaRegistry:       kafkaSchemaRegistry2,
			ConnectionTimeout:         connectionTimeout5,
			RequestTimeout:            requestTimeout9,
			MaxRetries:                maxRetries5,
			MaxBackOff:                maxBackOff2,
			InitialBackoff:            initialBackoff2,
			BackoffRate:               backoffRate2,
			AuthenticationTimeout:     authenticationTimeout2,
			ReauthenticationThreshold: reauthenticationThreshold2,
			Sasl:                      sasl1,
			SessionTimeout:            sessionTimeout2,
			RebalanceTimeout:          rebalanceTimeout2,
			HeartbeatInterval:         heartbeatInterval2,
			AutoCommitInterval:        autoCommitInterval2,
			AutoCommitThreshold:       autoCommitThreshold2,
			MaxBytesPerPartition:      maxBytesPerPartition2,
			MaxBytes:                  maxBytes2,
			MaxSocketErrors:           maxSocketErrors2,
			Metadata:                  metadata11,
			Description:               description11,
			Status:                    status9,
		}
	}
	if inputConfluentCloud != nil {
		out = shared.Input{
			InputConfluentCloud: inputConfluentCloud,
		}
	}
	var inputGrafana *shared.InputGrafana
	if r.InputGrafana != nil {
		var inputGrafana1 *shared.InputGrafana1
		if r.InputGrafana.One != nil {
			id10 := new(string)
			if !r.InputGrafana.One.ID.IsUnknown() && !r.InputGrafana.One.ID.IsNull() {
				*id10 = r.InputGrafana.One.ID.ValueString()
			} else {
				id10 = nil
			}
			typeVar11 := new(shared.InputGrafanaType)
			if !r.InputGrafana.One.Type.IsUnknown() && !r.InputGrafana.One.Type.IsNull() {
				*typeVar11 = shared.InputGrafanaType(r.InputGrafana.One.Type.ValueString())
			} else {
				typeVar11 = nil
			}
			disabled29 := new(bool)
			if !r.InputGrafana.One.Disabled.IsUnknown() && !r.InputGrafana.One.Disabled.IsNull() {
				*disabled29 = r.InputGrafana.One.Disabled.ValueBool()
			} else {
				disabled29 = nil
			}
			pipeline20 := new(string)
			if !r.InputGrafana.One.Pipeline.IsUnknown() && !r.InputGrafana.One.Pipeline.IsNull() {
				*pipeline20 = r.InputGrafana.One.Pipeline.ValueString()
			} else {
				pipeline20 = nil
			}
			sendToRoutes10 := new(bool)
			if !r.InputGrafana.One.SendToRoutes.IsUnknown() && !r.InputGrafana.One.SendToRoutes.IsNull() {
				*sendToRoutes10 = r.InputGrafana.One.SendToRoutes.ValueBool()
			} else {
				sendToRoutes10 = nil
			}
			environment10 := new(string)
			if !r.InputGrafana.One.Environment.IsUnknown() && !r.InputGrafana.One.Environment.IsNull() {
				*environment10 = r.InputGrafana.One.Environment.ValueString()
			} else {
				environment10 = nil
			}
			pqEnabled10 := new(bool)
			if !r.InputGrafana.One.PqEnabled.IsUnknown() && !r.InputGrafana.One.PqEnabled.IsNull() {
				*pqEnabled10 = r.InputGrafana.One.PqEnabled.ValueBool()
			} else {
				pqEnabled10 = nil
			}
			streamtags10 := make([]string, 0, len(r.InputGrafana.One.Streamtags))
			for _, streamtagsItem10 := range r.InputGrafana.One.Streamtags {
				streamtags10 = append(streamtags10, streamtagsItem10.ValueString())
			}
			connections10 := make([]shared.InputGrafanaConnections, 0, len(r.InputGrafana.One.Connections))
			for _, connectionsItem10 := range r.InputGrafana.One.Connections {
				pipeline21 := new(string)
				if !connectionsItem10.Pipeline.IsUnknown() && !connectionsItem10.Pipeline.IsNull() {
					*pipeline21 = connectionsItem10.Pipeline.ValueString()
				} else {
					pipeline21 = nil
				}
				var output11 string
				output11 = connectionsItem10.Output.ValueString()

				connections10 = append(connections10, shared.InputGrafanaConnections{
					Pipeline: pipeline21,
					Output:   output11,
				})
			}
			var pq10 *shared.InputGrafanaPq
			if r.InputGrafana.One.Pq != nil {
				mode10 := new(shared.InputGrafanaMode)
				if !r.InputGrafana.One.Pq.Mode.IsUnknown() && !r.InputGrafana.One.Pq.Mode.IsNull() {
					*mode10 = shared.InputGrafanaMode(r.InputGrafana.One.Pq.Mode.ValueString())
				} else {
					mode10 = nil
				}
				maxBufferSize10 := new(float64)
				if !r.InputGrafana.One.Pq.MaxBufferSize.IsUnknown() && !r.InputGrafana.One.Pq.MaxBufferSize.IsNull() {
					*maxBufferSize10 = r.InputGrafana.One.Pq.MaxBufferSize.ValueFloat64()
				} else {
					maxBufferSize10 = nil
				}
				commitFrequency10 := new(float64)
				if !r.InputGrafana.One.Pq.CommitFrequency.IsUnknown() && !r.InputGrafana.One.Pq.CommitFrequency.IsNull() {
					*commitFrequency10 = r.InputGrafana.One.Pq.CommitFrequency.ValueFloat64()
				} else {
					commitFrequency10 = nil
				}
				maxFileSize10 := new(string)
				if !r.InputGrafana.One.Pq.MaxFileSize.IsUnknown() && !r.InputGrafana.One.Pq.MaxFileSize.IsNull() {
					*maxFileSize10 = r.InputGrafana.One.Pq.MaxFileSize.ValueString()
				} else {
					maxFileSize10 = nil
				}
				maxSize10 := new(string)
				if !r.InputGrafana.One.Pq.MaxSize.IsUnknown() && !r.InputGrafana.One.Pq.MaxSize.IsNull() {
					*maxSize10 = r.InputGrafana.One.Pq.MaxSize.ValueString()
				} else {
					maxSize10 = nil
				}
				path10 := new(string)
				if !r.InputGrafana.One.Pq.Path.IsUnknown() && !r.InputGrafana.One.Pq.Path.IsNull() {
					*path10 = r.InputGrafana.One.Pq.Path.ValueString()
				} else {
					path10 = nil
				}
				compress11 := new(shared.InputGrafanaCompression)
				if !r.InputGrafana.One.Pq.Compress.IsUnknown() && !r.InputGrafana.One.Pq.Compress.IsNull() {
					*compress11 = shared.InputGrafanaCompression(r.InputGrafana.One.Pq.Compress.ValueString())
				} else {
					compress11 = nil
				}
				pq10 = &shared.InputGrafanaPq{
					Mode:            mode10,
					MaxBufferSize:   maxBufferSize10,
					CommitFrequency: commitFrequency10,
					MaxFileSize:     maxFileSize10,
					MaxSize:         maxSize10,
					Path:            path10,
					Compress:        compress11,
				}
			}
			host4 := new(string)
			if !r.InputGrafana.One.Host.IsUnknown() && !r.InputGrafana.One.Host.IsNull() {
				*host4 = r.InputGrafana.One.Host.ValueString()
			} else {
				host4 = nil
			}
			var port4 float64
			port4 = r.InputGrafana.One.Port.ValueFloat64()

			var tls10 *shared.InputGrafanaTLSSettingsServerSide
			if r.InputGrafana.One.TLS != nil {
				disabled30 := new(bool)
				if !r.InputGrafana.One.TLS.Disabled.IsUnknown() && !r.InputGrafana.One.TLS.Disabled.IsNull() {
					*disabled30 = r.InputGrafana.One.TLS.Disabled.ValueBool()
				} else {
					disabled30 = nil
				}
				certificateName11 := new(string)
				if !r.InputGrafana.One.TLS.CertificateName.IsUnknown() && !r.InputGrafana.One.TLS.CertificateName.IsNull() {
					*certificateName11 = r.InputGrafana.One.TLS.CertificateName.ValueString()
				} else {
					certificateName11 = nil
				}
				privKeyPath10 := new(string)
				if !r.InputGrafana.One.TLS.PrivKeyPath.IsUnknown() && !r.InputGrafana.One.TLS.PrivKeyPath.IsNull() {
					*privKeyPath10 = r.InputGrafana.One.TLS.PrivKeyPath.ValueString()
				} else {
					privKeyPath10 = nil
				}
				passphrase10 := new(string)
				if !r.InputGrafana.One.TLS.Passphrase.IsUnknown() && !r.InputGrafana.One.TLS.Passphrase.IsNull() {
					*passphrase10 = r.InputGrafana.One.TLS.Passphrase.ValueString()
				} else {
					passphrase10 = nil
				}
				certPath10 := new(string)
				if !r.InputGrafana.One.TLS.CertPath.IsUnknown() && !r.InputGrafana.One.TLS.CertPath.IsNull() {
					*certPath10 = r.InputGrafana.One.TLS.CertPath.ValueString()
				} else {
					certPath10 = nil
				}
				caPath10 := new(string)
				if !r.InputGrafana.One.TLS.CaPath.IsUnknown() && !r.InputGrafana.One.TLS.CaPath.IsNull() {
					*caPath10 = r.InputGrafana.One.TLS.CaPath.ValueString()
				} else {
					caPath10 = nil
				}
				requestCert4 := new(bool)
				if !r.InputGrafana.One.TLS.RequestCert.IsUnknown() && !r.InputGrafana.One.TLS.RequestCert.IsNull() {
					*requestCert4 = r.InputGrafana.One.TLS.RequestCert.ValueBool()
				} else {
					requestCert4 = nil
				}
				var rejectUnauthorized13 interface{}
				if !r.InputGrafana.One.TLS.RejectUnauthorized.IsUnknown() && !r.InputGrafana.One.TLS.RejectUnauthorized.IsNull() {
					_ = json.Unmarshal([]byte(r.InputGrafana.One.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized13)
				}
				var commonNameRegex4 interface{}
				if !r.InputGrafana.One.TLS.CommonNameRegex.IsUnknown() && !r.InputGrafana.One.TLS.CommonNameRegex.IsNull() {
					_ = json.Unmarshal([]byte(r.InputGrafana.One.TLS.CommonNameRegex.ValueString()), &commonNameRegex4)
				}
				minVersion10 := new(shared.InputGrafanaMinimumTLSVersion)
				if !r.InputGrafana.One.TLS.MinVersion.IsUnknown() && !r.InputGrafana.One.TLS.MinVersion.IsNull() {
					*minVersion10 = shared.InputGrafanaMinimumTLSVersion(r.InputGrafana.One.TLS.MinVersion.ValueString())
				} else {
					minVersion10 = nil
				}
				maxVersion10 := new(shared.InputGrafanaMaximumTLSVersion)
				if !r.InputGrafana.One.TLS.MaxVersion.IsUnknown() && !r.InputGrafana.One.TLS.MaxVersion.IsNull() {
					*maxVersion10 = shared.InputGrafanaMaximumTLSVersion(r.InputGrafana.One.TLS.MaxVersion.ValueString())
				} else {
					maxVersion10 = nil
				}
				tls10 = &shared.InputGrafanaTLSSettingsServerSide{
					Disabled:           disabled30,
					CertificateName:    certificateName11,
					PrivKeyPath:        privKeyPath10,
					Passphrase:         passphrase10,
					CertPath:           certPath10,
					CaPath:             caPath10,
					RequestCert:        requestCert4,
					RejectUnauthorized: rejectUnauthorized13,
					CommonNameRegex:    commonNameRegex4,
					MinVersion:         minVersion10,
					MaxVersion:         maxVersion10,
				}
			}
			maxActiveReq3 := new(float64)
			if !r.InputGrafana.One.MaxActiveReq.IsUnknown() && !r.InputGrafana.One.MaxActiveReq.IsNull() {
				*maxActiveReq3 = r.InputGrafana.One.MaxActiveReq.ValueFloat64()
			} else {
				maxActiveReq3 = nil
			}
			maxRequestsPerSocket3 := new(int64)
			if !r.InputGrafana.One.MaxRequestsPerSocket.IsUnknown() && !r.InputGrafana.One.MaxRequestsPerSocket.IsNull() {
				*maxRequestsPerSocket3 = r.InputGrafana.One.MaxRequestsPerSocket.ValueInt64()
			} else {
				maxRequestsPerSocket3 = nil
			}
			enableProxyHeader4 := new(bool)
			if !r.InputGrafana.One.EnableProxyHeader.IsUnknown() && !r.InputGrafana.One.EnableProxyHeader.IsNull() {
				*enableProxyHeader4 = r.InputGrafana.One.EnableProxyHeader.ValueBool()
			} else {
				enableProxyHeader4 = nil
			}
			captureHeaders3 := new(bool)
			if !r.InputGrafana.One.CaptureHeaders.IsUnknown() && !r.InputGrafana.One.CaptureHeaders.IsNull() {
				*captureHeaders3 = r.InputGrafana.One.CaptureHeaders.ValueBool()
			} else {
				captureHeaders3 = nil
			}
			activityLogSampleRate3 := new(float64)
			if !r.InputGrafana.One.ActivityLogSampleRate.IsUnknown() && !r.InputGrafana.One.ActivityLogSampleRate.IsNull() {
				*activityLogSampleRate3 = r.InputGrafana.One.ActivityLogSampleRate.ValueFloat64()
			} else {
				activityLogSampleRate3 = nil
			}
			requestTimeout10 := new(float64)
			if !r.InputGrafana.One.RequestTimeout.IsUnknown() && !r.InputGrafana.One.RequestTimeout.IsNull() {
				*requestTimeout10 = r.InputGrafana.One.RequestTimeout.ValueFloat64()
			} else {
				requestTimeout10 = nil
			}
			socketTimeout3 := new(float64)
			if !r.InputGrafana.One.SocketTimeout.IsUnknown() && !r.InputGrafana.One.SocketTimeout.IsNull() {
				*socketTimeout3 = r.InputGrafana.One.SocketTimeout.ValueFloat64()
			} else {
				socketTimeout3 = nil
			}
			keepAliveTimeout3 := new(float64)
			if !r.InputGrafana.One.KeepAliveTimeout.IsUnknown() && !r.InputGrafana.One.KeepAliveTimeout.IsNull() {
				*keepAliveTimeout3 = r.InputGrafana.One.KeepAliveTimeout.ValueFloat64()
			} else {
				keepAliveTimeout3 = nil
			}
			enableHealthCheck3 := new(bool)
			if !r.InputGrafana.One.EnableHealthCheck.IsUnknown() && !r.InputGrafana.One.EnableHealthCheck.IsNull() {
				*enableHealthCheck3 = r.InputGrafana.One.EnableHealthCheck.ValueBool()
			} else {
				enableHealthCheck3 = nil
			}
			ipAllowlistRegex3 := new(string)
			if !r.InputGrafana.One.IPAllowlistRegex.IsUnknown() && !r.InputGrafana.One.IPAllowlistRegex.IsNull() {
				*ipAllowlistRegex3 = r.InputGrafana.One.IPAllowlistRegex.ValueString()
			} else {
				ipAllowlistRegex3 = nil
			}
			ipDenylistRegex3 := new(string)
			if !r.InputGrafana.One.IPDenylistRegex.IsUnknown() && !r.InputGrafana.One.IPDenylistRegex.IsNull() {
				*ipDenylistRegex3 = r.InputGrafana.One.IPDenylistRegex.ValueString()
			} else {
				ipDenylistRegex3 = nil
			}
			prometheusAPI := new(string)
			if !r.InputGrafana.One.PrometheusAPI.IsUnknown() && !r.InputGrafana.One.PrometheusAPI.IsNull() {
				*prometheusAPI = r.InputGrafana.One.PrometheusAPI.ValueString()
			} else {
				prometheusAPI = nil
			}
			lokiAPI := new(string)
			if !r.InputGrafana.One.LokiAPI.IsUnknown() && !r.InputGrafana.One.LokiAPI.IsNull() {
				*lokiAPI = r.InputGrafana.One.LokiAPI.ValueString()
			} else {
				lokiAPI = nil
			}
			var prometheusAuth *shared.PrometheusAuth
			if r.InputGrafana.One.PrometheusAuth != nil {
				authType5 := new(shared.InputGrafanaAuthenticationType)
				if !r.InputGrafana.One.PrometheusAuth.AuthType.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.AuthType.IsNull() {
					*authType5 = shared.InputGrafanaAuthenticationType(r.InputGrafana.One.PrometheusAuth.AuthType.ValueString())
				} else {
					authType5 = nil
				}
				username2 := new(string)
				if !r.InputGrafana.One.PrometheusAuth.Username.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.Username.IsNull() {
					*username2 = r.InputGrafana.One.PrometheusAuth.Username.ValueString()
				} else {
					username2 = nil
				}
				password2 := new(string)
				if !r.InputGrafana.One.PrometheusAuth.Password.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.Password.IsNull() {
					*password2 = r.InputGrafana.One.PrometheusAuth.Password.ValueString()
				} else {
					password2 = nil
				}
				token4 := new(string)
				if !r.InputGrafana.One.PrometheusAuth.Token.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.Token.IsNull() {
					*token4 = r.InputGrafana.One.PrometheusAuth.Token.ValueString()
				} else {
					token4 = nil
				}
				credentialsSecret5 := new(string)
				if !r.InputGrafana.One.PrometheusAuth.CredentialsSecret.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.CredentialsSecret.IsNull() {
					*credentialsSecret5 = r.InputGrafana.One.PrometheusAuth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret5 = nil
				}
				textSecret2 := new(string)
				if !r.InputGrafana.One.PrometheusAuth.TextSecret.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.TextSecret.IsNull() {
					*textSecret2 = r.InputGrafana.One.PrometheusAuth.TextSecret.ValueString()
				} else {
					textSecret2 = nil
				}
				loginUrl1 := new(string)
				if !r.InputGrafana.One.PrometheusAuth.LoginURL.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.LoginURL.IsNull() {
					*loginUrl1 = r.InputGrafana.One.PrometheusAuth.LoginURL.ValueString()
				} else {
					loginUrl1 = nil
				}
				secretParamName1 := new(string)
				if !r.InputGrafana.One.PrometheusAuth.SecretParamName.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.SecretParamName.IsNull() {
					*secretParamName1 = r.InputGrafana.One.PrometheusAuth.SecretParamName.ValueString()
				} else {
					secretParamName1 = nil
				}
				secret1 := new(string)
				if !r.InputGrafana.One.PrometheusAuth.Secret.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.Secret.IsNull() {
					*secret1 = r.InputGrafana.One.PrometheusAuth.Secret.ValueString()
				} else {
					secret1 = nil
				}
				tokenAttributeName1 := new(string)
				if !r.InputGrafana.One.PrometheusAuth.TokenAttributeName.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.TokenAttributeName.IsNull() {
					*tokenAttributeName1 = r.InputGrafana.One.PrometheusAuth.TokenAttributeName.ValueString()
				} else {
					tokenAttributeName1 = nil
				}
				authHeaderExpr1 := new(string)
				if !r.InputGrafana.One.PrometheusAuth.AuthHeaderExpr.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.AuthHeaderExpr.IsNull() {
					*authHeaderExpr1 = r.InputGrafana.One.PrometheusAuth.AuthHeaderExpr.ValueString()
				} else {
					authHeaderExpr1 = nil
				}
				tokenTimeoutSecs1 := new(float64)
				if !r.InputGrafana.One.PrometheusAuth.TokenTimeoutSecs.IsUnknown() && !r.InputGrafana.One.PrometheusAuth.TokenTimeoutSecs.IsNull() {
					*tokenTimeoutSecs1 = r.InputGrafana.One.PrometheusAuth.TokenTimeoutSecs.ValueFloat64()
				} else {
					tokenTimeoutSecs1 = nil
				}
				oauthParams1 := make([]shared.InputGrafanaOauthParams, 0, len(r.InputGrafana.One.PrometheusAuth.OauthParams))
				for _, oauthParamsItem1 := range r.InputGrafana.One.PrometheusAuth.OauthParams {
					var name17 string
					name17 = oauthParamsItem1.Name.ValueString()

					var value17 string
					value17 = oauthParamsItem1.Value.ValueString()

					oauthParams1 = append(oauthParams1, shared.InputGrafanaOauthParams{
						Name:  name17,
						Value: value17,
					})
				}
				oauthHeaders1 := make([]shared.InputGrafanaOauthHeaders, 0, len(r.InputGrafana.One.PrometheusAuth.OauthHeaders))
				for _, oauthHeadersItem1 := range r.InputGrafana.One.PrometheusAuth.OauthHeaders {
					var name18 string
					name18 = oauthHeadersItem1.Name.ValueString()

					var value18 string
					value18 = oauthHeadersItem1.Value.ValueString()

					oauthHeaders1 = append(oauthHeaders1, shared.InputGrafanaOauthHeaders{
						Name:  name18,
						Value: value18,
					})
				}
				prometheusAuth = &shared.PrometheusAuth{
					AuthType:           authType5,
					Username:           username2,
					Password:           password2,
					Token:              token4,
					CredentialsSecret:  credentialsSecret5,
					TextSecret:         textSecret2,
					LoginURL:           loginUrl1,
					SecretParamName:    secretParamName1,
					Secret:             secret1,
					TokenAttributeName: tokenAttributeName1,
					AuthHeaderExpr:     authHeaderExpr1,
					TokenTimeoutSecs:   tokenTimeoutSecs1,
					OauthParams:        oauthParams1,
					OauthHeaders:       oauthHeaders1,
				}
			}
			var lokiAuth *shared.LokiAuth
			if r.InputGrafana.One.LokiAuth != nil {
				authType6 := new(shared.InputInputGrafanaAuthenticationType)
				if !r.InputGrafana.One.LokiAuth.AuthType.IsUnknown() && !r.InputGrafana.One.LokiAuth.AuthType.IsNull() {
					*authType6 = shared.InputInputGrafanaAuthenticationType(r.InputGrafana.One.LokiAuth.AuthType.ValueString())
				} else {
					authType6 = nil
				}
				username3 := new(string)
				if !r.InputGrafana.One.LokiAuth.Username.IsUnknown() && !r.InputGrafana.One.LokiAuth.Username.IsNull() {
					*username3 = r.InputGrafana.One.LokiAuth.Username.ValueString()
				} else {
					username3 = nil
				}
				password3 := new(string)
				if !r.InputGrafana.One.LokiAuth.Password.IsUnknown() && !r.InputGrafana.One.LokiAuth.Password.IsNull() {
					*password3 = r.InputGrafana.One.LokiAuth.Password.ValueString()
				} else {
					password3 = nil
				}
				token5 := new(string)
				if !r.InputGrafana.One.LokiAuth.Token.IsUnknown() && !r.InputGrafana.One.LokiAuth.Token.IsNull() {
					*token5 = r.InputGrafana.One.LokiAuth.Token.ValueString()
				} else {
					token5 = nil
				}
				credentialsSecret6 := new(string)
				if !r.InputGrafana.One.LokiAuth.CredentialsSecret.IsUnknown() && !r.InputGrafana.One.LokiAuth.CredentialsSecret.IsNull() {
					*credentialsSecret6 = r.InputGrafana.One.LokiAuth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret6 = nil
				}
				textSecret3 := new(string)
				if !r.InputGrafana.One.LokiAuth.TextSecret.IsUnknown() && !r.InputGrafana.One.LokiAuth.TextSecret.IsNull() {
					*textSecret3 = r.InputGrafana.One.LokiAuth.TextSecret.ValueString()
				} else {
					textSecret3 = nil
				}
				loginUrl2 := new(string)
				if !r.InputGrafana.One.LokiAuth.LoginURL.IsUnknown() && !r.InputGrafana.One.LokiAuth.LoginURL.IsNull() {
					*loginUrl2 = r.InputGrafana.One.LokiAuth.LoginURL.ValueString()
				} else {
					loginUrl2 = nil
				}
				secretParamName2 := new(string)
				if !r.InputGrafana.One.LokiAuth.SecretParamName.IsUnknown() && !r.InputGrafana.One.LokiAuth.SecretParamName.IsNull() {
					*secretParamName2 = r.InputGrafana.One.LokiAuth.SecretParamName.ValueString()
				} else {
					secretParamName2 = nil
				}
				secret2 := new(string)
				if !r.InputGrafana.One.LokiAuth.Secret.IsUnknown() && !r.InputGrafana.One.LokiAuth.Secret.IsNull() {
					*secret2 = r.InputGrafana.One.LokiAuth.Secret.ValueString()
				} else {
					secret2 = nil
				}
				tokenAttributeName2 := new(string)
				if !r.InputGrafana.One.LokiAuth.TokenAttributeName.IsUnknown() && !r.InputGrafana.One.LokiAuth.TokenAttributeName.IsNull() {
					*tokenAttributeName2 = r.InputGrafana.One.LokiAuth.TokenAttributeName.ValueString()
				} else {
					tokenAttributeName2 = nil
				}
				authHeaderExpr2 := new(string)
				if !r.InputGrafana.One.LokiAuth.AuthHeaderExpr.IsUnknown() && !r.InputGrafana.One.LokiAuth.AuthHeaderExpr.IsNull() {
					*authHeaderExpr2 = r.InputGrafana.One.LokiAuth.AuthHeaderExpr.ValueString()
				} else {
					authHeaderExpr2 = nil
				}
				tokenTimeoutSecs2 := new(float64)
				if !r.InputGrafana.One.LokiAuth.TokenTimeoutSecs.IsUnknown() && !r.InputGrafana.One.LokiAuth.TokenTimeoutSecs.IsNull() {
					*tokenTimeoutSecs2 = r.InputGrafana.One.LokiAuth.TokenTimeoutSecs.ValueFloat64()
				} else {
					tokenTimeoutSecs2 = nil
				}
				oauthParams2 := make([]shared.InputInputGrafanaOauthParams, 0, len(r.InputGrafana.One.LokiAuth.OauthParams))
				for _, oauthParamsItem2 := range r.InputGrafana.One.LokiAuth.OauthParams {
					var name19 string
					name19 = oauthParamsItem2.Name.ValueString()

					var value19 string
					value19 = oauthParamsItem2.Value.ValueString()

					oauthParams2 = append(oauthParams2, shared.InputInputGrafanaOauthParams{
						Name:  name19,
						Value: value19,
					})
				}
				oauthHeaders2 := make([]shared.InputInputGrafanaOauthHeaders, 0, len(r.InputGrafana.One.LokiAuth.OauthHeaders))
				for _, oauthHeadersItem2 := range r.InputGrafana.One.LokiAuth.OauthHeaders {
					var name20 string
					name20 = oauthHeadersItem2.Name.ValueString()

					var value20 string
					value20 = oauthHeadersItem2.Value.ValueString()

					oauthHeaders2 = append(oauthHeaders2, shared.InputInputGrafanaOauthHeaders{
						Name:  name20,
						Value: value20,
					})
				}
				lokiAuth = &shared.LokiAuth{
					AuthType:           authType6,
					Username:           username3,
					Password:           password3,
					Token:              token5,
					CredentialsSecret:  credentialsSecret6,
					TextSecret:         textSecret3,
					LoginURL:           loginUrl2,
					SecretParamName:    secretParamName2,
					Secret:             secret2,
					TokenAttributeName: tokenAttributeName2,
					AuthHeaderExpr:     authHeaderExpr2,
					TokenTimeoutSecs:   tokenTimeoutSecs2,
					OauthParams:        oauthParams2,
					OauthHeaders:       oauthHeaders2,
				}
			}
			metadata12 := make([]shared.InputGrafanaMetadata, 0, len(r.InputGrafana.One.Metadata))
			for _, metadataItem12 := range r.InputGrafana.One.Metadata {
				var name21 string
				name21 = metadataItem12.Name.ValueString()

				var value21 string
				value21 = metadataItem12.Value.ValueString()

				metadata12 = append(metadata12, shared.InputGrafanaMetadata{
					Name:  name21,
					Value: value21,
				})
			}
			description12 := new(string)
			if !r.InputGrafana.One.Description.IsUnknown() && !r.InputGrafana.One.Description.IsNull() {
				*description12 = r.InputGrafana.One.Description.ValueString()
			} else {
				description12 = nil
			}
			var status10 *shared.TFStatus
			if r.InputGrafana.One.Status != nil {
				health10 := shared.Health(r.InputGrafana.One.Status.Health.ValueString())
				metrics10 := make(map[string]interface{})
				for metricsKey10, metricsValue10 := range r.InputGrafana.One.Status.Metrics {
					var metricsInst10 interface{}
					_ = json.Unmarshal([]byte(metricsValue10.ValueString()), &metricsInst10)
					metrics10[metricsKey10] = metricsInst10
				}
				var timestamp10 float64
				timestamp10 = r.InputGrafana.One.Status.Timestamp.ValueFloat64()

				useStatusFromLb10 := new(bool)
				if !r.InputGrafana.One.Status.UseStatusFromLB.IsUnknown() && !r.InputGrafana.One.Status.UseStatusFromLB.IsNull() {
					*useStatusFromLb10 = r.InputGrafana.One.Status.UseStatusFromLB.ValueBool()
				} else {
					useStatusFromLb10 = nil
				}
				status10 = &shared.TFStatus{
					Health:          health10,
					Metrics:         metrics10,
					Timestamp:       timestamp10,
					UseStatusFromLB: useStatusFromLb10,
				}
			}
			inputGrafana1 = &shared.InputGrafana1{
				ID:                    id10,
				Type:                  typeVar11,
				Disabled:              disabled29,
				Pipeline:              pipeline20,
				SendToRoutes:          sendToRoutes10,
				Environment:           environment10,
				PqEnabled:             pqEnabled10,
				Streamtags:            streamtags10,
				Connections:           connections10,
				Pq:                    pq10,
				Host:                  host4,
				Port:                  port4,
				TLS:                   tls10,
				MaxActiveReq:          maxActiveReq3,
				MaxRequestsPerSocket:  maxRequestsPerSocket3,
				EnableProxyHeader:     enableProxyHeader4,
				CaptureHeaders:        captureHeaders3,
				ActivityLogSampleRate: activityLogSampleRate3,
				RequestTimeout:        requestTimeout10,
				SocketTimeout:         socketTimeout3,
				KeepAliveTimeout:      keepAliveTimeout3,
				EnableHealthCheck:     enableHealthCheck3,
				IPAllowlistRegex:      ipAllowlistRegex3,
				IPDenylistRegex:       ipDenylistRegex3,
				PrometheusAPI:         prometheusAPI,
				LokiAPI:               lokiAPI,
				PrometheusAuth:        prometheusAuth,
				LokiAuth:              lokiAuth,
				Metadata:              metadata12,
				Description:           description12,
				Status:                status10,
			}
		}
		if inputGrafana1 != nil {
			inputGrafana = &shared.InputGrafana{
				InputGrafana1: inputGrafana1,
			}
		}
		var inputGrafana2 *shared.InputGrafana2
		if r.InputGrafana.Two != nil {
			id11 := new(string)
			if !r.InputGrafana.Two.ID.IsUnknown() && !r.InputGrafana.Two.ID.IsNull() {
				*id11 = r.InputGrafana.Two.ID.ValueString()
			} else {
				id11 = nil
			}
			typeVar12 := new(shared.InputInputGrafanaType)
			if !r.InputGrafana.Two.Type.IsUnknown() && !r.InputGrafana.Two.Type.IsNull() {
				*typeVar12 = shared.InputInputGrafanaType(r.InputGrafana.Two.Type.ValueString())
			} else {
				typeVar12 = nil
			}
			disabled31 := new(bool)
			if !r.InputGrafana.Two.Disabled.IsUnknown() && !r.InputGrafana.Two.Disabled.IsNull() {
				*disabled31 = r.InputGrafana.Two.Disabled.ValueBool()
			} else {
				disabled31 = nil
			}
			pipeline22 := new(string)
			if !r.InputGrafana.Two.Pipeline.IsUnknown() && !r.InputGrafana.Two.Pipeline.IsNull() {
				*pipeline22 = r.InputGrafana.Two.Pipeline.ValueString()
			} else {
				pipeline22 = nil
			}
			sendToRoutes11 := new(bool)
			if !r.InputGrafana.Two.SendToRoutes.IsUnknown() && !r.InputGrafana.Two.SendToRoutes.IsNull() {
				*sendToRoutes11 = r.InputGrafana.Two.SendToRoutes.ValueBool()
			} else {
				sendToRoutes11 = nil
			}
			environment11 := new(string)
			if !r.InputGrafana.Two.Environment.IsUnknown() && !r.InputGrafana.Two.Environment.IsNull() {
				*environment11 = r.InputGrafana.Two.Environment.ValueString()
			} else {
				environment11 = nil
			}
			pqEnabled11 := new(bool)
			if !r.InputGrafana.Two.PqEnabled.IsUnknown() && !r.InputGrafana.Two.PqEnabled.IsNull() {
				*pqEnabled11 = r.InputGrafana.Two.PqEnabled.ValueBool()
			} else {
				pqEnabled11 = nil
			}
			streamtags11 := make([]string, 0, len(r.InputGrafana.Two.Streamtags))
			for _, streamtagsItem11 := range r.InputGrafana.Two.Streamtags {
				streamtags11 = append(streamtags11, streamtagsItem11.ValueString())
			}
			connections11 := make([]shared.InputInputGrafanaConnections, 0, len(r.InputGrafana.Two.Connections))
			for _, connectionsItem11 := range r.InputGrafana.Two.Connections {
				pipeline23 := new(string)
				if !connectionsItem11.Pipeline.IsUnknown() && !connectionsItem11.Pipeline.IsNull() {
					*pipeline23 = connectionsItem11.Pipeline.ValueString()
				} else {
					pipeline23 = nil
				}
				var output12 string
				output12 = connectionsItem11.Output.ValueString()

				connections11 = append(connections11, shared.InputInputGrafanaConnections{
					Pipeline: pipeline23,
					Output:   output12,
				})
			}
			var pq11 *shared.InputInputGrafanaPq
			if r.InputGrafana.Two.Pq != nil {
				mode11 := new(shared.InputInputGrafanaMode)
				if !r.InputGrafana.Two.Pq.Mode.IsUnknown() && !r.InputGrafana.Two.Pq.Mode.IsNull() {
					*mode11 = shared.InputInputGrafanaMode(r.InputGrafana.Two.Pq.Mode.ValueString())
				} else {
					mode11 = nil
				}
				maxBufferSize11 := new(float64)
				if !r.InputGrafana.Two.Pq.MaxBufferSize.IsUnknown() && !r.InputGrafana.Two.Pq.MaxBufferSize.IsNull() {
					*maxBufferSize11 = r.InputGrafana.Two.Pq.MaxBufferSize.ValueFloat64()
				} else {
					maxBufferSize11 = nil
				}
				commitFrequency11 := new(float64)
				if !r.InputGrafana.Two.Pq.CommitFrequency.IsUnknown() && !r.InputGrafana.Two.Pq.CommitFrequency.IsNull() {
					*commitFrequency11 = r.InputGrafana.Two.Pq.CommitFrequency.ValueFloat64()
				} else {
					commitFrequency11 = nil
				}
				maxFileSize11 := new(string)
				if !r.InputGrafana.Two.Pq.MaxFileSize.IsUnknown() && !r.InputGrafana.Two.Pq.MaxFileSize.IsNull() {
					*maxFileSize11 = r.InputGrafana.Two.Pq.MaxFileSize.ValueString()
				} else {
					maxFileSize11 = nil
				}
				maxSize11 := new(string)
				if !r.InputGrafana.Two.Pq.MaxSize.IsUnknown() && !r.InputGrafana.Two.Pq.MaxSize.IsNull() {
					*maxSize11 = r.InputGrafana.Two.Pq.MaxSize.ValueString()
				} else {
					maxSize11 = nil
				}
				path11 := new(string)
				if !r.InputGrafana.Two.Pq.Path.IsUnknown() && !r.InputGrafana.Two.Pq.Path.IsNull() {
					*path11 = r.InputGrafana.Two.Pq.Path.ValueString()
				} else {
					path11 = nil
				}
				compress12 := new(shared.InputInputGrafanaCompression)
				if !r.InputGrafana.Two.Pq.Compress.IsUnknown() && !r.InputGrafana.Two.Pq.Compress.IsNull() {
					*compress12 = shared.InputInputGrafanaCompression(r.InputGrafana.Two.Pq.Compress.ValueString())
				} else {
					compress12 = nil
				}
				pq11 = &shared.InputInputGrafanaPq{
					Mode:            mode11,
					MaxBufferSize:   maxBufferSize11,
					CommitFrequency: commitFrequency11,
					MaxFileSize:     maxFileSize11,
					MaxSize:         maxSize11,
					Path:            path11,
					Compress:        compress12,
				}
			}
			host5 := new(string)
			if !r.InputGrafana.Two.Host.IsUnknown() && !r.InputGrafana.Two.Host.IsNull() {
				*host5 = r.InputGrafana.Two.Host.ValueString()
			} else {
				host5 = nil
			}
			var port5 float64
			port5 = r.InputGrafana.Two.Port.ValueFloat64()

			var tls11 *shared.InputInputGrafanaTLSSettingsServerSide
			if r.InputGrafana.Two.TLS != nil {
				disabled32 := new(bool)
				if !r.InputGrafana.Two.TLS.Disabled.IsUnknown() && !r.InputGrafana.Two.TLS.Disabled.IsNull() {
					*disabled32 = r.InputGrafana.Two.TLS.Disabled.ValueBool()
				} else {
					disabled32 = nil
				}
				certificateName12 := new(string)
				if !r.InputGrafana.Two.TLS.CertificateName.IsUnknown() && !r.InputGrafana.Two.TLS.CertificateName.IsNull() {
					*certificateName12 = r.InputGrafana.Two.TLS.CertificateName.ValueString()
				} else {
					certificateName12 = nil
				}
				privKeyPath11 := new(string)
				if !r.InputGrafana.Two.TLS.PrivKeyPath.IsUnknown() && !r.InputGrafana.Two.TLS.PrivKeyPath.IsNull() {
					*privKeyPath11 = r.InputGrafana.Two.TLS.PrivKeyPath.ValueString()
				} else {
					privKeyPath11 = nil
				}
				passphrase11 := new(string)
				if !r.InputGrafana.Two.TLS.Passphrase.IsUnknown() && !r.InputGrafana.Two.TLS.Passphrase.IsNull() {
					*passphrase11 = r.InputGrafana.Two.TLS.Passphrase.ValueString()
				} else {
					passphrase11 = nil
				}
				certPath11 := new(string)
				if !r.InputGrafana.Two.TLS.CertPath.IsUnknown() && !r.InputGrafana.Two.TLS.CertPath.IsNull() {
					*certPath11 = r.InputGrafana.Two.TLS.CertPath.ValueString()
				} else {
					certPath11 = nil
				}
				caPath11 := new(string)
				if !r.InputGrafana.Two.TLS.CaPath.IsUnknown() && !r.InputGrafana.Two.TLS.CaPath.IsNull() {
					*caPath11 = r.InputGrafana.Two.TLS.CaPath.ValueString()
				} else {
					caPath11 = nil
				}
				requestCert5 := new(bool)
				if !r.InputGrafana.Two.TLS.RequestCert.IsUnknown() && !r.InputGrafana.Two.TLS.RequestCert.IsNull() {
					*requestCert5 = r.InputGrafana.Two.TLS.RequestCert.ValueBool()
				} else {
					requestCert5 = nil
				}
				var rejectUnauthorized14 interface{}
				if !r.InputGrafana.Two.TLS.RejectUnauthorized.IsUnknown() && !r.InputGrafana.Two.TLS.RejectUnauthorized.IsNull() {
					_ = json.Unmarshal([]byte(r.InputGrafana.Two.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized14)
				}
				var commonNameRegex5 interface{}
				if !r.InputGrafana.Two.TLS.CommonNameRegex.IsUnknown() && !r.InputGrafana.Two.TLS.CommonNameRegex.IsNull() {
					_ = json.Unmarshal([]byte(r.InputGrafana.Two.TLS.CommonNameRegex.ValueString()), &commonNameRegex5)
				}
				minVersion11 := new(shared.InputInputGrafanaMinimumTLSVersion)
				if !r.InputGrafana.Two.TLS.MinVersion.IsUnknown() && !r.InputGrafana.Two.TLS.MinVersion.IsNull() {
					*minVersion11 = shared.InputInputGrafanaMinimumTLSVersion(r.InputGrafana.Two.TLS.MinVersion.ValueString())
				} else {
					minVersion11 = nil
				}
				maxVersion11 := new(shared.InputInputGrafanaMaximumTLSVersion)
				if !r.InputGrafana.Two.TLS.MaxVersion.IsUnknown() && !r.InputGrafana.Two.TLS.MaxVersion.IsNull() {
					*maxVersion11 = shared.InputInputGrafanaMaximumTLSVersion(r.InputGrafana.Two.TLS.MaxVersion.ValueString())
				} else {
					maxVersion11 = nil
				}
				tls11 = &shared.InputInputGrafanaTLSSettingsServerSide{
					Disabled:           disabled32,
					CertificateName:    certificateName12,
					PrivKeyPath:        privKeyPath11,
					Passphrase:         passphrase11,
					CertPath:           certPath11,
					CaPath:             caPath11,
					RequestCert:        requestCert5,
					RejectUnauthorized: rejectUnauthorized14,
					CommonNameRegex:    commonNameRegex5,
					MinVersion:         minVersion11,
					MaxVersion:         maxVersion11,
				}
			}
			maxActiveReq4 := new(float64)
			if !r.InputGrafana.Two.MaxActiveReq.IsUnknown() && !r.InputGrafana.Two.MaxActiveReq.IsNull() {
				*maxActiveReq4 = r.InputGrafana.Two.MaxActiveReq.ValueFloat64()
			} else {
				maxActiveReq4 = nil
			}
			maxRequestsPerSocket4 := new(int64)
			if !r.InputGrafana.Two.MaxRequestsPerSocket.IsUnknown() && !r.InputGrafana.Two.MaxRequestsPerSocket.IsNull() {
				*maxRequestsPerSocket4 = r.InputGrafana.Two.MaxRequestsPerSocket.ValueInt64()
			} else {
				maxRequestsPerSocket4 = nil
			}
			enableProxyHeader5 := new(bool)
			if !r.InputGrafana.Two.EnableProxyHeader.IsUnknown() && !r.InputGrafana.Two.EnableProxyHeader.IsNull() {
				*enableProxyHeader5 = r.InputGrafana.Two.EnableProxyHeader.ValueBool()
			} else {
				enableProxyHeader5 = nil
			}
			captureHeaders4 := new(bool)
			if !r.InputGrafana.Two.CaptureHeaders.IsUnknown() && !r.InputGrafana.Two.CaptureHeaders.IsNull() {
				*captureHeaders4 = r.InputGrafana.Two.CaptureHeaders.ValueBool()
			} else {
				captureHeaders4 = nil
			}
			activityLogSampleRate4 := new(float64)
			if !r.InputGrafana.Two.ActivityLogSampleRate.IsUnknown() && !r.InputGrafana.Two.ActivityLogSampleRate.IsNull() {
				*activityLogSampleRate4 = r.InputGrafana.Two.ActivityLogSampleRate.ValueFloat64()
			} else {
				activityLogSampleRate4 = nil
			}
			requestTimeout11 := new(float64)
			if !r.InputGrafana.Two.RequestTimeout.IsUnknown() && !r.InputGrafana.Two.RequestTimeout.IsNull() {
				*requestTimeout11 = r.InputGrafana.Two.RequestTimeout.ValueFloat64()
			} else {
				requestTimeout11 = nil
			}
			socketTimeout4 := new(float64)
			if !r.InputGrafana.Two.SocketTimeout.IsUnknown() && !r.InputGrafana.Two.SocketTimeout.IsNull() {
				*socketTimeout4 = r.InputGrafana.Two.SocketTimeout.ValueFloat64()
			} else {
				socketTimeout4 = nil
			}
			keepAliveTimeout4 := new(float64)
			if !r.InputGrafana.Two.KeepAliveTimeout.IsUnknown() && !r.InputGrafana.Two.KeepAliveTimeout.IsNull() {
				*keepAliveTimeout4 = r.InputGrafana.Two.KeepAliveTimeout.ValueFloat64()
			} else {
				keepAliveTimeout4 = nil
			}
			enableHealthCheck4 := new(bool)
			if !r.InputGrafana.Two.EnableHealthCheck.IsUnknown() && !r.InputGrafana.Two.EnableHealthCheck.IsNull() {
				*enableHealthCheck4 = r.InputGrafana.Two.EnableHealthCheck.ValueBool()
			} else {
				enableHealthCheck4 = nil
			}
			ipAllowlistRegex4 := new(string)
			if !r.InputGrafana.Two.IPAllowlistRegex.IsUnknown() && !r.InputGrafana.Two.IPAllowlistRegex.IsNull() {
				*ipAllowlistRegex4 = r.InputGrafana.Two.IPAllowlistRegex.ValueString()
			} else {
				ipAllowlistRegex4 = nil
			}
			ipDenylistRegex4 := new(string)
			if !r.InputGrafana.Two.IPDenylistRegex.IsUnknown() && !r.InputGrafana.Two.IPDenylistRegex.IsNull() {
				*ipDenylistRegex4 = r.InputGrafana.Two.IPDenylistRegex.ValueString()
			} else {
				ipDenylistRegex4 = nil
			}
			prometheusApi1 := new(string)
			if !r.InputGrafana.Two.PrometheusAPI.IsUnknown() && !r.InputGrafana.Two.PrometheusAPI.IsNull() {
				*prometheusApi1 = r.InputGrafana.Two.PrometheusAPI.ValueString()
			} else {
				prometheusApi1 = nil
			}
			lokiApi1 := new(string)
			if !r.InputGrafana.Two.LokiAPI.IsUnknown() && !r.InputGrafana.Two.LokiAPI.IsNull() {
				*lokiApi1 = r.InputGrafana.Two.LokiAPI.ValueString()
			} else {
				lokiApi1 = nil
			}
			var prometheusAuth1 *shared.InputGrafanaPrometheusAuth
			if r.InputGrafana.Two.PrometheusAuth != nil {
				authType7 := new(shared.InputInputGrafana2AuthenticationType)
				if !r.InputGrafana.Two.PrometheusAuth.AuthType.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.AuthType.IsNull() {
					*authType7 = shared.InputInputGrafana2AuthenticationType(r.InputGrafana.Two.PrometheusAuth.AuthType.ValueString())
				} else {
					authType7 = nil
				}
				username4 := new(string)
				if !r.InputGrafana.Two.PrometheusAuth.Username.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.Username.IsNull() {
					*username4 = r.InputGrafana.Two.PrometheusAuth.Username.ValueString()
				} else {
					username4 = nil
				}
				password4 := new(string)
				if !r.InputGrafana.Two.PrometheusAuth.Password.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.Password.IsNull() {
					*password4 = r.InputGrafana.Two.PrometheusAuth.Password.ValueString()
				} else {
					password4 = nil
				}
				token6 := new(string)
				if !r.InputGrafana.Two.PrometheusAuth.Token.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.Token.IsNull() {
					*token6 = r.InputGrafana.Two.PrometheusAuth.Token.ValueString()
				} else {
					token6 = nil
				}
				credentialsSecret7 := new(string)
				if !r.InputGrafana.Two.PrometheusAuth.CredentialsSecret.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.CredentialsSecret.IsNull() {
					*credentialsSecret7 = r.InputGrafana.Two.PrometheusAuth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret7 = nil
				}
				textSecret4 := new(string)
				if !r.InputGrafana.Two.PrometheusAuth.TextSecret.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.TextSecret.IsNull() {
					*textSecret4 = r.InputGrafana.Two.PrometheusAuth.TextSecret.ValueString()
				} else {
					textSecret4 = nil
				}
				loginUrl3 := new(string)
				if !r.InputGrafana.Two.PrometheusAuth.LoginURL.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.LoginURL.IsNull() {
					*loginUrl3 = r.InputGrafana.Two.PrometheusAuth.LoginURL.ValueString()
				} else {
					loginUrl3 = nil
				}
				secretParamName3 := new(string)
				if !r.InputGrafana.Two.PrometheusAuth.SecretParamName.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.SecretParamName.IsNull() {
					*secretParamName3 = r.InputGrafana.Two.PrometheusAuth.SecretParamName.ValueString()
				} else {
					secretParamName3 = nil
				}
				secret3 := new(string)
				if !r.InputGrafana.Two.PrometheusAuth.Secret.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.Secret.IsNull() {
					*secret3 = r.InputGrafana.Two.PrometheusAuth.Secret.ValueString()
				} else {
					secret3 = nil
				}
				tokenAttributeName3 := new(string)
				if !r.InputGrafana.Two.PrometheusAuth.TokenAttributeName.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.TokenAttributeName.IsNull() {
					*tokenAttributeName3 = r.InputGrafana.Two.PrometheusAuth.TokenAttributeName.ValueString()
				} else {
					tokenAttributeName3 = nil
				}
				authHeaderExpr3 := new(string)
				if !r.InputGrafana.Two.PrometheusAuth.AuthHeaderExpr.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.AuthHeaderExpr.IsNull() {
					*authHeaderExpr3 = r.InputGrafana.Two.PrometheusAuth.AuthHeaderExpr.ValueString()
				} else {
					authHeaderExpr3 = nil
				}
				tokenTimeoutSecs3 := new(float64)
				if !r.InputGrafana.Two.PrometheusAuth.TokenTimeoutSecs.IsUnknown() && !r.InputGrafana.Two.PrometheusAuth.TokenTimeoutSecs.IsNull() {
					*tokenTimeoutSecs3 = r.InputGrafana.Two.PrometheusAuth.TokenTimeoutSecs.ValueFloat64()
				} else {
					tokenTimeoutSecs3 = nil
				}
				oauthParams3 := make([]shared.InputInputGrafana2OauthParams, 0, len(r.InputGrafana.Two.PrometheusAuth.OauthParams))
				for _, oauthParamsItem3 := range r.InputGrafana.Two.PrometheusAuth.OauthParams {
					var name22 string
					name22 = oauthParamsItem3.Name.ValueString()

					var value22 string
					value22 = oauthParamsItem3.Value.ValueString()

					oauthParams3 = append(oauthParams3, shared.InputInputGrafana2OauthParams{
						Name:  name22,
						Value: value22,
					})
				}
				oauthHeaders3 := make([]shared.InputInputGrafana2OauthHeaders, 0, len(r.InputGrafana.Two.PrometheusAuth.OauthHeaders))
				for _, oauthHeadersItem3 := range r.InputGrafana.Two.PrometheusAuth.OauthHeaders {
					var name23 string
					name23 = oauthHeadersItem3.Name.ValueString()

					var value23 string
					value23 = oauthHeadersItem3.Value.ValueString()

					oauthHeaders3 = append(oauthHeaders3, shared.InputInputGrafana2OauthHeaders{
						Name:  name23,
						Value: value23,
					})
				}
				prometheusAuth1 = &shared.InputGrafanaPrometheusAuth{
					AuthType:           authType7,
					Username:           username4,
					Password:           password4,
					Token:              token6,
					CredentialsSecret:  credentialsSecret7,
					TextSecret:         textSecret4,
					LoginURL:           loginUrl3,
					SecretParamName:    secretParamName3,
					Secret:             secret3,
					TokenAttributeName: tokenAttributeName3,
					AuthHeaderExpr:     authHeaderExpr3,
					TokenTimeoutSecs:   tokenTimeoutSecs3,
					OauthParams:        oauthParams3,
					OauthHeaders:       oauthHeaders3,
				}
			}
			var lokiAuth1 *shared.InputGrafanaLokiAuth
			if r.InputGrafana.Two.LokiAuth != nil {
				authType8 := new(shared.InputInputGrafana2LokiAuthAuthenticationType)
				if !r.InputGrafana.Two.LokiAuth.AuthType.IsUnknown() && !r.InputGrafana.Two.LokiAuth.AuthType.IsNull() {
					*authType8 = shared.InputInputGrafana2LokiAuthAuthenticationType(r.InputGrafana.Two.LokiAuth.AuthType.ValueString())
				} else {
					authType8 = nil
				}
				username5 := new(string)
				if !r.InputGrafana.Two.LokiAuth.Username.IsUnknown() && !r.InputGrafana.Two.LokiAuth.Username.IsNull() {
					*username5 = r.InputGrafana.Two.LokiAuth.Username.ValueString()
				} else {
					username5 = nil
				}
				password5 := new(string)
				if !r.InputGrafana.Two.LokiAuth.Password.IsUnknown() && !r.InputGrafana.Two.LokiAuth.Password.IsNull() {
					*password5 = r.InputGrafana.Two.LokiAuth.Password.ValueString()
				} else {
					password5 = nil
				}
				token7 := new(string)
				if !r.InputGrafana.Two.LokiAuth.Token.IsUnknown() && !r.InputGrafana.Two.LokiAuth.Token.IsNull() {
					*token7 = r.InputGrafana.Two.LokiAuth.Token.ValueString()
				} else {
					token7 = nil
				}
				credentialsSecret8 := new(string)
				if !r.InputGrafana.Two.LokiAuth.CredentialsSecret.IsUnknown() && !r.InputGrafana.Two.LokiAuth.CredentialsSecret.IsNull() {
					*credentialsSecret8 = r.InputGrafana.Two.LokiAuth.CredentialsSecret.ValueString()
				} else {
					credentialsSecret8 = nil
				}
				textSecret5 := new(string)
				if !r.InputGrafana.Two.LokiAuth.TextSecret.IsUnknown() && !r.InputGrafana.Two.LokiAuth.TextSecret.IsNull() {
					*textSecret5 = r.InputGrafana.Two.LokiAuth.TextSecret.ValueString()
				} else {
					textSecret5 = nil
				}
				loginUrl4 := new(string)
				if !r.InputGrafana.Two.LokiAuth.LoginURL.IsUnknown() && !r.InputGrafana.Two.LokiAuth.LoginURL.IsNull() {
					*loginUrl4 = r.InputGrafana.Two.LokiAuth.LoginURL.ValueString()
				} else {
					loginUrl4 = nil
				}
				secretParamName4 := new(string)
				if !r.InputGrafana.Two.LokiAuth.SecretParamName.IsUnknown() && !r.InputGrafana.Two.LokiAuth.SecretParamName.IsNull() {
					*secretParamName4 = r.InputGrafana.Two.LokiAuth.SecretParamName.ValueString()
				} else {
					secretParamName4 = nil
				}
				secret4 := new(string)
				if !r.InputGrafana.Two.LokiAuth.Secret.IsUnknown() && !r.InputGrafana.Two.LokiAuth.Secret.IsNull() {
					*secret4 = r.InputGrafana.Two.LokiAuth.Secret.ValueString()
				} else {
					secret4 = nil
				}
				tokenAttributeName4 := new(string)
				if !r.InputGrafana.Two.LokiAuth.TokenAttributeName.IsUnknown() && !r.InputGrafana.Two.LokiAuth.TokenAttributeName.IsNull() {
					*tokenAttributeName4 = r.InputGrafana.Two.LokiAuth.TokenAttributeName.ValueString()
				} else {
					tokenAttributeName4 = nil
				}
				authHeaderExpr4 := new(string)
				if !r.InputGrafana.Two.LokiAuth.AuthHeaderExpr.IsUnknown() && !r.InputGrafana.Two.LokiAuth.AuthHeaderExpr.IsNull() {
					*authHeaderExpr4 = r.InputGrafana.Two.LokiAuth.AuthHeaderExpr.ValueString()
				} else {
					authHeaderExpr4 = nil
				}
				tokenTimeoutSecs4 := new(float64)
				if !r.InputGrafana.Two.LokiAuth.TokenTimeoutSecs.IsUnknown() && !r.InputGrafana.Two.LokiAuth.TokenTimeoutSecs.IsNull() {
					*tokenTimeoutSecs4 = r.InputGrafana.Two.LokiAuth.TokenTimeoutSecs.ValueFloat64()
				} else {
					tokenTimeoutSecs4 = nil
				}
				oauthParams4 := make([]shared.InputInputGrafana2LokiAuthOauthParams, 0, len(r.InputGrafana.Two.LokiAuth.OauthParams))
				for _, oauthParamsItem4 := range r.InputGrafana.Two.LokiAuth.OauthParams {
					var name24 string
					name24 = oauthParamsItem4.Name.ValueString()

					var value24 string
					value24 = oauthParamsItem4.Value.ValueString()

					oauthParams4 = append(oauthParams4, shared.InputInputGrafana2LokiAuthOauthParams{
						Name:  name24,
						Value: value24,
					})
				}
				oauthHeaders4 := make([]shared.InputInputGrafana2LokiAuthOauthHeaders, 0, len(r.InputGrafana.Two.LokiAuth.OauthHeaders))
				for _, oauthHeadersItem4 := range r.InputGrafana.Two.LokiAuth.OauthHeaders {
					var name25 string
					name25 = oauthHeadersItem4.Name.ValueString()

					var value25 string
					value25 = oauthHeadersItem4.Value.ValueString()

					oauthHeaders4 = append(oauthHeaders4, shared.InputInputGrafana2LokiAuthOauthHeaders{
						Name:  name25,
						Value: value25,
					})
				}
				lokiAuth1 = &shared.InputGrafanaLokiAuth{
					AuthType:           authType8,
					Username:           username5,
					Password:           password5,
					Token:              token7,
					CredentialsSecret:  credentialsSecret8,
					TextSecret:         textSecret5,
					LoginURL:           loginUrl4,
					SecretParamName:    secretParamName4,
					Secret:             secret4,
					TokenAttributeName: tokenAttributeName4,
					AuthHeaderExpr:     authHeaderExpr4,
					TokenTimeoutSecs:   tokenTimeoutSecs4,
					OauthParams:        oauthParams4,
					OauthHeaders:       oauthHeaders4,
				}
			}
			metadata13 := make([]shared.InputInputGrafanaMetadata, 0, len(r.InputGrafana.Two.Metadata))
			for _, metadataItem13 := range r.InputGrafana.Two.Metadata {
				var name26 string
				name26 = metadataItem13.Name.ValueString()

				var value26 string
				value26 = metadataItem13.Value.ValueString()

				metadata13 = append(metadata13, shared.InputInputGrafanaMetadata{
					Name:  name26,
					Value: value26,
				})
			}
			description13 := new(string)
			if !r.InputGrafana.Two.Description.IsUnknown() && !r.InputGrafana.Two.Description.IsNull() {
				*description13 = r.InputGrafana.Two.Description.ValueString()
			} else {
				description13 = nil
			}
			var status11 *shared.TFStatus
			if r.InputGrafana.Two.Status != nil {
				health11 := shared.Health(r.InputGrafana.Two.Status.Health.ValueString())
				metrics11 := make(map[string]interface{})
				for metricsKey11, metricsValue11 := range r.InputGrafana.Two.Status.Metrics {
					var metricsInst11 interface{}
					_ = json.Unmarshal([]byte(metricsValue11.ValueString()), &metricsInst11)
					metrics11[metricsKey11] = metricsInst11
				}
				var timestamp11 float64
				timestamp11 = r.InputGrafana.Two.Status.Timestamp.ValueFloat64()

				useStatusFromLb11 := new(bool)
				if !r.InputGrafana.Two.Status.UseStatusFromLB.IsUnknown() && !r.InputGrafana.Two.Status.UseStatusFromLB.IsNull() {
					*useStatusFromLb11 = r.InputGrafana.Two.Status.UseStatusFromLB.ValueBool()
				} else {
					useStatusFromLb11 = nil
				}
				status11 = &shared.TFStatus{
					Health:          health11,
					Metrics:         metrics11,
					Timestamp:       timestamp11,
					UseStatusFromLB: useStatusFromLb11,
				}
			}
			inputGrafana2 = &shared.InputGrafana2{
				ID:                    id11,
				Type:                  typeVar12,
				Disabled:              disabled31,
				Pipeline:              pipeline22,
				SendToRoutes:          sendToRoutes11,
				Environment:           environment11,
				PqEnabled:             pqEnabled11,
				Streamtags:            streamtags11,
				Connections:           connections11,
				Pq:                    pq11,
				Host:                  host5,
				Port:                  port5,
				TLS:                   tls11,
				MaxActiveReq:          maxActiveReq4,
				MaxRequestsPerSocket:  maxRequestsPerSocket4,
				EnableProxyHeader:     enableProxyHeader5,
				CaptureHeaders:        captureHeaders4,
				ActivityLogSampleRate: activityLogSampleRate4,
				RequestTimeout:        requestTimeout11,
				SocketTimeout:         socketTimeout4,
				KeepAliveTimeout:      keepAliveTimeout4,
				EnableHealthCheck:     enableHealthCheck4,
				IPAllowlistRegex:      ipAllowlistRegex4,
				IPDenylistRegex:       ipDenylistRegex4,
				PrometheusAPI:         prometheusApi1,
				LokiAPI:               lokiApi1,
				PrometheusAuth:        prometheusAuth1,
				LokiAuth:              lokiAuth1,
				Metadata:              metadata13,
				Description:           description13,
				Status:                status11,
			}
		}
		if inputGrafana2 != nil {
			inputGrafana = &shared.InputGrafana{
				InputGrafana2: inputGrafana2,
			}
		}
	}
	if inputGrafana != nil {
		out = shared.Input{
			InputGrafana: inputGrafana,
		}
	}
	var inputLoki *shared.InputLoki
	if r.InputLoki != nil {
		id12 := new(string)
		if !r.InputLoki.ID.IsUnknown() && !r.InputLoki.ID.IsNull() {
			*id12 = r.InputLoki.ID.ValueString()
		} else {
			id12 = nil
		}
		typeVar13 := new(shared.InputLokiType)
		if !r.InputLoki.Type.IsUnknown() && !r.InputLoki.Type.IsNull() {
			*typeVar13 = shared.InputLokiType(r.InputLoki.Type.ValueString())
		} else {
			typeVar13 = nil
		}
		disabled33 := new(bool)
		if !r.InputLoki.Disabled.IsUnknown() && !r.InputLoki.Disabled.IsNull() {
			*disabled33 = r.InputLoki.Disabled.ValueBool()
		} else {
			disabled33 = nil
		}
		pipeline24 := new(string)
		if !r.InputLoki.Pipeline.IsUnknown() && !r.InputLoki.Pipeline.IsNull() {
			*pipeline24 = r.InputLoki.Pipeline.ValueString()
		} else {
			pipeline24 = nil
		}
		sendToRoutes12 := new(bool)
		if !r.InputLoki.SendToRoutes.IsUnknown() && !r.InputLoki.SendToRoutes.IsNull() {
			*sendToRoutes12 = r.InputLoki.SendToRoutes.ValueBool()
		} else {
			sendToRoutes12 = nil
		}
		environment12 := new(string)
		if !r.InputLoki.Environment.IsUnknown() && !r.InputLoki.Environment.IsNull() {
			*environment12 = r.InputLoki.Environment.ValueString()
		} else {
			environment12 = nil
		}
		pqEnabled12 := new(bool)
		if !r.InputLoki.PqEnabled.IsUnknown() && !r.InputLoki.PqEnabled.IsNull() {
			*pqEnabled12 = r.InputLoki.PqEnabled.ValueBool()
		} else {
			pqEnabled12 = nil
		}
		streamtags12 := make([]string, 0, len(r.InputLoki.Streamtags))
		for _, streamtagsItem12 := range r.InputLoki.Streamtags {
			streamtags12 = append(streamtags12, streamtagsItem12.ValueString())
		}
		connections12 := make([]shared.InputLokiConnections, 0, len(r.InputLoki.Connections))
		for _, connectionsItem12 := range r.InputLoki.Connections {
			pipeline25 := new(string)
			if !connectionsItem12.Pipeline.IsUnknown() && !connectionsItem12.Pipeline.IsNull() {
				*pipeline25 = connectionsItem12.Pipeline.ValueString()
			} else {
				pipeline25 = nil
			}
			var output13 string
			output13 = connectionsItem12.Output.ValueString()

			connections12 = append(connections12, shared.InputLokiConnections{
				Pipeline: pipeline25,
				Output:   output13,
			})
		}
		var pq12 *shared.InputLokiPq
		if r.InputLoki.Pq != nil {
			mode12 := new(shared.InputLokiMode)
			if !r.InputLoki.Pq.Mode.IsUnknown() && !r.InputLoki.Pq.Mode.IsNull() {
				*mode12 = shared.InputLokiMode(r.InputLoki.Pq.Mode.ValueString())
			} else {
				mode12 = nil
			}
			maxBufferSize12 := new(float64)
			if !r.InputLoki.Pq.MaxBufferSize.IsUnknown() && !r.InputLoki.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize12 = r.InputLoki.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize12 = nil
			}
			commitFrequency12 := new(float64)
			if !r.InputLoki.Pq.CommitFrequency.IsUnknown() && !r.InputLoki.Pq.CommitFrequency.IsNull() {
				*commitFrequency12 = r.InputLoki.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency12 = nil
			}
			maxFileSize12 := new(string)
			if !r.InputLoki.Pq.MaxFileSize.IsUnknown() && !r.InputLoki.Pq.MaxFileSize.IsNull() {
				*maxFileSize12 = r.InputLoki.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize12 = nil
			}
			maxSize12 := new(string)
			if !r.InputLoki.Pq.MaxSize.IsUnknown() && !r.InputLoki.Pq.MaxSize.IsNull() {
				*maxSize12 = r.InputLoki.Pq.MaxSize.ValueString()
			} else {
				maxSize12 = nil
			}
			path12 := new(string)
			if !r.InputLoki.Pq.Path.IsUnknown() && !r.InputLoki.Pq.Path.IsNull() {
				*path12 = r.InputLoki.Pq.Path.ValueString()
			} else {
				path12 = nil
			}
			compress13 := new(shared.InputLokiCompression)
			if !r.InputLoki.Pq.Compress.IsUnknown() && !r.InputLoki.Pq.Compress.IsNull() {
				*compress13 = shared.InputLokiCompression(r.InputLoki.Pq.Compress.ValueString())
			} else {
				compress13 = nil
			}
			pq12 = &shared.InputLokiPq{
				Mode:            mode12,
				MaxBufferSize:   maxBufferSize12,
				CommitFrequency: commitFrequency12,
				MaxFileSize:     maxFileSize12,
				MaxSize:         maxSize12,
				Path:            path12,
				Compress:        compress13,
			}
		}
		host6 := new(string)
		if !r.InputLoki.Host.IsUnknown() && !r.InputLoki.Host.IsNull() {
			*host6 = r.InputLoki.Host.ValueString()
		} else {
			host6 = nil
		}
		var port6 float64
		port6 = r.InputLoki.Port.ValueFloat64()

		var tls12 *shared.InputLokiTLSSettingsServerSide
		if r.InputLoki.TLS != nil {
			disabled34 := new(bool)
			if !r.InputLoki.TLS.Disabled.IsUnknown() && !r.InputLoki.TLS.Disabled.IsNull() {
				*disabled34 = r.InputLoki.TLS.Disabled.ValueBool()
			} else {
				disabled34 = nil
			}
			certificateName13 := new(string)
			if !r.InputLoki.TLS.CertificateName.IsUnknown() && !r.InputLoki.TLS.CertificateName.IsNull() {
				*certificateName13 = r.InputLoki.TLS.CertificateName.ValueString()
			} else {
				certificateName13 = nil
			}
			privKeyPath12 := new(string)
			if !r.InputLoki.TLS.PrivKeyPath.IsUnknown() && !r.InputLoki.TLS.PrivKeyPath.IsNull() {
				*privKeyPath12 = r.InputLoki.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath12 = nil
			}
			passphrase12 := new(string)
			if !r.InputLoki.TLS.Passphrase.IsUnknown() && !r.InputLoki.TLS.Passphrase.IsNull() {
				*passphrase12 = r.InputLoki.TLS.Passphrase.ValueString()
			} else {
				passphrase12 = nil
			}
			certPath12 := new(string)
			if !r.InputLoki.TLS.CertPath.IsUnknown() && !r.InputLoki.TLS.CertPath.IsNull() {
				*certPath12 = r.InputLoki.TLS.CertPath.ValueString()
			} else {
				certPath12 = nil
			}
			caPath12 := new(string)
			if !r.InputLoki.TLS.CaPath.IsUnknown() && !r.InputLoki.TLS.CaPath.IsNull() {
				*caPath12 = r.InputLoki.TLS.CaPath.ValueString()
			} else {
				caPath12 = nil
			}
			requestCert6 := new(bool)
			if !r.InputLoki.TLS.RequestCert.IsUnknown() && !r.InputLoki.TLS.RequestCert.IsNull() {
				*requestCert6 = r.InputLoki.TLS.RequestCert.ValueBool()
			} else {
				requestCert6 = nil
			}
			var rejectUnauthorized15 interface{}
			if !r.InputLoki.TLS.RejectUnauthorized.IsUnknown() && !r.InputLoki.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputLoki.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized15)
			}
			var commonNameRegex6 interface{}
			if !r.InputLoki.TLS.CommonNameRegex.IsUnknown() && !r.InputLoki.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputLoki.TLS.CommonNameRegex.ValueString()), &commonNameRegex6)
			}
			minVersion12 := new(shared.InputLokiMinimumTLSVersion)
			if !r.InputLoki.TLS.MinVersion.IsUnknown() && !r.InputLoki.TLS.MinVersion.IsNull() {
				*minVersion12 = shared.InputLokiMinimumTLSVersion(r.InputLoki.TLS.MinVersion.ValueString())
			} else {
				minVersion12 = nil
			}
			maxVersion12 := new(shared.InputLokiMaximumTLSVersion)
			if !r.InputLoki.TLS.MaxVersion.IsUnknown() && !r.InputLoki.TLS.MaxVersion.IsNull() {
				*maxVersion12 = shared.InputLokiMaximumTLSVersion(r.InputLoki.TLS.MaxVersion.ValueString())
			} else {
				maxVersion12 = nil
			}
			tls12 = &shared.InputLokiTLSSettingsServerSide{
				Disabled:           disabled34,
				CertificateName:    certificateName13,
				PrivKeyPath:        privKeyPath12,
				Passphrase:         passphrase12,
				CertPath:           certPath12,
				CaPath:             caPath12,
				RequestCert:        requestCert6,
				RejectUnauthorized: rejectUnauthorized15,
				CommonNameRegex:    commonNameRegex6,
				MinVersion:         minVersion12,
				MaxVersion:         maxVersion12,
			}
		}
		maxActiveReq5 := new(float64)
		if !r.InputLoki.MaxActiveReq.IsUnknown() && !r.InputLoki.MaxActiveReq.IsNull() {
			*maxActiveReq5 = r.InputLoki.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq5 = nil
		}
		maxRequestsPerSocket5 := new(int64)
		if !r.InputLoki.MaxRequestsPerSocket.IsUnknown() && !r.InputLoki.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket5 = r.InputLoki.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket5 = nil
		}
		enableProxyHeader6 := new(bool)
		if !r.InputLoki.EnableProxyHeader.IsUnknown() && !r.InputLoki.EnableProxyHeader.IsNull() {
			*enableProxyHeader6 = r.InputLoki.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader6 = nil
		}
		captureHeaders5 := new(bool)
		if !r.InputLoki.CaptureHeaders.IsUnknown() && !r.InputLoki.CaptureHeaders.IsNull() {
			*captureHeaders5 = r.InputLoki.CaptureHeaders.ValueBool()
		} else {
			captureHeaders5 = nil
		}
		activityLogSampleRate5 := new(float64)
		if !r.InputLoki.ActivityLogSampleRate.IsUnknown() && !r.InputLoki.ActivityLogSampleRate.IsNull() {
			*activityLogSampleRate5 = r.InputLoki.ActivityLogSampleRate.ValueFloat64()
		} else {
			activityLogSampleRate5 = nil
		}
		requestTimeout12 := new(float64)
		if !r.InputLoki.RequestTimeout.IsUnknown() && !r.InputLoki.RequestTimeout.IsNull() {
			*requestTimeout12 = r.InputLoki.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout12 = nil
		}
		socketTimeout5 := new(float64)
		if !r.InputLoki.SocketTimeout.IsUnknown() && !r.InputLoki.SocketTimeout.IsNull() {
			*socketTimeout5 = r.InputLoki.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout5 = nil
		}
		keepAliveTimeout5 := new(float64)
		if !r.InputLoki.KeepAliveTimeout.IsUnknown() && !r.InputLoki.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout5 = r.InputLoki.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout5 = nil
		}
		enableHealthCheck5 := new(bool)
		if !r.InputLoki.EnableHealthCheck.IsUnknown() && !r.InputLoki.EnableHealthCheck.IsNull() {
			*enableHealthCheck5 = r.InputLoki.EnableHealthCheck.ValueBool()
		} else {
			enableHealthCheck5 = nil
		}
		ipAllowlistRegex5 := new(string)
		if !r.InputLoki.IPAllowlistRegex.IsUnknown() && !r.InputLoki.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex5 = r.InputLoki.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex5 = nil
		}
		ipDenylistRegex5 := new(string)
		if !r.InputLoki.IPDenylistRegex.IsUnknown() && !r.InputLoki.IPDenylistRegex.IsNull() {
			*ipDenylistRegex5 = r.InputLoki.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex5 = nil
		}
		lokiApi2 := new(string)
		if !r.InputLoki.LokiAPI.IsUnknown() && !r.InputLoki.LokiAPI.IsNull() {
			*lokiApi2 = r.InputLoki.LokiAPI.ValueString()
		} else {
			lokiApi2 = nil
		}
		authType9 := new(shared.InputLokiAuthenticationType)
		if !r.InputLoki.AuthType.IsUnknown() && !r.InputLoki.AuthType.IsNull() {
			*authType9 = shared.InputLokiAuthenticationType(r.InputLoki.AuthType.ValueString())
		} else {
			authType9 = nil
		}
		metadata14 := make([]shared.InputLokiMetadata, 0, len(r.InputLoki.Metadata))
		for _, metadataItem14 := range r.InputLoki.Metadata {
			var name27 string
			name27 = metadataItem14.Name.ValueString()

			var value27 string
			value27 = metadataItem14.Value.ValueString()

			metadata14 = append(metadata14, shared.InputLokiMetadata{
				Name:  name27,
				Value: value27,
			})
		}
		description14 := new(string)
		if !r.InputLoki.Description.IsUnknown() && !r.InputLoki.Description.IsNull() {
			*description14 = r.InputLoki.Description.ValueString()
		} else {
			description14 = nil
		}
		username6 := new(string)
		if !r.InputLoki.Username.IsUnknown() && !r.InputLoki.Username.IsNull() {
			*username6 = r.InputLoki.Username.ValueString()
		} else {
			username6 = nil
		}
		password6 := new(string)
		if !r.InputLoki.Password.IsUnknown() && !r.InputLoki.Password.IsNull() {
			*password6 = r.InputLoki.Password.ValueString()
		} else {
			password6 = nil
		}
		token8 := new(string)
		if !r.InputLoki.Token.IsUnknown() && !r.InputLoki.Token.IsNull() {
			*token8 = r.InputLoki.Token.ValueString()
		} else {
			token8 = nil
		}
		credentialsSecret9 := new(string)
		if !r.InputLoki.CredentialsSecret.IsUnknown() && !r.InputLoki.CredentialsSecret.IsNull() {
			*credentialsSecret9 = r.InputLoki.CredentialsSecret.ValueString()
		} else {
			credentialsSecret9 = nil
		}
		textSecret6 := new(string)
		if !r.InputLoki.TextSecret.IsUnknown() && !r.InputLoki.TextSecret.IsNull() {
			*textSecret6 = r.InputLoki.TextSecret.ValueString()
		} else {
			textSecret6 = nil
		}
		loginUrl5 := new(string)
		if !r.InputLoki.LoginURL.IsUnknown() && !r.InputLoki.LoginURL.IsNull() {
			*loginUrl5 = r.InputLoki.LoginURL.ValueString()
		} else {
			loginUrl5 = nil
		}
		secretParamName5 := new(string)
		if !r.InputLoki.SecretParamName.IsUnknown() && !r.InputLoki.SecretParamName.IsNull() {
			*secretParamName5 = r.InputLoki.SecretParamName.ValueString()
		} else {
			secretParamName5 = nil
		}
		secret5 := new(string)
		if !r.InputLoki.Secret.IsUnknown() && !r.InputLoki.Secret.IsNull() {
			*secret5 = r.InputLoki.Secret.ValueString()
		} else {
			secret5 = nil
		}
		tokenAttributeName5 := new(string)
		if !r.InputLoki.TokenAttributeName.IsUnknown() && !r.InputLoki.TokenAttributeName.IsNull() {
			*tokenAttributeName5 = r.InputLoki.TokenAttributeName.ValueString()
		} else {
			tokenAttributeName5 = nil
		}
		authHeaderExpr5 := new(string)
		if !r.InputLoki.AuthHeaderExpr.IsUnknown() && !r.InputLoki.AuthHeaderExpr.IsNull() {
			*authHeaderExpr5 = r.InputLoki.AuthHeaderExpr.ValueString()
		} else {
			authHeaderExpr5 = nil
		}
		tokenTimeoutSecs5 := new(float64)
		if !r.InputLoki.TokenTimeoutSecs.IsUnknown() && !r.InputLoki.TokenTimeoutSecs.IsNull() {
			*tokenTimeoutSecs5 = r.InputLoki.TokenTimeoutSecs.ValueFloat64()
		} else {
			tokenTimeoutSecs5 = nil
		}
		oauthParams5 := make([]shared.InputLokiOauthParams, 0, len(r.InputLoki.OauthParams))
		for _, oauthParamsItem5 := range r.InputLoki.OauthParams {
			var name28 string
			name28 = oauthParamsItem5.Name.ValueString()

			var value28 string
			value28 = oauthParamsItem5.Value.ValueString()

			oauthParams5 = append(oauthParams5, shared.InputLokiOauthParams{
				Name:  name28,
				Value: value28,
			})
		}
		oauthHeaders5 := make([]shared.InputLokiOauthHeaders, 0, len(r.InputLoki.OauthHeaders))
		for _, oauthHeadersItem5 := range r.InputLoki.OauthHeaders {
			var name29 string
			name29 = oauthHeadersItem5.Name.ValueString()

			var value29 string
			value29 = oauthHeadersItem5.Value.ValueString()

			oauthHeaders5 = append(oauthHeaders5, shared.InputLokiOauthHeaders{
				Name:  name29,
				Value: value29,
			})
		}
		var status12 *shared.TFStatus
		if r.InputLoki.Status != nil {
			health12 := shared.Health(r.InputLoki.Status.Health.ValueString())
			metrics12 := make(map[string]interface{})
			for metricsKey12, metricsValue12 := range r.InputLoki.Status.Metrics {
				var metricsInst12 interface{}
				_ = json.Unmarshal([]byte(metricsValue12.ValueString()), &metricsInst12)
				metrics12[metricsKey12] = metricsInst12
			}
			var timestamp12 float64
			timestamp12 = r.InputLoki.Status.Timestamp.ValueFloat64()

			useStatusFromLb12 := new(bool)
			if !r.InputLoki.Status.UseStatusFromLB.IsUnknown() && !r.InputLoki.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb12 = r.InputLoki.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb12 = nil
			}
			status12 = &shared.TFStatus{
				Health:          health12,
				Metrics:         metrics12,
				Timestamp:       timestamp12,
				UseStatusFromLB: useStatusFromLb12,
			}
		}
		inputLoki = &shared.InputLoki{
			ID:                    id12,
			Type:                  typeVar13,
			Disabled:              disabled33,
			Pipeline:              pipeline24,
			SendToRoutes:          sendToRoutes12,
			Environment:           environment12,
			PqEnabled:             pqEnabled12,
			Streamtags:            streamtags12,
			Connections:           connections12,
			Pq:                    pq12,
			Host:                  host6,
			Port:                  port6,
			TLS:                   tls12,
			MaxActiveReq:          maxActiveReq5,
			MaxRequestsPerSocket:  maxRequestsPerSocket5,
			EnableProxyHeader:     enableProxyHeader6,
			CaptureHeaders:        captureHeaders5,
			ActivityLogSampleRate: activityLogSampleRate5,
			RequestTimeout:        requestTimeout12,
			SocketTimeout:         socketTimeout5,
			KeepAliveTimeout:      keepAliveTimeout5,
			EnableHealthCheck:     enableHealthCheck5,
			IPAllowlistRegex:      ipAllowlistRegex5,
			IPDenylistRegex:       ipDenylistRegex5,
			LokiAPI:               lokiApi2,
			AuthType:              authType9,
			Metadata:              metadata14,
			Description:           description14,
			Username:              username6,
			Password:              password6,
			Token:                 token8,
			CredentialsSecret:     credentialsSecret9,
			TextSecret:            textSecret6,
			LoginURL:              loginUrl5,
			SecretParamName:       secretParamName5,
			Secret:                secret5,
			TokenAttributeName:    tokenAttributeName5,
			AuthHeaderExpr:        authHeaderExpr5,
			TokenTimeoutSecs:      tokenTimeoutSecs5,
			OauthParams:           oauthParams5,
			OauthHeaders:          oauthHeaders5,
			Status:                status12,
		}
	}
	if inputLoki != nil {
		out = shared.Input{
			InputLoki: inputLoki,
		}
	}
	var inputPrometheusRw *shared.InputPrometheusRw
	if r.InputPrometheusRw != nil {
		id13 := new(string)
		if !r.InputPrometheusRw.ID.IsUnknown() && !r.InputPrometheusRw.ID.IsNull() {
			*id13 = r.InputPrometheusRw.ID.ValueString()
		} else {
			id13 = nil
		}
		typeVar14 := new(shared.InputPrometheusRwType)
		if !r.InputPrometheusRw.Type.IsUnknown() && !r.InputPrometheusRw.Type.IsNull() {
			*typeVar14 = shared.InputPrometheusRwType(r.InputPrometheusRw.Type.ValueString())
		} else {
			typeVar14 = nil
		}
		disabled35 := new(bool)
		if !r.InputPrometheusRw.Disabled.IsUnknown() && !r.InputPrometheusRw.Disabled.IsNull() {
			*disabled35 = r.InputPrometheusRw.Disabled.ValueBool()
		} else {
			disabled35 = nil
		}
		pipeline26 := new(string)
		if !r.InputPrometheusRw.Pipeline.IsUnknown() && !r.InputPrometheusRw.Pipeline.IsNull() {
			*pipeline26 = r.InputPrometheusRw.Pipeline.ValueString()
		} else {
			pipeline26 = nil
		}
		sendToRoutes13 := new(bool)
		if !r.InputPrometheusRw.SendToRoutes.IsUnknown() && !r.InputPrometheusRw.SendToRoutes.IsNull() {
			*sendToRoutes13 = r.InputPrometheusRw.SendToRoutes.ValueBool()
		} else {
			sendToRoutes13 = nil
		}
		environment13 := new(string)
		if !r.InputPrometheusRw.Environment.IsUnknown() && !r.InputPrometheusRw.Environment.IsNull() {
			*environment13 = r.InputPrometheusRw.Environment.ValueString()
		} else {
			environment13 = nil
		}
		pqEnabled13 := new(bool)
		if !r.InputPrometheusRw.PqEnabled.IsUnknown() && !r.InputPrometheusRw.PqEnabled.IsNull() {
			*pqEnabled13 = r.InputPrometheusRw.PqEnabled.ValueBool()
		} else {
			pqEnabled13 = nil
		}
		streamtags13 := make([]string, 0, len(r.InputPrometheusRw.Streamtags))
		for _, streamtagsItem13 := range r.InputPrometheusRw.Streamtags {
			streamtags13 = append(streamtags13, streamtagsItem13.ValueString())
		}
		connections13 := make([]shared.InputPrometheusRwConnections, 0, len(r.InputPrometheusRw.Connections))
		for _, connectionsItem13 := range r.InputPrometheusRw.Connections {
			pipeline27 := new(string)
			if !connectionsItem13.Pipeline.IsUnknown() && !connectionsItem13.Pipeline.IsNull() {
				*pipeline27 = connectionsItem13.Pipeline.ValueString()
			} else {
				pipeline27 = nil
			}
			var output14 string
			output14 = connectionsItem13.Output.ValueString()

			connections13 = append(connections13, shared.InputPrometheusRwConnections{
				Pipeline: pipeline27,
				Output:   output14,
			})
		}
		var pq13 *shared.InputPrometheusRwPq
		if r.InputPrometheusRw.Pq != nil {
			mode13 := new(shared.InputPrometheusRwMode)
			if !r.InputPrometheusRw.Pq.Mode.IsUnknown() && !r.InputPrometheusRw.Pq.Mode.IsNull() {
				*mode13 = shared.InputPrometheusRwMode(r.InputPrometheusRw.Pq.Mode.ValueString())
			} else {
				mode13 = nil
			}
			maxBufferSize13 := new(float64)
			if !r.InputPrometheusRw.Pq.MaxBufferSize.IsUnknown() && !r.InputPrometheusRw.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize13 = r.InputPrometheusRw.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize13 = nil
			}
			commitFrequency13 := new(float64)
			if !r.InputPrometheusRw.Pq.CommitFrequency.IsUnknown() && !r.InputPrometheusRw.Pq.CommitFrequency.IsNull() {
				*commitFrequency13 = r.InputPrometheusRw.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency13 = nil
			}
			maxFileSize13 := new(string)
			if !r.InputPrometheusRw.Pq.MaxFileSize.IsUnknown() && !r.InputPrometheusRw.Pq.MaxFileSize.IsNull() {
				*maxFileSize13 = r.InputPrometheusRw.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize13 = nil
			}
			maxSize13 := new(string)
			if !r.InputPrometheusRw.Pq.MaxSize.IsUnknown() && !r.InputPrometheusRw.Pq.MaxSize.IsNull() {
				*maxSize13 = r.InputPrometheusRw.Pq.MaxSize.ValueString()
			} else {
				maxSize13 = nil
			}
			path13 := new(string)
			if !r.InputPrometheusRw.Pq.Path.IsUnknown() && !r.InputPrometheusRw.Pq.Path.IsNull() {
				*path13 = r.InputPrometheusRw.Pq.Path.ValueString()
			} else {
				path13 = nil
			}
			compress14 := new(shared.InputPrometheusRwCompression)
			if !r.InputPrometheusRw.Pq.Compress.IsUnknown() && !r.InputPrometheusRw.Pq.Compress.IsNull() {
				*compress14 = shared.InputPrometheusRwCompression(r.InputPrometheusRw.Pq.Compress.ValueString())
			} else {
				compress14 = nil
			}
			pq13 = &shared.InputPrometheusRwPq{
				Mode:            mode13,
				MaxBufferSize:   maxBufferSize13,
				CommitFrequency: commitFrequency13,
				MaxFileSize:     maxFileSize13,
				MaxSize:         maxSize13,
				Path:            path13,
				Compress:        compress14,
			}
		}
		host7 := new(string)
		if !r.InputPrometheusRw.Host.IsUnknown() && !r.InputPrometheusRw.Host.IsNull() {
			*host7 = r.InputPrometheusRw.Host.ValueString()
		} else {
			host7 = nil
		}
		var port7 float64
		port7 = r.InputPrometheusRw.Port.ValueFloat64()

		var tls13 *shared.InputPrometheusRwTLSSettingsServerSide
		if r.InputPrometheusRw.TLS != nil {
			disabled36 := new(bool)
			if !r.InputPrometheusRw.TLS.Disabled.IsUnknown() && !r.InputPrometheusRw.TLS.Disabled.IsNull() {
				*disabled36 = r.InputPrometheusRw.TLS.Disabled.ValueBool()
			} else {
				disabled36 = nil
			}
			certificateName14 := new(string)
			if !r.InputPrometheusRw.TLS.CertificateName.IsUnknown() && !r.InputPrometheusRw.TLS.CertificateName.IsNull() {
				*certificateName14 = r.InputPrometheusRw.TLS.CertificateName.ValueString()
			} else {
				certificateName14 = nil
			}
			privKeyPath13 := new(string)
			if !r.InputPrometheusRw.TLS.PrivKeyPath.IsUnknown() && !r.InputPrometheusRw.TLS.PrivKeyPath.IsNull() {
				*privKeyPath13 = r.InputPrometheusRw.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath13 = nil
			}
			passphrase13 := new(string)
			if !r.InputPrometheusRw.TLS.Passphrase.IsUnknown() && !r.InputPrometheusRw.TLS.Passphrase.IsNull() {
				*passphrase13 = r.InputPrometheusRw.TLS.Passphrase.ValueString()
			} else {
				passphrase13 = nil
			}
			certPath13 := new(string)
			if !r.InputPrometheusRw.TLS.CertPath.IsUnknown() && !r.InputPrometheusRw.TLS.CertPath.IsNull() {
				*certPath13 = r.InputPrometheusRw.TLS.CertPath.ValueString()
			} else {
				certPath13 = nil
			}
			caPath13 := new(string)
			if !r.InputPrometheusRw.TLS.CaPath.IsUnknown() && !r.InputPrometheusRw.TLS.CaPath.IsNull() {
				*caPath13 = r.InputPrometheusRw.TLS.CaPath.ValueString()
			} else {
				caPath13 = nil
			}
			requestCert7 := new(bool)
			if !r.InputPrometheusRw.TLS.RequestCert.IsUnknown() && !r.InputPrometheusRw.TLS.RequestCert.IsNull() {
				*requestCert7 = r.InputPrometheusRw.TLS.RequestCert.ValueBool()
			} else {
				requestCert7 = nil
			}
			var rejectUnauthorized16 interface{}
			if !r.InputPrometheusRw.TLS.RejectUnauthorized.IsUnknown() && !r.InputPrometheusRw.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputPrometheusRw.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized16)
			}
			var commonNameRegex7 interface{}
			if !r.InputPrometheusRw.TLS.CommonNameRegex.IsUnknown() && !r.InputPrometheusRw.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputPrometheusRw.TLS.CommonNameRegex.ValueString()), &commonNameRegex7)
			}
			minVersion13 := new(shared.InputPrometheusRwMinimumTLSVersion)
			if !r.InputPrometheusRw.TLS.MinVersion.IsUnknown() && !r.InputPrometheusRw.TLS.MinVersion.IsNull() {
				*minVersion13 = shared.InputPrometheusRwMinimumTLSVersion(r.InputPrometheusRw.TLS.MinVersion.ValueString())
			} else {
				minVersion13 = nil
			}
			maxVersion13 := new(shared.InputPrometheusRwMaximumTLSVersion)
			if !r.InputPrometheusRw.TLS.MaxVersion.IsUnknown() && !r.InputPrometheusRw.TLS.MaxVersion.IsNull() {
				*maxVersion13 = shared.InputPrometheusRwMaximumTLSVersion(r.InputPrometheusRw.TLS.MaxVersion.ValueString())
			} else {
				maxVersion13 = nil
			}
			tls13 = &shared.InputPrometheusRwTLSSettingsServerSide{
				Disabled:           disabled36,
				CertificateName:    certificateName14,
				PrivKeyPath:        privKeyPath13,
				Passphrase:         passphrase13,
				CertPath:           certPath13,
				CaPath:             caPath13,
				RequestCert:        requestCert7,
				RejectUnauthorized: rejectUnauthorized16,
				CommonNameRegex:    commonNameRegex7,
				MinVersion:         minVersion13,
				MaxVersion:         maxVersion13,
			}
		}
		maxActiveReq6 := new(float64)
		if !r.InputPrometheusRw.MaxActiveReq.IsUnknown() && !r.InputPrometheusRw.MaxActiveReq.IsNull() {
			*maxActiveReq6 = r.InputPrometheusRw.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq6 = nil
		}
		maxRequestsPerSocket6 := new(int64)
		if !r.InputPrometheusRw.MaxRequestsPerSocket.IsUnknown() && !r.InputPrometheusRw.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket6 = r.InputPrometheusRw.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket6 = nil
		}
		enableProxyHeader7 := new(bool)
		if !r.InputPrometheusRw.EnableProxyHeader.IsUnknown() && !r.InputPrometheusRw.EnableProxyHeader.IsNull() {
			*enableProxyHeader7 = r.InputPrometheusRw.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader7 = nil
		}
		captureHeaders6 := new(bool)
		if !r.InputPrometheusRw.CaptureHeaders.IsUnknown() && !r.InputPrometheusRw.CaptureHeaders.IsNull() {
			*captureHeaders6 = r.InputPrometheusRw.CaptureHeaders.ValueBool()
		} else {
			captureHeaders6 = nil
		}
		activityLogSampleRate6 := new(float64)
		if !r.InputPrometheusRw.ActivityLogSampleRate.IsUnknown() && !r.InputPrometheusRw.ActivityLogSampleRate.IsNull() {
			*activityLogSampleRate6 = r.InputPrometheusRw.ActivityLogSampleRate.ValueFloat64()
		} else {
			activityLogSampleRate6 = nil
		}
		requestTimeout13 := new(float64)
		if !r.InputPrometheusRw.RequestTimeout.IsUnknown() && !r.InputPrometheusRw.RequestTimeout.IsNull() {
			*requestTimeout13 = r.InputPrometheusRw.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout13 = nil
		}
		socketTimeout6 := new(float64)
		if !r.InputPrometheusRw.SocketTimeout.IsUnknown() && !r.InputPrometheusRw.SocketTimeout.IsNull() {
			*socketTimeout6 = r.InputPrometheusRw.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout6 = nil
		}
		keepAliveTimeout6 := new(float64)
		if !r.InputPrometheusRw.KeepAliveTimeout.IsUnknown() && !r.InputPrometheusRw.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout6 = r.InputPrometheusRw.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout6 = nil
		}
		enableHealthCheck6 := new(bool)
		if !r.InputPrometheusRw.EnableHealthCheck.IsUnknown() && !r.InputPrometheusRw.EnableHealthCheck.IsNull() {
			*enableHealthCheck6 = r.InputPrometheusRw.EnableHealthCheck.ValueBool()
		} else {
			enableHealthCheck6 = nil
		}
		ipAllowlistRegex6 := new(string)
		if !r.InputPrometheusRw.IPAllowlistRegex.IsUnknown() && !r.InputPrometheusRw.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex6 = r.InputPrometheusRw.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex6 = nil
		}
		ipDenylistRegex6 := new(string)
		if !r.InputPrometheusRw.IPDenylistRegex.IsUnknown() && !r.InputPrometheusRw.IPDenylistRegex.IsNull() {
			*ipDenylistRegex6 = r.InputPrometheusRw.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex6 = nil
		}
		prometheusApi2 := new(string)
		if !r.InputPrometheusRw.PrometheusAPI.IsUnknown() && !r.InputPrometheusRw.PrometheusAPI.IsNull() {
			*prometheusApi2 = r.InputPrometheusRw.PrometheusAPI.ValueString()
		} else {
			prometheusApi2 = nil
		}
		authType10 := new(shared.InputPrometheusRwAuthenticationType)
		if !r.InputPrometheusRw.AuthType.IsUnknown() && !r.InputPrometheusRw.AuthType.IsNull() {
			*authType10 = shared.InputPrometheusRwAuthenticationType(r.InputPrometheusRw.AuthType.ValueString())
		} else {
			authType10 = nil
		}
		metadata15 := make([]shared.InputPrometheusRwMetadata, 0, len(r.InputPrometheusRw.Metadata))
		for _, metadataItem15 := range r.InputPrometheusRw.Metadata {
			var name30 string
			name30 = metadataItem15.Name.ValueString()

			var value30 string
			value30 = metadataItem15.Value.ValueString()

			metadata15 = append(metadata15, shared.InputPrometheusRwMetadata{
				Name:  name30,
				Value: value30,
			})
		}
		description15 := new(string)
		if !r.InputPrometheusRw.Description.IsUnknown() && !r.InputPrometheusRw.Description.IsNull() {
			*description15 = r.InputPrometheusRw.Description.ValueString()
		} else {
			description15 = nil
		}
		username7 := new(string)
		if !r.InputPrometheusRw.Username.IsUnknown() && !r.InputPrometheusRw.Username.IsNull() {
			*username7 = r.InputPrometheusRw.Username.ValueString()
		} else {
			username7 = nil
		}
		password7 := new(string)
		if !r.InputPrometheusRw.Password.IsUnknown() && !r.InputPrometheusRw.Password.IsNull() {
			*password7 = r.InputPrometheusRw.Password.ValueString()
		} else {
			password7 = nil
		}
		token9 := new(string)
		if !r.InputPrometheusRw.Token.IsUnknown() && !r.InputPrometheusRw.Token.IsNull() {
			*token9 = r.InputPrometheusRw.Token.ValueString()
		} else {
			token9 = nil
		}
		credentialsSecret10 := new(string)
		if !r.InputPrometheusRw.CredentialsSecret.IsUnknown() && !r.InputPrometheusRw.CredentialsSecret.IsNull() {
			*credentialsSecret10 = r.InputPrometheusRw.CredentialsSecret.ValueString()
		} else {
			credentialsSecret10 = nil
		}
		textSecret7 := new(string)
		if !r.InputPrometheusRw.TextSecret.IsUnknown() && !r.InputPrometheusRw.TextSecret.IsNull() {
			*textSecret7 = r.InputPrometheusRw.TextSecret.ValueString()
		} else {
			textSecret7 = nil
		}
		loginUrl6 := new(string)
		if !r.InputPrometheusRw.LoginURL.IsUnknown() && !r.InputPrometheusRw.LoginURL.IsNull() {
			*loginUrl6 = r.InputPrometheusRw.LoginURL.ValueString()
		} else {
			loginUrl6 = nil
		}
		secretParamName6 := new(string)
		if !r.InputPrometheusRw.SecretParamName.IsUnknown() && !r.InputPrometheusRw.SecretParamName.IsNull() {
			*secretParamName6 = r.InputPrometheusRw.SecretParamName.ValueString()
		} else {
			secretParamName6 = nil
		}
		secret6 := new(string)
		if !r.InputPrometheusRw.Secret.IsUnknown() && !r.InputPrometheusRw.Secret.IsNull() {
			*secret6 = r.InputPrometheusRw.Secret.ValueString()
		} else {
			secret6 = nil
		}
		tokenAttributeName6 := new(string)
		if !r.InputPrometheusRw.TokenAttributeName.IsUnknown() && !r.InputPrometheusRw.TokenAttributeName.IsNull() {
			*tokenAttributeName6 = r.InputPrometheusRw.TokenAttributeName.ValueString()
		} else {
			tokenAttributeName6 = nil
		}
		authHeaderExpr6 := new(string)
		if !r.InputPrometheusRw.AuthHeaderExpr.IsUnknown() && !r.InputPrometheusRw.AuthHeaderExpr.IsNull() {
			*authHeaderExpr6 = r.InputPrometheusRw.AuthHeaderExpr.ValueString()
		} else {
			authHeaderExpr6 = nil
		}
		tokenTimeoutSecs6 := new(float64)
		if !r.InputPrometheusRw.TokenTimeoutSecs.IsUnknown() && !r.InputPrometheusRw.TokenTimeoutSecs.IsNull() {
			*tokenTimeoutSecs6 = r.InputPrometheusRw.TokenTimeoutSecs.ValueFloat64()
		} else {
			tokenTimeoutSecs6 = nil
		}
		oauthParams6 := make([]shared.InputPrometheusRwOauthParams, 0, len(r.InputPrometheusRw.OauthParams))
		for _, oauthParamsItem6 := range r.InputPrometheusRw.OauthParams {
			var name31 string
			name31 = oauthParamsItem6.Name.ValueString()

			var value31 string
			value31 = oauthParamsItem6.Value.ValueString()

			oauthParams6 = append(oauthParams6, shared.InputPrometheusRwOauthParams{
				Name:  name31,
				Value: value31,
			})
		}
		oauthHeaders6 := make([]shared.InputPrometheusRwOauthHeaders, 0, len(r.InputPrometheusRw.OauthHeaders))
		for _, oauthHeadersItem6 := range r.InputPrometheusRw.OauthHeaders {
			var name32 string
			name32 = oauthHeadersItem6.Name.ValueString()

			var value32 string
			value32 = oauthHeadersItem6.Value.ValueString()

			oauthHeaders6 = append(oauthHeaders6, shared.InputPrometheusRwOauthHeaders{
				Name:  name32,
				Value: value32,
			})
		}
		var status13 *shared.TFStatus
		if r.InputPrometheusRw.Status != nil {
			health13 := shared.Health(r.InputPrometheusRw.Status.Health.ValueString())
			metrics13 := make(map[string]interface{})
			for metricsKey13, metricsValue13 := range r.InputPrometheusRw.Status.Metrics {
				var metricsInst13 interface{}
				_ = json.Unmarshal([]byte(metricsValue13.ValueString()), &metricsInst13)
				metrics13[metricsKey13] = metricsInst13
			}
			var timestamp13 float64
			timestamp13 = r.InputPrometheusRw.Status.Timestamp.ValueFloat64()

			useStatusFromLb13 := new(bool)
			if !r.InputPrometheusRw.Status.UseStatusFromLB.IsUnknown() && !r.InputPrometheusRw.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb13 = r.InputPrometheusRw.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb13 = nil
			}
			status13 = &shared.TFStatus{
				Health:          health13,
				Metrics:         metrics13,
				Timestamp:       timestamp13,
				UseStatusFromLB: useStatusFromLb13,
			}
		}
		inputPrometheusRw = &shared.InputPrometheusRw{
			ID:                    id13,
			Type:                  typeVar14,
			Disabled:              disabled35,
			Pipeline:              pipeline26,
			SendToRoutes:          sendToRoutes13,
			Environment:           environment13,
			PqEnabled:             pqEnabled13,
			Streamtags:            streamtags13,
			Connections:           connections13,
			Pq:                    pq13,
			Host:                  host7,
			Port:                  port7,
			TLS:                   tls13,
			MaxActiveReq:          maxActiveReq6,
			MaxRequestsPerSocket:  maxRequestsPerSocket6,
			EnableProxyHeader:     enableProxyHeader7,
			CaptureHeaders:        captureHeaders6,
			ActivityLogSampleRate: activityLogSampleRate6,
			RequestTimeout:        requestTimeout13,
			SocketTimeout:         socketTimeout6,
			KeepAliveTimeout:      keepAliveTimeout6,
			EnableHealthCheck:     enableHealthCheck6,
			IPAllowlistRegex:      ipAllowlistRegex6,
			IPDenylistRegex:       ipDenylistRegex6,
			PrometheusAPI:         prometheusApi2,
			AuthType:              authType10,
			Metadata:              metadata15,
			Description:           description15,
			Username:              username7,
			Password:              password7,
			Token:                 token9,
			CredentialsSecret:     credentialsSecret10,
			TextSecret:            textSecret7,
			LoginURL:              loginUrl6,
			SecretParamName:       secretParamName6,
			Secret:                secret6,
			TokenAttributeName:    tokenAttributeName6,
			AuthHeaderExpr:        authHeaderExpr6,
			TokenTimeoutSecs:      tokenTimeoutSecs6,
			OauthParams:           oauthParams6,
			OauthHeaders:          oauthHeaders6,
			Status:                status13,
		}
	}
	if inputPrometheusRw != nil {
		out = shared.Input{
			InputPrometheusRw: inputPrometheusRw,
		}
	}
	var inputPrometheus *shared.InputPrometheus
	if r.InputPrometheus != nil {
		id14 := new(string)
		if !r.InputPrometheus.ID.IsUnknown() && !r.InputPrometheus.ID.IsNull() {
			*id14 = r.InputPrometheus.ID.ValueString()
		} else {
			id14 = nil
		}
		typeVar15 := new(shared.InputPrometheusType)
		if !r.InputPrometheus.Type.IsUnknown() && !r.InputPrometheus.Type.IsNull() {
			*typeVar15 = shared.InputPrometheusType(r.InputPrometheus.Type.ValueString())
		} else {
			typeVar15 = nil
		}
		disabled37 := new(bool)
		if !r.InputPrometheus.Disabled.IsUnknown() && !r.InputPrometheus.Disabled.IsNull() {
			*disabled37 = r.InputPrometheus.Disabled.ValueBool()
		} else {
			disabled37 = nil
		}
		pipeline28 := new(string)
		if !r.InputPrometheus.Pipeline.IsUnknown() && !r.InputPrometheus.Pipeline.IsNull() {
			*pipeline28 = r.InputPrometheus.Pipeline.ValueString()
		} else {
			pipeline28 = nil
		}
		sendToRoutes14 := new(bool)
		if !r.InputPrometheus.SendToRoutes.IsUnknown() && !r.InputPrometheus.SendToRoutes.IsNull() {
			*sendToRoutes14 = r.InputPrometheus.SendToRoutes.ValueBool()
		} else {
			sendToRoutes14 = nil
		}
		environment14 := new(string)
		if !r.InputPrometheus.Environment.IsUnknown() && !r.InputPrometheus.Environment.IsNull() {
			*environment14 = r.InputPrometheus.Environment.ValueString()
		} else {
			environment14 = nil
		}
		pqEnabled14 := new(bool)
		if !r.InputPrometheus.PqEnabled.IsUnknown() && !r.InputPrometheus.PqEnabled.IsNull() {
			*pqEnabled14 = r.InputPrometheus.PqEnabled.ValueBool()
		} else {
			pqEnabled14 = nil
		}
		streamtags14 := make([]string, 0, len(r.InputPrometheus.Streamtags))
		for _, streamtagsItem14 := range r.InputPrometheus.Streamtags {
			streamtags14 = append(streamtags14, streamtagsItem14.ValueString())
		}
		connections14 := make([]shared.InputPrometheusConnections, 0, len(r.InputPrometheus.Connections))
		for _, connectionsItem14 := range r.InputPrometheus.Connections {
			pipeline29 := new(string)
			if !connectionsItem14.Pipeline.IsUnknown() && !connectionsItem14.Pipeline.IsNull() {
				*pipeline29 = connectionsItem14.Pipeline.ValueString()
			} else {
				pipeline29 = nil
			}
			var output15 string
			output15 = connectionsItem14.Output.ValueString()

			connections14 = append(connections14, shared.InputPrometheusConnections{
				Pipeline: pipeline29,
				Output:   output15,
			})
		}
		var pq14 *shared.InputPrometheusPq
		if r.InputPrometheus.Pq != nil {
			mode14 := new(shared.InputPrometheusMode)
			if !r.InputPrometheus.Pq.Mode.IsUnknown() && !r.InputPrometheus.Pq.Mode.IsNull() {
				*mode14 = shared.InputPrometheusMode(r.InputPrometheus.Pq.Mode.ValueString())
			} else {
				mode14 = nil
			}
			maxBufferSize14 := new(float64)
			if !r.InputPrometheus.Pq.MaxBufferSize.IsUnknown() && !r.InputPrometheus.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize14 = r.InputPrometheus.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize14 = nil
			}
			commitFrequency14 := new(float64)
			if !r.InputPrometheus.Pq.CommitFrequency.IsUnknown() && !r.InputPrometheus.Pq.CommitFrequency.IsNull() {
				*commitFrequency14 = r.InputPrometheus.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency14 = nil
			}
			maxFileSize14 := new(string)
			if !r.InputPrometheus.Pq.MaxFileSize.IsUnknown() && !r.InputPrometheus.Pq.MaxFileSize.IsNull() {
				*maxFileSize14 = r.InputPrometheus.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize14 = nil
			}
			maxSize14 := new(string)
			if !r.InputPrometheus.Pq.MaxSize.IsUnknown() && !r.InputPrometheus.Pq.MaxSize.IsNull() {
				*maxSize14 = r.InputPrometheus.Pq.MaxSize.ValueString()
			} else {
				maxSize14 = nil
			}
			path14 := new(string)
			if !r.InputPrometheus.Pq.Path.IsUnknown() && !r.InputPrometheus.Pq.Path.IsNull() {
				*path14 = r.InputPrometheus.Pq.Path.ValueString()
			} else {
				path14 = nil
			}
			compress15 := new(shared.InputPrometheusCompression)
			if !r.InputPrometheus.Pq.Compress.IsUnknown() && !r.InputPrometheus.Pq.Compress.IsNull() {
				*compress15 = shared.InputPrometheusCompression(r.InputPrometheus.Pq.Compress.ValueString())
			} else {
				compress15 = nil
			}
			pq14 = &shared.InputPrometheusPq{
				Mode:            mode14,
				MaxBufferSize:   maxBufferSize14,
				CommitFrequency: commitFrequency14,
				MaxFileSize:     maxFileSize14,
				MaxSize:         maxSize14,
				Path:            path14,
				Compress:        compress15,
			}
		}
		dimensionList := make([]string, 0, len(r.InputPrometheus.DimensionList))
		for _, dimensionListItem := range r.InputPrometheus.DimensionList {
			dimensionList = append(dimensionList, dimensionListItem.ValueString())
		}
		discoveryType := new(shared.DiscoveryType)
		if !r.InputPrometheus.DiscoveryType.IsUnknown() && !r.InputPrometheus.DiscoveryType.IsNull() {
			*discoveryType = shared.DiscoveryType(r.InputPrometheus.DiscoveryType.ValueString())
		} else {
			discoveryType = nil
		}
		interval1 := new(float64)
		if !r.InputPrometheus.Interval.IsUnknown() && !r.InputPrometheus.Interval.IsNull() {
			*interval1 = r.InputPrometheus.Interval.ValueFloat64()
		} else {
			interval1 = nil
		}
		logLevel1 := new(shared.InputPrometheusLogLevel)
		if !r.InputPrometheus.LogLevel.IsUnknown() && !r.InputPrometheus.LogLevel.IsNull() {
			*logLevel1 = shared.InputPrometheusLogLevel(r.InputPrometheus.LogLevel.ValueString())
		} else {
			logLevel1 = nil
		}
		rejectUnauthorized17 := new(bool)
		if !r.InputPrometheus.RejectUnauthorized.IsUnknown() && !r.InputPrometheus.RejectUnauthorized.IsNull() {
			*rejectUnauthorized17 = r.InputPrometheus.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized17 = nil
		}
		keepAliveTime1 := new(float64)
		if !r.InputPrometheus.KeepAliveTime.IsUnknown() && !r.InputPrometheus.KeepAliveTime.IsNull() {
			*keepAliveTime1 = r.InputPrometheus.KeepAliveTime.ValueFloat64()
		} else {
			keepAliveTime1 = nil
		}
		jobTimeout1 := new(string)
		if !r.InputPrometheus.JobTimeout.IsUnknown() && !r.InputPrometheus.JobTimeout.IsNull() {
			*jobTimeout1 = r.InputPrometheus.JobTimeout.ValueString()
		} else {
			jobTimeout1 = nil
		}
		maxMissedKeepAlives1 := new(float64)
		if !r.InputPrometheus.MaxMissedKeepAlives.IsUnknown() && !r.InputPrometheus.MaxMissedKeepAlives.IsNull() {
			*maxMissedKeepAlives1 = r.InputPrometheus.MaxMissedKeepAlives.ValueFloat64()
		} else {
			maxMissedKeepAlives1 = nil
		}
		ttl1 := new(string)
		if !r.InputPrometheus.TTL.IsUnknown() && !r.InputPrometheus.TTL.IsNull() {
			*ttl1 = r.InputPrometheus.TTL.ValueString()
		} else {
			ttl1 = nil
		}
		metadata16 := make([]shared.InputPrometheusMetadata, 0, len(r.InputPrometheus.Metadata))
		for _, metadataItem16 := range r.InputPrometheus.Metadata {
			var name33 string
			name33 = metadataItem16.Name.ValueString()

			var value33 string
			value33 = metadataItem16.Value.ValueString()

			metadata16 = append(metadata16, shared.InputPrometheusMetadata{
				Name:  name33,
				Value: value33,
			})
		}
		authType11 := new(shared.InputPrometheusAuthenticationMethod)
		if !r.InputPrometheus.AuthType.IsUnknown() && !r.InputPrometheus.AuthType.IsNull() {
			*authType11 = shared.InputPrometheusAuthenticationMethod(r.InputPrometheus.AuthType.ValueString())
		} else {
			authType11 = nil
		}
		description16 := new(string)
		if !r.InputPrometheus.Description.IsUnknown() && !r.InputPrometheus.Description.IsNull() {
			*description16 = r.InputPrometheus.Description.ValueString()
		} else {
			description16 = nil
		}
		targetList := make([]string, 0, len(r.InputPrometheus.TargetList))
		for _, targetListItem := range r.InputPrometheus.TargetList {
			targetList = append(targetList, targetListItem.ValueString())
		}
		nameList := make([]string, 0, len(r.InputPrometheus.NameList))
		for _, nameListItem := range r.InputPrometheus.NameList {
			nameList = append(nameList, nameListItem.ValueString())
		}
		recordType := new(shared.RecordType)
		if !r.InputPrometheus.RecordType.IsUnknown() && !r.InputPrometheus.RecordType.IsNull() {
			*recordType = shared.RecordType(r.InputPrometheus.RecordType.ValueString())
		} else {
			recordType = nil
		}
		scrapeProtocol := new(shared.MetricsProtocol)
		if !r.InputPrometheus.ScrapeProtocol.IsUnknown() && !r.InputPrometheus.ScrapeProtocol.IsNull() {
			*scrapeProtocol = shared.MetricsProtocol(r.InputPrometheus.ScrapeProtocol.ValueString())
		} else {
			scrapeProtocol = nil
		}
		scrapePath := new(string)
		if !r.InputPrometheus.ScrapePath.IsUnknown() && !r.InputPrometheus.ScrapePath.IsNull() {
			*scrapePath = r.InputPrometheus.ScrapePath.ValueString()
		} else {
			scrapePath = nil
		}
		usePublicIP := new(bool)
		if !r.InputPrometheus.UsePublicIP.IsUnknown() && !r.InputPrometheus.UsePublicIP.IsNull() {
			*usePublicIP = r.InputPrometheus.UsePublicIP.ValueBool()
		} else {
			usePublicIP = nil
		}
		scrapePort := new(float64)
		if !r.InputPrometheus.ScrapePort.IsUnknown() && !r.InputPrometheus.ScrapePort.IsNull() {
			*scrapePort = r.InputPrometheus.ScrapePort.ValueFloat64()
		} else {
			scrapePort = nil
		}
		searchFilter := make([]shared.SearchFilter, 0, len(r.InputPrometheus.SearchFilter))
		for _, searchFilterItem := range r.InputPrometheus.SearchFilter {
			var name34 string
			name34 = searchFilterItem.Name.ValueString()

			values := make([]string, 0, len(searchFilterItem.Values))
			for _, valuesItem := range searchFilterItem.Values {
				values = append(values, valuesItem.ValueString())
			}
			searchFilter = append(searchFilter, shared.SearchFilter{
				Name:   name34,
				Values: values,
			})
		}
		awsAuthenticationMethod1 := new(shared.InputPrometheusInputAuthenticationMethod)
		if !r.InputPrometheus.AwsAuthenticationMethod.IsUnknown() && !r.InputPrometheus.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod1 = shared.InputPrometheusInputAuthenticationMethod(r.InputPrometheus.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod1 = nil
		}
		awsSecretKey1 := new(string)
		if !r.InputPrometheus.AwsSecretKey.IsUnknown() && !r.InputPrometheus.AwsSecretKey.IsNull() {
			*awsSecretKey1 = r.InputPrometheus.AwsSecretKey.ValueString()
		} else {
			awsSecretKey1 = nil
		}
		region1 := new(string)
		if !r.InputPrometheus.Region.IsUnknown() && !r.InputPrometheus.Region.IsNull() {
			*region1 = r.InputPrometheus.Region.ValueString()
		} else {
			region1 = nil
		}
		endpoint2 := new(string)
		if !r.InputPrometheus.Endpoint.IsUnknown() && !r.InputPrometheus.Endpoint.IsNull() {
			*endpoint2 = r.InputPrometheus.Endpoint.ValueString()
		} else {
			endpoint2 = nil
		}
		signatureVersion1 := new(shared.InputPrometheusSignatureVersion)
		if !r.InputPrometheus.SignatureVersion.IsUnknown() && !r.InputPrometheus.SignatureVersion.IsNull() {
			*signatureVersion1 = shared.InputPrometheusSignatureVersion(r.InputPrometheus.SignatureVersion.ValueString())
		} else {
			signatureVersion1 = nil
		}
		reuseConnections1 := new(bool)
		if !r.InputPrometheus.ReuseConnections.IsUnknown() && !r.InputPrometheus.ReuseConnections.IsNull() {
			*reuseConnections1 = r.InputPrometheus.ReuseConnections.ValueBool()
		} else {
			reuseConnections1 = nil
		}
		enableAssumeRole1 := new(bool)
		if !r.InputPrometheus.EnableAssumeRole.IsUnknown() && !r.InputPrometheus.EnableAssumeRole.IsNull() {
			*enableAssumeRole1 = r.InputPrometheus.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole1 = nil
		}
		assumeRoleArn1 := new(string)
		if !r.InputPrometheus.AssumeRoleArn.IsUnknown() && !r.InputPrometheus.AssumeRoleArn.IsNull() {
			*assumeRoleArn1 = r.InputPrometheus.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn1 = nil
		}
		assumeRoleExternalId1 := new(string)
		if !r.InputPrometheus.AssumeRoleExternalID.IsUnknown() && !r.InputPrometheus.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId1 = r.InputPrometheus.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId1 = nil
		}
		durationSeconds1 := new(float64)
		if !r.InputPrometheus.DurationSeconds.IsUnknown() && !r.InputPrometheus.DurationSeconds.IsNull() {
			*durationSeconds1 = r.InputPrometheus.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds1 = nil
		}
		username8 := new(string)
		if !r.InputPrometheus.Username.IsUnknown() && !r.InputPrometheus.Username.IsNull() {
			*username8 = r.InputPrometheus.Username.ValueString()
		} else {
			username8 = nil
		}
		password8 := new(string)
		if !r.InputPrometheus.Password.IsUnknown() && !r.InputPrometheus.Password.IsNull() {
			*password8 = r.InputPrometheus.Password.ValueString()
		} else {
			password8 = nil
		}
		credentialsSecret11 := new(string)
		if !r.InputPrometheus.CredentialsSecret.IsUnknown() && !r.InputPrometheus.CredentialsSecret.IsNull() {
			*credentialsSecret11 = r.InputPrometheus.CredentialsSecret.ValueString()
		} else {
			credentialsSecret11 = nil
		}
		var status14 *shared.TFStatus
		if r.InputPrometheus.Status != nil {
			health14 := shared.Health(r.InputPrometheus.Status.Health.ValueString())
			metrics14 := make(map[string]interface{})
			for metricsKey14, metricsValue14 := range r.InputPrometheus.Status.Metrics {
				var metricsInst14 interface{}
				_ = json.Unmarshal([]byte(metricsValue14.ValueString()), &metricsInst14)
				metrics14[metricsKey14] = metricsInst14
			}
			var timestamp14 float64
			timestamp14 = r.InputPrometheus.Status.Timestamp.ValueFloat64()

			useStatusFromLb14 := new(bool)
			if !r.InputPrometheus.Status.UseStatusFromLB.IsUnknown() && !r.InputPrometheus.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb14 = r.InputPrometheus.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb14 = nil
			}
			status14 = &shared.TFStatus{
				Health:          health14,
				Metrics:         metrics14,
				Timestamp:       timestamp14,
				UseStatusFromLB: useStatusFromLb14,
			}
		}
		inputPrometheus = &shared.InputPrometheus{
			ID:                      id14,
			Type:                    typeVar15,
			Disabled:                disabled37,
			Pipeline:                pipeline28,
			SendToRoutes:            sendToRoutes14,
			Environment:             environment14,
			PqEnabled:               pqEnabled14,
			Streamtags:              streamtags14,
			Connections:             connections14,
			Pq:                      pq14,
			DimensionList:           dimensionList,
			DiscoveryType:           discoveryType,
			Interval:                interval1,
			LogLevel:                logLevel1,
			RejectUnauthorized:      rejectUnauthorized17,
			KeepAliveTime:           keepAliveTime1,
			JobTimeout:              jobTimeout1,
			MaxMissedKeepAlives:     maxMissedKeepAlives1,
			TTL:                     ttl1,
			Metadata:                metadata16,
			AuthType:                authType11,
			Description:             description16,
			TargetList:              targetList,
			NameList:                nameList,
			RecordType:              recordType,
			ScrapeProtocol:          scrapeProtocol,
			ScrapePath:              scrapePath,
			UsePublicIP:             usePublicIP,
			ScrapePort:              scrapePort,
			SearchFilter:            searchFilter,
			AwsAuthenticationMethod: awsAuthenticationMethod1,
			AwsSecretKey:            awsSecretKey1,
			Region:                  region1,
			Endpoint:                endpoint2,
			SignatureVersion:        signatureVersion1,
			ReuseConnections:        reuseConnections1,
			EnableAssumeRole:        enableAssumeRole1,
			AssumeRoleArn:           assumeRoleArn1,
			AssumeRoleExternalID:    assumeRoleExternalId1,
			DurationSeconds:         durationSeconds1,
			Username:                username8,
			Password:                password8,
			CredentialsSecret:       credentialsSecret11,
			Status:                  status14,
		}
	}
	if inputPrometheus != nil {
		out = shared.Input{
			InputPrometheus: inputPrometheus,
		}
	}
	var inputEdgePrometheus *shared.InputEdgePrometheus
	if r.InputEdgePrometheus != nil {
		id15 := new(string)
		if !r.InputEdgePrometheus.ID.IsUnknown() && !r.InputEdgePrometheus.ID.IsNull() {
			*id15 = r.InputEdgePrometheus.ID.ValueString()
		} else {
			id15 = nil
		}
		typeVar16 := new(shared.InputEdgePrometheusType)
		if !r.InputEdgePrometheus.Type.IsUnknown() && !r.InputEdgePrometheus.Type.IsNull() {
			*typeVar16 = shared.InputEdgePrometheusType(r.InputEdgePrometheus.Type.ValueString())
		} else {
			typeVar16 = nil
		}
		disabled38 := new(bool)
		if !r.InputEdgePrometheus.Disabled.IsUnknown() && !r.InputEdgePrometheus.Disabled.IsNull() {
			*disabled38 = r.InputEdgePrometheus.Disabled.ValueBool()
		} else {
			disabled38 = nil
		}
		pipeline30 := new(string)
		if !r.InputEdgePrometheus.Pipeline.IsUnknown() && !r.InputEdgePrometheus.Pipeline.IsNull() {
			*pipeline30 = r.InputEdgePrometheus.Pipeline.ValueString()
		} else {
			pipeline30 = nil
		}
		sendToRoutes15 := new(bool)
		if !r.InputEdgePrometheus.SendToRoutes.IsUnknown() && !r.InputEdgePrometheus.SendToRoutes.IsNull() {
			*sendToRoutes15 = r.InputEdgePrometheus.SendToRoutes.ValueBool()
		} else {
			sendToRoutes15 = nil
		}
		environment15 := new(string)
		if !r.InputEdgePrometheus.Environment.IsUnknown() && !r.InputEdgePrometheus.Environment.IsNull() {
			*environment15 = r.InputEdgePrometheus.Environment.ValueString()
		} else {
			environment15 = nil
		}
		pqEnabled15 := new(bool)
		if !r.InputEdgePrometheus.PqEnabled.IsUnknown() && !r.InputEdgePrometheus.PqEnabled.IsNull() {
			*pqEnabled15 = r.InputEdgePrometheus.PqEnabled.ValueBool()
		} else {
			pqEnabled15 = nil
		}
		streamtags15 := make([]string, 0, len(r.InputEdgePrometheus.Streamtags))
		for _, streamtagsItem15 := range r.InputEdgePrometheus.Streamtags {
			streamtags15 = append(streamtags15, streamtagsItem15.ValueString())
		}
		connections15 := make([]shared.InputEdgePrometheusConnections, 0, len(r.InputEdgePrometheus.Connections))
		for _, connectionsItem15 := range r.InputEdgePrometheus.Connections {
			pipeline31 := new(string)
			if !connectionsItem15.Pipeline.IsUnknown() && !connectionsItem15.Pipeline.IsNull() {
				*pipeline31 = connectionsItem15.Pipeline.ValueString()
			} else {
				pipeline31 = nil
			}
			var output16 string
			output16 = connectionsItem15.Output.ValueString()

			connections15 = append(connections15, shared.InputEdgePrometheusConnections{
				Pipeline: pipeline31,
				Output:   output16,
			})
		}
		var pq15 *shared.InputEdgePrometheusPq
		if r.InputEdgePrometheus.Pq != nil {
			mode15 := new(shared.InputEdgePrometheusMode)
			if !r.InputEdgePrometheus.Pq.Mode.IsUnknown() && !r.InputEdgePrometheus.Pq.Mode.IsNull() {
				*mode15 = shared.InputEdgePrometheusMode(r.InputEdgePrometheus.Pq.Mode.ValueString())
			} else {
				mode15 = nil
			}
			maxBufferSize15 := new(float64)
			if !r.InputEdgePrometheus.Pq.MaxBufferSize.IsUnknown() && !r.InputEdgePrometheus.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize15 = r.InputEdgePrometheus.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize15 = nil
			}
			commitFrequency15 := new(float64)
			if !r.InputEdgePrometheus.Pq.CommitFrequency.IsUnknown() && !r.InputEdgePrometheus.Pq.CommitFrequency.IsNull() {
				*commitFrequency15 = r.InputEdgePrometheus.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency15 = nil
			}
			maxFileSize15 := new(string)
			if !r.InputEdgePrometheus.Pq.MaxFileSize.IsUnknown() && !r.InputEdgePrometheus.Pq.MaxFileSize.IsNull() {
				*maxFileSize15 = r.InputEdgePrometheus.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize15 = nil
			}
			maxSize15 := new(string)
			if !r.InputEdgePrometheus.Pq.MaxSize.IsUnknown() && !r.InputEdgePrometheus.Pq.MaxSize.IsNull() {
				*maxSize15 = r.InputEdgePrometheus.Pq.MaxSize.ValueString()
			} else {
				maxSize15 = nil
			}
			path15 := new(string)
			if !r.InputEdgePrometheus.Pq.Path.IsUnknown() && !r.InputEdgePrometheus.Pq.Path.IsNull() {
				*path15 = r.InputEdgePrometheus.Pq.Path.ValueString()
			} else {
				path15 = nil
			}
			compress16 := new(shared.InputEdgePrometheusCompression)
			if !r.InputEdgePrometheus.Pq.Compress.IsUnknown() && !r.InputEdgePrometheus.Pq.Compress.IsNull() {
				*compress16 = shared.InputEdgePrometheusCompression(r.InputEdgePrometheus.Pq.Compress.ValueString())
			} else {
				compress16 = nil
			}
			pq15 = &shared.InputEdgePrometheusPq{
				Mode:            mode15,
				MaxBufferSize:   maxBufferSize15,
				CommitFrequency: commitFrequency15,
				MaxFileSize:     maxFileSize15,
				MaxSize:         maxSize15,
				Path:            path15,
				Compress:        compress16,
			}
		}
		dimensionList1 := make([]string, 0, len(r.InputEdgePrometheus.DimensionList))
		for _, dimensionListItem1 := range r.InputEdgePrometheus.DimensionList {
			dimensionList1 = append(dimensionList1, dimensionListItem1.ValueString())
		}
		discoveryType1 := new(shared.InputEdgePrometheusDiscoveryType)
		if !r.InputEdgePrometheus.DiscoveryType.IsUnknown() && !r.InputEdgePrometheus.DiscoveryType.IsNull() {
			*discoveryType1 = shared.InputEdgePrometheusDiscoveryType(r.InputEdgePrometheus.DiscoveryType.ValueString())
		} else {
			discoveryType1 = nil
		}
		interval2 := new(float64)
		if !r.InputEdgePrometheus.Interval.IsUnknown() && !r.InputEdgePrometheus.Interval.IsNull() {
			*interval2 = r.InputEdgePrometheus.Interval.ValueFloat64()
		} else {
			interval2 = nil
		}
		timeout := new(float64)
		if !r.InputEdgePrometheus.Timeout.IsUnknown() && !r.InputEdgePrometheus.Timeout.IsNull() {
			*timeout = r.InputEdgePrometheus.Timeout.ValueFloat64()
		} else {
			timeout = nil
		}
		var persistence *shared.DiskSpooling
		if r.InputEdgePrometheus.Persistence != nil {
			enable := new(bool)
			if !r.InputEdgePrometheus.Persistence.Enable.IsUnknown() && !r.InputEdgePrometheus.Persistence.Enable.IsNull() {
				*enable = r.InputEdgePrometheus.Persistence.Enable.ValueBool()
			} else {
				enable = nil
			}
			timeWindow := new(string)
			if !r.InputEdgePrometheus.Persistence.TimeWindow.IsUnknown() && !r.InputEdgePrometheus.Persistence.TimeWindow.IsNull() {
				*timeWindow = r.InputEdgePrometheus.Persistence.TimeWindow.ValueString()
			} else {
				timeWindow = nil
			}
			maxDataSize := new(string)
			if !r.InputEdgePrometheus.Persistence.MaxDataSize.IsUnknown() && !r.InputEdgePrometheus.Persistence.MaxDataSize.IsNull() {
				*maxDataSize = r.InputEdgePrometheus.Persistence.MaxDataSize.ValueString()
			} else {
				maxDataSize = nil
			}
			maxDataTime := new(string)
			if !r.InputEdgePrometheus.Persistence.MaxDataTime.IsUnknown() && !r.InputEdgePrometheus.Persistence.MaxDataTime.IsNull() {
				*maxDataTime = r.InputEdgePrometheus.Persistence.MaxDataTime.ValueString()
			} else {
				maxDataTime = nil
			}
			compress17 := new(shared.InputEdgePrometheusInputCompression)
			if !r.InputEdgePrometheus.Persistence.Compress.IsUnknown() && !r.InputEdgePrometheus.Persistence.Compress.IsNull() {
				*compress17 = shared.InputEdgePrometheusInputCompression(r.InputEdgePrometheus.Persistence.Compress.ValueString())
			} else {
				compress17 = nil
			}
			persistence = &shared.DiskSpooling{
				Enable:      enable,
				TimeWindow:  timeWindow,
				MaxDataSize: maxDataSize,
				MaxDataTime: maxDataTime,
				Compress:    compress17,
			}
		}
		metadata17 := make([]shared.InputEdgePrometheusMetadata, 0, len(r.InputEdgePrometheus.Metadata))
		for _, metadataItem17 := range r.InputEdgePrometheus.Metadata {
			var name35 string
			name35 = metadataItem17.Name.ValueString()

			var value34 string
			value34 = metadataItem17.Value.ValueString()

			metadata17 = append(metadata17, shared.InputEdgePrometheusMetadata{
				Name:  name35,
				Value: value34,
			})
		}
		authType12 := new(shared.InputEdgePrometheusAuthenticationMethod)
		if !r.InputEdgePrometheus.AuthType.IsUnknown() && !r.InputEdgePrometheus.AuthType.IsNull() {
			*authType12 = shared.InputEdgePrometheusAuthenticationMethod(r.InputEdgePrometheus.AuthType.ValueString())
		} else {
			authType12 = nil
		}
		description17 := new(string)
		if !r.InputEdgePrometheus.Description.IsUnknown() && !r.InputEdgePrometheus.Description.IsNull() {
			*description17 = r.InputEdgePrometheus.Description.ValueString()
		} else {
			description17 = nil
		}
		targets := make([]shared.Targets, 0, len(r.InputEdgePrometheus.Targets))
		for _, targetsItem := range r.InputEdgePrometheus.Targets {
			protocol := new(shared.InputEdgePrometheusInputProtocol)
			if !targetsItem.Protocol.IsUnknown() && !targetsItem.Protocol.IsNull() {
				*protocol = shared.InputEdgePrometheusInputProtocol(targetsItem.Protocol.ValueString())
			} else {
				protocol = nil
			}
			var host8 string
			host8 = targetsItem.Host.ValueString()

			port8 := new(float64)
			if !targetsItem.Port.IsUnknown() && !targetsItem.Port.IsNull() {
				*port8 = targetsItem.Port.ValueFloat64()
			} else {
				port8 = nil
			}
			path16 := new(string)
			if !targetsItem.Path.IsUnknown() && !targetsItem.Path.IsNull() {
				*path16 = targetsItem.Path.ValueString()
			} else {
				path16 = nil
			}
			targets = append(targets, shared.Targets{
				Protocol: protocol,
				Host:     host8,
				Port:     port8,
				Path:     path16,
			})
		}
		nameList1 := make([]string, 0, len(r.InputEdgePrometheus.NameList))
		for _, nameListItem1 := range r.InputEdgePrometheus.NameList {
			nameList1 = append(nameList1, nameListItem1.ValueString())
		}
		recordType1 := new(shared.InputEdgePrometheusRecordType)
		if !r.InputEdgePrometheus.RecordType.IsUnknown() && !r.InputEdgePrometheus.RecordType.IsNull() {
			*recordType1 = shared.InputEdgePrometheusRecordType(r.InputEdgePrometheus.RecordType.ValueString())
		} else {
			recordType1 = nil
		}
		scrapeProtocol1 := new(shared.InputEdgePrometheusProtocol)
		if !r.InputEdgePrometheus.ScrapeProtocol.IsUnknown() && !r.InputEdgePrometheus.ScrapeProtocol.IsNull() {
			*scrapeProtocol1 = shared.InputEdgePrometheusProtocol(r.InputEdgePrometheus.ScrapeProtocol.ValueString())
		} else {
			scrapeProtocol1 = nil
		}
		scrapePath1 := new(string)
		if !r.InputEdgePrometheus.ScrapePath.IsUnknown() && !r.InputEdgePrometheus.ScrapePath.IsNull() {
			*scrapePath1 = r.InputEdgePrometheus.ScrapePath.ValueString()
		} else {
			scrapePath1 = nil
		}
		usePublicIp1 := new(bool)
		if !r.InputEdgePrometheus.UsePublicIP.IsUnknown() && !r.InputEdgePrometheus.UsePublicIP.IsNull() {
			*usePublicIp1 = r.InputEdgePrometheus.UsePublicIP.ValueBool()
		} else {
			usePublicIp1 = nil
		}
		scrapePort1 := new(float64)
		if !r.InputEdgePrometheus.ScrapePort.IsUnknown() && !r.InputEdgePrometheus.ScrapePort.IsNull() {
			*scrapePort1 = r.InputEdgePrometheus.ScrapePort.ValueFloat64()
		} else {
			scrapePort1 = nil
		}
		searchFilter1 := make([]shared.InputEdgePrometheusSearchFilter, 0, len(r.InputEdgePrometheus.SearchFilter))
		for _, searchFilterItem1 := range r.InputEdgePrometheus.SearchFilter {
			var name36 string
			name36 = searchFilterItem1.Name.ValueString()

			values1 := make([]string, 0, len(searchFilterItem1.Values))
			for _, valuesItem1 := range searchFilterItem1.Values {
				values1 = append(values1, valuesItem1.ValueString())
			}
			searchFilter1 = append(searchFilter1, shared.InputEdgePrometheusSearchFilter{
				Name:   name36,
				Values: values1,
			})
		}
		awsAuthenticationMethod2 := new(shared.InputEdgePrometheusInputAuthenticationMethod)
		if !r.InputEdgePrometheus.AwsAuthenticationMethod.IsUnknown() && !r.InputEdgePrometheus.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod2 = shared.InputEdgePrometheusInputAuthenticationMethod(r.InputEdgePrometheus.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod2 = nil
		}
		awsSecretKey2 := new(string)
		if !r.InputEdgePrometheus.AwsSecretKey.IsUnknown() && !r.InputEdgePrometheus.AwsSecretKey.IsNull() {
			*awsSecretKey2 = r.InputEdgePrometheus.AwsSecretKey.ValueString()
		} else {
			awsSecretKey2 = nil
		}
		region2 := new(string)
		if !r.InputEdgePrometheus.Region.IsUnknown() && !r.InputEdgePrometheus.Region.IsNull() {
			*region2 = r.InputEdgePrometheus.Region.ValueString()
		} else {
			region2 = nil
		}
		endpoint3 := new(string)
		if !r.InputEdgePrometheus.Endpoint.IsUnknown() && !r.InputEdgePrometheus.Endpoint.IsNull() {
			*endpoint3 = r.InputEdgePrometheus.Endpoint.ValueString()
		} else {
			endpoint3 = nil
		}
		signatureVersion2 := new(shared.InputEdgePrometheusSignatureVersion)
		if !r.InputEdgePrometheus.SignatureVersion.IsUnknown() && !r.InputEdgePrometheus.SignatureVersion.IsNull() {
			*signatureVersion2 = shared.InputEdgePrometheusSignatureVersion(r.InputEdgePrometheus.SignatureVersion.ValueString())
		} else {
			signatureVersion2 = nil
		}
		reuseConnections2 := new(bool)
		if !r.InputEdgePrometheus.ReuseConnections.IsUnknown() && !r.InputEdgePrometheus.ReuseConnections.IsNull() {
			*reuseConnections2 = r.InputEdgePrometheus.ReuseConnections.ValueBool()
		} else {
			reuseConnections2 = nil
		}
		rejectUnauthorized18 := new(bool)
		if !r.InputEdgePrometheus.RejectUnauthorized.IsUnknown() && !r.InputEdgePrometheus.RejectUnauthorized.IsNull() {
			*rejectUnauthorized18 = r.InputEdgePrometheus.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized18 = nil
		}
		enableAssumeRole2 := new(bool)
		if !r.InputEdgePrometheus.EnableAssumeRole.IsUnknown() && !r.InputEdgePrometheus.EnableAssumeRole.IsNull() {
			*enableAssumeRole2 = r.InputEdgePrometheus.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole2 = nil
		}
		assumeRoleArn2 := new(string)
		if !r.InputEdgePrometheus.AssumeRoleArn.IsUnknown() && !r.InputEdgePrometheus.AssumeRoleArn.IsNull() {
			*assumeRoleArn2 = r.InputEdgePrometheus.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn2 = nil
		}
		assumeRoleExternalId2 := new(string)
		if !r.InputEdgePrometheus.AssumeRoleExternalID.IsUnknown() && !r.InputEdgePrometheus.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId2 = r.InputEdgePrometheus.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId2 = nil
		}
		durationSeconds2 := new(float64)
		if !r.InputEdgePrometheus.DurationSeconds.IsUnknown() && !r.InputEdgePrometheus.DurationSeconds.IsNull() {
			*durationSeconds2 = r.InputEdgePrometheus.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds2 = nil
		}
		scrapeProtocolExpr := new(string)
		if !r.InputEdgePrometheus.ScrapeProtocolExpr.IsUnknown() && !r.InputEdgePrometheus.ScrapeProtocolExpr.IsNull() {
			*scrapeProtocolExpr = r.InputEdgePrometheus.ScrapeProtocolExpr.ValueString()
		} else {
			scrapeProtocolExpr = nil
		}
		scrapePortExpr := new(string)
		if !r.InputEdgePrometheus.ScrapePortExpr.IsUnknown() && !r.InputEdgePrometheus.ScrapePortExpr.IsNull() {
			*scrapePortExpr = r.InputEdgePrometheus.ScrapePortExpr.ValueString()
		} else {
			scrapePortExpr = nil
		}
		scrapePathExpr := new(string)
		if !r.InputEdgePrometheus.ScrapePathExpr.IsUnknown() && !r.InputEdgePrometheus.ScrapePathExpr.IsNull() {
			*scrapePathExpr = r.InputEdgePrometheus.ScrapePathExpr.ValueString()
		} else {
			scrapePathExpr = nil
		}
		podFilter := make([]shared.PodFilter, 0, len(r.InputEdgePrometheus.PodFilter))
		for _, podFilterItem := range r.InputEdgePrometheus.PodFilter {
			var filter string
			filter = podFilterItem.Filter.ValueString()

			description18 := new(string)
			if !podFilterItem.Description.IsUnknown() && !podFilterItem.Description.IsNull() {
				*description18 = podFilterItem.Description.ValueString()
			} else {
				description18 = nil
			}
			podFilter = append(podFilter, shared.PodFilter{
				Filter:      filter,
				Description: description18,
			})
		}
		username9 := new(string)
		if !r.InputEdgePrometheus.Username.IsUnknown() && !r.InputEdgePrometheus.Username.IsNull() {
			*username9 = r.InputEdgePrometheus.Username.ValueString()
		} else {
			username9 = nil
		}
		password9 := new(string)
		if !r.InputEdgePrometheus.Password.IsUnknown() && !r.InputEdgePrometheus.Password.IsNull() {
			*password9 = r.InputEdgePrometheus.Password.ValueString()
		} else {
			password9 = nil
		}
		credentialsSecret12 := new(string)
		if !r.InputEdgePrometheus.CredentialsSecret.IsUnknown() && !r.InputEdgePrometheus.CredentialsSecret.IsNull() {
			*credentialsSecret12 = r.InputEdgePrometheus.CredentialsSecret.ValueString()
		} else {
			credentialsSecret12 = nil
		}
		var status15 *shared.TFStatus
		if r.InputEdgePrometheus.Status != nil {
			health15 := shared.Health(r.InputEdgePrometheus.Status.Health.ValueString())
			metrics15 := make(map[string]interface{})
			for metricsKey15, metricsValue15 := range r.InputEdgePrometheus.Status.Metrics {
				var metricsInst15 interface{}
				_ = json.Unmarshal([]byte(metricsValue15.ValueString()), &metricsInst15)
				metrics15[metricsKey15] = metricsInst15
			}
			var timestamp15 float64
			timestamp15 = r.InputEdgePrometheus.Status.Timestamp.ValueFloat64()

			useStatusFromLb15 := new(bool)
			if !r.InputEdgePrometheus.Status.UseStatusFromLB.IsUnknown() && !r.InputEdgePrometheus.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb15 = r.InputEdgePrometheus.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb15 = nil
			}
			status15 = &shared.TFStatus{
				Health:          health15,
				Metrics:         metrics15,
				Timestamp:       timestamp15,
				UseStatusFromLB: useStatusFromLb15,
			}
		}
		inputEdgePrometheus = &shared.InputEdgePrometheus{
			ID:                      id15,
			Type:                    typeVar16,
			Disabled:                disabled38,
			Pipeline:                pipeline30,
			SendToRoutes:            sendToRoutes15,
			Environment:             environment15,
			PqEnabled:               pqEnabled15,
			Streamtags:              streamtags15,
			Connections:             connections15,
			Pq:                      pq15,
			DimensionList:           dimensionList1,
			DiscoveryType:           discoveryType1,
			Interval:                interval2,
			Timeout:                 timeout,
			Persistence:             persistence,
			Metadata:                metadata17,
			AuthType:                authType12,
			Description:             description17,
			Targets:                 targets,
			NameList:                nameList1,
			RecordType:              recordType1,
			ScrapeProtocol:          scrapeProtocol1,
			ScrapePath:              scrapePath1,
			UsePublicIP:             usePublicIp1,
			ScrapePort:              scrapePort1,
			SearchFilter:            searchFilter1,
			AwsAuthenticationMethod: awsAuthenticationMethod2,
			AwsSecretKey:            awsSecretKey2,
			Region:                  region2,
			Endpoint:                endpoint3,
			SignatureVersion:        signatureVersion2,
			ReuseConnections:        reuseConnections2,
			RejectUnauthorized:      rejectUnauthorized18,
			EnableAssumeRole:        enableAssumeRole2,
			AssumeRoleArn:           assumeRoleArn2,
			AssumeRoleExternalID:    assumeRoleExternalId2,
			DurationSeconds:         durationSeconds2,
			ScrapeProtocolExpr:      scrapeProtocolExpr,
			ScrapePortExpr:          scrapePortExpr,
			ScrapePathExpr:          scrapePathExpr,
			PodFilter:               podFilter,
			Username:                username9,
			Password:                password9,
			CredentialsSecret:       credentialsSecret12,
			Status:                  status15,
		}
	}
	if inputEdgePrometheus != nil {
		out = shared.Input{
			InputEdgePrometheus: inputEdgePrometheus,
		}
	}
	var inputOffice365Mgmt *shared.InputOffice365Mgmt
	if r.InputOffice365Mgmt != nil {
		id16 := new(string)
		if !r.InputOffice365Mgmt.ID.IsUnknown() && !r.InputOffice365Mgmt.ID.IsNull() {
			*id16 = r.InputOffice365Mgmt.ID.ValueString()
		} else {
			id16 = nil
		}
		typeVar17 := new(shared.InputOffice365MgmtType)
		if !r.InputOffice365Mgmt.Type.IsUnknown() && !r.InputOffice365Mgmt.Type.IsNull() {
			*typeVar17 = shared.InputOffice365MgmtType(r.InputOffice365Mgmt.Type.ValueString())
		} else {
			typeVar17 = nil
		}
		disabled39 := new(bool)
		if !r.InputOffice365Mgmt.Disabled.IsUnknown() && !r.InputOffice365Mgmt.Disabled.IsNull() {
			*disabled39 = r.InputOffice365Mgmt.Disabled.ValueBool()
		} else {
			disabled39 = nil
		}
		pipeline32 := new(string)
		if !r.InputOffice365Mgmt.Pipeline.IsUnknown() && !r.InputOffice365Mgmt.Pipeline.IsNull() {
			*pipeline32 = r.InputOffice365Mgmt.Pipeline.ValueString()
		} else {
			pipeline32 = nil
		}
		sendToRoutes16 := new(bool)
		if !r.InputOffice365Mgmt.SendToRoutes.IsUnknown() && !r.InputOffice365Mgmt.SendToRoutes.IsNull() {
			*sendToRoutes16 = r.InputOffice365Mgmt.SendToRoutes.ValueBool()
		} else {
			sendToRoutes16 = nil
		}
		environment16 := new(string)
		if !r.InputOffice365Mgmt.Environment.IsUnknown() && !r.InputOffice365Mgmt.Environment.IsNull() {
			*environment16 = r.InputOffice365Mgmt.Environment.ValueString()
		} else {
			environment16 = nil
		}
		pqEnabled16 := new(bool)
		if !r.InputOffice365Mgmt.PqEnabled.IsUnknown() && !r.InputOffice365Mgmt.PqEnabled.IsNull() {
			*pqEnabled16 = r.InputOffice365Mgmt.PqEnabled.ValueBool()
		} else {
			pqEnabled16 = nil
		}
		streamtags16 := make([]string, 0, len(r.InputOffice365Mgmt.Streamtags))
		for _, streamtagsItem16 := range r.InputOffice365Mgmt.Streamtags {
			streamtags16 = append(streamtags16, streamtagsItem16.ValueString())
		}
		connections16 := make([]shared.InputOffice365MgmtConnections, 0, len(r.InputOffice365Mgmt.Connections))
		for _, connectionsItem16 := range r.InputOffice365Mgmt.Connections {
			pipeline33 := new(string)
			if !connectionsItem16.Pipeline.IsUnknown() && !connectionsItem16.Pipeline.IsNull() {
				*pipeline33 = connectionsItem16.Pipeline.ValueString()
			} else {
				pipeline33 = nil
			}
			var output17 string
			output17 = connectionsItem16.Output.ValueString()

			connections16 = append(connections16, shared.InputOffice365MgmtConnections{
				Pipeline: pipeline33,
				Output:   output17,
			})
		}
		var pq16 *shared.InputOffice365MgmtPq
		if r.InputOffice365Mgmt.Pq != nil {
			mode16 := new(shared.InputOffice365MgmtMode)
			if !r.InputOffice365Mgmt.Pq.Mode.IsUnknown() && !r.InputOffice365Mgmt.Pq.Mode.IsNull() {
				*mode16 = shared.InputOffice365MgmtMode(r.InputOffice365Mgmt.Pq.Mode.ValueString())
			} else {
				mode16 = nil
			}
			maxBufferSize16 := new(float64)
			if !r.InputOffice365Mgmt.Pq.MaxBufferSize.IsUnknown() && !r.InputOffice365Mgmt.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize16 = r.InputOffice365Mgmt.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize16 = nil
			}
			commitFrequency16 := new(float64)
			if !r.InputOffice365Mgmt.Pq.CommitFrequency.IsUnknown() && !r.InputOffice365Mgmt.Pq.CommitFrequency.IsNull() {
				*commitFrequency16 = r.InputOffice365Mgmt.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency16 = nil
			}
			maxFileSize16 := new(string)
			if !r.InputOffice365Mgmt.Pq.MaxFileSize.IsUnknown() && !r.InputOffice365Mgmt.Pq.MaxFileSize.IsNull() {
				*maxFileSize16 = r.InputOffice365Mgmt.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize16 = nil
			}
			maxSize16 := new(string)
			if !r.InputOffice365Mgmt.Pq.MaxSize.IsUnknown() && !r.InputOffice365Mgmt.Pq.MaxSize.IsNull() {
				*maxSize16 = r.InputOffice365Mgmt.Pq.MaxSize.ValueString()
			} else {
				maxSize16 = nil
			}
			path17 := new(string)
			if !r.InputOffice365Mgmt.Pq.Path.IsUnknown() && !r.InputOffice365Mgmt.Pq.Path.IsNull() {
				*path17 = r.InputOffice365Mgmt.Pq.Path.ValueString()
			} else {
				path17 = nil
			}
			compress18 := new(shared.InputOffice365MgmtCompression)
			if !r.InputOffice365Mgmt.Pq.Compress.IsUnknown() && !r.InputOffice365Mgmt.Pq.Compress.IsNull() {
				*compress18 = shared.InputOffice365MgmtCompression(r.InputOffice365Mgmt.Pq.Compress.ValueString())
			} else {
				compress18 = nil
			}
			pq16 = &shared.InputOffice365MgmtPq{
				Mode:            mode16,
				MaxBufferSize:   maxBufferSize16,
				CommitFrequency: commitFrequency16,
				MaxFileSize:     maxFileSize16,
				MaxSize:         maxSize16,
				Path:            path17,
				Compress:        compress18,
			}
		}
		planType := new(shared.SubscriptionPlan)
		if !r.InputOffice365Mgmt.PlanType.IsUnknown() && !r.InputOffice365Mgmt.PlanType.IsNull() {
			*planType = shared.SubscriptionPlan(r.InputOffice365Mgmt.PlanType.ValueString())
		} else {
			planType = nil
		}
		var tenantId1 string
		tenantId1 = r.InputOffice365Mgmt.TenantID.ValueString()

		var appID string
		appID = r.InputOffice365Mgmt.AppID.ValueString()

		timeout1 := new(float64)
		if !r.InputOffice365Mgmt.Timeout.IsUnknown() && !r.InputOffice365Mgmt.Timeout.IsNull() {
			*timeout1 = r.InputOffice365Mgmt.Timeout.ValueFloat64()
		} else {
			timeout1 = nil
		}
		keepAliveTime2 := new(float64)
		if !r.InputOffice365Mgmt.KeepAliveTime.IsUnknown() && !r.InputOffice365Mgmt.KeepAliveTime.IsNull() {
			*keepAliveTime2 = r.InputOffice365Mgmt.KeepAliveTime.ValueFloat64()
		} else {
			keepAliveTime2 = nil
		}
		jobTimeout2 := new(string)
		if !r.InputOffice365Mgmt.JobTimeout.IsUnknown() && !r.InputOffice365Mgmt.JobTimeout.IsNull() {
			*jobTimeout2 = r.InputOffice365Mgmt.JobTimeout.ValueString()
		} else {
			jobTimeout2 = nil
		}
		maxMissedKeepAlives2 := new(float64)
		if !r.InputOffice365Mgmt.MaxMissedKeepAlives.IsUnknown() && !r.InputOffice365Mgmt.MaxMissedKeepAlives.IsNull() {
			*maxMissedKeepAlives2 = r.InputOffice365Mgmt.MaxMissedKeepAlives.ValueFloat64()
		} else {
			maxMissedKeepAlives2 = nil
		}
		ttl2 := new(string)
		if !r.InputOffice365Mgmt.TTL.IsUnknown() && !r.InputOffice365Mgmt.TTL.IsNull() {
			*ttl2 = r.InputOffice365Mgmt.TTL.ValueString()
		} else {
			ttl2 = nil
		}
		metadata18 := make([]shared.InputOffice365MgmtMetadata, 0, len(r.InputOffice365Mgmt.Metadata))
		for _, metadataItem18 := range r.InputOffice365Mgmt.Metadata {
			var name37 string
			name37 = metadataItem18.Name.ValueString()

			var value35 string
			value35 = metadataItem18.Value.ValueString()

			metadata18 = append(metadata18, shared.InputOffice365MgmtMetadata{
				Name:  name37,
				Value: value35,
			})
		}
		publisherIdentifier := new(string)
		if !r.InputOffice365Mgmt.PublisherIdentifier.IsUnknown() && !r.InputOffice365Mgmt.PublisherIdentifier.IsNull() {
			*publisherIdentifier = r.InputOffice365Mgmt.PublisherIdentifier.ValueString()
		} else {
			publisherIdentifier = nil
		}
		contentConfig := make([]shared.ContentConfig, 0, len(r.InputOffice365Mgmt.ContentConfig))
		for _, contentConfigItem := range r.InputOffice365Mgmt.ContentConfig {
			contentType := new(string)
			if !contentConfigItem.ContentType.IsUnknown() && !contentConfigItem.ContentType.IsNull() {
				*contentType = contentConfigItem.ContentType.ValueString()
			} else {
				contentType = nil
			}
			description19 := new(string)
			if !contentConfigItem.Description.IsUnknown() && !contentConfigItem.Description.IsNull() {
				*description19 = contentConfigItem.Description.ValueString()
			} else {
				description19 = nil
			}
			interval3 := new(float64)
			if !contentConfigItem.Interval.IsUnknown() && !contentConfigItem.Interval.IsNull() {
				*interval3 = contentConfigItem.Interval.ValueFloat64()
			} else {
				interval3 = nil
			}
			logLevel2 := new(shared.InputOffice365MgmtLogLevel)
			if !contentConfigItem.LogLevel.IsUnknown() && !contentConfigItem.LogLevel.IsNull() {
				*logLevel2 = shared.InputOffice365MgmtLogLevel(contentConfigItem.LogLevel.ValueString())
			} else {
				logLevel2 = nil
			}
			enabled2 := new(bool)
			if !contentConfigItem.Enabled.IsUnknown() && !contentConfigItem.Enabled.IsNull() {
				*enabled2 = contentConfigItem.Enabled.ValueBool()
			} else {
				enabled2 = nil
			}
			contentConfig = append(contentConfig, shared.ContentConfig{
				ContentType: contentType,
				Description: description19,
				Interval:    interval3,
				LogLevel:    logLevel2,
				Enabled:     enabled2,
			})
		}
		ingestionLag := new(float64)
		if !r.InputOffice365Mgmt.IngestionLag.IsUnknown() && !r.InputOffice365Mgmt.IngestionLag.IsNull() {
			*ingestionLag = r.InputOffice365Mgmt.IngestionLag.ValueFloat64()
		} else {
			ingestionLag = nil
		}
		var retryRules1 *shared.InputOffice365MgmtRetryRules
		if r.InputOffice365Mgmt.RetryRules != nil {
			typeVar18 := new(shared.InputOffice365MgmtRetryType)
			if !r.InputOffice365Mgmt.RetryRules.Type.IsUnknown() && !r.InputOffice365Mgmt.RetryRules.Type.IsNull() {
				*typeVar18 = shared.InputOffice365MgmtRetryType(r.InputOffice365Mgmt.RetryRules.Type.ValueString())
			} else {
				typeVar18 = nil
			}
			interval4 := new(float64)
			if !r.InputOffice365Mgmt.RetryRules.Interval.IsUnknown() && !r.InputOffice365Mgmt.RetryRules.Interval.IsNull() {
				*interval4 = r.InputOffice365Mgmt.RetryRules.Interval.ValueFloat64()
			} else {
				interval4 = nil
			}
			limit1 := new(float64)
			if !r.InputOffice365Mgmt.RetryRules.Limit.IsUnknown() && !r.InputOffice365Mgmt.RetryRules.Limit.IsNull() {
				*limit1 = r.InputOffice365Mgmt.RetryRules.Limit.ValueFloat64()
			} else {
				limit1 = nil
			}
			multiplier1 := new(float64)
			if !r.InputOffice365Mgmt.RetryRules.Multiplier.IsUnknown() && !r.InputOffice365Mgmt.RetryRules.Multiplier.IsNull() {
				*multiplier1 = r.InputOffice365Mgmt.RetryRules.Multiplier.ValueFloat64()
			} else {
				multiplier1 = nil
			}
			codes1 := make([]float64, 0, len(r.InputOffice365Mgmt.RetryRules.Codes))
			for _, codesItem1 := range r.InputOffice365Mgmt.RetryRules.Codes {
				codes1 = append(codes1, codesItem1.ValueFloat64())
			}
			enableHeader1 := new(bool)
			if !r.InputOffice365Mgmt.RetryRules.EnableHeader.IsUnknown() && !r.InputOffice365Mgmt.RetryRules.EnableHeader.IsNull() {
				*enableHeader1 = r.InputOffice365Mgmt.RetryRules.EnableHeader.ValueBool()
			} else {
				enableHeader1 = nil
			}
			retryConnectTimeout1 := new(bool)
			if !r.InputOffice365Mgmt.RetryRules.RetryConnectTimeout.IsUnknown() && !r.InputOffice365Mgmt.RetryRules.RetryConnectTimeout.IsNull() {
				*retryConnectTimeout1 = r.InputOffice365Mgmt.RetryRules.RetryConnectTimeout.ValueBool()
			} else {
				retryConnectTimeout1 = nil
			}
			retryConnectReset1 := new(bool)
			if !r.InputOffice365Mgmt.RetryRules.RetryConnectReset.IsUnknown() && !r.InputOffice365Mgmt.RetryRules.RetryConnectReset.IsNull() {
				*retryConnectReset1 = r.InputOffice365Mgmt.RetryRules.RetryConnectReset.ValueBool()
			} else {
				retryConnectReset1 = nil
			}
			retryRules1 = &shared.InputOffice365MgmtRetryRules{
				Type:                typeVar18,
				Interval:            interval4,
				Limit:               limit1,
				Multiplier:          multiplier1,
				Codes:               codes1,
				EnableHeader:        enableHeader1,
				RetryConnectTimeout: retryConnectTimeout1,
				RetryConnectReset:   retryConnectReset1,
			}
		}
		authType13 := new(shared.InputOffice365MgmtAuthenticationMethod)
		if !r.InputOffice365Mgmt.AuthType.IsUnknown() && !r.InputOffice365Mgmt.AuthType.IsNull() {
			*authType13 = shared.InputOffice365MgmtAuthenticationMethod(r.InputOffice365Mgmt.AuthType.ValueString())
		} else {
			authType13 = nil
		}
		description20 := new(string)
		if !r.InputOffice365Mgmt.Description.IsUnknown() && !r.InputOffice365Mgmt.Description.IsNull() {
			*description20 = r.InputOffice365Mgmt.Description.ValueString()
		} else {
			description20 = nil
		}
		clientSecret := new(string)
		if !r.InputOffice365Mgmt.ClientSecret.IsUnknown() && !r.InputOffice365Mgmt.ClientSecret.IsNull() {
			*clientSecret = r.InputOffice365Mgmt.ClientSecret.ValueString()
		} else {
			clientSecret = nil
		}
		textSecret8 := new(string)
		if !r.InputOffice365Mgmt.TextSecret.IsUnknown() && !r.InputOffice365Mgmt.TextSecret.IsNull() {
			*textSecret8 = r.InputOffice365Mgmt.TextSecret.ValueString()
		} else {
			textSecret8 = nil
		}
		var status16 *shared.TFStatus
		if r.InputOffice365Mgmt.Status != nil {
			health16 := shared.Health(r.InputOffice365Mgmt.Status.Health.ValueString())
			metrics16 := make(map[string]interface{})
			for metricsKey16, metricsValue16 := range r.InputOffice365Mgmt.Status.Metrics {
				var metricsInst16 interface{}
				_ = json.Unmarshal([]byte(metricsValue16.ValueString()), &metricsInst16)
				metrics16[metricsKey16] = metricsInst16
			}
			var timestamp16 float64
			timestamp16 = r.InputOffice365Mgmt.Status.Timestamp.ValueFloat64()

			useStatusFromLb16 := new(bool)
			if !r.InputOffice365Mgmt.Status.UseStatusFromLB.IsUnknown() && !r.InputOffice365Mgmt.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb16 = r.InputOffice365Mgmt.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb16 = nil
			}
			status16 = &shared.TFStatus{
				Health:          health16,
				Metrics:         metrics16,
				Timestamp:       timestamp16,
				UseStatusFromLB: useStatusFromLb16,
			}
		}
		inputOffice365Mgmt = &shared.InputOffice365Mgmt{
			ID:                  id16,
			Type:                typeVar17,
			Disabled:            disabled39,
			Pipeline:            pipeline32,
			SendToRoutes:        sendToRoutes16,
			Environment:         environment16,
			PqEnabled:           pqEnabled16,
			Streamtags:          streamtags16,
			Connections:         connections16,
			Pq:                  pq16,
			PlanType:            planType,
			TenantID:            tenantId1,
			AppID:               appID,
			Timeout:             timeout1,
			KeepAliveTime:       keepAliveTime2,
			JobTimeout:          jobTimeout2,
			MaxMissedKeepAlives: maxMissedKeepAlives2,
			TTL:                 ttl2,
			Metadata:            metadata18,
			PublisherIdentifier: publisherIdentifier,
			ContentConfig:       contentConfig,
			IngestionLag:        ingestionLag,
			RetryRules:          retryRules1,
			AuthType:            authType13,
			Description:         description20,
			ClientSecret:        clientSecret,
			TextSecret:          textSecret8,
			Status:              status16,
		}
	}
	if inputOffice365Mgmt != nil {
		out = shared.Input{
			InputOffice365Mgmt: inputOffice365Mgmt,
		}
	}
	var inputOffice365Service *shared.InputOffice365Service
	if r.InputOffice365Service != nil {
		id17 := new(string)
		if !r.InputOffice365Service.ID.IsUnknown() && !r.InputOffice365Service.ID.IsNull() {
			*id17 = r.InputOffice365Service.ID.ValueString()
		} else {
			id17 = nil
		}
		typeVar19 := new(shared.InputOffice365ServiceType)
		if !r.InputOffice365Service.Type.IsUnknown() && !r.InputOffice365Service.Type.IsNull() {
			*typeVar19 = shared.InputOffice365ServiceType(r.InputOffice365Service.Type.ValueString())
		} else {
			typeVar19 = nil
		}
		disabled40 := new(bool)
		if !r.InputOffice365Service.Disabled.IsUnknown() && !r.InputOffice365Service.Disabled.IsNull() {
			*disabled40 = r.InputOffice365Service.Disabled.ValueBool()
		} else {
			disabled40 = nil
		}
		pipeline34 := new(string)
		if !r.InputOffice365Service.Pipeline.IsUnknown() && !r.InputOffice365Service.Pipeline.IsNull() {
			*pipeline34 = r.InputOffice365Service.Pipeline.ValueString()
		} else {
			pipeline34 = nil
		}
		sendToRoutes17 := new(bool)
		if !r.InputOffice365Service.SendToRoutes.IsUnknown() && !r.InputOffice365Service.SendToRoutes.IsNull() {
			*sendToRoutes17 = r.InputOffice365Service.SendToRoutes.ValueBool()
		} else {
			sendToRoutes17 = nil
		}
		environment17 := new(string)
		if !r.InputOffice365Service.Environment.IsUnknown() && !r.InputOffice365Service.Environment.IsNull() {
			*environment17 = r.InputOffice365Service.Environment.ValueString()
		} else {
			environment17 = nil
		}
		pqEnabled17 := new(bool)
		if !r.InputOffice365Service.PqEnabled.IsUnknown() && !r.InputOffice365Service.PqEnabled.IsNull() {
			*pqEnabled17 = r.InputOffice365Service.PqEnabled.ValueBool()
		} else {
			pqEnabled17 = nil
		}
		streamtags17 := make([]string, 0, len(r.InputOffice365Service.Streamtags))
		for _, streamtagsItem17 := range r.InputOffice365Service.Streamtags {
			streamtags17 = append(streamtags17, streamtagsItem17.ValueString())
		}
		connections17 := make([]shared.InputOffice365ServiceConnections, 0, len(r.InputOffice365Service.Connections))
		for _, connectionsItem17 := range r.InputOffice365Service.Connections {
			pipeline35 := new(string)
			if !connectionsItem17.Pipeline.IsUnknown() && !connectionsItem17.Pipeline.IsNull() {
				*pipeline35 = connectionsItem17.Pipeline.ValueString()
			} else {
				pipeline35 = nil
			}
			var output18 string
			output18 = connectionsItem17.Output.ValueString()

			connections17 = append(connections17, shared.InputOffice365ServiceConnections{
				Pipeline: pipeline35,
				Output:   output18,
			})
		}
		var pq17 *shared.InputOffice365ServicePq
		if r.InputOffice365Service.Pq != nil {
			mode17 := new(shared.InputOffice365ServiceMode)
			if !r.InputOffice365Service.Pq.Mode.IsUnknown() && !r.InputOffice365Service.Pq.Mode.IsNull() {
				*mode17 = shared.InputOffice365ServiceMode(r.InputOffice365Service.Pq.Mode.ValueString())
			} else {
				mode17 = nil
			}
			maxBufferSize17 := new(float64)
			if !r.InputOffice365Service.Pq.MaxBufferSize.IsUnknown() && !r.InputOffice365Service.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize17 = r.InputOffice365Service.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize17 = nil
			}
			commitFrequency17 := new(float64)
			if !r.InputOffice365Service.Pq.CommitFrequency.IsUnknown() && !r.InputOffice365Service.Pq.CommitFrequency.IsNull() {
				*commitFrequency17 = r.InputOffice365Service.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency17 = nil
			}
			maxFileSize17 := new(string)
			if !r.InputOffice365Service.Pq.MaxFileSize.IsUnknown() && !r.InputOffice365Service.Pq.MaxFileSize.IsNull() {
				*maxFileSize17 = r.InputOffice365Service.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize17 = nil
			}
			maxSize17 := new(string)
			if !r.InputOffice365Service.Pq.MaxSize.IsUnknown() && !r.InputOffice365Service.Pq.MaxSize.IsNull() {
				*maxSize17 = r.InputOffice365Service.Pq.MaxSize.ValueString()
			} else {
				maxSize17 = nil
			}
			path18 := new(string)
			if !r.InputOffice365Service.Pq.Path.IsUnknown() && !r.InputOffice365Service.Pq.Path.IsNull() {
				*path18 = r.InputOffice365Service.Pq.Path.ValueString()
			} else {
				path18 = nil
			}
			compress19 := new(shared.InputOffice365ServiceCompression)
			if !r.InputOffice365Service.Pq.Compress.IsUnknown() && !r.InputOffice365Service.Pq.Compress.IsNull() {
				*compress19 = shared.InputOffice365ServiceCompression(r.InputOffice365Service.Pq.Compress.ValueString())
			} else {
				compress19 = nil
			}
			pq17 = &shared.InputOffice365ServicePq{
				Mode:            mode17,
				MaxBufferSize:   maxBufferSize17,
				CommitFrequency: commitFrequency17,
				MaxFileSize:     maxFileSize17,
				MaxSize:         maxSize17,
				Path:            path18,
				Compress:        compress19,
			}
		}
		planType1 := new(shared.InputOffice365ServiceSubscriptionPlan)
		if !r.InputOffice365Service.PlanType.IsUnknown() && !r.InputOffice365Service.PlanType.IsNull() {
			*planType1 = shared.InputOffice365ServiceSubscriptionPlan(r.InputOffice365Service.PlanType.ValueString())
		} else {
			planType1 = nil
		}
		var tenantId2 string
		tenantId2 = r.InputOffice365Service.TenantID.ValueString()

		var appId1 string
		appId1 = r.InputOffice365Service.AppID.ValueString()

		timeout2 := new(float64)
		if !r.InputOffice365Service.Timeout.IsUnknown() && !r.InputOffice365Service.Timeout.IsNull() {
			*timeout2 = r.InputOffice365Service.Timeout.ValueFloat64()
		} else {
			timeout2 = nil
		}
		keepAliveTime3 := new(float64)
		if !r.InputOffice365Service.KeepAliveTime.IsUnknown() && !r.InputOffice365Service.KeepAliveTime.IsNull() {
			*keepAliveTime3 = r.InputOffice365Service.KeepAliveTime.ValueFloat64()
		} else {
			keepAliveTime3 = nil
		}
		jobTimeout3 := new(string)
		if !r.InputOffice365Service.JobTimeout.IsUnknown() && !r.InputOffice365Service.JobTimeout.IsNull() {
			*jobTimeout3 = r.InputOffice365Service.JobTimeout.ValueString()
		} else {
			jobTimeout3 = nil
		}
		maxMissedKeepAlives3 := new(float64)
		if !r.InputOffice365Service.MaxMissedKeepAlives.IsUnknown() && !r.InputOffice365Service.MaxMissedKeepAlives.IsNull() {
			*maxMissedKeepAlives3 = r.InputOffice365Service.MaxMissedKeepAlives.ValueFloat64()
		} else {
			maxMissedKeepAlives3 = nil
		}
		ttl3 := new(string)
		if !r.InputOffice365Service.TTL.IsUnknown() && !r.InputOffice365Service.TTL.IsNull() {
			*ttl3 = r.InputOffice365Service.TTL.ValueString()
		} else {
			ttl3 = nil
		}
		metadata19 := make([]shared.InputOffice365ServiceMetadata, 0, len(r.InputOffice365Service.Metadata))
		for _, metadataItem19 := range r.InputOffice365Service.Metadata {
			var name38 string
			name38 = metadataItem19.Name.ValueString()

			var value36 string
			value36 = metadataItem19.Value.ValueString()

			metadata19 = append(metadata19, shared.InputOffice365ServiceMetadata{
				Name:  name38,
				Value: value36,
			})
		}
		contentConfig1 := make([]shared.InputOffice365ServiceContentConfig, 0, len(r.InputOffice365Service.ContentConfig))
		for _, contentConfigItem1 := range r.InputOffice365Service.ContentConfig {
			contentType1 := new(string)
			if !contentConfigItem1.ContentType.IsUnknown() && !contentConfigItem1.ContentType.IsNull() {
				*contentType1 = contentConfigItem1.ContentType.ValueString()
			} else {
				contentType1 = nil
			}
			description21 := new(string)
			if !contentConfigItem1.Description.IsUnknown() && !contentConfigItem1.Description.IsNull() {
				*description21 = contentConfigItem1.Description.ValueString()
			} else {
				description21 = nil
			}
			interval5 := new(float64)
			if !contentConfigItem1.Interval.IsUnknown() && !contentConfigItem1.Interval.IsNull() {
				*interval5 = contentConfigItem1.Interval.ValueFloat64()
			} else {
				interval5 = nil
			}
			logLevel3 := new(shared.InputOffice365ServiceLogLevel)
			if !contentConfigItem1.LogLevel.IsUnknown() && !contentConfigItem1.LogLevel.IsNull() {
				*logLevel3 = shared.InputOffice365ServiceLogLevel(contentConfigItem1.LogLevel.ValueString())
			} else {
				logLevel3 = nil
			}
			enabled3 := new(bool)
			if !contentConfigItem1.Enabled.IsUnknown() && !contentConfigItem1.Enabled.IsNull() {
				*enabled3 = contentConfigItem1.Enabled.ValueBool()
			} else {
				enabled3 = nil
			}
			contentConfig1 = append(contentConfig1, shared.InputOffice365ServiceContentConfig{
				ContentType: contentType1,
				Description: description21,
				Interval:    interval5,
				LogLevel:    logLevel3,
				Enabled:     enabled3,
			})
		}
		var retryRules2 *shared.InputOffice365ServiceRetryRules
		if r.InputOffice365Service.RetryRules != nil {
			typeVar20 := new(shared.InputOffice365ServiceRetryType)
			if !r.InputOffice365Service.RetryRules.Type.IsUnknown() && !r.InputOffice365Service.RetryRules.Type.IsNull() {
				*typeVar20 = shared.InputOffice365ServiceRetryType(r.InputOffice365Service.RetryRules.Type.ValueString())
			} else {
				typeVar20 = nil
			}
			interval6 := new(float64)
			if !r.InputOffice365Service.RetryRules.Interval.IsUnknown() && !r.InputOffice365Service.RetryRules.Interval.IsNull() {
				*interval6 = r.InputOffice365Service.RetryRules.Interval.ValueFloat64()
			} else {
				interval6 = nil
			}
			limit2 := new(float64)
			if !r.InputOffice365Service.RetryRules.Limit.IsUnknown() && !r.InputOffice365Service.RetryRules.Limit.IsNull() {
				*limit2 = r.InputOffice365Service.RetryRules.Limit.ValueFloat64()
			} else {
				limit2 = nil
			}
			multiplier2 := new(float64)
			if !r.InputOffice365Service.RetryRules.Multiplier.IsUnknown() && !r.InputOffice365Service.RetryRules.Multiplier.IsNull() {
				*multiplier2 = r.InputOffice365Service.RetryRules.Multiplier.ValueFloat64()
			} else {
				multiplier2 = nil
			}
			codes2 := make([]float64, 0, len(r.InputOffice365Service.RetryRules.Codes))
			for _, codesItem2 := range r.InputOffice365Service.RetryRules.Codes {
				codes2 = append(codes2, codesItem2.ValueFloat64())
			}
			enableHeader2 := new(bool)
			if !r.InputOffice365Service.RetryRules.EnableHeader.IsUnknown() && !r.InputOffice365Service.RetryRules.EnableHeader.IsNull() {
				*enableHeader2 = r.InputOffice365Service.RetryRules.EnableHeader.ValueBool()
			} else {
				enableHeader2 = nil
			}
			retryConnectTimeout2 := new(bool)
			if !r.InputOffice365Service.RetryRules.RetryConnectTimeout.IsUnknown() && !r.InputOffice365Service.RetryRules.RetryConnectTimeout.IsNull() {
				*retryConnectTimeout2 = r.InputOffice365Service.RetryRules.RetryConnectTimeout.ValueBool()
			} else {
				retryConnectTimeout2 = nil
			}
			retryConnectReset2 := new(bool)
			if !r.InputOffice365Service.RetryRules.RetryConnectReset.IsUnknown() && !r.InputOffice365Service.RetryRules.RetryConnectReset.IsNull() {
				*retryConnectReset2 = r.InputOffice365Service.RetryRules.RetryConnectReset.ValueBool()
			} else {
				retryConnectReset2 = nil
			}
			retryRules2 = &shared.InputOffice365ServiceRetryRules{
				Type:                typeVar20,
				Interval:            interval6,
				Limit:               limit2,
				Multiplier:          multiplier2,
				Codes:               codes2,
				EnableHeader:        enableHeader2,
				RetryConnectTimeout: retryConnectTimeout2,
				RetryConnectReset:   retryConnectReset2,
			}
		}
		authType14 := new(shared.InputOffice365ServiceAuthenticationMethod)
		if !r.InputOffice365Service.AuthType.IsUnknown() && !r.InputOffice365Service.AuthType.IsNull() {
			*authType14 = shared.InputOffice365ServiceAuthenticationMethod(r.InputOffice365Service.AuthType.ValueString())
		} else {
			authType14 = nil
		}
		description22 := new(string)
		if !r.InputOffice365Service.Description.IsUnknown() && !r.InputOffice365Service.Description.IsNull() {
			*description22 = r.InputOffice365Service.Description.ValueString()
		} else {
			description22 = nil
		}
		clientSecret1 := new(string)
		if !r.InputOffice365Service.ClientSecret.IsUnknown() && !r.InputOffice365Service.ClientSecret.IsNull() {
			*clientSecret1 = r.InputOffice365Service.ClientSecret.ValueString()
		} else {
			clientSecret1 = nil
		}
		textSecret9 := new(string)
		if !r.InputOffice365Service.TextSecret.IsUnknown() && !r.InputOffice365Service.TextSecret.IsNull() {
			*textSecret9 = r.InputOffice365Service.TextSecret.ValueString()
		} else {
			textSecret9 = nil
		}
		var status17 *shared.TFStatus
		if r.InputOffice365Service.Status != nil {
			health17 := shared.Health(r.InputOffice365Service.Status.Health.ValueString())
			metrics17 := make(map[string]interface{})
			for metricsKey17, metricsValue17 := range r.InputOffice365Service.Status.Metrics {
				var metricsInst17 interface{}
				_ = json.Unmarshal([]byte(metricsValue17.ValueString()), &metricsInst17)
				metrics17[metricsKey17] = metricsInst17
			}
			var timestamp17 float64
			timestamp17 = r.InputOffice365Service.Status.Timestamp.ValueFloat64()

			useStatusFromLb17 := new(bool)
			if !r.InputOffice365Service.Status.UseStatusFromLB.IsUnknown() && !r.InputOffice365Service.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb17 = r.InputOffice365Service.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb17 = nil
			}
			status17 = &shared.TFStatus{
				Health:          health17,
				Metrics:         metrics17,
				Timestamp:       timestamp17,
				UseStatusFromLB: useStatusFromLb17,
			}
		}
		inputOffice365Service = &shared.InputOffice365Service{
			ID:                  id17,
			Type:                typeVar19,
			Disabled:            disabled40,
			Pipeline:            pipeline34,
			SendToRoutes:        sendToRoutes17,
			Environment:         environment17,
			PqEnabled:           pqEnabled17,
			Streamtags:          streamtags17,
			Connections:         connections17,
			Pq:                  pq17,
			PlanType:            planType1,
			TenantID:            tenantId2,
			AppID:               appId1,
			Timeout:             timeout2,
			KeepAliveTime:       keepAliveTime3,
			JobTimeout:          jobTimeout3,
			MaxMissedKeepAlives: maxMissedKeepAlives3,
			TTL:                 ttl3,
			Metadata:            metadata19,
			ContentConfig:       contentConfig1,
			RetryRules:          retryRules2,
			AuthType:            authType14,
			Description:         description22,
			ClientSecret:        clientSecret1,
			TextSecret:          textSecret9,
			Status:              status17,
		}
	}
	if inputOffice365Service != nil {
		out = shared.Input{
			InputOffice365Service: inputOffice365Service,
		}
	}
	var inputOffice365MsgTrace *shared.InputOffice365MsgTrace
	if r.InputOffice365MsgTrace != nil {
		id18 := new(string)
		if !r.InputOffice365MsgTrace.ID.IsUnknown() && !r.InputOffice365MsgTrace.ID.IsNull() {
			*id18 = r.InputOffice365MsgTrace.ID.ValueString()
		} else {
			id18 = nil
		}
		typeVar21 := new(shared.InputOffice365MsgTraceType)
		if !r.InputOffice365MsgTrace.Type.IsUnknown() && !r.InputOffice365MsgTrace.Type.IsNull() {
			*typeVar21 = shared.InputOffice365MsgTraceType(r.InputOffice365MsgTrace.Type.ValueString())
		} else {
			typeVar21 = nil
		}
		disabled41 := new(bool)
		if !r.InputOffice365MsgTrace.Disabled.IsUnknown() && !r.InputOffice365MsgTrace.Disabled.IsNull() {
			*disabled41 = r.InputOffice365MsgTrace.Disabled.ValueBool()
		} else {
			disabled41 = nil
		}
		pipeline36 := new(string)
		if !r.InputOffice365MsgTrace.Pipeline.IsUnknown() && !r.InputOffice365MsgTrace.Pipeline.IsNull() {
			*pipeline36 = r.InputOffice365MsgTrace.Pipeline.ValueString()
		} else {
			pipeline36 = nil
		}
		sendToRoutes18 := new(bool)
		if !r.InputOffice365MsgTrace.SendToRoutes.IsUnknown() && !r.InputOffice365MsgTrace.SendToRoutes.IsNull() {
			*sendToRoutes18 = r.InputOffice365MsgTrace.SendToRoutes.ValueBool()
		} else {
			sendToRoutes18 = nil
		}
		environment18 := new(string)
		if !r.InputOffice365MsgTrace.Environment.IsUnknown() && !r.InputOffice365MsgTrace.Environment.IsNull() {
			*environment18 = r.InputOffice365MsgTrace.Environment.ValueString()
		} else {
			environment18 = nil
		}
		pqEnabled18 := new(bool)
		if !r.InputOffice365MsgTrace.PqEnabled.IsUnknown() && !r.InputOffice365MsgTrace.PqEnabled.IsNull() {
			*pqEnabled18 = r.InputOffice365MsgTrace.PqEnabled.ValueBool()
		} else {
			pqEnabled18 = nil
		}
		streamtags18 := make([]string, 0, len(r.InputOffice365MsgTrace.Streamtags))
		for _, streamtagsItem18 := range r.InputOffice365MsgTrace.Streamtags {
			streamtags18 = append(streamtags18, streamtagsItem18.ValueString())
		}
		connections18 := make([]shared.InputOffice365MsgTraceConnections, 0, len(r.InputOffice365MsgTrace.Connections))
		for _, connectionsItem18 := range r.InputOffice365MsgTrace.Connections {
			pipeline37 := new(string)
			if !connectionsItem18.Pipeline.IsUnknown() && !connectionsItem18.Pipeline.IsNull() {
				*pipeline37 = connectionsItem18.Pipeline.ValueString()
			} else {
				pipeline37 = nil
			}
			var output19 string
			output19 = connectionsItem18.Output.ValueString()

			connections18 = append(connections18, shared.InputOffice365MsgTraceConnections{
				Pipeline: pipeline37,
				Output:   output19,
			})
		}
		var pq18 *shared.InputOffice365MsgTracePq
		if r.InputOffice365MsgTrace.Pq != nil {
			mode18 := new(shared.InputOffice365MsgTraceMode)
			if !r.InputOffice365MsgTrace.Pq.Mode.IsUnknown() && !r.InputOffice365MsgTrace.Pq.Mode.IsNull() {
				*mode18 = shared.InputOffice365MsgTraceMode(r.InputOffice365MsgTrace.Pq.Mode.ValueString())
			} else {
				mode18 = nil
			}
			maxBufferSize18 := new(float64)
			if !r.InputOffice365MsgTrace.Pq.MaxBufferSize.IsUnknown() && !r.InputOffice365MsgTrace.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize18 = r.InputOffice365MsgTrace.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize18 = nil
			}
			commitFrequency18 := new(float64)
			if !r.InputOffice365MsgTrace.Pq.CommitFrequency.IsUnknown() && !r.InputOffice365MsgTrace.Pq.CommitFrequency.IsNull() {
				*commitFrequency18 = r.InputOffice365MsgTrace.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency18 = nil
			}
			maxFileSize18 := new(string)
			if !r.InputOffice365MsgTrace.Pq.MaxFileSize.IsUnknown() && !r.InputOffice365MsgTrace.Pq.MaxFileSize.IsNull() {
				*maxFileSize18 = r.InputOffice365MsgTrace.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize18 = nil
			}
			maxSize18 := new(string)
			if !r.InputOffice365MsgTrace.Pq.MaxSize.IsUnknown() && !r.InputOffice365MsgTrace.Pq.MaxSize.IsNull() {
				*maxSize18 = r.InputOffice365MsgTrace.Pq.MaxSize.ValueString()
			} else {
				maxSize18 = nil
			}
			path19 := new(string)
			if !r.InputOffice365MsgTrace.Pq.Path.IsUnknown() && !r.InputOffice365MsgTrace.Pq.Path.IsNull() {
				*path19 = r.InputOffice365MsgTrace.Pq.Path.ValueString()
			} else {
				path19 = nil
			}
			compress20 := new(shared.InputOffice365MsgTraceCompression)
			if !r.InputOffice365MsgTrace.Pq.Compress.IsUnknown() && !r.InputOffice365MsgTrace.Pq.Compress.IsNull() {
				*compress20 = shared.InputOffice365MsgTraceCompression(r.InputOffice365MsgTrace.Pq.Compress.ValueString())
			} else {
				compress20 = nil
			}
			pq18 = &shared.InputOffice365MsgTracePq{
				Mode:            mode18,
				MaxBufferSize:   maxBufferSize18,
				CommitFrequency: commitFrequency18,
				MaxFileSize:     maxFileSize18,
				MaxSize:         maxSize18,
				Path:            path19,
				Compress:        compress20,
			}
		}
		url1 := new(string)
		if !r.InputOffice365MsgTrace.URL.IsUnknown() && !r.InputOffice365MsgTrace.URL.IsNull() {
			*url1 = r.InputOffice365MsgTrace.URL.ValueString()
		} else {
			url1 = nil
		}
		interval7 := new(float64)
		if !r.InputOffice365MsgTrace.Interval.IsUnknown() && !r.InputOffice365MsgTrace.Interval.IsNull() {
			*interval7 = r.InputOffice365MsgTrace.Interval.ValueFloat64()
		} else {
			interval7 = nil
		}
		startDate := new(string)
		if !r.InputOffice365MsgTrace.StartDate.IsUnknown() && !r.InputOffice365MsgTrace.StartDate.IsNull() {
			*startDate = r.InputOffice365MsgTrace.StartDate.ValueString()
		} else {
			startDate = nil
		}
		endDate := new(string)
		if !r.InputOffice365MsgTrace.EndDate.IsUnknown() && !r.InputOffice365MsgTrace.EndDate.IsNull() {
			*endDate = r.InputOffice365MsgTrace.EndDate.ValueString()
		} else {
			endDate = nil
		}
		timeout3 := new(float64)
		if !r.InputOffice365MsgTrace.Timeout.IsUnknown() && !r.InputOffice365MsgTrace.Timeout.IsNull() {
			*timeout3 = r.InputOffice365MsgTrace.Timeout.ValueFloat64()
		} else {
			timeout3 = nil
		}
		disableTimeFilter := new(bool)
		if !r.InputOffice365MsgTrace.DisableTimeFilter.IsUnknown() && !r.InputOffice365MsgTrace.DisableTimeFilter.IsNull() {
			*disableTimeFilter = r.InputOffice365MsgTrace.DisableTimeFilter.ValueBool()
		} else {
			disableTimeFilter = nil
		}
		authType15 := new(shared.InputOffice365MsgTraceAuthenticationMethod)
		if !r.InputOffice365MsgTrace.AuthType.IsUnknown() && !r.InputOffice365MsgTrace.AuthType.IsNull() {
			*authType15 = shared.InputOffice365MsgTraceAuthenticationMethod(r.InputOffice365MsgTrace.AuthType.ValueString())
		} else {
			authType15 = nil
		}
		rescheduleDroppedTasks := new(bool)
		if !r.InputOffice365MsgTrace.RescheduleDroppedTasks.IsUnknown() && !r.InputOffice365MsgTrace.RescheduleDroppedTasks.IsNull() {
			*rescheduleDroppedTasks = r.InputOffice365MsgTrace.RescheduleDroppedTasks.ValueBool()
		} else {
			rescheduleDroppedTasks = nil
		}
		maxTaskReschedule := new(float64)
		if !r.InputOffice365MsgTrace.MaxTaskReschedule.IsUnknown() && !r.InputOffice365MsgTrace.MaxTaskReschedule.IsNull() {
			*maxTaskReschedule = r.InputOffice365MsgTrace.MaxTaskReschedule.ValueFloat64()
		} else {
			maxTaskReschedule = nil
		}
		logLevel4 := new(shared.InputOffice365MsgTraceLogLevel)
		if !r.InputOffice365MsgTrace.LogLevel.IsUnknown() && !r.InputOffice365MsgTrace.LogLevel.IsNull() {
			*logLevel4 = shared.InputOffice365MsgTraceLogLevel(r.InputOffice365MsgTrace.LogLevel.ValueString())
		} else {
			logLevel4 = nil
		}
		jobTimeout4 := new(string)
		if !r.InputOffice365MsgTrace.JobTimeout.IsUnknown() && !r.InputOffice365MsgTrace.JobTimeout.IsNull() {
			*jobTimeout4 = r.InputOffice365MsgTrace.JobTimeout.ValueString()
		} else {
			jobTimeout4 = nil
		}
		keepAliveTime4 := new(float64)
		if !r.InputOffice365MsgTrace.KeepAliveTime.IsUnknown() && !r.InputOffice365MsgTrace.KeepAliveTime.IsNull() {
			*keepAliveTime4 = r.InputOffice365MsgTrace.KeepAliveTime.ValueFloat64()
		} else {
			keepAliveTime4 = nil
		}
		maxMissedKeepAlives4 := new(float64)
		if !r.InputOffice365MsgTrace.MaxMissedKeepAlives.IsUnknown() && !r.InputOffice365MsgTrace.MaxMissedKeepAlives.IsNull() {
			*maxMissedKeepAlives4 = r.InputOffice365MsgTrace.MaxMissedKeepAlives.ValueFloat64()
		} else {
			maxMissedKeepAlives4 = nil
		}
		ttl4 := new(string)
		if !r.InputOffice365MsgTrace.TTL.IsUnknown() && !r.InputOffice365MsgTrace.TTL.IsNull() {
			*ttl4 = r.InputOffice365MsgTrace.TTL.ValueString()
		} else {
			ttl4 = nil
		}
		metadata20 := make([]shared.InputOffice365MsgTraceMetadata, 0, len(r.InputOffice365MsgTrace.Metadata))
		for _, metadataItem20 := range r.InputOffice365MsgTrace.Metadata {
			var name39 string
			name39 = metadataItem20.Name.ValueString()

			var value37 string
			value37 = metadataItem20.Value.ValueString()

			metadata20 = append(metadata20, shared.InputOffice365MsgTraceMetadata{
				Name:  name39,
				Value: value37,
			})
		}
		var retryRules3 *shared.InputOffice365MsgTraceRetryRules
		if r.InputOffice365MsgTrace.RetryRules != nil {
			typeVar22 := new(shared.InputOffice365MsgTraceRetryType)
			if !r.InputOffice365MsgTrace.RetryRules.Type.IsUnknown() && !r.InputOffice365MsgTrace.RetryRules.Type.IsNull() {
				*typeVar22 = shared.InputOffice365MsgTraceRetryType(r.InputOffice365MsgTrace.RetryRules.Type.ValueString())
			} else {
				typeVar22 = nil
			}
			interval8 := new(float64)
			if !r.InputOffice365MsgTrace.RetryRules.Interval.IsUnknown() && !r.InputOffice365MsgTrace.RetryRules.Interval.IsNull() {
				*interval8 = r.InputOffice365MsgTrace.RetryRules.Interval.ValueFloat64()
			} else {
				interval8 = nil
			}
			limit3 := new(float64)
			if !r.InputOffice365MsgTrace.RetryRules.Limit.IsUnknown() && !r.InputOffice365MsgTrace.RetryRules.Limit.IsNull() {
				*limit3 = r.InputOffice365MsgTrace.RetryRules.Limit.ValueFloat64()
			} else {
				limit3 = nil
			}
			multiplier3 := new(float64)
			if !r.InputOffice365MsgTrace.RetryRules.Multiplier.IsUnknown() && !r.InputOffice365MsgTrace.RetryRules.Multiplier.IsNull() {
				*multiplier3 = r.InputOffice365MsgTrace.RetryRules.Multiplier.ValueFloat64()
			} else {
				multiplier3 = nil
			}
			codes3 := make([]float64, 0, len(r.InputOffice365MsgTrace.RetryRules.Codes))
			for _, codesItem3 := range r.InputOffice365MsgTrace.RetryRules.Codes {
				codes3 = append(codes3, codesItem3.ValueFloat64())
			}
			enableHeader3 := new(bool)
			if !r.InputOffice365MsgTrace.RetryRules.EnableHeader.IsUnknown() && !r.InputOffice365MsgTrace.RetryRules.EnableHeader.IsNull() {
				*enableHeader3 = r.InputOffice365MsgTrace.RetryRules.EnableHeader.ValueBool()
			} else {
				enableHeader3 = nil
			}
			retryConnectTimeout3 := new(bool)
			if !r.InputOffice365MsgTrace.RetryRules.RetryConnectTimeout.IsUnknown() && !r.InputOffice365MsgTrace.RetryRules.RetryConnectTimeout.IsNull() {
				*retryConnectTimeout3 = r.InputOffice365MsgTrace.RetryRules.RetryConnectTimeout.ValueBool()
			} else {
				retryConnectTimeout3 = nil
			}
			retryConnectReset3 := new(bool)
			if !r.InputOffice365MsgTrace.RetryRules.RetryConnectReset.IsUnknown() && !r.InputOffice365MsgTrace.RetryRules.RetryConnectReset.IsNull() {
				*retryConnectReset3 = r.InputOffice365MsgTrace.RetryRules.RetryConnectReset.ValueBool()
			} else {
				retryConnectReset3 = nil
			}
			retryRules3 = &shared.InputOffice365MsgTraceRetryRules{
				Type:                typeVar22,
				Interval:            interval8,
				Limit:               limit3,
				Multiplier:          multiplier3,
				Codes:               codes3,
				EnableHeader:        enableHeader3,
				RetryConnectTimeout: retryConnectTimeout3,
				RetryConnectReset:   retryConnectReset3,
			}
		}
		description23 := new(string)
		if !r.InputOffice365MsgTrace.Description.IsUnknown() && !r.InputOffice365MsgTrace.Description.IsNull() {
			*description23 = r.InputOffice365MsgTrace.Description.ValueString()
		} else {
			description23 = nil
		}
		username10 := new(string)
		if !r.InputOffice365MsgTrace.Username.IsUnknown() && !r.InputOffice365MsgTrace.Username.IsNull() {
			*username10 = r.InputOffice365MsgTrace.Username.ValueString()
		} else {
			username10 = nil
		}
		password10 := new(string)
		if !r.InputOffice365MsgTrace.Password.IsUnknown() && !r.InputOffice365MsgTrace.Password.IsNull() {
			*password10 = r.InputOffice365MsgTrace.Password.ValueString()
		} else {
			password10 = nil
		}
		credentialsSecret13 := new(string)
		if !r.InputOffice365MsgTrace.CredentialsSecret.IsUnknown() && !r.InputOffice365MsgTrace.CredentialsSecret.IsNull() {
			*credentialsSecret13 = r.InputOffice365MsgTrace.CredentialsSecret.ValueString()
		} else {
			credentialsSecret13 = nil
		}
		clientSecret2 := new(string)
		if !r.InputOffice365MsgTrace.ClientSecret.IsUnknown() && !r.InputOffice365MsgTrace.ClientSecret.IsNull() {
			*clientSecret2 = r.InputOffice365MsgTrace.ClientSecret.ValueString()
		} else {
			clientSecret2 = nil
		}
		tenantId3 := new(string)
		if !r.InputOffice365MsgTrace.TenantID.IsUnknown() && !r.InputOffice365MsgTrace.TenantID.IsNull() {
			*tenantId3 = r.InputOffice365MsgTrace.TenantID.ValueString()
		} else {
			tenantId3 = nil
		}
		clientId1 := new(string)
		if !r.InputOffice365MsgTrace.ClientID.IsUnknown() && !r.InputOffice365MsgTrace.ClientID.IsNull() {
			*clientId1 = r.InputOffice365MsgTrace.ClientID.ValueString()
		} else {
			clientId1 = nil
		}
		resource := new(string)
		if !r.InputOffice365MsgTrace.Resource.IsUnknown() && !r.InputOffice365MsgTrace.Resource.IsNull() {
			*resource = r.InputOffice365MsgTrace.Resource.ValueString()
		} else {
			resource = nil
		}
		planType2 := new(shared.InputOffice365MsgTraceSubscriptionPlan)
		if !r.InputOffice365MsgTrace.PlanType.IsUnknown() && !r.InputOffice365MsgTrace.PlanType.IsNull() {
			*planType2 = shared.InputOffice365MsgTraceSubscriptionPlan(r.InputOffice365MsgTrace.PlanType.ValueString())
		} else {
			planType2 = nil
		}
		textSecret10 := new(string)
		if !r.InputOffice365MsgTrace.TextSecret.IsUnknown() && !r.InputOffice365MsgTrace.TextSecret.IsNull() {
			*textSecret10 = r.InputOffice365MsgTrace.TextSecret.ValueString()
		} else {
			textSecret10 = nil
		}
		var certOptions *shared.CertOptions
		if r.InputOffice365MsgTrace.CertOptions != nil {
			certificateName15 := new(string)
			if !r.InputOffice365MsgTrace.CertOptions.CertificateName.IsUnknown() && !r.InputOffice365MsgTrace.CertOptions.CertificateName.IsNull() {
				*certificateName15 = r.InputOffice365MsgTrace.CertOptions.CertificateName.ValueString()
			} else {
				certificateName15 = nil
			}
			var privKeyPath14 string
			privKeyPath14 = r.InputOffice365MsgTrace.CertOptions.PrivKeyPath.ValueString()

			passphrase14 := new(string)
			if !r.InputOffice365MsgTrace.CertOptions.Passphrase.IsUnknown() && !r.InputOffice365MsgTrace.CertOptions.Passphrase.IsNull() {
				*passphrase14 = r.InputOffice365MsgTrace.CertOptions.Passphrase.ValueString()
			} else {
				passphrase14 = nil
			}
			var certPath14 string
			certPath14 = r.InputOffice365MsgTrace.CertOptions.CertPath.ValueString()

			certOptions = &shared.CertOptions{
				CertificateName: certificateName15,
				PrivKeyPath:     privKeyPath14,
				Passphrase:      passphrase14,
				CertPath:        certPath14,
			}
		}
		var status18 *shared.TFStatus
		if r.InputOffice365MsgTrace.Status != nil {
			health18 := shared.Health(r.InputOffice365MsgTrace.Status.Health.ValueString())
			metrics18 := make(map[string]interface{})
			for metricsKey18, metricsValue18 := range r.InputOffice365MsgTrace.Status.Metrics {
				var metricsInst18 interface{}
				_ = json.Unmarshal([]byte(metricsValue18.ValueString()), &metricsInst18)
				metrics18[metricsKey18] = metricsInst18
			}
			var timestamp18 float64
			timestamp18 = r.InputOffice365MsgTrace.Status.Timestamp.ValueFloat64()

			useStatusFromLb18 := new(bool)
			if !r.InputOffice365MsgTrace.Status.UseStatusFromLB.IsUnknown() && !r.InputOffice365MsgTrace.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb18 = r.InputOffice365MsgTrace.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb18 = nil
			}
			status18 = &shared.TFStatus{
				Health:          health18,
				Metrics:         metrics18,
				Timestamp:       timestamp18,
				UseStatusFromLB: useStatusFromLb18,
			}
		}
		inputOffice365MsgTrace = &shared.InputOffice365MsgTrace{
			ID:                     id18,
			Type:                   typeVar21,
			Disabled:               disabled41,
			Pipeline:               pipeline36,
			SendToRoutes:           sendToRoutes18,
			Environment:            environment18,
			PqEnabled:              pqEnabled18,
			Streamtags:             streamtags18,
			Connections:            connections18,
			Pq:                     pq18,
			URL:                    url1,
			Interval:               interval7,
			StartDate:              startDate,
			EndDate:                endDate,
			Timeout:                timeout3,
			DisableTimeFilter:      disableTimeFilter,
			AuthType:               authType15,
			RescheduleDroppedTasks: rescheduleDroppedTasks,
			MaxTaskReschedule:      maxTaskReschedule,
			LogLevel:               logLevel4,
			JobTimeout:             jobTimeout4,
			KeepAliveTime:          keepAliveTime4,
			MaxMissedKeepAlives:    maxMissedKeepAlives4,
			TTL:                    ttl4,
			Metadata:               metadata20,
			RetryRules:             retryRules3,
			Description:            description23,
			Username:               username10,
			Password:               password10,
			CredentialsSecret:      credentialsSecret13,
			ClientSecret:           clientSecret2,
			TenantID:               tenantId3,
			ClientID:               clientId1,
			Resource:               resource,
			PlanType:               planType2,
			TextSecret:             textSecret10,
			CertOptions:            certOptions,
			Status:                 status18,
		}
	}
	if inputOffice365MsgTrace != nil {
		out = shared.Input{
			InputOffice365MsgTrace: inputOffice365MsgTrace,
		}
	}
	var inputEventhub *shared.InputEventhub
	if r.InputEventhub != nil {
		id19 := new(string)
		if !r.InputEventhub.ID.IsUnknown() && !r.InputEventhub.ID.IsNull() {
			*id19 = r.InputEventhub.ID.ValueString()
		} else {
			id19 = nil
		}
		typeVar23 := new(shared.InputEventhubType)
		if !r.InputEventhub.Type.IsUnknown() && !r.InputEventhub.Type.IsNull() {
			*typeVar23 = shared.InputEventhubType(r.InputEventhub.Type.ValueString())
		} else {
			typeVar23 = nil
		}
		disabled42 := new(bool)
		if !r.InputEventhub.Disabled.IsUnknown() && !r.InputEventhub.Disabled.IsNull() {
			*disabled42 = r.InputEventhub.Disabled.ValueBool()
		} else {
			disabled42 = nil
		}
		pipeline38 := new(string)
		if !r.InputEventhub.Pipeline.IsUnknown() && !r.InputEventhub.Pipeline.IsNull() {
			*pipeline38 = r.InputEventhub.Pipeline.ValueString()
		} else {
			pipeline38 = nil
		}
		sendToRoutes19 := new(bool)
		if !r.InputEventhub.SendToRoutes.IsUnknown() && !r.InputEventhub.SendToRoutes.IsNull() {
			*sendToRoutes19 = r.InputEventhub.SendToRoutes.ValueBool()
		} else {
			sendToRoutes19 = nil
		}
		environment19 := new(string)
		if !r.InputEventhub.Environment.IsUnknown() && !r.InputEventhub.Environment.IsNull() {
			*environment19 = r.InputEventhub.Environment.ValueString()
		} else {
			environment19 = nil
		}
		pqEnabled19 := new(bool)
		if !r.InputEventhub.PqEnabled.IsUnknown() && !r.InputEventhub.PqEnabled.IsNull() {
			*pqEnabled19 = r.InputEventhub.PqEnabled.ValueBool()
		} else {
			pqEnabled19 = nil
		}
		streamtags19 := make([]string, 0, len(r.InputEventhub.Streamtags))
		for _, streamtagsItem19 := range r.InputEventhub.Streamtags {
			streamtags19 = append(streamtags19, streamtagsItem19.ValueString())
		}
		connections19 := make([]shared.InputEventhubConnections, 0, len(r.InputEventhub.Connections))
		for _, connectionsItem19 := range r.InputEventhub.Connections {
			pipeline39 := new(string)
			if !connectionsItem19.Pipeline.IsUnknown() && !connectionsItem19.Pipeline.IsNull() {
				*pipeline39 = connectionsItem19.Pipeline.ValueString()
			} else {
				pipeline39 = nil
			}
			var output20 string
			output20 = connectionsItem19.Output.ValueString()

			connections19 = append(connections19, shared.InputEventhubConnections{
				Pipeline: pipeline39,
				Output:   output20,
			})
		}
		var pq19 *shared.InputEventhubPq
		if r.InputEventhub.Pq != nil {
			mode19 := new(shared.InputEventhubMode)
			if !r.InputEventhub.Pq.Mode.IsUnknown() && !r.InputEventhub.Pq.Mode.IsNull() {
				*mode19 = shared.InputEventhubMode(r.InputEventhub.Pq.Mode.ValueString())
			} else {
				mode19 = nil
			}
			maxBufferSize19 := new(float64)
			if !r.InputEventhub.Pq.MaxBufferSize.IsUnknown() && !r.InputEventhub.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize19 = r.InputEventhub.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize19 = nil
			}
			commitFrequency19 := new(float64)
			if !r.InputEventhub.Pq.CommitFrequency.IsUnknown() && !r.InputEventhub.Pq.CommitFrequency.IsNull() {
				*commitFrequency19 = r.InputEventhub.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency19 = nil
			}
			maxFileSize19 := new(string)
			if !r.InputEventhub.Pq.MaxFileSize.IsUnknown() && !r.InputEventhub.Pq.MaxFileSize.IsNull() {
				*maxFileSize19 = r.InputEventhub.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize19 = nil
			}
			maxSize19 := new(string)
			if !r.InputEventhub.Pq.MaxSize.IsUnknown() && !r.InputEventhub.Pq.MaxSize.IsNull() {
				*maxSize19 = r.InputEventhub.Pq.MaxSize.ValueString()
			} else {
				maxSize19 = nil
			}
			path20 := new(string)
			if !r.InputEventhub.Pq.Path.IsUnknown() && !r.InputEventhub.Pq.Path.IsNull() {
				*path20 = r.InputEventhub.Pq.Path.ValueString()
			} else {
				path20 = nil
			}
			compress21 := new(shared.InputEventhubCompression)
			if !r.InputEventhub.Pq.Compress.IsUnknown() && !r.InputEventhub.Pq.Compress.IsNull() {
				*compress21 = shared.InputEventhubCompression(r.InputEventhub.Pq.Compress.ValueString())
			} else {
				compress21 = nil
			}
			pq19 = &shared.InputEventhubPq{
				Mode:            mode19,
				MaxBufferSize:   maxBufferSize19,
				CommitFrequency: commitFrequency19,
				MaxFileSize:     maxFileSize19,
				MaxSize:         maxSize19,
				Path:            path20,
				Compress:        compress21,
			}
		}
		brokers3 := make([]string, 0, len(r.InputEventhub.Brokers))
		for _, brokersItem3 := range r.InputEventhub.Brokers {
			brokers3 = append(brokers3, brokersItem3.ValueString())
		}
		topics3 := make([]string, 0, len(r.InputEventhub.Topics))
		for _, topicsItem3 := range r.InputEventhub.Topics {
			topics3 = append(topics3, topicsItem3.ValueString())
		}
		groupId3 := new(string)
		if !r.InputEventhub.GroupID.IsUnknown() && !r.InputEventhub.GroupID.IsNull() {
			*groupId3 = r.InputEventhub.GroupID.ValueString()
		} else {
			groupId3 = nil
		}
		fromBeginning3 := new(bool)
		if !r.InputEventhub.FromBeginning.IsUnknown() && !r.InputEventhub.FromBeginning.IsNull() {
			*fromBeginning3 = r.InputEventhub.FromBeginning.ValueBool()
		} else {
			fromBeginning3 = nil
		}
		connectionTimeout6 := new(float64)
		if !r.InputEventhub.ConnectionTimeout.IsUnknown() && !r.InputEventhub.ConnectionTimeout.IsNull() {
			*connectionTimeout6 = r.InputEventhub.ConnectionTimeout.ValueFloat64()
		} else {
			connectionTimeout6 = nil
		}
		requestTimeout14 := new(float64)
		if !r.InputEventhub.RequestTimeout.IsUnknown() && !r.InputEventhub.RequestTimeout.IsNull() {
			*requestTimeout14 = r.InputEventhub.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout14 = nil
		}
		maxRetries6 := new(float64)
		if !r.InputEventhub.MaxRetries.IsUnknown() && !r.InputEventhub.MaxRetries.IsNull() {
			*maxRetries6 = r.InputEventhub.MaxRetries.ValueFloat64()
		} else {
			maxRetries6 = nil
		}
		maxBackOff3 := new(float64)
		if !r.InputEventhub.MaxBackOff.IsUnknown() && !r.InputEventhub.MaxBackOff.IsNull() {
			*maxBackOff3 = r.InputEventhub.MaxBackOff.ValueFloat64()
		} else {
			maxBackOff3 = nil
		}
		initialBackoff3 := new(float64)
		if !r.InputEventhub.InitialBackoff.IsUnknown() && !r.InputEventhub.InitialBackoff.IsNull() {
			*initialBackoff3 = r.InputEventhub.InitialBackoff.ValueFloat64()
		} else {
			initialBackoff3 = nil
		}
		backoffRate3 := new(float64)
		if !r.InputEventhub.BackoffRate.IsUnknown() && !r.InputEventhub.BackoffRate.IsNull() {
			*backoffRate3 = r.InputEventhub.BackoffRate.ValueFloat64()
		} else {
			backoffRate3 = nil
		}
		authenticationTimeout3 := new(float64)
		if !r.InputEventhub.AuthenticationTimeout.IsUnknown() && !r.InputEventhub.AuthenticationTimeout.IsNull() {
			*authenticationTimeout3 = r.InputEventhub.AuthenticationTimeout.ValueFloat64()
		} else {
			authenticationTimeout3 = nil
		}
		reauthenticationThreshold3 := new(float64)
		if !r.InputEventhub.ReauthenticationThreshold.IsUnknown() && !r.InputEventhub.ReauthenticationThreshold.IsNull() {
			*reauthenticationThreshold3 = r.InputEventhub.ReauthenticationThreshold.ValueFloat64()
		} else {
			reauthenticationThreshold3 = nil
		}
		var sasl2 *shared.InputEventhubAuthentication
		if r.InputEventhub.Sasl != nil {
			disabled43 := new(bool)
			if !r.InputEventhub.Sasl.Disabled.IsUnknown() && !r.InputEventhub.Sasl.Disabled.IsNull() {
				*disabled43 = r.InputEventhub.Sasl.Disabled.ValueBool()
			} else {
				disabled43 = nil
			}
			mechanism2 := new(shared.InputEventhubSASLMechanism)
			if !r.InputEventhub.Sasl.Mechanism.IsUnknown() && !r.InputEventhub.Sasl.Mechanism.IsNull() {
				*mechanism2 = shared.InputEventhubSASLMechanism(r.InputEventhub.Sasl.Mechanism.ValueString())
			} else {
				mechanism2 = nil
			}
			sasl2 = &shared.InputEventhubAuthentication{
				Disabled:  disabled43,
				Mechanism: mechanism2,
			}
		}
		var tls14 *shared.InputEventhubTLSSettingsClientSide
		if r.InputEventhub.TLS != nil {
			disabled44 := new(bool)
			if !r.InputEventhub.TLS.Disabled.IsUnknown() && !r.InputEventhub.TLS.Disabled.IsNull() {
				*disabled44 = r.InputEventhub.TLS.Disabled.ValueBool()
			} else {
				disabled44 = nil
			}
			rejectUnauthorized19 := new(bool)
			if !r.InputEventhub.TLS.RejectUnauthorized.IsUnknown() && !r.InputEventhub.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized19 = r.InputEventhub.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized19 = nil
			}
			tls14 = &shared.InputEventhubTLSSettingsClientSide{
				Disabled:           disabled44,
				RejectUnauthorized: rejectUnauthorized19,
			}
		}
		sessionTimeout3 := new(float64)
		if !r.InputEventhub.SessionTimeout.IsUnknown() && !r.InputEventhub.SessionTimeout.IsNull() {
			*sessionTimeout3 = r.InputEventhub.SessionTimeout.ValueFloat64()
		} else {
			sessionTimeout3 = nil
		}
		rebalanceTimeout3 := new(float64)
		if !r.InputEventhub.RebalanceTimeout.IsUnknown() && !r.InputEventhub.RebalanceTimeout.IsNull() {
			*rebalanceTimeout3 = r.InputEventhub.RebalanceTimeout.ValueFloat64()
		} else {
			rebalanceTimeout3 = nil
		}
		heartbeatInterval3 := new(float64)
		if !r.InputEventhub.HeartbeatInterval.IsUnknown() && !r.InputEventhub.HeartbeatInterval.IsNull() {
			*heartbeatInterval3 = r.InputEventhub.HeartbeatInterval.ValueFloat64()
		} else {
			heartbeatInterval3 = nil
		}
		autoCommitInterval3 := new(float64)
		if !r.InputEventhub.AutoCommitInterval.IsUnknown() && !r.InputEventhub.AutoCommitInterval.IsNull() {
			*autoCommitInterval3 = r.InputEventhub.AutoCommitInterval.ValueFloat64()
		} else {
			autoCommitInterval3 = nil
		}
		autoCommitThreshold3 := new(float64)
		if !r.InputEventhub.AutoCommitThreshold.IsUnknown() && !r.InputEventhub.AutoCommitThreshold.IsNull() {
			*autoCommitThreshold3 = r.InputEventhub.AutoCommitThreshold.ValueFloat64()
		} else {
			autoCommitThreshold3 = nil
		}
		maxBytesPerPartition3 := new(float64)
		if !r.InputEventhub.MaxBytesPerPartition.IsUnknown() && !r.InputEventhub.MaxBytesPerPartition.IsNull() {
			*maxBytesPerPartition3 = r.InputEventhub.MaxBytesPerPartition.ValueFloat64()
		} else {
			maxBytesPerPartition3 = nil
		}
		maxBytes3 := new(float64)
		if !r.InputEventhub.MaxBytes.IsUnknown() && !r.InputEventhub.MaxBytes.IsNull() {
			*maxBytes3 = r.InputEventhub.MaxBytes.ValueFloat64()
		} else {
			maxBytes3 = nil
		}
		maxSocketErrors3 := new(float64)
		if !r.InputEventhub.MaxSocketErrors.IsUnknown() && !r.InputEventhub.MaxSocketErrors.IsNull() {
			*maxSocketErrors3 = r.InputEventhub.MaxSocketErrors.ValueFloat64()
		} else {
			maxSocketErrors3 = nil
		}
		minimizeDuplicates := new(bool)
		if !r.InputEventhub.MinimizeDuplicates.IsUnknown() && !r.InputEventhub.MinimizeDuplicates.IsNull() {
			*minimizeDuplicates = r.InputEventhub.MinimizeDuplicates.ValueBool()
		} else {
			minimizeDuplicates = nil
		}
		metadata21 := make([]shared.InputEventhubMetadata, 0, len(r.InputEventhub.Metadata))
		for _, metadataItem21 := range r.InputEventhub.Metadata {
			var name40 string
			name40 = metadataItem21.Name.ValueString()

			var value38 string
			value38 = metadataItem21.Value.ValueString()

			metadata21 = append(metadata21, shared.InputEventhubMetadata{
				Name:  name40,
				Value: value38,
			})
		}
		description24 := new(string)
		if !r.InputEventhub.Description.IsUnknown() && !r.InputEventhub.Description.IsNull() {
			*description24 = r.InputEventhub.Description.ValueString()
		} else {
			description24 = nil
		}
		var status19 *shared.TFStatus
		if r.InputEventhub.Status != nil {
			health19 := shared.Health(r.InputEventhub.Status.Health.ValueString())
			metrics19 := make(map[string]interface{})
			for metricsKey19, metricsValue19 := range r.InputEventhub.Status.Metrics {
				var metricsInst19 interface{}
				_ = json.Unmarshal([]byte(metricsValue19.ValueString()), &metricsInst19)
				metrics19[metricsKey19] = metricsInst19
			}
			var timestamp19 float64
			timestamp19 = r.InputEventhub.Status.Timestamp.ValueFloat64()

			useStatusFromLb19 := new(bool)
			if !r.InputEventhub.Status.UseStatusFromLB.IsUnknown() && !r.InputEventhub.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb19 = r.InputEventhub.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb19 = nil
			}
			status19 = &shared.TFStatus{
				Health:          health19,
				Metrics:         metrics19,
				Timestamp:       timestamp19,
				UseStatusFromLB: useStatusFromLb19,
			}
		}
		inputEventhub = &shared.InputEventhub{
			ID:                        id19,
			Type:                      typeVar23,
			Disabled:                  disabled42,
			Pipeline:                  pipeline38,
			SendToRoutes:              sendToRoutes19,
			Environment:               environment19,
			PqEnabled:                 pqEnabled19,
			Streamtags:                streamtags19,
			Connections:               connections19,
			Pq:                        pq19,
			Brokers:                   brokers3,
			Topics:                    topics3,
			GroupID:                   groupId3,
			FromBeginning:             fromBeginning3,
			ConnectionTimeout:         connectionTimeout6,
			RequestTimeout:            requestTimeout14,
			MaxRetries:                maxRetries6,
			MaxBackOff:                maxBackOff3,
			InitialBackoff:            initialBackoff3,
			BackoffRate:               backoffRate3,
			AuthenticationTimeout:     authenticationTimeout3,
			ReauthenticationThreshold: reauthenticationThreshold3,
			Sasl:                      sasl2,
			TLS:                       tls14,
			SessionTimeout:            sessionTimeout3,
			RebalanceTimeout:          rebalanceTimeout3,
			HeartbeatInterval:         heartbeatInterval3,
			AutoCommitInterval:        autoCommitInterval3,
			AutoCommitThreshold:       autoCommitThreshold3,
			MaxBytesPerPartition:      maxBytesPerPartition3,
			MaxBytes:                  maxBytes3,
			MaxSocketErrors:           maxSocketErrors3,
			MinimizeDuplicates:        minimizeDuplicates,
			Metadata:                  metadata21,
			Description:               description24,
			Status:                    status19,
		}
	}
	if inputEventhub != nil {
		out = shared.Input{
			InputEventhub: inputEventhub,
		}
	}
	var inputExec *shared.InputExec
	if r.InputExec != nil {
		id20 := new(string)
		if !r.InputExec.ID.IsUnknown() && !r.InputExec.ID.IsNull() {
			*id20 = r.InputExec.ID.ValueString()
		} else {
			id20 = nil
		}
		typeVar24 := shared.InputExecType(r.InputExec.Type.ValueString())
		disabled45 := new(bool)
		if !r.InputExec.Disabled.IsUnknown() && !r.InputExec.Disabled.IsNull() {
			*disabled45 = r.InputExec.Disabled.ValueBool()
		} else {
			disabled45 = nil
		}
		pipeline40 := new(string)
		if !r.InputExec.Pipeline.IsUnknown() && !r.InputExec.Pipeline.IsNull() {
			*pipeline40 = r.InputExec.Pipeline.ValueString()
		} else {
			pipeline40 = nil
		}
		sendToRoutes20 := new(bool)
		if !r.InputExec.SendToRoutes.IsUnknown() && !r.InputExec.SendToRoutes.IsNull() {
			*sendToRoutes20 = r.InputExec.SendToRoutes.ValueBool()
		} else {
			sendToRoutes20 = nil
		}
		environment20 := new(string)
		if !r.InputExec.Environment.IsUnknown() && !r.InputExec.Environment.IsNull() {
			*environment20 = r.InputExec.Environment.ValueString()
		} else {
			environment20 = nil
		}
		pqEnabled20 := new(bool)
		if !r.InputExec.PqEnabled.IsUnknown() && !r.InputExec.PqEnabled.IsNull() {
			*pqEnabled20 = r.InputExec.PqEnabled.ValueBool()
		} else {
			pqEnabled20 = nil
		}
		streamtags20 := make([]string, 0, len(r.InputExec.Streamtags))
		for _, streamtagsItem20 := range r.InputExec.Streamtags {
			streamtags20 = append(streamtags20, streamtagsItem20.ValueString())
		}
		connections20 := make([]shared.InputExecConnections, 0, len(r.InputExec.Connections))
		for _, connectionsItem20 := range r.InputExec.Connections {
			pipeline41 := new(string)
			if !connectionsItem20.Pipeline.IsUnknown() && !connectionsItem20.Pipeline.IsNull() {
				*pipeline41 = connectionsItem20.Pipeline.ValueString()
			} else {
				pipeline41 = nil
			}
			var output21 string
			output21 = connectionsItem20.Output.ValueString()

			connections20 = append(connections20, shared.InputExecConnections{
				Pipeline: pipeline41,
				Output:   output21,
			})
		}
		var pq20 *shared.InputExecPq
		if r.InputExec.Pq != nil {
			mode20 := new(shared.InputExecMode)
			if !r.InputExec.Pq.Mode.IsUnknown() && !r.InputExec.Pq.Mode.IsNull() {
				*mode20 = shared.InputExecMode(r.InputExec.Pq.Mode.ValueString())
			} else {
				mode20 = nil
			}
			maxBufferSize20 := new(float64)
			if !r.InputExec.Pq.MaxBufferSize.IsUnknown() && !r.InputExec.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize20 = r.InputExec.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize20 = nil
			}
			commitFrequency20 := new(float64)
			if !r.InputExec.Pq.CommitFrequency.IsUnknown() && !r.InputExec.Pq.CommitFrequency.IsNull() {
				*commitFrequency20 = r.InputExec.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency20 = nil
			}
			maxFileSize20 := new(string)
			if !r.InputExec.Pq.MaxFileSize.IsUnknown() && !r.InputExec.Pq.MaxFileSize.IsNull() {
				*maxFileSize20 = r.InputExec.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize20 = nil
			}
			maxSize20 := new(string)
			if !r.InputExec.Pq.MaxSize.IsUnknown() && !r.InputExec.Pq.MaxSize.IsNull() {
				*maxSize20 = r.InputExec.Pq.MaxSize.ValueString()
			} else {
				maxSize20 = nil
			}
			path21 := new(string)
			if !r.InputExec.Pq.Path.IsUnknown() && !r.InputExec.Pq.Path.IsNull() {
				*path21 = r.InputExec.Pq.Path.ValueString()
			} else {
				path21 = nil
			}
			compress22 := new(shared.InputExecCompression)
			if !r.InputExec.Pq.Compress.IsUnknown() && !r.InputExec.Pq.Compress.IsNull() {
				*compress22 = shared.InputExecCompression(r.InputExec.Pq.Compress.ValueString())
			} else {
				compress22 = nil
			}
			pq20 = &shared.InputExecPq{
				Mode:            mode20,
				MaxBufferSize:   maxBufferSize20,
				CommitFrequency: commitFrequency20,
				MaxFileSize:     maxFileSize20,
				MaxSize:         maxSize20,
				Path:            path21,
				Compress:        compress22,
			}
		}
		var command1 string
		command1 = r.InputExec.Command.ValueString()

		retries := new(float64)
		if !r.InputExec.Retries.IsUnknown() && !r.InputExec.Retries.IsNull() {
			*retries = r.InputExec.Retries.ValueFloat64()
		} else {
			retries = nil
		}
		scheduleType := new(shared.ScheduleType)
		if !r.InputExec.ScheduleType.IsUnknown() && !r.InputExec.ScheduleType.IsNull() {
			*scheduleType = shared.ScheduleType(r.InputExec.ScheduleType.ValueString())
		} else {
			scheduleType = nil
		}
		breakerRulesets5 := make([]string, 0, len(r.InputExec.BreakerRulesets))
		for _, breakerRulesetsItem5 := range r.InputExec.BreakerRulesets {
			breakerRulesets5 = append(breakerRulesets5, breakerRulesetsItem5.ValueString())
		}
		staleChannelFlushMs5 := new(float64)
		if !r.InputExec.StaleChannelFlushMs.IsUnknown() && !r.InputExec.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs5 = r.InputExec.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs5 = nil
		}
		metadata22 := make([]shared.InputExecMetadata, 0, len(r.InputExec.Metadata))
		for _, metadataItem22 := range r.InputExec.Metadata {
			var name41 string
			name41 = metadataItem22.Name.ValueString()

			var value39 string
			value39 = metadataItem22.Value.ValueString()

			metadata22 = append(metadata22, shared.InputExecMetadata{
				Name:  name41,
				Value: value39,
			})
		}
		description25 := new(string)
		if !r.InputExec.Description.IsUnknown() && !r.InputExec.Description.IsNull() {
			*description25 = r.InputExec.Description.ValueString()
		} else {
			description25 = nil
		}
		interval9 := new(float64)
		if !r.InputExec.Interval.IsUnknown() && !r.InputExec.Interval.IsNull() {
			*interval9 = r.InputExec.Interval.ValueFloat64()
		} else {
			interval9 = nil
		}
		cronSchedule1 := new(string)
		if !r.InputExec.CronSchedule.IsUnknown() && !r.InputExec.CronSchedule.IsNull() {
			*cronSchedule1 = r.InputExec.CronSchedule.ValueString()
		} else {
			cronSchedule1 = nil
		}
		var status20 *shared.TFStatus
		if r.InputExec.Status != nil {
			health20 := shared.Health(r.InputExec.Status.Health.ValueString())
			metrics20 := make(map[string]interface{})
			for metricsKey20, metricsValue20 := range r.InputExec.Status.Metrics {
				var metricsInst20 interface{}
				_ = json.Unmarshal([]byte(metricsValue20.ValueString()), &metricsInst20)
				metrics20[metricsKey20] = metricsInst20
			}
			var timestamp20 float64
			timestamp20 = r.InputExec.Status.Timestamp.ValueFloat64()

			useStatusFromLb20 := new(bool)
			if !r.InputExec.Status.UseStatusFromLB.IsUnknown() && !r.InputExec.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb20 = r.InputExec.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb20 = nil
			}
			status20 = &shared.TFStatus{
				Health:          health20,
				Metrics:         metrics20,
				Timestamp:       timestamp20,
				UseStatusFromLB: useStatusFromLb20,
			}
		}
		inputExec = &shared.InputExec{
			ID:                  id20,
			Type:                typeVar24,
			Disabled:            disabled45,
			Pipeline:            pipeline40,
			SendToRoutes:        sendToRoutes20,
			Environment:         environment20,
			PqEnabled:           pqEnabled20,
			Streamtags:          streamtags20,
			Connections:         connections20,
			Pq:                  pq20,
			Command:             command1,
			Retries:             retries,
			ScheduleType:        scheduleType,
			BreakerRulesets:     breakerRulesets5,
			StaleChannelFlushMs: staleChannelFlushMs5,
			Metadata:            metadata22,
			Description:         description25,
			Interval:            interval9,
			CronSchedule:        cronSchedule1,
			Status:              status20,
		}
	}
	if inputExec != nil {
		out = shared.Input{
			InputExec: inputExec,
		}
	}
	var inputFirehose *shared.InputFirehose
	if r.InputFirehose != nil {
		id21 := new(string)
		if !r.InputFirehose.ID.IsUnknown() && !r.InputFirehose.ID.IsNull() {
			*id21 = r.InputFirehose.ID.ValueString()
		} else {
			id21 = nil
		}
		typeVar25 := new(shared.InputFirehoseType)
		if !r.InputFirehose.Type.IsUnknown() && !r.InputFirehose.Type.IsNull() {
			*typeVar25 = shared.InputFirehoseType(r.InputFirehose.Type.ValueString())
		} else {
			typeVar25 = nil
		}
		disabled46 := new(bool)
		if !r.InputFirehose.Disabled.IsUnknown() && !r.InputFirehose.Disabled.IsNull() {
			*disabled46 = r.InputFirehose.Disabled.ValueBool()
		} else {
			disabled46 = nil
		}
		pipeline42 := new(string)
		if !r.InputFirehose.Pipeline.IsUnknown() && !r.InputFirehose.Pipeline.IsNull() {
			*pipeline42 = r.InputFirehose.Pipeline.ValueString()
		} else {
			pipeline42 = nil
		}
		sendToRoutes21 := new(bool)
		if !r.InputFirehose.SendToRoutes.IsUnknown() && !r.InputFirehose.SendToRoutes.IsNull() {
			*sendToRoutes21 = r.InputFirehose.SendToRoutes.ValueBool()
		} else {
			sendToRoutes21 = nil
		}
		environment21 := new(string)
		if !r.InputFirehose.Environment.IsUnknown() && !r.InputFirehose.Environment.IsNull() {
			*environment21 = r.InputFirehose.Environment.ValueString()
		} else {
			environment21 = nil
		}
		pqEnabled21 := new(bool)
		if !r.InputFirehose.PqEnabled.IsUnknown() && !r.InputFirehose.PqEnabled.IsNull() {
			*pqEnabled21 = r.InputFirehose.PqEnabled.ValueBool()
		} else {
			pqEnabled21 = nil
		}
		streamtags21 := make([]string, 0, len(r.InputFirehose.Streamtags))
		for _, streamtagsItem21 := range r.InputFirehose.Streamtags {
			streamtags21 = append(streamtags21, streamtagsItem21.ValueString())
		}
		connections21 := make([]shared.InputFirehoseConnections, 0, len(r.InputFirehose.Connections))
		for _, connectionsItem21 := range r.InputFirehose.Connections {
			pipeline43 := new(string)
			if !connectionsItem21.Pipeline.IsUnknown() && !connectionsItem21.Pipeline.IsNull() {
				*pipeline43 = connectionsItem21.Pipeline.ValueString()
			} else {
				pipeline43 = nil
			}
			var output22 string
			output22 = connectionsItem21.Output.ValueString()

			connections21 = append(connections21, shared.InputFirehoseConnections{
				Pipeline: pipeline43,
				Output:   output22,
			})
		}
		var pq21 *shared.InputFirehosePq
		if r.InputFirehose.Pq != nil {
			mode21 := new(shared.InputFirehoseMode)
			if !r.InputFirehose.Pq.Mode.IsUnknown() && !r.InputFirehose.Pq.Mode.IsNull() {
				*mode21 = shared.InputFirehoseMode(r.InputFirehose.Pq.Mode.ValueString())
			} else {
				mode21 = nil
			}
			maxBufferSize21 := new(float64)
			if !r.InputFirehose.Pq.MaxBufferSize.IsUnknown() && !r.InputFirehose.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize21 = r.InputFirehose.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize21 = nil
			}
			commitFrequency21 := new(float64)
			if !r.InputFirehose.Pq.CommitFrequency.IsUnknown() && !r.InputFirehose.Pq.CommitFrequency.IsNull() {
				*commitFrequency21 = r.InputFirehose.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency21 = nil
			}
			maxFileSize21 := new(string)
			if !r.InputFirehose.Pq.MaxFileSize.IsUnknown() && !r.InputFirehose.Pq.MaxFileSize.IsNull() {
				*maxFileSize21 = r.InputFirehose.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize21 = nil
			}
			maxSize21 := new(string)
			if !r.InputFirehose.Pq.MaxSize.IsUnknown() && !r.InputFirehose.Pq.MaxSize.IsNull() {
				*maxSize21 = r.InputFirehose.Pq.MaxSize.ValueString()
			} else {
				maxSize21 = nil
			}
			path22 := new(string)
			if !r.InputFirehose.Pq.Path.IsUnknown() && !r.InputFirehose.Pq.Path.IsNull() {
				*path22 = r.InputFirehose.Pq.Path.ValueString()
			} else {
				path22 = nil
			}
			compress23 := new(shared.InputFirehoseCompression)
			if !r.InputFirehose.Pq.Compress.IsUnknown() && !r.InputFirehose.Pq.Compress.IsNull() {
				*compress23 = shared.InputFirehoseCompression(r.InputFirehose.Pq.Compress.ValueString())
			} else {
				compress23 = nil
			}
			pq21 = &shared.InputFirehosePq{
				Mode:            mode21,
				MaxBufferSize:   maxBufferSize21,
				CommitFrequency: commitFrequency21,
				MaxFileSize:     maxFileSize21,
				MaxSize:         maxSize21,
				Path:            path22,
				Compress:        compress23,
			}
		}
		host9 := new(string)
		if !r.InputFirehose.Host.IsUnknown() && !r.InputFirehose.Host.IsNull() {
			*host9 = r.InputFirehose.Host.ValueString()
		} else {
			host9 = nil
		}
		var port9 float64
		port9 = r.InputFirehose.Port.ValueFloat64()

		authTokens4 := make([]string, 0, len(r.InputFirehose.AuthTokens))
		for _, authTokensItem4 := range r.InputFirehose.AuthTokens {
			authTokens4 = append(authTokens4, authTokensItem4.ValueString())
		}
		var tls15 *shared.InputFirehoseTLSSettingsServerSide
		if r.InputFirehose.TLS != nil {
			disabled47 := new(bool)
			if !r.InputFirehose.TLS.Disabled.IsUnknown() && !r.InputFirehose.TLS.Disabled.IsNull() {
				*disabled47 = r.InputFirehose.TLS.Disabled.ValueBool()
			} else {
				disabled47 = nil
			}
			certificateName16 := new(string)
			if !r.InputFirehose.TLS.CertificateName.IsUnknown() && !r.InputFirehose.TLS.CertificateName.IsNull() {
				*certificateName16 = r.InputFirehose.TLS.CertificateName.ValueString()
			} else {
				certificateName16 = nil
			}
			privKeyPath15 := new(string)
			if !r.InputFirehose.TLS.PrivKeyPath.IsUnknown() && !r.InputFirehose.TLS.PrivKeyPath.IsNull() {
				*privKeyPath15 = r.InputFirehose.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath15 = nil
			}
			passphrase15 := new(string)
			if !r.InputFirehose.TLS.Passphrase.IsUnknown() && !r.InputFirehose.TLS.Passphrase.IsNull() {
				*passphrase15 = r.InputFirehose.TLS.Passphrase.ValueString()
			} else {
				passphrase15 = nil
			}
			certPath15 := new(string)
			if !r.InputFirehose.TLS.CertPath.IsUnknown() && !r.InputFirehose.TLS.CertPath.IsNull() {
				*certPath15 = r.InputFirehose.TLS.CertPath.ValueString()
			} else {
				certPath15 = nil
			}
			caPath14 := new(string)
			if !r.InputFirehose.TLS.CaPath.IsUnknown() && !r.InputFirehose.TLS.CaPath.IsNull() {
				*caPath14 = r.InputFirehose.TLS.CaPath.ValueString()
			} else {
				caPath14 = nil
			}
			requestCert8 := new(bool)
			if !r.InputFirehose.TLS.RequestCert.IsUnknown() && !r.InputFirehose.TLS.RequestCert.IsNull() {
				*requestCert8 = r.InputFirehose.TLS.RequestCert.ValueBool()
			} else {
				requestCert8 = nil
			}
			var rejectUnauthorized20 interface{}
			if !r.InputFirehose.TLS.RejectUnauthorized.IsUnknown() && !r.InputFirehose.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputFirehose.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized20)
			}
			var commonNameRegex8 interface{}
			if !r.InputFirehose.TLS.CommonNameRegex.IsUnknown() && !r.InputFirehose.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputFirehose.TLS.CommonNameRegex.ValueString()), &commonNameRegex8)
			}
			minVersion14 := new(shared.InputFirehoseMinimumTLSVersion)
			if !r.InputFirehose.TLS.MinVersion.IsUnknown() && !r.InputFirehose.TLS.MinVersion.IsNull() {
				*minVersion14 = shared.InputFirehoseMinimumTLSVersion(r.InputFirehose.TLS.MinVersion.ValueString())
			} else {
				minVersion14 = nil
			}
			maxVersion14 := new(shared.InputFirehoseMaximumTLSVersion)
			if !r.InputFirehose.TLS.MaxVersion.IsUnknown() && !r.InputFirehose.TLS.MaxVersion.IsNull() {
				*maxVersion14 = shared.InputFirehoseMaximumTLSVersion(r.InputFirehose.TLS.MaxVersion.ValueString())
			} else {
				maxVersion14 = nil
			}
			tls15 = &shared.InputFirehoseTLSSettingsServerSide{
				Disabled:           disabled47,
				CertificateName:    certificateName16,
				PrivKeyPath:        privKeyPath15,
				Passphrase:         passphrase15,
				CertPath:           certPath15,
				CaPath:             caPath14,
				RequestCert:        requestCert8,
				RejectUnauthorized: rejectUnauthorized20,
				CommonNameRegex:    commonNameRegex8,
				MinVersion:         minVersion14,
				MaxVersion:         maxVersion14,
			}
		}
		maxActiveReq7 := new(float64)
		if !r.InputFirehose.MaxActiveReq.IsUnknown() && !r.InputFirehose.MaxActiveReq.IsNull() {
			*maxActiveReq7 = r.InputFirehose.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq7 = nil
		}
		maxRequestsPerSocket7 := new(int64)
		if !r.InputFirehose.MaxRequestsPerSocket.IsUnknown() && !r.InputFirehose.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket7 = r.InputFirehose.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket7 = nil
		}
		enableProxyHeader8 := new(bool)
		if !r.InputFirehose.EnableProxyHeader.IsUnknown() && !r.InputFirehose.EnableProxyHeader.IsNull() {
			*enableProxyHeader8 = r.InputFirehose.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader8 = nil
		}
		captureHeaders7 := new(bool)
		if !r.InputFirehose.CaptureHeaders.IsUnknown() && !r.InputFirehose.CaptureHeaders.IsNull() {
			*captureHeaders7 = r.InputFirehose.CaptureHeaders.ValueBool()
		} else {
			captureHeaders7 = nil
		}
		activityLogSampleRate7 := new(float64)
		if !r.InputFirehose.ActivityLogSampleRate.IsUnknown() && !r.InputFirehose.ActivityLogSampleRate.IsNull() {
			*activityLogSampleRate7 = r.InputFirehose.ActivityLogSampleRate.ValueFloat64()
		} else {
			activityLogSampleRate7 = nil
		}
		requestTimeout15 := new(float64)
		if !r.InputFirehose.RequestTimeout.IsUnknown() && !r.InputFirehose.RequestTimeout.IsNull() {
			*requestTimeout15 = r.InputFirehose.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout15 = nil
		}
		socketTimeout7 := new(float64)
		if !r.InputFirehose.SocketTimeout.IsUnknown() && !r.InputFirehose.SocketTimeout.IsNull() {
			*socketTimeout7 = r.InputFirehose.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout7 = nil
		}
		keepAliveTimeout7 := new(float64)
		if !r.InputFirehose.KeepAliveTimeout.IsUnknown() && !r.InputFirehose.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout7 = r.InputFirehose.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout7 = nil
		}
		enableHealthCheck7 := new(bool)
		if !r.InputFirehose.EnableHealthCheck.IsUnknown() && !r.InputFirehose.EnableHealthCheck.IsNull() {
			*enableHealthCheck7 = r.InputFirehose.EnableHealthCheck.ValueBool()
		} else {
			enableHealthCheck7 = nil
		}
		ipAllowlistRegex7 := new(string)
		if !r.InputFirehose.IPAllowlistRegex.IsUnknown() && !r.InputFirehose.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex7 = r.InputFirehose.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex7 = nil
		}
		ipDenylistRegex7 := new(string)
		if !r.InputFirehose.IPDenylistRegex.IsUnknown() && !r.InputFirehose.IPDenylistRegex.IsNull() {
			*ipDenylistRegex7 = r.InputFirehose.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex7 = nil
		}
		metadata23 := make([]shared.InputFirehoseMetadata, 0, len(r.InputFirehose.Metadata))
		for _, metadataItem23 := range r.InputFirehose.Metadata {
			var name42 string
			name42 = metadataItem23.Name.ValueString()

			var value40 string
			value40 = metadataItem23.Value.ValueString()

			metadata23 = append(metadata23, shared.InputFirehoseMetadata{
				Name:  name42,
				Value: value40,
			})
		}
		description26 := new(string)
		if !r.InputFirehose.Description.IsUnknown() && !r.InputFirehose.Description.IsNull() {
			*description26 = r.InputFirehose.Description.ValueString()
		} else {
			description26 = nil
		}
		var status21 *shared.TFStatus
		if r.InputFirehose.Status != nil {
			health21 := shared.Health(r.InputFirehose.Status.Health.ValueString())
			metrics21 := make(map[string]interface{})
			for metricsKey21, metricsValue21 := range r.InputFirehose.Status.Metrics {
				var metricsInst21 interface{}
				_ = json.Unmarshal([]byte(metricsValue21.ValueString()), &metricsInst21)
				metrics21[metricsKey21] = metricsInst21
			}
			var timestamp21 float64
			timestamp21 = r.InputFirehose.Status.Timestamp.ValueFloat64()

			useStatusFromLb21 := new(bool)
			if !r.InputFirehose.Status.UseStatusFromLB.IsUnknown() && !r.InputFirehose.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb21 = r.InputFirehose.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb21 = nil
			}
			status21 = &shared.TFStatus{
				Health:          health21,
				Metrics:         metrics21,
				Timestamp:       timestamp21,
				UseStatusFromLB: useStatusFromLb21,
			}
		}
		inputFirehose = &shared.InputFirehose{
			ID:                    id21,
			Type:                  typeVar25,
			Disabled:              disabled46,
			Pipeline:              pipeline42,
			SendToRoutes:          sendToRoutes21,
			Environment:           environment21,
			PqEnabled:             pqEnabled21,
			Streamtags:            streamtags21,
			Connections:           connections21,
			Pq:                    pq21,
			Host:                  host9,
			Port:                  port9,
			AuthTokens:            authTokens4,
			TLS:                   tls15,
			MaxActiveReq:          maxActiveReq7,
			MaxRequestsPerSocket:  maxRequestsPerSocket7,
			EnableProxyHeader:     enableProxyHeader8,
			CaptureHeaders:        captureHeaders7,
			ActivityLogSampleRate: activityLogSampleRate7,
			RequestTimeout:        requestTimeout15,
			SocketTimeout:         socketTimeout7,
			KeepAliveTimeout:      keepAliveTimeout7,
			EnableHealthCheck:     enableHealthCheck7,
			IPAllowlistRegex:      ipAllowlistRegex7,
			IPDenylistRegex:       ipDenylistRegex7,
			Metadata:              metadata23,
			Description:           description26,
			Status:                status21,
		}
	}
	if inputFirehose != nil {
		out = shared.Input{
			InputFirehose: inputFirehose,
		}
	}
	var inputGooglePubsub *shared.InputGooglePubsub
	if r.InputGooglePubsub != nil {
		id22 := new(string)
		if !r.InputGooglePubsub.ID.IsUnknown() && !r.InputGooglePubsub.ID.IsNull() {
			*id22 = r.InputGooglePubsub.ID.ValueString()
		} else {
			id22 = nil
		}
		typeVar26 := new(shared.InputGooglePubsubType)
		if !r.InputGooglePubsub.Type.IsUnknown() && !r.InputGooglePubsub.Type.IsNull() {
			*typeVar26 = shared.InputGooglePubsubType(r.InputGooglePubsub.Type.ValueString())
		} else {
			typeVar26 = nil
		}
		disabled48 := new(bool)
		if !r.InputGooglePubsub.Disabled.IsUnknown() && !r.InputGooglePubsub.Disabled.IsNull() {
			*disabled48 = r.InputGooglePubsub.Disabled.ValueBool()
		} else {
			disabled48 = nil
		}
		pipeline44 := new(string)
		if !r.InputGooglePubsub.Pipeline.IsUnknown() && !r.InputGooglePubsub.Pipeline.IsNull() {
			*pipeline44 = r.InputGooglePubsub.Pipeline.ValueString()
		} else {
			pipeline44 = nil
		}
		sendToRoutes22 := new(bool)
		if !r.InputGooglePubsub.SendToRoutes.IsUnknown() && !r.InputGooglePubsub.SendToRoutes.IsNull() {
			*sendToRoutes22 = r.InputGooglePubsub.SendToRoutes.ValueBool()
		} else {
			sendToRoutes22 = nil
		}
		environment22 := new(string)
		if !r.InputGooglePubsub.Environment.IsUnknown() && !r.InputGooglePubsub.Environment.IsNull() {
			*environment22 = r.InputGooglePubsub.Environment.ValueString()
		} else {
			environment22 = nil
		}
		pqEnabled22 := new(bool)
		if !r.InputGooglePubsub.PqEnabled.IsUnknown() && !r.InputGooglePubsub.PqEnabled.IsNull() {
			*pqEnabled22 = r.InputGooglePubsub.PqEnabled.ValueBool()
		} else {
			pqEnabled22 = nil
		}
		streamtags22 := make([]string, 0, len(r.InputGooglePubsub.Streamtags))
		for _, streamtagsItem22 := range r.InputGooglePubsub.Streamtags {
			streamtags22 = append(streamtags22, streamtagsItem22.ValueString())
		}
		connections22 := make([]shared.InputGooglePubsubConnections, 0, len(r.InputGooglePubsub.Connections))
		for _, connectionsItem22 := range r.InputGooglePubsub.Connections {
			pipeline45 := new(string)
			if !connectionsItem22.Pipeline.IsUnknown() && !connectionsItem22.Pipeline.IsNull() {
				*pipeline45 = connectionsItem22.Pipeline.ValueString()
			} else {
				pipeline45 = nil
			}
			var output23 string
			output23 = connectionsItem22.Output.ValueString()

			connections22 = append(connections22, shared.InputGooglePubsubConnections{
				Pipeline: pipeline45,
				Output:   output23,
			})
		}
		var pq22 *shared.InputGooglePubsubPq
		if r.InputGooglePubsub.Pq != nil {
			mode22 := new(shared.InputGooglePubsubMode)
			if !r.InputGooglePubsub.Pq.Mode.IsUnknown() && !r.InputGooglePubsub.Pq.Mode.IsNull() {
				*mode22 = shared.InputGooglePubsubMode(r.InputGooglePubsub.Pq.Mode.ValueString())
			} else {
				mode22 = nil
			}
			maxBufferSize22 := new(float64)
			if !r.InputGooglePubsub.Pq.MaxBufferSize.IsUnknown() && !r.InputGooglePubsub.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize22 = r.InputGooglePubsub.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize22 = nil
			}
			commitFrequency22 := new(float64)
			if !r.InputGooglePubsub.Pq.CommitFrequency.IsUnknown() && !r.InputGooglePubsub.Pq.CommitFrequency.IsNull() {
				*commitFrequency22 = r.InputGooglePubsub.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency22 = nil
			}
			maxFileSize22 := new(string)
			if !r.InputGooglePubsub.Pq.MaxFileSize.IsUnknown() && !r.InputGooglePubsub.Pq.MaxFileSize.IsNull() {
				*maxFileSize22 = r.InputGooglePubsub.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize22 = nil
			}
			maxSize22 := new(string)
			if !r.InputGooglePubsub.Pq.MaxSize.IsUnknown() && !r.InputGooglePubsub.Pq.MaxSize.IsNull() {
				*maxSize22 = r.InputGooglePubsub.Pq.MaxSize.ValueString()
			} else {
				maxSize22 = nil
			}
			path23 := new(string)
			if !r.InputGooglePubsub.Pq.Path.IsUnknown() && !r.InputGooglePubsub.Pq.Path.IsNull() {
				*path23 = r.InputGooglePubsub.Pq.Path.ValueString()
			} else {
				path23 = nil
			}
			compress24 := new(shared.InputGooglePubsubCompression)
			if !r.InputGooglePubsub.Pq.Compress.IsUnknown() && !r.InputGooglePubsub.Pq.Compress.IsNull() {
				*compress24 = shared.InputGooglePubsubCompression(r.InputGooglePubsub.Pq.Compress.ValueString())
			} else {
				compress24 = nil
			}
			pq22 = &shared.InputGooglePubsubPq{
				Mode:            mode22,
				MaxBufferSize:   maxBufferSize22,
				CommitFrequency: commitFrequency22,
				MaxFileSize:     maxFileSize22,
				MaxSize:         maxSize22,
				Path:            path23,
				Compress:        compress24,
			}
		}
		var topicName string
		topicName = r.InputGooglePubsub.TopicName.ValueString()

		var subscriptionName string
		subscriptionName = r.InputGooglePubsub.SubscriptionName.ValueString()

		createTopic := new(bool)
		if !r.InputGooglePubsub.CreateTopic.IsUnknown() && !r.InputGooglePubsub.CreateTopic.IsNull() {
			*createTopic = r.InputGooglePubsub.CreateTopic.ValueBool()
		} else {
			createTopic = nil
		}
		createSubscription := new(bool)
		if !r.InputGooglePubsub.CreateSubscription.IsUnknown() && !r.InputGooglePubsub.CreateSubscription.IsNull() {
			*createSubscription = r.InputGooglePubsub.CreateSubscription.ValueBool()
		} else {
			createSubscription = nil
		}
		region3 := new(string)
		if !r.InputGooglePubsub.Region.IsUnknown() && !r.InputGooglePubsub.Region.IsNull() {
			*region3 = r.InputGooglePubsub.Region.ValueString()
		} else {
			region3 = nil
		}
		googleAuthMethod := new(shared.InputGooglePubsubAuthenticationMethod)
		if !r.InputGooglePubsub.GoogleAuthMethod.IsUnknown() && !r.InputGooglePubsub.GoogleAuthMethod.IsNull() {
			*googleAuthMethod = shared.InputGooglePubsubAuthenticationMethod(r.InputGooglePubsub.GoogleAuthMethod.ValueString())
		} else {
			googleAuthMethod = nil
		}
		serviceAccountCredentials := new(string)
		if !r.InputGooglePubsub.ServiceAccountCredentials.IsUnknown() && !r.InputGooglePubsub.ServiceAccountCredentials.IsNull() {
			*serviceAccountCredentials = r.InputGooglePubsub.ServiceAccountCredentials.ValueString()
		} else {
			serviceAccountCredentials = nil
		}
		secret7 := new(string)
		if !r.InputGooglePubsub.Secret.IsUnknown() && !r.InputGooglePubsub.Secret.IsNull() {
			*secret7 = r.InputGooglePubsub.Secret.ValueString()
		} else {
			secret7 = nil
		}
		maxBacklog := new(float64)
		if !r.InputGooglePubsub.MaxBacklog.IsUnknown() && !r.InputGooglePubsub.MaxBacklog.IsNull() {
			*maxBacklog = r.InputGooglePubsub.MaxBacklog.ValueFloat64()
		} else {
			maxBacklog = nil
		}
		concurrency := new(float64)
		if !r.InputGooglePubsub.Concurrency.IsUnknown() && !r.InputGooglePubsub.Concurrency.IsNull() {
			*concurrency = r.InputGooglePubsub.Concurrency.ValueFloat64()
		} else {
			concurrency = nil
		}
		requestTimeout16 := new(float64)
		if !r.InputGooglePubsub.RequestTimeout.IsUnknown() && !r.InputGooglePubsub.RequestTimeout.IsNull() {
			*requestTimeout16 = r.InputGooglePubsub.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout16 = nil
		}
		metadata24 := make([]shared.InputGooglePubsubMetadata, 0, len(r.InputGooglePubsub.Metadata))
		for _, metadataItem24 := range r.InputGooglePubsub.Metadata {
			var name43 string
			name43 = metadataItem24.Name.ValueString()

			var value41 string
			value41 = metadataItem24.Value.ValueString()

			metadata24 = append(metadata24, shared.InputGooglePubsubMetadata{
				Name:  name43,
				Value: value41,
			})
		}
		description27 := new(string)
		if !r.InputGooglePubsub.Description.IsUnknown() && !r.InputGooglePubsub.Description.IsNull() {
			*description27 = r.InputGooglePubsub.Description.ValueString()
		} else {
			description27 = nil
		}
		orderedDelivery := new(bool)
		if !r.InputGooglePubsub.OrderedDelivery.IsUnknown() && !r.InputGooglePubsub.OrderedDelivery.IsNull() {
			*orderedDelivery = r.InputGooglePubsub.OrderedDelivery.ValueBool()
		} else {
			orderedDelivery = nil
		}
		var status22 *shared.TFStatus
		if r.InputGooglePubsub.Status != nil {
			health22 := shared.Health(r.InputGooglePubsub.Status.Health.ValueString())
			metrics22 := make(map[string]interface{})
			for metricsKey22, metricsValue22 := range r.InputGooglePubsub.Status.Metrics {
				var metricsInst22 interface{}
				_ = json.Unmarshal([]byte(metricsValue22.ValueString()), &metricsInst22)
				metrics22[metricsKey22] = metricsInst22
			}
			var timestamp22 float64
			timestamp22 = r.InputGooglePubsub.Status.Timestamp.ValueFloat64()

			useStatusFromLb22 := new(bool)
			if !r.InputGooglePubsub.Status.UseStatusFromLB.IsUnknown() && !r.InputGooglePubsub.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb22 = r.InputGooglePubsub.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb22 = nil
			}
			status22 = &shared.TFStatus{
				Health:          health22,
				Metrics:         metrics22,
				Timestamp:       timestamp22,
				UseStatusFromLB: useStatusFromLb22,
			}
		}
		inputGooglePubsub = &shared.InputGooglePubsub{
			ID:                        id22,
			Type:                      typeVar26,
			Disabled:                  disabled48,
			Pipeline:                  pipeline44,
			SendToRoutes:              sendToRoutes22,
			Environment:               environment22,
			PqEnabled:                 pqEnabled22,
			Streamtags:                streamtags22,
			Connections:               connections22,
			Pq:                        pq22,
			TopicName:                 topicName,
			SubscriptionName:          subscriptionName,
			CreateTopic:               createTopic,
			CreateSubscription:        createSubscription,
			Region:                    region3,
			GoogleAuthMethod:          googleAuthMethod,
			ServiceAccountCredentials: serviceAccountCredentials,
			Secret:                    secret7,
			MaxBacklog:                maxBacklog,
			Concurrency:               concurrency,
			RequestTimeout:            requestTimeout16,
			Metadata:                  metadata24,
			Description:               description27,
			OrderedDelivery:           orderedDelivery,
			Status:                    status22,
		}
	}
	if inputGooglePubsub != nil {
		out = shared.Input{
			InputGooglePubsub: inputGooglePubsub,
		}
	}
	var inputCribl *shared.InputCribl
	if r.InputCribl != nil {
		var id23 string
		id23 = r.InputCribl.ID.ValueString()

		typeVar27 := shared.InputCriblType(r.InputCribl.Type.ValueString())
		disabled49 := new(bool)
		if !r.InputCribl.Disabled.IsUnknown() && !r.InputCribl.Disabled.IsNull() {
			*disabled49 = r.InputCribl.Disabled.ValueBool()
		} else {
			disabled49 = nil
		}
		pipeline46 := new(string)
		if !r.InputCribl.Pipeline.IsUnknown() && !r.InputCribl.Pipeline.IsNull() {
			*pipeline46 = r.InputCribl.Pipeline.ValueString()
		} else {
			pipeline46 = nil
		}
		sendToRoutes23 := new(bool)
		if !r.InputCribl.SendToRoutes.IsUnknown() && !r.InputCribl.SendToRoutes.IsNull() {
			*sendToRoutes23 = r.InputCribl.SendToRoutes.ValueBool()
		} else {
			sendToRoutes23 = nil
		}
		environment23 := new(string)
		if !r.InputCribl.Environment.IsUnknown() && !r.InputCribl.Environment.IsNull() {
			*environment23 = r.InputCribl.Environment.ValueString()
		} else {
			environment23 = nil
		}
		pqEnabled23 := new(bool)
		if !r.InputCribl.PqEnabled.IsUnknown() && !r.InputCribl.PqEnabled.IsNull() {
			*pqEnabled23 = r.InputCribl.PqEnabled.ValueBool()
		} else {
			pqEnabled23 = nil
		}
		streamtags23 := make([]string, 0, len(r.InputCribl.Streamtags))
		for _, streamtagsItem23 := range r.InputCribl.Streamtags {
			streamtags23 = append(streamtags23, streamtagsItem23.ValueString())
		}
		connections23 := make([]shared.InputCriblConnections, 0, len(r.InputCribl.Connections))
		for _, connectionsItem23 := range r.InputCribl.Connections {
			pipeline47 := new(string)
			if !connectionsItem23.Pipeline.IsUnknown() && !connectionsItem23.Pipeline.IsNull() {
				*pipeline47 = connectionsItem23.Pipeline.ValueString()
			} else {
				pipeline47 = nil
			}
			var output24 string
			output24 = connectionsItem23.Output.ValueString()

			connections23 = append(connections23, shared.InputCriblConnections{
				Pipeline: pipeline47,
				Output:   output24,
			})
		}
		var pq23 *shared.InputCriblPq
		if r.InputCribl.Pq != nil {
			mode23 := new(shared.InputCriblMode)
			if !r.InputCribl.Pq.Mode.IsUnknown() && !r.InputCribl.Pq.Mode.IsNull() {
				*mode23 = shared.InputCriblMode(r.InputCribl.Pq.Mode.ValueString())
			} else {
				mode23 = nil
			}
			maxBufferSize23 := new(float64)
			if !r.InputCribl.Pq.MaxBufferSize.IsUnknown() && !r.InputCribl.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize23 = r.InputCribl.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize23 = nil
			}
			commitFrequency23 := new(float64)
			if !r.InputCribl.Pq.CommitFrequency.IsUnknown() && !r.InputCribl.Pq.CommitFrequency.IsNull() {
				*commitFrequency23 = r.InputCribl.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency23 = nil
			}
			maxFileSize23 := new(string)
			if !r.InputCribl.Pq.MaxFileSize.IsUnknown() && !r.InputCribl.Pq.MaxFileSize.IsNull() {
				*maxFileSize23 = r.InputCribl.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize23 = nil
			}
			maxSize23 := new(string)
			if !r.InputCribl.Pq.MaxSize.IsUnknown() && !r.InputCribl.Pq.MaxSize.IsNull() {
				*maxSize23 = r.InputCribl.Pq.MaxSize.ValueString()
			} else {
				maxSize23 = nil
			}
			path24 := new(string)
			if !r.InputCribl.Pq.Path.IsUnknown() && !r.InputCribl.Pq.Path.IsNull() {
				*path24 = r.InputCribl.Pq.Path.ValueString()
			} else {
				path24 = nil
			}
			compress25 := new(shared.InputCriblCompression)
			if !r.InputCribl.Pq.Compress.IsUnknown() && !r.InputCribl.Pq.Compress.IsNull() {
				*compress25 = shared.InputCriblCompression(r.InputCribl.Pq.Compress.ValueString())
			} else {
				compress25 = nil
			}
			pq23 = &shared.InputCriblPq{
				Mode:            mode23,
				MaxBufferSize:   maxBufferSize23,
				CommitFrequency: commitFrequency23,
				MaxFileSize:     maxFileSize23,
				MaxSize:         maxSize23,
				Path:            path24,
				Compress:        compress25,
			}
		}
		filter1 := new(string)
		if !r.InputCribl.Filter.IsUnknown() && !r.InputCribl.Filter.IsNull() {
			*filter1 = r.InputCribl.Filter.ValueString()
		} else {
			filter1 = nil
		}
		metadata25 := make([]shared.InputCriblMetadata, 0, len(r.InputCribl.Metadata))
		for _, metadataItem25 := range r.InputCribl.Metadata {
			var name44 string
			name44 = metadataItem25.Name.ValueString()

			var value42 string
			value42 = metadataItem25.Value.ValueString()

			metadata25 = append(metadata25, shared.InputCriblMetadata{
				Name:  name44,
				Value: value42,
			})
		}
		description28 := new(string)
		if !r.InputCribl.Description.IsUnknown() && !r.InputCribl.Description.IsNull() {
			*description28 = r.InputCribl.Description.ValueString()
		} else {
			description28 = nil
		}
		var status23 *shared.TFStatus
		if r.InputCribl.Status != nil {
			health23 := shared.Health(r.InputCribl.Status.Health.ValueString())
			metrics23 := make(map[string]interface{})
			for metricsKey23, metricsValue23 := range r.InputCribl.Status.Metrics {
				var metricsInst23 interface{}
				_ = json.Unmarshal([]byte(metricsValue23.ValueString()), &metricsInst23)
				metrics23[metricsKey23] = metricsInst23
			}
			var timestamp23 float64
			timestamp23 = r.InputCribl.Status.Timestamp.ValueFloat64()

			useStatusFromLb23 := new(bool)
			if !r.InputCribl.Status.UseStatusFromLB.IsUnknown() && !r.InputCribl.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb23 = r.InputCribl.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb23 = nil
			}
			status23 = &shared.TFStatus{
				Health:          health23,
				Metrics:         metrics23,
				Timestamp:       timestamp23,
				UseStatusFromLB: useStatusFromLb23,
			}
		}
		inputCribl = &shared.InputCribl{
			ID:           id23,
			Type:         typeVar27,
			Disabled:     disabled49,
			Pipeline:     pipeline46,
			SendToRoutes: sendToRoutes23,
			Environment:  environment23,
			PqEnabled:    pqEnabled23,
			Streamtags:   streamtags23,
			Connections:  connections23,
			Pq:           pq23,
			Filter:       filter1,
			Metadata:     metadata25,
			Description:  description28,
			Status:       status23,
		}
	}
	if inputCribl != nil {
		out = shared.Input{
			InputCribl: inputCribl,
		}
	}
	var inputCriblTCP *shared.InputCriblTCP
	if r.InputCriblTCP != nil {
		id24 := new(string)
		if !r.InputCriblTCP.ID.IsUnknown() && !r.InputCriblTCP.ID.IsNull() {
			*id24 = r.InputCriblTCP.ID.ValueString()
		} else {
			id24 = nil
		}
		typeVar28 := new(shared.InputCriblTCPType)
		if !r.InputCriblTCP.Type.IsUnknown() && !r.InputCriblTCP.Type.IsNull() {
			*typeVar28 = shared.InputCriblTCPType(r.InputCriblTCP.Type.ValueString())
		} else {
			typeVar28 = nil
		}
		disabled50 := new(bool)
		if !r.InputCriblTCP.Disabled.IsUnknown() && !r.InputCriblTCP.Disabled.IsNull() {
			*disabled50 = r.InputCriblTCP.Disabled.ValueBool()
		} else {
			disabled50 = nil
		}
		pipeline48 := new(string)
		if !r.InputCriblTCP.Pipeline.IsUnknown() && !r.InputCriblTCP.Pipeline.IsNull() {
			*pipeline48 = r.InputCriblTCP.Pipeline.ValueString()
		} else {
			pipeline48 = nil
		}
		sendToRoutes24 := new(bool)
		if !r.InputCriblTCP.SendToRoutes.IsUnknown() && !r.InputCriblTCP.SendToRoutes.IsNull() {
			*sendToRoutes24 = r.InputCriblTCP.SendToRoutes.ValueBool()
		} else {
			sendToRoutes24 = nil
		}
		environment24 := new(string)
		if !r.InputCriblTCP.Environment.IsUnknown() && !r.InputCriblTCP.Environment.IsNull() {
			*environment24 = r.InputCriblTCP.Environment.ValueString()
		} else {
			environment24 = nil
		}
		pqEnabled24 := new(bool)
		if !r.InputCriblTCP.PqEnabled.IsUnknown() && !r.InputCriblTCP.PqEnabled.IsNull() {
			*pqEnabled24 = r.InputCriblTCP.PqEnabled.ValueBool()
		} else {
			pqEnabled24 = nil
		}
		streamtags24 := make([]string, 0, len(r.InputCriblTCP.Streamtags))
		for _, streamtagsItem24 := range r.InputCriblTCP.Streamtags {
			streamtags24 = append(streamtags24, streamtagsItem24.ValueString())
		}
		connections24 := make([]shared.InputCriblTCPConnections, 0, len(r.InputCriblTCP.Connections))
		for _, connectionsItem24 := range r.InputCriblTCP.Connections {
			pipeline49 := new(string)
			if !connectionsItem24.Pipeline.IsUnknown() && !connectionsItem24.Pipeline.IsNull() {
				*pipeline49 = connectionsItem24.Pipeline.ValueString()
			} else {
				pipeline49 = nil
			}
			var output25 string
			output25 = connectionsItem24.Output.ValueString()

			connections24 = append(connections24, shared.InputCriblTCPConnections{
				Pipeline: pipeline49,
				Output:   output25,
			})
		}
		var pq24 *shared.InputCriblTCPPq
		if r.InputCriblTCP.Pq != nil {
			mode24 := new(shared.InputCriblTCPMode)
			if !r.InputCriblTCP.Pq.Mode.IsUnknown() && !r.InputCriblTCP.Pq.Mode.IsNull() {
				*mode24 = shared.InputCriblTCPMode(r.InputCriblTCP.Pq.Mode.ValueString())
			} else {
				mode24 = nil
			}
			maxBufferSize24 := new(float64)
			if !r.InputCriblTCP.Pq.MaxBufferSize.IsUnknown() && !r.InputCriblTCP.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize24 = r.InputCriblTCP.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize24 = nil
			}
			commitFrequency24 := new(float64)
			if !r.InputCriblTCP.Pq.CommitFrequency.IsUnknown() && !r.InputCriblTCP.Pq.CommitFrequency.IsNull() {
				*commitFrequency24 = r.InputCriblTCP.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency24 = nil
			}
			maxFileSize24 := new(string)
			if !r.InputCriblTCP.Pq.MaxFileSize.IsUnknown() && !r.InputCriblTCP.Pq.MaxFileSize.IsNull() {
				*maxFileSize24 = r.InputCriblTCP.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize24 = nil
			}
			maxSize24 := new(string)
			if !r.InputCriblTCP.Pq.MaxSize.IsUnknown() && !r.InputCriblTCP.Pq.MaxSize.IsNull() {
				*maxSize24 = r.InputCriblTCP.Pq.MaxSize.ValueString()
			} else {
				maxSize24 = nil
			}
			path25 := new(string)
			if !r.InputCriblTCP.Pq.Path.IsUnknown() && !r.InputCriblTCP.Pq.Path.IsNull() {
				*path25 = r.InputCriblTCP.Pq.Path.ValueString()
			} else {
				path25 = nil
			}
			compress26 := new(shared.InputCriblTCPCompression)
			if !r.InputCriblTCP.Pq.Compress.IsUnknown() && !r.InputCriblTCP.Pq.Compress.IsNull() {
				*compress26 = shared.InputCriblTCPCompression(r.InputCriblTCP.Pq.Compress.ValueString())
			} else {
				compress26 = nil
			}
			pq24 = &shared.InputCriblTCPPq{
				Mode:            mode24,
				MaxBufferSize:   maxBufferSize24,
				CommitFrequency: commitFrequency24,
				MaxFileSize:     maxFileSize24,
				MaxSize:         maxSize24,
				Path:            path25,
				Compress:        compress26,
			}
		}
		host10 := new(string)
		if !r.InputCriblTCP.Host.IsUnknown() && !r.InputCriblTCP.Host.IsNull() {
			*host10 = r.InputCriblTCP.Host.ValueString()
		} else {
			host10 = nil
		}
		var port10 float64
		port10 = r.InputCriblTCP.Port.ValueFloat64()

		var tls16 *shared.InputCriblTCPTLSSettingsServerSide
		if r.InputCriblTCP.TLS != nil {
			disabled51 := new(bool)
			if !r.InputCriblTCP.TLS.Disabled.IsUnknown() && !r.InputCriblTCP.TLS.Disabled.IsNull() {
				*disabled51 = r.InputCriblTCP.TLS.Disabled.ValueBool()
			} else {
				disabled51 = nil
			}
			certificateName17 := new(string)
			if !r.InputCriblTCP.TLS.CertificateName.IsUnknown() && !r.InputCriblTCP.TLS.CertificateName.IsNull() {
				*certificateName17 = r.InputCriblTCP.TLS.CertificateName.ValueString()
			} else {
				certificateName17 = nil
			}
			privKeyPath16 := new(string)
			if !r.InputCriblTCP.TLS.PrivKeyPath.IsUnknown() && !r.InputCriblTCP.TLS.PrivKeyPath.IsNull() {
				*privKeyPath16 = r.InputCriblTCP.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath16 = nil
			}
			passphrase16 := new(string)
			if !r.InputCriblTCP.TLS.Passphrase.IsUnknown() && !r.InputCriblTCP.TLS.Passphrase.IsNull() {
				*passphrase16 = r.InputCriblTCP.TLS.Passphrase.ValueString()
			} else {
				passphrase16 = nil
			}
			certPath16 := new(string)
			if !r.InputCriblTCP.TLS.CertPath.IsUnknown() && !r.InputCriblTCP.TLS.CertPath.IsNull() {
				*certPath16 = r.InputCriblTCP.TLS.CertPath.ValueString()
			} else {
				certPath16 = nil
			}
			caPath15 := new(string)
			if !r.InputCriblTCP.TLS.CaPath.IsUnknown() && !r.InputCriblTCP.TLS.CaPath.IsNull() {
				*caPath15 = r.InputCriblTCP.TLS.CaPath.ValueString()
			} else {
				caPath15 = nil
			}
			requestCert9 := new(bool)
			if !r.InputCriblTCP.TLS.RequestCert.IsUnknown() && !r.InputCriblTCP.TLS.RequestCert.IsNull() {
				*requestCert9 = r.InputCriblTCP.TLS.RequestCert.ValueBool()
			} else {
				requestCert9 = nil
			}
			var rejectUnauthorized21 interface{}
			if !r.InputCriblTCP.TLS.RejectUnauthorized.IsUnknown() && !r.InputCriblTCP.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputCriblTCP.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized21)
			}
			var commonNameRegex9 interface{}
			if !r.InputCriblTCP.TLS.CommonNameRegex.IsUnknown() && !r.InputCriblTCP.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputCriblTCP.TLS.CommonNameRegex.ValueString()), &commonNameRegex9)
			}
			minVersion15 := new(shared.InputCriblTCPMinimumTLSVersion)
			if !r.InputCriblTCP.TLS.MinVersion.IsUnknown() && !r.InputCriblTCP.TLS.MinVersion.IsNull() {
				*minVersion15 = shared.InputCriblTCPMinimumTLSVersion(r.InputCriblTCP.TLS.MinVersion.ValueString())
			} else {
				minVersion15 = nil
			}
			maxVersion15 := new(shared.InputCriblTCPMaximumTLSVersion)
			if !r.InputCriblTCP.TLS.MaxVersion.IsUnknown() && !r.InputCriblTCP.TLS.MaxVersion.IsNull() {
				*maxVersion15 = shared.InputCriblTCPMaximumTLSVersion(r.InputCriblTCP.TLS.MaxVersion.ValueString())
			} else {
				maxVersion15 = nil
			}
			tls16 = &shared.InputCriblTCPTLSSettingsServerSide{
				Disabled:           disabled51,
				CertificateName:    certificateName17,
				PrivKeyPath:        privKeyPath16,
				Passphrase:         passphrase16,
				CertPath:           certPath16,
				CaPath:             caPath15,
				RequestCert:        requestCert9,
				RejectUnauthorized: rejectUnauthorized21,
				CommonNameRegex:    commonNameRegex9,
				MinVersion:         minVersion15,
				MaxVersion:         maxVersion15,
			}
		}
		maxActiveCxn1 := new(float64)
		if !r.InputCriblTCP.MaxActiveCxn.IsUnknown() && !r.InputCriblTCP.MaxActiveCxn.IsNull() {
			*maxActiveCxn1 = r.InputCriblTCP.MaxActiveCxn.ValueFloat64()
		} else {
			maxActiveCxn1 = nil
		}
		socketIdleTimeout1 := new(float64)
		if !r.InputCriblTCP.SocketIdleTimeout.IsUnknown() && !r.InputCriblTCP.SocketIdleTimeout.IsNull() {
			*socketIdleTimeout1 = r.InputCriblTCP.SocketIdleTimeout.ValueFloat64()
		} else {
			socketIdleTimeout1 = nil
		}
		socketEndingMaxWait1 := new(float64)
		if !r.InputCriblTCP.SocketEndingMaxWait.IsUnknown() && !r.InputCriblTCP.SocketEndingMaxWait.IsNull() {
			*socketEndingMaxWait1 = r.InputCriblTCP.SocketEndingMaxWait.ValueFloat64()
		} else {
			socketEndingMaxWait1 = nil
		}
		socketMaxLifespan1 := new(float64)
		if !r.InputCriblTCP.SocketMaxLifespan.IsUnknown() && !r.InputCriblTCP.SocketMaxLifespan.IsNull() {
			*socketMaxLifespan1 = r.InputCriblTCP.SocketMaxLifespan.ValueFloat64()
		} else {
			socketMaxLifespan1 = nil
		}
		enableProxyHeader9 := new(bool)
		if !r.InputCriblTCP.EnableProxyHeader.IsUnknown() && !r.InputCriblTCP.EnableProxyHeader.IsNull() {
			*enableProxyHeader9 = r.InputCriblTCP.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader9 = nil
		}
		metadata26 := make([]shared.InputCriblTCPMetadata, 0, len(r.InputCriblTCP.Metadata))
		for _, metadataItem26 := range r.InputCriblTCP.Metadata {
			var name45 string
			name45 = metadataItem26.Name.ValueString()

			var value43 string
			value43 = metadataItem26.Value.ValueString()

			metadata26 = append(metadata26, shared.InputCriblTCPMetadata{
				Name:  name45,
				Value: value43,
			})
		}
		enableLoadBalancing := new(bool)
		if !r.InputCriblTCP.EnableLoadBalancing.IsUnknown() && !r.InputCriblTCP.EnableLoadBalancing.IsNull() {
			*enableLoadBalancing = r.InputCriblTCP.EnableLoadBalancing.ValueBool()
		} else {
			enableLoadBalancing = nil
		}
		description29 := new(string)
		if !r.InputCriblTCP.Description.IsUnknown() && !r.InputCriblTCP.Description.IsNull() {
			*description29 = r.InputCriblTCP.Description.ValueString()
		} else {
			description29 = nil
		}
		var status24 *shared.TFStatus
		if r.InputCriblTCP.Status != nil {
			health24 := shared.Health(r.InputCriblTCP.Status.Health.ValueString())
			metrics24 := make(map[string]interface{})
			for metricsKey24, metricsValue24 := range r.InputCriblTCP.Status.Metrics {
				var metricsInst24 interface{}
				_ = json.Unmarshal([]byte(metricsValue24.ValueString()), &metricsInst24)
				metrics24[metricsKey24] = metricsInst24
			}
			var timestamp24 float64
			timestamp24 = r.InputCriblTCP.Status.Timestamp.ValueFloat64()

			useStatusFromLb24 := new(bool)
			if !r.InputCriblTCP.Status.UseStatusFromLB.IsUnknown() && !r.InputCriblTCP.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb24 = r.InputCriblTCP.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb24 = nil
			}
			status24 = &shared.TFStatus{
				Health:          health24,
				Metrics:         metrics24,
				Timestamp:       timestamp24,
				UseStatusFromLB: useStatusFromLb24,
			}
		}
		inputCriblTCP = &shared.InputCriblTCP{
			ID:                  id24,
			Type:                typeVar28,
			Disabled:            disabled50,
			Pipeline:            pipeline48,
			SendToRoutes:        sendToRoutes24,
			Environment:         environment24,
			PqEnabled:           pqEnabled24,
			Streamtags:          streamtags24,
			Connections:         connections24,
			Pq:                  pq24,
			Host:                host10,
			Port:                port10,
			TLS:                 tls16,
			MaxActiveCxn:        maxActiveCxn1,
			SocketIdleTimeout:   socketIdleTimeout1,
			SocketEndingMaxWait: socketEndingMaxWait1,
			SocketMaxLifespan:   socketMaxLifespan1,
			EnableProxyHeader:   enableProxyHeader9,
			Metadata:            metadata26,
			EnableLoadBalancing: enableLoadBalancing,
			Description:         description29,
			Status:              status24,
		}
	}
	if inputCriblTCP != nil {
		out = shared.Input{
			InputCriblTCP: inputCriblTCP,
		}
	}
	var inputCriblHTTP *shared.InputCriblHTTP
	if r.InputCriblHTTP != nil {
		id25 := new(string)
		if !r.InputCriblHTTP.ID.IsUnknown() && !r.InputCriblHTTP.ID.IsNull() {
			*id25 = r.InputCriblHTTP.ID.ValueString()
		} else {
			id25 = nil
		}
		typeVar29 := new(shared.InputCriblHTTPType)
		if !r.InputCriblHTTP.Type.IsUnknown() && !r.InputCriblHTTP.Type.IsNull() {
			*typeVar29 = shared.InputCriblHTTPType(r.InputCriblHTTP.Type.ValueString())
		} else {
			typeVar29 = nil
		}
		disabled52 := new(bool)
		if !r.InputCriblHTTP.Disabled.IsUnknown() && !r.InputCriblHTTP.Disabled.IsNull() {
			*disabled52 = r.InputCriblHTTP.Disabled.ValueBool()
		} else {
			disabled52 = nil
		}
		pipeline50 := new(string)
		if !r.InputCriblHTTP.Pipeline.IsUnknown() && !r.InputCriblHTTP.Pipeline.IsNull() {
			*pipeline50 = r.InputCriblHTTP.Pipeline.ValueString()
		} else {
			pipeline50 = nil
		}
		sendToRoutes25 := new(bool)
		if !r.InputCriblHTTP.SendToRoutes.IsUnknown() && !r.InputCriblHTTP.SendToRoutes.IsNull() {
			*sendToRoutes25 = r.InputCriblHTTP.SendToRoutes.ValueBool()
		} else {
			sendToRoutes25 = nil
		}
		environment25 := new(string)
		if !r.InputCriblHTTP.Environment.IsUnknown() && !r.InputCriblHTTP.Environment.IsNull() {
			*environment25 = r.InputCriblHTTP.Environment.ValueString()
		} else {
			environment25 = nil
		}
		pqEnabled25 := new(bool)
		if !r.InputCriblHTTP.PqEnabled.IsUnknown() && !r.InputCriblHTTP.PqEnabled.IsNull() {
			*pqEnabled25 = r.InputCriblHTTP.PqEnabled.ValueBool()
		} else {
			pqEnabled25 = nil
		}
		streamtags25 := make([]string, 0, len(r.InputCriblHTTP.Streamtags))
		for _, streamtagsItem25 := range r.InputCriblHTTP.Streamtags {
			streamtags25 = append(streamtags25, streamtagsItem25.ValueString())
		}
		connections25 := make([]shared.InputCriblHTTPConnections, 0, len(r.InputCriblHTTP.Connections))
		for _, connectionsItem25 := range r.InputCriblHTTP.Connections {
			pipeline51 := new(string)
			if !connectionsItem25.Pipeline.IsUnknown() && !connectionsItem25.Pipeline.IsNull() {
				*pipeline51 = connectionsItem25.Pipeline.ValueString()
			} else {
				pipeline51 = nil
			}
			var output26 string
			output26 = connectionsItem25.Output.ValueString()

			connections25 = append(connections25, shared.InputCriblHTTPConnections{
				Pipeline: pipeline51,
				Output:   output26,
			})
		}
		var pq25 *shared.InputCriblHTTPPq
		if r.InputCriblHTTP.Pq != nil {
			mode25 := new(shared.InputCriblHTTPMode)
			if !r.InputCriblHTTP.Pq.Mode.IsUnknown() && !r.InputCriblHTTP.Pq.Mode.IsNull() {
				*mode25 = shared.InputCriblHTTPMode(r.InputCriblHTTP.Pq.Mode.ValueString())
			} else {
				mode25 = nil
			}
			maxBufferSize25 := new(float64)
			if !r.InputCriblHTTP.Pq.MaxBufferSize.IsUnknown() && !r.InputCriblHTTP.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize25 = r.InputCriblHTTP.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize25 = nil
			}
			commitFrequency25 := new(float64)
			if !r.InputCriblHTTP.Pq.CommitFrequency.IsUnknown() && !r.InputCriblHTTP.Pq.CommitFrequency.IsNull() {
				*commitFrequency25 = r.InputCriblHTTP.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency25 = nil
			}
			maxFileSize25 := new(string)
			if !r.InputCriblHTTP.Pq.MaxFileSize.IsUnknown() && !r.InputCriblHTTP.Pq.MaxFileSize.IsNull() {
				*maxFileSize25 = r.InputCriblHTTP.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize25 = nil
			}
			maxSize25 := new(string)
			if !r.InputCriblHTTP.Pq.MaxSize.IsUnknown() && !r.InputCriblHTTP.Pq.MaxSize.IsNull() {
				*maxSize25 = r.InputCriblHTTP.Pq.MaxSize.ValueString()
			} else {
				maxSize25 = nil
			}
			path26 := new(string)
			if !r.InputCriblHTTP.Pq.Path.IsUnknown() && !r.InputCriblHTTP.Pq.Path.IsNull() {
				*path26 = r.InputCriblHTTP.Pq.Path.ValueString()
			} else {
				path26 = nil
			}
			compress27 := new(shared.InputCriblHTTPCompression)
			if !r.InputCriblHTTP.Pq.Compress.IsUnknown() && !r.InputCriblHTTP.Pq.Compress.IsNull() {
				*compress27 = shared.InputCriblHTTPCompression(r.InputCriblHTTP.Pq.Compress.ValueString())
			} else {
				compress27 = nil
			}
			pq25 = &shared.InputCriblHTTPPq{
				Mode:            mode25,
				MaxBufferSize:   maxBufferSize25,
				CommitFrequency: commitFrequency25,
				MaxFileSize:     maxFileSize25,
				MaxSize:         maxSize25,
				Path:            path26,
				Compress:        compress27,
			}
		}
		host11 := new(string)
		if !r.InputCriblHTTP.Host.IsUnknown() && !r.InputCriblHTTP.Host.IsNull() {
			*host11 = r.InputCriblHTTP.Host.ValueString()
		} else {
			host11 = nil
		}
		var port11 float64
		port11 = r.InputCriblHTTP.Port.ValueFloat64()

		authTokens5 := make([]string, 0, len(r.InputCriblHTTP.AuthTokens))
		for _, authTokensItem5 := range r.InputCriblHTTP.AuthTokens {
			authTokens5 = append(authTokens5, authTokensItem5.ValueString())
		}
		var tls17 *shared.InputCriblHTTPTLSSettingsServerSide
		if r.InputCriblHTTP.TLS != nil {
			disabled53 := new(bool)
			if !r.InputCriblHTTP.TLS.Disabled.IsUnknown() && !r.InputCriblHTTP.TLS.Disabled.IsNull() {
				*disabled53 = r.InputCriblHTTP.TLS.Disabled.ValueBool()
			} else {
				disabled53 = nil
			}
			certificateName18 := new(string)
			if !r.InputCriblHTTP.TLS.CertificateName.IsUnknown() && !r.InputCriblHTTP.TLS.CertificateName.IsNull() {
				*certificateName18 = r.InputCriblHTTP.TLS.CertificateName.ValueString()
			} else {
				certificateName18 = nil
			}
			privKeyPath17 := new(string)
			if !r.InputCriblHTTP.TLS.PrivKeyPath.IsUnknown() && !r.InputCriblHTTP.TLS.PrivKeyPath.IsNull() {
				*privKeyPath17 = r.InputCriblHTTP.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath17 = nil
			}
			passphrase17 := new(string)
			if !r.InputCriblHTTP.TLS.Passphrase.IsUnknown() && !r.InputCriblHTTP.TLS.Passphrase.IsNull() {
				*passphrase17 = r.InputCriblHTTP.TLS.Passphrase.ValueString()
			} else {
				passphrase17 = nil
			}
			certPath17 := new(string)
			if !r.InputCriblHTTP.TLS.CertPath.IsUnknown() && !r.InputCriblHTTP.TLS.CertPath.IsNull() {
				*certPath17 = r.InputCriblHTTP.TLS.CertPath.ValueString()
			} else {
				certPath17 = nil
			}
			caPath16 := new(string)
			if !r.InputCriblHTTP.TLS.CaPath.IsUnknown() && !r.InputCriblHTTP.TLS.CaPath.IsNull() {
				*caPath16 = r.InputCriblHTTP.TLS.CaPath.ValueString()
			} else {
				caPath16 = nil
			}
			requestCert10 := new(bool)
			if !r.InputCriblHTTP.TLS.RequestCert.IsUnknown() && !r.InputCriblHTTP.TLS.RequestCert.IsNull() {
				*requestCert10 = r.InputCriblHTTP.TLS.RequestCert.ValueBool()
			} else {
				requestCert10 = nil
			}
			var rejectUnauthorized22 interface{}
			if !r.InputCriblHTTP.TLS.RejectUnauthorized.IsUnknown() && !r.InputCriblHTTP.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputCriblHTTP.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized22)
			}
			var commonNameRegex10 interface{}
			if !r.InputCriblHTTP.TLS.CommonNameRegex.IsUnknown() && !r.InputCriblHTTP.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputCriblHTTP.TLS.CommonNameRegex.ValueString()), &commonNameRegex10)
			}
			minVersion16 := new(shared.InputCriblHTTPMinimumTLSVersion)
			if !r.InputCriblHTTP.TLS.MinVersion.IsUnknown() && !r.InputCriblHTTP.TLS.MinVersion.IsNull() {
				*minVersion16 = shared.InputCriblHTTPMinimumTLSVersion(r.InputCriblHTTP.TLS.MinVersion.ValueString())
			} else {
				minVersion16 = nil
			}
			maxVersion16 := new(shared.InputCriblHTTPMaximumTLSVersion)
			if !r.InputCriblHTTP.TLS.MaxVersion.IsUnknown() && !r.InputCriblHTTP.TLS.MaxVersion.IsNull() {
				*maxVersion16 = shared.InputCriblHTTPMaximumTLSVersion(r.InputCriblHTTP.TLS.MaxVersion.ValueString())
			} else {
				maxVersion16 = nil
			}
			tls17 = &shared.InputCriblHTTPTLSSettingsServerSide{
				Disabled:           disabled53,
				CertificateName:    certificateName18,
				PrivKeyPath:        privKeyPath17,
				Passphrase:         passphrase17,
				CertPath:           certPath17,
				CaPath:             caPath16,
				RequestCert:        requestCert10,
				RejectUnauthorized: rejectUnauthorized22,
				CommonNameRegex:    commonNameRegex10,
				MinVersion:         minVersion16,
				MaxVersion:         maxVersion16,
			}
		}
		maxActiveReq8 := new(float64)
		if !r.InputCriblHTTP.MaxActiveReq.IsUnknown() && !r.InputCriblHTTP.MaxActiveReq.IsNull() {
			*maxActiveReq8 = r.InputCriblHTTP.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq8 = nil
		}
		maxRequestsPerSocket8 := new(int64)
		if !r.InputCriblHTTP.MaxRequestsPerSocket.IsUnknown() && !r.InputCriblHTTP.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket8 = r.InputCriblHTTP.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket8 = nil
		}
		enableProxyHeader10 := new(bool)
		if !r.InputCriblHTTP.EnableProxyHeader.IsUnknown() && !r.InputCriblHTTP.EnableProxyHeader.IsNull() {
			*enableProxyHeader10 = r.InputCriblHTTP.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader10 = nil
		}
		captureHeaders8 := new(bool)
		if !r.InputCriblHTTP.CaptureHeaders.IsUnknown() && !r.InputCriblHTTP.CaptureHeaders.IsNull() {
			*captureHeaders8 = r.InputCriblHTTP.CaptureHeaders.ValueBool()
		} else {
			captureHeaders8 = nil
		}
		activityLogSampleRate8 := new(float64)
		if !r.InputCriblHTTP.ActivityLogSampleRate.IsUnknown() && !r.InputCriblHTTP.ActivityLogSampleRate.IsNull() {
			*activityLogSampleRate8 = r.InputCriblHTTP.ActivityLogSampleRate.ValueFloat64()
		} else {
			activityLogSampleRate8 = nil
		}
		requestTimeout17 := new(float64)
		if !r.InputCriblHTTP.RequestTimeout.IsUnknown() && !r.InputCriblHTTP.RequestTimeout.IsNull() {
			*requestTimeout17 = r.InputCriblHTTP.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout17 = nil
		}
		socketTimeout8 := new(float64)
		if !r.InputCriblHTTP.SocketTimeout.IsUnknown() && !r.InputCriblHTTP.SocketTimeout.IsNull() {
			*socketTimeout8 = r.InputCriblHTTP.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout8 = nil
		}
		keepAliveTimeout8 := new(float64)
		if !r.InputCriblHTTP.KeepAliveTimeout.IsUnknown() && !r.InputCriblHTTP.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout8 = r.InputCriblHTTP.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout8 = nil
		}
		enableHealthCheck8 := new(bool)
		if !r.InputCriblHTTP.EnableHealthCheck.IsUnknown() && !r.InputCriblHTTP.EnableHealthCheck.IsNull() {
			*enableHealthCheck8 = r.InputCriblHTTP.EnableHealthCheck.ValueBool()
		} else {
			enableHealthCheck8 = nil
		}
		ipAllowlistRegex8 := new(string)
		if !r.InputCriblHTTP.IPAllowlistRegex.IsUnknown() && !r.InputCriblHTTP.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex8 = r.InputCriblHTTP.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex8 = nil
		}
		ipDenylistRegex8 := new(string)
		if !r.InputCriblHTTP.IPDenylistRegex.IsUnknown() && !r.InputCriblHTTP.IPDenylistRegex.IsNull() {
			*ipDenylistRegex8 = r.InputCriblHTTP.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex8 = nil
		}
		metadata27 := make([]shared.InputCriblHTTPMetadata, 0, len(r.InputCriblHTTP.Metadata))
		for _, metadataItem27 := range r.InputCriblHTTP.Metadata {
			var name46 string
			name46 = metadataItem27.Name.ValueString()

			var value44 string
			value44 = metadataItem27.Value.ValueString()

			metadata27 = append(metadata27, shared.InputCriblHTTPMetadata{
				Name:  name46,
				Value: value44,
			})
		}
		description30 := new(string)
		if !r.InputCriblHTTP.Description.IsUnknown() && !r.InputCriblHTTP.Description.IsNull() {
			*description30 = r.InputCriblHTTP.Description.ValueString()
		} else {
			description30 = nil
		}
		var status25 *shared.TFStatus
		if r.InputCriblHTTP.Status != nil {
			health25 := shared.Health(r.InputCriblHTTP.Status.Health.ValueString())
			metrics25 := make(map[string]interface{})
			for metricsKey25, metricsValue25 := range r.InputCriblHTTP.Status.Metrics {
				var metricsInst25 interface{}
				_ = json.Unmarshal([]byte(metricsValue25.ValueString()), &metricsInst25)
				metrics25[metricsKey25] = metricsInst25
			}
			var timestamp25 float64
			timestamp25 = r.InputCriblHTTP.Status.Timestamp.ValueFloat64()

			useStatusFromLb25 := new(bool)
			if !r.InputCriblHTTP.Status.UseStatusFromLB.IsUnknown() && !r.InputCriblHTTP.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb25 = r.InputCriblHTTP.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb25 = nil
			}
			status25 = &shared.TFStatus{
				Health:          health25,
				Metrics:         metrics25,
				Timestamp:       timestamp25,
				UseStatusFromLB: useStatusFromLb25,
			}
		}
		inputCriblHTTP = &shared.InputCriblHTTP{
			ID:                    id25,
			Type:                  typeVar29,
			Disabled:              disabled52,
			Pipeline:              pipeline50,
			SendToRoutes:          sendToRoutes25,
			Environment:           environment25,
			PqEnabled:             pqEnabled25,
			Streamtags:            streamtags25,
			Connections:           connections25,
			Pq:                    pq25,
			Host:                  host11,
			Port:                  port11,
			AuthTokens:            authTokens5,
			TLS:                   tls17,
			MaxActiveReq:          maxActiveReq8,
			MaxRequestsPerSocket:  maxRequestsPerSocket8,
			EnableProxyHeader:     enableProxyHeader10,
			CaptureHeaders:        captureHeaders8,
			ActivityLogSampleRate: activityLogSampleRate8,
			RequestTimeout:        requestTimeout17,
			SocketTimeout:         socketTimeout8,
			KeepAliveTimeout:      keepAliveTimeout8,
			EnableHealthCheck:     enableHealthCheck8,
			IPAllowlistRegex:      ipAllowlistRegex8,
			IPDenylistRegex:       ipDenylistRegex8,
			Metadata:              metadata27,
			Description:           description30,
			Status:                status25,
		}
	}
	if inputCriblHTTP != nil {
		out = shared.Input{
			InputCriblHTTP: inputCriblHTTP,
		}
	}
	var inputTcpjson *shared.InputTcpjson
	if r.InputTcpjson != nil {
		id26 := new(string)
		if !r.InputTcpjson.ID.IsUnknown() && !r.InputTcpjson.ID.IsNull() {
			*id26 = r.InputTcpjson.ID.ValueString()
		} else {
			id26 = nil
		}
		typeVar30 := new(shared.InputTcpjsonType)
		if !r.InputTcpjson.Type.IsUnknown() && !r.InputTcpjson.Type.IsNull() {
			*typeVar30 = shared.InputTcpjsonType(r.InputTcpjson.Type.ValueString())
		} else {
			typeVar30 = nil
		}
		disabled54 := new(bool)
		if !r.InputTcpjson.Disabled.IsUnknown() && !r.InputTcpjson.Disabled.IsNull() {
			*disabled54 = r.InputTcpjson.Disabled.ValueBool()
		} else {
			disabled54 = nil
		}
		pipeline52 := new(string)
		if !r.InputTcpjson.Pipeline.IsUnknown() && !r.InputTcpjson.Pipeline.IsNull() {
			*pipeline52 = r.InputTcpjson.Pipeline.ValueString()
		} else {
			pipeline52 = nil
		}
		sendToRoutes26 := new(bool)
		if !r.InputTcpjson.SendToRoutes.IsUnknown() && !r.InputTcpjson.SendToRoutes.IsNull() {
			*sendToRoutes26 = r.InputTcpjson.SendToRoutes.ValueBool()
		} else {
			sendToRoutes26 = nil
		}
		environment26 := new(string)
		if !r.InputTcpjson.Environment.IsUnknown() && !r.InputTcpjson.Environment.IsNull() {
			*environment26 = r.InputTcpjson.Environment.ValueString()
		} else {
			environment26 = nil
		}
		pqEnabled26 := new(bool)
		if !r.InputTcpjson.PqEnabled.IsUnknown() && !r.InputTcpjson.PqEnabled.IsNull() {
			*pqEnabled26 = r.InputTcpjson.PqEnabled.ValueBool()
		} else {
			pqEnabled26 = nil
		}
		streamtags26 := make([]string, 0, len(r.InputTcpjson.Streamtags))
		for _, streamtagsItem26 := range r.InputTcpjson.Streamtags {
			streamtags26 = append(streamtags26, streamtagsItem26.ValueString())
		}
		connections26 := make([]shared.InputTcpjsonConnections, 0, len(r.InputTcpjson.Connections))
		for _, connectionsItem26 := range r.InputTcpjson.Connections {
			pipeline53 := new(string)
			if !connectionsItem26.Pipeline.IsUnknown() && !connectionsItem26.Pipeline.IsNull() {
				*pipeline53 = connectionsItem26.Pipeline.ValueString()
			} else {
				pipeline53 = nil
			}
			var output27 string
			output27 = connectionsItem26.Output.ValueString()

			connections26 = append(connections26, shared.InputTcpjsonConnections{
				Pipeline: pipeline53,
				Output:   output27,
			})
		}
		var pq26 *shared.InputTcpjsonPq
		if r.InputTcpjson.Pq != nil {
			mode26 := new(shared.InputTcpjsonMode)
			if !r.InputTcpjson.Pq.Mode.IsUnknown() && !r.InputTcpjson.Pq.Mode.IsNull() {
				*mode26 = shared.InputTcpjsonMode(r.InputTcpjson.Pq.Mode.ValueString())
			} else {
				mode26 = nil
			}
			maxBufferSize26 := new(float64)
			if !r.InputTcpjson.Pq.MaxBufferSize.IsUnknown() && !r.InputTcpjson.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize26 = r.InputTcpjson.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize26 = nil
			}
			commitFrequency26 := new(float64)
			if !r.InputTcpjson.Pq.CommitFrequency.IsUnknown() && !r.InputTcpjson.Pq.CommitFrequency.IsNull() {
				*commitFrequency26 = r.InputTcpjson.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency26 = nil
			}
			maxFileSize26 := new(string)
			if !r.InputTcpjson.Pq.MaxFileSize.IsUnknown() && !r.InputTcpjson.Pq.MaxFileSize.IsNull() {
				*maxFileSize26 = r.InputTcpjson.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize26 = nil
			}
			maxSize26 := new(string)
			if !r.InputTcpjson.Pq.MaxSize.IsUnknown() && !r.InputTcpjson.Pq.MaxSize.IsNull() {
				*maxSize26 = r.InputTcpjson.Pq.MaxSize.ValueString()
			} else {
				maxSize26 = nil
			}
			path27 := new(string)
			if !r.InputTcpjson.Pq.Path.IsUnknown() && !r.InputTcpjson.Pq.Path.IsNull() {
				*path27 = r.InputTcpjson.Pq.Path.ValueString()
			} else {
				path27 = nil
			}
			compress28 := new(shared.InputTcpjsonCompression)
			if !r.InputTcpjson.Pq.Compress.IsUnknown() && !r.InputTcpjson.Pq.Compress.IsNull() {
				*compress28 = shared.InputTcpjsonCompression(r.InputTcpjson.Pq.Compress.ValueString())
			} else {
				compress28 = nil
			}
			pq26 = &shared.InputTcpjsonPq{
				Mode:            mode26,
				MaxBufferSize:   maxBufferSize26,
				CommitFrequency: commitFrequency26,
				MaxFileSize:     maxFileSize26,
				MaxSize:         maxSize26,
				Path:            path27,
				Compress:        compress28,
			}
		}
		host12 := new(string)
		if !r.InputTcpjson.Host.IsUnknown() && !r.InputTcpjson.Host.IsNull() {
			*host12 = r.InputTcpjson.Host.ValueString()
		} else {
			host12 = nil
		}
		var port12 float64
		port12 = r.InputTcpjson.Port.ValueFloat64()

		var tls18 *shared.InputTcpjsonTLSSettingsServerSide
		if r.InputTcpjson.TLS != nil {
			disabled55 := new(bool)
			if !r.InputTcpjson.TLS.Disabled.IsUnknown() && !r.InputTcpjson.TLS.Disabled.IsNull() {
				*disabled55 = r.InputTcpjson.TLS.Disabled.ValueBool()
			} else {
				disabled55 = nil
			}
			certificateName19 := new(string)
			if !r.InputTcpjson.TLS.CertificateName.IsUnknown() && !r.InputTcpjson.TLS.CertificateName.IsNull() {
				*certificateName19 = r.InputTcpjson.TLS.CertificateName.ValueString()
			} else {
				certificateName19 = nil
			}
			privKeyPath18 := new(string)
			if !r.InputTcpjson.TLS.PrivKeyPath.IsUnknown() && !r.InputTcpjson.TLS.PrivKeyPath.IsNull() {
				*privKeyPath18 = r.InputTcpjson.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath18 = nil
			}
			passphrase18 := new(string)
			if !r.InputTcpjson.TLS.Passphrase.IsUnknown() && !r.InputTcpjson.TLS.Passphrase.IsNull() {
				*passphrase18 = r.InputTcpjson.TLS.Passphrase.ValueString()
			} else {
				passphrase18 = nil
			}
			certPath18 := new(string)
			if !r.InputTcpjson.TLS.CertPath.IsUnknown() && !r.InputTcpjson.TLS.CertPath.IsNull() {
				*certPath18 = r.InputTcpjson.TLS.CertPath.ValueString()
			} else {
				certPath18 = nil
			}
			caPath17 := new(string)
			if !r.InputTcpjson.TLS.CaPath.IsUnknown() && !r.InputTcpjson.TLS.CaPath.IsNull() {
				*caPath17 = r.InputTcpjson.TLS.CaPath.ValueString()
			} else {
				caPath17 = nil
			}
			requestCert11 := new(bool)
			if !r.InputTcpjson.TLS.RequestCert.IsUnknown() && !r.InputTcpjson.TLS.RequestCert.IsNull() {
				*requestCert11 = r.InputTcpjson.TLS.RequestCert.ValueBool()
			} else {
				requestCert11 = nil
			}
			var rejectUnauthorized23 interface{}
			if !r.InputTcpjson.TLS.RejectUnauthorized.IsUnknown() && !r.InputTcpjson.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputTcpjson.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized23)
			}
			var commonNameRegex11 interface{}
			if !r.InputTcpjson.TLS.CommonNameRegex.IsUnknown() && !r.InputTcpjson.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputTcpjson.TLS.CommonNameRegex.ValueString()), &commonNameRegex11)
			}
			minVersion17 := new(shared.InputTcpjsonMinimumTLSVersion)
			if !r.InputTcpjson.TLS.MinVersion.IsUnknown() && !r.InputTcpjson.TLS.MinVersion.IsNull() {
				*minVersion17 = shared.InputTcpjsonMinimumTLSVersion(r.InputTcpjson.TLS.MinVersion.ValueString())
			} else {
				minVersion17 = nil
			}
			maxVersion17 := new(shared.InputTcpjsonMaximumTLSVersion)
			if !r.InputTcpjson.TLS.MaxVersion.IsUnknown() && !r.InputTcpjson.TLS.MaxVersion.IsNull() {
				*maxVersion17 = shared.InputTcpjsonMaximumTLSVersion(r.InputTcpjson.TLS.MaxVersion.ValueString())
			} else {
				maxVersion17 = nil
			}
			tls18 = &shared.InputTcpjsonTLSSettingsServerSide{
				Disabled:           disabled55,
				CertificateName:    certificateName19,
				PrivKeyPath:        privKeyPath18,
				Passphrase:         passphrase18,
				CertPath:           certPath18,
				CaPath:             caPath17,
				RequestCert:        requestCert11,
				RejectUnauthorized: rejectUnauthorized23,
				CommonNameRegex:    commonNameRegex11,
				MinVersion:         minVersion17,
				MaxVersion:         maxVersion17,
			}
		}
		ipWhitelistRegex1 := new(string)
		if !r.InputTcpjson.IPWhitelistRegex.IsUnknown() && !r.InputTcpjson.IPWhitelistRegex.IsNull() {
			*ipWhitelistRegex1 = r.InputTcpjson.IPWhitelistRegex.ValueString()
		} else {
			ipWhitelistRegex1 = nil
		}
		maxActiveCxn2 := new(float64)
		if !r.InputTcpjson.MaxActiveCxn.IsUnknown() && !r.InputTcpjson.MaxActiveCxn.IsNull() {
			*maxActiveCxn2 = r.InputTcpjson.MaxActiveCxn.ValueFloat64()
		} else {
			maxActiveCxn2 = nil
		}
		socketIdleTimeout2 := new(float64)
		if !r.InputTcpjson.SocketIdleTimeout.IsUnknown() && !r.InputTcpjson.SocketIdleTimeout.IsNull() {
			*socketIdleTimeout2 = r.InputTcpjson.SocketIdleTimeout.ValueFloat64()
		} else {
			socketIdleTimeout2 = nil
		}
		socketEndingMaxWait2 := new(float64)
		if !r.InputTcpjson.SocketEndingMaxWait.IsUnknown() && !r.InputTcpjson.SocketEndingMaxWait.IsNull() {
			*socketEndingMaxWait2 = r.InputTcpjson.SocketEndingMaxWait.ValueFloat64()
		} else {
			socketEndingMaxWait2 = nil
		}
		socketMaxLifespan2 := new(float64)
		if !r.InputTcpjson.SocketMaxLifespan.IsUnknown() && !r.InputTcpjson.SocketMaxLifespan.IsNull() {
			*socketMaxLifespan2 = r.InputTcpjson.SocketMaxLifespan.ValueFloat64()
		} else {
			socketMaxLifespan2 = nil
		}
		enableProxyHeader11 := new(bool)
		if !r.InputTcpjson.EnableProxyHeader.IsUnknown() && !r.InputTcpjson.EnableProxyHeader.IsNull() {
			*enableProxyHeader11 = r.InputTcpjson.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader11 = nil
		}
		metadata28 := make([]shared.InputTcpjsonMetadata, 0, len(r.InputTcpjson.Metadata))
		for _, metadataItem28 := range r.InputTcpjson.Metadata {
			var name47 string
			name47 = metadataItem28.Name.ValueString()

			var value45 string
			value45 = metadataItem28.Value.ValueString()

			metadata28 = append(metadata28, shared.InputTcpjsonMetadata{
				Name:  name47,
				Value: value45,
			})
		}
		enableLoadBalancing1 := new(bool)
		if !r.InputTcpjson.EnableLoadBalancing.IsUnknown() && !r.InputTcpjson.EnableLoadBalancing.IsNull() {
			*enableLoadBalancing1 = r.InputTcpjson.EnableLoadBalancing.ValueBool()
		} else {
			enableLoadBalancing1 = nil
		}
		authType16 := new(shared.InputTcpjsonAuthenticationMethod)
		if !r.InputTcpjson.AuthType.IsUnknown() && !r.InputTcpjson.AuthType.IsNull() {
			*authType16 = shared.InputTcpjsonAuthenticationMethod(r.InputTcpjson.AuthType.ValueString())
		} else {
			authType16 = nil
		}
		description31 := new(string)
		if !r.InputTcpjson.Description.IsUnknown() && !r.InputTcpjson.Description.IsNull() {
			*description31 = r.InputTcpjson.Description.ValueString()
		} else {
			description31 = nil
		}
		authToken := new(string)
		if !r.InputTcpjson.AuthToken.IsUnknown() && !r.InputTcpjson.AuthToken.IsNull() {
			*authToken = r.InputTcpjson.AuthToken.ValueString()
		} else {
			authToken = nil
		}
		textSecret11 := new(string)
		if !r.InputTcpjson.TextSecret.IsUnknown() && !r.InputTcpjson.TextSecret.IsNull() {
			*textSecret11 = r.InputTcpjson.TextSecret.ValueString()
		} else {
			textSecret11 = nil
		}
		var status26 *shared.TFStatus
		if r.InputTcpjson.Status != nil {
			health26 := shared.Health(r.InputTcpjson.Status.Health.ValueString())
			metrics26 := make(map[string]interface{})
			for metricsKey26, metricsValue26 := range r.InputTcpjson.Status.Metrics {
				var metricsInst26 interface{}
				_ = json.Unmarshal([]byte(metricsValue26.ValueString()), &metricsInst26)
				metrics26[metricsKey26] = metricsInst26
			}
			var timestamp26 float64
			timestamp26 = r.InputTcpjson.Status.Timestamp.ValueFloat64()

			useStatusFromLb26 := new(bool)
			if !r.InputTcpjson.Status.UseStatusFromLB.IsUnknown() && !r.InputTcpjson.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb26 = r.InputTcpjson.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb26 = nil
			}
			status26 = &shared.TFStatus{
				Health:          health26,
				Metrics:         metrics26,
				Timestamp:       timestamp26,
				UseStatusFromLB: useStatusFromLb26,
			}
		}
		inputTcpjson = &shared.InputTcpjson{
			ID:                  id26,
			Type:                typeVar30,
			Disabled:            disabled54,
			Pipeline:            pipeline52,
			SendToRoutes:        sendToRoutes26,
			Environment:         environment26,
			PqEnabled:           pqEnabled26,
			Streamtags:          streamtags26,
			Connections:         connections26,
			Pq:                  pq26,
			Host:                host12,
			Port:                port12,
			TLS:                 tls18,
			IPWhitelistRegex:    ipWhitelistRegex1,
			MaxActiveCxn:        maxActiveCxn2,
			SocketIdleTimeout:   socketIdleTimeout2,
			SocketEndingMaxWait: socketEndingMaxWait2,
			SocketMaxLifespan:   socketMaxLifespan2,
			EnableProxyHeader:   enableProxyHeader11,
			Metadata:            metadata28,
			EnableLoadBalancing: enableLoadBalancing1,
			AuthType:            authType16,
			Description:         description31,
			AuthToken:           authToken,
			TextSecret:          textSecret11,
			Status:              status26,
		}
	}
	if inputTcpjson != nil {
		out = shared.Input{
			InputTcpjson: inputTcpjson,
		}
	}
	var inputSystemMetrics *shared.InputSystemMetrics
	if r.InputSystemMetrics != nil {
		var id27 string
		id27 = r.InputSystemMetrics.ID.ValueString()

		typeVar31 := shared.InputSystemMetricsType(r.InputSystemMetrics.Type.ValueString())
		disabled56 := new(bool)
		if !r.InputSystemMetrics.Disabled.IsUnknown() && !r.InputSystemMetrics.Disabled.IsNull() {
			*disabled56 = r.InputSystemMetrics.Disabled.ValueBool()
		} else {
			disabled56 = nil
		}
		pipeline54 := new(string)
		if !r.InputSystemMetrics.Pipeline.IsUnknown() && !r.InputSystemMetrics.Pipeline.IsNull() {
			*pipeline54 = r.InputSystemMetrics.Pipeline.ValueString()
		} else {
			pipeline54 = nil
		}
		sendToRoutes27 := new(bool)
		if !r.InputSystemMetrics.SendToRoutes.IsUnknown() && !r.InputSystemMetrics.SendToRoutes.IsNull() {
			*sendToRoutes27 = r.InputSystemMetrics.SendToRoutes.ValueBool()
		} else {
			sendToRoutes27 = nil
		}
		environment27 := new(string)
		if !r.InputSystemMetrics.Environment.IsUnknown() && !r.InputSystemMetrics.Environment.IsNull() {
			*environment27 = r.InputSystemMetrics.Environment.ValueString()
		} else {
			environment27 = nil
		}
		pqEnabled27 := new(bool)
		if !r.InputSystemMetrics.PqEnabled.IsUnknown() && !r.InputSystemMetrics.PqEnabled.IsNull() {
			*pqEnabled27 = r.InputSystemMetrics.PqEnabled.ValueBool()
		} else {
			pqEnabled27 = nil
		}
		streamtags27 := make([]string, 0, len(r.InputSystemMetrics.Streamtags))
		for _, streamtagsItem27 := range r.InputSystemMetrics.Streamtags {
			streamtags27 = append(streamtags27, streamtagsItem27.ValueString())
		}
		connections27 := make([]shared.InputSystemMetricsConnections, 0, len(r.InputSystemMetrics.Connections))
		for _, connectionsItem27 := range r.InputSystemMetrics.Connections {
			pipeline55 := new(string)
			if !connectionsItem27.Pipeline.IsUnknown() && !connectionsItem27.Pipeline.IsNull() {
				*pipeline55 = connectionsItem27.Pipeline.ValueString()
			} else {
				pipeline55 = nil
			}
			var output28 string
			output28 = connectionsItem27.Output.ValueString()

			connections27 = append(connections27, shared.InputSystemMetricsConnections{
				Pipeline: pipeline55,
				Output:   output28,
			})
		}
		var pq27 *shared.InputSystemMetricsPq
		if r.InputSystemMetrics.Pq != nil {
			mode27 := new(shared.InputSystemMetricsInputPqMode)
			if !r.InputSystemMetrics.Pq.Mode.IsUnknown() && !r.InputSystemMetrics.Pq.Mode.IsNull() {
				*mode27 = shared.InputSystemMetricsInputPqMode(r.InputSystemMetrics.Pq.Mode.ValueString())
			} else {
				mode27 = nil
			}
			maxBufferSize27 := new(float64)
			if !r.InputSystemMetrics.Pq.MaxBufferSize.IsUnknown() && !r.InputSystemMetrics.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize27 = r.InputSystemMetrics.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize27 = nil
			}
			commitFrequency27 := new(float64)
			if !r.InputSystemMetrics.Pq.CommitFrequency.IsUnknown() && !r.InputSystemMetrics.Pq.CommitFrequency.IsNull() {
				*commitFrequency27 = r.InputSystemMetrics.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency27 = nil
			}
			maxFileSize27 := new(string)
			if !r.InputSystemMetrics.Pq.MaxFileSize.IsUnknown() && !r.InputSystemMetrics.Pq.MaxFileSize.IsNull() {
				*maxFileSize27 = r.InputSystemMetrics.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize27 = nil
			}
			maxSize27 := new(string)
			if !r.InputSystemMetrics.Pq.MaxSize.IsUnknown() && !r.InputSystemMetrics.Pq.MaxSize.IsNull() {
				*maxSize27 = r.InputSystemMetrics.Pq.MaxSize.ValueString()
			} else {
				maxSize27 = nil
			}
			path28 := new(string)
			if !r.InputSystemMetrics.Pq.Path.IsUnknown() && !r.InputSystemMetrics.Pq.Path.IsNull() {
				*path28 = r.InputSystemMetrics.Pq.Path.ValueString()
			} else {
				path28 = nil
			}
			compress29 := new(shared.InputSystemMetricsCompression)
			if !r.InputSystemMetrics.Pq.Compress.IsUnknown() && !r.InputSystemMetrics.Pq.Compress.IsNull() {
				*compress29 = shared.InputSystemMetricsCompression(r.InputSystemMetrics.Pq.Compress.ValueString())
			} else {
				compress29 = nil
			}
			pq27 = &shared.InputSystemMetricsPq{
				Mode:            mode27,
				MaxBufferSize:   maxBufferSize27,
				CommitFrequency: commitFrequency27,
				MaxFileSize:     maxFileSize27,
				MaxSize:         maxSize27,
				Path:            path28,
				Compress:        compress29,
			}
		}
		interval10 := new(float64)
		if !r.InputSystemMetrics.Interval.IsUnknown() && !r.InputSystemMetrics.Interval.IsNull() {
			*interval10 = r.InputSystemMetrics.Interval.ValueFloat64()
		} else {
			interval10 = nil
		}
		var host13 *shared.Host
		if r.InputSystemMetrics.Host != nil {
			mode28 := new(shared.InputSystemMetricsMode)
			if !r.InputSystemMetrics.Host.Mode.IsUnknown() && !r.InputSystemMetrics.Host.Mode.IsNull() {
				*mode28 = shared.InputSystemMetricsMode(r.InputSystemMetrics.Host.Mode.ValueString())
			} else {
				mode28 = nil
			}
			var custom *shared.Custom
			if r.InputSystemMetrics.Host.Custom != nil {
				var system *shared.InputSystemMetricsSystem
				if r.InputSystemMetrics.Host.Custom.System != nil {
					mode29 := new(shared.InputSystemMetricsInputHostMode)
					if !r.InputSystemMetrics.Host.Custom.System.Mode.IsUnknown() && !r.InputSystemMetrics.Host.Custom.System.Mode.IsNull() {
						*mode29 = shared.InputSystemMetricsInputHostMode(r.InputSystemMetrics.Host.Custom.System.Mode.ValueString())
					} else {
						mode29 = nil
					}
					processes := new(bool)
					if !r.InputSystemMetrics.Host.Custom.System.Processes.IsUnknown() && !r.InputSystemMetrics.Host.Custom.System.Processes.IsNull() {
						*processes = r.InputSystemMetrics.Host.Custom.System.Processes.ValueBool()
					} else {
						processes = nil
					}
					system = &shared.InputSystemMetricsSystem{
						Mode:      mode29,
						Processes: processes,
					}
				}
				var cpu *shared.CPU
				if r.InputSystemMetrics.Host.Custom.CPU != nil {
					mode30 := new(shared.InputSystemMetricsInputHostCustomMode)
					if !r.InputSystemMetrics.Host.Custom.CPU.Mode.IsUnknown() && !r.InputSystemMetrics.Host.Custom.CPU.Mode.IsNull() {
						*mode30 = shared.InputSystemMetricsInputHostCustomMode(r.InputSystemMetrics.Host.Custom.CPU.Mode.ValueString())
					} else {
						mode30 = nil
					}
					perCPU := new(bool)
					if !r.InputSystemMetrics.Host.Custom.CPU.PerCPU.IsUnknown() && !r.InputSystemMetrics.Host.Custom.CPU.PerCPU.IsNull() {
						*perCPU = r.InputSystemMetrics.Host.Custom.CPU.PerCPU.ValueBool()
					} else {
						perCPU = nil
					}
					detail := new(bool)
					if !r.InputSystemMetrics.Host.Custom.CPU.Detail.IsUnknown() && !r.InputSystemMetrics.Host.Custom.CPU.Detail.IsNull() {
						*detail = r.InputSystemMetrics.Host.Custom.CPU.Detail.ValueBool()
					} else {
						detail = nil
					}
					timeVar := new(bool)
					if !r.InputSystemMetrics.Host.Custom.CPU.Time.IsUnknown() && !r.InputSystemMetrics.Host.Custom.CPU.Time.IsNull() {
						*timeVar = r.InputSystemMetrics.Host.Custom.CPU.Time.ValueBool()
					} else {
						timeVar = nil
					}
					cpu = &shared.CPU{
						Mode:   mode30,
						PerCPU: perCPU,
						Detail: detail,
						Time:   timeVar,
					}
				}
				var memory *shared.InputSystemMetricsMemory
				if r.InputSystemMetrics.Host.Custom.Memory != nil {
					mode31 := new(shared.InputSystemMetricsInputHostCustomMemoryMode)
					if !r.InputSystemMetrics.Host.Custom.Memory.Mode.IsUnknown() && !r.InputSystemMetrics.Host.Custom.Memory.Mode.IsNull() {
						*mode31 = shared.InputSystemMetricsInputHostCustomMemoryMode(r.InputSystemMetrics.Host.Custom.Memory.Mode.ValueString())
					} else {
						mode31 = nil
					}
					detail1 := new(bool)
					if !r.InputSystemMetrics.Host.Custom.Memory.Detail.IsUnknown() && !r.InputSystemMetrics.Host.Custom.Memory.Detail.IsNull() {
						*detail1 = r.InputSystemMetrics.Host.Custom.Memory.Detail.ValueBool()
					} else {
						detail1 = nil
					}
					memory = &shared.InputSystemMetricsMemory{
						Mode:   mode31,
						Detail: detail1,
					}
				}
				var network *shared.Network
				if r.InputSystemMetrics.Host.Custom.Network != nil {
					mode32 := new(shared.InputSystemMetricsInputHostCustomNetworkMode)
					if !r.InputSystemMetrics.Host.Custom.Network.Mode.IsUnknown() && !r.InputSystemMetrics.Host.Custom.Network.Mode.IsNull() {
						*mode32 = shared.InputSystemMetricsInputHostCustomNetworkMode(r.InputSystemMetrics.Host.Custom.Network.Mode.ValueString())
					} else {
						mode32 = nil
					}
					devices := make([]string, 0, len(r.InputSystemMetrics.Host.Custom.Network.Devices))
					for _, devicesItem := range r.InputSystemMetrics.Host.Custom.Network.Devices {
						devices = append(devices, devicesItem.ValueString())
					}
					perInterface := new(bool)
					if !r.InputSystemMetrics.Host.Custom.Network.PerInterface.IsUnknown() && !r.InputSystemMetrics.Host.Custom.Network.PerInterface.IsNull() {
						*perInterface = r.InputSystemMetrics.Host.Custom.Network.PerInterface.ValueBool()
					} else {
						perInterface = nil
					}
					detail2 := new(bool)
					if !r.InputSystemMetrics.Host.Custom.Network.Detail.IsUnknown() && !r.InputSystemMetrics.Host.Custom.Network.Detail.IsNull() {
						*detail2 = r.InputSystemMetrics.Host.Custom.Network.Detail.ValueBool()
					} else {
						detail2 = nil
					}
					network = &shared.Network{
						Mode:         mode32,
						Devices:      devices,
						PerInterface: perInterface,
						Detail:       detail2,
					}
				}
				var disk *shared.Disk
				if r.InputSystemMetrics.Host.Custom.Disk != nil {
					mode33 := new(shared.InputSystemMetricsInputHostCustomDiskMode)
					if !r.InputSystemMetrics.Host.Custom.Disk.Mode.IsUnknown() && !r.InputSystemMetrics.Host.Custom.Disk.Mode.IsNull() {
						*mode33 = shared.InputSystemMetricsInputHostCustomDiskMode(r.InputSystemMetrics.Host.Custom.Disk.Mode.ValueString())
					} else {
						mode33 = nil
					}
					devices1 := make([]string, 0, len(r.InputSystemMetrics.Host.Custom.Disk.Devices))
					for _, devicesItem1 := range r.InputSystemMetrics.Host.Custom.Disk.Devices {
						devices1 = append(devices1, devicesItem1.ValueString())
					}
					mountpoints := make([]string, 0, len(r.InputSystemMetrics.Host.Custom.Disk.Mountpoints))
					for _, mountpointsItem := range r.InputSystemMetrics.Host.Custom.Disk.Mountpoints {
						mountpoints = append(mountpoints, mountpointsItem.ValueString())
					}
					fstypes := make([]string, 0, len(r.InputSystemMetrics.Host.Custom.Disk.Fstypes))
					for _, fstypesItem := range r.InputSystemMetrics.Host.Custom.Disk.Fstypes {
						fstypes = append(fstypes, fstypesItem.ValueString())
					}
					perDevice := new(bool)
					if !r.InputSystemMetrics.Host.Custom.Disk.PerDevice.IsUnknown() && !r.InputSystemMetrics.Host.Custom.Disk.PerDevice.IsNull() {
						*perDevice = r.InputSystemMetrics.Host.Custom.Disk.PerDevice.ValueBool()
					} else {
						perDevice = nil
					}
					detail3 := new(bool)
					if !r.InputSystemMetrics.Host.Custom.Disk.Detail.IsUnknown() && !r.InputSystemMetrics.Host.Custom.Disk.Detail.IsNull() {
						*detail3 = r.InputSystemMetrics.Host.Custom.Disk.Detail.ValueBool()
					} else {
						detail3 = nil
					}
					disk = &shared.Disk{
						Mode:        mode33,
						Devices:     devices1,
						Mountpoints: mountpoints,
						Fstypes:     fstypes,
						PerDevice:   perDevice,
						Detail:      detail3,
					}
				}
				custom = &shared.Custom{
					System:  system,
					CPU:     cpu,
					Memory:  memory,
					Network: network,
					Disk:    disk,
				}
			}
			host13 = &shared.Host{
				Mode:   mode28,
				Custom: custom,
			}
		}
		var process *shared.InputSystemMetricsProcess
		if r.InputSystemMetrics.Process != nil {
			sets := make([]shared.Sets, 0, len(r.InputSystemMetrics.Process.Sets))
			for _, setsItem := range r.InputSystemMetrics.Process.Sets {
				var name48 string
				name48 = setsItem.Name.ValueString()

				var filter2 string
				filter2 = setsItem.Filter.ValueString()

				includeChildren := new(bool)
				if !setsItem.IncludeChildren.IsUnknown() && !setsItem.IncludeChildren.IsNull() {
					*includeChildren = setsItem.IncludeChildren.ValueBool()
				} else {
					includeChildren = nil
				}
				sets = append(sets, shared.Sets{
					Name:            name48,
					Filter:          filter2,
					IncludeChildren: includeChildren,
				})
			}
			process = &shared.InputSystemMetricsProcess{
				Sets: sets,
			}
		}
		var container *shared.InputSystemMetricsContainer
		if r.InputSystemMetrics.Container != nil {
			mode34 := new(shared.InputSystemMetricsInputMode)
			if !r.InputSystemMetrics.Container.Mode.IsUnknown() && !r.InputSystemMetrics.Container.Mode.IsNull() {
				*mode34 = shared.InputSystemMetricsInputMode(r.InputSystemMetrics.Container.Mode.ValueString())
			} else {
				mode34 = nil
			}
			dockerSocket := make([]string, 0, len(r.InputSystemMetrics.Container.DockerSocket))
			for _, dockerSocketItem := range r.InputSystemMetrics.Container.DockerSocket {
				dockerSocket = append(dockerSocket, dockerSocketItem.ValueString())
			}
			dockerTimeout := new(float64)
			if !r.InputSystemMetrics.Container.DockerTimeout.IsUnknown() && !r.InputSystemMetrics.Container.DockerTimeout.IsNull() {
				*dockerTimeout = r.InputSystemMetrics.Container.DockerTimeout.ValueFloat64()
			} else {
				dockerTimeout = nil
			}
			filters := make([]shared.Filters, 0, len(r.InputSystemMetrics.Container.Filters))
			for _, filtersItem := range r.InputSystemMetrics.Container.Filters {
				var expr string
				expr = filtersItem.Expr.ValueString()

				filters = append(filters, shared.Filters{
					Expr: expr,
				})
			}
			allContainers := new(bool)
			if !r.InputSystemMetrics.Container.AllContainers.IsUnknown() && !r.InputSystemMetrics.Container.AllContainers.IsNull() {
				*allContainers = r.InputSystemMetrics.Container.AllContainers.ValueBool()
			} else {
				allContainers = nil
			}
			perDevice1 := new(bool)
			if !r.InputSystemMetrics.Container.PerDevice.IsUnknown() && !r.InputSystemMetrics.Container.PerDevice.IsNull() {
				*perDevice1 = r.InputSystemMetrics.Container.PerDevice.ValueBool()
			} else {
				perDevice1 = nil
			}
			detail4 := new(bool)
			if !r.InputSystemMetrics.Container.Detail.IsUnknown() && !r.InputSystemMetrics.Container.Detail.IsNull() {
				*detail4 = r.InputSystemMetrics.Container.Detail.ValueBool()
			} else {
				detail4 = nil
			}
			container = &shared.InputSystemMetricsContainer{
				Mode:          mode34,
				DockerSocket:  dockerSocket,
				DockerTimeout: dockerTimeout,
				Filters:       filters,
				AllContainers: allContainers,
				PerDevice:     perDevice1,
				Detail:        detail4,
			}
		}
		metadata29 := make([]shared.InputSystemMetricsMetadata, 0, len(r.InputSystemMetrics.Metadata))
		for _, metadataItem29 := range r.InputSystemMetrics.Metadata {
			var name49 string
			name49 = metadataItem29.Name.ValueString()

			var value46 string
			value46 = metadataItem29.Value.ValueString()

			metadata29 = append(metadata29, shared.InputSystemMetricsMetadata{
				Name:  name49,
				Value: value46,
			})
		}
		var persistence1 *shared.InputSystemMetricsPersistence
		if r.InputSystemMetrics.Persistence != nil {
			enable1 := new(bool)
			if !r.InputSystemMetrics.Persistence.Enable.IsUnknown() && !r.InputSystemMetrics.Persistence.Enable.IsNull() {
				*enable1 = r.InputSystemMetrics.Persistence.Enable.ValueBool()
			} else {
				enable1 = nil
			}
			timeWindow1 := new(string)
			if !r.InputSystemMetrics.Persistence.TimeWindow.IsUnknown() && !r.InputSystemMetrics.Persistence.TimeWindow.IsNull() {
				*timeWindow1 = r.InputSystemMetrics.Persistence.TimeWindow.ValueString()
			} else {
				timeWindow1 = nil
			}
			maxDataSize1 := new(string)
			if !r.InputSystemMetrics.Persistence.MaxDataSize.IsUnknown() && !r.InputSystemMetrics.Persistence.MaxDataSize.IsNull() {
				*maxDataSize1 = r.InputSystemMetrics.Persistence.MaxDataSize.ValueString()
			} else {
				maxDataSize1 = nil
			}
			maxDataTime1 := new(string)
			if !r.InputSystemMetrics.Persistence.MaxDataTime.IsUnknown() && !r.InputSystemMetrics.Persistence.MaxDataTime.IsNull() {
				*maxDataTime1 = r.InputSystemMetrics.Persistence.MaxDataTime.ValueString()
			} else {
				maxDataTime1 = nil
			}
			compress30 := new(shared.InputSystemMetricsDataCompressionFormat)
			if !r.InputSystemMetrics.Persistence.Compress.IsUnknown() && !r.InputSystemMetrics.Persistence.Compress.IsNull() {
				*compress30 = shared.InputSystemMetricsDataCompressionFormat(r.InputSystemMetrics.Persistence.Compress.ValueString())
			} else {
				compress30 = nil
			}
			destPath := new(string)
			if !r.InputSystemMetrics.Persistence.DestPath.IsUnknown() && !r.InputSystemMetrics.Persistence.DestPath.IsNull() {
				*destPath = r.InputSystemMetrics.Persistence.DestPath.ValueString()
			} else {
				destPath = nil
			}
			persistence1 = &shared.InputSystemMetricsPersistence{
				Enable:      enable1,
				TimeWindow:  timeWindow1,
				MaxDataSize: maxDataSize1,
				MaxDataTime: maxDataTime1,
				Compress:    compress30,
				DestPath:    destPath,
			}
		}
		description32 := new(string)
		if !r.InputSystemMetrics.Description.IsUnknown() && !r.InputSystemMetrics.Description.IsNull() {
			*description32 = r.InputSystemMetrics.Description.ValueString()
		} else {
			description32 = nil
		}
		var status27 *shared.TFStatus
		if r.InputSystemMetrics.Status != nil {
			health27 := shared.Health(r.InputSystemMetrics.Status.Health.ValueString())
			metrics27 := make(map[string]interface{})
			for metricsKey27, metricsValue27 := range r.InputSystemMetrics.Status.Metrics {
				var metricsInst27 interface{}
				_ = json.Unmarshal([]byte(metricsValue27.ValueString()), &metricsInst27)
				metrics27[metricsKey27] = metricsInst27
			}
			var timestamp27 float64
			timestamp27 = r.InputSystemMetrics.Status.Timestamp.ValueFloat64()

			useStatusFromLb27 := new(bool)
			if !r.InputSystemMetrics.Status.UseStatusFromLB.IsUnknown() && !r.InputSystemMetrics.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb27 = r.InputSystemMetrics.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb27 = nil
			}
			status27 = &shared.TFStatus{
				Health:          health27,
				Metrics:         metrics27,
				Timestamp:       timestamp27,
				UseStatusFromLB: useStatusFromLb27,
			}
		}
		inputSystemMetrics = &shared.InputSystemMetrics{
			ID:           id27,
			Type:         typeVar31,
			Disabled:     disabled56,
			Pipeline:     pipeline54,
			SendToRoutes: sendToRoutes27,
			Environment:  environment27,
			PqEnabled:    pqEnabled27,
			Streamtags:   streamtags27,
			Connections:  connections27,
			Pq:           pq27,
			Interval:     interval10,
			Host:         host13,
			Process:      process,
			Container:    container,
			Metadata:     metadata29,
			Persistence:  persistence1,
			Description:  description32,
			Status:       status27,
		}
	}
	if inputSystemMetrics != nil {
		out = shared.Input{
			InputSystemMetrics: inputSystemMetrics,
		}
	}
	var inputSystemState *shared.InputSystemState
	if r.InputSystemState != nil {
		var id28 string
		id28 = r.InputSystemState.ID.ValueString()

		typeVar32 := shared.InputSystemStateType(r.InputSystemState.Type.ValueString())
		disabled57 := new(bool)
		if !r.InputSystemState.Disabled.IsUnknown() && !r.InputSystemState.Disabled.IsNull() {
			*disabled57 = r.InputSystemState.Disabled.ValueBool()
		} else {
			disabled57 = nil
		}
		pipeline56 := new(string)
		if !r.InputSystemState.Pipeline.IsUnknown() && !r.InputSystemState.Pipeline.IsNull() {
			*pipeline56 = r.InputSystemState.Pipeline.ValueString()
		} else {
			pipeline56 = nil
		}
		sendToRoutes28 := new(bool)
		if !r.InputSystemState.SendToRoutes.IsUnknown() && !r.InputSystemState.SendToRoutes.IsNull() {
			*sendToRoutes28 = r.InputSystemState.SendToRoutes.ValueBool()
		} else {
			sendToRoutes28 = nil
		}
		environment28 := new(string)
		if !r.InputSystemState.Environment.IsUnknown() && !r.InputSystemState.Environment.IsNull() {
			*environment28 = r.InputSystemState.Environment.ValueString()
		} else {
			environment28 = nil
		}
		pqEnabled28 := new(bool)
		if !r.InputSystemState.PqEnabled.IsUnknown() && !r.InputSystemState.PqEnabled.IsNull() {
			*pqEnabled28 = r.InputSystemState.PqEnabled.ValueBool()
		} else {
			pqEnabled28 = nil
		}
		streamtags28 := make([]string, 0, len(r.InputSystemState.Streamtags))
		for _, streamtagsItem28 := range r.InputSystemState.Streamtags {
			streamtags28 = append(streamtags28, streamtagsItem28.ValueString())
		}
		connections28 := make([]shared.InputSystemStateConnections, 0, len(r.InputSystemState.Connections))
		for _, connectionsItem28 := range r.InputSystemState.Connections {
			pipeline57 := new(string)
			if !connectionsItem28.Pipeline.IsUnknown() && !connectionsItem28.Pipeline.IsNull() {
				*pipeline57 = connectionsItem28.Pipeline.ValueString()
			} else {
				pipeline57 = nil
			}
			var output29 string
			output29 = connectionsItem28.Output.ValueString()

			connections28 = append(connections28, shared.InputSystemStateConnections{
				Pipeline: pipeline57,
				Output:   output29,
			})
		}
		var pq28 *shared.InputSystemStatePq
		if r.InputSystemState.Pq != nil {
			mode35 := new(shared.InputSystemStateMode)
			if !r.InputSystemState.Pq.Mode.IsUnknown() && !r.InputSystemState.Pq.Mode.IsNull() {
				*mode35 = shared.InputSystemStateMode(r.InputSystemState.Pq.Mode.ValueString())
			} else {
				mode35 = nil
			}
			maxBufferSize28 := new(float64)
			if !r.InputSystemState.Pq.MaxBufferSize.IsUnknown() && !r.InputSystemState.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize28 = r.InputSystemState.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize28 = nil
			}
			commitFrequency28 := new(float64)
			if !r.InputSystemState.Pq.CommitFrequency.IsUnknown() && !r.InputSystemState.Pq.CommitFrequency.IsNull() {
				*commitFrequency28 = r.InputSystemState.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency28 = nil
			}
			maxFileSize28 := new(string)
			if !r.InputSystemState.Pq.MaxFileSize.IsUnknown() && !r.InputSystemState.Pq.MaxFileSize.IsNull() {
				*maxFileSize28 = r.InputSystemState.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize28 = nil
			}
			maxSize28 := new(string)
			if !r.InputSystemState.Pq.MaxSize.IsUnknown() && !r.InputSystemState.Pq.MaxSize.IsNull() {
				*maxSize28 = r.InputSystemState.Pq.MaxSize.ValueString()
			} else {
				maxSize28 = nil
			}
			path29 := new(string)
			if !r.InputSystemState.Pq.Path.IsUnknown() && !r.InputSystemState.Pq.Path.IsNull() {
				*path29 = r.InputSystemState.Pq.Path.ValueString()
			} else {
				path29 = nil
			}
			compress31 := new(shared.InputSystemStateCompression)
			if !r.InputSystemState.Pq.Compress.IsUnknown() && !r.InputSystemState.Pq.Compress.IsNull() {
				*compress31 = shared.InputSystemStateCompression(r.InputSystemState.Pq.Compress.ValueString())
			} else {
				compress31 = nil
			}
			pq28 = &shared.InputSystemStatePq{
				Mode:            mode35,
				MaxBufferSize:   maxBufferSize28,
				CommitFrequency: commitFrequency28,
				MaxFileSize:     maxFileSize28,
				MaxSize:         maxSize28,
				Path:            path29,
				Compress:        compress31,
			}
		}
		interval11 := new(float64)
		if !r.InputSystemState.Interval.IsUnknown() && !r.InputSystemState.Interval.IsNull() {
			*interval11 = r.InputSystemState.Interval.ValueFloat64()
		} else {
			interval11 = nil
		}
		metadata30 := make([]shared.InputSystemStateMetadata, 0, len(r.InputSystemState.Metadata))
		for _, metadataItem30 := range r.InputSystemState.Metadata {
			var name50 string
			name50 = metadataItem30.Name.ValueString()

			var value47 string
			value47 = metadataItem30.Value.ValueString()

			metadata30 = append(metadata30, shared.InputSystemStateMetadata{
				Name:  name50,
				Value: value47,
			})
		}
		var collectors *shared.Collectors
		if r.InputSystemState.Collectors != nil {
			var hostsfile *shared.HostsFile
			if r.InputSystemState.Collectors.Hostsfile != nil {
				enable2 := new(bool)
				if !r.InputSystemState.Collectors.Hostsfile.Enable.IsUnknown() && !r.InputSystemState.Collectors.Hostsfile.Enable.IsNull() {
					*enable2 = r.InputSystemState.Collectors.Hostsfile.Enable.ValueBool()
				} else {
					enable2 = nil
				}
				hostsfile = &shared.HostsFile{
					Enable: enable2,
				}
			}
			var interfaces *shared.InputSystemStateInterfaces
			if r.InputSystemState.Collectors.Interfaces != nil {
				enable3 := new(bool)
				if !r.InputSystemState.Collectors.Interfaces.Enable.IsUnknown() && !r.InputSystemState.Collectors.Interfaces.Enable.IsNull() {
					*enable3 = r.InputSystemState.Collectors.Interfaces.Enable.ValueBool()
				} else {
					enable3 = nil
				}
				interfaces = &shared.InputSystemStateInterfaces{
					Enable: enable3,
				}
			}
			var disk1 *shared.DisksAndFileSystems
			if r.InputSystemState.Collectors.Disk != nil {
				enable4 := new(bool)
				if !r.InputSystemState.Collectors.Disk.Enable.IsUnknown() && !r.InputSystemState.Collectors.Disk.Enable.IsNull() {
					*enable4 = r.InputSystemState.Collectors.Disk.Enable.ValueBool()
				} else {
					enable4 = nil
				}
				disk1 = &shared.DisksAndFileSystems{
					Enable: enable4,
				}
			}
			var metadata31 *shared.HostInfo
			if r.InputSystemState.Collectors.Metadata != nil {
				enable5 := new(bool)
				if !r.InputSystemState.Collectors.Metadata.Enable.IsUnknown() && !r.InputSystemState.Collectors.Metadata.Enable.IsNull() {
					*enable5 = r.InputSystemState.Collectors.Metadata.Enable.ValueBool()
				} else {
					enable5 = nil
				}
				metadata31 = &shared.HostInfo{
					Enable: enable5,
				}
			}
			var routes *shared.InputSystemStateRoutes
			if r.InputSystemState.Collectors.Routes != nil {
				enable6 := new(bool)
				if !r.InputSystemState.Collectors.Routes.Enable.IsUnknown() && !r.InputSystemState.Collectors.Routes.Enable.IsNull() {
					*enable6 = r.InputSystemState.Collectors.Routes.Enable.ValueBool()
				} else {
					enable6 = nil
				}
				routes = &shared.InputSystemStateRoutes{
					Enable: enable6,
				}
			}
			var dns *shared.DNS
			if r.InputSystemState.Collectors.DNS != nil {
				enable7 := new(bool)
				if !r.InputSystemState.Collectors.DNS.Enable.IsUnknown() && !r.InputSystemState.Collectors.DNS.Enable.IsNull() {
					*enable7 = r.InputSystemState.Collectors.DNS.Enable.ValueBool()
				} else {
					enable7 = nil
				}
				dns = &shared.DNS{
					Enable: enable7,
				}
			}
			var user *shared.UsersAndGroups
			if r.InputSystemState.Collectors.User != nil {
				enable8 := new(bool)
				if !r.InputSystemState.Collectors.User.Enable.IsUnknown() && !r.InputSystemState.Collectors.User.Enable.IsNull() {
					*enable8 = r.InputSystemState.Collectors.User.Enable.ValueBool()
				} else {
					enable8 = nil
				}
				user = &shared.UsersAndGroups{
					Enable: enable8,
				}
			}
			var firewall *shared.Firewall
			if r.InputSystemState.Collectors.Firewall != nil {
				enable9 := new(bool)
				if !r.InputSystemState.Collectors.Firewall.Enable.IsUnknown() && !r.InputSystemState.Collectors.Firewall.Enable.IsNull() {
					*enable9 = r.InputSystemState.Collectors.Firewall.Enable.ValueBool()
				} else {
					enable9 = nil
				}
				firewall = &shared.Firewall{
					Enable: enable9,
				}
			}
			var services *shared.Services
			if r.InputSystemState.Collectors.Services != nil {
				enable10 := new(bool)
				if !r.InputSystemState.Collectors.Services.Enable.IsUnknown() && !r.InputSystemState.Collectors.Services.Enable.IsNull() {
					*enable10 = r.InputSystemState.Collectors.Services.Enable.ValueBool()
				} else {
					enable10 = nil
				}
				services = &shared.Services{
					Enable: enable10,
				}
			}
			var ports *shared.ListeningPorts
			if r.InputSystemState.Collectors.Ports != nil {
				enable11 := new(bool)
				if !r.InputSystemState.Collectors.Ports.Enable.IsUnknown() && !r.InputSystemState.Collectors.Ports.Enable.IsNull() {
					*enable11 = r.InputSystemState.Collectors.Ports.Enable.ValueBool()
				} else {
					enable11 = nil
				}
				ports = &shared.ListeningPorts{
					Enable: enable11,
				}
			}
			var loginUsers *shared.LoggedInUsers
			if r.InputSystemState.Collectors.LoginUsers != nil {
				enable12 := new(bool)
				if !r.InputSystemState.Collectors.LoginUsers.Enable.IsUnknown() && !r.InputSystemState.Collectors.LoginUsers.Enable.IsNull() {
					*enable12 = r.InputSystemState.Collectors.LoginUsers.Enable.ValueBool()
				} else {
					enable12 = nil
				}
				loginUsers = &shared.LoggedInUsers{
					Enable: enable12,
				}
			}
			collectors = &shared.Collectors{
				Hostsfile:  hostsfile,
				Interfaces: interfaces,
				Disk:       disk1,
				Metadata:   metadata31,
				Routes:     routes,
				DNS:        dns,
				User:       user,
				Firewall:   firewall,
				Services:   services,
				Ports:      ports,
				LoginUsers: loginUsers,
			}
		}
		var persistence2 *shared.Persistence
		if r.InputSystemState.Persistence != nil {
			enable13 := new(bool)
			if !r.InputSystemState.Persistence.Enable.IsUnknown() && !r.InputSystemState.Persistence.Enable.IsNull() {
				*enable13 = r.InputSystemState.Persistence.Enable.ValueBool()
			} else {
				enable13 = nil
			}
			timeWindow2 := new(string)
			if !r.InputSystemState.Persistence.TimeWindow.IsUnknown() && !r.InputSystemState.Persistence.TimeWindow.IsNull() {
				*timeWindow2 = r.InputSystemState.Persistence.TimeWindow.ValueString()
			} else {
				timeWindow2 = nil
			}
			maxDataSize2 := new(string)
			if !r.InputSystemState.Persistence.MaxDataSize.IsUnknown() && !r.InputSystemState.Persistence.MaxDataSize.IsNull() {
				*maxDataSize2 = r.InputSystemState.Persistence.MaxDataSize.ValueString()
			} else {
				maxDataSize2 = nil
			}
			maxDataTime2 := new(string)
			if !r.InputSystemState.Persistence.MaxDataTime.IsUnknown() && !r.InputSystemState.Persistence.MaxDataTime.IsNull() {
				*maxDataTime2 = r.InputSystemState.Persistence.MaxDataTime.ValueString()
			} else {
				maxDataTime2 = nil
			}
			compress32 := new(shared.InputSystemStateDataCompressionFormat)
			if !r.InputSystemState.Persistence.Compress.IsUnknown() && !r.InputSystemState.Persistence.Compress.IsNull() {
				*compress32 = shared.InputSystemStateDataCompressionFormat(r.InputSystemState.Persistence.Compress.ValueString())
			} else {
				compress32 = nil
			}
			destPath1 := new(string)
			if !r.InputSystemState.Persistence.DestPath.IsUnknown() && !r.InputSystemState.Persistence.DestPath.IsNull() {
				*destPath1 = r.InputSystemState.Persistence.DestPath.ValueString()
			} else {
				destPath1 = nil
			}
			persistence2 = &shared.Persistence{
				Enable:      enable13,
				TimeWindow:  timeWindow2,
				MaxDataSize: maxDataSize2,
				MaxDataTime: maxDataTime2,
				Compress:    compress32,
				DestPath:    destPath1,
			}
		}
		description33 := new(string)
		if !r.InputSystemState.Description.IsUnknown() && !r.InputSystemState.Description.IsNull() {
			*description33 = r.InputSystemState.Description.ValueString()
		} else {
			description33 = nil
		}
		var status28 *shared.TFStatus
		if r.InputSystemState.Status != nil {
			health28 := shared.Health(r.InputSystemState.Status.Health.ValueString())
			metrics28 := make(map[string]interface{})
			for metricsKey28, metricsValue28 := range r.InputSystemState.Status.Metrics {
				var metricsInst28 interface{}
				_ = json.Unmarshal([]byte(metricsValue28.ValueString()), &metricsInst28)
				metrics28[metricsKey28] = metricsInst28
			}
			var timestamp28 float64
			timestamp28 = r.InputSystemState.Status.Timestamp.ValueFloat64()

			useStatusFromLb28 := new(bool)
			if !r.InputSystemState.Status.UseStatusFromLB.IsUnknown() && !r.InputSystemState.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb28 = r.InputSystemState.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb28 = nil
			}
			status28 = &shared.TFStatus{
				Health:          health28,
				Metrics:         metrics28,
				Timestamp:       timestamp28,
				UseStatusFromLB: useStatusFromLb28,
			}
		}
		inputSystemState = &shared.InputSystemState{
			ID:           id28,
			Type:         typeVar32,
			Disabled:     disabled57,
			Pipeline:     pipeline56,
			SendToRoutes: sendToRoutes28,
			Environment:  environment28,
			PqEnabled:    pqEnabled28,
			Streamtags:   streamtags28,
			Connections:  connections28,
			Pq:           pq28,
			Interval:     interval11,
			Metadata:     metadata30,
			Collectors:   collectors,
			Persistence:  persistence2,
			Description:  description33,
			Status:       status28,
		}
	}
	if inputSystemState != nil {
		out = shared.Input{
			InputSystemState: inputSystemState,
		}
	}
	var inputKubeMetrics *shared.InputKubeMetrics
	if r.InputKubeMetrics != nil {
		var id29 string
		id29 = r.InputKubeMetrics.ID.ValueString()

		typeVar33 := shared.InputKubeMetricsType(r.InputKubeMetrics.Type.ValueString())
		disabled58 := new(bool)
		if !r.InputKubeMetrics.Disabled.IsUnknown() && !r.InputKubeMetrics.Disabled.IsNull() {
			*disabled58 = r.InputKubeMetrics.Disabled.ValueBool()
		} else {
			disabled58 = nil
		}
		pipeline58 := new(string)
		if !r.InputKubeMetrics.Pipeline.IsUnknown() && !r.InputKubeMetrics.Pipeline.IsNull() {
			*pipeline58 = r.InputKubeMetrics.Pipeline.ValueString()
		} else {
			pipeline58 = nil
		}
		sendToRoutes29 := new(bool)
		if !r.InputKubeMetrics.SendToRoutes.IsUnknown() && !r.InputKubeMetrics.SendToRoutes.IsNull() {
			*sendToRoutes29 = r.InputKubeMetrics.SendToRoutes.ValueBool()
		} else {
			sendToRoutes29 = nil
		}
		environment29 := new(string)
		if !r.InputKubeMetrics.Environment.IsUnknown() && !r.InputKubeMetrics.Environment.IsNull() {
			*environment29 = r.InputKubeMetrics.Environment.ValueString()
		} else {
			environment29 = nil
		}
		pqEnabled29 := new(bool)
		if !r.InputKubeMetrics.PqEnabled.IsUnknown() && !r.InputKubeMetrics.PqEnabled.IsNull() {
			*pqEnabled29 = r.InputKubeMetrics.PqEnabled.ValueBool()
		} else {
			pqEnabled29 = nil
		}
		streamtags29 := make([]string, 0, len(r.InputKubeMetrics.Streamtags))
		for _, streamtagsItem29 := range r.InputKubeMetrics.Streamtags {
			streamtags29 = append(streamtags29, streamtagsItem29.ValueString())
		}
		connections29 := make([]shared.InputKubeMetricsConnections, 0, len(r.InputKubeMetrics.Connections))
		for _, connectionsItem29 := range r.InputKubeMetrics.Connections {
			pipeline59 := new(string)
			if !connectionsItem29.Pipeline.IsUnknown() && !connectionsItem29.Pipeline.IsNull() {
				*pipeline59 = connectionsItem29.Pipeline.ValueString()
			} else {
				pipeline59 = nil
			}
			var output30 string
			output30 = connectionsItem29.Output.ValueString()

			connections29 = append(connections29, shared.InputKubeMetricsConnections{
				Pipeline: pipeline59,
				Output:   output30,
			})
		}
		var pq29 *shared.InputKubeMetricsPq
		if r.InputKubeMetrics.Pq != nil {
			mode36 := new(shared.InputKubeMetricsMode)
			if !r.InputKubeMetrics.Pq.Mode.IsUnknown() && !r.InputKubeMetrics.Pq.Mode.IsNull() {
				*mode36 = shared.InputKubeMetricsMode(r.InputKubeMetrics.Pq.Mode.ValueString())
			} else {
				mode36 = nil
			}
			maxBufferSize29 := new(float64)
			if !r.InputKubeMetrics.Pq.MaxBufferSize.IsUnknown() && !r.InputKubeMetrics.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize29 = r.InputKubeMetrics.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize29 = nil
			}
			commitFrequency29 := new(float64)
			if !r.InputKubeMetrics.Pq.CommitFrequency.IsUnknown() && !r.InputKubeMetrics.Pq.CommitFrequency.IsNull() {
				*commitFrequency29 = r.InputKubeMetrics.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency29 = nil
			}
			maxFileSize29 := new(string)
			if !r.InputKubeMetrics.Pq.MaxFileSize.IsUnknown() && !r.InputKubeMetrics.Pq.MaxFileSize.IsNull() {
				*maxFileSize29 = r.InputKubeMetrics.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize29 = nil
			}
			maxSize29 := new(string)
			if !r.InputKubeMetrics.Pq.MaxSize.IsUnknown() && !r.InputKubeMetrics.Pq.MaxSize.IsNull() {
				*maxSize29 = r.InputKubeMetrics.Pq.MaxSize.ValueString()
			} else {
				maxSize29 = nil
			}
			path30 := new(string)
			if !r.InputKubeMetrics.Pq.Path.IsUnknown() && !r.InputKubeMetrics.Pq.Path.IsNull() {
				*path30 = r.InputKubeMetrics.Pq.Path.ValueString()
			} else {
				path30 = nil
			}
			compress33 := new(shared.InputKubeMetricsCompression)
			if !r.InputKubeMetrics.Pq.Compress.IsUnknown() && !r.InputKubeMetrics.Pq.Compress.IsNull() {
				*compress33 = shared.InputKubeMetricsCompression(r.InputKubeMetrics.Pq.Compress.ValueString())
			} else {
				compress33 = nil
			}
			pq29 = &shared.InputKubeMetricsPq{
				Mode:            mode36,
				MaxBufferSize:   maxBufferSize29,
				CommitFrequency: commitFrequency29,
				MaxFileSize:     maxFileSize29,
				MaxSize:         maxSize29,
				Path:            path30,
				Compress:        compress33,
			}
		}
		interval12 := new(float64)
		if !r.InputKubeMetrics.Interval.IsUnknown() && !r.InputKubeMetrics.Interval.IsNull() {
			*interval12 = r.InputKubeMetrics.Interval.ValueFloat64()
		} else {
			interval12 = nil
		}
		rules := make([]shared.InputKubeMetricsRules, 0, len(r.InputKubeMetrics.Rules))
		for _, rulesItem := range r.InputKubeMetrics.Rules {
			var filter3 string
			filter3 = rulesItem.Filter.ValueString()

			description34 := new(string)
			if !rulesItem.Description.IsUnknown() && !rulesItem.Description.IsNull() {
				*description34 = rulesItem.Description.ValueString()
			} else {
				description34 = nil
			}
			rules = append(rules, shared.InputKubeMetricsRules{
				Filter:      filter3,
				Description: description34,
			})
		}
		metadata32 := make([]shared.InputKubeMetricsMetadata, 0, len(r.InputKubeMetrics.Metadata))
		for _, metadataItem31 := range r.InputKubeMetrics.Metadata {
			var name51 string
			name51 = metadataItem31.Name.ValueString()

			var value48 string
			value48 = metadataItem31.Value.ValueString()

			metadata32 = append(metadata32, shared.InputKubeMetricsMetadata{
				Name:  name51,
				Value: value48,
			})
		}
		var persistence3 *shared.InputKubeMetricsPersistence
		if r.InputKubeMetrics.Persistence != nil {
			enable14 := new(bool)
			if !r.InputKubeMetrics.Persistence.Enable.IsUnknown() && !r.InputKubeMetrics.Persistence.Enable.IsNull() {
				*enable14 = r.InputKubeMetrics.Persistence.Enable.ValueBool()
			} else {
				enable14 = nil
			}
			timeWindow3 := new(string)
			if !r.InputKubeMetrics.Persistence.TimeWindow.IsUnknown() && !r.InputKubeMetrics.Persistence.TimeWindow.IsNull() {
				*timeWindow3 = r.InputKubeMetrics.Persistence.TimeWindow.ValueString()
			} else {
				timeWindow3 = nil
			}
			maxDataSize3 := new(string)
			if !r.InputKubeMetrics.Persistence.MaxDataSize.IsUnknown() && !r.InputKubeMetrics.Persistence.MaxDataSize.IsNull() {
				*maxDataSize3 = r.InputKubeMetrics.Persistence.MaxDataSize.ValueString()
			} else {
				maxDataSize3 = nil
			}
			maxDataTime3 := new(string)
			if !r.InputKubeMetrics.Persistence.MaxDataTime.IsUnknown() && !r.InputKubeMetrics.Persistence.MaxDataTime.IsNull() {
				*maxDataTime3 = r.InputKubeMetrics.Persistence.MaxDataTime.ValueString()
			} else {
				maxDataTime3 = nil
			}
			compress34 := new(shared.InputKubeMetricsDataCompressionFormat)
			if !r.InputKubeMetrics.Persistence.Compress.IsUnknown() && !r.InputKubeMetrics.Persistence.Compress.IsNull() {
				*compress34 = shared.InputKubeMetricsDataCompressionFormat(r.InputKubeMetrics.Persistence.Compress.ValueString())
			} else {
				compress34 = nil
			}
			destPath2 := new(string)
			if !r.InputKubeMetrics.Persistence.DestPath.IsUnknown() && !r.InputKubeMetrics.Persistence.DestPath.IsNull() {
				*destPath2 = r.InputKubeMetrics.Persistence.DestPath.ValueString()
			} else {
				destPath2 = nil
			}
			persistence3 = &shared.InputKubeMetricsPersistence{
				Enable:      enable14,
				TimeWindow:  timeWindow3,
				MaxDataSize: maxDataSize3,
				MaxDataTime: maxDataTime3,
				Compress:    compress34,
				DestPath:    destPath2,
			}
		}
		description35 := new(string)
		if !r.InputKubeMetrics.Description.IsUnknown() && !r.InputKubeMetrics.Description.IsNull() {
			*description35 = r.InputKubeMetrics.Description.ValueString()
		} else {
			description35 = nil
		}
		var status29 *shared.TFStatus
		if r.InputKubeMetrics.Status != nil {
			health29 := shared.Health(r.InputKubeMetrics.Status.Health.ValueString())
			metrics29 := make(map[string]interface{})
			for metricsKey29, metricsValue29 := range r.InputKubeMetrics.Status.Metrics {
				var metricsInst29 interface{}
				_ = json.Unmarshal([]byte(metricsValue29.ValueString()), &metricsInst29)
				metrics29[metricsKey29] = metricsInst29
			}
			var timestamp29 float64
			timestamp29 = r.InputKubeMetrics.Status.Timestamp.ValueFloat64()

			useStatusFromLb29 := new(bool)
			if !r.InputKubeMetrics.Status.UseStatusFromLB.IsUnknown() && !r.InputKubeMetrics.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb29 = r.InputKubeMetrics.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb29 = nil
			}
			status29 = &shared.TFStatus{
				Health:          health29,
				Metrics:         metrics29,
				Timestamp:       timestamp29,
				UseStatusFromLB: useStatusFromLb29,
			}
		}
		inputKubeMetrics = &shared.InputKubeMetrics{
			ID:           id29,
			Type:         typeVar33,
			Disabled:     disabled58,
			Pipeline:     pipeline58,
			SendToRoutes: sendToRoutes29,
			Environment:  environment29,
			PqEnabled:    pqEnabled29,
			Streamtags:   streamtags29,
			Connections:  connections29,
			Pq:           pq29,
			Interval:     interval12,
			Rules:        rules,
			Metadata:     metadata32,
			Persistence:  persistence3,
			Description:  description35,
			Status:       status29,
		}
	}
	if inputKubeMetrics != nil {
		out = shared.Input{
			InputKubeMetrics: inputKubeMetrics,
		}
	}
	var inputKubeLogs *shared.InputKubeLogs
	if r.InputKubeLogs != nil {
		var id30 string
		id30 = r.InputKubeLogs.ID.ValueString()

		typeVar34 := shared.InputKubeLogsType(r.InputKubeLogs.Type.ValueString())
		disabled59 := new(bool)
		if !r.InputKubeLogs.Disabled.IsUnknown() && !r.InputKubeLogs.Disabled.IsNull() {
			*disabled59 = r.InputKubeLogs.Disabled.ValueBool()
		} else {
			disabled59 = nil
		}
		pipeline60 := new(string)
		if !r.InputKubeLogs.Pipeline.IsUnknown() && !r.InputKubeLogs.Pipeline.IsNull() {
			*pipeline60 = r.InputKubeLogs.Pipeline.ValueString()
		} else {
			pipeline60 = nil
		}
		sendToRoutes30 := new(bool)
		if !r.InputKubeLogs.SendToRoutes.IsUnknown() && !r.InputKubeLogs.SendToRoutes.IsNull() {
			*sendToRoutes30 = r.InputKubeLogs.SendToRoutes.ValueBool()
		} else {
			sendToRoutes30 = nil
		}
		environment30 := new(string)
		if !r.InputKubeLogs.Environment.IsUnknown() && !r.InputKubeLogs.Environment.IsNull() {
			*environment30 = r.InputKubeLogs.Environment.ValueString()
		} else {
			environment30 = nil
		}
		pqEnabled30 := new(bool)
		if !r.InputKubeLogs.PqEnabled.IsUnknown() && !r.InputKubeLogs.PqEnabled.IsNull() {
			*pqEnabled30 = r.InputKubeLogs.PqEnabled.ValueBool()
		} else {
			pqEnabled30 = nil
		}
		streamtags30 := make([]string, 0, len(r.InputKubeLogs.Streamtags))
		for _, streamtagsItem30 := range r.InputKubeLogs.Streamtags {
			streamtags30 = append(streamtags30, streamtagsItem30.ValueString())
		}
		connections30 := make([]shared.InputKubeLogsConnections, 0, len(r.InputKubeLogs.Connections))
		for _, connectionsItem30 := range r.InputKubeLogs.Connections {
			pipeline61 := new(string)
			if !connectionsItem30.Pipeline.IsUnknown() && !connectionsItem30.Pipeline.IsNull() {
				*pipeline61 = connectionsItem30.Pipeline.ValueString()
			} else {
				pipeline61 = nil
			}
			var output31 string
			output31 = connectionsItem30.Output.ValueString()

			connections30 = append(connections30, shared.InputKubeLogsConnections{
				Pipeline: pipeline61,
				Output:   output31,
			})
		}
		var pq30 *shared.InputKubeLogsPq
		if r.InputKubeLogs.Pq != nil {
			mode37 := new(shared.InputKubeLogsMode)
			if !r.InputKubeLogs.Pq.Mode.IsUnknown() && !r.InputKubeLogs.Pq.Mode.IsNull() {
				*mode37 = shared.InputKubeLogsMode(r.InputKubeLogs.Pq.Mode.ValueString())
			} else {
				mode37 = nil
			}
			maxBufferSize30 := new(float64)
			if !r.InputKubeLogs.Pq.MaxBufferSize.IsUnknown() && !r.InputKubeLogs.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize30 = r.InputKubeLogs.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize30 = nil
			}
			commitFrequency30 := new(float64)
			if !r.InputKubeLogs.Pq.CommitFrequency.IsUnknown() && !r.InputKubeLogs.Pq.CommitFrequency.IsNull() {
				*commitFrequency30 = r.InputKubeLogs.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency30 = nil
			}
			maxFileSize30 := new(string)
			if !r.InputKubeLogs.Pq.MaxFileSize.IsUnknown() && !r.InputKubeLogs.Pq.MaxFileSize.IsNull() {
				*maxFileSize30 = r.InputKubeLogs.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize30 = nil
			}
			maxSize30 := new(string)
			if !r.InputKubeLogs.Pq.MaxSize.IsUnknown() && !r.InputKubeLogs.Pq.MaxSize.IsNull() {
				*maxSize30 = r.InputKubeLogs.Pq.MaxSize.ValueString()
			} else {
				maxSize30 = nil
			}
			path31 := new(string)
			if !r.InputKubeLogs.Pq.Path.IsUnknown() && !r.InputKubeLogs.Pq.Path.IsNull() {
				*path31 = r.InputKubeLogs.Pq.Path.ValueString()
			} else {
				path31 = nil
			}
			compress35 := new(shared.InputKubeLogsCompression)
			if !r.InputKubeLogs.Pq.Compress.IsUnknown() && !r.InputKubeLogs.Pq.Compress.IsNull() {
				*compress35 = shared.InputKubeLogsCompression(r.InputKubeLogs.Pq.Compress.ValueString())
			} else {
				compress35 = nil
			}
			pq30 = &shared.InputKubeLogsPq{
				Mode:            mode37,
				MaxBufferSize:   maxBufferSize30,
				CommitFrequency: commitFrequency30,
				MaxFileSize:     maxFileSize30,
				MaxSize:         maxSize30,
				Path:            path31,
				Compress:        compress35,
			}
		}
		interval13 := new(float64)
		if !r.InputKubeLogs.Interval.IsUnknown() && !r.InputKubeLogs.Interval.IsNull() {
			*interval13 = r.InputKubeLogs.Interval.ValueFloat64()
		} else {
			interval13 = nil
		}
		rules1 := make([]shared.InputKubeLogsRules, 0, len(r.InputKubeLogs.Rules))
		for _, rulesItem1 := range r.InputKubeLogs.Rules {
			var filter4 string
			filter4 = rulesItem1.Filter.ValueString()

			description36 := new(string)
			if !rulesItem1.Description.IsUnknown() && !rulesItem1.Description.IsNull() {
				*description36 = rulesItem1.Description.ValueString()
			} else {
				description36 = nil
			}
			rules1 = append(rules1, shared.InputKubeLogsRules{
				Filter:      filter4,
				Description: description36,
			})
		}
		timestamps := new(bool)
		if !r.InputKubeLogs.Timestamps.IsUnknown() && !r.InputKubeLogs.Timestamps.IsNull() {
			*timestamps = r.InputKubeLogs.Timestamps.ValueBool()
		} else {
			timestamps = nil
		}
		metadata33 := make([]shared.InputKubeLogsMetadata, 0, len(r.InputKubeLogs.Metadata))
		for _, metadataItem32 := range r.InputKubeLogs.Metadata {
			var name52 string
			name52 = metadataItem32.Name.ValueString()

			var value49 string
			value49 = metadataItem32.Value.ValueString()

			metadata33 = append(metadata33, shared.InputKubeLogsMetadata{
				Name:  name52,
				Value: value49,
			})
		}
		var persistence4 *shared.InputKubeLogsDiskSpooling
		if r.InputKubeLogs.Persistence != nil {
			enable15 := new(bool)
			if !r.InputKubeLogs.Persistence.Enable.IsUnknown() && !r.InputKubeLogs.Persistence.Enable.IsNull() {
				*enable15 = r.InputKubeLogs.Persistence.Enable.ValueBool()
			} else {
				enable15 = nil
			}
			timeWindow4 := new(string)
			if !r.InputKubeLogs.Persistence.TimeWindow.IsUnknown() && !r.InputKubeLogs.Persistence.TimeWindow.IsNull() {
				*timeWindow4 = r.InputKubeLogs.Persistence.TimeWindow.ValueString()
			} else {
				timeWindow4 = nil
			}
			maxDataSize4 := new(string)
			if !r.InputKubeLogs.Persistence.MaxDataSize.IsUnknown() && !r.InputKubeLogs.Persistence.MaxDataSize.IsNull() {
				*maxDataSize4 = r.InputKubeLogs.Persistence.MaxDataSize.ValueString()
			} else {
				maxDataSize4 = nil
			}
			maxDataTime4 := new(string)
			if !r.InputKubeLogs.Persistence.MaxDataTime.IsUnknown() && !r.InputKubeLogs.Persistence.MaxDataTime.IsNull() {
				*maxDataTime4 = r.InputKubeLogs.Persistence.MaxDataTime.ValueString()
			} else {
				maxDataTime4 = nil
			}
			compress36 := new(shared.InputKubeLogsInputCompression)
			if !r.InputKubeLogs.Persistence.Compress.IsUnknown() && !r.InputKubeLogs.Persistence.Compress.IsNull() {
				*compress36 = shared.InputKubeLogsInputCompression(r.InputKubeLogs.Persistence.Compress.ValueString())
			} else {
				compress36 = nil
			}
			persistence4 = &shared.InputKubeLogsDiskSpooling{
				Enable:      enable15,
				TimeWindow:  timeWindow4,
				MaxDataSize: maxDataSize4,
				MaxDataTime: maxDataTime4,
				Compress:    compress36,
			}
		}
		breakerRulesets6 := make([]string, 0, len(r.InputKubeLogs.BreakerRulesets))
		for _, breakerRulesetsItem6 := range r.InputKubeLogs.BreakerRulesets {
			breakerRulesets6 = append(breakerRulesets6, breakerRulesetsItem6.ValueString())
		}
		staleChannelFlushMs6 := new(float64)
		if !r.InputKubeLogs.StaleChannelFlushMs.IsUnknown() && !r.InputKubeLogs.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs6 = r.InputKubeLogs.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs6 = nil
		}
		enableLoadBalancing2 := new(bool)
		if !r.InputKubeLogs.EnableLoadBalancing.IsUnknown() && !r.InputKubeLogs.EnableLoadBalancing.IsNull() {
			*enableLoadBalancing2 = r.InputKubeLogs.EnableLoadBalancing.ValueBool()
		} else {
			enableLoadBalancing2 = nil
		}
		description37 := new(string)
		if !r.InputKubeLogs.Description.IsUnknown() && !r.InputKubeLogs.Description.IsNull() {
			*description37 = r.InputKubeLogs.Description.ValueString()
		} else {
			description37 = nil
		}
		var status30 *shared.TFStatus
		if r.InputKubeLogs.Status != nil {
			health30 := shared.Health(r.InputKubeLogs.Status.Health.ValueString())
			metrics30 := make(map[string]interface{})
			for metricsKey30, metricsValue30 := range r.InputKubeLogs.Status.Metrics {
				var metricsInst30 interface{}
				_ = json.Unmarshal([]byte(metricsValue30.ValueString()), &metricsInst30)
				metrics30[metricsKey30] = metricsInst30
			}
			var timestamp30 float64
			timestamp30 = r.InputKubeLogs.Status.Timestamp.ValueFloat64()

			useStatusFromLb30 := new(bool)
			if !r.InputKubeLogs.Status.UseStatusFromLB.IsUnknown() && !r.InputKubeLogs.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb30 = r.InputKubeLogs.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb30 = nil
			}
			status30 = &shared.TFStatus{
				Health:          health30,
				Metrics:         metrics30,
				Timestamp:       timestamp30,
				UseStatusFromLB: useStatusFromLb30,
			}
		}
		inputKubeLogs = &shared.InputKubeLogs{
			ID:                  id30,
			Type:                typeVar34,
			Disabled:            disabled59,
			Pipeline:            pipeline60,
			SendToRoutes:        sendToRoutes30,
			Environment:         environment30,
			PqEnabled:           pqEnabled30,
			Streamtags:          streamtags30,
			Connections:         connections30,
			Pq:                  pq30,
			Interval:            interval13,
			Rules:               rules1,
			Timestamps:          timestamps,
			Metadata:            metadata33,
			Persistence:         persistence4,
			BreakerRulesets:     breakerRulesets6,
			StaleChannelFlushMs: staleChannelFlushMs6,
			EnableLoadBalancing: enableLoadBalancing2,
			Description:         description37,
			Status:              status30,
		}
	}
	if inputKubeLogs != nil {
		out = shared.Input{
			InputKubeLogs: inputKubeLogs,
		}
	}
	var inputKubeEvents *shared.InputKubeEvents
	if r.InputKubeEvents != nil {
		var id31 string
		id31 = r.InputKubeEvents.ID.ValueString()

		typeVar35 := shared.InputKubeEventsType(r.InputKubeEvents.Type.ValueString())
		disabled60 := new(bool)
		if !r.InputKubeEvents.Disabled.IsUnknown() && !r.InputKubeEvents.Disabled.IsNull() {
			*disabled60 = r.InputKubeEvents.Disabled.ValueBool()
		} else {
			disabled60 = nil
		}
		pipeline62 := new(string)
		if !r.InputKubeEvents.Pipeline.IsUnknown() && !r.InputKubeEvents.Pipeline.IsNull() {
			*pipeline62 = r.InputKubeEvents.Pipeline.ValueString()
		} else {
			pipeline62 = nil
		}
		sendToRoutes31 := new(bool)
		if !r.InputKubeEvents.SendToRoutes.IsUnknown() && !r.InputKubeEvents.SendToRoutes.IsNull() {
			*sendToRoutes31 = r.InputKubeEvents.SendToRoutes.ValueBool()
		} else {
			sendToRoutes31 = nil
		}
		environment31 := new(string)
		if !r.InputKubeEvents.Environment.IsUnknown() && !r.InputKubeEvents.Environment.IsNull() {
			*environment31 = r.InputKubeEvents.Environment.ValueString()
		} else {
			environment31 = nil
		}
		pqEnabled31 := new(bool)
		if !r.InputKubeEvents.PqEnabled.IsUnknown() && !r.InputKubeEvents.PqEnabled.IsNull() {
			*pqEnabled31 = r.InputKubeEvents.PqEnabled.ValueBool()
		} else {
			pqEnabled31 = nil
		}
		streamtags31 := make([]string, 0, len(r.InputKubeEvents.Streamtags))
		for _, streamtagsItem31 := range r.InputKubeEvents.Streamtags {
			streamtags31 = append(streamtags31, streamtagsItem31.ValueString())
		}
		connections31 := make([]shared.InputKubeEventsConnections, 0, len(r.InputKubeEvents.Connections))
		for _, connectionsItem31 := range r.InputKubeEvents.Connections {
			pipeline63 := new(string)
			if !connectionsItem31.Pipeline.IsUnknown() && !connectionsItem31.Pipeline.IsNull() {
				*pipeline63 = connectionsItem31.Pipeline.ValueString()
			} else {
				pipeline63 = nil
			}
			var output32 string
			output32 = connectionsItem31.Output.ValueString()

			connections31 = append(connections31, shared.InputKubeEventsConnections{
				Pipeline: pipeline63,
				Output:   output32,
			})
		}
		var pq31 *shared.InputKubeEventsPq
		if r.InputKubeEvents.Pq != nil {
			mode38 := new(shared.InputKubeEventsMode)
			if !r.InputKubeEvents.Pq.Mode.IsUnknown() && !r.InputKubeEvents.Pq.Mode.IsNull() {
				*mode38 = shared.InputKubeEventsMode(r.InputKubeEvents.Pq.Mode.ValueString())
			} else {
				mode38 = nil
			}
			maxBufferSize31 := new(float64)
			if !r.InputKubeEvents.Pq.MaxBufferSize.IsUnknown() && !r.InputKubeEvents.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize31 = r.InputKubeEvents.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize31 = nil
			}
			commitFrequency31 := new(float64)
			if !r.InputKubeEvents.Pq.CommitFrequency.IsUnknown() && !r.InputKubeEvents.Pq.CommitFrequency.IsNull() {
				*commitFrequency31 = r.InputKubeEvents.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency31 = nil
			}
			maxFileSize31 := new(string)
			if !r.InputKubeEvents.Pq.MaxFileSize.IsUnknown() && !r.InputKubeEvents.Pq.MaxFileSize.IsNull() {
				*maxFileSize31 = r.InputKubeEvents.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize31 = nil
			}
			maxSize31 := new(string)
			if !r.InputKubeEvents.Pq.MaxSize.IsUnknown() && !r.InputKubeEvents.Pq.MaxSize.IsNull() {
				*maxSize31 = r.InputKubeEvents.Pq.MaxSize.ValueString()
			} else {
				maxSize31 = nil
			}
			path32 := new(string)
			if !r.InputKubeEvents.Pq.Path.IsUnknown() && !r.InputKubeEvents.Pq.Path.IsNull() {
				*path32 = r.InputKubeEvents.Pq.Path.ValueString()
			} else {
				path32 = nil
			}
			compress37 := new(shared.InputKubeEventsCompression)
			if !r.InputKubeEvents.Pq.Compress.IsUnknown() && !r.InputKubeEvents.Pq.Compress.IsNull() {
				*compress37 = shared.InputKubeEventsCompression(r.InputKubeEvents.Pq.Compress.ValueString())
			} else {
				compress37 = nil
			}
			pq31 = &shared.InputKubeEventsPq{
				Mode:            mode38,
				MaxBufferSize:   maxBufferSize31,
				CommitFrequency: commitFrequency31,
				MaxFileSize:     maxFileSize31,
				MaxSize:         maxSize31,
				Path:            path32,
				Compress:        compress37,
			}
		}
		rules2 := make([]shared.InputKubeEventsRules, 0, len(r.InputKubeEvents.Rules))
		for _, rulesItem2 := range r.InputKubeEvents.Rules {
			var filter5 string
			filter5 = rulesItem2.Filter.ValueString()

			description38 := new(string)
			if !rulesItem2.Description.IsUnknown() && !rulesItem2.Description.IsNull() {
				*description38 = rulesItem2.Description.ValueString()
			} else {
				description38 = nil
			}
			rules2 = append(rules2, shared.InputKubeEventsRules{
				Filter:      filter5,
				Description: description38,
			})
		}
		metadata34 := make([]shared.InputKubeEventsMetadata, 0, len(r.InputKubeEvents.Metadata))
		for _, metadataItem33 := range r.InputKubeEvents.Metadata {
			var name53 string
			name53 = metadataItem33.Name.ValueString()

			var value50 string
			value50 = metadataItem33.Value.ValueString()

			metadata34 = append(metadata34, shared.InputKubeEventsMetadata{
				Name:  name53,
				Value: value50,
			})
		}
		description39 := new(string)
		if !r.InputKubeEvents.Description.IsUnknown() && !r.InputKubeEvents.Description.IsNull() {
			*description39 = r.InputKubeEvents.Description.ValueString()
		} else {
			description39 = nil
		}
		var status31 *shared.TFStatus
		if r.InputKubeEvents.Status != nil {
			health31 := shared.Health(r.InputKubeEvents.Status.Health.ValueString())
			metrics31 := make(map[string]interface{})
			for metricsKey31, metricsValue31 := range r.InputKubeEvents.Status.Metrics {
				var metricsInst31 interface{}
				_ = json.Unmarshal([]byte(metricsValue31.ValueString()), &metricsInst31)
				metrics31[metricsKey31] = metricsInst31
			}
			var timestamp31 float64
			timestamp31 = r.InputKubeEvents.Status.Timestamp.ValueFloat64()

			useStatusFromLb31 := new(bool)
			if !r.InputKubeEvents.Status.UseStatusFromLB.IsUnknown() && !r.InputKubeEvents.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb31 = r.InputKubeEvents.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb31 = nil
			}
			status31 = &shared.TFStatus{
				Health:          health31,
				Metrics:         metrics31,
				Timestamp:       timestamp31,
				UseStatusFromLB: useStatusFromLb31,
			}
		}
		inputKubeEvents = &shared.InputKubeEvents{
			ID:           id31,
			Type:         typeVar35,
			Disabled:     disabled60,
			Pipeline:     pipeline62,
			SendToRoutes: sendToRoutes31,
			Environment:  environment31,
			PqEnabled:    pqEnabled31,
			Streamtags:   streamtags31,
			Connections:  connections31,
			Pq:           pq31,
			Rules:        rules2,
			Metadata:     metadata34,
			Description:  description39,
			Status:       status31,
		}
	}
	if inputKubeEvents != nil {
		out = shared.Input{
			InputKubeEvents: inputKubeEvents,
		}
	}
	var inputWindowsMetrics *shared.InputWindowsMetrics
	if r.InputWindowsMetrics != nil {
		var id32 string
		id32 = r.InputWindowsMetrics.ID.ValueString()

		typeVar36 := shared.InputWindowsMetricsType(r.InputWindowsMetrics.Type.ValueString())
		disabled61 := new(bool)
		if !r.InputWindowsMetrics.Disabled.IsUnknown() && !r.InputWindowsMetrics.Disabled.IsNull() {
			*disabled61 = r.InputWindowsMetrics.Disabled.ValueBool()
		} else {
			disabled61 = nil
		}
		pipeline64 := new(string)
		if !r.InputWindowsMetrics.Pipeline.IsUnknown() && !r.InputWindowsMetrics.Pipeline.IsNull() {
			*pipeline64 = r.InputWindowsMetrics.Pipeline.ValueString()
		} else {
			pipeline64 = nil
		}
		sendToRoutes32 := new(bool)
		if !r.InputWindowsMetrics.SendToRoutes.IsUnknown() && !r.InputWindowsMetrics.SendToRoutes.IsNull() {
			*sendToRoutes32 = r.InputWindowsMetrics.SendToRoutes.ValueBool()
		} else {
			sendToRoutes32 = nil
		}
		environment32 := new(string)
		if !r.InputWindowsMetrics.Environment.IsUnknown() && !r.InputWindowsMetrics.Environment.IsNull() {
			*environment32 = r.InputWindowsMetrics.Environment.ValueString()
		} else {
			environment32 = nil
		}
		pqEnabled32 := new(bool)
		if !r.InputWindowsMetrics.PqEnabled.IsUnknown() && !r.InputWindowsMetrics.PqEnabled.IsNull() {
			*pqEnabled32 = r.InputWindowsMetrics.PqEnabled.ValueBool()
		} else {
			pqEnabled32 = nil
		}
		streamtags32 := make([]string, 0, len(r.InputWindowsMetrics.Streamtags))
		for _, streamtagsItem32 := range r.InputWindowsMetrics.Streamtags {
			streamtags32 = append(streamtags32, streamtagsItem32.ValueString())
		}
		connections32 := make([]shared.InputWindowsMetricsConnections, 0, len(r.InputWindowsMetrics.Connections))
		for _, connectionsItem32 := range r.InputWindowsMetrics.Connections {
			pipeline65 := new(string)
			if !connectionsItem32.Pipeline.IsUnknown() && !connectionsItem32.Pipeline.IsNull() {
				*pipeline65 = connectionsItem32.Pipeline.ValueString()
			} else {
				pipeline65 = nil
			}
			var output33 string
			output33 = connectionsItem32.Output.ValueString()

			connections32 = append(connections32, shared.InputWindowsMetricsConnections{
				Pipeline: pipeline65,
				Output:   output33,
			})
		}
		var pq32 *shared.InputWindowsMetricsPq
		if r.InputWindowsMetrics.Pq != nil {
			mode39 := new(shared.InputWindowsMetricsInputMode)
			if !r.InputWindowsMetrics.Pq.Mode.IsUnknown() && !r.InputWindowsMetrics.Pq.Mode.IsNull() {
				*mode39 = shared.InputWindowsMetricsInputMode(r.InputWindowsMetrics.Pq.Mode.ValueString())
			} else {
				mode39 = nil
			}
			maxBufferSize32 := new(float64)
			if !r.InputWindowsMetrics.Pq.MaxBufferSize.IsUnknown() && !r.InputWindowsMetrics.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize32 = r.InputWindowsMetrics.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize32 = nil
			}
			commitFrequency32 := new(float64)
			if !r.InputWindowsMetrics.Pq.CommitFrequency.IsUnknown() && !r.InputWindowsMetrics.Pq.CommitFrequency.IsNull() {
				*commitFrequency32 = r.InputWindowsMetrics.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency32 = nil
			}
			maxFileSize32 := new(string)
			if !r.InputWindowsMetrics.Pq.MaxFileSize.IsUnknown() && !r.InputWindowsMetrics.Pq.MaxFileSize.IsNull() {
				*maxFileSize32 = r.InputWindowsMetrics.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize32 = nil
			}
			maxSize32 := new(string)
			if !r.InputWindowsMetrics.Pq.MaxSize.IsUnknown() && !r.InputWindowsMetrics.Pq.MaxSize.IsNull() {
				*maxSize32 = r.InputWindowsMetrics.Pq.MaxSize.ValueString()
			} else {
				maxSize32 = nil
			}
			path33 := new(string)
			if !r.InputWindowsMetrics.Pq.Path.IsUnknown() && !r.InputWindowsMetrics.Pq.Path.IsNull() {
				*path33 = r.InputWindowsMetrics.Pq.Path.ValueString()
			} else {
				path33 = nil
			}
			compress38 := new(shared.InputWindowsMetricsCompression)
			if !r.InputWindowsMetrics.Pq.Compress.IsUnknown() && !r.InputWindowsMetrics.Pq.Compress.IsNull() {
				*compress38 = shared.InputWindowsMetricsCompression(r.InputWindowsMetrics.Pq.Compress.ValueString())
			} else {
				compress38 = nil
			}
			pq32 = &shared.InputWindowsMetricsPq{
				Mode:            mode39,
				MaxBufferSize:   maxBufferSize32,
				CommitFrequency: commitFrequency32,
				MaxFileSize:     maxFileSize32,
				MaxSize:         maxSize32,
				Path:            path33,
				Compress:        compress38,
			}
		}
		interval14 := new(float64)
		if !r.InputWindowsMetrics.Interval.IsUnknown() && !r.InputWindowsMetrics.Interval.IsNull() {
			*interval14 = r.InputWindowsMetrics.Interval.ValueFloat64()
		} else {
			interval14 = nil
		}
		var host14 *shared.InputWindowsMetricsHost
		if r.InputWindowsMetrics.Host != nil {
			mode40 := new(shared.InputWindowsMetricsMode)
			if !r.InputWindowsMetrics.Host.Mode.IsUnknown() && !r.InputWindowsMetrics.Host.Mode.IsNull() {
				*mode40 = shared.InputWindowsMetricsMode(r.InputWindowsMetrics.Host.Mode.ValueString())
			} else {
				mode40 = nil
			}
			var custom1 *shared.InputWindowsMetricsCustom
			if r.InputWindowsMetrics.Host.Custom != nil {
				var system1 *shared.InputWindowsMetricsSystem
				if r.InputWindowsMetrics.Host.Custom.System != nil {
					mode41 := new(shared.InputWindowsMetricsInputHostMode)
					if !r.InputWindowsMetrics.Host.Custom.System.Mode.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.System.Mode.IsNull() {
						*mode41 = shared.InputWindowsMetricsInputHostMode(r.InputWindowsMetrics.Host.Custom.System.Mode.ValueString())
					} else {
						mode41 = nil
					}
					detail5 := new(bool)
					if !r.InputWindowsMetrics.Host.Custom.System.Detail.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.System.Detail.IsNull() {
						*detail5 = r.InputWindowsMetrics.Host.Custom.System.Detail.ValueBool()
					} else {
						detail5 = nil
					}
					system1 = &shared.InputWindowsMetricsSystem{
						Mode:   mode41,
						Detail: detail5,
					}
				}
				var cpu1 *shared.InputWindowsMetricsCPU
				if r.InputWindowsMetrics.Host.Custom.CPU != nil {
					mode42 := new(shared.InputWindowsMetricsInputHostCustomMode)
					if !r.InputWindowsMetrics.Host.Custom.CPU.Mode.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.CPU.Mode.IsNull() {
						*mode42 = shared.InputWindowsMetricsInputHostCustomMode(r.InputWindowsMetrics.Host.Custom.CPU.Mode.ValueString())
					} else {
						mode42 = nil
					}
					perCpu1 := new(bool)
					if !r.InputWindowsMetrics.Host.Custom.CPU.PerCPU.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.CPU.PerCPU.IsNull() {
						*perCpu1 = r.InputWindowsMetrics.Host.Custom.CPU.PerCPU.ValueBool()
					} else {
						perCpu1 = nil
					}
					detail6 := new(bool)
					if !r.InputWindowsMetrics.Host.Custom.CPU.Detail.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.CPU.Detail.IsNull() {
						*detail6 = r.InputWindowsMetrics.Host.Custom.CPU.Detail.ValueBool()
					} else {
						detail6 = nil
					}
					timeVar1 := new(bool)
					if !r.InputWindowsMetrics.Host.Custom.CPU.Time.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.CPU.Time.IsNull() {
						*timeVar1 = r.InputWindowsMetrics.Host.Custom.CPU.Time.ValueBool()
					} else {
						timeVar1 = nil
					}
					cpu1 = &shared.InputWindowsMetricsCPU{
						Mode:   mode42,
						PerCPU: perCpu1,
						Detail: detail6,
						Time:   timeVar1,
					}
				}
				var memory1 *shared.InputWindowsMetricsMemory
				if r.InputWindowsMetrics.Host.Custom.Memory != nil {
					mode43 := new(shared.InputWindowsMetricsInputHostCustomMemoryMode)
					if !r.InputWindowsMetrics.Host.Custom.Memory.Mode.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.Memory.Mode.IsNull() {
						*mode43 = shared.InputWindowsMetricsInputHostCustomMemoryMode(r.InputWindowsMetrics.Host.Custom.Memory.Mode.ValueString())
					} else {
						mode43 = nil
					}
					detail7 := new(bool)
					if !r.InputWindowsMetrics.Host.Custom.Memory.Detail.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.Memory.Detail.IsNull() {
						*detail7 = r.InputWindowsMetrics.Host.Custom.Memory.Detail.ValueBool()
					} else {
						detail7 = nil
					}
					memory1 = &shared.InputWindowsMetricsMemory{
						Mode:   mode43,
						Detail: detail7,
					}
				}
				var network1 *shared.InputWindowsMetricsNetwork
				if r.InputWindowsMetrics.Host.Custom.Network != nil {
					mode44 := new(shared.InputWindowsMetricsInputHostCustomNetworkMode)
					if !r.InputWindowsMetrics.Host.Custom.Network.Mode.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.Network.Mode.IsNull() {
						*mode44 = shared.InputWindowsMetricsInputHostCustomNetworkMode(r.InputWindowsMetrics.Host.Custom.Network.Mode.ValueString())
					} else {
						mode44 = nil
					}
					devices2 := make([]string, 0, len(r.InputWindowsMetrics.Host.Custom.Network.Devices))
					for _, devicesItem2 := range r.InputWindowsMetrics.Host.Custom.Network.Devices {
						devices2 = append(devices2, devicesItem2.ValueString())
					}
					perInterface1 := new(bool)
					if !r.InputWindowsMetrics.Host.Custom.Network.PerInterface.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.Network.PerInterface.IsNull() {
						*perInterface1 = r.InputWindowsMetrics.Host.Custom.Network.PerInterface.ValueBool()
					} else {
						perInterface1 = nil
					}
					detail8 := new(bool)
					if !r.InputWindowsMetrics.Host.Custom.Network.Detail.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.Network.Detail.IsNull() {
						*detail8 = r.InputWindowsMetrics.Host.Custom.Network.Detail.ValueBool()
					} else {
						detail8 = nil
					}
					network1 = &shared.InputWindowsMetricsNetwork{
						Mode:         mode44,
						Devices:      devices2,
						PerInterface: perInterface1,
						Detail:       detail8,
					}
				}
				var disk2 *shared.InputWindowsMetricsDisk
				if r.InputWindowsMetrics.Host.Custom.Disk != nil {
					mode45 := new(shared.InputWindowsMetricsInputHostCustomDiskMode)
					if !r.InputWindowsMetrics.Host.Custom.Disk.Mode.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.Disk.Mode.IsNull() {
						*mode45 = shared.InputWindowsMetricsInputHostCustomDiskMode(r.InputWindowsMetrics.Host.Custom.Disk.Mode.ValueString())
					} else {
						mode45 = nil
					}
					volumes := make([]string, 0, len(r.InputWindowsMetrics.Host.Custom.Disk.Volumes))
					for _, volumesItem := range r.InputWindowsMetrics.Host.Custom.Disk.Volumes {
						volumes = append(volumes, volumesItem.ValueString())
					}
					perVolume := new(bool)
					if !r.InputWindowsMetrics.Host.Custom.Disk.PerVolume.IsUnknown() && !r.InputWindowsMetrics.Host.Custom.Disk.PerVolume.IsNull() {
						*perVolume = r.InputWindowsMetrics.Host.Custom.Disk.PerVolume.ValueBool()
					} else {
						perVolume = nil
					}
					disk2 = &shared.InputWindowsMetricsDisk{
						Mode:      mode45,
						Volumes:   volumes,
						PerVolume: perVolume,
					}
				}
				custom1 = &shared.InputWindowsMetricsCustom{
					System:  system1,
					CPU:     cpu1,
					Memory:  memory1,
					Network: network1,
					Disk:    disk2,
				}
			}
			host14 = &shared.InputWindowsMetricsHost{
				Mode:   mode40,
				Custom: custom1,
			}
		}
		var process1 *shared.InputWindowsMetricsProcess
		if r.InputWindowsMetrics.Process != nil {
			sets1 := make([]shared.InputWindowsMetricsSets, 0, len(r.InputWindowsMetrics.Process.Sets))
			for _, setsItem1 := range r.InputWindowsMetrics.Process.Sets {
				var name54 string
				name54 = setsItem1.Name.ValueString()

				var filter6 string
				filter6 = setsItem1.Filter.ValueString()

				includeChildren1 := new(bool)
				if !setsItem1.IncludeChildren.IsUnknown() && !setsItem1.IncludeChildren.IsNull() {
					*includeChildren1 = setsItem1.IncludeChildren.ValueBool()
				} else {
					includeChildren1 = nil
				}
				sets1 = append(sets1, shared.InputWindowsMetricsSets{
					Name:            name54,
					Filter:          filter6,
					IncludeChildren: includeChildren1,
				})
			}
			process1 = &shared.InputWindowsMetricsProcess{
				Sets: sets1,
			}
		}
		metadata35 := make([]shared.InputWindowsMetricsMetadata, 0, len(r.InputWindowsMetrics.Metadata))
		for _, metadataItem34 := range r.InputWindowsMetrics.Metadata {
			var name55 string
			name55 = metadataItem34.Name.ValueString()

			var value51 string
			value51 = metadataItem34.Value.ValueString()

			metadata35 = append(metadata35, shared.InputWindowsMetricsMetadata{
				Name:  name55,
				Value: value51,
			})
		}
		var persistence5 *shared.InputWindowsMetricsPersistence
		if r.InputWindowsMetrics.Persistence != nil {
			enable16 := new(bool)
			if !r.InputWindowsMetrics.Persistence.Enable.IsUnknown() && !r.InputWindowsMetrics.Persistence.Enable.IsNull() {
				*enable16 = r.InputWindowsMetrics.Persistence.Enable.ValueBool()
			} else {
				enable16 = nil
			}
			timeWindow5 := new(string)
			if !r.InputWindowsMetrics.Persistence.TimeWindow.IsUnknown() && !r.InputWindowsMetrics.Persistence.TimeWindow.IsNull() {
				*timeWindow5 = r.InputWindowsMetrics.Persistence.TimeWindow.ValueString()
			} else {
				timeWindow5 = nil
			}
			maxDataSize5 := new(string)
			if !r.InputWindowsMetrics.Persistence.MaxDataSize.IsUnknown() && !r.InputWindowsMetrics.Persistence.MaxDataSize.IsNull() {
				*maxDataSize5 = r.InputWindowsMetrics.Persistence.MaxDataSize.ValueString()
			} else {
				maxDataSize5 = nil
			}
			maxDataTime5 := new(string)
			if !r.InputWindowsMetrics.Persistence.MaxDataTime.IsUnknown() && !r.InputWindowsMetrics.Persistence.MaxDataTime.IsNull() {
				*maxDataTime5 = r.InputWindowsMetrics.Persistence.MaxDataTime.ValueString()
			} else {
				maxDataTime5 = nil
			}
			compress39 := new(shared.InputWindowsMetricsDataCompressionFormat)
			if !r.InputWindowsMetrics.Persistence.Compress.IsUnknown() && !r.InputWindowsMetrics.Persistence.Compress.IsNull() {
				*compress39 = shared.InputWindowsMetricsDataCompressionFormat(r.InputWindowsMetrics.Persistence.Compress.ValueString())
			} else {
				compress39 = nil
			}
			destPath3 := new(string)
			if !r.InputWindowsMetrics.Persistence.DestPath.IsUnknown() && !r.InputWindowsMetrics.Persistence.DestPath.IsNull() {
				*destPath3 = r.InputWindowsMetrics.Persistence.DestPath.ValueString()
			} else {
				destPath3 = nil
			}
			persistence5 = &shared.InputWindowsMetricsPersistence{
				Enable:      enable16,
				TimeWindow:  timeWindow5,
				MaxDataSize: maxDataSize5,
				MaxDataTime: maxDataTime5,
				Compress:    compress39,
				DestPath:    destPath3,
			}
		}
		disableNativeModule := new(bool)
		if !r.InputWindowsMetrics.DisableNativeModule.IsUnknown() && !r.InputWindowsMetrics.DisableNativeModule.IsNull() {
			*disableNativeModule = r.InputWindowsMetrics.DisableNativeModule.ValueBool()
		} else {
			disableNativeModule = nil
		}
		description40 := new(string)
		if !r.InputWindowsMetrics.Description.IsUnknown() && !r.InputWindowsMetrics.Description.IsNull() {
			*description40 = r.InputWindowsMetrics.Description.ValueString()
		} else {
			description40 = nil
		}
		var status32 *shared.TFStatus
		if r.InputWindowsMetrics.Status != nil {
			health32 := shared.Health(r.InputWindowsMetrics.Status.Health.ValueString())
			metrics32 := make(map[string]interface{})
			for metricsKey32, metricsValue32 := range r.InputWindowsMetrics.Status.Metrics {
				var metricsInst32 interface{}
				_ = json.Unmarshal([]byte(metricsValue32.ValueString()), &metricsInst32)
				metrics32[metricsKey32] = metricsInst32
			}
			var timestamp32 float64
			timestamp32 = r.InputWindowsMetrics.Status.Timestamp.ValueFloat64()

			useStatusFromLb32 := new(bool)
			if !r.InputWindowsMetrics.Status.UseStatusFromLB.IsUnknown() && !r.InputWindowsMetrics.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb32 = r.InputWindowsMetrics.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb32 = nil
			}
			status32 = &shared.TFStatus{
				Health:          health32,
				Metrics:         metrics32,
				Timestamp:       timestamp32,
				UseStatusFromLB: useStatusFromLb32,
			}
		}
		inputWindowsMetrics = &shared.InputWindowsMetrics{
			ID:                  id32,
			Type:                typeVar36,
			Disabled:            disabled61,
			Pipeline:            pipeline64,
			SendToRoutes:        sendToRoutes32,
			Environment:         environment32,
			PqEnabled:           pqEnabled32,
			Streamtags:          streamtags32,
			Connections:         connections32,
			Pq:                  pq32,
			Interval:            interval14,
			Host:                host14,
			Process:             process1,
			Metadata:            metadata35,
			Persistence:         persistence5,
			DisableNativeModule: disableNativeModule,
			Description:         description40,
			Status:              status32,
		}
	}
	if inputWindowsMetrics != nil {
		out = shared.Input{
			InputWindowsMetrics: inputWindowsMetrics,
		}
	}
	var inputCrowdstrike *shared.InputCrowdstrike
	if r.InputCrowdstrike != nil {
		id33 := new(string)
		if !r.InputCrowdstrike.ID.IsUnknown() && !r.InputCrowdstrike.ID.IsNull() {
			*id33 = r.InputCrowdstrike.ID.ValueString()
		} else {
			id33 = nil
		}
		typeVar37 := shared.InputCrowdstrikeType(r.InputCrowdstrike.Type.ValueString())
		disabled62 := new(bool)
		if !r.InputCrowdstrike.Disabled.IsUnknown() && !r.InputCrowdstrike.Disabled.IsNull() {
			*disabled62 = r.InputCrowdstrike.Disabled.ValueBool()
		} else {
			disabled62 = nil
		}
		pipeline66 := new(string)
		if !r.InputCrowdstrike.Pipeline.IsUnknown() && !r.InputCrowdstrike.Pipeline.IsNull() {
			*pipeline66 = r.InputCrowdstrike.Pipeline.ValueString()
		} else {
			pipeline66 = nil
		}
		sendToRoutes33 := new(bool)
		if !r.InputCrowdstrike.SendToRoutes.IsUnknown() && !r.InputCrowdstrike.SendToRoutes.IsNull() {
			*sendToRoutes33 = r.InputCrowdstrike.SendToRoutes.ValueBool()
		} else {
			sendToRoutes33 = nil
		}
		environment33 := new(string)
		if !r.InputCrowdstrike.Environment.IsUnknown() && !r.InputCrowdstrike.Environment.IsNull() {
			*environment33 = r.InputCrowdstrike.Environment.ValueString()
		} else {
			environment33 = nil
		}
		pqEnabled33 := new(bool)
		if !r.InputCrowdstrike.PqEnabled.IsUnknown() && !r.InputCrowdstrike.PqEnabled.IsNull() {
			*pqEnabled33 = r.InputCrowdstrike.PqEnabled.ValueBool()
		} else {
			pqEnabled33 = nil
		}
		streamtags33 := make([]string, 0, len(r.InputCrowdstrike.Streamtags))
		for _, streamtagsItem33 := range r.InputCrowdstrike.Streamtags {
			streamtags33 = append(streamtags33, streamtagsItem33.ValueString())
		}
		connections33 := make([]shared.InputCrowdstrikeConnections, 0, len(r.InputCrowdstrike.Connections))
		for _, connectionsItem33 := range r.InputCrowdstrike.Connections {
			pipeline67 := new(string)
			if !connectionsItem33.Pipeline.IsUnknown() && !connectionsItem33.Pipeline.IsNull() {
				*pipeline67 = connectionsItem33.Pipeline.ValueString()
			} else {
				pipeline67 = nil
			}
			var output34 string
			output34 = connectionsItem33.Output.ValueString()

			connections33 = append(connections33, shared.InputCrowdstrikeConnections{
				Pipeline: pipeline67,
				Output:   output34,
			})
		}
		var pq33 *shared.InputCrowdstrikePq
		if r.InputCrowdstrike.Pq != nil {
			mode46 := new(shared.InputCrowdstrikeMode)
			if !r.InputCrowdstrike.Pq.Mode.IsUnknown() && !r.InputCrowdstrike.Pq.Mode.IsNull() {
				*mode46 = shared.InputCrowdstrikeMode(r.InputCrowdstrike.Pq.Mode.ValueString())
			} else {
				mode46 = nil
			}
			maxBufferSize33 := new(float64)
			if !r.InputCrowdstrike.Pq.MaxBufferSize.IsUnknown() && !r.InputCrowdstrike.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize33 = r.InputCrowdstrike.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize33 = nil
			}
			commitFrequency33 := new(float64)
			if !r.InputCrowdstrike.Pq.CommitFrequency.IsUnknown() && !r.InputCrowdstrike.Pq.CommitFrequency.IsNull() {
				*commitFrequency33 = r.InputCrowdstrike.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency33 = nil
			}
			maxFileSize33 := new(string)
			if !r.InputCrowdstrike.Pq.MaxFileSize.IsUnknown() && !r.InputCrowdstrike.Pq.MaxFileSize.IsNull() {
				*maxFileSize33 = r.InputCrowdstrike.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize33 = nil
			}
			maxSize33 := new(string)
			if !r.InputCrowdstrike.Pq.MaxSize.IsUnknown() && !r.InputCrowdstrike.Pq.MaxSize.IsNull() {
				*maxSize33 = r.InputCrowdstrike.Pq.MaxSize.ValueString()
			} else {
				maxSize33 = nil
			}
			path34 := new(string)
			if !r.InputCrowdstrike.Pq.Path.IsUnknown() && !r.InputCrowdstrike.Pq.Path.IsNull() {
				*path34 = r.InputCrowdstrike.Pq.Path.ValueString()
			} else {
				path34 = nil
			}
			compress40 := new(shared.InputCrowdstrikeCompression)
			if !r.InputCrowdstrike.Pq.Compress.IsUnknown() && !r.InputCrowdstrike.Pq.Compress.IsNull() {
				*compress40 = shared.InputCrowdstrikeCompression(r.InputCrowdstrike.Pq.Compress.ValueString())
			} else {
				compress40 = nil
			}
			pq33 = &shared.InputCrowdstrikePq{
				Mode:            mode46,
				MaxBufferSize:   maxBufferSize33,
				CommitFrequency: commitFrequency33,
				MaxFileSize:     maxFileSize33,
				MaxSize:         maxSize33,
				Path:            path34,
				Compress:        compress40,
			}
		}
		var queueName1 string
		queueName1 = r.InputCrowdstrike.QueueName.ValueString()

		fileFilter1 := new(string)
		if !r.InputCrowdstrike.FileFilter.IsUnknown() && !r.InputCrowdstrike.FileFilter.IsNull() {
			*fileFilter1 = r.InputCrowdstrike.FileFilter.ValueString()
		} else {
			fileFilter1 = nil
		}
		awsAccountID := new(string)
		if !r.InputCrowdstrike.AwsAccountID.IsUnknown() && !r.InputCrowdstrike.AwsAccountID.IsNull() {
			*awsAccountID = r.InputCrowdstrike.AwsAccountID.ValueString()
		} else {
			awsAccountID = nil
		}
		awsAuthenticationMethod3 := new(shared.InputCrowdstrikeAuthenticationMethod)
		if !r.InputCrowdstrike.AwsAuthenticationMethod.IsUnknown() && !r.InputCrowdstrike.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod3 = shared.InputCrowdstrikeAuthenticationMethod(r.InputCrowdstrike.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod3 = nil
		}
		awsSecretKey3 := new(string)
		if !r.InputCrowdstrike.AwsSecretKey.IsUnknown() && !r.InputCrowdstrike.AwsSecretKey.IsNull() {
			*awsSecretKey3 = r.InputCrowdstrike.AwsSecretKey.ValueString()
		} else {
			awsSecretKey3 = nil
		}
		region4 := new(string)
		if !r.InputCrowdstrike.Region.IsUnknown() && !r.InputCrowdstrike.Region.IsNull() {
			*region4 = r.InputCrowdstrike.Region.ValueString()
		} else {
			region4 = nil
		}
		endpoint4 := new(string)
		if !r.InputCrowdstrike.Endpoint.IsUnknown() && !r.InputCrowdstrike.Endpoint.IsNull() {
			*endpoint4 = r.InputCrowdstrike.Endpoint.ValueString()
		} else {
			endpoint4 = nil
		}
		signatureVersion3 := new(shared.InputCrowdstrikeSignatureVersion)
		if !r.InputCrowdstrike.SignatureVersion.IsUnknown() && !r.InputCrowdstrike.SignatureVersion.IsNull() {
			*signatureVersion3 = shared.InputCrowdstrikeSignatureVersion(r.InputCrowdstrike.SignatureVersion.ValueString())
		} else {
			signatureVersion3 = nil
		}
		reuseConnections3 := new(bool)
		if !r.InputCrowdstrike.ReuseConnections.IsUnknown() && !r.InputCrowdstrike.ReuseConnections.IsNull() {
			*reuseConnections3 = r.InputCrowdstrike.ReuseConnections.ValueBool()
		} else {
			reuseConnections3 = nil
		}
		rejectUnauthorized24 := new(bool)
		if !r.InputCrowdstrike.RejectUnauthorized.IsUnknown() && !r.InputCrowdstrike.RejectUnauthorized.IsNull() {
			*rejectUnauthorized24 = r.InputCrowdstrike.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized24 = nil
		}
		breakerRulesets7 := make([]string, 0, len(r.InputCrowdstrike.BreakerRulesets))
		for _, breakerRulesetsItem7 := range r.InputCrowdstrike.BreakerRulesets {
			breakerRulesets7 = append(breakerRulesets7, breakerRulesetsItem7.ValueString())
		}
		staleChannelFlushMs7 := new(float64)
		if !r.InputCrowdstrike.StaleChannelFlushMs.IsUnknown() && !r.InputCrowdstrike.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs7 = r.InputCrowdstrike.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs7 = nil
		}
		maxMessages1 := new(float64)
		if !r.InputCrowdstrike.MaxMessages.IsUnknown() && !r.InputCrowdstrike.MaxMessages.IsNull() {
			*maxMessages1 = r.InputCrowdstrike.MaxMessages.ValueFloat64()
		} else {
			maxMessages1 = nil
		}
		visibilityTimeout1 := new(float64)
		if !r.InputCrowdstrike.VisibilityTimeout.IsUnknown() && !r.InputCrowdstrike.VisibilityTimeout.IsNull() {
			*visibilityTimeout1 = r.InputCrowdstrike.VisibilityTimeout.ValueFloat64()
		} else {
			visibilityTimeout1 = nil
		}
		numReceivers1 := new(float64)
		if !r.InputCrowdstrike.NumReceivers.IsUnknown() && !r.InputCrowdstrike.NumReceivers.IsNull() {
			*numReceivers1 = r.InputCrowdstrike.NumReceivers.ValueFloat64()
		} else {
			numReceivers1 = nil
		}
		socketTimeout9 := new(float64)
		if !r.InputCrowdstrike.SocketTimeout.IsUnknown() && !r.InputCrowdstrike.SocketTimeout.IsNull() {
			*socketTimeout9 = r.InputCrowdstrike.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout9 = nil
		}
		skipOnError1 := new(bool)
		if !r.InputCrowdstrike.SkipOnError.IsUnknown() && !r.InputCrowdstrike.SkipOnError.IsNull() {
			*skipOnError1 = r.InputCrowdstrike.SkipOnError.ValueBool()
		} else {
			skipOnError1 = nil
		}
		enableAssumeRole3 := new(bool)
		if !r.InputCrowdstrike.EnableAssumeRole.IsUnknown() && !r.InputCrowdstrike.EnableAssumeRole.IsNull() {
			*enableAssumeRole3 = r.InputCrowdstrike.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole3 = nil
		}
		assumeRoleArn3 := new(string)
		if !r.InputCrowdstrike.AssumeRoleArn.IsUnknown() && !r.InputCrowdstrike.AssumeRoleArn.IsNull() {
			*assumeRoleArn3 = r.InputCrowdstrike.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn3 = nil
		}
		assumeRoleExternalId3 := new(string)
		if !r.InputCrowdstrike.AssumeRoleExternalID.IsUnknown() && !r.InputCrowdstrike.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId3 = r.InputCrowdstrike.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId3 = nil
		}
		durationSeconds3 := new(float64)
		if !r.InputCrowdstrike.DurationSeconds.IsUnknown() && !r.InputCrowdstrike.DurationSeconds.IsNull() {
			*durationSeconds3 = r.InputCrowdstrike.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds3 = nil
		}
		enableSQSAssumeRole := new(bool)
		if !r.InputCrowdstrike.EnableSQSAssumeRole.IsUnknown() && !r.InputCrowdstrike.EnableSQSAssumeRole.IsNull() {
			*enableSQSAssumeRole = r.InputCrowdstrike.EnableSQSAssumeRole.ValueBool()
		} else {
			enableSQSAssumeRole = nil
		}
		var preprocess1 *shared.InputCrowdstrikePreprocess
		if r.InputCrowdstrike.Preprocess != nil {
			disabled63 := new(bool)
			if !r.InputCrowdstrike.Preprocess.Disabled.IsUnknown() && !r.InputCrowdstrike.Preprocess.Disabled.IsNull() {
				*disabled63 = r.InputCrowdstrike.Preprocess.Disabled.ValueBool()
			} else {
				disabled63 = nil
			}
			command2 := new(string)
			if !r.InputCrowdstrike.Preprocess.Command.IsUnknown() && !r.InputCrowdstrike.Preprocess.Command.IsNull() {
				*command2 = r.InputCrowdstrike.Preprocess.Command.ValueString()
			} else {
				command2 = nil
			}
			args1 := make([]string, 0, len(r.InputCrowdstrike.Preprocess.Args))
			for _, argsItem1 := range r.InputCrowdstrike.Preprocess.Args {
				args1 = append(args1, argsItem1.ValueString())
			}
			preprocess1 = &shared.InputCrowdstrikePreprocess{
				Disabled: disabled63,
				Command:  command2,
				Args:     args1,
			}
		}
		metadata36 := make([]shared.InputCrowdstrikeMetadata, 0, len(r.InputCrowdstrike.Metadata))
		for _, metadataItem35 := range r.InputCrowdstrike.Metadata {
			var name56 string
			name56 = metadataItem35.Name.ValueString()

			var value52 string
			value52 = metadataItem35.Value.ValueString()

			metadata36 = append(metadata36, shared.InputCrowdstrikeMetadata{
				Name:  name56,
				Value: value52,
			})
		}
		var checkpointing *shared.Checkpointing
		if r.InputCrowdstrike.Checkpointing != nil {
			enabled4 := new(bool)
			if !r.InputCrowdstrike.Checkpointing.Enabled.IsUnknown() && !r.InputCrowdstrike.Checkpointing.Enabled.IsNull() {
				*enabled4 = r.InputCrowdstrike.Checkpointing.Enabled.ValueBool()
			} else {
				enabled4 = nil
			}
			retries1 := new(float64)
			if !r.InputCrowdstrike.Checkpointing.Retries.IsUnknown() && !r.InputCrowdstrike.Checkpointing.Retries.IsNull() {
				*retries1 = r.InputCrowdstrike.Checkpointing.Retries.ValueFloat64()
			} else {
				retries1 = nil
			}
			checkpointing = &shared.Checkpointing{
				Enabled: enabled4,
				Retries: retries1,
			}
		}
		pollTimeout := new(float64)
		if !r.InputCrowdstrike.PollTimeout.IsUnknown() && !r.InputCrowdstrike.PollTimeout.IsNull() {
			*pollTimeout = r.InputCrowdstrike.PollTimeout.ValueFloat64()
		} else {
			pollTimeout = nil
		}
		encoding1 := new(string)
		if !r.InputCrowdstrike.Encoding.IsUnknown() && !r.InputCrowdstrike.Encoding.IsNull() {
			*encoding1 = r.InputCrowdstrike.Encoding.ValueString()
		} else {
			encoding1 = nil
		}
		description41 := new(string)
		if !r.InputCrowdstrike.Description.IsUnknown() && !r.InputCrowdstrike.Description.IsNull() {
			*description41 = r.InputCrowdstrike.Description.ValueString()
		} else {
			description41 = nil
		}
		awsAPIKey1 := new(string)
		if !r.InputCrowdstrike.AwsAPIKey.IsUnknown() && !r.InputCrowdstrike.AwsAPIKey.IsNull() {
			*awsAPIKey1 = r.InputCrowdstrike.AwsAPIKey.ValueString()
		} else {
			awsAPIKey1 = nil
		}
		awsSecret1 := new(string)
		if !r.InputCrowdstrike.AwsSecret.IsUnknown() && !r.InputCrowdstrike.AwsSecret.IsNull() {
			*awsSecret1 = r.InputCrowdstrike.AwsSecret.ValueString()
		} else {
			awsSecret1 = nil
		}
		var status33 *shared.TFStatus
		if r.InputCrowdstrike.Status != nil {
			health33 := shared.Health(r.InputCrowdstrike.Status.Health.ValueString())
			metrics33 := make(map[string]interface{})
			for metricsKey33, metricsValue33 := range r.InputCrowdstrike.Status.Metrics {
				var metricsInst33 interface{}
				_ = json.Unmarshal([]byte(metricsValue33.ValueString()), &metricsInst33)
				metrics33[metricsKey33] = metricsInst33
			}
			var timestamp33 float64
			timestamp33 = r.InputCrowdstrike.Status.Timestamp.ValueFloat64()

			useStatusFromLb33 := new(bool)
			if !r.InputCrowdstrike.Status.UseStatusFromLB.IsUnknown() && !r.InputCrowdstrike.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb33 = r.InputCrowdstrike.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb33 = nil
			}
			status33 = &shared.TFStatus{
				Health:          health33,
				Metrics:         metrics33,
				Timestamp:       timestamp33,
				UseStatusFromLB: useStatusFromLb33,
			}
		}
		inputCrowdstrike = &shared.InputCrowdstrike{
			ID:                      id33,
			Type:                    typeVar37,
			Disabled:                disabled62,
			Pipeline:                pipeline66,
			SendToRoutes:            sendToRoutes33,
			Environment:             environment33,
			PqEnabled:               pqEnabled33,
			Streamtags:              streamtags33,
			Connections:             connections33,
			Pq:                      pq33,
			QueueName:               queueName1,
			FileFilter:              fileFilter1,
			AwsAccountID:            awsAccountID,
			AwsAuthenticationMethod: awsAuthenticationMethod3,
			AwsSecretKey:            awsSecretKey3,
			Region:                  region4,
			Endpoint:                endpoint4,
			SignatureVersion:        signatureVersion3,
			ReuseConnections:        reuseConnections3,
			RejectUnauthorized:      rejectUnauthorized24,
			BreakerRulesets:         breakerRulesets7,
			StaleChannelFlushMs:     staleChannelFlushMs7,
			MaxMessages:             maxMessages1,
			VisibilityTimeout:       visibilityTimeout1,
			NumReceivers:            numReceivers1,
			SocketTimeout:           socketTimeout9,
			SkipOnError:             skipOnError1,
			EnableAssumeRole:        enableAssumeRole3,
			AssumeRoleArn:           assumeRoleArn3,
			AssumeRoleExternalID:    assumeRoleExternalId3,
			DurationSeconds:         durationSeconds3,
			EnableSQSAssumeRole:     enableSQSAssumeRole,
			Preprocess:              preprocess1,
			Metadata:                metadata36,
			Checkpointing:           checkpointing,
			PollTimeout:             pollTimeout,
			Encoding:                encoding1,
			Description:             description41,
			AwsAPIKey:               awsAPIKey1,
			AwsSecret:               awsSecret1,
			Status:                  status33,
		}
	}
	if inputCrowdstrike != nil {
		out = shared.Input{
			InputCrowdstrike: inputCrowdstrike,
		}
	}
	var inputDatadogAgent *shared.InputDatadogAgent
	if r.InputDatadogAgent != nil {
		id34 := new(string)
		if !r.InputDatadogAgent.ID.IsUnknown() && !r.InputDatadogAgent.ID.IsNull() {
			*id34 = r.InputDatadogAgent.ID.ValueString()
		} else {
			id34 = nil
		}
		typeVar38 := new(shared.InputDatadogAgentType)
		if !r.InputDatadogAgent.Type.IsUnknown() && !r.InputDatadogAgent.Type.IsNull() {
			*typeVar38 = shared.InputDatadogAgentType(r.InputDatadogAgent.Type.ValueString())
		} else {
			typeVar38 = nil
		}
		disabled64 := new(bool)
		if !r.InputDatadogAgent.Disabled.IsUnknown() && !r.InputDatadogAgent.Disabled.IsNull() {
			*disabled64 = r.InputDatadogAgent.Disabled.ValueBool()
		} else {
			disabled64 = nil
		}
		pipeline68 := new(string)
		if !r.InputDatadogAgent.Pipeline.IsUnknown() && !r.InputDatadogAgent.Pipeline.IsNull() {
			*pipeline68 = r.InputDatadogAgent.Pipeline.ValueString()
		} else {
			pipeline68 = nil
		}
		sendToRoutes34 := new(bool)
		if !r.InputDatadogAgent.SendToRoutes.IsUnknown() && !r.InputDatadogAgent.SendToRoutes.IsNull() {
			*sendToRoutes34 = r.InputDatadogAgent.SendToRoutes.ValueBool()
		} else {
			sendToRoutes34 = nil
		}
		environment34 := new(string)
		if !r.InputDatadogAgent.Environment.IsUnknown() && !r.InputDatadogAgent.Environment.IsNull() {
			*environment34 = r.InputDatadogAgent.Environment.ValueString()
		} else {
			environment34 = nil
		}
		pqEnabled34 := new(bool)
		if !r.InputDatadogAgent.PqEnabled.IsUnknown() && !r.InputDatadogAgent.PqEnabled.IsNull() {
			*pqEnabled34 = r.InputDatadogAgent.PqEnabled.ValueBool()
		} else {
			pqEnabled34 = nil
		}
		streamtags34 := make([]string, 0, len(r.InputDatadogAgent.Streamtags))
		for _, streamtagsItem34 := range r.InputDatadogAgent.Streamtags {
			streamtags34 = append(streamtags34, streamtagsItem34.ValueString())
		}
		connections34 := make([]shared.InputDatadogAgentConnections, 0, len(r.InputDatadogAgent.Connections))
		for _, connectionsItem34 := range r.InputDatadogAgent.Connections {
			pipeline69 := new(string)
			if !connectionsItem34.Pipeline.IsUnknown() && !connectionsItem34.Pipeline.IsNull() {
				*pipeline69 = connectionsItem34.Pipeline.ValueString()
			} else {
				pipeline69 = nil
			}
			var output35 string
			output35 = connectionsItem34.Output.ValueString()

			connections34 = append(connections34, shared.InputDatadogAgentConnections{
				Pipeline: pipeline69,
				Output:   output35,
			})
		}
		var pq34 *shared.InputDatadogAgentPq
		if r.InputDatadogAgent.Pq != nil {
			mode47 := new(shared.InputDatadogAgentMode)
			if !r.InputDatadogAgent.Pq.Mode.IsUnknown() && !r.InputDatadogAgent.Pq.Mode.IsNull() {
				*mode47 = shared.InputDatadogAgentMode(r.InputDatadogAgent.Pq.Mode.ValueString())
			} else {
				mode47 = nil
			}
			maxBufferSize34 := new(float64)
			if !r.InputDatadogAgent.Pq.MaxBufferSize.IsUnknown() && !r.InputDatadogAgent.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize34 = r.InputDatadogAgent.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize34 = nil
			}
			commitFrequency34 := new(float64)
			if !r.InputDatadogAgent.Pq.CommitFrequency.IsUnknown() && !r.InputDatadogAgent.Pq.CommitFrequency.IsNull() {
				*commitFrequency34 = r.InputDatadogAgent.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency34 = nil
			}
			maxFileSize34 := new(string)
			if !r.InputDatadogAgent.Pq.MaxFileSize.IsUnknown() && !r.InputDatadogAgent.Pq.MaxFileSize.IsNull() {
				*maxFileSize34 = r.InputDatadogAgent.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize34 = nil
			}
			maxSize34 := new(string)
			if !r.InputDatadogAgent.Pq.MaxSize.IsUnknown() && !r.InputDatadogAgent.Pq.MaxSize.IsNull() {
				*maxSize34 = r.InputDatadogAgent.Pq.MaxSize.ValueString()
			} else {
				maxSize34 = nil
			}
			path35 := new(string)
			if !r.InputDatadogAgent.Pq.Path.IsUnknown() && !r.InputDatadogAgent.Pq.Path.IsNull() {
				*path35 = r.InputDatadogAgent.Pq.Path.ValueString()
			} else {
				path35 = nil
			}
			compress41 := new(shared.InputDatadogAgentCompression)
			if !r.InputDatadogAgent.Pq.Compress.IsUnknown() && !r.InputDatadogAgent.Pq.Compress.IsNull() {
				*compress41 = shared.InputDatadogAgentCompression(r.InputDatadogAgent.Pq.Compress.ValueString())
			} else {
				compress41 = nil
			}
			pq34 = &shared.InputDatadogAgentPq{
				Mode:            mode47,
				MaxBufferSize:   maxBufferSize34,
				CommitFrequency: commitFrequency34,
				MaxFileSize:     maxFileSize34,
				MaxSize:         maxSize34,
				Path:            path35,
				Compress:        compress41,
			}
		}
		host15 := new(string)
		if !r.InputDatadogAgent.Host.IsUnknown() && !r.InputDatadogAgent.Host.IsNull() {
			*host15 = r.InputDatadogAgent.Host.ValueString()
		} else {
			host15 = nil
		}
		var port13 float64
		port13 = r.InputDatadogAgent.Port.ValueFloat64()

		var tls19 *shared.InputDatadogAgentTLSSettingsServerSide
		if r.InputDatadogAgent.TLS != nil {
			disabled65 := new(bool)
			if !r.InputDatadogAgent.TLS.Disabled.IsUnknown() && !r.InputDatadogAgent.TLS.Disabled.IsNull() {
				*disabled65 = r.InputDatadogAgent.TLS.Disabled.ValueBool()
			} else {
				disabled65 = nil
			}
			certificateName20 := new(string)
			if !r.InputDatadogAgent.TLS.CertificateName.IsUnknown() && !r.InputDatadogAgent.TLS.CertificateName.IsNull() {
				*certificateName20 = r.InputDatadogAgent.TLS.CertificateName.ValueString()
			} else {
				certificateName20 = nil
			}
			privKeyPath19 := new(string)
			if !r.InputDatadogAgent.TLS.PrivKeyPath.IsUnknown() && !r.InputDatadogAgent.TLS.PrivKeyPath.IsNull() {
				*privKeyPath19 = r.InputDatadogAgent.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath19 = nil
			}
			passphrase19 := new(string)
			if !r.InputDatadogAgent.TLS.Passphrase.IsUnknown() && !r.InputDatadogAgent.TLS.Passphrase.IsNull() {
				*passphrase19 = r.InputDatadogAgent.TLS.Passphrase.ValueString()
			} else {
				passphrase19 = nil
			}
			certPath19 := new(string)
			if !r.InputDatadogAgent.TLS.CertPath.IsUnknown() && !r.InputDatadogAgent.TLS.CertPath.IsNull() {
				*certPath19 = r.InputDatadogAgent.TLS.CertPath.ValueString()
			} else {
				certPath19 = nil
			}
			caPath18 := new(string)
			if !r.InputDatadogAgent.TLS.CaPath.IsUnknown() && !r.InputDatadogAgent.TLS.CaPath.IsNull() {
				*caPath18 = r.InputDatadogAgent.TLS.CaPath.ValueString()
			} else {
				caPath18 = nil
			}
			requestCert12 := new(bool)
			if !r.InputDatadogAgent.TLS.RequestCert.IsUnknown() && !r.InputDatadogAgent.TLS.RequestCert.IsNull() {
				*requestCert12 = r.InputDatadogAgent.TLS.RequestCert.ValueBool()
			} else {
				requestCert12 = nil
			}
			var rejectUnauthorized25 interface{}
			if !r.InputDatadogAgent.TLS.RejectUnauthorized.IsUnknown() && !r.InputDatadogAgent.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputDatadogAgent.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized25)
			}
			var commonNameRegex12 interface{}
			if !r.InputDatadogAgent.TLS.CommonNameRegex.IsUnknown() && !r.InputDatadogAgent.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputDatadogAgent.TLS.CommonNameRegex.ValueString()), &commonNameRegex12)
			}
			minVersion18 := new(shared.InputDatadogAgentMinimumTLSVersion)
			if !r.InputDatadogAgent.TLS.MinVersion.IsUnknown() && !r.InputDatadogAgent.TLS.MinVersion.IsNull() {
				*minVersion18 = shared.InputDatadogAgentMinimumTLSVersion(r.InputDatadogAgent.TLS.MinVersion.ValueString())
			} else {
				minVersion18 = nil
			}
			maxVersion18 := new(shared.InputDatadogAgentMaximumTLSVersion)
			if !r.InputDatadogAgent.TLS.MaxVersion.IsUnknown() && !r.InputDatadogAgent.TLS.MaxVersion.IsNull() {
				*maxVersion18 = shared.InputDatadogAgentMaximumTLSVersion(r.InputDatadogAgent.TLS.MaxVersion.ValueString())
			} else {
				maxVersion18 = nil
			}
			tls19 = &shared.InputDatadogAgentTLSSettingsServerSide{
				Disabled:           disabled65,
				CertificateName:    certificateName20,
				PrivKeyPath:        privKeyPath19,
				Passphrase:         passphrase19,
				CertPath:           certPath19,
				CaPath:             caPath18,
				RequestCert:        requestCert12,
				RejectUnauthorized: rejectUnauthorized25,
				CommonNameRegex:    commonNameRegex12,
				MinVersion:         minVersion18,
				MaxVersion:         maxVersion18,
			}
		}
		maxActiveReq9 := new(float64)
		if !r.InputDatadogAgent.MaxActiveReq.IsUnknown() && !r.InputDatadogAgent.MaxActiveReq.IsNull() {
			*maxActiveReq9 = r.InputDatadogAgent.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq9 = nil
		}
		maxRequestsPerSocket9 := new(int64)
		if !r.InputDatadogAgent.MaxRequestsPerSocket.IsUnknown() && !r.InputDatadogAgent.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket9 = r.InputDatadogAgent.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket9 = nil
		}
		enableProxyHeader12 := new(bool)
		if !r.InputDatadogAgent.EnableProxyHeader.IsUnknown() && !r.InputDatadogAgent.EnableProxyHeader.IsNull() {
			*enableProxyHeader12 = r.InputDatadogAgent.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader12 = nil
		}
		captureHeaders9 := new(bool)
		if !r.InputDatadogAgent.CaptureHeaders.IsUnknown() && !r.InputDatadogAgent.CaptureHeaders.IsNull() {
			*captureHeaders9 = r.InputDatadogAgent.CaptureHeaders.ValueBool()
		} else {
			captureHeaders9 = nil
		}
		activityLogSampleRate9 := new(float64)
		if !r.InputDatadogAgent.ActivityLogSampleRate.IsUnknown() && !r.InputDatadogAgent.ActivityLogSampleRate.IsNull() {
			*activityLogSampleRate9 = r.InputDatadogAgent.ActivityLogSampleRate.ValueFloat64()
		} else {
			activityLogSampleRate9 = nil
		}
		requestTimeout18 := new(float64)
		if !r.InputDatadogAgent.RequestTimeout.IsUnknown() && !r.InputDatadogAgent.RequestTimeout.IsNull() {
			*requestTimeout18 = r.InputDatadogAgent.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout18 = nil
		}
		socketTimeout10 := new(float64)
		if !r.InputDatadogAgent.SocketTimeout.IsUnknown() && !r.InputDatadogAgent.SocketTimeout.IsNull() {
			*socketTimeout10 = r.InputDatadogAgent.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout10 = nil
		}
		keepAliveTimeout9 := new(float64)
		if !r.InputDatadogAgent.KeepAliveTimeout.IsUnknown() && !r.InputDatadogAgent.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout9 = r.InputDatadogAgent.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout9 = nil
		}
		enableHealthCheck9 := new(bool)
		if !r.InputDatadogAgent.EnableHealthCheck.IsUnknown() && !r.InputDatadogAgent.EnableHealthCheck.IsNull() {
			*enableHealthCheck9 = r.InputDatadogAgent.EnableHealthCheck.ValueBool()
		} else {
			enableHealthCheck9 = nil
		}
		ipAllowlistRegex9 := new(string)
		if !r.InputDatadogAgent.IPAllowlistRegex.IsUnknown() && !r.InputDatadogAgent.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex9 = r.InputDatadogAgent.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex9 = nil
		}
		ipDenylistRegex9 := new(string)
		if !r.InputDatadogAgent.IPDenylistRegex.IsUnknown() && !r.InputDatadogAgent.IPDenylistRegex.IsNull() {
			*ipDenylistRegex9 = r.InputDatadogAgent.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex9 = nil
		}
		extractMetrics2 := new(bool)
		if !r.InputDatadogAgent.ExtractMetrics.IsUnknown() && !r.InputDatadogAgent.ExtractMetrics.IsNull() {
			*extractMetrics2 = r.InputDatadogAgent.ExtractMetrics.ValueBool()
		} else {
			extractMetrics2 = nil
		}
		metadata37 := make([]shared.InputDatadogAgentMetadata, 0, len(r.InputDatadogAgent.Metadata))
		for _, metadataItem36 := range r.InputDatadogAgent.Metadata {
			var name57 string
			name57 = metadataItem36.Name.ValueString()

			var value53 string
			value53 = metadataItem36.Value.ValueString()

			metadata37 = append(metadata37, shared.InputDatadogAgentMetadata{
				Name:  name57,
				Value: value53,
			})
		}
		var proxyMode1 *shared.InputDatadogAgentProxyMode
		if r.InputDatadogAgent.ProxyMode != nil {
			enabled5 := new(bool)
			if !r.InputDatadogAgent.ProxyMode.Enabled.IsUnknown() && !r.InputDatadogAgent.ProxyMode.Enabled.IsNull() {
				*enabled5 = r.InputDatadogAgent.ProxyMode.Enabled.ValueBool()
			} else {
				enabled5 = nil
			}
			rejectUnauthorized26 := new(bool)
			if !r.InputDatadogAgent.ProxyMode.RejectUnauthorized.IsUnknown() && !r.InputDatadogAgent.ProxyMode.RejectUnauthorized.IsNull() {
				*rejectUnauthorized26 = r.InputDatadogAgent.ProxyMode.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized26 = nil
			}
			proxyMode1 = &shared.InputDatadogAgentProxyMode{
				Enabled:            enabled5,
				RejectUnauthorized: rejectUnauthorized26,
			}
		}
		description42 := new(string)
		if !r.InputDatadogAgent.Description.IsUnknown() && !r.InputDatadogAgent.Description.IsNull() {
			*description42 = r.InputDatadogAgent.Description.ValueString()
		} else {
			description42 = nil
		}
		var status34 *shared.TFStatus
		if r.InputDatadogAgent.Status != nil {
			health34 := shared.Health(r.InputDatadogAgent.Status.Health.ValueString())
			metrics34 := make(map[string]interface{})
			for metricsKey34, metricsValue34 := range r.InputDatadogAgent.Status.Metrics {
				var metricsInst34 interface{}
				_ = json.Unmarshal([]byte(metricsValue34.ValueString()), &metricsInst34)
				metrics34[metricsKey34] = metricsInst34
			}
			var timestamp34 float64
			timestamp34 = r.InputDatadogAgent.Status.Timestamp.ValueFloat64()

			useStatusFromLb34 := new(bool)
			if !r.InputDatadogAgent.Status.UseStatusFromLB.IsUnknown() && !r.InputDatadogAgent.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb34 = r.InputDatadogAgent.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb34 = nil
			}
			status34 = &shared.TFStatus{
				Health:          health34,
				Metrics:         metrics34,
				Timestamp:       timestamp34,
				UseStatusFromLB: useStatusFromLb34,
			}
		}
		inputDatadogAgent = &shared.InputDatadogAgent{
			ID:                    id34,
			Type:                  typeVar38,
			Disabled:              disabled64,
			Pipeline:              pipeline68,
			SendToRoutes:          sendToRoutes34,
			Environment:           environment34,
			PqEnabled:             pqEnabled34,
			Streamtags:            streamtags34,
			Connections:           connections34,
			Pq:                    pq34,
			Host:                  host15,
			Port:                  port13,
			TLS:                   tls19,
			MaxActiveReq:          maxActiveReq9,
			MaxRequestsPerSocket:  maxRequestsPerSocket9,
			EnableProxyHeader:     enableProxyHeader12,
			CaptureHeaders:        captureHeaders9,
			ActivityLogSampleRate: activityLogSampleRate9,
			RequestTimeout:        requestTimeout18,
			SocketTimeout:         socketTimeout10,
			KeepAliveTimeout:      keepAliveTimeout9,
			EnableHealthCheck:     enableHealthCheck9,
			IPAllowlistRegex:      ipAllowlistRegex9,
			IPDenylistRegex:       ipDenylistRegex9,
			ExtractMetrics:        extractMetrics2,
			Metadata:              metadata37,
			ProxyMode:             proxyMode1,
			Description:           description42,
			Status:                status34,
		}
	}
	if inputDatadogAgent != nil {
		out = shared.Input{
			InputDatadogAgent: inputDatadogAgent,
		}
	}
	var inputDatagen *shared.InputDatagen
	if r.InputDatagen != nil {
		id35 := new(string)
		if !r.InputDatagen.ID.IsUnknown() && !r.InputDatagen.ID.IsNull() {
			*id35 = r.InputDatagen.ID.ValueString()
		} else {
			id35 = nil
		}
		typeVar39 := shared.InputDatagenType(r.InputDatagen.Type.ValueString())
		disabled66 := new(bool)
		if !r.InputDatagen.Disabled.IsUnknown() && !r.InputDatagen.Disabled.IsNull() {
			*disabled66 = r.InputDatagen.Disabled.ValueBool()
		} else {
			disabled66 = nil
		}
		pipeline70 := new(string)
		if !r.InputDatagen.Pipeline.IsUnknown() && !r.InputDatagen.Pipeline.IsNull() {
			*pipeline70 = r.InputDatagen.Pipeline.ValueString()
		} else {
			pipeline70 = nil
		}
		sendToRoutes35 := new(bool)
		if !r.InputDatagen.SendToRoutes.IsUnknown() && !r.InputDatagen.SendToRoutes.IsNull() {
			*sendToRoutes35 = r.InputDatagen.SendToRoutes.ValueBool()
		} else {
			sendToRoutes35 = nil
		}
		environment35 := new(string)
		if !r.InputDatagen.Environment.IsUnknown() && !r.InputDatagen.Environment.IsNull() {
			*environment35 = r.InputDatagen.Environment.ValueString()
		} else {
			environment35 = nil
		}
		pqEnabled35 := new(bool)
		if !r.InputDatagen.PqEnabled.IsUnknown() && !r.InputDatagen.PqEnabled.IsNull() {
			*pqEnabled35 = r.InputDatagen.PqEnabled.ValueBool()
		} else {
			pqEnabled35 = nil
		}
		streamtags35 := make([]string, 0, len(r.InputDatagen.Streamtags))
		for _, streamtagsItem35 := range r.InputDatagen.Streamtags {
			streamtags35 = append(streamtags35, streamtagsItem35.ValueString())
		}
		connections35 := make([]shared.InputDatagenConnections, 0, len(r.InputDatagen.Connections))
		for _, connectionsItem35 := range r.InputDatagen.Connections {
			pipeline71 := new(string)
			if !connectionsItem35.Pipeline.IsUnknown() && !connectionsItem35.Pipeline.IsNull() {
				*pipeline71 = connectionsItem35.Pipeline.ValueString()
			} else {
				pipeline71 = nil
			}
			var output36 string
			output36 = connectionsItem35.Output.ValueString()

			connections35 = append(connections35, shared.InputDatagenConnections{
				Pipeline: pipeline71,
				Output:   output36,
			})
		}
		var pq35 *shared.InputDatagenPq
		if r.InputDatagen.Pq != nil {
			mode48 := new(shared.InputDatagenMode)
			if !r.InputDatagen.Pq.Mode.IsUnknown() && !r.InputDatagen.Pq.Mode.IsNull() {
				*mode48 = shared.InputDatagenMode(r.InputDatagen.Pq.Mode.ValueString())
			} else {
				mode48 = nil
			}
			maxBufferSize35 := new(float64)
			if !r.InputDatagen.Pq.MaxBufferSize.IsUnknown() && !r.InputDatagen.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize35 = r.InputDatagen.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize35 = nil
			}
			commitFrequency35 := new(float64)
			if !r.InputDatagen.Pq.CommitFrequency.IsUnknown() && !r.InputDatagen.Pq.CommitFrequency.IsNull() {
				*commitFrequency35 = r.InputDatagen.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency35 = nil
			}
			maxFileSize35 := new(string)
			if !r.InputDatagen.Pq.MaxFileSize.IsUnknown() && !r.InputDatagen.Pq.MaxFileSize.IsNull() {
				*maxFileSize35 = r.InputDatagen.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize35 = nil
			}
			maxSize35 := new(string)
			if !r.InputDatagen.Pq.MaxSize.IsUnknown() && !r.InputDatagen.Pq.MaxSize.IsNull() {
				*maxSize35 = r.InputDatagen.Pq.MaxSize.ValueString()
			} else {
				maxSize35 = nil
			}
			path36 := new(string)
			if !r.InputDatagen.Pq.Path.IsUnknown() && !r.InputDatagen.Pq.Path.IsNull() {
				*path36 = r.InputDatagen.Pq.Path.ValueString()
			} else {
				path36 = nil
			}
			compress42 := new(shared.InputDatagenCompression)
			if !r.InputDatagen.Pq.Compress.IsUnknown() && !r.InputDatagen.Pq.Compress.IsNull() {
				*compress42 = shared.InputDatagenCompression(r.InputDatagen.Pq.Compress.ValueString())
			} else {
				compress42 = nil
			}
			pq35 = &shared.InputDatagenPq{
				Mode:            mode48,
				MaxBufferSize:   maxBufferSize35,
				CommitFrequency: commitFrequency35,
				MaxFileSize:     maxFileSize35,
				MaxSize:         maxSize35,
				Path:            path36,
				Compress:        compress42,
			}
		}
		samples := make([]shared.InputDatagenSamples, 0, len(r.InputDatagen.Samples))
		for _, samplesItem := range r.InputDatagen.Samples {
			var sample string
			sample = samplesItem.Sample.ValueString()

			eventsPerSec := new(float64)
			if !samplesItem.EventsPerSec.IsUnknown() && !samplesItem.EventsPerSec.IsNull() {
				*eventsPerSec = samplesItem.EventsPerSec.ValueFloat64()
			} else {
				eventsPerSec = nil
			}
			samples = append(samples, shared.InputDatagenSamples{
				Sample:       sample,
				EventsPerSec: eventsPerSec,
			})
		}
		metadata38 := make([]shared.InputDatagenMetadata, 0, len(r.InputDatagen.Metadata))
		for _, metadataItem37 := range r.InputDatagen.Metadata {
			var name58 string
			name58 = metadataItem37.Name.ValueString()

			var value54 string
			value54 = metadataItem37.Value.ValueString()

			metadata38 = append(metadata38, shared.InputDatagenMetadata{
				Name:  name58,
				Value: value54,
			})
		}
		description43 := new(string)
		if !r.InputDatagen.Description.IsUnknown() && !r.InputDatagen.Description.IsNull() {
			*description43 = r.InputDatagen.Description.ValueString()
		} else {
			description43 = nil
		}
		var status35 *shared.TFStatus
		if r.InputDatagen.Status != nil {
			health35 := shared.Health(r.InputDatagen.Status.Health.ValueString())
			metrics35 := make(map[string]interface{})
			for metricsKey35, metricsValue35 := range r.InputDatagen.Status.Metrics {
				var metricsInst35 interface{}
				_ = json.Unmarshal([]byte(metricsValue35.ValueString()), &metricsInst35)
				metrics35[metricsKey35] = metricsInst35
			}
			var timestamp35 float64
			timestamp35 = r.InputDatagen.Status.Timestamp.ValueFloat64()

			useStatusFromLb35 := new(bool)
			if !r.InputDatagen.Status.UseStatusFromLB.IsUnknown() && !r.InputDatagen.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb35 = r.InputDatagen.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb35 = nil
			}
			status35 = &shared.TFStatus{
				Health:          health35,
				Metrics:         metrics35,
				Timestamp:       timestamp35,
				UseStatusFromLB: useStatusFromLb35,
			}
		}
		inputDatagen = &shared.InputDatagen{
			ID:           id35,
			Type:         typeVar39,
			Disabled:     disabled66,
			Pipeline:     pipeline70,
			SendToRoutes: sendToRoutes35,
			Environment:  environment35,
			PqEnabled:    pqEnabled35,
			Streamtags:   streamtags35,
			Connections:  connections35,
			Pq:           pq35,
			Samples:      samples,
			Metadata:     metadata38,
			Description:  description43,
			Status:       status35,
		}
	}
	if inputDatagen != nil {
		out = shared.Input{
			InputDatagen: inputDatagen,
		}
	}
	var inputHTTPRaw *shared.InputHTTPRaw
	if r.InputHTTPRaw != nil {
		id36 := new(string)
		if !r.InputHTTPRaw.ID.IsUnknown() && !r.InputHTTPRaw.ID.IsNull() {
			*id36 = r.InputHTTPRaw.ID.ValueString()
		} else {
			id36 = nil
		}
		typeVar40 := new(shared.InputHTTPRawType)
		if !r.InputHTTPRaw.Type.IsUnknown() && !r.InputHTTPRaw.Type.IsNull() {
			*typeVar40 = shared.InputHTTPRawType(r.InputHTTPRaw.Type.ValueString())
		} else {
			typeVar40 = nil
		}
		disabled67 := new(bool)
		if !r.InputHTTPRaw.Disabled.IsUnknown() && !r.InputHTTPRaw.Disabled.IsNull() {
			*disabled67 = r.InputHTTPRaw.Disabled.ValueBool()
		} else {
			disabled67 = nil
		}
		pipeline72 := new(string)
		if !r.InputHTTPRaw.Pipeline.IsUnknown() && !r.InputHTTPRaw.Pipeline.IsNull() {
			*pipeline72 = r.InputHTTPRaw.Pipeline.ValueString()
		} else {
			pipeline72 = nil
		}
		sendToRoutes36 := new(bool)
		if !r.InputHTTPRaw.SendToRoutes.IsUnknown() && !r.InputHTTPRaw.SendToRoutes.IsNull() {
			*sendToRoutes36 = r.InputHTTPRaw.SendToRoutes.ValueBool()
		} else {
			sendToRoutes36 = nil
		}
		environment36 := new(string)
		if !r.InputHTTPRaw.Environment.IsUnknown() && !r.InputHTTPRaw.Environment.IsNull() {
			*environment36 = r.InputHTTPRaw.Environment.ValueString()
		} else {
			environment36 = nil
		}
		pqEnabled36 := new(bool)
		if !r.InputHTTPRaw.PqEnabled.IsUnknown() && !r.InputHTTPRaw.PqEnabled.IsNull() {
			*pqEnabled36 = r.InputHTTPRaw.PqEnabled.ValueBool()
		} else {
			pqEnabled36 = nil
		}
		streamtags36 := make([]string, 0, len(r.InputHTTPRaw.Streamtags))
		for _, streamtagsItem36 := range r.InputHTTPRaw.Streamtags {
			streamtags36 = append(streamtags36, streamtagsItem36.ValueString())
		}
		connections36 := make([]shared.InputHTTPRawConnections, 0, len(r.InputHTTPRaw.Connections))
		for _, connectionsItem36 := range r.InputHTTPRaw.Connections {
			pipeline73 := new(string)
			if !connectionsItem36.Pipeline.IsUnknown() && !connectionsItem36.Pipeline.IsNull() {
				*pipeline73 = connectionsItem36.Pipeline.ValueString()
			} else {
				pipeline73 = nil
			}
			var output37 string
			output37 = connectionsItem36.Output.ValueString()

			connections36 = append(connections36, shared.InputHTTPRawConnections{
				Pipeline: pipeline73,
				Output:   output37,
			})
		}
		var pq36 *shared.InputHTTPRawPq
		if r.InputHTTPRaw.Pq != nil {
			mode49 := new(shared.InputHTTPRawMode)
			if !r.InputHTTPRaw.Pq.Mode.IsUnknown() && !r.InputHTTPRaw.Pq.Mode.IsNull() {
				*mode49 = shared.InputHTTPRawMode(r.InputHTTPRaw.Pq.Mode.ValueString())
			} else {
				mode49 = nil
			}
			maxBufferSize36 := new(float64)
			if !r.InputHTTPRaw.Pq.MaxBufferSize.IsUnknown() && !r.InputHTTPRaw.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize36 = r.InputHTTPRaw.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize36 = nil
			}
			commitFrequency36 := new(float64)
			if !r.InputHTTPRaw.Pq.CommitFrequency.IsUnknown() && !r.InputHTTPRaw.Pq.CommitFrequency.IsNull() {
				*commitFrequency36 = r.InputHTTPRaw.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency36 = nil
			}
			maxFileSize36 := new(string)
			if !r.InputHTTPRaw.Pq.MaxFileSize.IsUnknown() && !r.InputHTTPRaw.Pq.MaxFileSize.IsNull() {
				*maxFileSize36 = r.InputHTTPRaw.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize36 = nil
			}
			maxSize36 := new(string)
			if !r.InputHTTPRaw.Pq.MaxSize.IsUnknown() && !r.InputHTTPRaw.Pq.MaxSize.IsNull() {
				*maxSize36 = r.InputHTTPRaw.Pq.MaxSize.ValueString()
			} else {
				maxSize36 = nil
			}
			path37 := new(string)
			if !r.InputHTTPRaw.Pq.Path.IsUnknown() && !r.InputHTTPRaw.Pq.Path.IsNull() {
				*path37 = r.InputHTTPRaw.Pq.Path.ValueString()
			} else {
				path37 = nil
			}
			compress43 := new(shared.InputHTTPRawCompression)
			if !r.InputHTTPRaw.Pq.Compress.IsUnknown() && !r.InputHTTPRaw.Pq.Compress.IsNull() {
				*compress43 = shared.InputHTTPRawCompression(r.InputHTTPRaw.Pq.Compress.ValueString())
			} else {
				compress43 = nil
			}
			pq36 = &shared.InputHTTPRawPq{
				Mode:            mode49,
				MaxBufferSize:   maxBufferSize36,
				CommitFrequency: commitFrequency36,
				MaxFileSize:     maxFileSize36,
				MaxSize:         maxSize36,
				Path:            path37,
				Compress:        compress43,
			}
		}
		host16 := new(string)
		if !r.InputHTTPRaw.Host.IsUnknown() && !r.InputHTTPRaw.Host.IsNull() {
			*host16 = r.InputHTTPRaw.Host.ValueString()
		} else {
			host16 = nil
		}
		var port14 float64
		port14 = r.InputHTTPRaw.Port.ValueFloat64()

		authTokens6 := make([]string, 0, len(r.InputHTTPRaw.AuthTokens))
		for _, authTokensItem6 := range r.InputHTTPRaw.AuthTokens {
			authTokens6 = append(authTokens6, authTokensItem6.ValueString())
		}
		var tls20 *shared.InputHTTPRawTLSSettingsServerSide
		if r.InputHTTPRaw.TLS != nil {
			disabled68 := new(bool)
			if !r.InputHTTPRaw.TLS.Disabled.IsUnknown() && !r.InputHTTPRaw.TLS.Disabled.IsNull() {
				*disabled68 = r.InputHTTPRaw.TLS.Disabled.ValueBool()
			} else {
				disabled68 = nil
			}
			certificateName21 := new(string)
			if !r.InputHTTPRaw.TLS.CertificateName.IsUnknown() && !r.InputHTTPRaw.TLS.CertificateName.IsNull() {
				*certificateName21 = r.InputHTTPRaw.TLS.CertificateName.ValueString()
			} else {
				certificateName21 = nil
			}
			privKeyPath20 := new(string)
			if !r.InputHTTPRaw.TLS.PrivKeyPath.IsUnknown() && !r.InputHTTPRaw.TLS.PrivKeyPath.IsNull() {
				*privKeyPath20 = r.InputHTTPRaw.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath20 = nil
			}
			passphrase20 := new(string)
			if !r.InputHTTPRaw.TLS.Passphrase.IsUnknown() && !r.InputHTTPRaw.TLS.Passphrase.IsNull() {
				*passphrase20 = r.InputHTTPRaw.TLS.Passphrase.ValueString()
			} else {
				passphrase20 = nil
			}
			certPath20 := new(string)
			if !r.InputHTTPRaw.TLS.CertPath.IsUnknown() && !r.InputHTTPRaw.TLS.CertPath.IsNull() {
				*certPath20 = r.InputHTTPRaw.TLS.CertPath.ValueString()
			} else {
				certPath20 = nil
			}
			caPath19 := new(string)
			if !r.InputHTTPRaw.TLS.CaPath.IsUnknown() && !r.InputHTTPRaw.TLS.CaPath.IsNull() {
				*caPath19 = r.InputHTTPRaw.TLS.CaPath.ValueString()
			} else {
				caPath19 = nil
			}
			requestCert13 := new(bool)
			if !r.InputHTTPRaw.TLS.RequestCert.IsUnknown() && !r.InputHTTPRaw.TLS.RequestCert.IsNull() {
				*requestCert13 = r.InputHTTPRaw.TLS.RequestCert.ValueBool()
			} else {
				requestCert13 = nil
			}
			var rejectUnauthorized27 interface{}
			if !r.InputHTTPRaw.TLS.RejectUnauthorized.IsUnknown() && !r.InputHTTPRaw.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputHTTPRaw.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized27)
			}
			var commonNameRegex13 interface{}
			if !r.InputHTTPRaw.TLS.CommonNameRegex.IsUnknown() && !r.InputHTTPRaw.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputHTTPRaw.TLS.CommonNameRegex.ValueString()), &commonNameRegex13)
			}
			minVersion19 := new(shared.InputHTTPRawMinimumTLSVersion)
			if !r.InputHTTPRaw.TLS.MinVersion.IsUnknown() && !r.InputHTTPRaw.TLS.MinVersion.IsNull() {
				*minVersion19 = shared.InputHTTPRawMinimumTLSVersion(r.InputHTTPRaw.TLS.MinVersion.ValueString())
			} else {
				minVersion19 = nil
			}
			maxVersion19 := new(shared.InputHTTPRawMaximumTLSVersion)
			if !r.InputHTTPRaw.TLS.MaxVersion.IsUnknown() && !r.InputHTTPRaw.TLS.MaxVersion.IsNull() {
				*maxVersion19 = shared.InputHTTPRawMaximumTLSVersion(r.InputHTTPRaw.TLS.MaxVersion.ValueString())
			} else {
				maxVersion19 = nil
			}
			tls20 = &shared.InputHTTPRawTLSSettingsServerSide{
				Disabled:           disabled68,
				CertificateName:    certificateName21,
				PrivKeyPath:        privKeyPath20,
				Passphrase:         passphrase20,
				CertPath:           certPath20,
				CaPath:             caPath19,
				RequestCert:        requestCert13,
				RejectUnauthorized: rejectUnauthorized27,
				CommonNameRegex:    commonNameRegex13,
				MinVersion:         minVersion19,
				MaxVersion:         maxVersion19,
			}
		}
		maxActiveReq10 := new(float64)
		if !r.InputHTTPRaw.MaxActiveReq.IsUnknown() && !r.InputHTTPRaw.MaxActiveReq.IsNull() {
			*maxActiveReq10 = r.InputHTTPRaw.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq10 = nil
		}
		maxRequestsPerSocket10 := new(int64)
		if !r.InputHTTPRaw.MaxRequestsPerSocket.IsUnknown() && !r.InputHTTPRaw.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket10 = r.InputHTTPRaw.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket10 = nil
		}
		enableProxyHeader13 := new(bool)
		if !r.InputHTTPRaw.EnableProxyHeader.IsUnknown() && !r.InputHTTPRaw.EnableProxyHeader.IsNull() {
			*enableProxyHeader13 = r.InputHTTPRaw.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader13 = nil
		}
		captureHeaders10 := new(bool)
		if !r.InputHTTPRaw.CaptureHeaders.IsUnknown() && !r.InputHTTPRaw.CaptureHeaders.IsNull() {
			*captureHeaders10 = r.InputHTTPRaw.CaptureHeaders.ValueBool()
		} else {
			captureHeaders10 = nil
		}
		activityLogSampleRate10 := new(float64)
		if !r.InputHTTPRaw.ActivityLogSampleRate.IsUnknown() && !r.InputHTTPRaw.ActivityLogSampleRate.IsNull() {
			*activityLogSampleRate10 = r.InputHTTPRaw.ActivityLogSampleRate.ValueFloat64()
		} else {
			activityLogSampleRate10 = nil
		}
		requestTimeout19 := new(float64)
		if !r.InputHTTPRaw.RequestTimeout.IsUnknown() && !r.InputHTTPRaw.RequestTimeout.IsNull() {
			*requestTimeout19 = r.InputHTTPRaw.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout19 = nil
		}
		socketTimeout11 := new(float64)
		if !r.InputHTTPRaw.SocketTimeout.IsUnknown() && !r.InputHTTPRaw.SocketTimeout.IsNull() {
			*socketTimeout11 = r.InputHTTPRaw.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout11 = nil
		}
		keepAliveTimeout10 := new(float64)
		if !r.InputHTTPRaw.KeepAliveTimeout.IsUnknown() && !r.InputHTTPRaw.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout10 = r.InputHTTPRaw.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout10 = nil
		}
		enableHealthCheck10 := new(bool)
		if !r.InputHTTPRaw.EnableHealthCheck.IsUnknown() && !r.InputHTTPRaw.EnableHealthCheck.IsNull() {
			*enableHealthCheck10 = r.InputHTTPRaw.EnableHealthCheck.ValueBool()
		} else {
			enableHealthCheck10 = nil
		}
		ipAllowlistRegex10 := new(string)
		if !r.InputHTTPRaw.IPAllowlistRegex.IsUnknown() && !r.InputHTTPRaw.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex10 = r.InputHTTPRaw.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex10 = nil
		}
		ipDenylistRegex10 := new(string)
		if !r.InputHTTPRaw.IPDenylistRegex.IsUnknown() && !r.InputHTTPRaw.IPDenylistRegex.IsNull() {
			*ipDenylistRegex10 = r.InputHTTPRaw.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex10 = nil
		}
		breakerRulesets8 := make([]string, 0, len(r.InputHTTPRaw.BreakerRulesets))
		for _, breakerRulesetsItem8 := range r.InputHTTPRaw.BreakerRulesets {
			breakerRulesets8 = append(breakerRulesets8, breakerRulesetsItem8.ValueString())
		}
		staleChannelFlushMs8 := new(float64)
		if !r.InputHTTPRaw.StaleChannelFlushMs.IsUnknown() && !r.InputHTTPRaw.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs8 = r.InputHTTPRaw.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs8 = nil
		}
		metadata39 := make([]shared.InputHTTPRawMetadata, 0, len(r.InputHTTPRaw.Metadata))
		for _, metadataItem38 := range r.InputHTTPRaw.Metadata {
			var name59 string
			name59 = metadataItem38.Name.ValueString()

			var value55 string
			value55 = metadataItem38.Value.ValueString()

			metadata39 = append(metadata39, shared.InputHTTPRawMetadata{
				Name:  name59,
				Value: value55,
			})
		}
		allowedPaths := make([]string, 0, len(r.InputHTTPRaw.AllowedPaths))
		for _, allowedPathsItem := range r.InputHTTPRaw.AllowedPaths {
			allowedPaths = append(allowedPaths, allowedPathsItem.ValueString())
		}
		allowedMethods := make([]string, 0, len(r.InputHTTPRaw.AllowedMethods))
		for _, allowedMethodsItem := range r.InputHTTPRaw.AllowedMethods {
			allowedMethods = append(allowedMethods, allowedMethodsItem.ValueString())
		}
		authTokensExt1 := make([]shared.InputHTTPRawAuthTokensExt, 0, len(r.InputHTTPRaw.AuthTokensExt))
		for _, authTokensExtItem1 := range r.InputHTTPRaw.AuthTokensExt {
			var token10 string
			token10 = authTokensExtItem1.Token.ValueString()

			description44 := new(string)
			if !authTokensExtItem1.Description.IsUnknown() && !authTokensExtItem1.Description.IsNull() {
				*description44 = authTokensExtItem1.Description.ValueString()
			} else {
				description44 = nil
			}
			metadata40 := make([]shared.InputHTTPRawInputMetadata, 0, len(authTokensExtItem1.Metadata))
			for _, metadataItem39 := range authTokensExtItem1.Metadata {
				var name60 string
				name60 = metadataItem39.Name.ValueString()

				var value56 string
				value56 = metadataItem39.Value.ValueString()

				metadata40 = append(metadata40, shared.InputHTTPRawInputMetadata{
					Name:  name60,
					Value: value56,
				})
			}
			authTokensExt1 = append(authTokensExt1, shared.InputHTTPRawAuthTokensExt{
				Token:       token10,
				Description: description44,
				Metadata:    metadata40,
			})
		}
		description45 := new(string)
		if !r.InputHTTPRaw.Description.IsUnknown() && !r.InputHTTPRaw.Description.IsNull() {
			*description45 = r.InputHTTPRaw.Description.ValueString()
		} else {
			description45 = nil
		}
		var status36 *shared.TFStatus
		if r.InputHTTPRaw.Status != nil {
			health36 := shared.Health(r.InputHTTPRaw.Status.Health.ValueString())
			metrics36 := make(map[string]interface{})
			for metricsKey36, metricsValue36 := range r.InputHTTPRaw.Status.Metrics {
				var metricsInst36 interface{}
				_ = json.Unmarshal([]byte(metricsValue36.ValueString()), &metricsInst36)
				metrics36[metricsKey36] = metricsInst36
			}
			var timestamp36 float64
			timestamp36 = r.InputHTTPRaw.Status.Timestamp.ValueFloat64()

			useStatusFromLb36 := new(bool)
			if !r.InputHTTPRaw.Status.UseStatusFromLB.IsUnknown() && !r.InputHTTPRaw.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb36 = r.InputHTTPRaw.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb36 = nil
			}
			status36 = &shared.TFStatus{
				Health:          health36,
				Metrics:         metrics36,
				Timestamp:       timestamp36,
				UseStatusFromLB: useStatusFromLb36,
			}
		}
		inputHTTPRaw = &shared.InputHTTPRaw{
			ID:                    id36,
			Type:                  typeVar40,
			Disabled:              disabled67,
			Pipeline:              pipeline72,
			SendToRoutes:          sendToRoutes36,
			Environment:           environment36,
			PqEnabled:             pqEnabled36,
			Streamtags:            streamtags36,
			Connections:           connections36,
			Pq:                    pq36,
			Host:                  host16,
			Port:                  port14,
			AuthTokens:            authTokens6,
			TLS:                   tls20,
			MaxActiveReq:          maxActiveReq10,
			MaxRequestsPerSocket:  maxRequestsPerSocket10,
			EnableProxyHeader:     enableProxyHeader13,
			CaptureHeaders:        captureHeaders10,
			ActivityLogSampleRate: activityLogSampleRate10,
			RequestTimeout:        requestTimeout19,
			SocketTimeout:         socketTimeout11,
			KeepAliveTimeout:      keepAliveTimeout10,
			EnableHealthCheck:     enableHealthCheck10,
			IPAllowlistRegex:      ipAllowlistRegex10,
			IPDenylistRegex:       ipDenylistRegex10,
			BreakerRulesets:       breakerRulesets8,
			StaleChannelFlushMs:   staleChannelFlushMs8,
			Metadata:              metadata39,
			AllowedPaths:          allowedPaths,
			AllowedMethods:        allowedMethods,
			AuthTokensExt:         authTokensExt1,
			Description:           description45,
			Status:                status36,
		}
	}
	if inputHTTPRaw != nil {
		out = shared.Input{
			InputHTTPRaw: inputHTTPRaw,
		}
	}
	var inputKinesis *shared.InputKinesis
	if r.InputKinesis != nil {
		id37 := new(string)
		if !r.InputKinesis.ID.IsUnknown() && !r.InputKinesis.ID.IsNull() {
			*id37 = r.InputKinesis.ID.ValueString()
		} else {
			id37 = nil
		}
		typeVar41 := new(shared.InputKinesisType)
		if !r.InputKinesis.Type.IsUnknown() && !r.InputKinesis.Type.IsNull() {
			*typeVar41 = shared.InputKinesisType(r.InputKinesis.Type.ValueString())
		} else {
			typeVar41 = nil
		}
		disabled69 := new(bool)
		if !r.InputKinesis.Disabled.IsUnknown() && !r.InputKinesis.Disabled.IsNull() {
			*disabled69 = r.InputKinesis.Disabled.ValueBool()
		} else {
			disabled69 = nil
		}
		pipeline74 := new(string)
		if !r.InputKinesis.Pipeline.IsUnknown() && !r.InputKinesis.Pipeline.IsNull() {
			*pipeline74 = r.InputKinesis.Pipeline.ValueString()
		} else {
			pipeline74 = nil
		}
		sendToRoutes37 := new(bool)
		if !r.InputKinesis.SendToRoutes.IsUnknown() && !r.InputKinesis.SendToRoutes.IsNull() {
			*sendToRoutes37 = r.InputKinesis.SendToRoutes.ValueBool()
		} else {
			sendToRoutes37 = nil
		}
		environment37 := new(string)
		if !r.InputKinesis.Environment.IsUnknown() && !r.InputKinesis.Environment.IsNull() {
			*environment37 = r.InputKinesis.Environment.ValueString()
		} else {
			environment37 = nil
		}
		pqEnabled37 := new(bool)
		if !r.InputKinesis.PqEnabled.IsUnknown() && !r.InputKinesis.PqEnabled.IsNull() {
			*pqEnabled37 = r.InputKinesis.PqEnabled.ValueBool()
		} else {
			pqEnabled37 = nil
		}
		streamtags37 := make([]string, 0, len(r.InputKinesis.Streamtags))
		for _, streamtagsItem37 := range r.InputKinesis.Streamtags {
			streamtags37 = append(streamtags37, streamtagsItem37.ValueString())
		}
		connections37 := make([]shared.InputKinesisConnections, 0, len(r.InputKinesis.Connections))
		for _, connectionsItem37 := range r.InputKinesis.Connections {
			pipeline75 := new(string)
			if !connectionsItem37.Pipeline.IsUnknown() && !connectionsItem37.Pipeline.IsNull() {
				*pipeline75 = connectionsItem37.Pipeline.ValueString()
			} else {
				pipeline75 = nil
			}
			var output38 string
			output38 = connectionsItem37.Output.ValueString()

			connections37 = append(connections37, shared.InputKinesisConnections{
				Pipeline: pipeline75,
				Output:   output38,
			})
		}
		var pq37 *shared.InputKinesisPq
		if r.InputKinesis.Pq != nil {
			mode50 := new(shared.InputKinesisMode)
			if !r.InputKinesis.Pq.Mode.IsUnknown() && !r.InputKinesis.Pq.Mode.IsNull() {
				*mode50 = shared.InputKinesisMode(r.InputKinesis.Pq.Mode.ValueString())
			} else {
				mode50 = nil
			}
			maxBufferSize37 := new(float64)
			if !r.InputKinesis.Pq.MaxBufferSize.IsUnknown() && !r.InputKinesis.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize37 = r.InputKinesis.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize37 = nil
			}
			commitFrequency37 := new(float64)
			if !r.InputKinesis.Pq.CommitFrequency.IsUnknown() && !r.InputKinesis.Pq.CommitFrequency.IsNull() {
				*commitFrequency37 = r.InputKinesis.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency37 = nil
			}
			maxFileSize37 := new(string)
			if !r.InputKinesis.Pq.MaxFileSize.IsUnknown() && !r.InputKinesis.Pq.MaxFileSize.IsNull() {
				*maxFileSize37 = r.InputKinesis.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize37 = nil
			}
			maxSize37 := new(string)
			if !r.InputKinesis.Pq.MaxSize.IsUnknown() && !r.InputKinesis.Pq.MaxSize.IsNull() {
				*maxSize37 = r.InputKinesis.Pq.MaxSize.ValueString()
			} else {
				maxSize37 = nil
			}
			path38 := new(string)
			if !r.InputKinesis.Pq.Path.IsUnknown() && !r.InputKinesis.Pq.Path.IsNull() {
				*path38 = r.InputKinesis.Pq.Path.ValueString()
			} else {
				path38 = nil
			}
			compress44 := new(shared.InputKinesisCompression)
			if !r.InputKinesis.Pq.Compress.IsUnknown() && !r.InputKinesis.Pq.Compress.IsNull() {
				*compress44 = shared.InputKinesisCompression(r.InputKinesis.Pq.Compress.ValueString())
			} else {
				compress44 = nil
			}
			pq37 = &shared.InputKinesisPq{
				Mode:            mode50,
				MaxBufferSize:   maxBufferSize37,
				CommitFrequency: commitFrequency37,
				MaxFileSize:     maxFileSize37,
				MaxSize:         maxSize37,
				Path:            path38,
				Compress:        compress44,
			}
		}
		var streamName string
		streamName = r.InputKinesis.StreamName.ValueString()

		serviceInterval := new(float64)
		if !r.InputKinesis.ServiceInterval.IsUnknown() && !r.InputKinesis.ServiceInterval.IsNull() {
			*serviceInterval = r.InputKinesis.ServiceInterval.ValueFloat64()
		} else {
			serviceInterval = nil
		}
		shardExpr := new(string)
		if !r.InputKinesis.ShardExpr.IsUnknown() && !r.InputKinesis.ShardExpr.IsNull() {
			*shardExpr = r.InputKinesis.ShardExpr.ValueString()
		} else {
			shardExpr = nil
		}
		shardIteratorType := new(shared.ShardIteratorStart)
		if !r.InputKinesis.ShardIteratorType.IsUnknown() && !r.InputKinesis.ShardIteratorType.IsNull() {
			*shardIteratorType = shared.ShardIteratorStart(r.InputKinesis.ShardIteratorType.ValueString())
		} else {
			shardIteratorType = nil
		}
		payloadFormat := new(shared.RecordDataFormat)
		if !r.InputKinesis.PayloadFormat.IsUnknown() && !r.InputKinesis.PayloadFormat.IsNull() {
			*payloadFormat = shared.RecordDataFormat(r.InputKinesis.PayloadFormat.ValueString())
		} else {
			payloadFormat = nil
		}
		getRecordsLimit := new(float64)
		if !r.InputKinesis.GetRecordsLimit.IsUnknown() && !r.InputKinesis.GetRecordsLimit.IsNull() {
			*getRecordsLimit = r.InputKinesis.GetRecordsLimit.ValueFloat64()
		} else {
			getRecordsLimit = nil
		}
		getRecordsLimitTotal := new(float64)
		if !r.InputKinesis.GetRecordsLimitTotal.IsUnknown() && !r.InputKinesis.GetRecordsLimitTotal.IsNull() {
			*getRecordsLimitTotal = r.InputKinesis.GetRecordsLimitTotal.ValueFloat64()
		} else {
			getRecordsLimitTotal = nil
		}
		loadBalancingAlgorithm := new(shared.ShardLoadBalancing)
		if !r.InputKinesis.LoadBalancingAlgorithm.IsUnknown() && !r.InputKinesis.LoadBalancingAlgorithm.IsNull() {
			*loadBalancingAlgorithm = shared.ShardLoadBalancing(r.InputKinesis.LoadBalancingAlgorithm.ValueString())
		} else {
			loadBalancingAlgorithm = nil
		}
		awsAuthenticationMethod4 := new(shared.InputKinesisAuthenticationMethod)
		if !r.InputKinesis.AwsAuthenticationMethod.IsUnknown() && !r.InputKinesis.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod4 = shared.InputKinesisAuthenticationMethod(r.InputKinesis.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod4 = nil
		}
		awsSecretKey4 := new(string)
		if !r.InputKinesis.AwsSecretKey.IsUnknown() && !r.InputKinesis.AwsSecretKey.IsNull() {
			*awsSecretKey4 = r.InputKinesis.AwsSecretKey.ValueString()
		} else {
			awsSecretKey4 = nil
		}
		var region5 string
		region5 = r.InputKinesis.Region.ValueString()

		endpoint5 := new(string)
		if !r.InputKinesis.Endpoint.IsUnknown() && !r.InputKinesis.Endpoint.IsNull() {
			*endpoint5 = r.InputKinesis.Endpoint.ValueString()
		} else {
			endpoint5 = nil
		}
		signatureVersion4 := new(shared.InputKinesisSignatureVersion)
		if !r.InputKinesis.SignatureVersion.IsUnknown() && !r.InputKinesis.SignatureVersion.IsNull() {
			*signatureVersion4 = shared.InputKinesisSignatureVersion(r.InputKinesis.SignatureVersion.ValueString())
		} else {
			signatureVersion4 = nil
		}
		reuseConnections4 := new(bool)
		if !r.InputKinesis.ReuseConnections.IsUnknown() && !r.InputKinesis.ReuseConnections.IsNull() {
			*reuseConnections4 = r.InputKinesis.ReuseConnections.ValueBool()
		} else {
			reuseConnections4 = nil
		}
		rejectUnauthorized28 := new(bool)
		if !r.InputKinesis.RejectUnauthorized.IsUnknown() && !r.InputKinesis.RejectUnauthorized.IsNull() {
			*rejectUnauthorized28 = r.InputKinesis.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized28 = nil
		}
		enableAssumeRole4 := new(bool)
		if !r.InputKinesis.EnableAssumeRole.IsUnknown() && !r.InputKinesis.EnableAssumeRole.IsNull() {
			*enableAssumeRole4 = r.InputKinesis.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole4 = nil
		}
		assumeRoleArn4 := new(string)
		if !r.InputKinesis.AssumeRoleArn.IsUnknown() && !r.InputKinesis.AssumeRoleArn.IsNull() {
			*assumeRoleArn4 = r.InputKinesis.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn4 = nil
		}
		assumeRoleExternalId4 := new(string)
		if !r.InputKinesis.AssumeRoleExternalID.IsUnknown() && !r.InputKinesis.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId4 = r.InputKinesis.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId4 = nil
		}
		durationSeconds4 := new(float64)
		if !r.InputKinesis.DurationSeconds.IsUnknown() && !r.InputKinesis.DurationSeconds.IsNull() {
			*durationSeconds4 = r.InputKinesis.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds4 = nil
		}
		verifyKPLCheckSums := new(bool)
		if !r.InputKinesis.VerifyKPLCheckSums.IsUnknown() && !r.InputKinesis.VerifyKPLCheckSums.IsNull() {
			*verifyKPLCheckSums = r.InputKinesis.VerifyKPLCheckSums.ValueBool()
		} else {
			verifyKPLCheckSums = nil
		}
		avoidDuplicates := new(bool)
		if !r.InputKinesis.AvoidDuplicates.IsUnknown() && !r.InputKinesis.AvoidDuplicates.IsNull() {
			*avoidDuplicates = r.InputKinesis.AvoidDuplicates.ValueBool()
		} else {
			avoidDuplicates = nil
		}
		metadata41 := make([]shared.InputKinesisMetadata, 0, len(r.InputKinesis.Metadata))
		for _, metadataItem40 := range r.InputKinesis.Metadata {
			var name61 string
			name61 = metadataItem40.Name.ValueString()

			var value57 string
			value57 = metadataItem40.Value.ValueString()

			metadata41 = append(metadata41, shared.InputKinesisMetadata{
				Name:  name61,
				Value: value57,
			})
		}
		description46 := new(string)
		if !r.InputKinesis.Description.IsUnknown() && !r.InputKinesis.Description.IsNull() {
			*description46 = r.InputKinesis.Description.ValueString()
		} else {
			description46 = nil
		}
		awsAPIKey2 := new(string)
		if !r.InputKinesis.AwsAPIKey.IsUnknown() && !r.InputKinesis.AwsAPIKey.IsNull() {
			*awsAPIKey2 = r.InputKinesis.AwsAPIKey.ValueString()
		} else {
			awsAPIKey2 = nil
		}
		awsSecret2 := new(string)
		if !r.InputKinesis.AwsSecret.IsUnknown() && !r.InputKinesis.AwsSecret.IsNull() {
			*awsSecret2 = r.InputKinesis.AwsSecret.ValueString()
		} else {
			awsSecret2 = nil
		}
		var status37 *shared.TFStatus
		if r.InputKinesis.Status != nil {
			health37 := shared.Health(r.InputKinesis.Status.Health.ValueString())
			metrics37 := make(map[string]interface{})
			for metricsKey37, metricsValue37 := range r.InputKinesis.Status.Metrics {
				var metricsInst37 interface{}
				_ = json.Unmarshal([]byte(metricsValue37.ValueString()), &metricsInst37)
				metrics37[metricsKey37] = metricsInst37
			}
			var timestamp37 float64
			timestamp37 = r.InputKinesis.Status.Timestamp.ValueFloat64()

			useStatusFromLb37 := new(bool)
			if !r.InputKinesis.Status.UseStatusFromLB.IsUnknown() && !r.InputKinesis.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb37 = r.InputKinesis.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb37 = nil
			}
			status37 = &shared.TFStatus{
				Health:          health37,
				Metrics:         metrics37,
				Timestamp:       timestamp37,
				UseStatusFromLB: useStatusFromLb37,
			}
		}
		inputKinesis = &shared.InputKinesis{
			ID:                      id37,
			Type:                    typeVar41,
			Disabled:                disabled69,
			Pipeline:                pipeline74,
			SendToRoutes:            sendToRoutes37,
			Environment:             environment37,
			PqEnabled:               pqEnabled37,
			Streamtags:              streamtags37,
			Connections:             connections37,
			Pq:                      pq37,
			StreamName:              streamName,
			ServiceInterval:         serviceInterval,
			ShardExpr:               shardExpr,
			ShardIteratorType:       shardIteratorType,
			PayloadFormat:           payloadFormat,
			GetRecordsLimit:         getRecordsLimit,
			GetRecordsLimitTotal:    getRecordsLimitTotal,
			LoadBalancingAlgorithm:  loadBalancingAlgorithm,
			AwsAuthenticationMethod: awsAuthenticationMethod4,
			AwsSecretKey:            awsSecretKey4,
			Region:                  region5,
			Endpoint:                endpoint5,
			SignatureVersion:        signatureVersion4,
			ReuseConnections:        reuseConnections4,
			RejectUnauthorized:      rejectUnauthorized28,
			EnableAssumeRole:        enableAssumeRole4,
			AssumeRoleArn:           assumeRoleArn4,
			AssumeRoleExternalID:    assumeRoleExternalId4,
			DurationSeconds:         durationSeconds4,
			VerifyKPLCheckSums:      verifyKPLCheckSums,
			AvoidDuplicates:         avoidDuplicates,
			Metadata:                metadata41,
			Description:             description46,
			AwsAPIKey:               awsAPIKey2,
			AwsSecret:               awsSecret2,
			Status:                  status37,
		}
	}
	if inputKinesis != nil {
		out = shared.Input{
			InputKinesis: inputKinesis,
		}
	}
	var inputCriblmetrics *shared.InputCriblmetrics
	if r.InputCriblmetrics != nil {
		var id38 string
		id38 = r.InputCriblmetrics.ID.ValueString()

		typeVar42 := shared.InputCriblmetricsType(r.InputCriblmetrics.Type.ValueString())
		disabled70 := new(bool)
		if !r.InputCriblmetrics.Disabled.IsUnknown() && !r.InputCriblmetrics.Disabled.IsNull() {
			*disabled70 = r.InputCriblmetrics.Disabled.ValueBool()
		} else {
			disabled70 = nil
		}
		pipeline76 := new(string)
		if !r.InputCriblmetrics.Pipeline.IsUnknown() && !r.InputCriblmetrics.Pipeline.IsNull() {
			*pipeline76 = r.InputCriblmetrics.Pipeline.ValueString()
		} else {
			pipeline76 = nil
		}
		sendToRoutes38 := new(bool)
		if !r.InputCriblmetrics.SendToRoutes.IsUnknown() && !r.InputCriblmetrics.SendToRoutes.IsNull() {
			*sendToRoutes38 = r.InputCriblmetrics.SendToRoutes.ValueBool()
		} else {
			sendToRoutes38 = nil
		}
		environment38 := new(string)
		if !r.InputCriblmetrics.Environment.IsUnknown() && !r.InputCriblmetrics.Environment.IsNull() {
			*environment38 = r.InputCriblmetrics.Environment.ValueString()
		} else {
			environment38 = nil
		}
		pqEnabled38 := new(bool)
		if !r.InputCriblmetrics.PqEnabled.IsUnknown() && !r.InputCriblmetrics.PqEnabled.IsNull() {
			*pqEnabled38 = r.InputCriblmetrics.PqEnabled.ValueBool()
		} else {
			pqEnabled38 = nil
		}
		streamtags38 := make([]string, 0, len(r.InputCriblmetrics.Streamtags))
		for _, streamtagsItem38 := range r.InputCriblmetrics.Streamtags {
			streamtags38 = append(streamtags38, streamtagsItem38.ValueString())
		}
		connections38 := make([]shared.InputCriblmetricsConnections, 0, len(r.InputCriblmetrics.Connections))
		for _, connectionsItem38 := range r.InputCriblmetrics.Connections {
			pipeline77 := new(string)
			if !connectionsItem38.Pipeline.IsUnknown() && !connectionsItem38.Pipeline.IsNull() {
				*pipeline77 = connectionsItem38.Pipeline.ValueString()
			} else {
				pipeline77 = nil
			}
			var output39 string
			output39 = connectionsItem38.Output.ValueString()

			connections38 = append(connections38, shared.InputCriblmetricsConnections{
				Pipeline: pipeline77,
				Output:   output39,
			})
		}
		var pq38 *shared.InputCriblmetricsPq
		if r.InputCriblmetrics.Pq != nil {
			mode51 := new(shared.InputCriblmetricsMode)
			if !r.InputCriblmetrics.Pq.Mode.IsUnknown() && !r.InputCriblmetrics.Pq.Mode.IsNull() {
				*mode51 = shared.InputCriblmetricsMode(r.InputCriblmetrics.Pq.Mode.ValueString())
			} else {
				mode51 = nil
			}
			maxBufferSize38 := new(float64)
			if !r.InputCriblmetrics.Pq.MaxBufferSize.IsUnknown() && !r.InputCriblmetrics.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize38 = r.InputCriblmetrics.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize38 = nil
			}
			commitFrequency38 := new(float64)
			if !r.InputCriblmetrics.Pq.CommitFrequency.IsUnknown() && !r.InputCriblmetrics.Pq.CommitFrequency.IsNull() {
				*commitFrequency38 = r.InputCriblmetrics.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency38 = nil
			}
			maxFileSize38 := new(string)
			if !r.InputCriblmetrics.Pq.MaxFileSize.IsUnknown() && !r.InputCriblmetrics.Pq.MaxFileSize.IsNull() {
				*maxFileSize38 = r.InputCriblmetrics.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize38 = nil
			}
			maxSize38 := new(string)
			if !r.InputCriblmetrics.Pq.MaxSize.IsUnknown() && !r.InputCriblmetrics.Pq.MaxSize.IsNull() {
				*maxSize38 = r.InputCriblmetrics.Pq.MaxSize.ValueString()
			} else {
				maxSize38 = nil
			}
			path39 := new(string)
			if !r.InputCriblmetrics.Pq.Path.IsUnknown() && !r.InputCriblmetrics.Pq.Path.IsNull() {
				*path39 = r.InputCriblmetrics.Pq.Path.ValueString()
			} else {
				path39 = nil
			}
			compress45 := new(shared.InputCriblmetricsCompression)
			if !r.InputCriblmetrics.Pq.Compress.IsUnknown() && !r.InputCriblmetrics.Pq.Compress.IsNull() {
				*compress45 = shared.InputCriblmetricsCompression(r.InputCriblmetrics.Pq.Compress.ValueString())
			} else {
				compress45 = nil
			}
			pq38 = &shared.InputCriblmetricsPq{
				Mode:            mode51,
				MaxBufferSize:   maxBufferSize38,
				CommitFrequency: commitFrequency38,
				MaxFileSize:     maxFileSize38,
				MaxSize:         maxSize38,
				Path:            path39,
				Compress:        compress45,
			}
		}
		prefix := new(string)
		if !r.InputCriblmetrics.Prefix.IsUnknown() && !r.InputCriblmetrics.Prefix.IsNull() {
			*prefix = r.InputCriblmetrics.Prefix.ValueString()
		} else {
			prefix = nil
		}
		fullFidelity := new(bool)
		if !r.InputCriblmetrics.FullFidelity.IsUnknown() && !r.InputCriblmetrics.FullFidelity.IsNull() {
			*fullFidelity = r.InputCriblmetrics.FullFidelity.ValueBool()
		} else {
			fullFidelity = nil
		}
		metadata42 := make([]shared.InputCriblmetricsMetadata, 0, len(r.InputCriblmetrics.Metadata))
		for _, metadataItem41 := range r.InputCriblmetrics.Metadata {
			var name62 string
			name62 = metadataItem41.Name.ValueString()

			var value58 string
			value58 = metadataItem41.Value.ValueString()

			metadata42 = append(metadata42, shared.InputCriblmetricsMetadata{
				Name:  name62,
				Value: value58,
			})
		}
		description47 := new(string)
		if !r.InputCriblmetrics.Description.IsUnknown() && !r.InputCriblmetrics.Description.IsNull() {
			*description47 = r.InputCriblmetrics.Description.ValueString()
		} else {
			description47 = nil
		}
		var status38 *shared.TFStatus
		if r.InputCriblmetrics.Status != nil {
			health38 := shared.Health(r.InputCriblmetrics.Status.Health.ValueString())
			metrics38 := make(map[string]interface{})
			for metricsKey38, metricsValue38 := range r.InputCriblmetrics.Status.Metrics {
				var metricsInst38 interface{}
				_ = json.Unmarshal([]byte(metricsValue38.ValueString()), &metricsInst38)
				metrics38[metricsKey38] = metricsInst38
			}
			var timestamp38 float64
			timestamp38 = r.InputCriblmetrics.Status.Timestamp.ValueFloat64()

			useStatusFromLb38 := new(bool)
			if !r.InputCriblmetrics.Status.UseStatusFromLB.IsUnknown() && !r.InputCriblmetrics.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb38 = r.InputCriblmetrics.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb38 = nil
			}
			status38 = &shared.TFStatus{
				Health:          health38,
				Metrics:         metrics38,
				Timestamp:       timestamp38,
				UseStatusFromLB: useStatusFromLb38,
			}
		}
		inputCriblmetrics = &shared.InputCriblmetrics{
			ID:           id38,
			Type:         typeVar42,
			Disabled:     disabled70,
			Pipeline:     pipeline76,
			SendToRoutes: sendToRoutes38,
			Environment:  environment38,
			PqEnabled:    pqEnabled38,
			Streamtags:   streamtags38,
			Connections:  connections38,
			Pq:           pq38,
			Prefix:       prefix,
			FullFidelity: fullFidelity,
			Metadata:     metadata42,
			Description:  description47,
			Status:       status38,
		}
	}
	if inputCriblmetrics != nil {
		out = shared.Input{
			InputCriblmetrics: inputCriblmetrics,
		}
	}
	var inputMetrics *shared.InputMetrics
	if r.InputMetrics != nil {
		id39 := new(string)
		if !r.InputMetrics.ID.IsUnknown() && !r.InputMetrics.ID.IsNull() {
			*id39 = r.InputMetrics.ID.ValueString()
		} else {
			id39 = nil
		}
		typeVar43 := shared.InputMetricsType(r.InputMetrics.Type.ValueString())
		disabled71 := new(bool)
		if !r.InputMetrics.Disabled.IsUnknown() && !r.InputMetrics.Disabled.IsNull() {
			*disabled71 = r.InputMetrics.Disabled.ValueBool()
		} else {
			disabled71 = nil
		}
		pipeline78 := new(string)
		if !r.InputMetrics.Pipeline.IsUnknown() && !r.InputMetrics.Pipeline.IsNull() {
			*pipeline78 = r.InputMetrics.Pipeline.ValueString()
		} else {
			pipeline78 = nil
		}
		sendToRoutes39 := new(bool)
		if !r.InputMetrics.SendToRoutes.IsUnknown() && !r.InputMetrics.SendToRoutes.IsNull() {
			*sendToRoutes39 = r.InputMetrics.SendToRoutes.ValueBool()
		} else {
			sendToRoutes39 = nil
		}
		environment39 := new(string)
		if !r.InputMetrics.Environment.IsUnknown() && !r.InputMetrics.Environment.IsNull() {
			*environment39 = r.InputMetrics.Environment.ValueString()
		} else {
			environment39 = nil
		}
		pqEnabled39 := new(bool)
		if !r.InputMetrics.PqEnabled.IsUnknown() && !r.InputMetrics.PqEnabled.IsNull() {
			*pqEnabled39 = r.InputMetrics.PqEnabled.ValueBool()
		} else {
			pqEnabled39 = nil
		}
		streamtags39 := make([]string, 0, len(r.InputMetrics.Streamtags))
		for _, streamtagsItem39 := range r.InputMetrics.Streamtags {
			streamtags39 = append(streamtags39, streamtagsItem39.ValueString())
		}
		connections39 := make([]shared.InputMetricsConnections, 0, len(r.InputMetrics.Connections))
		for _, connectionsItem39 := range r.InputMetrics.Connections {
			pipeline79 := new(string)
			if !connectionsItem39.Pipeline.IsUnknown() && !connectionsItem39.Pipeline.IsNull() {
				*pipeline79 = connectionsItem39.Pipeline.ValueString()
			} else {
				pipeline79 = nil
			}
			var output40 string
			output40 = connectionsItem39.Output.ValueString()

			connections39 = append(connections39, shared.InputMetricsConnections{
				Pipeline: pipeline79,
				Output:   output40,
			})
		}
		var pq39 *shared.InputMetricsPq
		if r.InputMetrics.Pq != nil {
			mode52 := new(shared.InputMetricsMode)
			if !r.InputMetrics.Pq.Mode.IsUnknown() && !r.InputMetrics.Pq.Mode.IsNull() {
				*mode52 = shared.InputMetricsMode(r.InputMetrics.Pq.Mode.ValueString())
			} else {
				mode52 = nil
			}
			maxBufferSize39 := new(float64)
			if !r.InputMetrics.Pq.MaxBufferSize.IsUnknown() && !r.InputMetrics.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize39 = r.InputMetrics.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize39 = nil
			}
			commitFrequency39 := new(float64)
			if !r.InputMetrics.Pq.CommitFrequency.IsUnknown() && !r.InputMetrics.Pq.CommitFrequency.IsNull() {
				*commitFrequency39 = r.InputMetrics.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency39 = nil
			}
			maxFileSize39 := new(string)
			if !r.InputMetrics.Pq.MaxFileSize.IsUnknown() && !r.InputMetrics.Pq.MaxFileSize.IsNull() {
				*maxFileSize39 = r.InputMetrics.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize39 = nil
			}
			maxSize39 := new(string)
			if !r.InputMetrics.Pq.MaxSize.IsUnknown() && !r.InputMetrics.Pq.MaxSize.IsNull() {
				*maxSize39 = r.InputMetrics.Pq.MaxSize.ValueString()
			} else {
				maxSize39 = nil
			}
			path40 := new(string)
			if !r.InputMetrics.Pq.Path.IsUnknown() && !r.InputMetrics.Pq.Path.IsNull() {
				*path40 = r.InputMetrics.Pq.Path.ValueString()
			} else {
				path40 = nil
			}
			compress46 := new(shared.InputMetricsCompression)
			if !r.InputMetrics.Pq.Compress.IsUnknown() && !r.InputMetrics.Pq.Compress.IsNull() {
				*compress46 = shared.InputMetricsCompression(r.InputMetrics.Pq.Compress.ValueString())
			} else {
				compress46 = nil
			}
			pq39 = &shared.InputMetricsPq{
				Mode:            mode52,
				MaxBufferSize:   maxBufferSize39,
				CommitFrequency: commitFrequency39,
				MaxFileSize:     maxFileSize39,
				MaxSize:         maxSize39,
				Path:            path40,
				Compress:        compress46,
			}
		}
		host17 := new(string)
		if !r.InputMetrics.Host.IsUnknown() && !r.InputMetrics.Host.IsNull() {
			*host17 = r.InputMetrics.Host.ValueString()
		} else {
			host17 = nil
		}
		udpPort := new(float64)
		if !r.InputMetrics.UDPPort.IsUnknown() && !r.InputMetrics.UDPPort.IsNull() {
			*udpPort = r.InputMetrics.UDPPort.ValueFloat64()
		} else {
			udpPort = nil
		}
		tcpPort := new(float64)
		if !r.InputMetrics.TCPPort.IsUnknown() && !r.InputMetrics.TCPPort.IsNull() {
			*tcpPort = r.InputMetrics.TCPPort.ValueFloat64()
		} else {
			tcpPort = nil
		}
		maxBufferSize40 := new(float64)
		if !r.InputMetrics.MaxBufferSize.IsUnknown() && !r.InputMetrics.MaxBufferSize.IsNull() {
			*maxBufferSize40 = r.InputMetrics.MaxBufferSize.ValueFloat64()
		} else {
			maxBufferSize40 = nil
		}
		ipWhitelistRegex2 := new(string)
		if !r.InputMetrics.IPWhitelistRegex.IsUnknown() && !r.InputMetrics.IPWhitelistRegex.IsNull() {
			*ipWhitelistRegex2 = r.InputMetrics.IPWhitelistRegex.ValueString()
		} else {
			ipWhitelistRegex2 = nil
		}
		enableProxyHeader14 := new(bool)
		if !r.InputMetrics.EnableProxyHeader.IsUnknown() && !r.InputMetrics.EnableProxyHeader.IsNull() {
			*enableProxyHeader14 = r.InputMetrics.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader14 = nil
		}
		var tls21 *shared.InputMetricsTLSSettingsServerSide
		if r.InputMetrics.TLS != nil {
			disabled72 := new(bool)
			if !r.InputMetrics.TLS.Disabled.IsUnknown() && !r.InputMetrics.TLS.Disabled.IsNull() {
				*disabled72 = r.InputMetrics.TLS.Disabled.ValueBool()
			} else {
				disabled72 = nil
			}
			certificateName22 := new(string)
			if !r.InputMetrics.TLS.CertificateName.IsUnknown() && !r.InputMetrics.TLS.CertificateName.IsNull() {
				*certificateName22 = r.InputMetrics.TLS.CertificateName.ValueString()
			} else {
				certificateName22 = nil
			}
			privKeyPath21 := new(string)
			if !r.InputMetrics.TLS.PrivKeyPath.IsUnknown() && !r.InputMetrics.TLS.PrivKeyPath.IsNull() {
				*privKeyPath21 = r.InputMetrics.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath21 = nil
			}
			passphrase21 := new(string)
			if !r.InputMetrics.TLS.Passphrase.IsUnknown() && !r.InputMetrics.TLS.Passphrase.IsNull() {
				*passphrase21 = r.InputMetrics.TLS.Passphrase.ValueString()
			} else {
				passphrase21 = nil
			}
			certPath21 := new(string)
			if !r.InputMetrics.TLS.CertPath.IsUnknown() && !r.InputMetrics.TLS.CertPath.IsNull() {
				*certPath21 = r.InputMetrics.TLS.CertPath.ValueString()
			} else {
				certPath21 = nil
			}
			caPath20 := new(string)
			if !r.InputMetrics.TLS.CaPath.IsUnknown() && !r.InputMetrics.TLS.CaPath.IsNull() {
				*caPath20 = r.InputMetrics.TLS.CaPath.ValueString()
			} else {
				caPath20 = nil
			}
			requestCert14 := new(bool)
			if !r.InputMetrics.TLS.RequestCert.IsUnknown() && !r.InputMetrics.TLS.RequestCert.IsNull() {
				*requestCert14 = r.InputMetrics.TLS.RequestCert.ValueBool()
			} else {
				requestCert14 = nil
			}
			var rejectUnauthorized29 interface{}
			if !r.InputMetrics.TLS.RejectUnauthorized.IsUnknown() && !r.InputMetrics.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputMetrics.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized29)
			}
			var commonNameRegex14 interface{}
			if !r.InputMetrics.TLS.CommonNameRegex.IsUnknown() && !r.InputMetrics.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputMetrics.TLS.CommonNameRegex.ValueString()), &commonNameRegex14)
			}
			minVersion20 := new(shared.InputMetricsMinimumTLSVersion)
			if !r.InputMetrics.TLS.MinVersion.IsUnknown() && !r.InputMetrics.TLS.MinVersion.IsNull() {
				*minVersion20 = shared.InputMetricsMinimumTLSVersion(r.InputMetrics.TLS.MinVersion.ValueString())
			} else {
				minVersion20 = nil
			}
			maxVersion20 := new(shared.InputMetricsMaximumTLSVersion)
			if !r.InputMetrics.TLS.MaxVersion.IsUnknown() && !r.InputMetrics.TLS.MaxVersion.IsNull() {
				*maxVersion20 = shared.InputMetricsMaximumTLSVersion(r.InputMetrics.TLS.MaxVersion.ValueString())
			} else {
				maxVersion20 = nil
			}
			tls21 = &shared.InputMetricsTLSSettingsServerSide{
				Disabled:           disabled72,
				CertificateName:    certificateName22,
				PrivKeyPath:        privKeyPath21,
				Passphrase:         passphrase21,
				CertPath:           certPath21,
				CaPath:             caPath20,
				RequestCert:        requestCert14,
				RejectUnauthorized: rejectUnauthorized29,
				CommonNameRegex:    commonNameRegex14,
				MinVersion:         minVersion20,
				MaxVersion:         maxVersion20,
			}
		}
		metadata43 := make([]shared.InputMetricsMetadata, 0, len(r.InputMetrics.Metadata))
		for _, metadataItem42 := range r.InputMetrics.Metadata {
			var name63 string
			name63 = metadataItem42.Name.ValueString()

			var value59 string
			value59 = metadataItem42.Value.ValueString()

			metadata43 = append(metadata43, shared.InputMetricsMetadata{
				Name:  name63,
				Value: value59,
			})
		}
		udpSocketRxBufSize := new(float64)
		if !r.InputMetrics.UDPSocketRxBufSize.IsUnknown() && !r.InputMetrics.UDPSocketRxBufSize.IsNull() {
			*udpSocketRxBufSize = r.InputMetrics.UDPSocketRxBufSize.ValueFloat64()
		} else {
			udpSocketRxBufSize = nil
		}
		description48 := new(string)
		if !r.InputMetrics.Description.IsUnknown() && !r.InputMetrics.Description.IsNull() {
			*description48 = r.InputMetrics.Description.ValueString()
		} else {
			description48 = nil
		}
		var status39 *shared.TFStatus
		if r.InputMetrics.Status != nil {
			health39 := shared.Health(r.InputMetrics.Status.Health.ValueString())
			metrics39 := make(map[string]interface{})
			for metricsKey39, metricsValue39 := range r.InputMetrics.Status.Metrics {
				var metricsInst39 interface{}
				_ = json.Unmarshal([]byte(metricsValue39.ValueString()), &metricsInst39)
				metrics39[metricsKey39] = metricsInst39
			}
			var timestamp39 float64
			timestamp39 = r.InputMetrics.Status.Timestamp.ValueFloat64()

			useStatusFromLb39 := new(bool)
			if !r.InputMetrics.Status.UseStatusFromLB.IsUnknown() && !r.InputMetrics.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb39 = r.InputMetrics.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb39 = nil
			}
			status39 = &shared.TFStatus{
				Health:          health39,
				Metrics:         metrics39,
				Timestamp:       timestamp39,
				UseStatusFromLB: useStatusFromLb39,
			}
		}
		inputMetrics = &shared.InputMetrics{
			ID:                 id39,
			Type:               typeVar43,
			Disabled:           disabled71,
			Pipeline:           pipeline78,
			SendToRoutes:       sendToRoutes39,
			Environment:        environment39,
			PqEnabled:          pqEnabled39,
			Streamtags:         streamtags39,
			Connections:        connections39,
			Pq:                 pq39,
			Host:               host17,
			UDPPort:            udpPort,
			TCPPort:            tcpPort,
			MaxBufferSize:      maxBufferSize40,
			IPWhitelistRegex:   ipWhitelistRegex2,
			EnableProxyHeader:  enableProxyHeader14,
			TLS:                tls21,
			Metadata:           metadata43,
			UDPSocketRxBufSize: udpSocketRxBufSize,
			Description:        description48,
			Status:             status39,
		}
	}
	if inputMetrics != nil {
		out = shared.Input{
			InputMetrics: inputMetrics,
		}
	}
	var inputS3 *shared.InputS3
	if r.InputS3 != nil {
		id40 := new(string)
		if !r.InputS3.ID.IsUnknown() && !r.InputS3.ID.IsNull() {
			*id40 = r.InputS3.ID.ValueString()
		} else {
			id40 = nil
		}
		typeVar44 := shared.InputS3Type(r.InputS3.Type.ValueString())
		disabled73 := new(bool)
		if !r.InputS3.Disabled.IsUnknown() && !r.InputS3.Disabled.IsNull() {
			*disabled73 = r.InputS3.Disabled.ValueBool()
		} else {
			disabled73 = nil
		}
		pipeline80 := new(string)
		if !r.InputS3.Pipeline.IsUnknown() && !r.InputS3.Pipeline.IsNull() {
			*pipeline80 = r.InputS3.Pipeline.ValueString()
		} else {
			pipeline80 = nil
		}
		sendToRoutes40 := new(bool)
		if !r.InputS3.SendToRoutes.IsUnknown() && !r.InputS3.SendToRoutes.IsNull() {
			*sendToRoutes40 = r.InputS3.SendToRoutes.ValueBool()
		} else {
			sendToRoutes40 = nil
		}
		environment40 := new(string)
		if !r.InputS3.Environment.IsUnknown() && !r.InputS3.Environment.IsNull() {
			*environment40 = r.InputS3.Environment.ValueString()
		} else {
			environment40 = nil
		}
		pqEnabled40 := new(bool)
		if !r.InputS3.PqEnabled.IsUnknown() && !r.InputS3.PqEnabled.IsNull() {
			*pqEnabled40 = r.InputS3.PqEnabled.ValueBool()
		} else {
			pqEnabled40 = nil
		}
		streamtags40 := make([]string, 0, len(r.InputS3.Streamtags))
		for _, streamtagsItem40 := range r.InputS3.Streamtags {
			streamtags40 = append(streamtags40, streamtagsItem40.ValueString())
		}
		connections40 := make([]shared.InputS3Connections, 0, len(r.InputS3.Connections))
		for _, connectionsItem40 := range r.InputS3.Connections {
			pipeline81 := new(string)
			if !connectionsItem40.Pipeline.IsUnknown() && !connectionsItem40.Pipeline.IsNull() {
				*pipeline81 = connectionsItem40.Pipeline.ValueString()
			} else {
				pipeline81 = nil
			}
			var output41 string
			output41 = connectionsItem40.Output.ValueString()

			connections40 = append(connections40, shared.InputS3Connections{
				Pipeline: pipeline81,
				Output:   output41,
			})
		}
		var pq40 *shared.InputS3Pq
		if r.InputS3.Pq != nil {
			mode53 := new(shared.InputS3Mode)
			if !r.InputS3.Pq.Mode.IsUnknown() && !r.InputS3.Pq.Mode.IsNull() {
				*mode53 = shared.InputS3Mode(r.InputS3.Pq.Mode.ValueString())
			} else {
				mode53 = nil
			}
			maxBufferSize41 := new(float64)
			if !r.InputS3.Pq.MaxBufferSize.IsUnknown() && !r.InputS3.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize41 = r.InputS3.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize41 = nil
			}
			commitFrequency40 := new(float64)
			if !r.InputS3.Pq.CommitFrequency.IsUnknown() && !r.InputS3.Pq.CommitFrequency.IsNull() {
				*commitFrequency40 = r.InputS3.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency40 = nil
			}
			maxFileSize40 := new(string)
			if !r.InputS3.Pq.MaxFileSize.IsUnknown() && !r.InputS3.Pq.MaxFileSize.IsNull() {
				*maxFileSize40 = r.InputS3.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize40 = nil
			}
			maxSize40 := new(string)
			if !r.InputS3.Pq.MaxSize.IsUnknown() && !r.InputS3.Pq.MaxSize.IsNull() {
				*maxSize40 = r.InputS3.Pq.MaxSize.ValueString()
			} else {
				maxSize40 = nil
			}
			path41 := new(string)
			if !r.InputS3.Pq.Path.IsUnknown() && !r.InputS3.Pq.Path.IsNull() {
				*path41 = r.InputS3.Pq.Path.ValueString()
			} else {
				path41 = nil
			}
			compress47 := new(shared.InputS3Compression)
			if !r.InputS3.Pq.Compress.IsUnknown() && !r.InputS3.Pq.Compress.IsNull() {
				*compress47 = shared.InputS3Compression(r.InputS3.Pq.Compress.ValueString())
			} else {
				compress47 = nil
			}
			pq40 = &shared.InputS3Pq{
				Mode:            mode53,
				MaxBufferSize:   maxBufferSize41,
				CommitFrequency: commitFrequency40,
				MaxFileSize:     maxFileSize40,
				MaxSize:         maxSize40,
				Path:            path41,
				Compress:        compress47,
			}
		}
		var queueName2 string
		queueName2 = r.InputS3.QueueName.ValueString()

		fileFilter2 := new(string)
		if !r.InputS3.FileFilter.IsUnknown() && !r.InputS3.FileFilter.IsNull() {
			*fileFilter2 = r.InputS3.FileFilter.ValueString()
		} else {
			fileFilter2 = nil
		}
		awsAccountId1 := new(string)
		if !r.InputS3.AwsAccountID.IsUnknown() && !r.InputS3.AwsAccountID.IsNull() {
			*awsAccountId1 = r.InputS3.AwsAccountID.ValueString()
		} else {
			awsAccountId1 = nil
		}
		awsAuthenticationMethod5 := new(shared.InputS3AuthenticationMethod)
		if !r.InputS3.AwsAuthenticationMethod.IsUnknown() && !r.InputS3.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod5 = shared.InputS3AuthenticationMethod(r.InputS3.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod5 = nil
		}
		awsSecretKey5 := new(string)
		if !r.InputS3.AwsSecretKey.IsUnknown() && !r.InputS3.AwsSecretKey.IsNull() {
			*awsSecretKey5 = r.InputS3.AwsSecretKey.ValueString()
		} else {
			awsSecretKey5 = nil
		}
		region6 := new(string)
		if !r.InputS3.Region.IsUnknown() && !r.InputS3.Region.IsNull() {
			*region6 = r.InputS3.Region.ValueString()
		} else {
			region6 = nil
		}
		endpoint6 := new(string)
		if !r.InputS3.Endpoint.IsUnknown() && !r.InputS3.Endpoint.IsNull() {
			*endpoint6 = r.InputS3.Endpoint.ValueString()
		} else {
			endpoint6 = nil
		}
		signatureVersion5 := new(shared.InputS3SignatureVersion)
		if !r.InputS3.SignatureVersion.IsUnknown() && !r.InputS3.SignatureVersion.IsNull() {
			*signatureVersion5 = shared.InputS3SignatureVersion(r.InputS3.SignatureVersion.ValueString())
		} else {
			signatureVersion5 = nil
		}
		reuseConnections5 := new(bool)
		if !r.InputS3.ReuseConnections.IsUnknown() && !r.InputS3.ReuseConnections.IsNull() {
			*reuseConnections5 = r.InputS3.ReuseConnections.ValueBool()
		} else {
			reuseConnections5 = nil
		}
		rejectUnauthorized30 := new(bool)
		if !r.InputS3.RejectUnauthorized.IsUnknown() && !r.InputS3.RejectUnauthorized.IsNull() {
			*rejectUnauthorized30 = r.InputS3.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized30 = nil
		}
		breakerRulesets9 := make([]string, 0, len(r.InputS3.BreakerRulesets))
		for _, breakerRulesetsItem9 := range r.InputS3.BreakerRulesets {
			breakerRulesets9 = append(breakerRulesets9, breakerRulesetsItem9.ValueString())
		}
		staleChannelFlushMs9 := new(float64)
		if !r.InputS3.StaleChannelFlushMs.IsUnknown() && !r.InputS3.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs9 = r.InputS3.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs9 = nil
		}
		maxMessages2 := new(float64)
		if !r.InputS3.MaxMessages.IsUnknown() && !r.InputS3.MaxMessages.IsNull() {
			*maxMessages2 = r.InputS3.MaxMessages.ValueFloat64()
		} else {
			maxMessages2 = nil
		}
		visibilityTimeout2 := new(float64)
		if !r.InputS3.VisibilityTimeout.IsUnknown() && !r.InputS3.VisibilityTimeout.IsNull() {
			*visibilityTimeout2 = r.InputS3.VisibilityTimeout.ValueFloat64()
		} else {
			visibilityTimeout2 = nil
		}
		numReceivers2 := new(float64)
		if !r.InputS3.NumReceivers.IsUnknown() && !r.InputS3.NumReceivers.IsNull() {
			*numReceivers2 = r.InputS3.NumReceivers.ValueFloat64()
		} else {
			numReceivers2 = nil
		}
		socketTimeout12 := new(float64)
		if !r.InputS3.SocketTimeout.IsUnknown() && !r.InputS3.SocketTimeout.IsNull() {
			*socketTimeout12 = r.InputS3.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout12 = nil
		}
		skipOnError2 := new(bool)
		if !r.InputS3.SkipOnError.IsUnknown() && !r.InputS3.SkipOnError.IsNull() {
			*skipOnError2 = r.InputS3.SkipOnError.ValueBool()
		} else {
			skipOnError2 = nil
		}
		enableAssumeRole5 := new(bool)
		if !r.InputS3.EnableAssumeRole.IsUnknown() && !r.InputS3.EnableAssumeRole.IsNull() {
			*enableAssumeRole5 = r.InputS3.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole5 = nil
		}
		assumeRoleArn5 := new(string)
		if !r.InputS3.AssumeRoleArn.IsUnknown() && !r.InputS3.AssumeRoleArn.IsNull() {
			*assumeRoleArn5 = r.InputS3.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn5 = nil
		}
		assumeRoleExternalId5 := new(string)
		if !r.InputS3.AssumeRoleExternalID.IsUnknown() && !r.InputS3.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId5 = r.InputS3.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId5 = nil
		}
		durationSeconds5 := new(float64)
		if !r.InputS3.DurationSeconds.IsUnknown() && !r.InputS3.DurationSeconds.IsNull() {
			*durationSeconds5 = r.InputS3.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds5 = nil
		}
		enableSQSAssumeRole1 := new(bool)
		if !r.InputS3.EnableSQSAssumeRole.IsUnknown() && !r.InputS3.EnableSQSAssumeRole.IsNull() {
			*enableSQSAssumeRole1 = r.InputS3.EnableSQSAssumeRole.ValueBool()
		} else {
			enableSQSAssumeRole1 = nil
		}
		var preprocess2 *shared.InputS3Preprocess
		if r.InputS3.Preprocess != nil {
			disabled74 := new(bool)
			if !r.InputS3.Preprocess.Disabled.IsUnknown() && !r.InputS3.Preprocess.Disabled.IsNull() {
				*disabled74 = r.InputS3.Preprocess.Disabled.ValueBool()
			} else {
				disabled74 = nil
			}
			command3 := new(string)
			if !r.InputS3.Preprocess.Command.IsUnknown() && !r.InputS3.Preprocess.Command.IsNull() {
				*command3 = r.InputS3.Preprocess.Command.ValueString()
			} else {
				command3 = nil
			}
			args2 := make([]string, 0, len(r.InputS3.Preprocess.Args))
			for _, argsItem2 := range r.InputS3.Preprocess.Args {
				args2 = append(args2, argsItem2.ValueString())
			}
			preprocess2 = &shared.InputS3Preprocess{
				Disabled: disabled74,
				Command:  command3,
				Args:     args2,
			}
		}
		metadata44 := make([]shared.InputS3Metadata, 0, len(r.InputS3.Metadata))
		for _, metadataItem43 := range r.InputS3.Metadata {
			var name64 string
			name64 = metadataItem43.Name.ValueString()

			var value60 string
			value60 = metadataItem43.Value.ValueString()

			metadata44 = append(metadata44, shared.InputS3Metadata{
				Name:  name64,
				Value: value60,
			})
		}
		parquetChunkSizeMb1 := new(float64)
		if !r.InputS3.ParquetChunkSizeMB.IsUnknown() && !r.InputS3.ParquetChunkSizeMB.IsNull() {
			*parquetChunkSizeMb1 = r.InputS3.ParquetChunkSizeMB.ValueFloat64()
		} else {
			parquetChunkSizeMb1 = nil
		}
		parquetChunkDownloadTimeout1 := new(float64)
		if !r.InputS3.ParquetChunkDownloadTimeout.IsUnknown() && !r.InputS3.ParquetChunkDownloadTimeout.IsNull() {
			*parquetChunkDownloadTimeout1 = r.InputS3.ParquetChunkDownloadTimeout.ValueFloat64()
		} else {
			parquetChunkDownloadTimeout1 = nil
		}
		var checkpointing1 *shared.InputS3Checkpointing
		if r.InputS3.Checkpointing != nil {
			enabled6 := new(bool)
			if !r.InputS3.Checkpointing.Enabled.IsUnknown() && !r.InputS3.Checkpointing.Enabled.IsNull() {
				*enabled6 = r.InputS3.Checkpointing.Enabled.ValueBool()
			} else {
				enabled6 = nil
			}
			retries2 := new(float64)
			if !r.InputS3.Checkpointing.Retries.IsUnknown() && !r.InputS3.Checkpointing.Retries.IsNull() {
				*retries2 = r.InputS3.Checkpointing.Retries.ValueFloat64()
			} else {
				retries2 = nil
			}
			checkpointing1 = &shared.InputS3Checkpointing{
				Enabled: enabled6,
				Retries: retries2,
			}
		}
		pollTimeout1 := new(float64)
		if !r.InputS3.PollTimeout.IsUnknown() && !r.InputS3.PollTimeout.IsNull() {
			*pollTimeout1 = r.InputS3.PollTimeout.ValueFloat64()
		} else {
			pollTimeout1 = nil
		}
		encoding2 := new(string)
		if !r.InputS3.Encoding.IsUnknown() && !r.InputS3.Encoding.IsNull() {
			*encoding2 = r.InputS3.Encoding.ValueString()
		} else {
			encoding2 = nil
		}
		description49 := new(string)
		if !r.InputS3.Description.IsUnknown() && !r.InputS3.Description.IsNull() {
			*description49 = r.InputS3.Description.ValueString()
		} else {
			description49 = nil
		}
		awsAPIKey3 := new(string)
		if !r.InputS3.AwsAPIKey.IsUnknown() && !r.InputS3.AwsAPIKey.IsNull() {
			*awsAPIKey3 = r.InputS3.AwsAPIKey.ValueString()
		} else {
			awsAPIKey3 = nil
		}
		awsSecret3 := new(string)
		if !r.InputS3.AwsSecret.IsUnknown() && !r.InputS3.AwsSecret.IsNull() {
			*awsSecret3 = r.InputS3.AwsSecret.ValueString()
		} else {
			awsSecret3 = nil
		}
		var status40 *shared.TFStatus
		if r.InputS3.Status != nil {
			health40 := shared.Health(r.InputS3.Status.Health.ValueString())
			metrics40 := make(map[string]interface{})
			for metricsKey40, metricsValue40 := range r.InputS3.Status.Metrics {
				var metricsInst40 interface{}
				_ = json.Unmarshal([]byte(metricsValue40.ValueString()), &metricsInst40)
				metrics40[metricsKey40] = metricsInst40
			}
			var timestamp40 float64
			timestamp40 = r.InputS3.Status.Timestamp.ValueFloat64()

			useStatusFromLb40 := new(bool)
			if !r.InputS3.Status.UseStatusFromLB.IsUnknown() && !r.InputS3.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb40 = r.InputS3.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb40 = nil
			}
			status40 = &shared.TFStatus{
				Health:          health40,
				Metrics:         metrics40,
				Timestamp:       timestamp40,
				UseStatusFromLB: useStatusFromLb40,
			}
		}
		inputS3 = &shared.InputS3{
			ID:                          id40,
			Type:                        typeVar44,
			Disabled:                    disabled73,
			Pipeline:                    pipeline80,
			SendToRoutes:                sendToRoutes40,
			Environment:                 environment40,
			PqEnabled:                   pqEnabled40,
			Streamtags:                  streamtags40,
			Connections:                 connections40,
			Pq:                          pq40,
			QueueName:                   queueName2,
			FileFilter:                  fileFilter2,
			AwsAccountID:                awsAccountId1,
			AwsAuthenticationMethod:     awsAuthenticationMethod5,
			AwsSecretKey:                awsSecretKey5,
			Region:                      region6,
			Endpoint:                    endpoint6,
			SignatureVersion:            signatureVersion5,
			ReuseConnections:            reuseConnections5,
			RejectUnauthorized:          rejectUnauthorized30,
			BreakerRulesets:             breakerRulesets9,
			StaleChannelFlushMs:         staleChannelFlushMs9,
			MaxMessages:                 maxMessages2,
			VisibilityTimeout:           visibilityTimeout2,
			NumReceivers:                numReceivers2,
			SocketTimeout:               socketTimeout12,
			SkipOnError:                 skipOnError2,
			EnableAssumeRole:            enableAssumeRole5,
			AssumeRoleArn:               assumeRoleArn5,
			AssumeRoleExternalID:        assumeRoleExternalId5,
			DurationSeconds:             durationSeconds5,
			EnableSQSAssumeRole:         enableSQSAssumeRole1,
			Preprocess:                  preprocess2,
			Metadata:                    metadata44,
			ParquetChunkSizeMB:          parquetChunkSizeMb1,
			ParquetChunkDownloadTimeout: parquetChunkDownloadTimeout1,
			Checkpointing:               checkpointing1,
			PollTimeout:                 pollTimeout1,
			Encoding:                    encoding2,
			Description:                 description49,
			AwsAPIKey:                   awsAPIKey3,
			AwsSecret:                   awsSecret3,
			Status:                      status40,
		}
	}
	if inputS3 != nil {
		out = shared.Input{
			InputS3: inputS3,
		}
	}
	var inputS3Inventory *shared.InputS3Inventory
	if r.InputS3Inventory != nil {
		id41 := new(string)
		if !r.InputS3Inventory.ID.IsUnknown() && !r.InputS3Inventory.ID.IsNull() {
			*id41 = r.InputS3Inventory.ID.ValueString()
		} else {
			id41 = nil
		}
		typeVar45 := shared.InputS3InventoryType(r.InputS3Inventory.Type.ValueString())
		disabled75 := new(bool)
		if !r.InputS3Inventory.Disabled.IsUnknown() && !r.InputS3Inventory.Disabled.IsNull() {
			*disabled75 = r.InputS3Inventory.Disabled.ValueBool()
		} else {
			disabled75 = nil
		}
		pipeline82 := new(string)
		if !r.InputS3Inventory.Pipeline.IsUnknown() && !r.InputS3Inventory.Pipeline.IsNull() {
			*pipeline82 = r.InputS3Inventory.Pipeline.ValueString()
		} else {
			pipeline82 = nil
		}
		sendToRoutes41 := new(bool)
		if !r.InputS3Inventory.SendToRoutes.IsUnknown() && !r.InputS3Inventory.SendToRoutes.IsNull() {
			*sendToRoutes41 = r.InputS3Inventory.SendToRoutes.ValueBool()
		} else {
			sendToRoutes41 = nil
		}
		environment41 := new(string)
		if !r.InputS3Inventory.Environment.IsUnknown() && !r.InputS3Inventory.Environment.IsNull() {
			*environment41 = r.InputS3Inventory.Environment.ValueString()
		} else {
			environment41 = nil
		}
		pqEnabled41 := new(bool)
		if !r.InputS3Inventory.PqEnabled.IsUnknown() && !r.InputS3Inventory.PqEnabled.IsNull() {
			*pqEnabled41 = r.InputS3Inventory.PqEnabled.ValueBool()
		} else {
			pqEnabled41 = nil
		}
		streamtags41 := make([]string, 0, len(r.InputS3Inventory.Streamtags))
		for _, streamtagsItem41 := range r.InputS3Inventory.Streamtags {
			streamtags41 = append(streamtags41, streamtagsItem41.ValueString())
		}
		connections41 := make([]shared.InputS3InventoryConnections, 0, len(r.InputS3Inventory.Connections))
		for _, connectionsItem41 := range r.InputS3Inventory.Connections {
			pipeline83 := new(string)
			if !connectionsItem41.Pipeline.IsUnknown() && !connectionsItem41.Pipeline.IsNull() {
				*pipeline83 = connectionsItem41.Pipeline.ValueString()
			} else {
				pipeline83 = nil
			}
			var output42 string
			output42 = connectionsItem41.Output.ValueString()

			connections41 = append(connections41, shared.InputS3InventoryConnections{
				Pipeline: pipeline83,
				Output:   output42,
			})
		}
		var pq41 *shared.InputS3InventoryPq
		if r.InputS3Inventory.Pq != nil {
			mode54 := new(shared.InputS3InventoryMode)
			if !r.InputS3Inventory.Pq.Mode.IsUnknown() && !r.InputS3Inventory.Pq.Mode.IsNull() {
				*mode54 = shared.InputS3InventoryMode(r.InputS3Inventory.Pq.Mode.ValueString())
			} else {
				mode54 = nil
			}
			maxBufferSize42 := new(float64)
			if !r.InputS3Inventory.Pq.MaxBufferSize.IsUnknown() && !r.InputS3Inventory.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize42 = r.InputS3Inventory.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize42 = nil
			}
			commitFrequency41 := new(float64)
			if !r.InputS3Inventory.Pq.CommitFrequency.IsUnknown() && !r.InputS3Inventory.Pq.CommitFrequency.IsNull() {
				*commitFrequency41 = r.InputS3Inventory.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency41 = nil
			}
			maxFileSize41 := new(string)
			if !r.InputS3Inventory.Pq.MaxFileSize.IsUnknown() && !r.InputS3Inventory.Pq.MaxFileSize.IsNull() {
				*maxFileSize41 = r.InputS3Inventory.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize41 = nil
			}
			maxSize41 := new(string)
			if !r.InputS3Inventory.Pq.MaxSize.IsUnknown() && !r.InputS3Inventory.Pq.MaxSize.IsNull() {
				*maxSize41 = r.InputS3Inventory.Pq.MaxSize.ValueString()
			} else {
				maxSize41 = nil
			}
			path42 := new(string)
			if !r.InputS3Inventory.Pq.Path.IsUnknown() && !r.InputS3Inventory.Pq.Path.IsNull() {
				*path42 = r.InputS3Inventory.Pq.Path.ValueString()
			} else {
				path42 = nil
			}
			compress48 := new(shared.InputS3InventoryCompression)
			if !r.InputS3Inventory.Pq.Compress.IsUnknown() && !r.InputS3Inventory.Pq.Compress.IsNull() {
				*compress48 = shared.InputS3InventoryCompression(r.InputS3Inventory.Pq.Compress.ValueString())
			} else {
				compress48 = nil
			}
			pq41 = &shared.InputS3InventoryPq{
				Mode:            mode54,
				MaxBufferSize:   maxBufferSize42,
				CommitFrequency: commitFrequency41,
				MaxFileSize:     maxFileSize41,
				MaxSize:         maxSize41,
				Path:            path42,
				Compress:        compress48,
			}
		}
		var queueName3 string
		queueName3 = r.InputS3Inventory.QueueName.ValueString()

		fileFilter3 := new(string)
		if !r.InputS3Inventory.FileFilter.IsUnknown() && !r.InputS3Inventory.FileFilter.IsNull() {
			*fileFilter3 = r.InputS3Inventory.FileFilter.ValueString()
		} else {
			fileFilter3 = nil
		}
		awsAccountId2 := new(string)
		if !r.InputS3Inventory.AwsAccountID.IsUnknown() && !r.InputS3Inventory.AwsAccountID.IsNull() {
			*awsAccountId2 = r.InputS3Inventory.AwsAccountID.ValueString()
		} else {
			awsAccountId2 = nil
		}
		awsAuthenticationMethod6 := new(shared.InputS3InventoryAuthenticationMethod)
		if !r.InputS3Inventory.AwsAuthenticationMethod.IsUnknown() && !r.InputS3Inventory.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod6 = shared.InputS3InventoryAuthenticationMethod(r.InputS3Inventory.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod6 = nil
		}
		awsSecretKey6 := new(string)
		if !r.InputS3Inventory.AwsSecretKey.IsUnknown() && !r.InputS3Inventory.AwsSecretKey.IsNull() {
			*awsSecretKey6 = r.InputS3Inventory.AwsSecretKey.ValueString()
		} else {
			awsSecretKey6 = nil
		}
		region7 := new(string)
		if !r.InputS3Inventory.Region.IsUnknown() && !r.InputS3Inventory.Region.IsNull() {
			*region7 = r.InputS3Inventory.Region.ValueString()
		} else {
			region7 = nil
		}
		endpoint7 := new(string)
		if !r.InputS3Inventory.Endpoint.IsUnknown() && !r.InputS3Inventory.Endpoint.IsNull() {
			*endpoint7 = r.InputS3Inventory.Endpoint.ValueString()
		} else {
			endpoint7 = nil
		}
		signatureVersion6 := new(shared.InputS3InventorySignatureVersion)
		if !r.InputS3Inventory.SignatureVersion.IsUnknown() && !r.InputS3Inventory.SignatureVersion.IsNull() {
			*signatureVersion6 = shared.InputS3InventorySignatureVersion(r.InputS3Inventory.SignatureVersion.ValueString())
		} else {
			signatureVersion6 = nil
		}
		reuseConnections6 := new(bool)
		if !r.InputS3Inventory.ReuseConnections.IsUnknown() && !r.InputS3Inventory.ReuseConnections.IsNull() {
			*reuseConnections6 = r.InputS3Inventory.ReuseConnections.ValueBool()
		} else {
			reuseConnections6 = nil
		}
		rejectUnauthorized31 := new(bool)
		if !r.InputS3Inventory.RejectUnauthorized.IsUnknown() && !r.InputS3Inventory.RejectUnauthorized.IsNull() {
			*rejectUnauthorized31 = r.InputS3Inventory.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized31 = nil
		}
		breakerRulesets10 := make([]string, 0, len(r.InputS3Inventory.BreakerRulesets))
		for _, breakerRulesetsItem10 := range r.InputS3Inventory.BreakerRulesets {
			breakerRulesets10 = append(breakerRulesets10, breakerRulesetsItem10.ValueString())
		}
		staleChannelFlushMs10 := new(float64)
		if !r.InputS3Inventory.StaleChannelFlushMs.IsUnknown() && !r.InputS3Inventory.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs10 = r.InputS3Inventory.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs10 = nil
		}
		maxMessages3 := new(float64)
		if !r.InputS3Inventory.MaxMessages.IsUnknown() && !r.InputS3Inventory.MaxMessages.IsNull() {
			*maxMessages3 = r.InputS3Inventory.MaxMessages.ValueFloat64()
		} else {
			maxMessages3 = nil
		}
		visibilityTimeout3 := new(float64)
		if !r.InputS3Inventory.VisibilityTimeout.IsUnknown() && !r.InputS3Inventory.VisibilityTimeout.IsNull() {
			*visibilityTimeout3 = r.InputS3Inventory.VisibilityTimeout.ValueFloat64()
		} else {
			visibilityTimeout3 = nil
		}
		numReceivers3 := new(float64)
		if !r.InputS3Inventory.NumReceivers.IsUnknown() && !r.InputS3Inventory.NumReceivers.IsNull() {
			*numReceivers3 = r.InputS3Inventory.NumReceivers.ValueFloat64()
		} else {
			numReceivers3 = nil
		}
		socketTimeout13 := new(float64)
		if !r.InputS3Inventory.SocketTimeout.IsUnknown() && !r.InputS3Inventory.SocketTimeout.IsNull() {
			*socketTimeout13 = r.InputS3Inventory.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout13 = nil
		}
		skipOnError3 := new(bool)
		if !r.InputS3Inventory.SkipOnError.IsUnknown() && !r.InputS3Inventory.SkipOnError.IsNull() {
			*skipOnError3 = r.InputS3Inventory.SkipOnError.ValueBool()
		} else {
			skipOnError3 = nil
		}
		enableAssumeRole6 := new(bool)
		if !r.InputS3Inventory.EnableAssumeRole.IsUnknown() && !r.InputS3Inventory.EnableAssumeRole.IsNull() {
			*enableAssumeRole6 = r.InputS3Inventory.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole6 = nil
		}
		assumeRoleArn6 := new(string)
		if !r.InputS3Inventory.AssumeRoleArn.IsUnknown() && !r.InputS3Inventory.AssumeRoleArn.IsNull() {
			*assumeRoleArn6 = r.InputS3Inventory.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn6 = nil
		}
		assumeRoleExternalId6 := new(string)
		if !r.InputS3Inventory.AssumeRoleExternalID.IsUnknown() && !r.InputS3Inventory.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId6 = r.InputS3Inventory.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId6 = nil
		}
		durationSeconds6 := new(float64)
		if !r.InputS3Inventory.DurationSeconds.IsUnknown() && !r.InputS3Inventory.DurationSeconds.IsNull() {
			*durationSeconds6 = r.InputS3Inventory.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds6 = nil
		}
		enableSQSAssumeRole2 := new(bool)
		if !r.InputS3Inventory.EnableSQSAssumeRole.IsUnknown() && !r.InputS3Inventory.EnableSQSAssumeRole.IsNull() {
			*enableSQSAssumeRole2 = r.InputS3Inventory.EnableSQSAssumeRole.ValueBool()
		} else {
			enableSQSAssumeRole2 = nil
		}
		var preprocess3 *shared.InputS3InventoryPreprocess
		if r.InputS3Inventory.Preprocess != nil {
			disabled76 := new(bool)
			if !r.InputS3Inventory.Preprocess.Disabled.IsUnknown() && !r.InputS3Inventory.Preprocess.Disabled.IsNull() {
				*disabled76 = r.InputS3Inventory.Preprocess.Disabled.ValueBool()
			} else {
				disabled76 = nil
			}
			command4 := new(string)
			if !r.InputS3Inventory.Preprocess.Command.IsUnknown() && !r.InputS3Inventory.Preprocess.Command.IsNull() {
				*command4 = r.InputS3Inventory.Preprocess.Command.ValueString()
			} else {
				command4 = nil
			}
			args3 := make([]string, 0, len(r.InputS3Inventory.Preprocess.Args))
			for _, argsItem3 := range r.InputS3Inventory.Preprocess.Args {
				args3 = append(args3, argsItem3.ValueString())
			}
			preprocess3 = &shared.InputS3InventoryPreprocess{
				Disabled: disabled76,
				Command:  command4,
				Args:     args3,
			}
		}
		metadata45 := make([]shared.InputS3InventoryMetadata, 0, len(r.InputS3Inventory.Metadata))
		for _, metadataItem44 := range r.InputS3Inventory.Metadata {
			var name65 string
			name65 = metadataItem44.Name.ValueString()

			var value61 string
			value61 = metadataItem44.Value.ValueString()

			metadata45 = append(metadata45, shared.InputS3InventoryMetadata{
				Name:  name65,
				Value: value61,
			})
		}
		parquetChunkSizeMb2 := new(float64)
		if !r.InputS3Inventory.ParquetChunkSizeMB.IsUnknown() && !r.InputS3Inventory.ParquetChunkSizeMB.IsNull() {
			*parquetChunkSizeMb2 = r.InputS3Inventory.ParquetChunkSizeMB.ValueFloat64()
		} else {
			parquetChunkSizeMb2 = nil
		}
		parquetChunkDownloadTimeout2 := new(float64)
		if !r.InputS3Inventory.ParquetChunkDownloadTimeout.IsUnknown() && !r.InputS3Inventory.ParquetChunkDownloadTimeout.IsNull() {
			*parquetChunkDownloadTimeout2 = r.InputS3Inventory.ParquetChunkDownloadTimeout.ValueFloat64()
		} else {
			parquetChunkDownloadTimeout2 = nil
		}
		var checkpointing2 *shared.InputS3InventoryCheckpointing
		if r.InputS3Inventory.Checkpointing != nil {
			enabled7 := new(bool)
			if !r.InputS3Inventory.Checkpointing.Enabled.IsUnknown() && !r.InputS3Inventory.Checkpointing.Enabled.IsNull() {
				*enabled7 = r.InputS3Inventory.Checkpointing.Enabled.ValueBool()
			} else {
				enabled7 = nil
			}
			retries3 := new(float64)
			if !r.InputS3Inventory.Checkpointing.Retries.IsUnknown() && !r.InputS3Inventory.Checkpointing.Retries.IsNull() {
				*retries3 = r.InputS3Inventory.Checkpointing.Retries.ValueFloat64()
			} else {
				retries3 = nil
			}
			checkpointing2 = &shared.InputS3InventoryCheckpointing{
				Enabled: enabled7,
				Retries: retries3,
			}
		}
		pollTimeout2 := new(float64)
		if !r.InputS3Inventory.PollTimeout.IsUnknown() && !r.InputS3Inventory.PollTimeout.IsNull() {
			*pollTimeout2 = r.InputS3Inventory.PollTimeout.ValueFloat64()
		} else {
			pollTimeout2 = nil
		}
		checksumSuffix := new(string)
		if !r.InputS3Inventory.ChecksumSuffix.IsUnknown() && !r.InputS3Inventory.ChecksumSuffix.IsNull() {
			*checksumSuffix = r.InputS3Inventory.ChecksumSuffix.ValueString()
		} else {
			checksumSuffix = nil
		}
		maxManifestSizeKB := new(int64)
		if !r.InputS3Inventory.MaxManifestSizeKB.IsUnknown() && !r.InputS3Inventory.MaxManifestSizeKB.IsNull() {
			*maxManifestSizeKB = r.InputS3Inventory.MaxManifestSizeKB.ValueInt64()
		} else {
			maxManifestSizeKB = nil
		}
		validateInventoryFiles := new(bool)
		if !r.InputS3Inventory.ValidateInventoryFiles.IsUnknown() && !r.InputS3Inventory.ValidateInventoryFiles.IsNull() {
			*validateInventoryFiles = r.InputS3Inventory.ValidateInventoryFiles.ValueBool()
		} else {
			validateInventoryFiles = nil
		}
		description50 := new(string)
		if !r.InputS3Inventory.Description.IsUnknown() && !r.InputS3Inventory.Description.IsNull() {
			*description50 = r.InputS3Inventory.Description.ValueString()
		} else {
			description50 = nil
		}
		awsAPIKey4 := new(string)
		if !r.InputS3Inventory.AwsAPIKey.IsUnknown() && !r.InputS3Inventory.AwsAPIKey.IsNull() {
			*awsAPIKey4 = r.InputS3Inventory.AwsAPIKey.ValueString()
		} else {
			awsAPIKey4 = nil
		}
		awsSecret4 := new(string)
		if !r.InputS3Inventory.AwsSecret.IsUnknown() && !r.InputS3Inventory.AwsSecret.IsNull() {
			*awsSecret4 = r.InputS3Inventory.AwsSecret.ValueString()
		} else {
			awsSecret4 = nil
		}
		var status41 *shared.TFStatus
		if r.InputS3Inventory.Status != nil {
			health41 := shared.Health(r.InputS3Inventory.Status.Health.ValueString())
			metrics41 := make(map[string]interface{})
			for metricsKey41, metricsValue41 := range r.InputS3Inventory.Status.Metrics {
				var metricsInst41 interface{}
				_ = json.Unmarshal([]byte(metricsValue41.ValueString()), &metricsInst41)
				metrics41[metricsKey41] = metricsInst41
			}
			var timestamp41 float64
			timestamp41 = r.InputS3Inventory.Status.Timestamp.ValueFloat64()

			useStatusFromLb41 := new(bool)
			if !r.InputS3Inventory.Status.UseStatusFromLB.IsUnknown() && !r.InputS3Inventory.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb41 = r.InputS3Inventory.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb41 = nil
			}
			status41 = &shared.TFStatus{
				Health:          health41,
				Metrics:         metrics41,
				Timestamp:       timestamp41,
				UseStatusFromLB: useStatusFromLb41,
			}
		}
		inputS3Inventory = &shared.InputS3Inventory{
			ID:                          id41,
			Type:                        typeVar45,
			Disabled:                    disabled75,
			Pipeline:                    pipeline82,
			SendToRoutes:                sendToRoutes41,
			Environment:                 environment41,
			PqEnabled:                   pqEnabled41,
			Streamtags:                  streamtags41,
			Connections:                 connections41,
			Pq:                          pq41,
			QueueName:                   queueName3,
			FileFilter:                  fileFilter3,
			AwsAccountID:                awsAccountId2,
			AwsAuthenticationMethod:     awsAuthenticationMethod6,
			AwsSecretKey:                awsSecretKey6,
			Region:                      region7,
			Endpoint:                    endpoint7,
			SignatureVersion:            signatureVersion6,
			ReuseConnections:            reuseConnections6,
			RejectUnauthorized:          rejectUnauthorized31,
			BreakerRulesets:             breakerRulesets10,
			StaleChannelFlushMs:         staleChannelFlushMs10,
			MaxMessages:                 maxMessages3,
			VisibilityTimeout:           visibilityTimeout3,
			NumReceivers:                numReceivers3,
			SocketTimeout:               socketTimeout13,
			SkipOnError:                 skipOnError3,
			EnableAssumeRole:            enableAssumeRole6,
			AssumeRoleArn:               assumeRoleArn6,
			AssumeRoleExternalID:        assumeRoleExternalId6,
			DurationSeconds:             durationSeconds6,
			EnableSQSAssumeRole:         enableSQSAssumeRole2,
			Preprocess:                  preprocess3,
			Metadata:                    metadata45,
			ParquetChunkSizeMB:          parquetChunkSizeMb2,
			ParquetChunkDownloadTimeout: parquetChunkDownloadTimeout2,
			Checkpointing:               checkpointing2,
			PollTimeout:                 pollTimeout2,
			ChecksumSuffix:              checksumSuffix,
			MaxManifestSizeKB:           maxManifestSizeKB,
			ValidateInventoryFiles:      validateInventoryFiles,
			Description:                 description50,
			AwsAPIKey:                   awsAPIKey4,
			AwsSecret:                   awsSecret4,
			Status:                      status41,
		}
	}
	if inputS3Inventory != nil {
		out = shared.Input{
			InputS3Inventory: inputS3Inventory,
		}
	}
	var inputSnmp *shared.InputSnmp
	if r.InputSnmp != nil {
		id42 := new(string)
		if !r.InputSnmp.ID.IsUnknown() && !r.InputSnmp.ID.IsNull() {
			*id42 = r.InputSnmp.ID.ValueString()
		} else {
			id42 = nil
		}
		typeVar46 := new(shared.InputSnmpType)
		if !r.InputSnmp.Type.IsUnknown() && !r.InputSnmp.Type.IsNull() {
			*typeVar46 = shared.InputSnmpType(r.InputSnmp.Type.ValueString())
		} else {
			typeVar46 = nil
		}
		disabled77 := new(bool)
		if !r.InputSnmp.Disabled.IsUnknown() && !r.InputSnmp.Disabled.IsNull() {
			*disabled77 = r.InputSnmp.Disabled.ValueBool()
		} else {
			disabled77 = nil
		}
		pipeline84 := new(string)
		if !r.InputSnmp.Pipeline.IsUnknown() && !r.InputSnmp.Pipeline.IsNull() {
			*pipeline84 = r.InputSnmp.Pipeline.ValueString()
		} else {
			pipeline84 = nil
		}
		sendToRoutes42 := new(bool)
		if !r.InputSnmp.SendToRoutes.IsUnknown() && !r.InputSnmp.SendToRoutes.IsNull() {
			*sendToRoutes42 = r.InputSnmp.SendToRoutes.ValueBool()
		} else {
			sendToRoutes42 = nil
		}
		environment42 := new(string)
		if !r.InputSnmp.Environment.IsUnknown() && !r.InputSnmp.Environment.IsNull() {
			*environment42 = r.InputSnmp.Environment.ValueString()
		} else {
			environment42 = nil
		}
		pqEnabled42 := new(bool)
		if !r.InputSnmp.PqEnabled.IsUnknown() && !r.InputSnmp.PqEnabled.IsNull() {
			*pqEnabled42 = r.InputSnmp.PqEnabled.ValueBool()
		} else {
			pqEnabled42 = nil
		}
		streamtags42 := make([]string, 0, len(r.InputSnmp.Streamtags))
		for _, streamtagsItem42 := range r.InputSnmp.Streamtags {
			streamtags42 = append(streamtags42, streamtagsItem42.ValueString())
		}
		connections42 := make([]shared.InputSnmpConnections, 0, len(r.InputSnmp.Connections))
		for _, connectionsItem42 := range r.InputSnmp.Connections {
			pipeline85 := new(string)
			if !connectionsItem42.Pipeline.IsUnknown() && !connectionsItem42.Pipeline.IsNull() {
				*pipeline85 = connectionsItem42.Pipeline.ValueString()
			} else {
				pipeline85 = nil
			}
			var output43 string
			output43 = connectionsItem42.Output.ValueString()

			connections42 = append(connections42, shared.InputSnmpConnections{
				Pipeline: pipeline85,
				Output:   output43,
			})
		}
		var pq42 *shared.InputSnmpPq
		if r.InputSnmp.Pq != nil {
			mode55 := new(shared.InputSnmpMode)
			if !r.InputSnmp.Pq.Mode.IsUnknown() && !r.InputSnmp.Pq.Mode.IsNull() {
				*mode55 = shared.InputSnmpMode(r.InputSnmp.Pq.Mode.ValueString())
			} else {
				mode55 = nil
			}
			maxBufferSize43 := new(float64)
			if !r.InputSnmp.Pq.MaxBufferSize.IsUnknown() && !r.InputSnmp.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize43 = r.InputSnmp.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize43 = nil
			}
			commitFrequency42 := new(float64)
			if !r.InputSnmp.Pq.CommitFrequency.IsUnknown() && !r.InputSnmp.Pq.CommitFrequency.IsNull() {
				*commitFrequency42 = r.InputSnmp.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency42 = nil
			}
			maxFileSize42 := new(string)
			if !r.InputSnmp.Pq.MaxFileSize.IsUnknown() && !r.InputSnmp.Pq.MaxFileSize.IsNull() {
				*maxFileSize42 = r.InputSnmp.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize42 = nil
			}
			maxSize42 := new(string)
			if !r.InputSnmp.Pq.MaxSize.IsUnknown() && !r.InputSnmp.Pq.MaxSize.IsNull() {
				*maxSize42 = r.InputSnmp.Pq.MaxSize.ValueString()
			} else {
				maxSize42 = nil
			}
			path43 := new(string)
			if !r.InputSnmp.Pq.Path.IsUnknown() && !r.InputSnmp.Pq.Path.IsNull() {
				*path43 = r.InputSnmp.Pq.Path.ValueString()
			} else {
				path43 = nil
			}
			compress49 := new(shared.InputSnmpCompression)
			if !r.InputSnmp.Pq.Compress.IsUnknown() && !r.InputSnmp.Pq.Compress.IsNull() {
				*compress49 = shared.InputSnmpCompression(r.InputSnmp.Pq.Compress.ValueString())
			} else {
				compress49 = nil
			}
			pq42 = &shared.InputSnmpPq{
				Mode:            mode55,
				MaxBufferSize:   maxBufferSize43,
				CommitFrequency: commitFrequency42,
				MaxFileSize:     maxFileSize42,
				MaxSize:         maxSize42,
				Path:            path43,
				Compress:        compress49,
			}
		}
		host18 := new(string)
		if !r.InputSnmp.Host.IsUnknown() && !r.InputSnmp.Host.IsNull() {
			*host18 = r.InputSnmp.Host.ValueString()
		} else {
			host18 = nil
		}
		port15 := new(float64)
		if !r.InputSnmp.Port.IsUnknown() && !r.InputSnmp.Port.IsNull() {
			*port15 = r.InputSnmp.Port.ValueFloat64()
		} else {
			port15 = nil
		}
		var snmpV3Auth *shared.SNMPv3Authentication
		if r.InputSnmp.SnmpV3Auth != nil {
			v3AuthEnabled := new(bool)
			if !r.InputSnmp.SnmpV3Auth.V3AuthEnabled.IsUnknown() && !r.InputSnmp.SnmpV3Auth.V3AuthEnabled.IsNull() {
				*v3AuthEnabled = r.InputSnmp.SnmpV3Auth.V3AuthEnabled.ValueBool()
			} else {
				v3AuthEnabled = nil
			}
			allowUnmatchedTrap := new(bool)
			if !r.InputSnmp.SnmpV3Auth.AllowUnmatchedTrap.IsUnknown() && !r.InputSnmp.SnmpV3Auth.AllowUnmatchedTrap.IsNull() {
				*allowUnmatchedTrap = r.InputSnmp.SnmpV3Auth.AllowUnmatchedTrap.ValueBool()
			} else {
				allowUnmatchedTrap = nil
			}
			v3Users := make([]shared.V3Users, 0, len(r.InputSnmp.SnmpV3Auth.V3Users))
			for _, v3UsersItem := range r.InputSnmp.SnmpV3Auth.V3Users {
				var name66 string
				name66 = v3UsersItem.Name.ValueString()

				authProtocol := new(shared.AuthenticationProtocol)
				if !v3UsersItem.AuthProtocol.IsUnknown() && !v3UsersItem.AuthProtocol.IsNull() {
					*authProtocol = shared.AuthenticationProtocol(v3UsersItem.AuthProtocol.ValueString())
				} else {
					authProtocol = nil
				}
				var authKey interface{}
				if !v3UsersItem.AuthKey.IsUnknown() && !v3UsersItem.AuthKey.IsNull() {
					_ = json.Unmarshal([]byte(v3UsersItem.AuthKey.ValueString()), &authKey)
				}
				privProtocol := new(string)
				if !v3UsersItem.PrivProtocol.IsUnknown() && !v3UsersItem.PrivProtocol.IsNull() {
					*privProtocol = v3UsersItem.PrivProtocol.ValueString()
				} else {
					privProtocol = nil
				}
				v3Users = append(v3Users, shared.V3Users{
					Name:         name66,
					AuthProtocol: authProtocol,
					AuthKey:      authKey,
					PrivProtocol: privProtocol,
				})
			}
			snmpV3Auth = &shared.SNMPv3Authentication{
				V3AuthEnabled:      v3AuthEnabled,
				AllowUnmatchedTrap: allowUnmatchedTrap,
				V3Users:            v3Users,
			}
		}
		maxBufferSize44 := new(float64)
		if !r.InputSnmp.MaxBufferSize.IsUnknown() && !r.InputSnmp.MaxBufferSize.IsNull() {
			*maxBufferSize44 = r.InputSnmp.MaxBufferSize.ValueFloat64()
		} else {
			maxBufferSize44 = nil
		}
		ipWhitelistRegex3 := new(string)
		if !r.InputSnmp.IPWhitelistRegex.IsUnknown() && !r.InputSnmp.IPWhitelistRegex.IsNull() {
			*ipWhitelistRegex3 = r.InputSnmp.IPWhitelistRegex.ValueString()
		} else {
			ipWhitelistRegex3 = nil
		}
		metadata46 := make([]shared.InputSnmpMetadata, 0, len(r.InputSnmp.Metadata))
		for _, metadataItem45 := range r.InputSnmp.Metadata {
			var name67 string
			name67 = metadataItem45.Name.ValueString()

			var value62 string
			value62 = metadataItem45.Value.ValueString()

			metadata46 = append(metadata46, shared.InputSnmpMetadata{
				Name:  name67,
				Value: value62,
			})
		}
		udpSocketRxBufSize1 := new(float64)
		if !r.InputSnmp.UDPSocketRxBufSize.IsUnknown() && !r.InputSnmp.UDPSocketRxBufSize.IsNull() {
			*udpSocketRxBufSize1 = r.InputSnmp.UDPSocketRxBufSize.ValueFloat64()
		} else {
			udpSocketRxBufSize1 = nil
		}
		varbindsWithTypes := new(bool)
		if !r.InputSnmp.VarbindsWithTypes.IsUnknown() && !r.InputSnmp.VarbindsWithTypes.IsNull() {
			*varbindsWithTypes = r.InputSnmp.VarbindsWithTypes.ValueBool()
		} else {
			varbindsWithTypes = nil
		}
		description51 := new(string)
		if !r.InputSnmp.Description.IsUnknown() && !r.InputSnmp.Description.IsNull() {
			*description51 = r.InputSnmp.Description.ValueString()
		} else {
			description51 = nil
		}
		var status42 *shared.TFStatus
		if r.InputSnmp.Status != nil {
			health42 := shared.Health(r.InputSnmp.Status.Health.ValueString())
			metrics42 := make(map[string]interface{})
			for metricsKey42, metricsValue42 := range r.InputSnmp.Status.Metrics {
				var metricsInst42 interface{}
				_ = json.Unmarshal([]byte(metricsValue42.ValueString()), &metricsInst42)
				metrics42[metricsKey42] = metricsInst42
			}
			var timestamp42 float64
			timestamp42 = r.InputSnmp.Status.Timestamp.ValueFloat64()

			useStatusFromLb42 := new(bool)
			if !r.InputSnmp.Status.UseStatusFromLB.IsUnknown() && !r.InputSnmp.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb42 = r.InputSnmp.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb42 = nil
			}
			status42 = &shared.TFStatus{
				Health:          health42,
				Metrics:         metrics42,
				Timestamp:       timestamp42,
				UseStatusFromLB: useStatusFromLb42,
			}
		}
		inputSnmp = &shared.InputSnmp{
			ID:                 id42,
			Type:               typeVar46,
			Disabled:           disabled77,
			Pipeline:           pipeline84,
			SendToRoutes:       sendToRoutes42,
			Environment:        environment42,
			PqEnabled:          pqEnabled42,
			Streamtags:         streamtags42,
			Connections:        connections42,
			Pq:                 pq42,
			Host:               host18,
			Port:               port15,
			SnmpV3Auth:         snmpV3Auth,
			MaxBufferSize:      maxBufferSize44,
			IPWhitelistRegex:   ipWhitelistRegex3,
			Metadata:           metadata46,
			UDPSocketRxBufSize: udpSocketRxBufSize1,
			VarbindsWithTypes:  varbindsWithTypes,
			Description:        description51,
			Status:             status42,
		}
	}
	if inputSnmp != nil {
		out = shared.Input{
			InputSnmp: inputSnmp,
		}
	}
	var inputOpenTelemetry *shared.InputOpenTelemetry
	if r.InputOpenTelemetry != nil {
		id43 := new(string)
		if !r.InputOpenTelemetry.ID.IsUnknown() && !r.InputOpenTelemetry.ID.IsNull() {
			*id43 = r.InputOpenTelemetry.ID.ValueString()
		} else {
			id43 = nil
		}
		typeVar47 := new(shared.InputOpenTelemetryType)
		if !r.InputOpenTelemetry.Type.IsUnknown() && !r.InputOpenTelemetry.Type.IsNull() {
			*typeVar47 = shared.InputOpenTelemetryType(r.InputOpenTelemetry.Type.ValueString())
		} else {
			typeVar47 = nil
		}
		disabled78 := new(bool)
		if !r.InputOpenTelemetry.Disabled.IsUnknown() && !r.InputOpenTelemetry.Disabled.IsNull() {
			*disabled78 = r.InputOpenTelemetry.Disabled.ValueBool()
		} else {
			disabled78 = nil
		}
		pipeline86 := new(string)
		if !r.InputOpenTelemetry.Pipeline.IsUnknown() && !r.InputOpenTelemetry.Pipeline.IsNull() {
			*pipeline86 = r.InputOpenTelemetry.Pipeline.ValueString()
		} else {
			pipeline86 = nil
		}
		sendToRoutes43 := new(bool)
		if !r.InputOpenTelemetry.SendToRoutes.IsUnknown() && !r.InputOpenTelemetry.SendToRoutes.IsNull() {
			*sendToRoutes43 = r.InputOpenTelemetry.SendToRoutes.ValueBool()
		} else {
			sendToRoutes43 = nil
		}
		environment43 := new(string)
		if !r.InputOpenTelemetry.Environment.IsUnknown() && !r.InputOpenTelemetry.Environment.IsNull() {
			*environment43 = r.InputOpenTelemetry.Environment.ValueString()
		} else {
			environment43 = nil
		}
		pqEnabled43 := new(bool)
		if !r.InputOpenTelemetry.PqEnabled.IsUnknown() && !r.InputOpenTelemetry.PqEnabled.IsNull() {
			*pqEnabled43 = r.InputOpenTelemetry.PqEnabled.ValueBool()
		} else {
			pqEnabled43 = nil
		}
		streamtags43 := make([]string, 0, len(r.InputOpenTelemetry.Streamtags))
		for _, streamtagsItem43 := range r.InputOpenTelemetry.Streamtags {
			streamtags43 = append(streamtags43, streamtagsItem43.ValueString())
		}
		connections43 := make([]shared.InputOpenTelemetryConnections, 0, len(r.InputOpenTelemetry.Connections))
		for _, connectionsItem43 := range r.InputOpenTelemetry.Connections {
			pipeline87 := new(string)
			if !connectionsItem43.Pipeline.IsUnknown() && !connectionsItem43.Pipeline.IsNull() {
				*pipeline87 = connectionsItem43.Pipeline.ValueString()
			} else {
				pipeline87 = nil
			}
			var output44 string
			output44 = connectionsItem43.Output.ValueString()

			connections43 = append(connections43, shared.InputOpenTelemetryConnections{
				Pipeline: pipeline87,
				Output:   output44,
			})
		}
		var pq43 *shared.InputOpenTelemetryPq
		if r.InputOpenTelemetry.Pq != nil {
			mode56 := new(shared.InputOpenTelemetryMode)
			if !r.InputOpenTelemetry.Pq.Mode.IsUnknown() && !r.InputOpenTelemetry.Pq.Mode.IsNull() {
				*mode56 = shared.InputOpenTelemetryMode(r.InputOpenTelemetry.Pq.Mode.ValueString())
			} else {
				mode56 = nil
			}
			maxBufferSize45 := new(float64)
			if !r.InputOpenTelemetry.Pq.MaxBufferSize.IsUnknown() && !r.InputOpenTelemetry.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize45 = r.InputOpenTelemetry.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize45 = nil
			}
			commitFrequency43 := new(float64)
			if !r.InputOpenTelemetry.Pq.CommitFrequency.IsUnknown() && !r.InputOpenTelemetry.Pq.CommitFrequency.IsNull() {
				*commitFrequency43 = r.InputOpenTelemetry.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency43 = nil
			}
			maxFileSize43 := new(string)
			if !r.InputOpenTelemetry.Pq.MaxFileSize.IsUnknown() && !r.InputOpenTelemetry.Pq.MaxFileSize.IsNull() {
				*maxFileSize43 = r.InputOpenTelemetry.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize43 = nil
			}
			maxSize43 := new(string)
			if !r.InputOpenTelemetry.Pq.MaxSize.IsUnknown() && !r.InputOpenTelemetry.Pq.MaxSize.IsNull() {
				*maxSize43 = r.InputOpenTelemetry.Pq.MaxSize.ValueString()
			} else {
				maxSize43 = nil
			}
			path44 := new(string)
			if !r.InputOpenTelemetry.Pq.Path.IsUnknown() && !r.InputOpenTelemetry.Pq.Path.IsNull() {
				*path44 = r.InputOpenTelemetry.Pq.Path.ValueString()
			} else {
				path44 = nil
			}
			compress50 := new(shared.InputOpenTelemetryCompression)
			if !r.InputOpenTelemetry.Pq.Compress.IsUnknown() && !r.InputOpenTelemetry.Pq.Compress.IsNull() {
				*compress50 = shared.InputOpenTelemetryCompression(r.InputOpenTelemetry.Pq.Compress.ValueString())
			} else {
				compress50 = nil
			}
			pq43 = &shared.InputOpenTelemetryPq{
				Mode:            mode56,
				MaxBufferSize:   maxBufferSize45,
				CommitFrequency: commitFrequency43,
				MaxFileSize:     maxFileSize43,
				MaxSize:         maxSize43,
				Path:            path44,
				Compress:        compress50,
			}
		}
		host19 := new(string)
		if !r.InputOpenTelemetry.Host.IsUnknown() && !r.InputOpenTelemetry.Host.IsNull() {
			*host19 = r.InputOpenTelemetry.Host.ValueString()
		} else {
			host19 = nil
		}
		port16 := new(float64)
		if !r.InputOpenTelemetry.Port.IsUnknown() && !r.InputOpenTelemetry.Port.IsNull() {
			*port16 = r.InputOpenTelemetry.Port.ValueFloat64()
		} else {
			port16 = nil
		}
		var tls22 *shared.InputOpenTelemetryTLSSettingsServerSide
		if r.InputOpenTelemetry.TLS != nil {
			disabled79 := new(bool)
			if !r.InputOpenTelemetry.TLS.Disabled.IsUnknown() && !r.InputOpenTelemetry.TLS.Disabled.IsNull() {
				*disabled79 = r.InputOpenTelemetry.TLS.Disabled.ValueBool()
			} else {
				disabled79 = nil
			}
			certificateName23 := new(string)
			if !r.InputOpenTelemetry.TLS.CertificateName.IsUnknown() && !r.InputOpenTelemetry.TLS.CertificateName.IsNull() {
				*certificateName23 = r.InputOpenTelemetry.TLS.CertificateName.ValueString()
			} else {
				certificateName23 = nil
			}
			privKeyPath22 := new(string)
			if !r.InputOpenTelemetry.TLS.PrivKeyPath.IsUnknown() && !r.InputOpenTelemetry.TLS.PrivKeyPath.IsNull() {
				*privKeyPath22 = r.InputOpenTelemetry.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath22 = nil
			}
			passphrase22 := new(string)
			if !r.InputOpenTelemetry.TLS.Passphrase.IsUnknown() && !r.InputOpenTelemetry.TLS.Passphrase.IsNull() {
				*passphrase22 = r.InputOpenTelemetry.TLS.Passphrase.ValueString()
			} else {
				passphrase22 = nil
			}
			certPath22 := new(string)
			if !r.InputOpenTelemetry.TLS.CertPath.IsUnknown() && !r.InputOpenTelemetry.TLS.CertPath.IsNull() {
				*certPath22 = r.InputOpenTelemetry.TLS.CertPath.ValueString()
			} else {
				certPath22 = nil
			}
			caPath21 := new(string)
			if !r.InputOpenTelemetry.TLS.CaPath.IsUnknown() && !r.InputOpenTelemetry.TLS.CaPath.IsNull() {
				*caPath21 = r.InputOpenTelemetry.TLS.CaPath.ValueString()
			} else {
				caPath21 = nil
			}
			requestCert15 := new(bool)
			if !r.InputOpenTelemetry.TLS.RequestCert.IsUnknown() && !r.InputOpenTelemetry.TLS.RequestCert.IsNull() {
				*requestCert15 = r.InputOpenTelemetry.TLS.RequestCert.ValueBool()
			} else {
				requestCert15 = nil
			}
			var rejectUnauthorized32 interface{}
			if !r.InputOpenTelemetry.TLS.RejectUnauthorized.IsUnknown() && !r.InputOpenTelemetry.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputOpenTelemetry.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized32)
			}
			var commonNameRegex15 interface{}
			if !r.InputOpenTelemetry.TLS.CommonNameRegex.IsUnknown() && !r.InputOpenTelemetry.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputOpenTelemetry.TLS.CommonNameRegex.ValueString()), &commonNameRegex15)
			}
			minVersion21 := new(shared.InputOpenTelemetryMinimumTLSVersion)
			if !r.InputOpenTelemetry.TLS.MinVersion.IsUnknown() && !r.InputOpenTelemetry.TLS.MinVersion.IsNull() {
				*minVersion21 = shared.InputOpenTelemetryMinimumTLSVersion(r.InputOpenTelemetry.TLS.MinVersion.ValueString())
			} else {
				minVersion21 = nil
			}
			maxVersion21 := new(shared.InputOpenTelemetryMaximumTLSVersion)
			if !r.InputOpenTelemetry.TLS.MaxVersion.IsUnknown() && !r.InputOpenTelemetry.TLS.MaxVersion.IsNull() {
				*maxVersion21 = shared.InputOpenTelemetryMaximumTLSVersion(r.InputOpenTelemetry.TLS.MaxVersion.ValueString())
			} else {
				maxVersion21 = nil
			}
			tls22 = &shared.InputOpenTelemetryTLSSettingsServerSide{
				Disabled:           disabled79,
				CertificateName:    certificateName23,
				PrivKeyPath:        privKeyPath22,
				Passphrase:         passphrase22,
				CertPath:           certPath22,
				CaPath:             caPath21,
				RequestCert:        requestCert15,
				RejectUnauthorized: rejectUnauthorized32,
				CommonNameRegex:    commonNameRegex15,
				MinVersion:         minVersion21,
				MaxVersion:         maxVersion21,
			}
		}
		maxActiveReq11 := new(float64)
		if !r.InputOpenTelemetry.MaxActiveReq.IsUnknown() && !r.InputOpenTelemetry.MaxActiveReq.IsNull() {
			*maxActiveReq11 = r.InputOpenTelemetry.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq11 = nil
		}
		maxRequestsPerSocket11 := new(int64)
		if !r.InputOpenTelemetry.MaxRequestsPerSocket.IsUnknown() && !r.InputOpenTelemetry.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket11 = r.InputOpenTelemetry.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket11 = nil
		}
		var enableProxyHeader15 interface{}
		if !r.InputOpenTelemetry.EnableProxyHeader.IsUnknown() && !r.InputOpenTelemetry.EnableProxyHeader.IsNull() {
			_ = json.Unmarshal([]byte(r.InputOpenTelemetry.EnableProxyHeader.ValueString()), &enableProxyHeader15)
		}
		var captureHeaders11 interface{}
		if !r.InputOpenTelemetry.CaptureHeaders.IsUnknown() && !r.InputOpenTelemetry.CaptureHeaders.IsNull() {
			_ = json.Unmarshal([]byte(r.InputOpenTelemetry.CaptureHeaders.ValueString()), &captureHeaders11)
		}
		var activityLogSampleRate11 interface{}
		if !r.InputOpenTelemetry.ActivityLogSampleRate.IsUnknown() && !r.InputOpenTelemetry.ActivityLogSampleRate.IsNull() {
			_ = json.Unmarshal([]byte(r.InputOpenTelemetry.ActivityLogSampleRate.ValueString()), &activityLogSampleRate11)
		}
		requestTimeout20 := new(float64)
		if !r.InputOpenTelemetry.RequestTimeout.IsUnknown() && !r.InputOpenTelemetry.RequestTimeout.IsNull() {
			*requestTimeout20 = r.InputOpenTelemetry.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout20 = nil
		}
		socketTimeout14 := new(float64)
		if !r.InputOpenTelemetry.SocketTimeout.IsUnknown() && !r.InputOpenTelemetry.SocketTimeout.IsNull() {
			*socketTimeout14 = r.InputOpenTelemetry.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout14 = nil
		}
		keepAliveTimeout11 := new(float64)
		if !r.InputOpenTelemetry.KeepAliveTimeout.IsUnknown() && !r.InputOpenTelemetry.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout11 = r.InputOpenTelemetry.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout11 = nil
		}
		enableHealthCheck11 := new(bool)
		if !r.InputOpenTelemetry.EnableHealthCheck.IsUnknown() && !r.InputOpenTelemetry.EnableHealthCheck.IsNull() {
			*enableHealthCheck11 = r.InputOpenTelemetry.EnableHealthCheck.ValueBool()
		} else {
			enableHealthCheck11 = nil
		}
		ipAllowlistRegex11 := new(string)
		if !r.InputOpenTelemetry.IPAllowlistRegex.IsUnknown() && !r.InputOpenTelemetry.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex11 = r.InputOpenTelemetry.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex11 = nil
		}
		ipDenylistRegex11 := new(string)
		if !r.InputOpenTelemetry.IPDenylistRegex.IsUnknown() && !r.InputOpenTelemetry.IPDenylistRegex.IsNull() {
			*ipDenylistRegex11 = r.InputOpenTelemetry.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex11 = nil
		}
		protocol1 := new(shared.InputOpenTelemetryProtocol)
		if !r.InputOpenTelemetry.Protocol.IsUnknown() && !r.InputOpenTelemetry.Protocol.IsNull() {
			*protocol1 = shared.InputOpenTelemetryProtocol(r.InputOpenTelemetry.Protocol.ValueString())
		} else {
			protocol1 = nil
		}
		extractSpans := new(bool)
		if !r.InputOpenTelemetry.ExtractSpans.IsUnknown() && !r.InputOpenTelemetry.ExtractSpans.IsNull() {
			*extractSpans = r.InputOpenTelemetry.ExtractSpans.ValueBool()
		} else {
			extractSpans = nil
		}
		extractMetrics3 := new(bool)
		if !r.InputOpenTelemetry.ExtractMetrics.IsUnknown() && !r.InputOpenTelemetry.ExtractMetrics.IsNull() {
			*extractMetrics3 = r.InputOpenTelemetry.ExtractMetrics.ValueBool()
		} else {
			extractMetrics3 = nil
		}
		otlpVersion := new(shared.OTLPVersion)
		if !r.InputOpenTelemetry.OtlpVersion.IsUnknown() && !r.InputOpenTelemetry.OtlpVersion.IsNull() {
			*otlpVersion = shared.OTLPVersion(r.InputOpenTelemetry.OtlpVersion.ValueString())
		} else {
			otlpVersion = nil
		}
		authType17 := new(shared.InputOpenTelemetryAuthenticationType)
		if !r.InputOpenTelemetry.AuthType.IsUnknown() && !r.InputOpenTelemetry.AuthType.IsNull() {
			*authType17 = shared.InputOpenTelemetryAuthenticationType(r.InputOpenTelemetry.AuthType.ValueString())
		} else {
			authType17 = nil
		}
		metadata47 := make([]shared.InputOpenTelemetryMetadata, 0, len(r.InputOpenTelemetry.Metadata))
		for _, metadataItem46 := range r.InputOpenTelemetry.Metadata {
			var name68 string
			name68 = metadataItem46.Name.ValueString()

			var value63 string
			value63 = metadataItem46.Value.ValueString()

			metadata47 = append(metadata47, shared.InputOpenTelemetryMetadata{
				Name:  name68,
				Value: value63,
			})
		}
		maxActiveCxn3 := new(float64)
		if !r.InputOpenTelemetry.MaxActiveCxn.IsUnknown() && !r.InputOpenTelemetry.MaxActiveCxn.IsNull() {
			*maxActiveCxn3 = r.InputOpenTelemetry.MaxActiveCxn.ValueFloat64()
		} else {
			maxActiveCxn3 = nil
		}
		description52 := new(string)
		if !r.InputOpenTelemetry.Description.IsUnknown() && !r.InputOpenTelemetry.Description.IsNull() {
			*description52 = r.InputOpenTelemetry.Description.ValueString()
		} else {
			description52 = nil
		}
		username11 := new(string)
		if !r.InputOpenTelemetry.Username.IsUnknown() && !r.InputOpenTelemetry.Username.IsNull() {
			*username11 = r.InputOpenTelemetry.Username.ValueString()
		} else {
			username11 = nil
		}
		password11 := new(string)
		if !r.InputOpenTelemetry.Password.IsUnknown() && !r.InputOpenTelemetry.Password.IsNull() {
			*password11 = r.InputOpenTelemetry.Password.ValueString()
		} else {
			password11 = nil
		}
		token11 := new(string)
		if !r.InputOpenTelemetry.Token.IsUnknown() && !r.InputOpenTelemetry.Token.IsNull() {
			*token11 = r.InputOpenTelemetry.Token.ValueString()
		} else {
			token11 = nil
		}
		credentialsSecret14 := new(string)
		if !r.InputOpenTelemetry.CredentialsSecret.IsUnknown() && !r.InputOpenTelemetry.CredentialsSecret.IsNull() {
			*credentialsSecret14 = r.InputOpenTelemetry.CredentialsSecret.ValueString()
		} else {
			credentialsSecret14 = nil
		}
		textSecret12 := new(string)
		if !r.InputOpenTelemetry.TextSecret.IsUnknown() && !r.InputOpenTelemetry.TextSecret.IsNull() {
			*textSecret12 = r.InputOpenTelemetry.TextSecret.ValueString()
		} else {
			textSecret12 = nil
		}
		loginUrl7 := new(string)
		if !r.InputOpenTelemetry.LoginURL.IsUnknown() && !r.InputOpenTelemetry.LoginURL.IsNull() {
			*loginUrl7 = r.InputOpenTelemetry.LoginURL.ValueString()
		} else {
			loginUrl7 = nil
		}
		secretParamName7 := new(string)
		if !r.InputOpenTelemetry.SecretParamName.IsUnknown() && !r.InputOpenTelemetry.SecretParamName.IsNull() {
			*secretParamName7 = r.InputOpenTelemetry.SecretParamName.ValueString()
		} else {
			secretParamName7 = nil
		}
		secret8 := new(string)
		if !r.InputOpenTelemetry.Secret.IsUnknown() && !r.InputOpenTelemetry.Secret.IsNull() {
			*secret8 = r.InputOpenTelemetry.Secret.ValueString()
		} else {
			secret8 = nil
		}
		tokenAttributeName7 := new(string)
		if !r.InputOpenTelemetry.TokenAttributeName.IsUnknown() && !r.InputOpenTelemetry.TokenAttributeName.IsNull() {
			*tokenAttributeName7 = r.InputOpenTelemetry.TokenAttributeName.ValueString()
		} else {
			tokenAttributeName7 = nil
		}
		authHeaderExpr7 := new(string)
		if !r.InputOpenTelemetry.AuthHeaderExpr.IsUnknown() && !r.InputOpenTelemetry.AuthHeaderExpr.IsNull() {
			*authHeaderExpr7 = r.InputOpenTelemetry.AuthHeaderExpr.ValueString()
		} else {
			authHeaderExpr7 = nil
		}
		tokenTimeoutSecs7 := new(float64)
		if !r.InputOpenTelemetry.TokenTimeoutSecs.IsUnknown() && !r.InputOpenTelemetry.TokenTimeoutSecs.IsNull() {
			*tokenTimeoutSecs7 = r.InputOpenTelemetry.TokenTimeoutSecs.ValueFloat64()
		} else {
			tokenTimeoutSecs7 = nil
		}
		oauthParams7 := make([]shared.InputOpenTelemetryOauthParams, 0, len(r.InputOpenTelemetry.OauthParams))
		for _, oauthParamsItem7 := range r.InputOpenTelemetry.OauthParams {
			var name69 string
			name69 = oauthParamsItem7.Name.ValueString()

			var value64 string
			value64 = oauthParamsItem7.Value.ValueString()

			oauthParams7 = append(oauthParams7, shared.InputOpenTelemetryOauthParams{
				Name:  name69,
				Value: value64,
			})
		}
		oauthHeaders7 := make([]shared.InputOpenTelemetryOauthHeaders, 0, len(r.InputOpenTelemetry.OauthHeaders))
		for _, oauthHeadersItem7 := range r.InputOpenTelemetry.OauthHeaders {
			var name70 string
			name70 = oauthHeadersItem7.Name.ValueString()

			var value65 string
			value65 = oauthHeadersItem7.Value.ValueString()

			oauthHeaders7 = append(oauthHeaders7, shared.InputOpenTelemetryOauthHeaders{
				Name:  name70,
				Value: value65,
			})
		}
		extractLogs := new(bool)
		if !r.InputOpenTelemetry.ExtractLogs.IsUnknown() && !r.InputOpenTelemetry.ExtractLogs.IsNull() {
			*extractLogs = r.InputOpenTelemetry.ExtractLogs.ValueBool()
		} else {
			extractLogs = nil
		}
		var status43 *shared.TFStatus
		if r.InputOpenTelemetry.Status != nil {
			health43 := shared.Health(r.InputOpenTelemetry.Status.Health.ValueString())
			metrics43 := make(map[string]interface{})
			for metricsKey43, metricsValue43 := range r.InputOpenTelemetry.Status.Metrics {
				var metricsInst43 interface{}
				_ = json.Unmarshal([]byte(metricsValue43.ValueString()), &metricsInst43)
				metrics43[metricsKey43] = metricsInst43
			}
			var timestamp43 float64
			timestamp43 = r.InputOpenTelemetry.Status.Timestamp.ValueFloat64()

			useStatusFromLb43 := new(bool)
			if !r.InputOpenTelemetry.Status.UseStatusFromLB.IsUnknown() && !r.InputOpenTelemetry.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb43 = r.InputOpenTelemetry.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb43 = nil
			}
			status43 = &shared.TFStatus{
				Health:          health43,
				Metrics:         metrics43,
				Timestamp:       timestamp43,
				UseStatusFromLB: useStatusFromLb43,
			}
		}
		inputOpenTelemetry = &shared.InputOpenTelemetry{
			ID:                    id43,
			Type:                  typeVar47,
			Disabled:              disabled78,
			Pipeline:              pipeline86,
			SendToRoutes:          sendToRoutes43,
			Environment:           environment43,
			PqEnabled:             pqEnabled43,
			Streamtags:            streamtags43,
			Connections:           connections43,
			Pq:                    pq43,
			Host:                  host19,
			Port:                  port16,
			TLS:                   tls22,
			MaxActiveReq:          maxActiveReq11,
			MaxRequestsPerSocket:  maxRequestsPerSocket11,
			EnableProxyHeader:     enableProxyHeader15,
			CaptureHeaders:        captureHeaders11,
			ActivityLogSampleRate: activityLogSampleRate11,
			RequestTimeout:        requestTimeout20,
			SocketTimeout:         socketTimeout14,
			KeepAliveTimeout:      keepAliveTimeout11,
			EnableHealthCheck:     enableHealthCheck11,
			IPAllowlistRegex:      ipAllowlistRegex11,
			IPDenylistRegex:       ipDenylistRegex11,
			Protocol:              protocol1,
			ExtractSpans:          extractSpans,
			ExtractMetrics:        extractMetrics3,
			OtlpVersion:           otlpVersion,
			AuthType:              authType17,
			Metadata:              metadata47,
			MaxActiveCxn:          maxActiveCxn3,
			Description:           description52,
			Username:              username11,
			Password:              password11,
			Token:                 token11,
			CredentialsSecret:     credentialsSecret14,
			TextSecret:            textSecret12,
			LoginURL:              loginUrl7,
			SecretParamName:       secretParamName7,
			Secret:                secret8,
			TokenAttributeName:    tokenAttributeName7,
			AuthHeaderExpr:        authHeaderExpr7,
			TokenTimeoutSecs:      tokenTimeoutSecs7,
			OauthParams:           oauthParams7,
			OauthHeaders:          oauthHeaders7,
			ExtractLogs:           extractLogs,
			Status:                status43,
		}
	}
	if inputOpenTelemetry != nil {
		out = shared.Input{
			InputOpenTelemetry: inputOpenTelemetry,
		}
	}
	var inputModelDrivenTelemetry *shared.InputModelDrivenTelemetry
	if r.InputModelDrivenTelemetry != nil {
		id44 := new(string)
		if !r.InputModelDrivenTelemetry.ID.IsUnknown() && !r.InputModelDrivenTelemetry.ID.IsNull() {
			*id44 = r.InputModelDrivenTelemetry.ID.ValueString()
		} else {
			id44 = nil
		}
		typeVar48 := new(shared.InputModelDrivenTelemetryType)
		if !r.InputModelDrivenTelemetry.Type.IsUnknown() && !r.InputModelDrivenTelemetry.Type.IsNull() {
			*typeVar48 = shared.InputModelDrivenTelemetryType(r.InputModelDrivenTelemetry.Type.ValueString())
		} else {
			typeVar48 = nil
		}
		disabled80 := new(bool)
		if !r.InputModelDrivenTelemetry.Disabled.IsUnknown() && !r.InputModelDrivenTelemetry.Disabled.IsNull() {
			*disabled80 = r.InputModelDrivenTelemetry.Disabled.ValueBool()
		} else {
			disabled80 = nil
		}
		pipeline88 := new(string)
		if !r.InputModelDrivenTelemetry.Pipeline.IsUnknown() && !r.InputModelDrivenTelemetry.Pipeline.IsNull() {
			*pipeline88 = r.InputModelDrivenTelemetry.Pipeline.ValueString()
		} else {
			pipeline88 = nil
		}
		sendToRoutes44 := new(bool)
		if !r.InputModelDrivenTelemetry.SendToRoutes.IsUnknown() && !r.InputModelDrivenTelemetry.SendToRoutes.IsNull() {
			*sendToRoutes44 = r.InputModelDrivenTelemetry.SendToRoutes.ValueBool()
		} else {
			sendToRoutes44 = nil
		}
		environment44 := new(string)
		if !r.InputModelDrivenTelemetry.Environment.IsUnknown() && !r.InputModelDrivenTelemetry.Environment.IsNull() {
			*environment44 = r.InputModelDrivenTelemetry.Environment.ValueString()
		} else {
			environment44 = nil
		}
		pqEnabled44 := new(bool)
		if !r.InputModelDrivenTelemetry.PqEnabled.IsUnknown() && !r.InputModelDrivenTelemetry.PqEnabled.IsNull() {
			*pqEnabled44 = r.InputModelDrivenTelemetry.PqEnabled.ValueBool()
		} else {
			pqEnabled44 = nil
		}
		streamtags44 := make([]string, 0, len(r.InputModelDrivenTelemetry.Streamtags))
		for _, streamtagsItem44 := range r.InputModelDrivenTelemetry.Streamtags {
			streamtags44 = append(streamtags44, streamtagsItem44.ValueString())
		}
		connections44 := make([]shared.InputModelDrivenTelemetryConnections, 0, len(r.InputModelDrivenTelemetry.Connections))
		for _, connectionsItem44 := range r.InputModelDrivenTelemetry.Connections {
			pipeline89 := new(string)
			if !connectionsItem44.Pipeline.IsUnknown() && !connectionsItem44.Pipeline.IsNull() {
				*pipeline89 = connectionsItem44.Pipeline.ValueString()
			} else {
				pipeline89 = nil
			}
			var output45 string
			output45 = connectionsItem44.Output.ValueString()

			connections44 = append(connections44, shared.InputModelDrivenTelemetryConnections{
				Pipeline: pipeline89,
				Output:   output45,
			})
		}
		var pq44 *shared.InputModelDrivenTelemetryPq
		if r.InputModelDrivenTelemetry.Pq != nil {
			mode57 := new(shared.InputModelDrivenTelemetryMode)
			if !r.InputModelDrivenTelemetry.Pq.Mode.IsUnknown() && !r.InputModelDrivenTelemetry.Pq.Mode.IsNull() {
				*mode57 = shared.InputModelDrivenTelemetryMode(r.InputModelDrivenTelemetry.Pq.Mode.ValueString())
			} else {
				mode57 = nil
			}
			maxBufferSize46 := new(float64)
			if !r.InputModelDrivenTelemetry.Pq.MaxBufferSize.IsUnknown() && !r.InputModelDrivenTelemetry.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize46 = r.InputModelDrivenTelemetry.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize46 = nil
			}
			commitFrequency44 := new(float64)
			if !r.InputModelDrivenTelemetry.Pq.CommitFrequency.IsUnknown() && !r.InputModelDrivenTelemetry.Pq.CommitFrequency.IsNull() {
				*commitFrequency44 = r.InputModelDrivenTelemetry.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency44 = nil
			}
			maxFileSize44 := new(string)
			if !r.InputModelDrivenTelemetry.Pq.MaxFileSize.IsUnknown() && !r.InputModelDrivenTelemetry.Pq.MaxFileSize.IsNull() {
				*maxFileSize44 = r.InputModelDrivenTelemetry.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize44 = nil
			}
			maxSize44 := new(string)
			if !r.InputModelDrivenTelemetry.Pq.MaxSize.IsUnknown() && !r.InputModelDrivenTelemetry.Pq.MaxSize.IsNull() {
				*maxSize44 = r.InputModelDrivenTelemetry.Pq.MaxSize.ValueString()
			} else {
				maxSize44 = nil
			}
			path45 := new(string)
			if !r.InputModelDrivenTelemetry.Pq.Path.IsUnknown() && !r.InputModelDrivenTelemetry.Pq.Path.IsNull() {
				*path45 = r.InputModelDrivenTelemetry.Pq.Path.ValueString()
			} else {
				path45 = nil
			}
			compress51 := new(shared.InputModelDrivenTelemetryCompression)
			if !r.InputModelDrivenTelemetry.Pq.Compress.IsUnknown() && !r.InputModelDrivenTelemetry.Pq.Compress.IsNull() {
				*compress51 = shared.InputModelDrivenTelemetryCompression(r.InputModelDrivenTelemetry.Pq.Compress.ValueString())
			} else {
				compress51 = nil
			}
			pq44 = &shared.InputModelDrivenTelemetryPq{
				Mode:            mode57,
				MaxBufferSize:   maxBufferSize46,
				CommitFrequency: commitFrequency44,
				MaxFileSize:     maxFileSize44,
				MaxSize:         maxSize44,
				Path:            path45,
				Compress:        compress51,
			}
		}
		host20 := new(string)
		if !r.InputModelDrivenTelemetry.Host.IsUnknown() && !r.InputModelDrivenTelemetry.Host.IsNull() {
			*host20 = r.InputModelDrivenTelemetry.Host.ValueString()
		} else {
			host20 = nil
		}
		port17 := new(float64)
		if !r.InputModelDrivenTelemetry.Port.IsUnknown() && !r.InputModelDrivenTelemetry.Port.IsNull() {
			*port17 = r.InputModelDrivenTelemetry.Port.ValueFloat64()
		} else {
			port17 = nil
		}
		var tls23 *shared.InputModelDrivenTelemetryTLSSettingsServerSide
		if r.InputModelDrivenTelemetry.TLS != nil {
			disabled81 := new(bool)
			if !r.InputModelDrivenTelemetry.TLS.Disabled.IsUnknown() && !r.InputModelDrivenTelemetry.TLS.Disabled.IsNull() {
				*disabled81 = r.InputModelDrivenTelemetry.TLS.Disabled.ValueBool()
			} else {
				disabled81 = nil
			}
			certificateName24 := new(string)
			if !r.InputModelDrivenTelemetry.TLS.CertificateName.IsUnknown() && !r.InputModelDrivenTelemetry.TLS.CertificateName.IsNull() {
				*certificateName24 = r.InputModelDrivenTelemetry.TLS.CertificateName.ValueString()
			} else {
				certificateName24 = nil
			}
			privKeyPath23 := new(string)
			if !r.InputModelDrivenTelemetry.TLS.PrivKeyPath.IsUnknown() && !r.InputModelDrivenTelemetry.TLS.PrivKeyPath.IsNull() {
				*privKeyPath23 = r.InputModelDrivenTelemetry.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath23 = nil
			}
			certPath23 := new(string)
			if !r.InputModelDrivenTelemetry.TLS.CertPath.IsUnknown() && !r.InputModelDrivenTelemetry.TLS.CertPath.IsNull() {
				*certPath23 = r.InputModelDrivenTelemetry.TLS.CertPath.ValueString()
			} else {
				certPath23 = nil
			}
			caPath22 := new(string)
			if !r.InputModelDrivenTelemetry.TLS.CaPath.IsUnknown() && !r.InputModelDrivenTelemetry.TLS.CaPath.IsNull() {
				*caPath22 = r.InputModelDrivenTelemetry.TLS.CaPath.ValueString()
			} else {
				caPath22 = nil
			}
			requestCert16 := new(bool)
			if !r.InputModelDrivenTelemetry.TLS.RequestCert.IsUnknown() && !r.InputModelDrivenTelemetry.TLS.RequestCert.IsNull() {
				*requestCert16 = r.InputModelDrivenTelemetry.TLS.RequestCert.ValueBool()
			} else {
				requestCert16 = nil
			}
			var rejectUnauthorized33 interface{}
			if !r.InputModelDrivenTelemetry.TLS.RejectUnauthorized.IsUnknown() && !r.InputModelDrivenTelemetry.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputModelDrivenTelemetry.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized33)
			}
			var commonNameRegex16 interface{}
			if !r.InputModelDrivenTelemetry.TLS.CommonNameRegex.IsUnknown() && !r.InputModelDrivenTelemetry.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputModelDrivenTelemetry.TLS.CommonNameRegex.ValueString()), &commonNameRegex16)
			}
			minVersion22 := new(shared.InputModelDrivenTelemetryMinimumTLSVersion)
			if !r.InputModelDrivenTelemetry.TLS.MinVersion.IsUnknown() && !r.InputModelDrivenTelemetry.TLS.MinVersion.IsNull() {
				*minVersion22 = shared.InputModelDrivenTelemetryMinimumTLSVersion(r.InputModelDrivenTelemetry.TLS.MinVersion.ValueString())
			} else {
				minVersion22 = nil
			}
			maxVersion22 := new(shared.InputModelDrivenTelemetryMaximumTLSVersion)
			if !r.InputModelDrivenTelemetry.TLS.MaxVersion.IsUnknown() && !r.InputModelDrivenTelemetry.TLS.MaxVersion.IsNull() {
				*maxVersion22 = shared.InputModelDrivenTelemetryMaximumTLSVersion(r.InputModelDrivenTelemetry.TLS.MaxVersion.ValueString())
			} else {
				maxVersion22 = nil
			}
			tls23 = &shared.InputModelDrivenTelemetryTLSSettingsServerSide{
				Disabled:           disabled81,
				CertificateName:    certificateName24,
				PrivKeyPath:        privKeyPath23,
				CertPath:           certPath23,
				CaPath:             caPath22,
				RequestCert:        requestCert16,
				RejectUnauthorized: rejectUnauthorized33,
				CommonNameRegex:    commonNameRegex16,
				MinVersion:         minVersion22,
				MaxVersion:         maxVersion22,
			}
		}
		metadata48 := make([]shared.InputModelDrivenTelemetryMetadata, 0, len(r.InputModelDrivenTelemetry.Metadata))
		for _, metadataItem47 := range r.InputModelDrivenTelemetry.Metadata {
			var name71 string
			name71 = metadataItem47.Name.ValueString()

			var value66 string
			value66 = metadataItem47.Value.ValueString()

			metadata48 = append(metadata48, shared.InputModelDrivenTelemetryMetadata{
				Name:  name71,
				Value: value66,
			})
		}
		maxActiveCxn4 := new(float64)
		if !r.InputModelDrivenTelemetry.MaxActiveCxn.IsUnknown() && !r.InputModelDrivenTelemetry.MaxActiveCxn.IsNull() {
			*maxActiveCxn4 = r.InputModelDrivenTelemetry.MaxActiveCxn.ValueFloat64()
		} else {
			maxActiveCxn4 = nil
		}
		shutdownTimeoutMs := new(float64)
		if !r.InputModelDrivenTelemetry.ShutdownTimeoutMs.IsUnknown() && !r.InputModelDrivenTelemetry.ShutdownTimeoutMs.IsNull() {
			*shutdownTimeoutMs = r.InputModelDrivenTelemetry.ShutdownTimeoutMs.ValueFloat64()
		} else {
			shutdownTimeoutMs = nil
		}
		description53 := new(string)
		if !r.InputModelDrivenTelemetry.Description.IsUnknown() && !r.InputModelDrivenTelemetry.Description.IsNull() {
			*description53 = r.InputModelDrivenTelemetry.Description.ValueString()
		} else {
			description53 = nil
		}
		var status44 *shared.TFStatus
		if r.InputModelDrivenTelemetry.Status != nil {
			health44 := shared.Health(r.InputModelDrivenTelemetry.Status.Health.ValueString())
			metrics44 := make(map[string]interface{})
			for metricsKey44, metricsValue44 := range r.InputModelDrivenTelemetry.Status.Metrics {
				var metricsInst44 interface{}
				_ = json.Unmarshal([]byte(metricsValue44.ValueString()), &metricsInst44)
				metrics44[metricsKey44] = metricsInst44
			}
			var timestamp44 float64
			timestamp44 = r.InputModelDrivenTelemetry.Status.Timestamp.ValueFloat64()

			useStatusFromLb44 := new(bool)
			if !r.InputModelDrivenTelemetry.Status.UseStatusFromLB.IsUnknown() && !r.InputModelDrivenTelemetry.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb44 = r.InputModelDrivenTelemetry.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb44 = nil
			}
			status44 = &shared.TFStatus{
				Health:          health44,
				Metrics:         metrics44,
				Timestamp:       timestamp44,
				UseStatusFromLB: useStatusFromLb44,
			}
		}
		inputModelDrivenTelemetry = &shared.InputModelDrivenTelemetry{
			ID:                id44,
			Type:              typeVar48,
			Disabled:          disabled80,
			Pipeline:          pipeline88,
			SendToRoutes:      sendToRoutes44,
			Environment:       environment44,
			PqEnabled:         pqEnabled44,
			Streamtags:        streamtags44,
			Connections:       connections44,
			Pq:                pq44,
			Host:              host20,
			Port:              port17,
			TLS:               tls23,
			Metadata:          metadata48,
			MaxActiveCxn:      maxActiveCxn4,
			ShutdownTimeoutMs: shutdownTimeoutMs,
			Description:       description53,
			Status:            status44,
		}
	}
	if inputModelDrivenTelemetry != nil {
		out = shared.Input{
			InputModelDrivenTelemetry: inputModelDrivenTelemetry,
		}
	}
	var inputSqs *shared.InputSqs
	if r.InputSqs != nil {
		id45 := new(string)
		if !r.InputSqs.ID.IsUnknown() && !r.InputSqs.ID.IsNull() {
			*id45 = r.InputSqs.ID.ValueString()
		} else {
			id45 = nil
		}
		typeVar49 := new(shared.InputSqsType)
		if !r.InputSqs.Type.IsUnknown() && !r.InputSqs.Type.IsNull() {
			*typeVar49 = shared.InputSqsType(r.InputSqs.Type.ValueString())
		} else {
			typeVar49 = nil
		}
		disabled82 := new(bool)
		if !r.InputSqs.Disabled.IsUnknown() && !r.InputSqs.Disabled.IsNull() {
			*disabled82 = r.InputSqs.Disabled.ValueBool()
		} else {
			disabled82 = nil
		}
		pipeline90 := new(string)
		if !r.InputSqs.Pipeline.IsUnknown() && !r.InputSqs.Pipeline.IsNull() {
			*pipeline90 = r.InputSqs.Pipeline.ValueString()
		} else {
			pipeline90 = nil
		}
		sendToRoutes45 := new(bool)
		if !r.InputSqs.SendToRoutes.IsUnknown() && !r.InputSqs.SendToRoutes.IsNull() {
			*sendToRoutes45 = r.InputSqs.SendToRoutes.ValueBool()
		} else {
			sendToRoutes45 = nil
		}
		environment45 := new(string)
		if !r.InputSqs.Environment.IsUnknown() && !r.InputSqs.Environment.IsNull() {
			*environment45 = r.InputSqs.Environment.ValueString()
		} else {
			environment45 = nil
		}
		pqEnabled45 := new(bool)
		if !r.InputSqs.PqEnabled.IsUnknown() && !r.InputSqs.PqEnabled.IsNull() {
			*pqEnabled45 = r.InputSqs.PqEnabled.ValueBool()
		} else {
			pqEnabled45 = nil
		}
		streamtags45 := make([]string, 0, len(r.InputSqs.Streamtags))
		for _, streamtagsItem45 := range r.InputSqs.Streamtags {
			streamtags45 = append(streamtags45, streamtagsItem45.ValueString())
		}
		connections45 := make([]shared.InputSqsConnections, 0, len(r.InputSqs.Connections))
		for _, connectionsItem45 := range r.InputSqs.Connections {
			pipeline91 := new(string)
			if !connectionsItem45.Pipeline.IsUnknown() && !connectionsItem45.Pipeline.IsNull() {
				*pipeline91 = connectionsItem45.Pipeline.ValueString()
			} else {
				pipeline91 = nil
			}
			var output46 string
			output46 = connectionsItem45.Output.ValueString()

			connections45 = append(connections45, shared.InputSqsConnections{
				Pipeline: pipeline91,
				Output:   output46,
			})
		}
		var pq45 *shared.InputSqsPq
		if r.InputSqs.Pq != nil {
			mode58 := new(shared.InputSqsMode)
			if !r.InputSqs.Pq.Mode.IsUnknown() && !r.InputSqs.Pq.Mode.IsNull() {
				*mode58 = shared.InputSqsMode(r.InputSqs.Pq.Mode.ValueString())
			} else {
				mode58 = nil
			}
			maxBufferSize47 := new(float64)
			if !r.InputSqs.Pq.MaxBufferSize.IsUnknown() && !r.InputSqs.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize47 = r.InputSqs.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize47 = nil
			}
			commitFrequency45 := new(float64)
			if !r.InputSqs.Pq.CommitFrequency.IsUnknown() && !r.InputSqs.Pq.CommitFrequency.IsNull() {
				*commitFrequency45 = r.InputSqs.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency45 = nil
			}
			maxFileSize45 := new(string)
			if !r.InputSqs.Pq.MaxFileSize.IsUnknown() && !r.InputSqs.Pq.MaxFileSize.IsNull() {
				*maxFileSize45 = r.InputSqs.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize45 = nil
			}
			maxSize45 := new(string)
			if !r.InputSqs.Pq.MaxSize.IsUnknown() && !r.InputSqs.Pq.MaxSize.IsNull() {
				*maxSize45 = r.InputSqs.Pq.MaxSize.ValueString()
			} else {
				maxSize45 = nil
			}
			path46 := new(string)
			if !r.InputSqs.Pq.Path.IsUnknown() && !r.InputSqs.Pq.Path.IsNull() {
				*path46 = r.InputSqs.Pq.Path.ValueString()
			} else {
				path46 = nil
			}
			compress52 := new(shared.InputSqsCompression)
			if !r.InputSqs.Pq.Compress.IsUnknown() && !r.InputSqs.Pq.Compress.IsNull() {
				*compress52 = shared.InputSqsCompression(r.InputSqs.Pq.Compress.ValueString())
			} else {
				compress52 = nil
			}
			pq45 = &shared.InputSqsPq{
				Mode:            mode58,
				MaxBufferSize:   maxBufferSize47,
				CommitFrequency: commitFrequency45,
				MaxFileSize:     maxFileSize45,
				MaxSize:         maxSize45,
				Path:            path46,
				Compress:        compress52,
			}
		}
		var queueName4 string
		queueName4 = r.InputSqs.QueueName.ValueString()

		queueType := new(shared.QueueType)
		if !r.InputSqs.QueueType.IsUnknown() && !r.InputSqs.QueueType.IsNull() {
			*queueType = shared.QueueType(r.InputSqs.QueueType.ValueString())
		} else {
			queueType = nil
		}
		awsAccountId3 := new(string)
		if !r.InputSqs.AwsAccountID.IsUnknown() && !r.InputSqs.AwsAccountID.IsNull() {
			*awsAccountId3 = r.InputSqs.AwsAccountID.ValueString()
		} else {
			awsAccountId3 = nil
		}
		createQueue := new(bool)
		if !r.InputSqs.CreateQueue.IsUnknown() && !r.InputSqs.CreateQueue.IsNull() {
			*createQueue = r.InputSqs.CreateQueue.ValueBool()
		} else {
			createQueue = nil
		}
		awsAuthenticationMethod7 := new(shared.InputSqsAuthenticationMethod)
		if !r.InputSqs.AwsAuthenticationMethod.IsUnknown() && !r.InputSqs.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod7 = shared.InputSqsAuthenticationMethod(r.InputSqs.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod7 = nil
		}
		awsSecretKey7 := new(string)
		if !r.InputSqs.AwsSecretKey.IsUnknown() && !r.InputSqs.AwsSecretKey.IsNull() {
			*awsSecretKey7 = r.InputSqs.AwsSecretKey.ValueString()
		} else {
			awsSecretKey7 = nil
		}
		region8 := new(string)
		if !r.InputSqs.Region.IsUnknown() && !r.InputSqs.Region.IsNull() {
			*region8 = r.InputSqs.Region.ValueString()
		} else {
			region8 = nil
		}
		endpoint8 := new(string)
		if !r.InputSqs.Endpoint.IsUnknown() && !r.InputSqs.Endpoint.IsNull() {
			*endpoint8 = r.InputSqs.Endpoint.ValueString()
		} else {
			endpoint8 = nil
		}
		signatureVersion7 := new(shared.InputSqsSignatureVersion)
		if !r.InputSqs.SignatureVersion.IsUnknown() && !r.InputSqs.SignatureVersion.IsNull() {
			*signatureVersion7 = shared.InputSqsSignatureVersion(r.InputSqs.SignatureVersion.ValueString())
		} else {
			signatureVersion7 = nil
		}
		reuseConnections7 := new(bool)
		if !r.InputSqs.ReuseConnections.IsUnknown() && !r.InputSqs.ReuseConnections.IsNull() {
			*reuseConnections7 = r.InputSqs.ReuseConnections.ValueBool()
		} else {
			reuseConnections7 = nil
		}
		rejectUnauthorized34 := new(bool)
		if !r.InputSqs.RejectUnauthorized.IsUnknown() && !r.InputSqs.RejectUnauthorized.IsNull() {
			*rejectUnauthorized34 = r.InputSqs.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized34 = nil
		}
		enableAssumeRole7 := new(bool)
		if !r.InputSqs.EnableAssumeRole.IsUnknown() && !r.InputSqs.EnableAssumeRole.IsNull() {
			*enableAssumeRole7 = r.InputSqs.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole7 = nil
		}
		assumeRoleArn7 := new(string)
		if !r.InputSqs.AssumeRoleArn.IsUnknown() && !r.InputSqs.AssumeRoleArn.IsNull() {
			*assumeRoleArn7 = r.InputSqs.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn7 = nil
		}
		assumeRoleExternalId7 := new(string)
		if !r.InputSqs.AssumeRoleExternalID.IsUnknown() && !r.InputSqs.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId7 = r.InputSqs.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId7 = nil
		}
		durationSeconds7 := new(float64)
		if !r.InputSqs.DurationSeconds.IsUnknown() && !r.InputSqs.DurationSeconds.IsNull() {
			*durationSeconds7 = r.InputSqs.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds7 = nil
		}
		maxMessages4 := new(float64)
		if !r.InputSqs.MaxMessages.IsUnknown() && !r.InputSqs.MaxMessages.IsNull() {
			*maxMessages4 = r.InputSqs.MaxMessages.ValueFloat64()
		} else {
			maxMessages4 = nil
		}
		visibilityTimeout4 := new(float64)
		if !r.InputSqs.VisibilityTimeout.IsUnknown() && !r.InputSqs.VisibilityTimeout.IsNull() {
			*visibilityTimeout4 = r.InputSqs.VisibilityTimeout.ValueFloat64()
		} else {
			visibilityTimeout4 = nil
		}
		metadata49 := make([]shared.InputSqsMetadata, 0, len(r.InputSqs.Metadata))
		for _, metadataItem48 := range r.InputSqs.Metadata {
			var name72 string
			name72 = metadataItem48.Name.ValueString()

			var value67 string
			value67 = metadataItem48.Value.ValueString()

			metadata49 = append(metadata49, shared.InputSqsMetadata{
				Name:  name72,
				Value: value67,
			})
		}
		pollTimeout3 := new(float64)
		if !r.InputSqs.PollTimeout.IsUnknown() && !r.InputSqs.PollTimeout.IsNull() {
			*pollTimeout3 = r.InputSqs.PollTimeout.ValueFloat64()
		} else {
			pollTimeout3 = nil
		}
		description54 := new(string)
		if !r.InputSqs.Description.IsUnknown() && !r.InputSqs.Description.IsNull() {
			*description54 = r.InputSqs.Description.ValueString()
		} else {
			description54 = nil
		}
		awsAPIKey5 := new(string)
		if !r.InputSqs.AwsAPIKey.IsUnknown() && !r.InputSqs.AwsAPIKey.IsNull() {
			*awsAPIKey5 = r.InputSqs.AwsAPIKey.ValueString()
		} else {
			awsAPIKey5 = nil
		}
		awsSecret5 := new(string)
		if !r.InputSqs.AwsSecret.IsUnknown() && !r.InputSqs.AwsSecret.IsNull() {
			*awsSecret5 = r.InputSqs.AwsSecret.ValueString()
		} else {
			awsSecret5 = nil
		}
		numReceivers4 := new(float64)
		if !r.InputSqs.NumReceivers.IsUnknown() && !r.InputSqs.NumReceivers.IsNull() {
			*numReceivers4 = r.InputSqs.NumReceivers.ValueFloat64()
		} else {
			numReceivers4 = nil
		}
		var status45 *shared.TFStatus
		if r.InputSqs.Status != nil {
			health45 := shared.Health(r.InputSqs.Status.Health.ValueString())
			metrics45 := make(map[string]interface{})
			for metricsKey45, metricsValue45 := range r.InputSqs.Status.Metrics {
				var metricsInst45 interface{}
				_ = json.Unmarshal([]byte(metricsValue45.ValueString()), &metricsInst45)
				metrics45[metricsKey45] = metricsInst45
			}
			var timestamp45 float64
			timestamp45 = r.InputSqs.Status.Timestamp.ValueFloat64()

			useStatusFromLb45 := new(bool)
			if !r.InputSqs.Status.UseStatusFromLB.IsUnknown() && !r.InputSqs.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb45 = r.InputSqs.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb45 = nil
			}
			status45 = &shared.TFStatus{
				Health:          health45,
				Metrics:         metrics45,
				Timestamp:       timestamp45,
				UseStatusFromLB: useStatusFromLb45,
			}
		}
		inputSqs = &shared.InputSqs{
			ID:                      id45,
			Type:                    typeVar49,
			Disabled:                disabled82,
			Pipeline:                pipeline90,
			SendToRoutes:            sendToRoutes45,
			Environment:             environment45,
			PqEnabled:               pqEnabled45,
			Streamtags:              streamtags45,
			Connections:             connections45,
			Pq:                      pq45,
			QueueName:               queueName4,
			QueueType:               queueType,
			AwsAccountID:            awsAccountId3,
			CreateQueue:             createQueue,
			AwsAuthenticationMethod: awsAuthenticationMethod7,
			AwsSecretKey:            awsSecretKey7,
			Region:                  region8,
			Endpoint:                endpoint8,
			SignatureVersion:        signatureVersion7,
			ReuseConnections:        reuseConnections7,
			RejectUnauthorized:      rejectUnauthorized34,
			EnableAssumeRole:        enableAssumeRole7,
			AssumeRoleArn:           assumeRoleArn7,
			AssumeRoleExternalID:    assumeRoleExternalId7,
			DurationSeconds:         durationSeconds7,
			MaxMessages:             maxMessages4,
			VisibilityTimeout:       visibilityTimeout4,
			Metadata:                metadata49,
			PollTimeout:             pollTimeout3,
			Description:             description54,
			AwsAPIKey:               awsAPIKey5,
			AwsSecret:               awsSecret5,
			NumReceivers:            numReceivers4,
			Status:                  status45,
		}
	}
	if inputSqs != nil {
		out = shared.Input{
			InputSqs: inputSqs,
		}
	}
	var inputSyslog *shared.InputSyslog
	if r.InputSyslog != nil {
		var inputSyslog1 *shared.InputSyslog1
		if r.InputSyslog.One != nil {
			id46 := new(string)
			if !r.InputSyslog.One.ID.IsUnknown() && !r.InputSyslog.One.ID.IsNull() {
				*id46 = r.InputSyslog.One.ID.ValueString()
			} else {
				id46 = nil
			}
			typeVar50 := shared.InputSyslogType(r.InputSyslog.One.Type.ValueString())
			disabled83 := new(bool)
			if !r.InputSyslog.One.Disabled.IsUnknown() && !r.InputSyslog.One.Disabled.IsNull() {
				*disabled83 = r.InputSyslog.One.Disabled.ValueBool()
			} else {
				disabled83 = nil
			}
			pipeline92 := new(string)
			if !r.InputSyslog.One.Pipeline.IsUnknown() && !r.InputSyslog.One.Pipeline.IsNull() {
				*pipeline92 = r.InputSyslog.One.Pipeline.ValueString()
			} else {
				pipeline92 = nil
			}
			sendToRoutes46 := new(bool)
			if !r.InputSyslog.One.SendToRoutes.IsUnknown() && !r.InputSyslog.One.SendToRoutes.IsNull() {
				*sendToRoutes46 = r.InputSyslog.One.SendToRoutes.ValueBool()
			} else {
				sendToRoutes46 = nil
			}
			environment46 := new(string)
			if !r.InputSyslog.One.Environment.IsUnknown() && !r.InputSyslog.One.Environment.IsNull() {
				*environment46 = r.InputSyslog.One.Environment.ValueString()
			} else {
				environment46 = nil
			}
			pqEnabled46 := new(bool)
			if !r.InputSyslog.One.PqEnabled.IsUnknown() && !r.InputSyslog.One.PqEnabled.IsNull() {
				*pqEnabled46 = r.InputSyslog.One.PqEnabled.ValueBool()
			} else {
				pqEnabled46 = nil
			}
			streamtags46 := make([]string, 0, len(r.InputSyslog.One.Streamtags))
			for _, streamtagsItem46 := range r.InputSyslog.One.Streamtags {
				streamtags46 = append(streamtags46, streamtagsItem46.ValueString())
			}
			connections46 := make([]shared.InputSyslogConnections, 0, len(r.InputSyslog.One.Connections))
			for _, connectionsItem46 := range r.InputSyslog.One.Connections {
				pipeline93 := new(string)
				if !connectionsItem46.Pipeline.IsUnknown() && !connectionsItem46.Pipeline.IsNull() {
					*pipeline93 = connectionsItem46.Pipeline.ValueString()
				} else {
					pipeline93 = nil
				}
				var output47 string
				output47 = connectionsItem46.Output.ValueString()

				connections46 = append(connections46, shared.InputSyslogConnections{
					Pipeline: pipeline93,
					Output:   output47,
				})
			}
			var pq46 *shared.InputSyslogPq
			if r.InputSyslog.One.Pq != nil {
				mode59 := new(shared.InputSyslogMode)
				if !r.InputSyslog.One.Pq.Mode.IsUnknown() && !r.InputSyslog.One.Pq.Mode.IsNull() {
					*mode59 = shared.InputSyslogMode(r.InputSyslog.One.Pq.Mode.ValueString())
				} else {
					mode59 = nil
				}
				maxBufferSize48 := new(float64)
				if !r.InputSyslog.One.Pq.MaxBufferSize.IsUnknown() && !r.InputSyslog.One.Pq.MaxBufferSize.IsNull() {
					*maxBufferSize48 = r.InputSyslog.One.Pq.MaxBufferSize.ValueFloat64()
				} else {
					maxBufferSize48 = nil
				}
				commitFrequency46 := new(float64)
				if !r.InputSyslog.One.Pq.CommitFrequency.IsUnknown() && !r.InputSyslog.One.Pq.CommitFrequency.IsNull() {
					*commitFrequency46 = r.InputSyslog.One.Pq.CommitFrequency.ValueFloat64()
				} else {
					commitFrequency46 = nil
				}
				maxFileSize46 := new(string)
				if !r.InputSyslog.One.Pq.MaxFileSize.IsUnknown() && !r.InputSyslog.One.Pq.MaxFileSize.IsNull() {
					*maxFileSize46 = r.InputSyslog.One.Pq.MaxFileSize.ValueString()
				} else {
					maxFileSize46 = nil
				}
				maxSize46 := new(string)
				if !r.InputSyslog.One.Pq.MaxSize.IsUnknown() && !r.InputSyslog.One.Pq.MaxSize.IsNull() {
					*maxSize46 = r.InputSyslog.One.Pq.MaxSize.ValueString()
				} else {
					maxSize46 = nil
				}
				path47 := new(string)
				if !r.InputSyslog.One.Pq.Path.IsUnknown() && !r.InputSyslog.One.Pq.Path.IsNull() {
					*path47 = r.InputSyslog.One.Pq.Path.ValueString()
				} else {
					path47 = nil
				}
				compress53 := new(shared.InputSyslogCompression)
				if !r.InputSyslog.One.Pq.Compress.IsUnknown() && !r.InputSyslog.One.Pq.Compress.IsNull() {
					*compress53 = shared.InputSyslogCompression(r.InputSyslog.One.Pq.Compress.ValueString())
				} else {
					compress53 = nil
				}
				pq46 = &shared.InputSyslogPq{
					Mode:            mode59,
					MaxBufferSize:   maxBufferSize48,
					CommitFrequency: commitFrequency46,
					MaxFileSize:     maxFileSize46,
					MaxSize:         maxSize46,
					Path:            path47,
					Compress:        compress53,
				}
			}
			host21 := new(string)
			if !r.InputSyslog.One.Host.IsUnknown() && !r.InputSyslog.One.Host.IsNull() {
				*host21 = r.InputSyslog.One.Host.ValueString()
			} else {
				host21 = nil
			}
			var udpPort1 float64
			udpPort1 = r.InputSyslog.One.UDPPort.ValueFloat64()

			tcpPort1 := new(float64)
			if !r.InputSyslog.One.TCPPort.IsUnknown() && !r.InputSyslog.One.TCPPort.IsNull() {
				*tcpPort1 = r.InputSyslog.One.TCPPort.ValueFloat64()
			} else {
				tcpPort1 = nil
			}
			maxBufferSize49 := new(float64)
			if !r.InputSyslog.One.MaxBufferSize.IsUnknown() && !r.InputSyslog.One.MaxBufferSize.IsNull() {
				*maxBufferSize49 = r.InputSyslog.One.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize49 = nil
			}
			ipWhitelistRegex4 := new(string)
			if !r.InputSyslog.One.IPWhitelistRegex.IsUnknown() && !r.InputSyslog.One.IPWhitelistRegex.IsNull() {
				*ipWhitelistRegex4 = r.InputSyslog.One.IPWhitelistRegex.ValueString()
			} else {
				ipWhitelistRegex4 = nil
			}
			timestampTimezone := new(string)
			if !r.InputSyslog.One.TimestampTimezone.IsUnknown() && !r.InputSyslog.One.TimestampTimezone.IsNull() {
				*timestampTimezone = r.InputSyslog.One.TimestampTimezone.ValueString()
			} else {
				timestampTimezone = nil
			}
			singleMsgUDPPackets := new(bool)
			if !r.InputSyslog.One.SingleMsgUDPPackets.IsUnknown() && !r.InputSyslog.One.SingleMsgUDPPackets.IsNull() {
				*singleMsgUDPPackets = r.InputSyslog.One.SingleMsgUDPPackets.ValueBool()
			} else {
				singleMsgUDPPackets = nil
			}
			enableProxyHeader16 := new(bool)
			if !r.InputSyslog.One.EnableProxyHeader.IsUnknown() && !r.InputSyslog.One.EnableProxyHeader.IsNull() {
				*enableProxyHeader16 = r.InputSyslog.One.EnableProxyHeader.ValueBool()
			} else {
				enableProxyHeader16 = nil
			}
			keepFieldsList := make([]string, 0, len(r.InputSyslog.One.KeepFieldsList))
			for _, keepFieldsListItem := range r.InputSyslog.One.KeepFieldsList {
				keepFieldsList = append(keepFieldsList, keepFieldsListItem.ValueString())
			}
			octetCounting := new(bool)
			if !r.InputSyslog.One.OctetCounting.IsUnknown() && !r.InputSyslog.One.OctetCounting.IsNull() {
				*octetCounting = r.InputSyslog.One.OctetCounting.ValueBool()
			} else {
				octetCounting = nil
			}
			inferFraming := new(bool)
			if !r.InputSyslog.One.InferFraming.IsUnknown() && !r.InputSyslog.One.InferFraming.IsNull() {
				*inferFraming = r.InputSyslog.One.InferFraming.ValueBool()
			} else {
				inferFraming = nil
			}
			strictlyInferOctetCounting := new(bool)
			if !r.InputSyslog.One.StrictlyInferOctetCounting.IsUnknown() && !r.InputSyslog.One.StrictlyInferOctetCounting.IsNull() {
				*strictlyInferOctetCounting = r.InputSyslog.One.StrictlyInferOctetCounting.ValueBool()
			} else {
				strictlyInferOctetCounting = nil
			}
			allowNonStandardAppName := new(bool)
			if !r.InputSyslog.One.AllowNonStandardAppName.IsUnknown() && !r.InputSyslog.One.AllowNonStandardAppName.IsNull() {
				*allowNonStandardAppName = r.InputSyslog.One.AllowNonStandardAppName.ValueBool()
			} else {
				allowNonStandardAppName = nil
			}
			maxActiveCxn5 := new(float64)
			if !r.InputSyslog.One.MaxActiveCxn.IsUnknown() && !r.InputSyslog.One.MaxActiveCxn.IsNull() {
				*maxActiveCxn5 = r.InputSyslog.One.MaxActiveCxn.ValueFloat64()
			} else {
				maxActiveCxn5 = nil
			}
			socketIdleTimeout3 := new(float64)
			if !r.InputSyslog.One.SocketIdleTimeout.IsUnknown() && !r.InputSyslog.One.SocketIdleTimeout.IsNull() {
				*socketIdleTimeout3 = r.InputSyslog.One.SocketIdleTimeout.ValueFloat64()
			} else {
				socketIdleTimeout3 = nil
			}
			socketEndingMaxWait3 := new(float64)
			if !r.InputSyslog.One.SocketEndingMaxWait.IsUnknown() && !r.InputSyslog.One.SocketEndingMaxWait.IsNull() {
				*socketEndingMaxWait3 = r.InputSyslog.One.SocketEndingMaxWait.ValueFloat64()
			} else {
				socketEndingMaxWait3 = nil
			}
			socketMaxLifespan3 := new(float64)
			if !r.InputSyslog.One.SocketMaxLifespan.IsUnknown() && !r.InputSyslog.One.SocketMaxLifespan.IsNull() {
				*socketMaxLifespan3 = r.InputSyslog.One.SocketMaxLifespan.ValueFloat64()
			} else {
				socketMaxLifespan3 = nil
			}
			var tls24 *shared.InputSyslogTLSSettingsServerSide
			if r.InputSyslog.One.TLS != nil {
				disabled84 := new(bool)
				if !r.InputSyslog.One.TLS.Disabled.IsUnknown() && !r.InputSyslog.One.TLS.Disabled.IsNull() {
					*disabled84 = r.InputSyslog.One.TLS.Disabled.ValueBool()
				} else {
					disabled84 = nil
				}
				certificateName25 := new(string)
				if !r.InputSyslog.One.TLS.CertificateName.IsUnknown() && !r.InputSyslog.One.TLS.CertificateName.IsNull() {
					*certificateName25 = r.InputSyslog.One.TLS.CertificateName.ValueString()
				} else {
					certificateName25 = nil
				}
				privKeyPath24 := new(string)
				if !r.InputSyslog.One.TLS.PrivKeyPath.IsUnknown() && !r.InputSyslog.One.TLS.PrivKeyPath.IsNull() {
					*privKeyPath24 = r.InputSyslog.One.TLS.PrivKeyPath.ValueString()
				} else {
					privKeyPath24 = nil
				}
				passphrase23 := new(string)
				if !r.InputSyslog.One.TLS.Passphrase.IsUnknown() && !r.InputSyslog.One.TLS.Passphrase.IsNull() {
					*passphrase23 = r.InputSyslog.One.TLS.Passphrase.ValueString()
				} else {
					passphrase23 = nil
				}
				certPath24 := new(string)
				if !r.InputSyslog.One.TLS.CertPath.IsUnknown() && !r.InputSyslog.One.TLS.CertPath.IsNull() {
					*certPath24 = r.InputSyslog.One.TLS.CertPath.ValueString()
				} else {
					certPath24 = nil
				}
				caPath23 := new(string)
				if !r.InputSyslog.One.TLS.CaPath.IsUnknown() && !r.InputSyslog.One.TLS.CaPath.IsNull() {
					*caPath23 = r.InputSyslog.One.TLS.CaPath.ValueString()
				} else {
					caPath23 = nil
				}
				requestCert17 := new(bool)
				if !r.InputSyslog.One.TLS.RequestCert.IsUnknown() && !r.InputSyslog.One.TLS.RequestCert.IsNull() {
					*requestCert17 = r.InputSyslog.One.TLS.RequestCert.ValueBool()
				} else {
					requestCert17 = nil
				}
				var rejectUnauthorized35 interface{}
				if !r.InputSyslog.One.TLS.RejectUnauthorized.IsUnknown() && !r.InputSyslog.One.TLS.RejectUnauthorized.IsNull() {
					_ = json.Unmarshal([]byte(r.InputSyslog.One.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized35)
				}
				var commonNameRegex17 interface{}
				if !r.InputSyslog.One.TLS.CommonNameRegex.IsUnknown() && !r.InputSyslog.One.TLS.CommonNameRegex.IsNull() {
					_ = json.Unmarshal([]byte(r.InputSyslog.One.TLS.CommonNameRegex.ValueString()), &commonNameRegex17)
				}
				minVersion23 := new(shared.InputSyslogMinimumTLSVersion)
				if !r.InputSyslog.One.TLS.MinVersion.IsUnknown() && !r.InputSyslog.One.TLS.MinVersion.IsNull() {
					*minVersion23 = shared.InputSyslogMinimumTLSVersion(r.InputSyslog.One.TLS.MinVersion.ValueString())
				} else {
					minVersion23 = nil
				}
				maxVersion23 := new(shared.InputSyslogMaximumTLSVersion)
				if !r.InputSyslog.One.TLS.MaxVersion.IsUnknown() && !r.InputSyslog.One.TLS.MaxVersion.IsNull() {
					*maxVersion23 = shared.InputSyslogMaximumTLSVersion(r.InputSyslog.One.TLS.MaxVersion.ValueString())
				} else {
					maxVersion23 = nil
				}
				tls24 = &shared.InputSyslogTLSSettingsServerSide{
					Disabled:           disabled84,
					CertificateName:    certificateName25,
					PrivKeyPath:        privKeyPath24,
					Passphrase:         passphrase23,
					CertPath:           certPath24,
					CaPath:             caPath23,
					RequestCert:        requestCert17,
					RejectUnauthorized: rejectUnauthorized35,
					CommonNameRegex:    commonNameRegex17,
					MinVersion:         minVersion23,
					MaxVersion:         maxVersion23,
				}
			}
			metadata50 := make([]shared.InputSyslogMetadata, 0, len(r.InputSyslog.One.Metadata))
			for _, metadataItem49 := range r.InputSyslog.One.Metadata {
				var name73 string
				name73 = metadataItem49.Name.ValueString()

				var value68 string
				value68 = metadataItem49.Value.ValueString()

				metadata50 = append(metadata50, shared.InputSyslogMetadata{
					Name:  name73,
					Value: value68,
				})
			}
			udpSocketRxBufSize2 := new(float64)
			if !r.InputSyslog.One.UDPSocketRxBufSize.IsUnknown() && !r.InputSyslog.One.UDPSocketRxBufSize.IsNull() {
				*udpSocketRxBufSize2 = r.InputSyslog.One.UDPSocketRxBufSize.ValueFloat64()
			} else {
				udpSocketRxBufSize2 = nil
			}
			enableLoadBalancing3 := new(bool)
			if !r.InputSyslog.One.EnableLoadBalancing.IsUnknown() && !r.InputSyslog.One.EnableLoadBalancing.IsNull() {
				*enableLoadBalancing3 = r.InputSyslog.One.EnableLoadBalancing.ValueBool()
			} else {
				enableLoadBalancing3 = nil
			}
			description55 := new(string)
			if !r.InputSyslog.One.Description.IsUnknown() && !r.InputSyslog.One.Description.IsNull() {
				*description55 = r.InputSyslog.One.Description.ValueString()
			} else {
				description55 = nil
			}
			var status46 *shared.TFStatus
			if r.InputSyslog.One.Status != nil {
				health46 := shared.Health(r.InputSyslog.One.Status.Health.ValueString())
				metrics46 := make(map[string]interface{})
				for metricsKey46, metricsValue46 := range r.InputSyslog.One.Status.Metrics {
					var metricsInst46 interface{}
					_ = json.Unmarshal([]byte(metricsValue46.ValueString()), &metricsInst46)
					metrics46[metricsKey46] = metricsInst46
				}
				var timestamp46 float64
				timestamp46 = r.InputSyslog.One.Status.Timestamp.ValueFloat64()

				useStatusFromLb46 := new(bool)
				if !r.InputSyslog.One.Status.UseStatusFromLB.IsUnknown() && !r.InputSyslog.One.Status.UseStatusFromLB.IsNull() {
					*useStatusFromLb46 = r.InputSyslog.One.Status.UseStatusFromLB.ValueBool()
				} else {
					useStatusFromLb46 = nil
				}
				status46 = &shared.TFStatus{
					Health:          health46,
					Metrics:         metrics46,
					Timestamp:       timestamp46,
					UseStatusFromLB: useStatusFromLb46,
				}
			}
			inputSyslog1 = &shared.InputSyslog1{
				ID:                         id46,
				Type:                       typeVar50,
				Disabled:                   disabled83,
				Pipeline:                   pipeline92,
				SendToRoutes:               sendToRoutes46,
				Environment:                environment46,
				PqEnabled:                  pqEnabled46,
				Streamtags:                 streamtags46,
				Connections:                connections46,
				Pq:                         pq46,
				Host:                       host21,
				UDPPort:                    udpPort1,
				TCPPort:                    tcpPort1,
				MaxBufferSize:              maxBufferSize49,
				IPWhitelistRegex:           ipWhitelistRegex4,
				TimestampTimezone:          timestampTimezone,
				SingleMsgUDPPackets:        singleMsgUDPPackets,
				EnableProxyHeader:          enableProxyHeader16,
				KeepFieldsList:             keepFieldsList,
				OctetCounting:              octetCounting,
				InferFraming:               inferFraming,
				StrictlyInferOctetCounting: strictlyInferOctetCounting,
				AllowNonStandardAppName:    allowNonStandardAppName,
				MaxActiveCxn:               maxActiveCxn5,
				SocketIdleTimeout:          socketIdleTimeout3,
				SocketEndingMaxWait:        socketEndingMaxWait3,
				SocketMaxLifespan:          socketMaxLifespan3,
				TLS:                        tls24,
				Metadata:                   metadata50,
				UDPSocketRxBufSize:         udpSocketRxBufSize2,
				EnableLoadBalancing:        enableLoadBalancing3,
				Description:                description55,
				Status:                     status46,
			}
		}
		if inputSyslog1 != nil {
			inputSyslog = &shared.InputSyslog{
				InputSyslog1: inputSyslog1,
			}
		}
		var inputSyslog2 *shared.InputSyslog2
		if r.InputSyslog.Two != nil {
			id47 := new(string)
			if !r.InputSyslog.Two.ID.IsUnknown() && !r.InputSyslog.Two.ID.IsNull() {
				*id47 = r.InputSyslog.Two.ID.ValueString()
			} else {
				id47 = nil
			}
			typeVar51 := shared.InputInputSyslogType(r.InputSyslog.Two.Type.ValueString())
			disabled85 := new(bool)
			if !r.InputSyslog.Two.Disabled.IsUnknown() && !r.InputSyslog.Two.Disabled.IsNull() {
				*disabled85 = r.InputSyslog.Two.Disabled.ValueBool()
			} else {
				disabled85 = nil
			}
			pipeline94 := new(string)
			if !r.InputSyslog.Two.Pipeline.IsUnknown() && !r.InputSyslog.Two.Pipeline.IsNull() {
				*pipeline94 = r.InputSyslog.Two.Pipeline.ValueString()
			} else {
				pipeline94 = nil
			}
			sendToRoutes47 := new(bool)
			if !r.InputSyslog.Two.SendToRoutes.IsUnknown() && !r.InputSyslog.Two.SendToRoutes.IsNull() {
				*sendToRoutes47 = r.InputSyslog.Two.SendToRoutes.ValueBool()
			} else {
				sendToRoutes47 = nil
			}
			environment47 := new(string)
			if !r.InputSyslog.Two.Environment.IsUnknown() && !r.InputSyslog.Two.Environment.IsNull() {
				*environment47 = r.InputSyslog.Two.Environment.ValueString()
			} else {
				environment47 = nil
			}
			pqEnabled47 := new(bool)
			if !r.InputSyslog.Two.PqEnabled.IsUnknown() && !r.InputSyslog.Two.PqEnabled.IsNull() {
				*pqEnabled47 = r.InputSyslog.Two.PqEnabled.ValueBool()
			} else {
				pqEnabled47 = nil
			}
			streamtags47 := make([]string, 0, len(r.InputSyslog.Two.Streamtags))
			for _, streamtagsItem47 := range r.InputSyslog.Two.Streamtags {
				streamtags47 = append(streamtags47, streamtagsItem47.ValueString())
			}
			connections47 := make([]shared.InputInputSyslogConnections, 0, len(r.InputSyslog.Two.Connections))
			for _, connectionsItem47 := range r.InputSyslog.Two.Connections {
				pipeline95 := new(string)
				if !connectionsItem47.Pipeline.IsUnknown() && !connectionsItem47.Pipeline.IsNull() {
					*pipeline95 = connectionsItem47.Pipeline.ValueString()
				} else {
					pipeline95 = nil
				}
				var output48 string
				output48 = connectionsItem47.Output.ValueString()

				connections47 = append(connections47, shared.InputInputSyslogConnections{
					Pipeline: pipeline95,
					Output:   output48,
				})
			}
			var pq47 *shared.InputInputSyslogPq
			if r.InputSyslog.Two.Pq != nil {
				mode60 := new(shared.InputInputSyslogMode)
				if !r.InputSyslog.Two.Pq.Mode.IsUnknown() && !r.InputSyslog.Two.Pq.Mode.IsNull() {
					*mode60 = shared.InputInputSyslogMode(r.InputSyslog.Two.Pq.Mode.ValueString())
				} else {
					mode60 = nil
				}
				maxBufferSize50 := new(float64)
				if !r.InputSyslog.Two.Pq.MaxBufferSize.IsUnknown() && !r.InputSyslog.Two.Pq.MaxBufferSize.IsNull() {
					*maxBufferSize50 = r.InputSyslog.Two.Pq.MaxBufferSize.ValueFloat64()
				} else {
					maxBufferSize50 = nil
				}
				commitFrequency47 := new(float64)
				if !r.InputSyslog.Two.Pq.CommitFrequency.IsUnknown() && !r.InputSyslog.Two.Pq.CommitFrequency.IsNull() {
					*commitFrequency47 = r.InputSyslog.Two.Pq.CommitFrequency.ValueFloat64()
				} else {
					commitFrequency47 = nil
				}
				maxFileSize47 := new(string)
				if !r.InputSyslog.Two.Pq.MaxFileSize.IsUnknown() && !r.InputSyslog.Two.Pq.MaxFileSize.IsNull() {
					*maxFileSize47 = r.InputSyslog.Two.Pq.MaxFileSize.ValueString()
				} else {
					maxFileSize47 = nil
				}
				maxSize47 := new(string)
				if !r.InputSyslog.Two.Pq.MaxSize.IsUnknown() && !r.InputSyslog.Two.Pq.MaxSize.IsNull() {
					*maxSize47 = r.InputSyslog.Two.Pq.MaxSize.ValueString()
				} else {
					maxSize47 = nil
				}
				path48 := new(string)
				if !r.InputSyslog.Two.Pq.Path.IsUnknown() && !r.InputSyslog.Two.Pq.Path.IsNull() {
					*path48 = r.InputSyslog.Two.Pq.Path.ValueString()
				} else {
					path48 = nil
				}
				compress54 := new(shared.InputInputSyslogCompression)
				if !r.InputSyslog.Two.Pq.Compress.IsUnknown() && !r.InputSyslog.Two.Pq.Compress.IsNull() {
					*compress54 = shared.InputInputSyslogCompression(r.InputSyslog.Two.Pq.Compress.ValueString())
				} else {
					compress54 = nil
				}
				pq47 = &shared.InputInputSyslogPq{
					Mode:            mode60,
					MaxBufferSize:   maxBufferSize50,
					CommitFrequency: commitFrequency47,
					MaxFileSize:     maxFileSize47,
					MaxSize:         maxSize47,
					Path:            path48,
					Compress:        compress54,
				}
			}
			host22 := new(string)
			if !r.InputSyslog.Two.Host.IsUnknown() && !r.InputSyslog.Two.Host.IsNull() {
				*host22 = r.InputSyslog.Two.Host.ValueString()
			} else {
				host22 = nil
			}
			udpPort2 := new(float64)
			if !r.InputSyslog.Two.UDPPort.IsUnknown() && !r.InputSyslog.Two.UDPPort.IsNull() {
				*udpPort2 = r.InputSyslog.Two.UDPPort.ValueFloat64()
			} else {
				udpPort2 = nil
			}
			var tcpPort2 float64
			tcpPort2 = r.InputSyslog.Two.TCPPort.ValueFloat64()

			maxBufferSize51 := new(float64)
			if !r.InputSyslog.Two.MaxBufferSize.IsUnknown() && !r.InputSyslog.Two.MaxBufferSize.IsNull() {
				*maxBufferSize51 = r.InputSyslog.Two.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize51 = nil
			}
			ipWhitelistRegex5 := new(string)
			if !r.InputSyslog.Two.IPWhitelistRegex.IsUnknown() && !r.InputSyslog.Two.IPWhitelistRegex.IsNull() {
				*ipWhitelistRegex5 = r.InputSyslog.Two.IPWhitelistRegex.ValueString()
			} else {
				ipWhitelistRegex5 = nil
			}
			timestampTimezone1 := new(string)
			if !r.InputSyslog.Two.TimestampTimezone.IsUnknown() && !r.InputSyslog.Two.TimestampTimezone.IsNull() {
				*timestampTimezone1 = r.InputSyslog.Two.TimestampTimezone.ValueString()
			} else {
				timestampTimezone1 = nil
			}
			singleMsgUDPPackets1 := new(bool)
			if !r.InputSyslog.Two.SingleMsgUDPPackets.IsUnknown() && !r.InputSyslog.Two.SingleMsgUDPPackets.IsNull() {
				*singleMsgUDPPackets1 = r.InputSyslog.Two.SingleMsgUDPPackets.ValueBool()
			} else {
				singleMsgUDPPackets1 = nil
			}
			enableProxyHeader17 := new(bool)
			if !r.InputSyslog.Two.EnableProxyHeader.IsUnknown() && !r.InputSyslog.Two.EnableProxyHeader.IsNull() {
				*enableProxyHeader17 = r.InputSyslog.Two.EnableProxyHeader.ValueBool()
			} else {
				enableProxyHeader17 = nil
			}
			keepFieldsList1 := make([]string, 0, len(r.InputSyslog.Two.KeepFieldsList))
			for _, keepFieldsListItem1 := range r.InputSyslog.Two.KeepFieldsList {
				keepFieldsList1 = append(keepFieldsList1, keepFieldsListItem1.ValueString())
			}
			octetCounting1 := new(bool)
			if !r.InputSyslog.Two.OctetCounting.IsUnknown() && !r.InputSyslog.Two.OctetCounting.IsNull() {
				*octetCounting1 = r.InputSyslog.Two.OctetCounting.ValueBool()
			} else {
				octetCounting1 = nil
			}
			inferFraming1 := new(bool)
			if !r.InputSyslog.Two.InferFraming.IsUnknown() && !r.InputSyslog.Two.InferFraming.IsNull() {
				*inferFraming1 = r.InputSyslog.Two.InferFraming.ValueBool()
			} else {
				inferFraming1 = nil
			}
			strictlyInferOctetCounting1 := new(bool)
			if !r.InputSyslog.Two.StrictlyInferOctetCounting.IsUnknown() && !r.InputSyslog.Two.StrictlyInferOctetCounting.IsNull() {
				*strictlyInferOctetCounting1 = r.InputSyslog.Two.StrictlyInferOctetCounting.ValueBool()
			} else {
				strictlyInferOctetCounting1 = nil
			}
			allowNonStandardAppName1 := new(bool)
			if !r.InputSyslog.Two.AllowNonStandardAppName.IsUnknown() && !r.InputSyslog.Two.AllowNonStandardAppName.IsNull() {
				*allowNonStandardAppName1 = r.InputSyslog.Two.AllowNonStandardAppName.ValueBool()
			} else {
				allowNonStandardAppName1 = nil
			}
			maxActiveCxn6 := new(float64)
			if !r.InputSyslog.Two.MaxActiveCxn.IsUnknown() && !r.InputSyslog.Two.MaxActiveCxn.IsNull() {
				*maxActiveCxn6 = r.InputSyslog.Two.MaxActiveCxn.ValueFloat64()
			} else {
				maxActiveCxn6 = nil
			}
			socketIdleTimeout4 := new(float64)
			if !r.InputSyslog.Two.SocketIdleTimeout.IsUnknown() && !r.InputSyslog.Two.SocketIdleTimeout.IsNull() {
				*socketIdleTimeout4 = r.InputSyslog.Two.SocketIdleTimeout.ValueFloat64()
			} else {
				socketIdleTimeout4 = nil
			}
			socketEndingMaxWait4 := new(float64)
			if !r.InputSyslog.Two.SocketEndingMaxWait.IsUnknown() && !r.InputSyslog.Two.SocketEndingMaxWait.IsNull() {
				*socketEndingMaxWait4 = r.InputSyslog.Two.SocketEndingMaxWait.ValueFloat64()
			} else {
				socketEndingMaxWait4 = nil
			}
			socketMaxLifespan4 := new(float64)
			if !r.InputSyslog.Two.SocketMaxLifespan.IsUnknown() && !r.InputSyslog.Two.SocketMaxLifespan.IsNull() {
				*socketMaxLifespan4 = r.InputSyslog.Two.SocketMaxLifespan.ValueFloat64()
			} else {
				socketMaxLifespan4 = nil
			}
			var tls25 *shared.InputInputSyslogTLSSettingsServerSide
			if r.InputSyslog.Two.TLS != nil {
				disabled86 := new(bool)
				if !r.InputSyslog.Two.TLS.Disabled.IsUnknown() && !r.InputSyslog.Two.TLS.Disabled.IsNull() {
					*disabled86 = r.InputSyslog.Two.TLS.Disabled.ValueBool()
				} else {
					disabled86 = nil
				}
				certificateName26 := new(string)
				if !r.InputSyslog.Two.TLS.CertificateName.IsUnknown() && !r.InputSyslog.Two.TLS.CertificateName.IsNull() {
					*certificateName26 = r.InputSyslog.Two.TLS.CertificateName.ValueString()
				} else {
					certificateName26 = nil
				}
				privKeyPath25 := new(string)
				if !r.InputSyslog.Two.TLS.PrivKeyPath.IsUnknown() && !r.InputSyslog.Two.TLS.PrivKeyPath.IsNull() {
					*privKeyPath25 = r.InputSyslog.Two.TLS.PrivKeyPath.ValueString()
				} else {
					privKeyPath25 = nil
				}
				passphrase24 := new(string)
				if !r.InputSyslog.Two.TLS.Passphrase.IsUnknown() && !r.InputSyslog.Two.TLS.Passphrase.IsNull() {
					*passphrase24 = r.InputSyslog.Two.TLS.Passphrase.ValueString()
				} else {
					passphrase24 = nil
				}
				certPath25 := new(string)
				if !r.InputSyslog.Two.TLS.CertPath.IsUnknown() && !r.InputSyslog.Two.TLS.CertPath.IsNull() {
					*certPath25 = r.InputSyslog.Two.TLS.CertPath.ValueString()
				} else {
					certPath25 = nil
				}
				caPath24 := new(string)
				if !r.InputSyslog.Two.TLS.CaPath.IsUnknown() && !r.InputSyslog.Two.TLS.CaPath.IsNull() {
					*caPath24 = r.InputSyslog.Two.TLS.CaPath.ValueString()
				} else {
					caPath24 = nil
				}
				requestCert18 := new(bool)
				if !r.InputSyslog.Two.TLS.RequestCert.IsUnknown() && !r.InputSyslog.Two.TLS.RequestCert.IsNull() {
					*requestCert18 = r.InputSyslog.Two.TLS.RequestCert.ValueBool()
				} else {
					requestCert18 = nil
				}
				var rejectUnauthorized36 interface{}
				if !r.InputSyslog.Two.TLS.RejectUnauthorized.IsUnknown() && !r.InputSyslog.Two.TLS.RejectUnauthorized.IsNull() {
					_ = json.Unmarshal([]byte(r.InputSyslog.Two.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized36)
				}
				var commonNameRegex18 interface{}
				if !r.InputSyslog.Two.TLS.CommonNameRegex.IsUnknown() && !r.InputSyslog.Two.TLS.CommonNameRegex.IsNull() {
					_ = json.Unmarshal([]byte(r.InputSyslog.Two.TLS.CommonNameRegex.ValueString()), &commonNameRegex18)
				}
				minVersion24 := new(shared.InputInputSyslogMinimumTLSVersion)
				if !r.InputSyslog.Two.TLS.MinVersion.IsUnknown() && !r.InputSyslog.Two.TLS.MinVersion.IsNull() {
					*minVersion24 = shared.InputInputSyslogMinimumTLSVersion(r.InputSyslog.Two.TLS.MinVersion.ValueString())
				} else {
					minVersion24 = nil
				}
				maxVersion24 := new(shared.InputInputSyslogMaximumTLSVersion)
				if !r.InputSyslog.Two.TLS.MaxVersion.IsUnknown() && !r.InputSyslog.Two.TLS.MaxVersion.IsNull() {
					*maxVersion24 = shared.InputInputSyslogMaximumTLSVersion(r.InputSyslog.Two.TLS.MaxVersion.ValueString())
				} else {
					maxVersion24 = nil
				}
				tls25 = &shared.InputInputSyslogTLSSettingsServerSide{
					Disabled:           disabled86,
					CertificateName:    certificateName26,
					PrivKeyPath:        privKeyPath25,
					Passphrase:         passphrase24,
					CertPath:           certPath25,
					CaPath:             caPath24,
					RequestCert:        requestCert18,
					RejectUnauthorized: rejectUnauthorized36,
					CommonNameRegex:    commonNameRegex18,
					MinVersion:         minVersion24,
					MaxVersion:         maxVersion24,
				}
			}
			metadata51 := make([]shared.InputInputSyslogMetadata, 0, len(r.InputSyslog.Two.Metadata))
			for _, metadataItem50 := range r.InputSyslog.Two.Metadata {
				var name74 string
				name74 = metadataItem50.Name.ValueString()

				var value69 string
				value69 = metadataItem50.Value.ValueString()

				metadata51 = append(metadata51, shared.InputInputSyslogMetadata{
					Name:  name74,
					Value: value69,
				})
			}
			udpSocketRxBufSize3 := new(float64)
			if !r.InputSyslog.Two.UDPSocketRxBufSize.IsUnknown() && !r.InputSyslog.Two.UDPSocketRxBufSize.IsNull() {
				*udpSocketRxBufSize3 = r.InputSyslog.Two.UDPSocketRxBufSize.ValueFloat64()
			} else {
				udpSocketRxBufSize3 = nil
			}
			enableLoadBalancing4 := new(bool)
			if !r.InputSyslog.Two.EnableLoadBalancing.IsUnknown() && !r.InputSyslog.Two.EnableLoadBalancing.IsNull() {
				*enableLoadBalancing4 = r.InputSyslog.Two.EnableLoadBalancing.ValueBool()
			} else {
				enableLoadBalancing4 = nil
			}
			description56 := new(string)
			if !r.InputSyslog.Two.Description.IsUnknown() && !r.InputSyslog.Two.Description.IsNull() {
				*description56 = r.InputSyslog.Two.Description.ValueString()
			} else {
				description56 = nil
			}
			var status47 *shared.TFStatus
			if r.InputSyslog.Two.Status != nil {
				health47 := shared.Health(r.InputSyslog.Two.Status.Health.ValueString())
				metrics47 := make(map[string]interface{})
				for metricsKey47, metricsValue47 := range r.InputSyslog.Two.Status.Metrics {
					var metricsInst47 interface{}
					_ = json.Unmarshal([]byte(metricsValue47.ValueString()), &metricsInst47)
					metrics47[metricsKey47] = metricsInst47
				}
				var timestamp47 float64
				timestamp47 = r.InputSyslog.Two.Status.Timestamp.ValueFloat64()

				useStatusFromLb47 := new(bool)
				if !r.InputSyslog.Two.Status.UseStatusFromLB.IsUnknown() && !r.InputSyslog.Two.Status.UseStatusFromLB.IsNull() {
					*useStatusFromLb47 = r.InputSyslog.Two.Status.UseStatusFromLB.ValueBool()
				} else {
					useStatusFromLb47 = nil
				}
				status47 = &shared.TFStatus{
					Health:          health47,
					Metrics:         metrics47,
					Timestamp:       timestamp47,
					UseStatusFromLB: useStatusFromLb47,
				}
			}
			inputSyslog2 = &shared.InputSyslog2{
				ID:                         id47,
				Type:                       typeVar51,
				Disabled:                   disabled85,
				Pipeline:                   pipeline94,
				SendToRoutes:               sendToRoutes47,
				Environment:                environment47,
				PqEnabled:                  pqEnabled47,
				Streamtags:                 streamtags47,
				Connections:                connections47,
				Pq:                         pq47,
				Host:                       host22,
				UDPPort:                    udpPort2,
				TCPPort:                    tcpPort2,
				MaxBufferSize:              maxBufferSize51,
				IPWhitelistRegex:           ipWhitelistRegex5,
				TimestampTimezone:          timestampTimezone1,
				SingleMsgUDPPackets:        singleMsgUDPPackets1,
				EnableProxyHeader:          enableProxyHeader17,
				KeepFieldsList:             keepFieldsList1,
				OctetCounting:              octetCounting1,
				InferFraming:               inferFraming1,
				StrictlyInferOctetCounting: strictlyInferOctetCounting1,
				AllowNonStandardAppName:    allowNonStandardAppName1,
				MaxActiveCxn:               maxActiveCxn6,
				SocketIdleTimeout:          socketIdleTimeout4,
				SocketEndingMaxWait:        socketEndingMaxWait4,
				SocketMaxLifespan:          socketMaxLifespan4,
				TLS:                        tls25,
				Metadata:                   metadata51,
				UDPSocketRxBufSize:         udpSocketRxBufSize3,
				EnableLoadBalancing:        enableLoadBalancing4,
				Description:                description56,
				Status:                     status47,
			}
		}
		if inputSyslog2 != nil {
			inputSyslog = &shared.InputSyslog{
				InputSyslog2: inputSyslog2,
			}
		}
	}
	if inputSyslog != nil {
		out = shared.Input{
			InputSyslog: inputSyslog,
		}
	}
	var inputFile *shared.InputFile
	if r.InputFile != nil {
		var id48 string
		id48 = r.InputFile.ID.ValueString()

		typeVar52 := shared.InputFileType(r.InputFile.Type.ValueString())
		disabled87 := new(bool)
		if !r.InputFile.Disabled.IsUnknown() && !r.InputFile.Disabled.IsNull() {
			*disabled87 = r.InputFile.Disabled.ValueBool()
		} else {
			disabled87 = nil
		}
		pipeline96 := new(string)
		if !r.InputFile.Pipeline.IsUnknown() && !r.InputFile.Pipeline.IsNull() {
			*pipeline96 = r.InputFile.Pipeline.ValueString()
		} else {
			pipeline96 = nil
		}
		sendToRoutes48 := new(bool)
		if !r.InputFile.SendToRoutes.IsUnknown() && !r.InputFile.SendToRoutes.IsNull() {
			*sendToRoutes48 = r.InputFile.SendToRoutes.ValueBool()
		} else {
			sendToRoutes48 = nil
		}
		environment48 := new(string)
		if !r.InputFile.Environment.IsUnknown() && !r.InputFile.Environment.IsNull() {
			*environment48 = r.InputFile.Environment.ValueString()
		} else {
			environment48 = nil
		}
		pqEnabled48 := new(bool)
		if !r.InputFile.PqEnabled.IsUnknown() && !r.InputFile.PqEnabled.IsNull() {
			*pqEnabled48 = r.InputFile.PqEnabled.ValueBool()
		} else {
			pqEnabled48 = nil
		}
		streamtags48 := make([]string, 0, len(r.InputFile.Streamtags))
		for _, streamtagsItem48 := range r.InputFile.Streamtags {
			streamtags48 = append(streamtags48, streamtagsItem48.ValueString())
		}
		connections48 := make([]shared.InputFileConnections, 0, len(r.InputFile.Connections))
		for _, connectionsItem48 := range r.InputFile.Connections {
			pipeline97 := new(string)
			if !connectionsItem48.Pipeline.IsUnknown() && !connectionsItem48.Pipeline.IsNull() {
				*pipeline97 = connectionsItem48.Pipeline.ValueString()
			} else {
				pipeline97 = nil
			}
			var output49 string
			output49 = connectionsItem48.Output.ValueString()

			connections48 = append(connections48, shared.InputFileConnections{
				Pipeline: pipeline97,
				Output:   output49,
			})
		}
		var pq48 *shared.InputFilePq
		if r.InputFile.Pq != nil {
			mode61 := new(shared.InputFileInputMode)
			if !r.InputFile.Pq.Mode.IsUnknown() && !r.InputFile.Pq.Mode.IsNull() {
				*mode61 = shared.InputFileInputMode(r.InputFile.Pq.Mode.ValueString())
			} else {
				mode61 = nil
			}
			maxBufferSize52 := new(float64)
			if !r.InputFile.Pq.MaxBufferSize.IsUnknown() && !r.InputFile.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize52 = r.InputFile.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize52 = nil
			}
			commitFrequency48 := new(float64)
			if !r.InputFile.Pq.CommitFrequency.IsUnknown() && !r.InputFile.Pq.CommitFrequency.IsNull() {
				*commitFrequency48 = r.InputFile.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency48 = nil
			}
			maxFileSize48 := new(string)
			if !r.InputFile.Pq.MaxFileSize.IsUnknown() && !r.InputFile.Pq.MaxFileSize.IsNull() {
				*maxFileSize48 = r.InputFile.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize48 = nil
			}
			maxSize48 := new(string)
			if !r.InputFile.Pq.MaxSize.IsUnknown() && !r.InputFile.Pq.MaxSize.IsNull() {
				*maxSize48 = r.InputFile.Pq.MaxSize.ValueString()
			} else {
				maxSize48 = nil
			}
			path49 := new(string)
			if !r.InputFile.Pq.Path.IsUnknown() && !r.InputFile.Pq.Path.IsNull() {
				*path49 = r.InputFile.Pq.Path.ValueString()
			} else {
				path49 = nil
			}
			compress55 := new(shared.InputFileCompression)
			if !r.InputFile.Pq.Compress.IsUnknown() && !r.InputFile.Pq.Compress.IsNull() {
				*compress55 = shared.InputFileCompression(r.InputFile.Pq.Compress.ValueString())
			} else {
				compress55 = nil
			}
			pq48 = &shared.InputFilePq{
				Mode:            mode61,
				MaxBufferSize:   maxBufferSize52,
				CommitFrequency: commitFrequency48,
				MaxFileSize:     maxFileSize48,
				MaxSize:         maxSize48,
				Path:            path49,
				Compress:        compress55,
			}
		}
		mode62 := new(shared.InputFileMode)
		if !r.InputFile.Mode.IsUnknown() && !r.InputFile.Mode.IsNull() {
			*mode62 = shared.InputFileMode(r.InputFile.Mode.ValueString())
		} else {
			mode62 = nil
		}
		interval15 := new(float64)
		if !r.InputFile.Interval.IsUnknown() && !r.InputFile.Interval.IsNull() {
			*interval15 = r.InputFile.Interval.ValueFloat64()
		} else {
			interval15 = nil
		}
		filenames := make([]string, 0, len(r.InputFile.Filenames))
		for _, filenamesItem := range r.InputFile.Filenames {
			filenames = append(filenames, filenamesItem.ValueString())
		}
		tailOnly := new(bool)
		if !r.InputFile.TailOnly.IsUnknown() && !r.InputFile.TailOnly.IsNull() {
			*tailOnly = r.InputFile.TailOnly.ValueBool()
		} else {
			tailOnly = nil
		}
		idleTimeout := new(float64)
		if !r.InputFile.IdleTimeout.IsUnknown() && !r.InputFile.IdleTimeout.IsNull() {
			*idleTimeout = r.InputFile.IdleTimeout.ValueFloat64()
		} else {
			idleTimeout = nil
		}
		maxAgeDur := new(string)
		if !r.InputFile.MaxAgeDur.IsUnknown() && !r.InputFile.MaxAgeDur.IsNull() {
			*maxAgeDur = r.InputFile.MaxAgeDur.ValueString()
		} else {
			maxAgeDur = nil
		}
		checkFileModTime := new(bool)
		if !r.InputFile.CheckFileModTime.IsUnknown() && !r.InputFile.CheckFileModTime.IsNull() {
			*checkFileModTime = r.InputFile.CheckFileModTime.ValueBool()
		} else {
			checkFileModTime = nil
		}
		forceText := new(bool)
		if !r.InputFile.ForceText.IsUnknown() && !r.InputFile.ForceText.IsNull() {
			*forceText = r.InputFile.ForceText.ValueBool()
		} else {
			forceText = nil
		}
		hashLen := new(float64)
		if !r.InputFile.HashLen.IsUnknown() && !r.InputFile.HashLen.IsNull() {
			*hashLen = r.InputFile.HashLen.ValueFloat64()
		} else {
			hashLen = nil
		}
		metadata52 := make([]shared.InputFileMetadata, 0, len(r.InputFile.Metadata))
		for _, metadataItem51 := range r.InputFile.Metadata {
			var name75 string
			name75 = metadataItem51.Name.ValueString()

			var value70 string
			value70 = metadataItem51.Value.ValueString()

			metadata52 = append(metadata52, shared.InputFileMetadata{
				Name:  name75,
				Value: value70,
			})
		}
		breakerRulesets11 := make([]string, 0, len(r.InputFile.BreakerRulesets))
		for _, breakerRulesetsItem11 := range r.InputFile.BreakerRulesets {
			breakerRulesets11 = append(breakerRulesets11, breakerRulesetsItem11.ValueString())
		}
		staleChannelFlushMs11 := new(float64)
		if !r.InputFile.StaleChannelFlushMs.IsUnknown() && !r.InputFile.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs11 = r.InputFile.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs11 = nil
		}
		description57 := new(string)
		if !r.InputFile.Description.IsUnknown() && !r.InputFile.Description.IsNull() {
			*description57 = r.InputFile.Description.ValueString()
		} else {
			description57 = nil
		}
		path50 := new(string)
		if !r.InputFile.Path.IsUnknown() && !r.InputFile.Path.IsNull() {
			*path50 = r.InputFile.Path.ValueString()
		} else {
			path50 = nil
		}
		depth := new(float64)
		if !r.InputFile.Depth.IsUnknown() && !r.InputFile.Depth.IsNull() {
			*depth = r.InputFile.Depth.ValueFloat64()
		} else {
			depth = nil
		}
		suppressMissingPathErrors := new(bool)
		if !r.InputFile.SuppressMissingPathErrors.IsUnknown() && !r.InputFile.SuppressMissingPathErrors.IsNull() {
			*suppressMissingPathErrors = r.InputFile.SuppressMissingPathErrors.ValueBool()
		} else {
			suppressMissingPathErrors = nil
		}
		deleteFiles := new(bool)
		if !r.InputFile.DeleteFiles.IsUnknown() && !r.InputFile.DeleteFiles.IsNull() {
			*deleteFiles = r.InputFile.DeleteFiles.ValueBool()
		} else {
			deleteFiles = nil
		}
		includeUnidentifiableBinary := new(bool)
		if !r.InputFile.IncludeUnidentifiableBinary.IsUnknown() && !r.InputFile.IncludeUnidentifiableBinary.IsNull() {
			*includeUnidentifiableBinary = r.InputFile.IncludeUnidentifiableBinary.ValueBool()
		} else {
			includeUnidentifiableBinary = nil
		}
		var status48 *shared.TFStatus
		if r.InputFile.Status != nil {
			health48 := shared.Health(r.InputFile.Status.Health.ValueString())
			metrics48 := make(map[string]interface{})
			for metricsKey48, metricsValue48 := range r.InputFile.Status.Metrics {
				var metricsInst48 interface{}
				_ = json.Unmarshal([]byte(metricsValue48.ValueString()), &metricsInst48)
				metrics48[metricsKey48] = metricsInst48
			}
			var timestamp48 float64
			timestamp48 = r.InputFile.Status.Timestamp.ValueFloat64()

			useStatusFromLb48 := new(bool)
			if !r.InputFile.Status.UseStatusFromLB.IsUnknown() && !r.InputFile.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb48 = r.InputFile.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb48 = nil
			}
			status48 = &shared.TFStatus{
				Health:          health48,
				Metrics:         metrics48,
				Timestamp:       timestamp48,
				UseStatusFromLB: useStatusFromLb48,
			}
		}
		inputFile = &shared.InputFile{
			ID:                          id48,
			Type:                        typeVar52,
			Disabled:                    disabled87,
			Pipeline:                    pipeline96,
			SendToRoutes:                sendToRoutes48,
			Environment:                 environment48,
			PqEnabled:                   pqEnabled48,
			Streamtags:                  streamtags48,
			Connections:                 connections48,
			Pq:                          pq48,
			Mode:                        mode62,
			Interval:                    interval15,
			Filenames:                   filenames,
			TailOnly:                    tailOnly,
			IdleTimeout:                 idleTimeout,
			MaxAgeDur:                   maxAgeDur,
			CheckFileModTime:            checkFileModTime,
			ForceText:                   forceText,
			HashLen:                     hashLen,
			Metadata:                    metadata52,
			BreakerRulesets:             breakerRulesets11,
			StaleChannelFlushMs:         staleChannelFlushMs11,
			Description:                 description57,
			Path:                        path50,
			Depth:                       depth,
			SuppressMissingPathErrors:   suppressMissingPathErrors,
			DeleteFiles:                 deleteFiles,
			IncludeUnidentifiableBinary: includeUnidentifiableBinary,
			Status:                      status48,
		}
	}
	if inputFile != nil {
		out = shared.Input{
			InputFile: inputFile,
		}
	}
	var inputTCP *shared.InputTCP
	if r.InputTCP != nil {
		var status49 *shared.TFStatus
		if r.InputTCP.Status != nil {
			health49 := shared.Health(r.InputTCP.Status.Health.ValueString())
			metrics49 := make(map[string]interface{})
			for metricsKey49, metricsValue49 := range r.InputTCP.Status.Metrics {
				var metricsInst49 interface{}
				_ = json.Unmarshal([]byte(metricsValue49.ValueString()), &metricsInst49)
				metrics49[metricsKey49] = metricsInst49
			}
			var timestamp49 float64
			timestamp49 = r.InputTCP.Status.Timestamp.ValueFloat64()

			useStatusFromLb49 := new(bool)
			if !r.InputTCP.Status.UseStatusFromLB.IsUnknown() && !r.InputTCP.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb49 = r.InputTCP.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb49 = nil
			}
			status49 = &shared.TFStatus{
				Health:          health49,
				Metrics:         metrics49,
				Timestamp:       timestamp49,
				UseStatusFromLB: useStatusFromLb49,
			}
		}
		id49 := new(string)
		if !r.InputTCP.ID.IsUnknown() && !r.InputTCP.ID.IsNull() {
			*id49 = r.InputTCP.ID.ValueString()
		} else {
			id49 = nil
		}
		typeVar53 := new(shared.InputTCPType)
		if !r.InputTCP.Type.IsUnknown() && !r.InputTCP.Type.IsNull() {
			*typeVar53 = shared.InputTCPType(r.InputTCP.Type.ValueString())
		} else {
			typeVar53 = nil
		}
		disabled88 := new(bool)
		if !r.InputTCP.Disabled.IsUnknown() && !r.InputTCP.Disabled.IsNull() {
			*disabled88 = r.InputTCP.Disabled.ValueBool()
		} else {
			disabled88 = nil
		}
		pipeline98 := new(string)
		if !r.InputTCP.Pipeline.IsUnknown() && !r.InputTCP.Pipeline.IsNull() {
			*pipeline98 = r.InputTCP.Pipeline.ValueString()
		} else {
			pipeline98 = nil
		}
		sendToRoutes49 := new(bool)
		if !r.InputTCP.SendToRoutes.IsUnknown() && !r.InputTCP.SendToRoutes.IsNull() {
			*sendToRoutes49 = r.InputTCP.SendToRoutes.ValueBool()
		} else {
			sendToRoutes49 = nil
		}
		environment49 := new(string)
		if !r.InputTCP.Environment.IsUnknown() && !r.InputTCP.Environment.IsNull() {
			*environment49 = r.InputTCP.Environment.ValueString()
		} else {
			environment49 = nil
		}
		pqEnabled49 := new(bool)
		if !r.InputTCP.PqEnabled.IsUnknown() && !r.InputTCP.PqEnabled.IsNull() {
			*pqEnabled49 = r.InputTCP.PqEnabled.ValueBool()
		} else {
			pqEnabled49 = nil
		}
		streamtags49 := make([]string, 0, len(r.InputTCP.Streamtags))
		for _, streamtagsItem49 := range r.InputTCP.Streamtags {
			streamtags49 = append(streamtags49, streamtagsItem49.ValueString())
		}
		connections49 := make([]shared.InputTCPConnections, 0, len(r.InputTCP.Connections))
		for _, connectionsItem49 := range r.InputTCP.Connections {
			pipeline99 := new(string)
			if !connectionsItem49.Pipeline.IsUnknown() && !connectionsItem49.Pipeline.IsNull() {
				*pipeline99 = connectionsItem49.Pipeline.ValueString()
			} else {
				pipeline99 = nil
			}
			var output50 string
			output50 = connectionsItem49.Output.ValueString()

			connections49 = append(connections49, shared.InputTCPConnections{
				Pipeline: pipeline99,
				Output:   output50,
			})
		}
		var pq49 *shared.InputTCPPq
		if r.InputTCP.Pq != nil {
			mode63 := new(shared.InputTCPMode)
			if !r.InputTCP.Pq.Mode.IsUnknown() && !r.InputTCP.Pq.Mode.IsNull() {
				*mode63 = shared.InputTCPMode(r.InputTCP.Pq.Mode.ValueString())
			} else {
				mode63 = nil
			}
			maxBufferSize53 := new(float64)
			if !r.InputTCP.Pq.MaxBufferSize.IsUnknown() && !r.InputTCP.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize53 = r.InputTCP.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize53 = nil
			}
			commitFrequency49 := new(float64)
			if !r.InputTCP.Pq.CommitFrequency.IsUnknown() && !r.InputTCP.Pq.CommitFrequency.IsNull() {
				*commitFrequency49 = r.InputTCP.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency49 = nil
			}
			maxFileSize49 := new(string)
			if !r.InputTCP.Pq.MaxFileSize.IsUnknown() && !r.InputTCP.Pq.MaxFileSize.IsNull() {
				*maxFileSize49 = r.InputTCP.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize49 = nil
			}
			maxSize49 := new(string)
			if !r.InputTCP.Pq.MaxSize.IsUnknown() && !r.InputTCP.Pq.MaxSize.IsNull() {
				*maxSize49 = r.InputTCP.Pq.MaxSize.ValueString()
			} else {
				maxSize49 = nil
			}
			path51 := new(string)
			if !r.InputTCP.Pq.Path.IsUnknown() && !r.InputTCP.Pq.Path.IsNull() {
				*path51 = r.InputTCP.Pq.Path.ValueString()
			} else {
				path51 = nil
			}
			compress56 := new(shared.InputTCPCompression)
			if !r.InputTCP.Pq.Compress.IsUnknown() && !r.InputTCP.Pq.Compress.IsNull() {
				*compress56 = shared.InputTCPCompression(r.InputTCP.Pq.Compress.ValueString())
			} else {
				compress56 = nil
			}
			pq49 = &shared.InputTCPPq{
				Mode:            mode63,
				MaxBufferSize:   maxBufferSize53,
				CommitFrequency: commitFrequency49,
				MaxFileSize:     maxFileSize49,
				MaxSize:         maxSize49,
				Path:            path51,
				Compress:        compress56,
			}
		}
		host23 := new(string)
		if !r.InputTCP.Host.IsUnknown() && !r.InputTCP.Host.IsNull() {
			*host23 = r.InputTCP.Host.ValueString()
		} else {
			host23 = nil
		}
		var port18 float64
		port18 = r.InputTCP.Port.ValueFloat64()

		var tls26 *shared.InputTCPTLSSettingsServerSide
		if r.InputTCP.TLS != nil {
			disabled89 := new(bool)
			if !r.InputTCP.TLS.Disabled.IsUnknown() && !r.InputTCP.TLS.Disabled.IsNull() {
				*disabled89 = r.InputTCP.TLS.Disabled.ValueBool()
			} else {
				disabled89 = nil
			}
			certificateName27 := new(string)
			if !r.InputTCP.TLS.CertificateName.IsUnknown() && !r.InputTCP.TLS.CertificateName.IsNull() {
				*certificateName27 = r.InputTCP.TLS.CertificateName.ValueString()
			} else {
				certificateName27 = nil
			}
			privKeyPath26 := new(string)
			if !r.InputTCP.TLS.PrivKeyPath.IsUnknown() && !r.InputTCP.TLS.PrivKeyPath.IsNull() {
				*privKeyPath26 = r.InputTCP.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath26 = nil
			}
			passphrase25 := new(string)
			if !r.InputTCP.TLS.Passphrase.IsUnknown() && !r.InputTCP.TLS.Passphrase.IsNull() {
				*passphrase25 = r.InputTCP.TLS.Passphrase.ValueString()
			} else {
				passphrase25 = nil
			}
			certPath26 := new(string)
			if !r.InputTCP.TLS.CertPath.IsUnknown() && !r.InputTCP.TLS.CertPath.IsNull() {
				*certPath26 = r.InputTCP.TLS.CertPath.ValueString()
			} else {
				certPath26 = nil
			}
			caPath25 := new(string)
			if !r.InputTCP.TLS.CaPath.IsUnknown() && !r.InputTCP.TLS.CaPath.IsNull() {
				*caPath25 = r.InputTCP.TLS.CaPath.ValueString()
			} else {
				caPath25 = nil
			}
			requestCert19 := new(bool)
			if !r.InputTCP.TLS.RequestCert.IsUnknown() && !r.InputTCP.TLS.RequestCert.IsNull() {
				*requestCert19 = r.InputTCP.TLS.RequestCert.ValueBool()
			} else {
				requestCert19 = nil
			}
			var rejectUnauthorized37 interface{}
			if !r.InputTCP.TLS.RejectUnauthorized.IsUnknown() && !r.InputTCP.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputTCP.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized37)
			}
			var commonNameRegex19 interface{}
			if !r.InputTCP.TLS.CommonNameRegex.IsUnknown() && !r.InputTCP.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputTCP.TLS.CommonNameRegex.ValueString()), &commonNameRegex19)
			}
			minVersion25 := new(shared.InputTCPMinimumTLSVersion)
			if !r.InputTCP.TLS.MinVersion.IsUnknown() && !r.InputTCP.TLS.MinVersion.IsNull() {
				*minVersion25 = shared.InputTCPMinimumTLSVersion(r.InputTCP.TLS.MinVersion.ValueString())
			} else {
				minVersion25 = nil
			}
			maxVersion25 := new(shared.InputTCPMaximumTLSVersion)
			if !r.InputTCP.TLS.MaxVersion.IsUnknown() && !r.InputTCP.TLS.MaxVersion.IsNull() {
				*maxVersion25 = shared.InputTCPMaximumTLSVersion(r.InputTCP.TLS.MaxVersion.ValueString())
			} else {
				maxVersion25 = nil
			}
			tls26 = &shared.InputTCPTLSSettingsServerSide{
				Disabled:           disabled89,
				CertificateName:    certificateName27,
				PrivKeyPath:        privKeyPath26,
				Passphrase:         passphrase25,
				CertPath:           certPath26,
				CaPath:             caPath25,
				RequestCert:        requestCert19,
				RejectUnauthorized: rejectUnauthorized37,
				CommonNameRegex:    commonNameRegex19,
				MinVersion:         minVersion25,
				MaxVersion:         maxVersion25,
			}
		}
		ipWhitelistRegex6 := new(string)
		if !r.InputTCP.IPWhitelistRegex.IsUnknown() && !r.InputTCP.IPWhitelistRegex.IsNull() {
			*ipWhitelistRegex6 = r.InputTCP.IPWhitelistRegex.ValueString()
		} else {
			ipWhitelistRegex6 = nil
		}
		maxActiveCxn7 := new(float64)
		if !r.InputTCP.MaxActiveCxn.IsUnknown() && !r.InputTCP.MaxActiveCxn.IsNull() {
			*maxActiveCxn7 = r.InputTCP.MaxActiveCxn.ValueFloat64()
		} else {
			maxActiveCxn7 = nil
		}
		socketIdleTimeout5 := new(float64)
		if !r.InputTCP.SocketIdleTimeout.IsUnknown() && !r.InputTCP.SocketIdleTimeout.IsNull() {
			*socketIdleTimeout5 = r.InputTCP.SocketIdleTimeout.ValueFloat64()
		} else {
			socketIdleTimeout5 = nil
		}
		socketEndingMaxWait5 := new(float64)
		if !r.InputTCP.SocketEndingMaxWait.IsUnknown() && !r.InputTCP.SocketEndingMaxWait.IsNull() {
			*socketEndingMaxWait5 = r.InputTCP.SocketEndingMaxWait.ValueFloat64()
		} else {
			socketEndingMaxWait5 = nil
		}
		socketMaxLifespan5 := new(float64)
		if !r.InputTCP.SocketMaxLifespan.IsUnknown() && !r.InputTCP.SocketMaxLifespan.IsNull() {
			*socketMaxLifespan5 = r.InputTCP.SocketMaxLifespan.ValueFloat64()
		} else {
			socketMaxLifespan5 = nil
		}
		enableProxyHeader18 := new(bool)
		if !r.InputTCP.EnableProxyHeader.IsUnknown() && !r.InputTCP.EnableProxyHeader.IsNull() {
			*enableProxyHeader18 = r.InputTCP.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader18 = nil
		}
		metadata53 := make([]shared.InputTCPMetadata, 0, len(r.InputTCP.Metadata))
		for _, metadataItem52 := range r.InputTCP.Metadata {
			var name76 string
			name76 = metadataItem52.Name.ValueString()

			var value71 string
			value71 = metadataItem52.Value.ValueString()

			metadata53 = append(metadata53, shared.InputTCPMetadata{
				Name:  name76,
				Value: value71,
			})
		}
		breakerRulesets12 := make([]string, 0, len(r.InputTCP.BreakerRulesets))
		for _, breakerRulesetsItem12 := range r.InputTCP.BreakerRulesets {
			breakerRulesets12 = append(breakerRulesets12, breakerRulesetsItem12.ValueString())
		}
		staleChannelFlushMs12 := new(float64)
		if !r.InputTCP.StaleChannelFlushMs.IsUnknown() && !r.InputTCP.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs12 = r.InputTCP.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs12 = nil
		}
		enableHeader4 := new(bool)
		if !r.InputTCP.EnableHeader.IsUnknown() && !r.InputTCP.EnableHeader.IsNull() {
			*enableHeader4 = r.InputTCP.EnableHeader.ValueBool()
		} else {
			enableHeader4 = nil
		}
		var preprocess4 *shared.InputTCPPreprocess
		if r.InputTCP.Preprocess != nil {
			disabled90 := new(bool)
			if !r.InputTCP.Preprocess.Disabled.IsUnknown() && !r.InputTCP.Preprocess.Disabled.IsNull() {
				*disabled90 = r.InputTCP.Preprocess.Disabled.ValueBool()
			} else {
				disabled90 = nil
			}
			command5 := new(string)
			if !r.InputTCP.Preprocess.Command.IsUnknown() && !r.InputTCP.Preprocess.Command.IsNull() {
				*command5 = r.InputTCP.Preprocess.Command.ValueString()
			} else {
				command5 = nil
			}
			args4 := make([]string, 0, len(r.InputTCP.Preprocess.Args))
			for _, argsItem4 := range r.InputTCP.Preprocess.Args {
				args4 = append(args4, argsItem4.ValueString())
			}
			preprocess4 = &shared.InputTCPPreprocess{
				Disabled: disabled90,
				Command:  command5,
				Args:     args4,
			}
		}
		description58 := new(string)
		if !r.InputTCP.Description.IsUnknown() && !r.InputTCP.Description.IsNull() {
			*description58 = r.InputTCP.Description.ValueString()
		} else {
			description58 = nil
		}
		authType18 := new(shared.InputTCPAuthenticationMethod)
		if !r.InputTCP.AuthType.IsUnknown() && !r.InputTCP.AuthType.IsNull() {
			*authType18 = shared.InputTCPAuthenticationMethod(r.InputTCP.AuthType.ValueString())
		} else {
			authType18 = nil
		}
		inputTCP = &shared.InputTCP{
			Status:              status49,
			ID:                  id49,
			Type:                typeVar53,
			Disabled:            disabled88,
			Pipeline:            pipeline98,
			SendToRoutes:        sendToRoutes49,
			Environment:         environment49,
			PqEnabled:           pqEnabled49,
			Streamtags:          streamtags49,
			Connections:         connections49,
			Pq:                  pq49,
			Host:                host23,
			Port:                port18,
			TLS:                 tls26,
			IPWhitelistRegex:    ipWhitelistRegex6,
			MaxActiveCxn:        maxActiveCxn7,
			SocketIdleTimeout:   socketIdleTimeout5,
			SocketEndingMaxWait: socketEndingMaxWait5,
			SocketMaxLifespan:   socketMaxLifespan5,
			EnableProxyHeader:   enableProxyHeader18,
			Metadata:            metadata53,
			BreakerRulesets:     breakerRulesets12,
			StaleChannelFlushMs: staleChannelFlushMs12,
			EnableHeader:        enableHeader4,
			Preprocess:          preprocess4,
			Description:         description58,
			AuthType:            authType18,
		}
	}
	if inputTCP != nil {
		out = shared.Input{
			InputTCP: inputTCP,
		}
	}
	var inputAppscope *shared.InputAppscope
	if r.InputAppscope != nil {
		var id50 string
		id50 = r.InputAppscope.ID.ValueString()

		typeVar54 := shared.InputAppscopeType(r.InputAppscope.Type.ValueString())
		disabled91 := new(bool)
		if !r.InputAppscope.Disabled.IsUnknown() && !r.InputAppscope.Disabled.IsNull() {
			*disabled91 = r.InputAppscope.Disabled.ValueBool()
		} else {
			disabled91 = nil
		}
		pipeline100 := new(string)
		if !r.InputAppscope.Pipeline.IsUnknown() && !r.InputAppscope.Pipeline.IsNull() {
			*pipeline100 = r.InputAppscope.Pipeline.ValueString()
		} else {
			pipeline100 = nil
		}
		sendToRoutes50 := new(bool)
		if !r.InputAppscope.SendToRoutes.IsUnknown() && !r.InputAppscope.SendToRoutes.IsNull() {
			*sendToRoutes50 = r.InputAppscope.SendToRoutes.ValueBool()
		} else {
			sendToRoutes50 = nil
		}
		environment50 := new(string)
		if !r.InputAppscope.Environment.IsUnknown() && !r.InputAppscope.Environment.IsNull() {
			*environment50 = r.InputAppscope.Environment.ValueString()
		} else {
			environment50 = nil
		}
		pqEnabled50 := new(bool)
		if !r.InputAppscope.PqEnabled.IsUnknown() && !r.InputAppscope.PqEnabled.IsNull() {
			*pqEnabled50 = r.InputAppscope.PqEnabled.ValueBool()
		} else {
			pqEnabled50 = nil
		}
		streamtags50 := make([]string, 0, len(r.InputAppscope.Streamtags))
		for _, streamtagsItem50 := range r.InputAppscope.Streamtags {
			streamtags50 = append(streamtags50, streamtagsItem50.ValueString())
		}
		connections50 := make([]shared.InputAppscopeConnections, 0, len(r.InputAppscope.Connections))
		for _, connectionsItem50 := range r.InputAppscope.Connections {
			pipeline101 := new(string)
			if !connectionsItem50.Pipeline.IsUnknown() && !connectionsItem50.Pipeline.IsNull() {
				*pipeline101 = connectionsItem50.Pipeline.ValueString()
			} else {
				pipeline101 = nil
			}
			var output51 string
			output51 = connectionsItem50.Output.ValueString()

			connections50 = append(connections50, shared.InputAppscopeConnections{
				Pipeline: pipeline101,
				Output:   output51,
			})
		}
		var pq50 *shared.InputAppscopePq
		if r.InputAppscope.Pq != nil {
			mode64 := new(shared.InputAppscopeMode)
			if !r.InputAppscope.Pq.Mode.IsUnknown() && !r.InputAppscope.Pq.Mode.IsNull() {
				*mode64 = shared.InputAppscopeMode(r.InputAppscope.Pq.Mode.ValueString())
			} else {
				mode64 = nil
			}
			maxBufferSize54 := new(float64)
			if !r.InputAppscope.Pq.MaxBufferSize.IsUnknown() && !r.InputAppscope.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize54 = r.InputAppscope.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize54 = nil
			}
			commitFrequency50 := new(float64)
			if !r.InputAppscope.Pq.CommitFrequency.IsUnknown() && !r.InputAppscope.Pq.CommitFrequency.IsNull() {
				*commitFrequency50 = r.InputAppscope.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency50 = nil
			}
			maxFileSize50 := new(string)
			if !r.InputAppscope.Pq.MaxFileSize.IsUnknown() && !r.InputAppscope.Pq.MaxFileSize.IsNull() {
				*maxFileSize50 = r.InputAppscope.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize50 = nil
			}
			maxSize50 := new(string)
			if !r.InputAppscope.Pq.MaxSize.IsUnknown() && !r.InputAppscope.Pq.MaxSize.IsNull() {
				*maxSize50 = r.InputAppscope.Pq.MaxSize.ValueString()
			} else {
				maxSize50 = nil
			}
			path52 := new(string)
			if !r.InputAppscope.Pq.Path.IsUnknown() && !r.InputAppscope.Pq.Path.IsNull() {
				*path52 = r.InputAppscope.Pq.Path.ValueString()
			} else {
				path52 = nil
			}
			compress57 := new(shared.InputAppscopeCompression)
			if !r.InputAppscope.Pq.Compress.IsUnknown() && !r.InputAppscope.Pq.Compress.IsNull() {
				*compress57 = shared.InputAppscopeCompression(r.InputAppscope.Pq.Compress.ValueString())
			} else {
				compress57 = nil
			}
			pq50 = &shared.InputAppscopePq{
				Mode:            mode64,
				MaxBufferSize:   maxBufferSize54,
				CommitFrequency: commitFrequency50,
				MaxFileSize:     maxFileSize50,
				MaxSize:         maxSize50,
				Path:            path52,
				Compress:        compress57,
			}
		}
		ipWhitelistRegex7 := new(string)
		if !r.InputAppscope.IPWhitelistRegex.IsUnknown() && !r.InputAppscope.IPWhitelistRegex.IsNull() {
			*ipWhitelistRegex7 = r.InputAppscope.IPWhitelistRegex.ValueString()
		} else {
			ipWhitelistRegex7 = nil
		}
		maxActiveCxn8 := new(float64)
		if !r.InputAppscope.MaxActiveCxn.IsUnknown() && !r.InputAppscope.MaxActiveCxn.IsNull() {
			*maxActiveCxn8 = r.InputAppscope.MaxActiveCxn.ValueFloat64()
		} else {
			maxActiveCxn8 = nil
		}
		socketIdleTimeout6 := new(float64)
		if !r.InputAppscope.SocketIdleTimeout.IsUnknown() && !r.InputAppscope.SocketIdleTimeout.IsNull() {
			*socketIdleTimeout6 = r.InputAppscope.SocketIdleTimeout.ValueFloat64()
		} else {
			socketIdleTimeout6 = nil
		}
		socketEndingMaxWait6 := new(float64)
		if !r.InputAppscope.SocketEndingMaxWait.IsUnknown() && !r.InputAppscope.SocketEndingMaxWait.IsNull() {
			*socketEndingMaxWait6 = r.InputAppscope.SocketEndingMaxWait.ValueFloat64()
		} else {
			socketEndingMaxWait6 = nil
		}
		socketMaxLifespan6 := new(float64)
		if !r.InputAppscope.SocketMaxLifespan.IsUnknown() && !r.InputAppscope.SocketMaxLifespan.IsNull() {
			*socketMaxLifespan6 = r.InputAppscope.SocketMaxLifespan.ValueFloat64()
		} else {
			socketMaxLifespan6 = nil
		}
		enableProxyHeader19 := new(bool)
		if !r.InputAppscope.EnableProxyHeader.IsUnknown() && !r.InputAppscope.EnableProxyHeader.IsNull() {
			*enableProxyHeader19 = r.InputAppscope.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader19 = nil
		}
		metadata54 := make([]shared.InputAppscopeMetadata, 0, len(r.InputAppscope.Metadata))
		for _, metadataItem53 := range r.InputAppscope.Metadata {
			var name77 string
			name77 = metadataItem53.Name.ValueString()

			var value72 string
			value72 = metadataItem53.Value.ValueString()

			metadata54 = append(metadata54, shared.InputAppscopeMetadata{
				Name:  name77,
				Value: value72,
			})
		}
		breakerRulesets13 := make([]string, 0, len(r.InputAppscope.BreakerRulesets))
		for _, breakerRulesetsItem13 := range r.InputAppscope.BreakerRulesets {
			breakerRulesets13 = append(breakerRulesets13, breakerRulesetsItem13.ValueString())
		}
		staleChannelFlushMs13 := new(float64)
		if !r.InputAppscope.StaleChannelFlushMs.IsUnknown() && !r.InputAppscope.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs13 = r.InputAppscope.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs13 = nil
		}
		enableUnixPath := new(bool)
		if !r.InputAppscope.EnableUnixPath.IsUnknown() && !r.InputAppscope.EnableUnixPath.IsNull() {
			*enableUnixPath = r.InputAppscope.EnableUnixPath.ValueBool()
		} else {
			enableUnixPath = nil
		}
		var filter7 *shared.Filter
		if r.InputAppscope.Filter != nil {
			allow := make([]shared.Allow, 0, len(r.InputAppscope.Filter.Allow))
			for _, allowItem := range r.InputAppscope.Filter.Allow {
				var procname string
				procname = allowItem.Procname.ValueString()

				arg := new(string)
				if !allowItem.Arg.IsUnknown() && !allowItem.Arg.IsNull() {
					*arg = allowItem.Arg.ValueString()
				} else {
					arg = nil
				}
				var config string
				config = allowItem.Config.ValueString()

				allow = append(allow, shared.Allow{
					Procname: procname,
					Arg:      arg,
					Config:   config,
				})
			}
			transportURL := new(string)
			if !r.InputAppscope.Filter.TransportURL.IsUnknown() && !r.InputAppscope.Filter.TransportURL.IsNull() {
				*transportURL = r.InputAppscope.Filter.TransportURL.ValueString()
			} else {
				transportURL = nil
			}
			filter7 = &shared.Filter{
				Allow:        allow,
				TransportURL: transportURL,
			}
		}
		var persistence6 *shared.InputAppscopePersistence
		if r.InputAppscope.Persistence != nil {
			enable17 := new(bool)
			if !r.InputAppscope.Persistence.Enable.IsUnknown() && !r.InputAppscope.Persistence.Enable.IsNull() {
				*enable17 = r.InputAppscope.Persistence.Enable.ValueBool()
			} else {
				enable17 = nil
			}
			timeWindow6 := new(string)
			if !r.InputAppscope.Persistence.TimeWindow.IsUnknown() && !r.InputAppscope.Persistence.TimeWindow.IsNull() {
				*timeWindow6 = r.InputAppscope.Persistence.TimeWindow.ValueString()
			} else {
				timeWindow6 = nil
			}
			maxDataSize6 := new(string)
			if !r.InputAppscope.Persistence.MaxDataSize.IsUnknown() && !r.InputAppscope.Persistence.MaxDataSize.IsNull() {
				*maxDataSize6 = r.InputAppscope.Persistence.MaxDataSize.ValueString()
			} else {
				maxDataSize6 = nil
			}
			maxDataTime6 := new(string)
			if !r.InputAppscope.Persistence.MaxDataTime.IsUnknown() && !r.InputAppscope.Persistence.MaxDataTime.IsNull() {
				*maxDataTime6 = r.InputAppscope.Persistence.MaxDataTime.ValueString()
			} else {
				maxDataTime6 = nil
			}
			compress58 := new(shared.InputAppscopeDataCompressionFormat)
			if !r.InputAppscope.Persistence.Compress.IsUnknown() && !r.InputAppscope.Persistence.Compress.IsNull() {
				*compress58 = shared.InputAppscopeDataCompressionFormat(r.InputAppscope.Persistence.Compress.ValueString())
			} else {
				compress58 = nil
			}
			destPath4 := new(string)
			if !r.InputAppscope.Persistence.DestPath.IsUnknown() && !r.InputAppscope.Persistence.DestPath.IsNull() {
				*destPath4 = r.InputAppscope.Persistence.DestPath.ValueString()
			} else {
				destPath4 = nil
			}
			persistence6 = &shared.InputAppscopePersistence{
				Enable:      enable17,
				TimeWindow:  timeWindow6,
				MaxDataSize: maxDataSize6,
				MaxDataTime: maxDataTime6,
				Compress:    compress58,
				DestPath:    destPath4,
			}
		}
		authType19 := new(shared.InputAppscopeAuthenticationMethod)
		if !r.InputAppscope.AuthType.IsUnknown() && !r.InputAppscope.AuthType.IsNull() {
			*authType19 = shared.InputAppscopeAuthenticationMethod(r.InputAppscope.AuthType.ValueString())
		} else {
			authType19 = nil
		}
		description59 := new(string)
		if !r.InputAppscope.Description.IsUnknown() && !r.InputAppscope.Description.IsNull() {
			*description59 = r.InputAppscope.Description.ValueString()
		} else {
			description59 = nil
		}
		host24 := new(string)
		if !r.InputAppscope.Host.IsUnknown() && !r.InputAppscope.Host.IsNull() {
			*host24 = r.InputAppscope.Host.ValueString()
		} else {
			host24 = nil
		}
		port19 := new(float64)
		if !r.InputAppscope.Port.IsUnknown() && !r.InputAppscope.Port.IsNull() {
			*port19 = r.InputAppscope.Port.ValueFloat64()
		} else {
			port19 = nil
		}
		var tls27 *shared.InputAppscopeTLSSettingsServerSide
		if r.InputAppscope.TLS != nil {
			disabled92 := new(bool)
			if !r.InputAppscope.TLS.Disabled.IsUnknown() && !r.InputAppscope.TLS.Disabled.IsNull() {
				*disabled92 = r.InputAppscope.TLS.Disabled.ValueBool()
			} else {
				disabled92 = nil
			}
			certificateName28 := new(string)
			if !r.InputAppscope.TLS.CertificateName.IsUnknown() && !r.InputAppscope.TLS.CertificateName.IsNull() {
				*certificateName28 = r.InputAppscope.TLS.CertificateName.ValueString()
			} else {
				certificateName28 = nil
			}
			privKeyPath27 := new(string)
			if !r.InputAppscope.TLS.PrivKeyPath.IsUnknown() && !r.InputAppscope.TLS.PrivKeyPath.IsNull() {
				*privKeyPath27 = r.InputAppscope.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath27 = nil
			}
			passphrase26 := new(string)
			if !r.InputAppscope.TLS.Passphrase.IsUnknown() && !r.InputAppscope.TLS.Passphrase.IsNull() {
				*passphrase26 = r.InputAppscope.TLS.Passphrase.ValueString()
			} else {
				passphrase26 = nil
			}
			certPath27 := new(string)
			if !r.InputAppscope.TLS.CertPath.IsUnknown() && !r.InputAppscope.TLS.CertPath.IsNull() {
				*certPath27 = r.InputAppscope.TLS.CertPath.ValueString()
			} else {
				certPath27 = nil
			}
			caPath26 := new(string)
			if !r.InputAppscope.TLS.CaPath.IsUnknown() && !r.InputAppscope.TLS.CaPath.IsNull() {
				*caPath26 = r.InputAppscope.TLS.CaPath.ValueString()
			} else {
				caPath26 = nil
			}
			requestCert20 := new(bool)
			if !r.InputAppscope.TLS.RequestCert.IsUnknown() && !r.InputAppscope.TLS.RequestCert.IsNull() {
				*requestCert20 = r.InputAppscope.TLS.RequestCert.ValueBool()
			} else {
				requestCert20 = nil
			}
			var rejectUnauthorized38 interface{}
			if !r.InputAppscope.TLS.RejectUnauthorized.IsUnknown() && !r.InputAppscope.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputAppscope.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized38)
			}
			var commonNameRegex20 interface{}
			if !r.InputAppscope.TLS.CommonNameRegex.IsUnknown() && !r.InputAppscope.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputAppscope.TLS.CommonNameRegex.ValueString()), &commonNameRegex20)
			}
			minVersion26 := new(shared.InputAppscopeMinimumTLSVersion)
			if !r.InputAppscope.TLS.MinVersion.IsUnknown() && !r.InputAppscope.TLS.MinVersion.IsNull() {
				*minVersion26 = shared.InputAppscopeMinimumTLSVersion(r.InputAppscope.TLS.MinVersion.ValueString())
			} else {
				minVersion26 = nil
			}
			maxVersion26 := new(shared.InputAppscopeMaximumTLSVersion)
			if !r.InputAppscope.TLS.MaxVersion.IsUnknown() && !r.InputAppscope.TLS.MaxVersion.IsNull() {
				*maxVersion26 = shared.InputAppscopeMaximumTLSVersion(r.InputAppscope.TLS.MaxVersion.ValueString())
			} else {
				maxVersion26 = nil
			}
			tls27 = &shared.InputAppscopeTLSSettingsServerSide{
				Disabled:           disabled92,
				CertificateName:    certificateName28,
				PrivKeyPath:        privKeyPath27,
				Passphrase:         passphrase26,
				CertPath:           certPath27,
				CaPath:             caPath26,
				RequestCert:        requestCert20,
				RejectUnauthorized: rejectUnauthorized38,
				CommonNameRegex:    commonNameRegex20,
				MinVersion:         minVersion26,
				MaxVersion:         maxVersion26,
			}
		}
		unixSocketPath := new(string)
		if !r.InputAppscope.UnixSocketPath.IsUnknown() && !r.InputAppscope.UnixSocketPath.IsNull() {
			*unixSocketPath = r.InputAppscope.UnixSocketPath.ValueString()
		} else {
			unixSocketPath = nil
		}
		unixSocketPerms := new(string)
		if !r.InputAppscope.UnixSocketPerms.IsUnknown() && !r.InputAppscope.UnixSocketPerms.IsNull() {
			*unixSocketPerms = r.InputAppscope.UnixSocketPerms.ValueString()
		} else {
			unixSocketPerms = nil
		}
		authToken1 := new(string)
		if !r.InputAppscope.AuthToken.IsUnknown() && !r.InputAppscope.AuthToken.IsNull() {
			*authToken1 = r.InputAppscope.AuthToken.ValueString()
		} else {
			authToken1 = nil
		}
		textSecret13 := new(string)
		if !r.InputAppscope.TextSecret.IsUnknown() && !r.InputAppscope.TextSecret.IsNull() {
			*textSecret13 = r.InputAppscope.TextSecret.ValueString()
		} else {
			textSecret13 = nil
		}
		var status50 *shared.TFStatus
		if r.InputAppscope.Status != nil {
			health50 := shared.Health(r.InputAppscope.Status.Health.ValueString())
			metrics50 := make(map[string]interface{})
			for metricsKey50, metricsValue50 := range r.InputAppscope.Status.Metrics {
				var metricsInst50 interface{}
				_ = json.Unmarshal([]byte(metricsValue50.ValueString()), &metricsInst50)
				metrics50[metricsKey50] = metricsInst50
			}
			var timestamp50 float64
			timestamp50 = r.InputAppscope.Status.Timestamp.ValueFloat64()

			useStatusFromLb50 := new(bool)
			if !r.InputAppscope.Status.UseStatusFromLB.IsUnknown() && !r.InputAppscope.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb50 = r.InputAppscope.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb50 = nil
			}
			status50 = &shared.TFStatus{
				Health:          health50,
				Metrics:         metrics50,
				Timestamp:       timestamp50,
				UseStatusFromLB: useStatusFromLb50,
			}
		}
		inputAppscope = &shared.InputAppscope{
			ID:                  id50,
			Type:                typeVar54,
			Disabled:            disabled91,
			Pipeline:            pipeline100,
			SendToRoutes:        sendToRoutes50,
			Environment:         environment50,
			PqEnabled:           pqEnabled50,
			Streamtags:          streamtags50,
			Connections:         connections50,
			Pq:                  pq50,
			IPWhitelistRegex:    ipWhitelistRegex7,
			MaxActiveCxn:        maxActiveCxn8,
			SocketIdleTimeout:   socketIdleTimeout6,
			SocketEndingMaxWait: socketEndingMaxWait6,
			SocketMaxLifespan:   socketMaxLifespan6,
			EnableProxyHeader:   enableProxyHeader19,
			Metadata:            metadata54,
			BreakerRulesets:     breakerRulesets13,
			StaleChannelFlushMs: staleChannelFlushMs13,
			EnableUnixPath:      enableUnixPath,
			Filter:              filter7,
			Persistence:         persistence6,
			AuthType:            authType19,
			Description:         description59,
			Host:                host24,
			Port:                port19,
			TLS:                 tls27,
			UnixSocketPath:      unixSocketPath,
			UnixSocketPerms:     unixSocketPerms,
			AuthToken:           authToken1,
			TextSecret:          textSecret13,
			Status:              status50,
		}
	}
	if inputAppscope != nil {
		out = shared.Input{
			InputAppscope: inputAppscope,
		}
	}
	var inputWef *shared.InputWef
	if r.InputWef != nil {
		id51 := new(string)
		if !r.InputWef.ID.IsUnknown() && !r.InputWef.ID.IsNull() {
			*id51 = r.InputWef.ID.ValueString()
		} else {
			id51 = nil
		}
		typeVar55 := new(shared.InputWefType)
		if !r.InputWef.Type.IsUnknown() && !r.InputWef.Type.IsNull() {
			*typeVar55 = shared.InputWefType(r.InputWef.Type.ValueString())
		} else {
			typeVar55 = nil
		}
		disabled93 := new(bool)
		if !r.InputWef.Disabled.IsUnknown() && !r.InputWef.Disabled.IsNull() {
			*disabled93 = r.InputWef.Disabled.ValueBool()
		} else {
			disabled93 = nil
		}
		pipeline102 := new(string)
		if !r.InputWef.Pipeline.IsUnknown() && !r.InputWef.Pipeline.IsNull() {
			*pipeline102 = r.InputWef.Pipeline.ValueString()
		} else {
			pipeline102 = nil
		}
		sendToRoutes51 := new(bool)
		if !r.InputWef.SendToRoutes.IsUnknown() && !r.InputWef.SendToRoutes.IsNull() {
			*sendToRoutes51 = r.InputWef.SendToRoutes.ValueBool()
		} else {
			sendToRoutes51 = nil
		}
		environment51 := new(string)
		if !r.InputWef.Environment.IsUnknown() && !r.InputWef.Environment.IsNull() {
			*environment51 = r.InputWef.Environment.ValueString()
		} else {
			environment51 = nil
		}
		pqEnabled51 := new(bool)
		if !r.InputWef.PqEnabled.IsUnknown() && !r.InputWef.PqEnabled.IsNull() {
			*pqEnabled51 = r.InputWef.PqEnabled.ValueBool()
		} else {
			pqEnabled51 = nil
		}
		streamtags51 := make([]string, 0, len(r.InputWef.Streamtags))
		for _, streamtagsItem51 := range r.InputWef.Streamtags {
			streamtags51 = append(streamtags51, streamtagsItem51.ValueString())
		}
		connections51 := make([]shared.InputWefConnections, 0, len(r.InputWef.Connections))
		for _, connectionsItem51 := range r.InputWef.Connections {
			pipeline103 := new(string)
			if !connectionsItem51.Pipeline.IsUnknown() && !connectionsItem51.Pipeline.IsNull() {
				*pipeline103 = connectionsItem51.Pipeline.ValueString()
			} else {
				pipeline103 = nil
			}
			var output52 string
			output52 = connectionsItem51.Output.ValueString()

			connections51 = append(connections51, shared.InputWefConnections{
				Pipeline: pipeline103,
				Output:   output52,
			})
		}
		var pq51 *shared.InputWefPq
		if r.InputWef.Pq != nil {
			mode65 := new(shared.InputWefMode)
			if !r.InputWef.Pq.Mode.IsUnknown() && !r.InputWef.Pq.Mode.IsNull() {
				*mode65 = shared.InputWefMode(r.InputWef.Pq.Mode.ValueString())
			} else {
				mode65 = nil
			}
			maxBufferSize55 := new(float64)
			if !r.InputWef.Pq.MaxBufferSize.IsUnknown() && !r.InputWef.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize55 = r.InputWef.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize55 = nil
			}
			commitFrequency51 := new(float64)
			if !r.InputWef.Pq.CommitFrequency.IsUnknown() && !r.InputWef.Pq.CommitFrequency.IsNull() {
				*commitFrequency51 = r.InputWef.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency51 = nil
			}
			maxFileSize51 := new(string)
			if !r.InputWef.Pq.MaxFileSize.IsUnknown() && !r.InputWef.Pq.MaxFileSize.IsNull() {
				*maxFileSize51 = r.InputWef.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize51 = nil
			}
			maxSize51 := new(string)
			if !r.InputWef.Pq.MaxSize.IsUnknown() && !r.InputWef.Pq.MaxSize.IsNull() {
				*maxSize51 = r.InputWef.Pq.MaxSize.ValueString()
			} else {
				maxSize51 = nil
			}
			path53 := new(string)
			if !r.InputWef.Pq.Path.IsUnknown() && !r.InputWef.Pq.Path.IsNull() {
				*path53 = r.InputWef.Pq.Path.ValueString()
			} else {
				path53 = nil
			}
			compress59 := new(shared.InputWefCompression)
			if !r.InputWef.Pq.Compress.IsUnknown() && !r.InputWef.Pq.Compress.IsNull() {
				*compress59 = shared.InputWefCompression(r.InputWef.Pq.Compress.ValueString())
			} else {
				compress59 = nil
			}
			pq51 = &shared.InputWefPq{
				Mode:            mode65,
				MaxBufferSize:   maxBufferSize55,
				CommitFrequency: commitFrequency51,
				MaxFileSize:     maxFileSize51,
				MaxSize:         maxSize51,
				Path:            path53,
				Compress:        compress59,
			}
		}
		host25 := new(string)
		if !r.InputWef.Host.IsUnknown() && !r.InputWef.Host.IsNull() {
			*host25 = r.InputWef.Host.ValueString()
		} else {
			host25 = nil
		}
		port20 := new(float64)
		if !r.InputWef.Port.IsUnknown() && !r.InputWef.Port.IsNull() {
			*port20 = r.InputWef.Port.ValueFloat64()
		} else {
			port20 = nil
		}
		authMethod := new(shared.InputWefAuthenticationMethod)
		if !r.InputWef.AuthMethod.IsUnknown() && !r.InputWef.AuthMethod.IsNull() {
			*authMethod = shared.InputWefAuthenticationMethod(r.InputWef.AuthMethod.ValueString())
		} else {
			authMethod = nil
		}
		var tls28 *shared.MTLSSettings
		if r.InputWef.TLS != nil {
			disabled94 := new(bool)
			if !r.InputWef.TLS.Disabled.IsUnknown() && !r.InputWef.TLS.Disabled.IsNull() {
				*disabled94 = r.InputWef.TLS.Disabled.ValueBool()
			} else {
				disabled94 = nil
			}
			rejectUnauthorized39 := new(bool)
			if !r.InputWef.TLS.RejectUnauthorized.IsUnknown() && !r.InputWef.TLS.RejectUnauthorized.IsNull() {
				*rejectUnauthorized39 = r.InputWef.TLS.RejectUnauthorized.ValueBool()
			} else {
				rejectUnauthorized39 = nil
			}
			requestCert21 := new(bool)
			if !r.InputWef.TLS.RequestCert.IsUnknown() && !r.InputWef.TLS.RequestCert.IsNull() {
				*requestCert21 = r.InputWef.TLS.RequestCert.ValueBool()
			} else {
				requestCert21 = nil
			}
			certificateName29 := new(string)
			if !r.InputWef.TLS.CertificateName.IsUnknown() && !r.InputWef.TLS.CertificateName.IsNull() {
				*certificateName29 = r.InputWef.TLS.CertificateName.ValueString()
			} else {
				certificateName29 = nil
			}
			var privKeyPath28 string
			privKeyPath28 = r.InputWef.TLS.PrivKeyPath.ValueString()

			passphrase27 := new(string)
			if !r.InputWef.TLS.Passphrase.IsUnknown() && !r.InputWef.TLS.Passphrase.IsNull() {
				*passphrase27 = r.InputWef.TLS.Passphrase.ValueString()
			} else {
				passphrase27 = nil
			}
			var certPath28 string
			certPath28 = r.InputWef.TLS.CertPath.ValueString()

			var caPath27 string
			caPath27 = r.InputWef.TLS.CaPath.ValueString()

			commonNameRegex21 := new(string)
			if !r.InputWef.TLS.CommonNameRegex.IsUnknown() && !r.InputWef.TLS.CommonNameRegex.IsNull() {
				*commonNameRegex21 = r.InputWef.TLS.CommonNameRegex.ValueString()
			} else {
				commonNameRegex21 = nil
			}
			minVersion27 := new(shared.InputWefMinimumTLSVersion)
			if !r.InputWef.TLS.MinVersion.IsUnknown() && !r.InputWef.TLS.MinVersion.IsNull() {
				*minVersion27 = shared.InputWefMinimumTLSVersion(r.InputWef.TLS.MinVersion.ValueString())
			} else {
				minVersion27 = nil
			}
			maxVersion27 := new(shared.InputWefMaximumTLSVersion)
			if !r.InputWef.TLS.MaxVersion.IsUnknown() && !r.InputWef.TLS.MaxVersion.IsNull() {
				*maxVersion27 = shared.InputWefMaximumTLSVersion(r.InputWef.TLS.MaxVersion.ValueString())
			} else {
				maxVersion27 = nil
			}
			ocspCheck := new(bool)
			if !r.InputWef.TLS.OcspCheck.IsUnknown() && !r.InputWef.TLS.OcspCheck.IsNull() {
				*ocspCheck = r.InputWef.TLS.OcspCheck.ValueBool()
			} else {
				ocspCheck = nil
			}
			var keytab interface{}
			if !r.InputWef.TLS.Keytab.IsUnknown() && !r.InputWef.TLS.Keytab.IsNull() {
				_ = json.Unmarshal([]byte(r.InputWef.TLS.Keytab.ValueString()), &keytab)
			}
			var principal interface{}
			if !r.InputWef.TLS.Principal.IsUnknown() && !r.InputWef.TLS.Principal.IsNull() {
				_ = json.Unmarshal([]byte(r.InputWef.TLS.Principal.ValueString()), &principal)
			}
			ocspCheckFailClose := new(bool)
			if !r.InputWef.TLS.OcspCheckFailClose.IsUnknown() && !r.InputWef.TLS.OcspCheckFailClose.IsNull() {
				*ocspCheckFailClose = r.InputWef.TLS.OcspCheckFailClose.ValueBool()
			} else {
				ocspCheckFailClose = nil
			}
			tls28 = &shared.MTLSSettings{
				Disabled:           disabled94,
				RejectUnauthorized: rejectUnauthorized39,
				RequestCert:        requestCert21,
				CertificateName:    certificateName29,
				PrivKeyPath:        privKeyPath28,
				Passphrase:         passphrase27,
				CertPath:           certPath28,
				CaPath:             caPath27,
				CommonNameRegex:    commonNameRegex21,
				MinVersion:         minVersion27,
				MaxVersion:         maxVersion27,
				OcspCheck:          ocspCheck,
				Keytab:             keytab,
				Principal:          principal,
				OcspCheckFailClose: ocspCheckFailClose,
			}
		}
		maxActiveReq12 := new(float64)
		if !r.InputWef.MaxActiveReq.IsUnknown() && !r.InputWef.MaxActiveReq.IsNull() {
			*maxActiveReq12 = r.InputWef.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq12 = nil
		}
		maxRequestsPerSocket12 := new(int64)
		if !r.InputWef.MaxRequestsPerSocket.IsUnknown() && !r.InputWef.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket12 = r.InputWef.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket12 = nil
		}
		enableProxyHeader20 := new(bool)
		if !r.InputWef.EnableProxyHeader.IsUnknown() && !r.InputWef.EnableProxyHeader.IsNull() {
			*enableProxyHeader20 = r.InputWef.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader20 = nil
		}
		captureHeaders12 := new(bool)
		if !r.InputWef.CaptureHeaders.IsUnknown() && !r.InputWef.CaptureHeaders.IsNull() {
			*captureHeaders12 = r.InputWef.CaptureHeaders.ValueBool()
		} else {
			captureHeaders12 = nil
		}
		keepAliveTimeout12 := new(float64)
		if !r.InputWef.KeepAliveTimeout.IsUnknown() && !r.InputWef.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout12 = r.InputWef.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout12 = nil
		}
		enableHealthCheck12 := new(bool)
		if !r.InputWef.EnableHealthCheck.IsUnknown() && !r.InputWef.EnableHealthCheck.IsNull() {
			*enableHealthCheck12 = r.InputWef.EnableHealthCheck.ValueBool()
		} else {
			enableHealthCheck12 = nil
		}
		ipAllowlistRegex12 := new(string)
		if !r.InputWef.IPAllowlistRegex.IsUnknown() && !r.InputWef.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex12 = r.InputWef.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex12 = nil
		}
		ipDenylistRegex12 := new(string)
		if !r.InputWef.IPDenylistRegex.IsUnknown() && !r.InputWef.IPDenylistRegex.IsNull() {
			*ipDenylistRegex12 = r.InputWef.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex12 = nil
		}
		socketTimeout15 := new(float64)
		if !r.InputWef.SocketTimeout.IsUnknown() && !r.InputWef.SocketTimeout.IsNull() {
			*socketTimeout15 = r.InputWef.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout15 = nil
		}
		caFingerprint := new(string)
		if !r.InputWef.CaFingerprint.IsUnknown() && !r.InputWef.CaFingerprint.IsNull() {
			*caFingerprint = r.InputWef.CaFingerprint.ValueString()
		} else {
			caFingerprint = nil
		}
		keytab1 := new(string)
		if !r.InputWef.Keytab.IsUnknown() && !r.InputWef.Keytab.IsNull() {
			*keytab1 = r.InputWef.Keytab.ValueString()
		} else {
			keytab1 = nil
		}
		principal1 := new(string)
		if !r.InputWef.Principal.IsUnknown() && !r.InputWef.Principal.IsNull() {
			*principal1 = r.InputWef.Principal.ValueString()
		} else {
			principal1 = nil
		}
		allowMachineIDMismatch := new(bool)
		if !r.InputWef.AllowMachineIDMismatch.IsUnknown() && !r.InputWef.AllowMachineIDMismatch.IsNull() {
			*allowMachineIDMismatch = r.InputWef.AllowMachineIDMismatch.ValueBool()
		} else {
			allowMachineIDMismatch = nil
		}
		subscriptions := make([]shared.Subscriptions, 0, len(r.InputWef.Subscriptions))
		for _, subscriptionsItem := range r.InputWef.Subscriptions {
			var subscriptionName1 string
			subscriptionName1 = subscriptionsItem.SubscriptionName.ValueString()

			version := new(string)
			if !subscriptionsItem.Version.IsUnknown() && !subscriptionsItem.Version.IsNull() {
				*version = subscriptionsItem.Version.ValueString()
			} else {
				version = nil
			}
			contentFormat := new(shared.InputWefFormat)
			if !subscriptionsItem.ContentFormat.IsUnknown() && !subscriptionsItem.ContentFormat.IsNull() {
				*contentFormat = shared.InputWefFormat(subscriptionsItem.ContentFormat.ValueString())
			} else {
				contentFormat = nil
			}
			heartbeatInterval4 := new(float64)
			if !subscriptionsItem.HeartbeatInterval.IsUnknown() && !subscriptionsItem.HeartbeatInterval.IsNull() {
				*heartbeatInterval4 = subscriptionsItem.HeartbeatInterval.ValueFloat64()
			} else {
				heartbeatInterval4 = nil
			}
			batchTimeout := new(float64)
			if !subscriptionsItem.BatchTimeout.IsUnknown() && !subscriptionsItem.BatchTimeout.IsNull() {
				*batchTimeout = subscriptionsItem.BatchTimeout.ValueFloat64()
			} else {
				batchTimeout = nil
			}
			readExistingEvents := new(bool)
			if !subscriptionsItem.ReadExistingEvents.IsUnknown() && !subscriptionsItem.ReadExistingEvents.IsNull() {
				*readExistingEvents = subscriptionsItem.ReadExistingEvents.ValueBool()
			} else {
				readExistingEvents = nil
			}
			sendBookmarks := new(bool)
			if !subscriptionsItem.SendBookmarks.IsUnknown() && !subscriptionsItem.SendBookmarks.IsNull() {
				*sendBookmarks = subscriptionsItem.SendBookmarks.ValueBool()
			} else {
				sendBookmarks = nil
			}
			compress60 := new(bool)
			if !subscriptionsItem.Compress.IsUnknown() && !subscriptionsItem.Compress.IsNull() {
				*compress60 = subscriptionsItem.Compress.ValueBool()
			} else {
				compress60 = nil
			}
			targets1 := make([]string, 0, len(subscriptionsItem.Targets))
			for _, targetsItem1 := range subscriptionsItem.Targets {
				targets1 = append(targets1, targetsItem1.ValueString())
			}
			locale := new(string)
			if !subscriptionsItem.Locale.IsUnknown() && !subscriptionsItem.Locale.IsNull() {
				*locale = subscriptionsItem.Locale.ValueString()
			} else {
				locale = nil
			}
			querySelector := new(shared.QueryBuilderMode)
			if !subscriptionsItem.QuerySelector.IsUnknown() && !subscriptionsItem.QuerySelector.IsNull() {
				*querySelector = shared.QueryBuilderMode(subscriptionsItem.QuerySelector.ValueString())
			} else {
				querySelector = nil
			}
			metadata55 := make([]shared.InputWefInputMetadata, 0, len(subscriptionsItem.Metadata))
			for _, metadataItem54 := range subscriptionsItem.Metadata {
				var name78 string
				name78 = metadataItem54.Name.ValueString()

				var value73 string
				value73 = metadataItem54.Value.ValueString()

				metadata55 = append(metadata55, shared.InputWefInputMetadata{
					Name:  name78,
					Value: value73,
				})
			}
			subscriptions = append(subscriptions, shared.Subscriptions{
				SubscriptionName:   subscriptionName1,
				Version:            version,
				ContentFormat:      contentFormat,
				HeartbeatInterval:  heartbeatInterval4,
				BatchTimeout:       batchTimeout,
				ReadExistingEvents: readExistingEvents,
				SendBookmarks:      sendBookmarks,
				Compress:           compress60,
				Targets:            targets1,
				Locale:             locale,
				QuerySelector:      querySelector,
				Metadata:           metadata55,
			})
		}
		metadata56 := make([]shared.InputWefMetadata, 0, len(r.InputWef.Metadata))
		for _, metadataItem55 := range r.InputWef.Metadata {
			var name79 string
			name79 = metadataItem55.Name.ValueString()

			var value74 string
			value74 = metadataItem55.Value.ValueString()

			metadata56 = append(metadata56, shared.InputWefMetadata{
				Name:  name79,
				Value: value74,
			})
		}
		description60 := new(string)
		if !r.InputWef.Description.IsUnknown() && !r.InputWef.Description.IsNull() {
			*description60 = r.InputWef.Description.ValueString()
		} else {
			description60 = nil
		}
		var status51 *shared.TFStatus
		if r.InputWef.Status != nil {
			health51 := shared.Health(r.InputWef.Status.Health.ValueString())
			metrics51 := make(map[string]interface{})
			for metricsKey51, metricsValue51 := range r.InputWef.Status.Metrics {
				var metricsInst51 interface{}
				_ = json.Unmarshal([]byte(metricsValue51.ValueString()), &metricsInst51)
				metrics51[metricsKey51] = metricsInst51
			}
			var timestamp51 float64
			timestamp51 = r.InputWef.Status.Timestamp.ValueFloat64()

			useStatusFromLb51 := new(bool)
			if !r.InputWef.Status.UseStatusFromLB.IsUnknown() && !r.InputWef.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb51 = r.InputWef.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb51 = nil
			}
			status51 = &shared.TFStatus{
				Health:          health51,
				Metrics:         metrics51,
				Timestamp:       timestamp51,
				UseStatusFromLB: useStatusFromLb51,
			}
		}
		inputWef = &shared.InputWef{
			ID:                     id51,
			Type:                   typeVar55,
			Disabled:               disabled93,
			Pipeline:               pipeline102,
			SendToRoutes:           sendToRoutes51,
			Environment:            environment51,
			PqEnabled:              pqEnabled51,
			Streamtags:             streamtags51,
			Connections:            connections51,
			Pq:                     pq51,
			Host:                   host25,
			Port:                   port20,
			AuthMethod:             authMethod,
			TLS:                    tls28,
			MaxActiveReq:           maxActiveReq12,
			MaxRequestsPerSocket:   maxRequestsPerSocket12,
			EnableProxyHeader:      enableProxyHeader20,
			CaptureHeaders:         captureHeaders12,
			KeepAliveTimeout:       keepAliveTimeout12,
			EnableHealthCheck:      enableHealthCheck12,
			IPAllowlistRegex:       ipAllowlistRegex12,
			IPDenylistRegex:        ipDenylistRegex12,
			SocketTimeout:          socketTimeout15,
			CaFingerprint:          caFingerprint,
			Keytab:                 keytab1,
			Principal:              principal1,
			AllowMachineIDMismatch: allowMachineIDMismatch,
			Subscriptions:          subscriptions,
			Metadata:               metadata56,
			Description:            description60,
			Status:                 status51,
		}
	}
	if inputWef != nil {
		out = shared.Input{
			InputWef: inputWef,
		}
	}
	var inputWinEventLogs *shared.InputWinEventLogs
	if r.InputWinEventLogs != nil {
		id52 := new(string)
		if !r.InputWinEventLogs.ID.IsUnknown() && !r.InputWinEventLogs.ID.IsNull() {
			*id52 = r.InputWinEventLogs.ID.ValueString()
		} else {
			id52 = nil
		}
		typeVar56 := shared.InputWinEventLogsType(r.InputWinEventLogs.Type.ValueString())
		disabled95 := new(bool)
		if !r.InputWinEventLogs.Disabled.IsUnknown() && !r.InputWinEventLogs.Disabled.IsNull() {
			*disabled95 = r.InputWinEventLogs.Disabled.ValueBool()
		} else {
			disabled95 = nil
		}
		pipeline104 := new(string)
		if !r.InputWinEventLogs.Pipeline.IsUnknown() && !r.InputWinEventLogs.Pipeline.IsNull() {
			*pipeline104 = r.InputWinEventLogs.Pipeline.ValueString()
		} else {
			pipeline104 = nil
		}
		sendToRoutes52 := new(bool)
		if !r.InputWinEventLogs.SendToRoutes.IsUnknown() && !r.InputWinEventLogs.SendToRoutes.IsNull() {
			*sendToRoutes52 = r.InputWinEventLogs.SendToRoutes.ValueBool()
		} else {
			sendToRoutes52 = nil
		}
		environment52 := new(string)
		if !r.InputWinEventLogs.Environment.IsUnknown() && !r.InputWinEventLogs.Environment.IsNull() {
			*environment52 = r.InputWinEventLogs.Environment.ValueString()
		} else {
			environment52 = nil
		}
		pqEnabled52 := new(bool)
		if !r.InputWinEventLogs.PqEnabled.IsUnknown() && !r.InputWinEventLogs.PqEnabled.IsNull() {
			*pqEnabled52 = r.InputWinEventLogs.PqEnabled.ValueBool()
		} else {
			pqEnabled52 = nil
		}
		streamtags52 := make([]string, 0, len(r.InputWinEventLogs.Streamtags))
		for _, streamtagsItem52 := range r.InputWinEventLogs.Streamtags {
			streamtags52 = append(streamtags52, streamtagsItem52.ValueString())
		}
		connections52 := make([]shared.InputWinEventLogsConnections, 0, len(r.InputWinEventLogs.Connections))
		for _, connectionsItem52 := range r.InputWinEventLogs.Connections {
			pipeline105 := new(string)
			if !connectionsItem52.Pipeline.IsUnknown() && !connectionsItem52.Pipeline.IsNull() {
				*pipeline105 = connectionsItem52.Pipeline.ValueString()
			} else {
				pipeline105 = nil
			}
			var output53 string
			output53 = connectionsItem52.Output.ValueString()

			connections52 = append(connections52, shared.InputWinEventLogsConnections{
				Pipeline: pipeline105,
				Output:   output53,
			})
		}
		var pq52 *shared.InputWinEventLogsPq
		if r.InputWinEventLogs.Pq != nil {
			mode66 := new(shared.InputWinEventLogsMode)
			if !r.InputWinEventLogs.Pq.Mode.IsUnknown() && !r.InputWinEventLogs.Pq.Mode.IsNull() {
				*mode66 = shared.InputWinEventLogsMode(r.InputWinEventLogs.Pq.Mode.ValueString())
			} else {
				mode66 = nil
			}
			maxBufferSize56 := new(float64)
			if !r.InputWinEventLogs.Pq.MaxBufferSize.IsUnknown() && !r.InputWinEventLogs.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize56 = r.InputWinEventLogs.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize56 = nil
			}
			commitFrequency52 := new(float64)
			if !r.InputWinEventLogs.Pq.CommitFrequency.IsUnknown() && !r.InputWinEventLogs.Pq.CommitFrequency.IsNull() {
				*commitFrequency52 = r.InputWinEventLogs.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency52 = nil
			}
			maxFileSize52 := new(string)
			if !r.InputWinEventLogs.Pq.MaxFileSize.IsUnknown() && !r.InputWinEventLogs.Pq.MaxFileSize.IsNull() {
				*maxFileSize52 = r.InputWinEventLogs.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize52 = nil
			}
			maxSize52 := new(string)
			if !r.InputWinEventLogs.Pq.MaxSize.IsUnknown() && !r.InputWinEventLogs.Pq.MaxSize.IsNull() {
				*maxSize52 = r.InputWinEventLogs.Pq.MaxSize.ValueString()
			} else {
				maxSize52 = nil
			}
			path54 := new(string)
			if !r.InputWinEventLogs.Pq.Path.IsUnknown() && !r.InputWinEventLogs.Pq.Path.IsNull() {
				*path54 = r.InputWinEventLogs.Pq.Path.ValueString()
			} else {
				path54 = nil
			}
			compress61 := new(shared.InputWinEventLogsCompression)
			if !r.InputWinEventLogs.Pq.Compress.IsUnknown() && !r.InputWinEventLogs.Pq.Compress.IsNull() {
				*compress61 = shared.InputWinEventLogsCompression(r.InputWinEventLogs.Pq.Compress.ValueString())
			} else {
				compress61 = nil
			}
			pq52 = &shared.InputWinEventLogsPq{
				Mode:            mode66,
				MaxBufferSize:   maxBufferSize56,
				CommitFrequency: commitFrequency52,
				MaxFileSize:     maxFileSize52,
				MaxSize:         maxSize52,
				Path:            path54,
				Compress:        compress61,
			}
		}
		logNames := make([]string, 0, len(r.InputWinEventLogs.LogNames))
		for _, logNamesItem := range r.InputWinEventLogs.LogNames {
			logNames = append(logNames, logNamesItem.ValueString())
		}
		readMode := new(shared.ReadMode)
		if !r.InputWinEventLogs.ReadMode.IsUnknown() && !r.InputWinEventLogs.ReadMode.IsNull() {
			*readMode = shared.ReadMode(r.InputWinEventLogs.ReadMode.ValueString())
		} else {
			readMode = nil
		}
		eventFormat := new(shared.EventFormat)
		if !r.InputWinEventLogs.EventFormat.IsUnknown() && !r.InputWinEventLogs.EventFormat.IsNull() {
			*eventFormat = shared.EventFormat(r.InputWinEventLogs.EventFormat.ValueString())
		} else {
			eventFormat = nil
		}
		disableNativeModule1 := new(bool)
		if !r.InputWinEventLogs.DisableNativeModule.IsUnknown() && !r.InputWinEventLogs.DisableNativeModule.IsNull() {
			*disableNativeModule1 = r.InputWinEventLogs.DisableNativeModule.ValueBool()
		} else {
			disableNativeModule1 = nil
		}
		interval16 := new(float64)
		if !r.InputWinEventLogs.Interval.IsUnknown() && !r.InputWinEventLogs.Interval.IsNull() {
			*interval16 = r.InputWinEventLogs.Interval.ValueFloat64()
		} else {
			interval16 = nil
		}
		batchSize := new(float64)
		if !r.InputWinEventLogs.BatchSize.IsUnknown() && !r.InputWinEventLogs.BatchSize.IsNull() {
			*batchSize = r.InputWinEventLogs.BatchSize.ValueFloat64()
		} else {
			batchSize = nil
		}
		metadata57 := make([]shared.InputWinEventLogsMetadata, 0, len(r.InputWinEventLogs.Metadata))
		for _, metadataItem56 := range r.InputWinEventLogs.Metadata {
			var name80 string
			name80 = metadataItem56.Name.ValueString()

			var value75 string
			value75 = metadataItem56.Value.ValueString()

			metadata57 = append(metadata57, shared.InputWinEventLogsMetadata{
				Name:  name80,
				Value: value75,
			})
		}
		maxEventBytes := new(float64)
		if !r.InputWinEventLogs.MaxEventBytes.IsUnknown() && !r.InputWinEventLogs.MaxEventBytes.IsNull() {
			*maxEventBytes = r.InputWinEventLogs.MaxEventBytes.ValueFloat64()
		} else {
			maxEventBytes = nil
		}
		description61 := new(string)
		if !r.InputWinEventLogs.Description.IsUnknown() && !r.InputWinEventLogs.Description.IsNull() {
			*description61 = r.InputWinEventLogs.Description.ValueString()
		} else {
			description61 = nil
		}
		var status52 *shared.TFStatus
		if r.InputWinEventLogs.Status != nil {
			health52 := shared.Health(r.InputWinEventLogs.Status.Health.ValueString())
			metrics52 := make(map[string]interface{})
			for metricsKey52, metricsValue52 := range r.InputWinEventLogs.Status.Metrics {
				var metricsInst52 interface{}
				_ = json.Unmarshal([]byte(metricsValue52.ValueString()), &metricsInst52)
				metrics52[metricsKey52] = metricsInst52
			}
			var timestamp52 float64
			timestamp52 = r.InputWinEventLogs.Status.Timestamp.ValueFloat64()

			useStatusFromLb52 := new(bool)
			if !r.InputWinEventLogs.Status.UseStatusFromLB.IsUnknown() && !r.InputWinEventLogs.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb52 = r.InputWinEventLogs.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb52 = nil
			}
			status52 = &shared.TFStatus{
				Health:          health52,
				Metrics:         metrics52,
				Timestamp:       timestamp52,
				UseStatusFromLB: useStatusFromLb52,
			}
		}
		inputWinEventLogs = &shared.InputWinEventLogs{
			ID:                  id52,
			Type:                typeVar56,
			Disabled:            disabled95,
			Pipeline:            pipeline104,
			SendToRoutes:        sendToRoutes52,
			Environment:         environment52,
			PqEnabled:           pqEnabled52,
			Streamtags:          streamtags52,
			Connections:         connections52,
			Pq:                  pq52,
			LogNames:            logNames,
			ReadMode:            readMode,
			EventFormat:         eventFormat,
			DisableNativeModule: disableNativeModule1,
			Interval:            interval16,
			BatchSize:           batchSize,
			Metadata:            metadata57,
			MaxEventBytes:       maxEventBytes,
			Description:         description61,
			Status:              status52,
		}
	}
	if inputWinEventLogs != nil {
		out = shared.Input{
			InputWinEventLogs: inputWinEventLogs,
		}
	}
	var inputRawUDP *shared.InputRawUDP
	if r.InputRawUDP != nil {
		id53 := new(string)
		if !r.InputRawUDP.ID.IsUnknown() && !r.InputRawUDP.ID.IsNull() {
			*id53 = r.InputRawUDP.ID.ValueString()
		} else {
			id53 = nil
		}
		typeVar57 := new(shared.InputRawUDPType)
		if !r.InputRawUDP.Type.IsUnknown() && !r.InputRawUDP.Type.IsNull() {
			*typeVar57 = shared.InputRawUDPType(r.InputRawUDP.Type.ValueString())
		} else {
			typeVar57 = nil
		}
		disabled96 := new(bool)
		if !r.InputRawUDP.Disabled.IsUnknown() && !r.InputRawUDP.Disabled.IsNull() {
			*disabled96 = r.InputRawUDP.Disabled.ValueBool()
		} else {
			disabled96 = nil
		}
		pipeline106 := new(string)
		if !r.InputRawUDP.Pipeline.IsUnknown() && !r.InputRawUDP.Pipeline.IsNull() {
			*pipeline106 = r.InputRawUDP.Pipeline.ValueString()
		} else {
			pipeline106 = nil
		}
		sendToRoutes53 := new(bool)
		if !r.InputRawUDP.SendToRoutes.IsUnknown() && !r.InputRawUDP.SendToRoutes.IsNull() {
			*sendToRoutes53 = r.InputRawUDP.SendToRoutes.ValueBool()
		} else {
			sendToRoutes53 = nil
		}
		environment53 := new(string)
		if !r.InputRawUDP.Environment.IsUnknown() && !r.InputRawUDP.Environment.IsNull() {
			*environment53 = r.InputRawUDP.Environment.ValueString()
		} else {
			environment53 = nil
		}
		pqEnabled53 := new(bool)
		if !r.InputRawUDP.PqEnabled.IsUnknown() && !r.InputRawUDP.PqEnabled.IsNull() {
			*pqEnabled53 = r.InputRawUDP.PqEnabled.ValueBool()
		} else {
			pqEnabled53 = nil
		}
		streamtags53 := make([]string, 0, len(r.InputRawUDP.Streamtags))
		for _, streamtagsItem53 := range r.InputRawUDP.Streamtags {
			streamtags53 = append(streamtags53, streamtagsItem53.ValueString())
		}
		connections53 := make([]shared.InputRawUDPConnections, 0, len(r.InputRawUDP.Connections))
		for _, connectionsItem53 := range r.InputRawUDP.Connections {
			pipeline107 := new(string)
			if !connectionsItem53.Pipeline.IsUnknown() && !connectionsItem53.Pipeline.IsNull() {
				*pipeline107 = connectionsItem53.Pipeline.ValueString()
			} else {
				pipeline107 = nil
			}
			var output54 string
			output54 = connectionsItem53.Output.ValueString()

			connections53 = append(connections53, shared.InputRawUDPConnections{
				Pipeline: pipeline107,
				Output:   output54,
			})
		}
		var pq53 *shared.InputRawUDPPq
		if r.InputRawUDP.Pq != nil {
			mode67 := new(shared.InputRawUDPMode)
			if !r.InputRawUDP.Pq.Mode.IsUnknown() && !r.InputRawUDP.Pq.Mode.IsNull() {
				*mode67 = shared.InputRawUDPMode(r.InputRawUDP.Pq.Mode.ValueString())
			} else {
				mode67 = nil
			}
			maxBufferSize57 := new(float64)
			if !r.InputRawUDP.Pq.MaxBufferSize.IsUnknown() && !r.InputRawUDP.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize57 = r.InputRawUDP.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize57 = nil
			}
			commitFrequency53 := new(float64)
			if !r.InputRawUDP.Pq.CommitFrequency.IsUnknown() && !r.InputRawUDP.Pq.CommitFrequency.IsNull() {
				*commitFrequency53 = r.InputRawUDP.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency53 = nil
			}
			maxFileSize53 := new(string)
			if !r.InputRawUDP.Pq.MaxFileSize.IsUnknown() && !r.InputRawUDP.Pq.MaxFileSize.IsNull() {
				*maxFileSize53 = r.InputRawUDP.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize53 = nil
			}
			maxSize53 := new(string)
			if !r.InputRawUDP.Pq.MaxSize.IsUnknown() && !r.InputRawUDP.Pq.MaxSize.IsNull() {
				*maxSize53 = r.InputRawUDP.Pq.MaxSize.ValueString()
			} else {
				maxSize53 = nil
			}
			path55 := new(string)
			if !r.InputRawUDP.Pq.Path.IsUnknown() && !r.InputRawUDP.Pq.Path.IsNull() {
				*path55 = r.InputRawUDP.Pq.Path.ValueString()
			} else {
				path55 = nil
			}
			compress62 := new(shared.InputRawUDPCompression)
			if !r.InputRawUDP.Pq.Compress.IsUnknown() && !r.InputRawUDP.Pq.Compress.IsNull() {
				*compress62 = shared.InputRawUDPCompression(r.InputRawUDP.Pq.Compress.ValueString())
			} else {
				compress62 = nil
			}
			pq53 = &shared.InputRawUDPPq{
				Mode:            mode67,
				MaxBufferSize:   maxBufferSize57,
				CommitFrequency: commitFrequency53,
				MaxFileSize:     maxFileSize53,
				MaxSize:         maxSize53,
				Path:            path55,
				Compress:        compress62,
			}
		}
		host26 := new(string)
		if !r.InputRawUDP.Host.IsUnknown() && !r.InputRawUDP.Host.IsNull() {
			*host26 = r.InputRawUDP.Host.ValueString()
		} else {
			host26 = nil
		}
		var port21 float64
		port21 = r.InputRawUDP.Port.ValueFloat64()

		maxBufferSize58 := new(float64)
		if !r.InputRawUDP.MaxBufferSize.IsUnknown() && !r.InputRawUDP.MaxBufferSize.IsNull() {
			*maxBufferSize58 = r.InputRawUDP.MaxBufferSize.ValueFloat64()
		} else {
			maxBufferSize58 = nil
		}
		ipWhitelistRegex8 := new(string)
		if !r.InputRawUDP.IPWhitelistRegex.IsUnknown() && !r.InputRawUDP.IPWhitelistRegex.IsNull() {
			*ipWhitelistRegex8 = r.InputRawUDP.IPWhitelistRegex.ValueString()
		} else {
			ipWhitelistRegex8 = nil
		}
		singleMsgUDPPackets2 := new(bool)
		if !r.InputRawUDP.SingleMsgUDPPackets.IsUnknown() && !r.InputRawUDP.SingleMsgUDPPackets.IsNull() {
			*singleMsgUDPPackets2 = r.InputRawUDP.SingleMsgUDPPackets.ValueBool()
		} else {
			singleMsgUDPPackets2 = nil
		}
		ingestRawBytes := new(bool)
		if !r.InputRawUDP.IngestRawBytes.IsUnknown() && !r.InputRawUDP.IngestRawBytes.IsNull() {
			*ingestRawBytes = r.InputRawUDP.IngestRawBytes.ValueBool()
		} else {
			ingestRawBytes = nil
		}
		udpSocketRxBufSize4 := new(float64)
		if !r.InputRawUDP.UDPSocketRxBufSize.IsUnknown() && !r.InputRawUDP.UDPSocketRxBufSize.IsNull() {
			*udpSocketRxBufSize4 = r.InputRawUDP.UDPSocketRxBufSize.ValueFloat64()
		} else {
			udpSocketRxBufSize4 = nil
		}
		metadata58 := make([]shared.InputRawUDPMetadata, 0, len(r.InputRawUDP.Metadata))
		for _, metadataItem57 := range r.InputRawUDP.Metadata {
			var name81 string
			name81 = metadataItem57.Name.ValueString()

			var value76 string
			value76 = metadataItem57.Value.ValueString()

			metadata58 = append(metadata58, shared.InputRawUDPMetadata{
				Name:  name81,
				Value: value76,
			})
		}
		description62 := new(string)
		if !r.InputRawUDP.Description.IsUnknown() && !r.InputRawUDP.Description.IsNull() {
			*description62 = r.InputRawUDP.Description.ValueString()
		} else {
			description62 = nil
		}
		var status53 *shared.TFStatus
		if r.InputRawUDP.Status != nil {
			health53 := shared.Health(r.InputRawUDP.Status.Health.ValueString())
			metrics53 := make(map[string]interface{})
			for metricsKey53, metricsValue53 := range r.InputRawUDP.Status.Metrics {
				var metricsInst53 interface{}
				_ = json.Unmarshal([]byte(metricsValue53.ValueString()), &metricsInst53)
				metrics53[metricsKey53] = metricsInst53
			}
			var timestamp53 float64
			timestamp53 = r.InputRawUDP.Status.Timestamp.ValueFloat64()

			useStatusFromLb53 := new(bool)
			if !r.InputRawUDP.Status.UseStatusFromLB.IsUnknown() && !r.InputRawUDP.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb53 = r.InputRawUDP.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb53 = nil
			}
			status53 = &shared.TFStatus{
				Health:          health53,
				Metrics:         metrics53,
				Timestamp:       timestamp53,
				UseStatusFromLB: useStatusFromLb53,
			}
		}
		inputRawUDP = &shared.InputRawUDP{
			ID:                  id53,
			Type:                typeVar57,
			Disabled:            disabled96,
			Pipeline:            pipeline106,
			SendToRoutes:        sendToRoutes53,
			Environment:         environment53,
			PqEnabled:           pqEnabled53,
			Streamtags:          streamtags53,
			Connections:         connections53,
			Pq:                  pq53,
			Host:                host26,
			Port:                port21,
			MaxBufferSize:       maxBufferSize58,
			IPWhitelistRegex:    ipWhitelistRegex8,
			SingleMsgUDPPackets: singleMsgUDPPackets2,
			IngestRawBytes:      ingestRawBytes,
			UDPSocketRxBufSize:  udpSocketRxBufSize4,
			Metadata:            metadata58,
			Description:         description62,
			Status:              status53,
		}
	}
	if inputRawUDP != nil {
		out = shared.Input{
			InputRawUDP: inputRawUDP,
		}
	}
	var inputJournalFiles *shared.InputJournalFiles
	if r.InputJournalFiles != nil {
		id54 := new(string)
		if !r.InputJournalFiles.ID.IsUnknown() && !r.InputJournalFiles.ID.IsNull() {
			*id54 = r.InputJournalFiles.ID.ValueString()
		} else {
			id54 = nil
		}
		typeVar58 := new(shared.InputJournalFilesType)
		if !r.InputJournalFiles.Type.IsUnknown() && !r.InputJournalFiles.Type.IsNull() {
			*typeVar58 = shared.InputJournalFilesType(r.InputJournalFiles.Type.ValueString())
		} else {
			typeVar58 = nil
		}
		disabled97 := new(bool)
		if !r.InputJournalFiles.Disabled.IsUnknown() && !r.InputJournalFiles.Disabled.IsNull() {
			*disabled97 = r.InputJournalFiles.Disabled.ValueBool()
		} else {
			disabled97 = nil
		}
		pipeline108 := new(string)
		if !r.InputJournalFiles.Pipeline.IsUnknown() && !r.InputJournalFiles.Pipeline.IsNull() {
			*pipeline108 = r.InputJournalFiles.Pipeline.ValueString()
		} else {
			pipeline108 = nil
		}
		sendToRoutes54 := new(bool)
		if !r.InputJournalFiles.SendToRoutes.IsUnknown() && !r.InputJournalFiles.SendToRoutes.IsNull() {
			*sendToRoutes54 = r.InputJournalFiles.SendToRoutes.ValueBool()
		} else {
			sendToRoutes54 = nil
		}
		environment54 := new(string)
		if !r.InputJournalFiles.Environment.IsUnknown() && !r.InputJournalFiles.Environment.IsNull() {
			*environment54 = r.InputJournalFiles.Environment.ValueString()
		} else {
			environment54 = nil
		}
		pqEnabled54 := new(bool)
		if !r.InputJournalFiles.PqEnabled.IsUnknown() && !r.InputJournalFiles.PqEnabled.IsNull() {
			*pqEnabled54 = r.InputJournalFiles.PqEnabled.ValueBool()
		} else {
			pqEnabled54 = nil
		}
		streamtags54 := make([]string, 0, len(r.InputJournalFiles.Streamtags))
		for _, streamtagsItem54 := range r.InputJournalFiles.Streamtags {
			streamtags54 = append(streamtags54, streamtagsItem54.ValueString())
		}
		connections54 := make([]shared.InputJournalFilesConnections, 0, len(r.InputJournalFiles.Connections))
		for _, connectionsItem54 := range r.InputJournalFiles.Connections {
			pipeline109 := new(string)
			if !connectionsItem54.Pipeline.IsUnknown() && !connectionsItem54.Pipeline.IsNull() {
				*pipeline109 = connectionsItem54.Pipeline.ValueString()
			} else {
				pipeline109 = nil
			}
			var output55 string
			output55 = connectionsItem54.Output.ValueString()

			connections54 = append(connections54, shared.InputJournalFilesConnections{
				Pipeline: pipeline109,
				Output:   output55,
			})
		}
		var pq54 *shared.InputJournalFilesPq
		if r.InputJournalFiles.Pq != nil {
			mode68 := new(shared.InputJournalFilesMode)
			if !r.InputJournalFiles.Pq.Mode.IsUnknown() && !r.InputJournalFiles.Pq.Mode.IsNull() {
				*mode68 = shared.InputJournalFilesMode(r.InputJournalFiles.Pq.Mode.ValueString())
			} else {
				mode68 = nil
			}
			maxBufferSize59 := new(float64)
			if !r.InputJournalFiles.Pq.MaxBufferSize.IsUnknown() && !r.InputJournalFiles.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize59 = r.InputJournalFiles.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize59 = nil
			}
			commitFrequency54 := new(float64)
			if !r.InputJournalFiles.Pq.CommitFrequency.IsUnknown() && !r.InputJournalFiles.Pq.CommitFrequency.IsNull() {
				*commitFrequency54 = r.InputJournalFiles.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency54 = nil
			}
			maxFileSize54 := new(string)
			if !r.InputJournalFiles.Pq.MaxFileSize.IsUnknown() && !r.InputJournalFiles.Pq.MaxFileSize.IsNull() {
				*maxFileSize54 = r.InputJournalFiles.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize54 = nil
			}
			maxSize54 := new(string)
			if !r.InputJournalFiles.Pq.MaxSize.IsUnknown() && !r.InputJournalFiles.Pq.MaxSize.IsNull() {
				*maxSize54 = r.InputJournalFiles.Pq.MaxSize.ValueString()
			} else {
				maxSize54 = nil
			}
			path56 := new(string)
			if !r.InputJournalFiles.Pq.Path.IsUnknown() && !r.InputJournalFiles.Pq.Path.IsNull() {
				*path56 = r.InputJournalFiles.Pq.Path.ValueString()
			} else {
				path56 = nil
			}
			compress63 := new(shared.InputJournalFilesCompression)
			if !r.InputJournalFiles.Pq.Compress.IsUnknown() && !r.InputJournalFiles.Pq.Compress.IsNull() {
				*compress63 = shared.InputJournalFilesCompression(r.InputJournalFiles.Pq.Compress.ValueString())
			} else {
				compress63 = nil
			}
			pq54 = &shared.InputJournalFilesPq{
				Mode:            mode68,
				MaxBufferSize:   maxBufferSize59,
				CommitFrequency: commitFrequency54,
				MaxFileSize:     maxFileSize54,
				MaxSize:         maxSize54,
				Path:            path56,
				Compress:        compress63,
			}
		}
		var path57 string
		path57 = r.InputJournalFiles.Path.ValueString()

		interval17 := new(float64)
		if !r.InputJournalFiles.Interval.IsUnknown() && !r.InputJournalFiles.Interval.IsNull() {
			*interval17 = r.InputJournalFiles.Interval.ValueFloat64()
		} else {
			interval17 = nil
		}
		journals := make([]string, 0, len(r.InputJournalFiles.Journals))
		for _, journalsItem := range r.InputJournalFiles.Journals {
			journals = append(journals, journalsItem.ValueString())
		}
		rules3 := make([]shared.InputJournalFilesRules, 0, len(r.InputJournalFiles.Rules))
		for _, rulesItem3 := range r.InputJournalFiles.Rules {
			var filter8 string
			filter8 = rulesItem3.Filter.ValueString()

			description63 := new(string)
			if !rulesItem3.Description.IsUnknown() && !rulesItem3.Description.IsNull() {
				*description63 = rulesItem3.Description.ValueString()
			} else {
				description63 = nil
			}
			rules3 = append(rules3, shared.InputJournalFilesRules{
				Filter:      filter8,
				Description: description63,
			})
		}
		currentBoot := new(bool)
		if !r.InputJournalFiles.CurrentBoot.IsUnknown() && !r.InputJournalFiles.CurrentBoot.IsNull() {
			*currentBoot = r.InputJournalFiles.CurrentBoot.ValueBool()
		} else {
			currentBoot = nil
		}
		maxAgeDur1 := new(string)
		if !r.InputJournalFiles.MaxAgeDur.IsUnknown() && !r.InputJournalFiles.MaxAgeDur.IsNull() {
			*maxAgeDur1 = r.InputJournalFiles.MaxAgeDur.ValueString()
		} else {
			maxAgeDur1 = nil
		}
		metadata59 := make([]shared.InputJournalFilesMetadata, 0, len(r.InputJournalFiles.Metadata))
		for _, metadataItem58 := range r.InputJournalFiles.Metadata {
			var name82 string
			name82 = metadataItem58.Name.ValueString()

			var value77 string
			value77 = metadataItem58.Value.ValueString()

			metadata59 = append(metadata59, shared.InputJournalFilesMetadata{
				Name:  name82,
				Value: value77,
			})
		}
		description64 := new(string)
		if !r.InputJournalFiles.Description.IsUnknown() && !r.InputJournalFiles.Description.IsNull() {
			*description64 = r.InputJournalFiles.Description.ValueString()
		} else {
			description64 = nil
		}
		var status54 *shared.TFStatus
		if r.InputJournalFiles.Status != nil {
			health54 := shared.Health(r.InputJournalFiles.Status.Health.ValueString())
			metrics54 := make(map[string]interface{})
			for metricsKey54, metricsValue54 := range r.InputJournalFiles.Status.Metrics {
				var metricsInst54 interface{}
				_ = json.Unmarshal([]byte(metricsValue54.ValueString()), &metricsInst54)
				metrics54[metricsKey54] = metricsInst54
			}
			var timestamp54 float64
			timestamp54 = r.InputJournalFiles.Status.Timestamp.ValueFloat64()

			useStatusFromLb54 := new(bool)
			if !r.InputJournalFiles.Status.UseStatusFromLB.IsUnknown() && !r.InputJournalFiles.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb54 = r.InputJournalFiles.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb54 = nil
			}
			status54 = &shared.TFStatus{
				Health:          health54,
				Metrics:         metrics54,
				Timestamp:       timestamp54,
				UseStatusFromLB: useStatusFromLb54,
			}
		}
		inputJournalFiles = &shared.InputJournalFiles{
			ID:           id54,
			Type:         typeVar58,
			Disabled:     disabled97,
			Pipeline:     pipeline108,
			SendToRoutes: sendToRoutes54,
			Environment:  environment54,
			PqEnabled:    pqEnabled54,
			Streamtags:   streamtags54,
			Connections:  connections54,
			Pq:           pq54,
			Path:         path57,
			Interval:     interval17,
			Journals:     journals,
			Rules:        rules3,
			CurrentBoot:  currentBoot,
			MaxAgeDur:    maxAgeDur1,
			Metadata:     metadata59,
			Description:  description64,
			Status:       status54,
		}
	}
	if inputJournalFiles != nil {
		out = shared.Input{
			InputJournalFiles: inputJournalFiles,
		}
	}
	var inputWiz *shared.InputWiz
	if r.InputWiz != nil {
		id55 := new(string)
		if !r.InputWiz.ID.IsUnknown() && !r.InputWiz.ID.IsNull() {
			*id55 = r.InputWiz.ID.ValueString()
		} else {
			id55 = nil
		}
		typeVar59 := new(shared.InputWizType)
		if !r.InputWiz.Type.IsUnknown() && !r.InputWiz.Type.IsNull() {
			*typeVar59 = shared.InputWizType(r.InputWiz.Type.ValueString())
		} else {
			typeVar59 = nil
		}
		disabled98 := new(bool)
		if !r.InputWiz.Disabled.IsUnknown() && !r.InputWiz.Disabled.IsNull() {
			*disabled98 = r.InputWiz.Disabled.ValueBool()
		} else {
			disabled98 = nil
		}
		pipeline110 := new(string)
		if !r.InputWiz.Pipeline.IsUnknown() && !r.InputWiz.Pipeline.IsNull() {
			*pipeline110 = r.InputWiz.Pipeline.ValueString()
		} else {
			pipeline110 = nil
		}
		sendToRoutes55 := new(bool)
		if !r.InputWiz.SendToRoutes.IsUnknown() && !r.InputWiz.SendToRoutes.IsNull() {
			*sendToRoutes55 = r.InputWiz.SendToRoutes.ValueBool()
		} else {
			sendToRoutes55 = nil
		}
		environment55 := new(string)
		if !r.InputWiz.Environment.IsUnknown() && !r.InputWiz.Environment.IsNull() {
			*environment55 = r.InputWiz.Environment.ValueString()
		} else {
			environment55 = nil
		}
		pqEnabled55 := new(bool)
		if !r.InputWiz.PqEnabled.IsUnknown() && !r.InputWiz.PqEnabled.IsNull() {
			*pqEnabled55 = r.InputWiz.PqEnabled.ValueBool()
		} else {
			pqEnabled55 = nil
		}
		streamtags55 := make([]string, 0, len(r.InputWiz.Streamtags))
		for _, streamtagsItem55 := range r.InputWiz.Streamtags {
			streamtags55 = append(streamtags55, streamtagsItem55.ValueString())
		}
		connections55 := make([]shared.InputWizConnections, 0, len(r.InputWiz.Connections))
		for _, connectionsItem55 := range r.InputWiz.Connections {
			pipeline111 := new(string)
			if !connectionsItem55.Pipeline.IsUnknown() && !connectionsItem55.Pipeline.IsNull() {
				*pipeline111 = connectionsItem55.Pipeline.ValueString()
			} else {
				pipeline111 = nil
			}
			var output56 string
			output56 = connectionsItem55.Output.ValueString()

			connections55 = append(connections55, shared.InputWizConnections{
				Pipeline: pipeline111,
				Output:   output56,
			})
		}
		var pq55 *shared.InputWizPq
		if r.InputWiz.Pq != nil {
			mode69 := new(shared.InputWizMode)
			if !r.InputWiz.Pq.Mode.IsUnknown() && !r.InputWiz.Pq.Mode.IsNull() {
				*mode69 = shared.InputWizMode(r.InputWiz.Pq.Mode.ValueString())
			} else {
				mode69 = nil
			}
			maxBufferSize60 := new(float64)
			if !r.InputWiz.Pq.MaxBufferSize.IsUnknown() && !r.InputWiz.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize60 = r.InputWiz.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize60 = nil
			}
			commitFrequency55 := new(float64)
			if !r.InputWiz.Pq.CommitFrequency.IsUnknown() && !r.InputWiz.Pq.CommitFrequency.IsNull() {
				*commitFrequency55 = r.InputWiz.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency55 = nil
			}
			maxFileSize55 := new(string)
			if !r.InputWiz.Pq.MaxFileSize.IsUnknown() && !r.InputWiz.Pq.MaxFileSize.IsNull() {
				*maxFileSize55 = r.InputWiz.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize55 = nil
			}
			maxSize55 := new(string)
			if !r.InputWiz.Pq.MaxSize.IsUnknown() && !r.InputWiz.Pq.MaxSize.IsNull() {
				*maxSize55 = r.InputWiz.Pq.MaxSize.ValueString()
			} else {
				maxSize55 = nil
			}
			path58 := new(string)
			if !r.InputWiz.Pq.Path.IsUnknown() && !r.InputWiz.Pq.Path.IsNull() {
				*path58 = r.InputWiz.Pq.Path.ValueString()
			} else {
				path58 = nil
			}
			compress64 := new(shared.InputWizCompression)
			if !r.InputWiz.Pq.Compress.IsUnknown() && !r.InputWiz.Pq.Compress.IsNull() {
				*compress64 = shared.InputWizCompression(r.InputWiz.Pq.Compress.ValueString())
			} else {
				compress64 = nil
			}
			pq55 = &shared.InputWizPq{
				Mode:            mode69,
				MaxBufferSize:   maxBufferSize60,
				CommitFrequency: commitFrequency55,
				MaxFileSize:     maxFileSize55,
				MaxSize:         maxSize55,
				Path:            path58,
				Compress:        compress64,
			}
		}
		endpoint9 := new(string)
		if !r.InputWiz.Endpoint.IsUnknown() && !r.InputWiz.Endpoint.IsNull() {
			*endpoint9 = r.InputWiz.Endpoint.ValueString()
		} else {
			endpoint9 = nil
		}
		var authURL string
		authURL = r.InputWiz.AuthURL.ValueString()

		authAudienceOverride := new(string)
		if !r.InputWiz.AuthAudienceOverride.IsUnknown() && !r.InputWiz.AuthAudienceOverride.IsNull() {
			*authAudienceOverride = r.InputWiz.AuthAudienceOverride.ValueString()
		} else {
			authAudienceOverride = nil
		}
		var clientId2 string
		clientId2 = r.InputWiz.ClientID.ValueString()

		contentConfig2 := make([]shared.InputWizContentConfig, 0, len(r.InputWiz.ContentConfig))
		for _, contentConfigItem2 := range r.InputWiz.ContentConfig {
			var contentType2 string
			contentType2 = contentConfigItem2.ContentType.ValueString()

			contentDescription := new(string)
			if !contentConfigItem2.ContentDescription.IsUnknown() && !contentConfigItem2.ContentDescription.IsNull() {
				*contentDescription = contentConfigItem2.ContentDescription.ValueString()
			} else {
				contentDescription = nil
			}
			enabled8 := new(bool)
			if !contentConfigItem2.Enabled.IsUnknown() && !contentConfigItem2.Enabled.IsNull() {
				*enabled8 = contentConfigItem2.Enabled.ValueBool()
			} else {
				enabled8 = nil
			}
			contentConfig2 = append(contentConfig2, shared.InputWizContentConfig{
				ContentType:        contentType2,
				ContentDescription: contentDescription,
				Enabled:            enabled8,
			})
		}
		requestTimeout21 := new(float64)
		if !r.InputWiz.RequestTimeout.IsUnknown() && !r.InputWiz.RequestTimeout.IsNull() {
			*requestTimeout21 = r.InputWiz.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout21 = nil
		}
		keepAliveTime5 := new(float64)
		if !r.InputWiz.KeepAliveTime.IsUnknown() && !r.InputWiz.KeepAliveTime.IsNull() {
			*keepAliveTime5 = r.InputWiz.KeepAliveTime.ValueFloat64()
		} else {
			keepAliveTime5 = nil
		}
		maxMissedKeepAlives5 := new(float64)
		if !r.InputWiz.MaxMissedKeepAlives.IsUnknown() && !r.InputWiz.MaxMissedKeepAlives.IsNull() {
			*maxMissedKeepAlives5 = r.InputWiz.MaxMissedKeepAlives.ValueFloat64()
		} else {
			maxMissedKeepAlives5 = nil
		}
		ttl5 := new(string)
		if !r.InputWiz.TTL.IsUnknown() && !r.InputWiz.TTL.IsNull() {
			*ttl5 = r.InputWiz.TTL.ValueString()
		} else {
			ttl5 = nil
		}
		metadata60 := make([]shared.InputWizMetadata, 0, len(r.InputWiz.Metadata))
		for _, metadataItem59 := range r.InputWiz.Metadata {
			var name83 string
			name83 = metadataItem59.Name.ValueString()

			var value78 string
			value78 = metadataItem59.Value.ValueString()

			metadata60 = append(metadata60, shared.InputWizMetadata{
				Name:  name83,
				Value: value78,
			})
		}
		var retryRules4 *shared.InputWizRetryRules
		if r.InputWiz.RetryRules != nil {
			typeVar60 := new(shared.InputWizRetryType)
			if !r.InputWiz.RetryRules.Type.IsUnknown() && !r.InputWiz.RetryRules.Type.IsNull() {
				*typeVar60 = shared.InputWizRetryType(r.InputWiz.RetryRules.Type.ValueString())
			} else {
				typeVar60 = nil
			}
			interval18 := new(float64)
			if !r.InputWiz.RetryRules.Interval.IsUnknown() && !r.InputWiz.RetryRules.Interval.IsNull() {
				*interval18 = r.InputWiz.RetryRules.Interval.ValueFloat64()
			} else {
				interval18 = nil
			}
			limit4 := new(float64)
			if !r.InputWiz.RetryRules.Limit.IsUnknown() && !r.InputWiz.RetryRules.Limit.IsNull() {
				*limit4 = r.InputWiz.RetryRules.Limit.ValueFloat64()
			} else {
				limit4 = nil
			}
			multiplier4 := new(float64)
			if !r.InputWiz.RetryRules.Multiplier.IsUnknown() && !r.InputWiz.RetryRules.Multiplier.IsNull() {
				*multiplier4 = r.InputWiz.RetryRules.Multiplier.ValueFloat64()
			} else {
				multiplier4 = nil
			}
			codes4 := make([]float64, 0, len(r.InputWiz.RetryRules.Codes))
			for _, codesItem4 := range r.InputWiz.RetryRules.Codes {
				codes4 = append(codes4, codesItem4.ValueFloat64())
			}
			enableHeader5 := new(bool)
			if !r.InputWiz.RetryRules.EnableHeader.IsUnknown() && !r.InputWiz.RetryRules.EnableHeader.IsNull() {
				*enableHeader5 = r.InputWiz.RetryRules.EnableHeader.ValueBool()
			} else {
				enableHeader5 = nil
			}
			retryConnectTimeout4 := new(bool)
			if !r.InputWiz.RetryRules.RetryConnectTimeout.IsUnknown() && !r.InputWiz.RetryRules.RetryConnectTimeout.IsNull() {
				*retryConnectTimeout4 = r.InputWiz.RetryRules.RetryConnectTimeout.ValueBool()
			} else {
				retryConnectTimeout4 = nil
			}
			retryConnectReset4 := new(bool)
			if !r.InputWiz.RetryRules.RetryConnectReset.IsUnknown() && !r.InputWiz.RetryRules.RetryConnectReset.IsNull() {
				*retryConnectReset4 = r.InputWiz.RetryRules.RetryConnectReset.ValueBool()
			} else {
				retryConnectReset4 = nil
			}
			retryRules4 = &shared.InputWizRetryRules{
				Type:                typeVar60,
				Interval:            interval18,
				Limit:               limit4,
				Multiplier:          multiplier4,
				Codes:               codes4,
				EnableHeader:        enableHeader5,
				RetryConnectTimeout: retryConnectTimeout4,
				RetryConnectReset:   retryConnectReset4,
			}
		}
		authType20 := new(shared.InputWizAuthenticationMethod)
		if !r.InputWiz.AuthType.IsUnknown() && !r.InputWiz.AuthType.IsNull() {
			*authType20 = shared.InputWizAuthenticationMethod(r.InputWiz.AuthType.ValueString())
		} else {
			authType20 = nil
		}
		description65 := new(string)
		if !r.InputWiz.Description.IsUnknown() && !r.InputWiz.Description.IsNull() {
			*description65 = r.InputWiz.Description.ValueString()
		} else {
			description65 = nil
		}
		clientSecret3 := new(string)
		if !r.InputWiz.ClientSecret.IsUnknown() && !r.InputWiz.ClientSecret.IsNull() {
			*clientSecret3 = r.InputWiz.ClientSecret.ValueString()
		} else {
			clientSecret3 = nil
		}
		textSecret14 := new(string)
		if !r.InputWiz.TextSecret.IsUnknown() && !r.InputWiz.TextSecret.IsNull() {
			*textSecret14 = r.InputWiz.TextSecret.ValueString()
		} else {
			textSecret14 = nil
		}
		var status55 *shared.TFStatus
		if r.InputWiz.Status != nil {
			health55 := shared.Health(r.InputWiz.Status.Health.ValueString())
			metrics55 := make(map[string]interface{})
			for metricsKey55, metricsValue55 := range r.InputWiz.Status.Metrics {
				var metricsInst55 interface{}
				_ = json.Unmarshal([]byte(metricsValue55.ValueString()), &metricsInst55)
				metrics55[metricsKey55] = metricsInst55
			}
			var timestamp55 float64
			timestamp55 = r.InputWiz.Status.Timestamp.ValueFloat64()

			useStatusFromLb55 := new(bool)
			if !r.InputWiz.Status.UseStatusFromLB.IsUnknown() && !r.InputWiz.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb55 = r.InputWiz.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb55 = nil
			}
			status55 = &shared.TFStatus{
				Health:          health55,
				Metrics:         metrics55,
				Timestamp:       timestamp55,
				UseStatusFromLB: useStatusFromLb55,
			}
		}
		inputWiz = &shared.InputWiz{
			ID:                   id55,
			Type:                 typeVar59,
			Disabled:             disabled98,
			Pipeline:             pipeline110,
			SendToRoutes:         sendToRoutes55,
			Environment:          environment55,
			PqEnabled:            pqEnabled55,
			Streamtags:           streamtags55,
			Connections:          connections55,
			Pq:                   pq55,
			Endpoint:             endpoint9,
			AuthURL:              authURL,
			AuthAudienceOverride: authAudienceOverride,
			ClientID:             clientId2,
			ContentConfig:        contentConfig2,
			RequestTimeout:       requestTimeout21,
			KeepAliveTime:        keepAliveTime5,
			MaxMissedKeepAlives:  maxMissedKeepAlives5,
			TTL:                  ttl5,
			Metadata:             metadata60,
			RetryRules:           retryRules4,
			AuthType:             authType20,
			Description:          description65,
			ClientSecret:         clientSecret3,
			TextSecret:           textSecret14,
			Status:               status55,
		}
	}
	if inputWiz != nil {
		out = shared.Input{
			InputWiz: inputWiz,
		}
	}
	var inputNetflow *shared.InputNetflow
	if r.InputNetflow != nil {
		id56 := new(string)
		if !r.InputNetflow.ID.IsUnknown() && !r.InputNetflow.ID.IsNull() {
			*id56 = r.InputNetflow.ID.ValueString()
		} else {
			id56 = nil
		}
		typeVar61 := new(shared.InputNetflowType)
		if !r.InputNetflow.Type.IsUnknown() && !r.InputNetflow.Type.IsNull() {
			*typeVar61 = shared.InputNetflowType(r.InputNetflow.Type.ValueString())
		} else {
			typeVar61 = nil
		}
		disabled99 := new(bool)
		if !r.InputNetflow.Disabled.IsUnknown() && !r.InputNetflow.Disabled.IsNull() {
			*disabled99 = r.InputNetflow.Disabled.ValueBool()
		} else {
			disabled99 = nil
		}
		pipeline112 := new(string)
		if !r.InputNetflow.Pipeline.IsUnknown() && !r.InputNetflow.Pipeline.IsNull() {
			*pipeline112 = r.InputNetflow.Pipeline.ValueString()
		} else {
			pipeline112 = nil
		}
		sendToRoutes56 := new(bool)
		if !r.InputNetflow.SendToRoutes.IsUnknown() && !r.InputNetflow.SendToRoutes.IsNull() {
			*sendToRoutes56 = r.InputNetflow.SendToRoutes.ValueBool()
		} else {
			sendToRoutes56 = nil
		}
		environment56 := new(string)
		if !r.InputNetflow.Environment.IsUnknown() && !r.InputNetflow.Environment.IsNull() {
			*environment56 = r.InputNetflow.Environment.ValueString()
		} else {
			environment56 = nil
		}
		pqEnabled56 := new(bool)
		if !r.InputNetflow.PqEnabled.IsUnknown() && !r.InputNetflow.PqEnabled.IsNull() {
			*pqEnabled56 = r.InputNetflow.PqEnabled.ValueBool()
		} else {
			pqEnabled56 = nil
		}
		streamtags56 := make([]string, 0, len(r.InputNetflow.Streamtags))
		for _, streamtagsItem56 := range r.InputNetflow.Streamtags {
			streamtags56 = append(streamtags56, streamtagsItem56.ValueString())
		}
		connections56 := make([]shared.InputNetflowConnections, 0, len(r.InputNetflow.Connections))
		for _, connectionsItem56 := range r.InputNetflow.Connections {
			pipeline113 := new(string)
			if !connectionsItem56.Pipeline.IsUnknown() && !connectionsItem56.Pipeline.IsNull() {
				*pipeline113 = connectionsItem56.Pipeline.ValueString()
			} else {
				pipeline113 = nil
			}
			var output57 string
			output57 = connectionsItem56.Output.ValueString()

			connections56 = append(connections56, shared.InputNetflowConnections{
				Pipeline: pipeline113,
				Output:   output57,
			})
		}
		var pq56 *shared.InputNetflowPq
		if r.InputNetflow.Pq != nil {
			mode70 := new(shared.InputNetflowMode)
			if !r.InputNetflow.Pq.Mode.IsUnknown() && !r.InputNetflow.Pq.Mode.IsNull() {
				*mode70 = shared.InputNetflowMode(r.InputNetflow.Pq.Mode.ValueString())
			} else {
				mode70 = nil
			}
			maxBufferSize61 := new(float64)
			if !r.InputNetflow.Pq.MaxBufferSize.IsUnknown() && !r.InputNetflow.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize61 = r.InputNetflow.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize61 = nil
			}
			commitFrequency56 := new(float64)
			if !r.InputNetflow.Pq.CommitFrequency.IsUnknown() && !r.InputNetflow.Pq.CommitFrequency.IsNull() {
				*commitFrequency56 = r.InputNetflow.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency56 = nil
			}
			maxFileSize56 := new(string)
			if !r.InputNetflow.Pq.MaxFileSize.IsUnknown() && !r.InputNetflow.Pq.MaxFileSize.IsNull() {
				*maxFileSize56 = r.InputNetflow.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize56 = nil
			}
			maxSize56 := new(string)
			if !r.InputNetflow.Pq.MaxSize.IsUnknown() && !r.InputNetflow.Pq.MaxSize.IsNull() {
				*maxSize56 = r.InputNetflow.Pq.MaxSize.ValueString()
			} else {
				maxSize56 = nil
			}
			path59 := new(string)
			if !r.InputNetflow.Pq.Path.IsUnknown() && !r.InputNetflow.Pq.Path.IsNull() {
				*path59 = r.InputNetflow.Pq.Path.ValueString()
			} else {
				path59 = nil
			}
			compress65 := new(shared.InputNetflowCompression)
			if !r.InputNetflow.Pq.Compress.IsUnknown() && !r.InputNetflow.Pq.Compress.IsNull() {
				*compress65 = shared.InputNetflowCompression(r.InputNetflow.Pq.Compress.ValueString())
			} else {
				compress65 = nil
			}
			pq56 = &shared.InputNetflowPq{
				Mode:            mode70,
				MaxBufferSize:   maxBufferSize61,
				CommitFrequency: commitFrequency56,
				MaxFileSize:     maxFileSize56,
				MaxSize:         maxSize56,
				Path:            path59,
				Compress:        compress65,
			}
		}
		host27 := new(string)
		if !r.InputNetflow.Host.IsUnknown() && !r.InputNetflow.Host.IsNull() {
			*host27 = r.InputNetflow.Host.ValueString()
		} else {
			host27 = nil
		}
		port22 := new(float64)
		if !r.InputNetflow.Port.IsUnknown() && !r.InputNetflow.Port.IsNull() {
			*port22 = r.InputNetflow.Port.ValueFloat64()
		} else {
			port22 = nil
		}
		enablePassThrough := new(bool)
		if !r.InputNetflow.EnablePassThrough.IsUnknown() && !r.InputNetflow.EnablePassThrough.IsNull() {
			*enablePassThrough = r.InputNetflow.EnablePassThrough.ValueBool()
		} else {
			enablePassThrough = nil
		}
		ipAllowlistRegex13 := new(string)
		if !r.InputNetflow.IPAllowlistRegex.IsUnknown() && !r.InputNetflow.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex13 = r.InputNetflow.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex13 = nil
		}
		ipDenylistRegex13 := new(string)
		if !r.InputNetflow.IPDenylistRegex.IsUnknown() && !r.InputNetflow.IPDenylistRegex.IsNull() {
			*ipDenylistRegex13 = r.InputNetflow.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex13 = nil
		}
		udpSocketRxBufSize5 := new(float64)
		if !r.InputNetflow.UDPSocketRxBufSize.IsUnknown() && !r.InputNetflow.UDPSocketRxBufSize.IsNull() {
			*udpSocketRxBufSize5 = r.InputNetflow.UDPSocketRxBufSize.ValueFloat64()
		} else {
			udpSocketRxBufSize5 = nil
		}
		templateCacheMinutes := new(float64)
		if !r.InputNetflow.TemplateCacheMinutes.IsUnknown() && !r.InputNetflow.TemplateCacheMinutes.IsNull() {
			*templateCacheMinutes = r.InputNetflow.TemplateCacheMinutes.ValueFloat64()
		} else {
			templateCacheMinutes = nil
		}
		v5Enabled := new(bool)
		if !r.InputNetflow.V5Enabled.IsUnknown() && !r.InputNetflow.V5Enabled.IsNull() {
			*v5Enabled = r.InputNetflow.V5Enabled.ValueBool()
		} else {
			v5Enabled = nil
		}
		v9Enabled := new(bool)
		if !r.InputNetflow.V9Enabled.IsUnknown() && !r.InputNetflow.V9Enabled.IsNull() {
			*v9Enabled = r.InputNetflow.V9Enabled.ValueBool()
		} else {
			v9Enabled = nil
		}
		ipfixEnabled := new(bool)
		if !r.InputNetflow.IpfixEnabled.IsUnknown() && !r.InputNetflow.IpfixEnabled.IsNull() {
			*ipfixEnabled = r.InputNetflow.IpfixEnabled.ValueBool()
		} else {
			ipfixEnabled = nil
		}
		metadata61 := make([]shared.InputNetflowMetadata, 0, len(r.InputNetflow.Metadata))
		for _, metadataItem60 := range r.InputNetflow.Metadata {
			var name84 string
			name84 = metadataItem60.Name.ValueString()

			var value79 string
			value79 = metadataItem60.Value.ValueString()

			metadata61 = append(metadata61, shared.InputNetflowMetadata{
				Name:  name84,
				Value: value79,
			})
		}
		description66 := new(string)
		if !r.InputNetflow.Description.IsUnknown() && !r.InputNetflow.Description.IsNull() {
			*description66 = r.InputNetflow.Description.ValueString()
		} else {
			description66 = nil
		}
		var status56 *shared.TFStatus
		if r.InputNetflow.Status != nil {
			health56 := shared.Health(r.InputNetflow.Status.Health.ValueString())
			metrics56 := make(map[string]interface{})
			for metricsKey56, metricsValue56 := range r.InputNetflow.Status.Metrics {
				var metricsInst56 interface{}
				_ = json.Unmarshal([]byte(metricsValue56.ValueString()), &metricsInst56)
				metrics56[metricsKey56] = metricsInst56
			}
			var timestamp56 float64
			timestamp56 = r.InputNetflow.Status.Timestamp.ValueFloat64()

			useStatusFromLb56 := new(bool)
			if !r.InputNetflow.Status.UseStatusFromLB.IsUnknown() && !r.InputNetflow.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb56 = r.InputNetflow.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb56 = nil
			}
			status56 = &shared.TFStatus{
				Health:          health56,
				Metrics:         metrics56,
				Timestamp:       timestamp56,
				UseStatusFromLB: useStatusFromLb56,
			}
		}
		inputNetflow = &shared.InputNetflow{
			ID:                   id56,
			Type:                 typeVar61,
			Disabled:             disabled99,
			Pipeline:             pipeline112,
			SendToRoutes:         sendToRoutes56,
			Environment:          environment56,
			PqEnabled:            pqEnabled56,
			Streamtags:           streamtags56,
			Connections:          connections56,
			Pq:                   pq56,
			Host:                 host27,
			Port:                 port22,
			EnablePassThrough:    enablePassThrough,
			IPAllowlistRegex:     ipAllowlistRegex13,
			IPDenylistRegex:      ipDenylistRegex13,
			UDPSocketRxBufSize:   udpSocketRxBufSize5,
			TemplateCacheMinutes: templateCacheMinutes,
			V5Enabled:            v5Enabled,
			V9Enabled:            v9Enabled,
			IpfixEnabled:         ipfixEnabled,
			Metadata:             metadata61,
			Description:          description66,
			Status:               status56,
		}
	}
	if inputNetflow != nil {
		out = shared.Input{
			InputNetflow: inputNetflow,
		}
	}
	var inputSecurityLake *shared.InputSecurityLake
	if r.InputSecurityLake != nil {
		id57 := new(string)
		if !r.InputSecurityLake.ID.IsUnknown() && !r.InputSecurityLake.ID.IsNull() {
			*id57 = r.InputSecurityLake.ID.ValueString()
		} else {
			id57 = nil
		}
		typeVar62 := shared.InputSecurityLakeType(r.InputSecurityLake.Type.ValueString())
		disabled100 := new(bool)
		if !r.InputSecurityLake.Disabled.IsUnknown() && !r.InputSecurityLake.Disabled.IsNull() {
			*disabled100 = r.InputSecurityLake.Disabled.ValueBool()
		} else {
			disabled100 = nil
		}
		pipeline114 := new(string)
		if !r.InputSecurityLake.Pipeline.IsUnknown() && !r.InputSecurityLake.Pipeline.IsNull() {
			*pipeline114 = r.InputSecurityLake.Pipeline.ValueString()
		} else {
			pipeline114 = nil
		}
		sendToRoutes57 := new(bool)
		if !r.InputSecurityLake.SendToRoutes.IsUnknown() && !r.InputSecurityLake.SendToRoutes.IsNull() {
			*sendToRoutes57 = r.InputSecurityLake.SendToRoutes.ValueBool()
		} else {
			sendToRoutes57 = nil
		}
		environment57 := new(string)
		if !r.InputSecurityLake.Environment.IsUnknown() && !r.InputSecurityLake.Environment.IsNull() {
			*environment57 = r.InputSecurityLake.Environment.ValueString()
		} else {
			environment57 = nil
		}
		pqEnabled57 := new(bool)
		if !r.InputSecurityLake.PqEnabled.IsUnknown() && !r.InputSecurityLake.PqEnabled.IsNull() {
			*pqEnabled57 = r.InputSecurityLake.PqEnabled.ValueBool()
		} else {
			pqEnabled57 = nil
		}
		streamtags57 := make([]string, 0, len(r.InputSecurityLake.Streamtags))
		for _, streamtagsItem57 := range r.InputSecurityLake.Streamtags {
			streamtags57 = append(streamtags57, streamtagsItem57.ValueString())
		}
		connections57 := make([]shared.InputSecurityLakeConnections, 0, len(r.InputSecurityLake.Connections))
		for _, connectionsItem57 := range r.InputSecurityLake.Connections {
			pipeline115 := new(string)
			if !connectionsItem57.Pipeline.IsUnknown() && !connectionsItem57.Pipeline.IsNull() {
				*pipeline115 = connectionsItem57.Pipeline.ValueString()
			} else {
				pipeline115 = nil
			}
			var output58 string
			output58 = connectionsItem57.Output.ValueString()

			connections57 = append(connections57, shared.InputSecurityLakeConnections{
				Pipeline: pipeline115,
				Output:   output58,
			})
		}
		var pq57 *shared.InputSecurityLakePq
		if r.InputSecurityLake.Pq != nil {
			mode71 := new(shared.InputSecurityLakeMode)
			if !r.InputSecurityLake.Pq.Mode.IsUnknown() && !r.InputSecurityLake.Pq.Mode.IsNull() {
				*mode71 = shared.InputSecurityLakeMode(r.InputSecurityLake.Pq.Mode.ValueString())
			} else {
				mode71 = nil
			}
			maxBufferSize62 := new(float64)
			if !r.InputSecurityLake.Pq.MaxBufferSize.IsUnknown() && !r.InputSecurityLake.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize62 = r.InputSecurityLake.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize62 = nil
			}
			commitFrequency57 := new(float64)
			if !r.InputSecurityLake.Pq.CommitFrequency.IsUnknown() && !r.InputSecurityLake.Pq.CommitFrequency.IsNull() {
				*commitFrequency57 = r.InputSecurityLake.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency57 = nil
			}
			maxFileSize57 := new(string)
			if !r.InputSecurityLake.Pq.MaxFileSize.IsUnknown() && !r.InputSecurityLake.Pq.MaxFileSize.IsNull() {
				*maxFileSize57 = r.InputSecurityLake.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize57 = nil
			}
			maxSize57 := new(string)
			if !r.InputSecurityLake.Pq.MaxSize.IsUnknown() && !r.InputSecurityLake.Pq.MaxSize.IsNull() {
				*maxSize57 = r.InputSecurityLake.Pq.MaxSize.ValueString()
			} else {
				maxSize57 = nil
			}
			path60 := new(string)
			if !r.InputSecurityLake.Pq.Path.IsUnknown() && !r.InputSecurityLake.Pq.Path.IsNull() {
				*path60 = r.InputSecurityLake.Pq.Path.ValueString()
			} else {
				path60 = nil
			}
			compress66 := new(shared.InputSecurityLakeCompression)
			if !r.InputSecurityLake.Pq.Compress.IsUnknown() && !r.InputSecurityLake.Pq.Compress.IsNull() {
				*compress66 = shared.InputSecurityLakeCompression(r.InputSecurityLake.Pq.Compress.ValueString())
			} else {
				compress66 = nil
			}
			pq57 = &shared.InputSecurityLakePq{
				Mode:            mode71,
				MaxBufferSize:   maxBufferSize62,
				CommitFrequency: commitFrequency57,
				MaxFileSize:     maxFileSize57,
				MaxSize:         maxSize57,
				Path:            path60,
				Compress:        compress66,
			}
		}
		var queueName5 string
		queueName5 = r.InputSecurityLake.QueueName.ValueString()

		fileFilter4 := new(string)
		if !r.InputSecurityLake.FileFilter.IsUnknown() && !r.InputSecurityLake.FileFilter.IsNull() {
			*fileFilter4 = r.InputSecurityLake.FileFilter.ValueString()
		} else {
			fileFilter4 = nil
		}
		awsAccountId4 := new(string)
		if !r.InputSecurityLake.AwsAccountID.IsUnknown() && !r.InputSecurityLake.AwsAccountID.IsNull() {
			*awsAccountId4 = r.InputSecurityLake.AwsAccountID.ValueString()
		} else {
			awsAccountId4 = nil
		}
		awsAuthenticationMethod8 := new(shared.InputSecurityLakeAuthenticationMethod)
		if !r.InputSecurityLake.AwsAuthenticationMethod.IsUnknown() && !r.InputSecurityLake.AwsAuthenticationMethod.IsNull() {
			*awsAuthenticationMethod8 = shared.InputSecurityLakeAuthenticationMethod(r.InputSecurityLake.AwsAuthenticationMethod.ValueString())
		} else {
			awsAuthenticationMethod8 = nil
		}
		awsSecretKey8 := new(string)
		if !r.InputSecurityLake.AwsSecretKey.IsUnknown() && !r.InputSecurityLake.AwsSecretKey.IsNull() {
			*awsSecretKey8 = r.InputSecurityLake.AwsSecretKey.ValueString()
		} else {
			awsSecretKey8 = nil
		}
		region9 := new(string)
		if !r.InputSecurityLake.Region.IsUnknown() && !r.InputSecurityLake.Region.IsNull() {
			*region9 = r.InputSecurityLake.Region.ValueString()
		} else {
			region9 = nil
		}
		endpoint10 := new(string)
		if !r.InputSecurityLake.Endpoint.IsUnknown() && !r.InputSecurityLake.Endpoint.IsNull() {
			*endpoint10 = r.InputSecurityLake.Endpoint.ValueString()
		} else {
			endpoint10 = nil
		}
		signatureVersion8 := new(shared.InputSecurityLakeSignatureVersion)
		if !r.InputSecurityLake.SignatureVersion.IsUnknown() && !r.InputSecurityLake.SignatureVersion.IsNull() {
			*signatureVersion8 = shared.InputSecurityLakeSignatureVersion(r.InputSecurityLake.SignatureVersion.ValueString())
		} else {
			signatureVersion8 = nil
		}
		reuseConnections8 := new(bool)
		if !r.InputSecurityLake.ReuseConnections.IsUnknown() && !r.InputSecurityLake.ReuseConnections.IsNull() {
			*reuseConnections8 = r.InputSecurityLake.ReuseConnections.ValueBool()
		} else {
			reuseConnections8 = nil
		}
		rejectUnauthorized40 := new(bool)
		if !r.InputSecurityLake.RejectUnauthorized.IsUnknown() && !r.InputSecurityLake.RejectUnauthorized.IsNull() {
			*rejectUnauthorized40 = r.InputSecurityLake.RejectUnauthorized.ValueBool()
		} else {
			rejectUnauthorized40 = nil
		}
		breakerRulesets14 := make([]string, 0, len(r.InputSecurityLake.BreakerRulesets))
		for _, breakerRulesetsItem14 := range r.InputSecurityLake.BreakerRulesets {
			breakerRulesets14 = append(breakerRulesets14, breakerRulesetsItem14.ValueString())
		}
		staleChannelFlushMs14 := new(float64)
		if !r.InputSecurityLake.StaleChannelFlushMs.IsUnknown() && !r.InputSecurityLake.StaleChannelFlushMs.IsNull() {
			*staleChannelFlushMs14 = r.InputSecurityLake.StaleChannelFlushMs.ValueFloat64()
		} else {
			staleChannelFlushMs14 = nil
		}
		maxMessages5 := new(float64)
		if !r.InputSecurityLake.MaxMessages.IsUnknown() && !r.InputSecurityLake.MaxMessages.IsNull() {
			*maxMessages5 = r.InputSecurityLake.MaxMessages.ValueFloat64()
		} else {
			maxMessages5 = nil
		}
		visibilityTimeout5 := new(float64)
		if !r.InputSecurityLake.VisibilityTimeout.IsUnknown() && !r.InputSecurityLake.VisibilityTimeout.IsNull() {
			*visibilityTimeout5 = r.InputSecurityLake.VisibilityTimeout.ValueFloat64()
		} else {
			visibilityTimeout5 = nil
		}
		numReceivers5 := new(float64)
		if !r.InputSecurityLake.NumReceivers.IsUnknown() && !r.InputSecurityLake.NumReceivers.IsNull() {
			*numReceivers5 = r.InputSecurityLake.NumReceivers.ValueFloat64()
		} else {
			numReceivers5 = nil
		}
		socketTimeout16 := new(float64)
		if !r.InputSecurityLake.SocketTimeout.IsUnknown() && !r.InputSecurityLake.SocketTimeout.IsNull() {
			*socketTimeout16 = r.InputSecurityLake.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout16 = nil
		}
		skipOnError4 := new(bool)
		if !r.InputSecurityLake.SkipOnError.IsUnknown() && !r.InputSecurityLake.SkipOnError.IsNull() {
			*skipOnError4 = r.InputSecurityLake.SkipOnError.ValueBool()
		} else {
			skipOnError4 = nil
		}
		enableAssumeRole8 := new(bool)
		if !r.InputSecurityLake.EnableAssumeRole.IsUnknown() && !r.InputSecurityLake.EnableAssumeRole.IsNull() {
			*enableAssumeRole8 = r.InputSecurityLake.EnableAssumeRole.ValueBool()
		} else {
			enableAssumeRole8 = nil
		}
		assumeRoleArn8 := new(string)
		if !r.InputSecurityLake.AssumeRoleArn.IsUnknown() && !r.InputSecurityLake.AssumeRoleArn.IsNull() {
			*assumeRoleArn8 = r.InputSecurityLake.AssumeRoleArn.ValueString()
		} else {
			assumeRoleArn8 = nil
		}
		assumeRoleExternalId8 := new(string)
		if !r.InputSecurityLake.AssumeRoleExternalID.IsUnknown() && !r.InputSecurityLake.AssumeRoleExternalID.IsNull() {
			*assumeRoleExternalId8 = r.InputSecurityLake.AssumeRoleExternalID.ValueString()
		} else {
			assumeRoleExternalId8 = nil
		}
		durationSeconds8 := new(float64)
		if !r.InputSecurityLake.DurationSeconds.IsUnknown() && !r.InputSecurityLake.DurationSeconds.IsNull() {
			*durationSeconds8 = r.InputSecurityLake.DurationSeconds.ValueFloat64()
		} else {
			durationSeconds8 = nil
		}
		enableSQSAssumeRole3 := new(bool)
		if !r.InputSecurityLake.EnableSQSAssumeRole.IsUnknown() && !r.InputSecurityLake.EnableSQSAssumeRole.IsNull() {
			*enableSQSAssumeRole3 = r.InputSecurityLake.EnableSQSAssumeRole.ValueBool()
		} else {
			enableSQSAssumeRole3 = nil
		}
		var preprocess5 *shared.InputSecurityLakePreprocess
		if r.InputSecurityLake.Preprocess != nil {
			disabled101 := new(bool)
			if !r.InputSecurityLake.Preprocess.Disabled.IsUnknown() && !r.InputSecurityLake.Preprocess.Disabled.IsNull() {
				*disabled101 = r.InputSecurityLake.Preprocess.Disabled.ValueBool()
			} else {
				disabled101 = nil
			}
			command6 := new(string)
			if !r.InputSecurityLake.Preprocess.Command.IsUnknown() && !r.InputSecurityLake.Preprocess.Command.IsNull() {
				*command6 = r.InputSecurityLake.Preprocess.Command.ValueString()
			} else {
				command6 = nil
			}
			args5 := make([]string, 0, len(r.InputSecurityLake.Preprocess.Args))
			for _, argsItem5 := range r.InputSecurityLake.Preprocess.Args {
				args5 = append(args5, argsItem5.ValueString())
			}
			preprocess5 = &shared.InputSecurityLakePreprocess{
				Disabled: disabled101,
				Command:  command6,
				Args:     args5,
			}
		}
		metadata62 := make([]shared.InputSecurityLakeMetadata, 0, len(r.InputSecurityLake.Metadata))
		for _, metadataItem61 := range r.InputSecurityLake.Metadata {
			var name85 string
			name85 = metadataItem61.Name.ValueString()

			var value80 string
			value80 = metadataItem61.Value.ValueString()

			metadata62 = append(metadata62, shared.InputSecurityLakeMetadata{
				Name:  name85,
				Value: value80,
			})
		}
		parquetChunkSizeMb3 := new(float64)
		if !r.InputSecurityLake.ParquetChunkSizeMB.IsUnknown() && !r.InputSecurityLake.ParquetChunkSizeMB.IsNull() {
			*parquetChunkSizeMb3 = r.InputSecurityLake.ParquetChunkSizeMB.ValueFloat64()
		} else {
			parquetChunkSizeMb3 = nil
		}
		parquetChunkDownloadTimeout3 := new(float64)
		if !r.InputSecurityLake.ParquetChunkDownloadTimeout.IsUnknown() && !r.InputSecurityLake.ParquetChunkDownloadTimeout.IsNull() {
			*parquetChunkDownloadTimeout3 = r.InputSecurityLake.ParquetChunkDownloadTimeout.ValueFloat64()
		} else {
			parquetChunkDownloadTimeout3 = nil
		}
		var checkpointing3 *shared.InputSecurityLakeCheckpointing
		if r.InputSecurityLake.Checkpointing != nil {
			enabled9 := new(bool)
			if !r.InputSecurityLake.Checkpointing.Enabled.IsUnknown() && !r.InputSecurityLake.Checkpointing.Enabled.IsNull() {
				*enabled9 = r.InputSecurityLake.Checkpointing.Enabled.ValueBool()
			} else {
				enabled9 = nil
			}
			retries4 := new(float64)
			if !r.InputSecurityLake.Checkpointing.Retries.IsUnknown() && !r.InputSecurityLake.Checkpointing.Retries.IsNull() {
				*retries4 = r.InputSecurityLake.Checkpointing.Retries.ValueFloat64()
			} else {
				retries4 = nil
			}
			checkpointing3 = &shared.InputSecurityLakeCheckpointing{
				Enabled: enabled9,
				Retries: retries4,
			}
		}
		pollTimeout4 := new(float64)
		if !r.InputSecurityLake.PollTimeout.IsUnknown() && !r.InputSecurityLake.PollTimeout.IsNull() {
			*pollTimeout4 = r.InputSecurityLake.PollTimeout.ValueFloat64()
		} else {
			pollTimeout4 = nil
		}
		encoding3 := new(string)
		if !r.InputSecurityLake.Encoding.IsUnknown() && !r.InputSecurityLake.Encoding.IsNull() {
			*encoding3 = r.InputSecurityLake.Encoding.ValueString()
		} else {
			encoding3 = nil
		}
		description67 := new(string)
		if !r.InputSecurityLake.Description.IsUnknown() && !r.InputSecurityLake.Description.IsNull() {
			*description67 = r.InputSecurityLake.Description.ValueString()
		} else {
			description67 = nil
		}
		awsAPIKey6 := new(string)
		if !r.InputSecurityLake.AwsAPIKey.IsUnknown() && !r.InputSecurityLake.AwsAPIKey.IsNull() {
			*awsAPIKey6 = r.InputSecurityLake.AwsAPIKey.ValueString()
		} else {
			awsAPIKey6 = nil
		}
		awsSecret6 := new(string)
		if !r.InputSecurityLake.AwsSecret.IsUnknown() && !r.InputSecurityLake.AwsSecret.IsNull() {
			*awsSecret6 = r.InputSecurityLake.AwsSecret.ValueString()
		} else {
			awsSecret6 = nil
		}
		var status57 *shared.TFStatus
		if r.InputSecurityLake.Status != nil {
			health57 := shared.Health(r.InputSecurityLake.Status.Health.ValueString())
			metrics57 := make(map[string]interface{})
			for metricsKey57, metricsValue57 := range r.InputSecurityLake.Status.Metrics {
				var metricsInst57 interface{}
				_ = json.Unmarshal([]byte(metricsValue57.ValueString()), &metricsInst57)
				metrics57[metricsKey57] = metricsInst57
			}
			var timestamp57 float64
			timestamp57 = r.InputSecurityLake.Status.Timestamp.ValueFloat64()

			useStatusFromLb57 := new(bool)
			if !r.InputSecurityLake.Status.UseStatusFromLB.IsUnknown() && !r.InputSecurityLake.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb57 = r.InputSecurityLake.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb57 = nil
			}
			status57 = &shared.TFStatus{
				Health:          health57,
				Metrics:         metrics57,
				Timestamp:       timestamp57,
				UseStatusFromLB: useStatusFromLb57,
			}
		}
		inputSecurityLake = &shared.InputSecurityLake{
			ID:                          id57,
			Type:                        typeVar62,
			Disabled:                    disabled100,
			Pipeline:                    pipeline114,
			SendToRoutes:                sendToRoutes57,
			Environment:                 environment57,
			PqEnabled:                   pqEnabled57,
			Streamtags:                  streamtags57,
			Connections:                 connections57,
			Pq:                          pq57,
			QueueName:                   queueName5,
			FileFilter:                  fileFilter4,
			AwsAccountID:                awsAccountId4,
			AwsAuthenticationMethod:     awsAuthenticationMethod8,
			AwsSecretKey:                awsSecretKey8,
			Region:                      region9,
			Endpoint:                    endpoint10,
			SignatureVersion:            signatureVersion8,
			ReuseConnections:            reuseConnections8,
			RejectUnauthorized:          rejectUnauthorized40,
			BreakerRulesets:             breakerRulesets14,
			StaleChannelFlushMs:         staleChannelFlushMs14,
			MaxMessages:                 maxMessages5,
			VisibilityTimeout:           visibilityTimeout5,
			NumReceivers:                numReceivers5,
			SocketTimeout:               socketTimeout16,
			SkipOnError:                 skipOnError4,
			EnableAssumeRole:            enableAssumeRole8,
			AssumeRoleArn:               assumeRoleArn8,
			AssumeRoleExternalID:        assumeRoleExternalId8,
			DurationSeconds:             durationSeconds8,
			EnableSQSAssumeRole:         enableSQSAssumeRole3,
			Preprocess:                  preprocess5,
			Metadata:                    metadata62,
			ParquetChunkSizeMB:          parquetChunkSizeMb3,
			ParquetChunkDownloadTimeout: parquetChunkDownloadTimeout3,
			Checkpointing:               checkpointing3,
			PollTimeout:                 pollTimeout4,
			Encoding:                    encoding3,
			Description:                 description67,
			AwsAPIKey:                   awsAPIKey6,
			AwsSecret:                   awsSecret6,
			Status:                      status57,
		}
	}
	if inputSecurityLake != nil {
		out = shared.Input{
			InputSecurityLake: inputSecurityLake,
		}
	}
	var inputZscalerHec *shared.InputZscalerHec
	if r.InputZscalerHec != nil {
		id58 := new(string)
		if !r.InputZscalerHec.ID.IsUnknown() && !r.InputZscalerHec.ID.IsNull() {
			*id58 = r.InputZscalerHec.ID.ValueString()
		} else {
			id58 = nil
		}
		typeVar63 := new(shared.InputZscalerHecType)
		if !r.InputZscalerHec.Type.IsUnknown() && !r.InputZscalerHec.Type.IsNull() {
			*typeVar63 = shared.InputZscalerHecType(r.InputZscalerHec.Type.ValueString())
		} else {
			typeVar63 = nil
		}
		disabled102 := new(bool)
		if !r.InputZscalerHec.Disabled.IsUnknown() && !r.InputZscalerHec.Disabled.IsNull() {
			*disabled102 = r.InputZscalerHec.Disabled.ValueBool()
		} else {
			disabled102 = nil
		}
		pipeline116 := new(string)
		if !r.InputZscalerHec.Pipeline.IsUnknown() && !r.InputZscalerHec.Pipeline.IsNull() {
			*pipeline116 = r.InputZscalerHec.Pipeline.ValueString()
		} else {
			pipeline116 = nil
		}
		sendToRoutes58 := new(bool)
		if !r.InputZscalerHec.SendToRoutes.IsUnknown() && !r.InputZscalerHec.SendToRoutes.IsNull() {
			*sendToRoutes58 = r.InputZscalerHec.SendToRoutes.ValueBool()
		} else {
			sendToRoutes58 = nil
		}
		environment58 := new(string)
		if !r.InputZscalerHec.Environment.IsUnknown() && !r.InputZscalerHec.Environment.IsNull() {
			*environment58 = r.InputZscalerHec.Environment.ValueString()
		} else {
			environment58 = nil
		}
		pqEnabled58 := new(bool)
		if !r.InputZscalerHec.PqEnabled.IsUnknown() && !r.InputZscalerHec.PqEnabled.IsNull() {
			*pqEnabled58 = r.InputZscalerHec.PqEnabled.ValueBool()
		} else {
			pqEnabled58 = nil
		}
		streamtags58 := make([]string, 0, len(r.InputZscalerHec.Streamtags))
		for _, streamtagsItem58 := range r.InputZscalerHec.Streamtags {
			streamtags58 = append(streamtags58, streamtagsItem58.ValueString())
		}
		connections58 := make([]shared.InputZscalerHecConnections, 0, len(r.InputZscalerHec.Connections))
		for _, connectionsItem58 := range r.InputZscalerHec.Connections {
			pipeline117 := new(string)
			if !connectionsItem58.Pipeline.IsUnknown() && !connectionsItem58.Pipeline.IsNull() {
				*pipeline117 = connectionsItem58.Pipeline.ValueString()
			} else {
				pipeline117 = nil
			}
			var output59 string
			output59 = connectionsItem58.Output.ValueString()

			connections58 = append(connections58, shared.InputZscalerHecConnections{
				Pipeline: pipeline117,
				Output:   output59,
			})
		}
		var pq58 *shared.InputZscalerHecPq
		if r.InputZscalerHec.Pq != nil {
			mode72 := new(shared.InputZscalerHecMode)
			if !r.InputZscalerHec.Pq.Mode.IsUnknown() && !r.InputZscalerHec.Pq.Mode.IsNull() {
				*mode72 = shared.InputZscalerHecMode(r.InputZscalerHec.Pq.Mode.ValueString())
			} else {
				mode72 = nil
			}
			maxBufferSize63 := new(float64)
			if !r.InputZscalerHec.Pq.MaxBufferSize.IsUnknown() && !r.InputZscalerHec.Pq.MaxBufferSize.IsNull() {
				*maxBufferSize63 = r.InputZscalerHec.Pq.MaxBufferSize.ValueFloat64()
			} else {
				maxBufferSize63 = nil
			}
			commitFrequency58 := new(float64)
			if !r.InputZscalerHec.Pq.CommitFrequency.IsUnknown() && !r.InputZscalerHec.Pq.CommitFrequency.IsNull() {
				*commitFrequency58 = r.InputZscalerHec.Pq.CommitFrequency.ValueFloat64()
			} else {
				commitFrequency58 = nil
			}
			maxFileSize58 := new(string)
			if !r.InputZscalerHec.Pq.MaxFileSize.IsUnknown() && !r.InputZscalerHec.Pq.MaxFileSize.IsNull() {
				*maxFileSize58 = r.InputZscalerHec.Pq.MaxFileSize.ValueString()
			} else {
				maxFileSize58 = nil
			}
			maxSize58 := new(string)
			if !r.InputZscalerHec.Pq.MaxSize.IsUnknown() && !r.InputZscalerHec.Pq.MaxSize.IsNull() {
				*maxSize58 = r.InputZscalerHec.Pq.MaxSize.ValueString()
			} else {
				maxSize58 = nil
			}
			path61 := new(string)
			if !r.InputZscalerHec.Pq.Path.IsUnknown() && !r.InputZscalerHec.Pq.Path.IsNull() {
				*path61 = r.InputZscalerHec.Pq.Path.ValueString()
			} else {
				path61 = nil
			}
			compress67 := new(shared.InputZscalerHecCompression)
			if !r.InputZscalerHec.Pq.Compress.IsUnknown() && !r.InputZscalerHec.Pq.Compress.IsNull() {
				*compress67 = shared.InputZscalerHecCompression(r.InputZscalerHec.Pq.Compress.ValueString())
			} else {
				compress67 = nil
			}
			pq58 = &shared.InputZscalerHecPq{
				Mode:            mode72,
				MaxBufferSize:   maxBufferSize63,
				CommitFrequency: commitFrequency58,
				MaxFileSize:     maxFileSize58,
				MaxSize:         maxSize58,
				Path:            path61,
				Compress:        compress67,
			}
		}
		host28 := new(string)
		if !r.InputZscalerHec.Host.IsUnknown() && !r.InputZscalerHec.Host.IsNull() {
			*host28 = r.InputZscalerHec.Host.ValueString()
		} else {
			host28 = nil
		}
		var port23 float64
		port23 = r.InputZscalerHec.Port.ValueFloat64()

		authTokens7 := make([]shared.InputZscalerHecAuthTokens, 0, len(r.InputZscalerHec.AuthTokens))
		for _, authTokensItem7 := range r.InputZscalerHec.AuthTokens {
			authType21 := new(shared.InputZscalerHecAuthenticationMethod)
			if !authTokensItem7.AuthType.IsUnknown() && !authTokensItem7.AuthType.IsNull() {
				*authType21 = shared.InputZscalerHecAuthenticationMethod(authTokensItem7.AuthType.ValueString())
			} else {
				authType21 = nil
			}
			var tokenSecret1 interface{}
			if !authTokensItem7.TokenSecret.IsUnknown() && !authTokensItem7.TokenSecret.IsNull() {
				_ = json.Unmarshal([]byte(authTokensItem7.TokenSecret.ValueString()), &tokenSecret1)
			}
			var token12 interface{}
			_ = json.Unmarshal([]byte(authTokensItem7.Token.ValueString()), &token12)
			enabled10 := new(bool)
			if !authTokensItem7.Enabled.IsUnknown() && !authTokensItem7.Enabled.IsNull() {
				*enabled10 = authTokensItem7.Enabled.ValueBool()
			} else {
				enabled10 = nil
			}
			description68 := new(string)
			if !authTokensItem7.Description.IsUnknown() && !authTokensItem7.Description.IsNull() {
				*description68 = authTokensItem7.Description.ValueString()
			} else {
				description68 = nil
			}
			allowedIndexesAtToken1 := make([]string, 0, len(authTokensItem7.AllowedIndexesAtToken))
			for _, allowedIndexesAtTokenItem1 := range authTokensItem7.AllowedIndexesAtToken {
				allowedIndexesAtToken1 = append(allowedIndexesAtToken1, allowedIndexesAtTokenItem1.ValueString())
			}
			metadata63 := make([]shared.InputZscalerHecInputMetadata, 0, len(authTokensItem7.Metadata))
			for _, metadataItem62 := range authTokensItem7.Metadata {
				var name86 string
				name86 = metadataItem62.Name.ValueString()

				var value81 string
				value81 = metadataItem62.Value.ValueString()

				metadata63 = append(metadata63, shared.InputZscalerHecInputMetadata{
					Name:  name86,
					Value: value81,
				})
			}
			authTokens7 = append(authTokens7, shared.InputZscalerHecAuthTokens{
				AuthType:              authType21,
				TokenSecret:           tokenSecret1,
				Token:                 token12,
				Enabled:               enabled10,
				Description:           description68,
				AllowedIndexesAtToken: allowedIndexesAtToken1,
				Metadata:              metadata63,
			})
		}
		var tls29 *shared.InputZscalerHecTLSSettingsServerSide
		if r.InputZscalerHec.TLS != nil {
			disabled103 := new(bool)
			if !r.InputZscalerHec.TLS.Disabled.IsUnknown() && !r.InputZscalerHec.TLS.Disabled.IsNull() {
				*disabled103 = r.InputZscalerHec.TLS.Disabled.ValueBool()
			} else {
				disabled103 = nil
			}
			certificateName30 := new(string)
			if !r.InputZscalerHec.TLS.CertificateName.IsUnknown() && !r.InputZscalerHec.TLS.CertificateName.IsNull() {
				*certificateName30 = r.InputZscalerHec.TLS.CertificateName.ValueString()
			} else {
				certificateName30 = nil
			}
			privKeyPath29 := new(string)
			if !r.InputZscalerHec.TLS.PrivKeyPath.IsUnknown() && !r.InputZscalerHec.TLS.PrivKeyPath.IsNull() {
				*privKeyPath29 = r.InputZscalerHec.TLS.PrivKeyPath.ValueString()
			} else {
				privKeyPath29 = nil
			}
			passphrase28 := new(string)
			if !r.InputZscalerHec.TLS.Passphrase.IsUnknown() && !r.InputZscalerHec.TLS.Passphrase.IsNull() {
				*passphrase28 = r.InputZscalerHec.TLS.Passphrase.ValueString()
			} else {
				passphrase28 = nil
			}
			certPath29 := new(string)
			if !r.InputZscalerHec.TLS.CertPath.IsUnknown() && !r.InputZscalerHec.TLS.CertPath.IsNull() {
				*certPath29 = r.InputZscalerHec.TLS.CertPath.ValueString()
			} else {
				certPath29 = nil
			}
			caPath28 := new(string)
			if !r.InputZscalerHec.TLS.CaPath.IsUnknown() && !r.InputZscalerHec.TLS.CaPath.IsNull() {
				*caPath28 = r.InputZscalerHec.TLS.CaPath.ValueString()
			} else {
				caPath28 = nil
			}
			requestCert22 := new(bool)
			if !r.InputZscalerHec.TLS.RequestCert.IsUnknown() && !r.InputZscalerHec.TLS.RequestCert.IsNull() {
				*requestCert22 = r.InputZscalerHec.TLS.RequestCert.ValueBool()
			} else {
				requestCert22 = nil
			}
			var rejectUnauthorized41 interface{}
			if !r.InputZscalerHec.TLS.RejectUnauthorized.IsUnknown() && !r.InputZscalerHec.TLS.RejectUnauthorized.IsNull() {
				_ = json.Unmarshal([]byte(r.InputZscalerHec.TLS.RejectUnauthorized.ValueString()), &rejectUnauthorized41)
			}
			var commonNameRegex22 interface{}
			if !r.InputZscalerHec.TLS.CommonNameRegex.IsUnknown() && !r.InputZscalerHec.TLS.CommonNameRegex.IsNull() {
				_ = json.Unmarshal([]byte(r.InputZscalerHec.TLS.CommonNameRegex.ValueString()), &commonNameRegex22)
			}
			minVersion28 := new(shared.InputZscalerHecMinimumTLSVersion)
			if !r.InputZscalerHec.TLS.MinVersion.IsUnknown() && !r.InputZscalerHec.TLS.MinVersion.IsNull() {
				*minVersion28 = shared.InputZscalerHecMinimumTLSVersion(r.InputZscalerHec.TLS.MinVersion.ValueString())
			} else {
				minVersion28 = nil
			}
			maxVersion28 := new(shared.InputZscalerHecMaximumTLSVersion)
			if !r.InputZscalerHec.TLS.MaxVersion.IsUnknown() && !r.InputZscalerHec.TLS.MaxVersion.IsNull() {
				*maxVersion28 = shared.InputZscalerHecMaximumTLSVersion(r.InputZscalerHec.TLS.MaxVersion.ValueString())
			} else {
				maxVersion28 = nil
			}
			tls29 = &shared.InputZscalerHecTLSSettingsServerSide{
				Disabled:           disabled103,
				CertificateName:    certificateName30,
				PrivKeyPath:        privKeyPath29,
				Passphrase:         passphrase28,
				CertPath:           certPath29,
				CaPath:             caPath28,
				RequestCert:        requestCert22,
				RejectUnauthorized: rejectUnauthorized41,
				CommonNameRegex:    commonNameRegex22,
				MinVersion:         minVersion28,
				MaxVersion:         maxVersion28,
			}
		}
		maxActiveReq13 := new(float64)
		if !r.InputZscalerHec.MaxActiveReq.IsUnknown() && !r.InputZscalerHec.MaxActiveReq.IsNull() {
			*maxActiveReq13 = r.InputZscalerHec.MaxActiveReq.ValueFloat64()
		} else {
			maxActiveReq13 = nil
		}
		maxRequestsPerSocket13 := new(int64)
		if !r.InputZscalerHec.MaxRequestsPerSocket.IsUnknown() && !r.InputZscalerHec.MaxRequestsPerSocket.IsNull() {
			*maxRequestsPerSocket13 = r.InputZscalerHec.MaxRequestsPerSocket.ValueInt64()
		} else {
			maxRequestsPerSocket13 = nil
		}
		enableProxyHeader21 := new(bool)
		if !r.InputZscalerHec.EnableProxyHeader.IsUnknown() && !r.InputZscalerHec.EnableProxyHeader.IsNull() {
			*enableProxyHeader21 = r.InputZscalerHec.EnableProxyHeader.ValueBool()
		} else {
			enableProxyHeader21 = nil
		}
		captureHeaders13 := new(bool)
		if !r.InputZscalerHec.CaptureHeaders.IsUnknown() && !r.InputZscalerHec.CaptureHeaders.IsNull() {
			*captureHeaders13 = r.InputZscalerHec.CaptureHeaders.ValueBool()
		} else {
			captureHeaders13 = nil
		}
		activityLogSampleRate12 := new(float64)
		if !r.InputZscalerHec.ActivityLogSampleRate.IsUnknown() && !r.InputZscalerHec.ActivityLogSampleRate.IsNull() {
			*activityLogSampleRate12 = r.InputZscalerHec.ActivityLogSampleRate.ValueFloat64()
		} else {
			activityLogSampleRate12 = nil
		}
		requestTimeout22 := new(float64)
		if !r.InputZscalerHec.RequestTimeout.IsUnknown() && !r.InputZscalerHec.RequestTimeout.IsNull() {
			*requestTimeout22 = r.InputZscalerHec.RequestTimeout.ValueFloat64()
		} else {
			requestTimeout22 = nil
		}
		socketTimeout17 := new(float64)
		if !r.InputZscalerHec.SocketTimeout.IsUnknown() && !r.InputZscalerHec.SocketTimeout.IsNull() {
			*socketTimeout17 = r.InputZscalerHec.SocketTimeout.ValueFloat64()
		} else {
			socketTimeout17 = nil
		}
		keepAliveTimeout13 := new(float64)
		if !r.InputZscalerHec.KeepAliveTimeout.IsUnknown() && !r.InputZscalerHec.KeepAliveTimeout.IsNull() {
			*keepAliveTimeout13 = r.InputZscalerHec.KeepAliveTimeout.ValueFloat64()
		} else {
			keepAliveTimeout13 = nil
		}
		var enableHealthCheck13 interface{}
		if !r.InputZscalerHec.EnableHealthCheck.IsUnknown() && !r.InputZscalerHec.EnableHealthCheck.IsNull() {
			_ = json.Unmarshal([]byte(r.InputZscalerHec.EnableHealthCheck.ValueString()), &enableHealthCheck13)
		}
		ipAllowlistRegex14 := new(string)
		if !r.InputZscalerHec.IPAllowlistRegex.IsUnknown() && !r.InputZscalerHec.IPAllowlistRegex.IsNull() {
			*ipAllowlistRegex14 = r.InputZscalerHec.IPAllowlistRegex.ValueString()
		} else {
			ipAllowlistRegex14 = nil
		}
		ipDenylistRegex14 := new(string)
		if !r.InputZscalerHec.IPDenylistRegex.IsUnknown() && !r.InputZscalerHec.IPDenylistRegex.IsNull() {
			*ipDenylistRegex14 = r.InputZscalerHec.IPDenylistRegex.ValueString()
		} else {
			ipDenylistRegex14 = nil
		}
		hecAPI := new(string)
		if !r.InputZscalerHec.HecAPI.IsUnknown() && !r.InputZscalerHec.HecAPI.IsNull() {
			*hecAPI = r.InputZscalerHec.HecAPI.ValueString()
		} else {
			hecAPI = nil
		}
		metadata64 := make([]shared.InputZscalerHecMetadata, 0, len(r.InputZscalerHec.Metadata))
		for _, metadataItem63 := range r.InputZscalerHec.Metadata {
			var name87 string
			name87 = metadataItem63.Name.ValueString()

			var value82 string
			value82 = metadataItem63.Value.ValueString()

			metadata64 = append(metadata64, shared.InputZscalerHecMetadata{
				Name:  name87,
				Value: value82,
			})
		}
		allowedIndexes1 := make([]string, 0, len(r.InputZscalerHec.AllowedIndexes))
		for _, allowedIndexesItem1 := range r.InputZscalerHec.AllowedIndexes {
			allowedIndexes1 = append(allowedIndexes1, allowedIndexesItem1.ValueString())
		}
		hecAcks := new(bool)
		if !r.InputZscalerHec.HecAcks.IsUnknown() && !r.InputZscalerHec.HecAcks.IsNull() {
			*hecAcks = r.InputZscalerHec.HecAcks.ValueBool()
		} else {
			hecAcks = nil
		}
		accessControlAllowOrigin1 := make([]string, 0, len(r.InputZscalerHec.AccessControlAllowOrigin))
		for _, accessControlAllowOriginItem1 := range r.InputZscalerHec.AccessControlAllowOrigin {
			accessControlAllowOrigin1 = append(accessControlAllowOrigin1, accessControlAllowOriginItem1.ValueString())
		}
		accessControlAllowHeaders1 := make([]string, 0, len(r.InputZscalerHec.AccessControlAllowHeaders))
		for _, accessControlAllowHeadersItem1 := range r.InputZscalerHec.AccessControlAllowHeaders {
			accessControlAllowHeaders1 = append(accessControlAllowHeaders1, accessControlAllowHeadersItem1.ValueString())
		}
		emitTokenMetrics1 := new(bool)
		if !r.InputZscalerHec.EmitTokenMetrics.IsUnknown() && !r.InputZscalerHec.EmitTokenMetrics.IsNull() {
			*emitTokenMetrics1 = r.InputZscalerHec.EmitTokenMetrics.ValueBool()
		} else {
			emitTokenMetrics1 = nil
		}
		description69 := new(string)
		if !r.InputZscalerHec.Description.IsUnknown() && !r.InputZscalerHec.Description.IsNull() {
			*description69 = r.InputZscalerHec.Description.ValueString()
		} else {
			description69 = nil
		}
		var status58 *shared.TFStatus
		if r.InputZscalerHec.Status != nil {
			health58 := shared.Health(r.InputZscalerHec.Status.Health.ValueString())
			metrics58 := make(map[string]interface{})
			for metricsKey58, metricsValue58 := range r.InputZscalerHec.Status.Metrics {
				var metricsInst58 interface{}
				_ = json.Unmarshal([]byte(metricsValue58.ValueString()), &metricsInst58)
				metrics58[metricsKey58] = metricsInst58
			}
			var timestamp58 float64
			timestamp58 = r.InputZscalerHec.Status.Timestamp.ValueFloat64()

			useStatusFromLb58 := new(bool)
			if !r.InputZscalerHec.Status.UseStatusFromLB.IsUnknown() && !r.InputZscalerHec.Status.UseStatusFromLB.IsNull() {
				*useStatusFromLb58 = r.InputZscalerHec.Status.UseStatusFromLB.ValueBool()
			} else {
				useStatusFromLb58 = nil
			}
			status58 = &shared.TFStatus{
				Health:          health58,
				Metrics:         metrics58,
				Timestamp:       timestamp58,
				UseStatusFromLB: useStatusFromLb58,
			}
		}
		inputZscalerHec = &shared.InputZscalerHec{
			ID:                        id58,
			Type:                      typeVar63,
			Disabled:                  disabled102,
			Pipeline:                  pipeline116,
			SendToRoutes:              sendToRoutes58,
			Environment:               environment58,
			PqEnabled:                 pqEnabled58,
			Streamtags:                streamtags58,
			Connections:               connections58,
			Pq:                        pq58,
			Host:                      host28,
			Port:                      port23,
			AuthTokens:                authTokens7,
			TLS:                       tls29,
			MaxActiveReq:              maxActiveReq13,
			MaxRequestsPerSocket:      maxRequestsPerSocket13,
			EnableProxyHeader:         enableProxyHeader21,
			CaptureHeaders:            captureHeaders13,
			ActivityLogSampleRate:     activityLogSampleRate12,
			RequestTimeout:            requestTimeout22,
			SocketTimeout:             socketTimeout17,
			KeepAliveTimeout:          keepAliveTimeout13,
			EnableHealthCheck:         enableHealthCheck13,
			IPAllowlistRegex:          ipAllowlistRegex14,
			IPDenylistRegex:           ipDenylistRegex14,
			HecAPI:                    hecAPI,
			Metadata:                  metadata64,
			AllowedIndexes:            allowedIndexes1,
			HecAcks:                   hecAcks,
			AccessControlAllowOrigin:  accessControlAllowOrigin1,
			AccessControlAllowHeaders: accessControlAllowHeaders1,
			EmitTokenMetrics:          emitTokenMetrics1,
			Description:               description69,
			Status:                    status58,
		}
	}
	if inputZscalerHec != nil {
		out = shared.Input{
			InputZscalerHec: inputZscalerHec,
		}
	}

	return &out, diags
}

func (r *SourceResourceModel) ToOperationsCreateInputRequest(ctx context.Context) (*operations.CreateInputRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var groupID string
	groupID = r.GroupID.ValueString()

	input, inputDiags := r.ToSharedInput(ctx)
	diags.Append(inputDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.CreateInputRequest{
		GroupID: groupID,
		Input:   *input,
	}

	return &out, diags
}

func (r *SourceResourceModel) ToOperationsUpdateInputByIDRequest(ctx context.Context) (*operations.UpdateInputByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	input, inputDiags := r.ToSharedInput(ctx)
	diags.Append(inputDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateInputByIDRequest{
		ID:      id,
		GroupID: groupID,
		Input:   *input,
	}

	return &out, diags
}

func (r *SourceResourceModel) ToOperationsDeleteInputByIDRequest(ctx context.Context) (*operations.DeleteInputByIDRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	var groupID string
	groupID = r.GroupID.ValueString()

	out := operations.DeleteInputByIDRequest{
		ID:      id,
		GroupID: groupID,
	}

	return &out, diags
}

func (r *SourceResourceModel) RefreshFromSharedInput(ctx context.Context, resp *shared.Input) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp.InputAppscope != nil {
		r.InputAppscope = &tfTypes.InputAppscope{}
		r.InputAppscope.AuthToken = types.StringPointerValue(resp.InputAppscope.AuthToken)
		if resp.InputAppscope.AuthType != nil {
			r.InputAppscope.AuthType = types.StringValue(string(*resp.InputAppscope.AuthType))
		} else {
			r.InputAppscope.AuthType = types.StringNull()
		}
		r.InputAppscope.BreakerRulesets = make([]types.String, 0, len(resp.InputAppscope.BreakerRulesets))
		for _, v := range resp.InputAppscope.BreakerRulesets {
			r.InputAppscope.BreakerRulesets = append(r.InputAppscope.BreakerRulesets, types.StringValue(v))
		}
		r.InputAppscope.Connections = []tfTypes.InputAppscopeConnections{}
		if len(r.InputAppscope.Connections) > len(resp.InputAppscope.Connections) {
			r.InputAppscope.Connections = r.InputAppscope.Connections[:len(resp.InputAppscope.Connections)]
		}
		for connectionsCount, connectionsItem := range resp.InputAppscope.Connections {
			var connections tfTypes.InputAppscopeConnections
			connections.Output = types.StringValue(connectionsItem.Output)
			connections.Pipeline = types.StringPointerValue(connectionsItem.Pipeline)
			if connectionsCount+1 > len(r.InputAppscope.Connections) {
				r.InputAppscope.Connections = append(r.InputAppscope.Connections, connections)
			} else {
				r.InputAppscope.Connections[connectionsCount].Output = connections.Output
				r.InputAppscope.Connections[connectionsCount].Pipeline = connections.Pipeline
			}
		}
		r.InputAppscope.Description = types.StringPointerValue(resp.InputAppscope.Description)
		r.InputAppscope.Disabled = types.BoolPointerValue(resp.InputAppscope.Disabled)
		r.InputAppscope.EnableProxyHeader = types.BoolPointerValue(resp.InputAppscope.EnableProxyHeader)
		r.InputAppscope.EnableUnixPath = types.BoolPointerValue(resp.InputAppscope.EnableUnixPath)
		r.InputAppscope.Environment = types.StringPointerValue(resp.InputAppscope.Environment)
		if resp.InputAppscope.Filter == nil {
			r.InputAppscope.Filter = nil
		} else {
			r.InputAppscope.Filter = &tfTypes.Filter{}
			r.InputAppscope.Filter.Allow = []tfTypes.Allow{}
			if len(r.InputAppscope.Filter.Allow) > len(resp.InputAppscope.Filter.Allow) {
				r.InputAppscope.Filter.Allow = r.InputAppscope.Filter.Allow[:len(resp.InputAppscope.Filter.Allow)]
			}
			for allowCount, allowItem := range resp.InputAppscope.Filter.Allow {
				var allow tfTypes.Allow
				allow.Arg = types.StringPointerValue(allowItem.Arg)
				allow.Config = types.StringValue(allowItem.Config)
				allow.Procname = types.StringValue(allowItem.Procname)
				if allowCount+1 > len(r.InputAppscope.Filter.Allow) {
					r.InputAppscope.Filter.Allow = append(r.InputAppscope.Filter.Allow, allow)
				} else {
					r.InputAppscope.Filter.Allow[allowCount].Arg = allow.Arg
					r.InputAppscope.Filter.Allow[allowCount].Config = allow.Config
					r.InputAppscope.Filter.Allow[allowCount].Procname = allow.Procname
				}
			}
			r.InputAppscope.Filter.TransportURL = types.StringPointerValue(resp.InputAppscope.Filter.TransportURL)
		}
		r.InputAppscope.Host = types.StringPointerValue(resp.InputAppscope.Host)
		r.InputAppscope.ID = types.StringValue(resp.InputAppscope.ID)
		r.InputAppscope.IPWhitelistRegex = types.StringPointerValue(resp.InputAppscope.IPWhitelistRegex)
		r.InputAppscope.MaxActiveCxn = types.Float64PointerValue(resp.InputAppscope.MaxActiveCxn)
		r.InputAppscope.Metadata = []tfTypes.InputAppscopeMetadata{}
		if len(r.InputAppscope.Metadata) > len(resp.InputAppscope.Metadata) {
			r.InputAppscope.Metadata = r.InputAppscope.Metadata[:len(resp.InputAppscope.Metadata)]
		}
		for metadataCount, metadataItem := range resp.InputAppscope.Metadata {
			var metadata tfTypes.InputAppscopeMetadata
			metadata.Name = types.StringValue(metadataItem.Name)
			metadata.Value = types.StringValue(metadataItem.Value)
			if metadataCount+1 > len(r.InputAppscope.Metadata) {
				r.InputAppscope.Metadata = append(r.InputAppscope.Metadata, metadata)
			} else {
				r.InputAppscope.Metadata[metadataCount].Name = metadata.Name
				r.InputAppscope.Metadata[metadataCount].Value = metadata.Value
			}
		}
		if resp.InputAppscope.Persistence == nil {
			r.InputAppscope.Persistence = nil
		} else {
			r.InputAppscope.Persistence = &tfTypes.InputAppscopePersistence{}
			if resp.InputAppscope.Persistence.Compress != nil {
				r.InputAppscope.Persistence.Compress = types.StringValue(string(*resp.InputAppscope.Persistence.Compress))
			} else {
				r.InputAppscope.Persistence.Compress = types.StringNull()
			}
			r.InputAppscope.Persistence.DestPath = types.StringPointerValue(resp.InputAppscope.Persistence.DestPath)
			r.InputAppscope.Persistence.Enable = types.BoolPointerValue(resp.InputAppscope.Persistence.Enable)
			r.InputAppscope.Persistence.MaxDataSize = types.StringPointerValue(resp.InputAppscope.Persistence.MaxDataSize)
			r.InputAppscope.Persistence.MaxDataTime = types.StringPointerValue(resp.InputAppscope.Persistence.MaxDataTime)
			r.InputAppscope.Persistence.TimeWindow = types.StringPointerValue(resp.InputAppscope.Persistence.TimeWindow)
		}
		r.InputAppscope.Pipeline = types.StringPointerValue(resp.InputAppscope.Pipeline)
		r.InputAppscope.Port = types.Float64PointerValue(resp.InputAppscope.Port)
		if resp.InputAppscope.Pq == nil {
			r.InputAppscope.Pq = nil
		} else {
			r.InputAppscope.Pq = &tfTypes.InputAppscopePq{}
			r.InputAppscope.Pq.CommitFrequency = types.Float64PointerValue(resp.InputAppscope.Pq.CommitFrequency)
			if resp.InputAppscope.Pq.Compress != nil {
				r.InputAppscope.Pq.Compress = types.StringValue(string(*resp.InputAppscope.Pq.Compress))
			} else {
				r.InputAppscope.Pq.Compress = types.StringNull()
			}
			r.InputAppscope.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputAppscope.Pq.MaxBufferSize)
			r.InputAppscope.Pq.MaxFileSize = types.StringPointerValue(resp.InputAppscope.Pq.MaxFileSize)
			r.InputAppscope.Pq.MaxSize = types.StringPointerValue(resp.InputAppscope.Pq.MaxSize)
			if resp.InputAppscope.Pq.Mode != nil {
				r.InputAppscope.Pq.Mode = types.StringValue(string(*resp.InputAppscope.Pq.Mode))
			} else {
				r.InputAppscope.Pq.Mode = types.StringNull()
			}
			r.InputAppscope.Pq.Path = types.StringPointerValue(resp.InputAppscope.Pq.Path)
		}
		r.InputAppscope.PqEnabled = types.BoolPointerValue(resp.InputAppscope.PqEnabled)
		r.InputAppscope.SendToRoutes = types.BoolPointerValue(resp.InputAppscope.SendToRoutes)
		r.InputAppscope.SocketEndingMaxWait = types.Float64PointerValue(resp.InputAppscope.SocketEndingMaxWait)
		r.InputAppscope.SocketIdleTimeout = types.Float64PointerValue(resp.InputAppscope.SocketIdleTimeout)
		r.InputAppscope.SocketMaxLifespan = types.Float64PointerValue(resp.InputAppscope.SocketMaxLifespan)
		r.InputAppscope.StaleChannelFlushMs = types.Float64PointerValue(resp.InputAppscope.StaleChannelFlushMs)
		if resp.InputAppscope.Status == nil {
			r.InputAppscope.Status = nil
		} else {
			r.InputAppscope.Status = &tfTypes.TFStatus{}
			r.InputAppscope.Status.Health = types.StringValue(string(resp.InputAppscope.Status.Health))
			if len(resp.InputAppscope.Status.Metrics) > 0 {
				r.InputAppscope.Status.Metrics = make(map[string]types.String, len(resp.InputAppscope.Status.Metrics))
				for key, value := range resp.InputAppscope.Status.Metrics {
					result, _ := json.Marshal(value)
					r.InputAppscope.Status.Metrics[key] = types.StringValue(string(result))
				}
			}
			r.InputAppscope.Status.Timestamp = types.Float64Value(resp.InputAppscope.Status.Timestamp)
			r.InputAppscope.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputAppscope.Status.UseStatusFromLB)
		}
		r.InputAppscope.Streamtags = make([]types.String, 0, len(resp.InputAppscope.Streamtags))
		for _, v := range resp.InputAppscope.Streamtags {
			r.InputAppscope.Streamtags = append(r.InputAppscope.Streamtags, types.StringValue(v))
		}
		r.InputAppscope.TextSecret = types.StringPointerValue(resp.InputAppscope.TextSecret)
		if resp.InputAppscope.TLS == nil {
			r.InputAppscope.TLS = nil
		} else {
			r.InputAppscope.TLS = &tfTypes.InputAppscopeTLSSettingsServerSide{}
			r.InputAppscope.TLS.CaPath = types.StringPointerValue(resp.InputAppscope.TLS.CaPath)
			r.InputAppscope.TLS.CertificateName = types.StringPointerValue(resp.InputAppscope.TLS.CertificateName)
			r.InputAppscope.TLS.CertPath = types.StringPointerValue(resp.InputAppscope.TLS.CertPath)
			if resp.InputAppscope.TLS.CommonNameRegex == nil {
				r.InputAppscope.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult, _ := json.Marshal(resp.InputAppscope.TLS.CommonNameRegex)
				r.InputAppscope.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult))
			}
			r.InputAppscope.TLS.Disabled = types.BoolPointerValue(resp.InputAppscope.TLS.Disabled)
			if resp.InputAppscope.TLS.MaxVersion != nil {
				r.InputAppscope.TLS.MaxVersion = types.StringValue(string(*resp.InputAppscope.TLS.MaxVersion))
			} else {
				r.InputAppscope.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputAppscope.TLS.MinVersion != nil {
				r.InputAppscope.TLS.MinVersion = types.StringValue(string(*resp.InputAppscope.TLS.MinVersion))
			} else {
				r.InputAppscope.TLS.MinVersion = types.StringNull()
			}
			r.InputAppscope.TLS.Passphrase = types.StringPointerValue(resp.InputAppscope.TLS.Passphrase)
			r.InputAppscope.TLS.PrivKeyPath = types.StringPointerValue(resp.InputAppscope.TLS.PrivKeyPath)
			if resp.InputAppscope.TLS.RejectUnauthorized == nil {
				r.InputAppscope.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult, _ := json.Marshal(resp.InputAppscope.TLS.RejectUnauthorized)
				r.InputAppscope.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult))
			}
			r.InputAppscope.TLS.RequestCert = types.BoolPointerValue(resp.InputAppscope.TLS.RequestCert)
		}
		r.InputAppscope.Type = types.StringValue(string(resp.InputAppscope.Type))
		r.InputAppscope.UnixSocketPath = types.StringPointerValue(resp.InputAppscope.UnixSocketPath)
		r.InputAppscope.UnixSocketPerms = types.StringPointerValue(resp.InputAppscope.UnixSocketPerms)
	}
	if resp.InputAzureBlob != nil {
		r.InputAzureBlob = &tfTypes.InputAzureBlob{}
		if resp.InputAzureBlob.AuthType != nil {
			r.InputAzureBlob.AuthType = types.StringValue(string(*resp.InputAzureBlob.AuthType))
		} else {
			r.InputAzureBlob.AuthType = types.StringNull()
		}
		r.InputAzureBlob.BreakerRulesets = make([]types.String, 0, len(resp.InputAzureBlob.BreakerRulesets))
		for _, v := range resp.InputAzureBlob.BreakerRulesets {
			r.InputAzureBlob.BreakerRulesets = append(r.InputAzureBlob.BreakerRulesets, types.StringValue(v))
		}
		if resp.InputAzureBlob.Certificate == nil {
			r.InputAzureBlob.Certificate = nil
		} else {
			r.InputAzureBlob.Certificate = &tfTypes.InputAzureBlobCertificate{}
			r.InputAzureBlob.Certificate.CertificateName = types.StringValue(resp.InputAzureBlob.Certificate.CertificateName)
		}
		r.InputAzureBlob.ClientID = types.StringPointerValue(resp.InputAzureBlob.ClientID)
		r.InputAzureBlob.ClientTextSecret = types.StringPointerValue(resp.InputAzureBlob.ClientTextSecret)
		r.InputAzureBlob.Connections = []tfTypes.InputAzureBlobConnections{}
		if len(r.InputAzureBlob.Connections) > len(resp.InputAzureBlob.Connections) {
			r.InputAzureBlob.Connections = r.InputAzureBlob.Connections[:len(resp.InputAzureBlob.Connections)]
		}
		for connectionsCount1, connectionsItem1 := range resp.InputAzureBlob.Connections {
			var connections1 tfTypes.InputAzureBlobConnections
			connections1.Output = types.StringValue(connectionsItem1.Output)
			connections1.Pipeline = types.StringPointerValue(connectionsItem1.Pipeline)
			if connectionsCount1+1 > len(r.InputAzureBlob.Connections) {
				r.InputAzureBlob.Connections = append(r.InputAzureBlob.Connections, connections1)
			} else {
				r.InputAzureBlob.Connections[connectionsCount1].Output = connections1.Output
				r.InputAzureBlob.Connections[connectionsCount1].Pipeline = connections1.Pipeline
			}
		}
		r.InputAzureBlob.ConnectionString = types.StringPointerValue(resp.InputAzureBlob.ConnectionString)
		r.InputAzureBlob.Description = types.StringPointerValue(resp.InputAzureBlob.Description)
		r.InputAzureBlob.Disabled = types.BoolPointerValue(resp.InputAzureBlob.Disabled)
		r.InputAzureBlob.EndpointSuffix = types.StringPointerValue(resp.InputAzureBlob.EndpointSuffix)
		r.InputAzureBlob.Environment = types.StringPointerValue(resp.InputAzureBlob.Environment)
		r.InputAzureBlob.FileFilter = types.StringPointerValue(resp.InputAzureBlob.FileFilter)
		r.InputAzureBlob.ID = types.StringPointerValue(resp.InputAzureBlob.ID)
		r.InputAzureBlob.MaxMessages = types.Float64PointerValue(resp.InputAzureBlob.MaxMessages)
		r.InputAzureBlob.Metadata = []tfTypes.InputAzureBlobMetadata{}
		if len(r.InputAzureBlob.Metadata) > len(resp.InputAzureBlob.Metadata) {
			r.InputAzureBlob.Metadata = r.InputAzureBlob.Metadata[:len(resp.InputAzureBlob.Metadata)]
		}
		for metadataCount1, metadataItem1 := range resp.InputAzureBlob.Metadata {
			var metadata1 tfTypes.InputAzureBlobMetadata
			metadata1.Name = types.StringValue(metadataItem1.Name)
			metadata1.Value = types.StringValue(metadataItem1.Value)
			if metadataCount1+1 > len(r.InputAzureBlob.Metadata) {
				r.InputAzureBlob.Metadata = append(r.InputAzureBlob.Metadata, metadata1)
			} else {
				r.InputAzureBlob.Metadata[metadataCount1].Name = metadata1.Name
				r.InputAzureBlob.Metadata[metadataCount1].Value = metadata1.Value
			}
		}
		r.InputAzureBlob.NumReceivers = types.Float64PointerValue(resp.InputAzureBlob.NumReceivers)
		r.InputAzureBlob.ParquetChunkDownloadTimeout = types.Float64PointerValue(resp.InputAzureBlob.ParquetChunkDownloadTimeout)
		r.InputAzureBlob.ParquetChunkSizeMB = types.Float64PointerValue(resp.InputAzureBlob.ParquetChunkSizeMB)
		r.InputAzureBlob.Pipeline = types.StringPointerValue(resp.InputAzureBlob.Pipeline)
		if resp.InputAzureBlob.Pq == nil {
			r.InputAzureBlob.Pq = nil
		} else {
			r.InputAzureBlob.Pq = &tfTypes.InputAzureBlobPq{}
			r.InputAzureBlob.Pq.CommitFrequency = types.Float64PointerValue(resp.InputAzureBlob.Pq.CommitFrequency)
			if resp.InputAzureBlob.Pq.Compress != nil {
				r.InputAzureBlob.Pq.Compress = types.StringValue(string(*resp.InputAzureBlob.Pq.Compress))
			} else {
				r.InputAzureBlob.Pq.Compress = types.StringNull()
			}
			r.InputAzureBlob.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputAzureBlob.Pq.MaxBufferSize)
			r.InputAzureBlob.Pq.MaxFileSize = types.StringPointerValue(resp.InputAzureBlob.Pq.MaxFileSize)
			r.InputAzureBlob.Pq.MaxSize = types.StringPointerValue(resp.InputAzureBlob.Pq.MaxSize)
			if resp.InputAzureBlob.Pq.Mode != nil {
				r.InputAzureBlob.Pq.Mode = types.StringValue(string(*resp.InputAzureBlob.Pq.Mode))
			} else {
				r.InputAzureBlob.Pq.Mode = types.StringNull()
			}
			r.InputAzureBlob.Pq.Path = types.StringPointerValue(resp.InputAzureBlob.Pq.Path)
		}
		r.InputAzureBlob.PqEnabled = types.BoolPointerValue(resp.InputAzureBlob.PqEnabled)
		r.InputAzureBlob.QueueName = types.StringValue(resp.InputAzureBlob.QueueName)
		r.InputAzureBlob.SendToRoutes = types.BoolPointerValue(resp.InputAzureBlob.SendToRoutes)
		r.InputAzureBlob.ServicePeriodSecs = types.Float64PointerValue(resp.InputAzureBlob.ServicePeriodSecs)
		r.InputAzureBlob.SkipOnError = types.BoolPointerValue(resp.InputAzureBlob.SkipOnError)
		r.InputAzureBlob.StaleChannelFlushMs = types.Float64PointerValue(resp.InputAzureBlob.StaleChannelFlushMs)
		if resp.InputAzureBlob.Status == nil {
			r.InputAzureBlob.Status = nil
		} else {
			r.InputAzureBlob.Status = &tfTypes.TFStatus{}
			r.InputAzureBlob.Status.Health = types.StringValue(string(resp.InputAzureBlob.Status.Health))
			if len(resp.InputAzureBlob.Status.Metrics) > 0 {
				r.InputAzureBlob.Status.Metrics = make(map[string]types.String, len(resp.InputAzureBlob.Status.Metrics))
				for key1, value1 := range resp.InputAzureBlob.Status.Metrics {
					result1, _ := json.Marshal(value1)
					r.InputAzureBlob.Status.Metrics[key1] = types.StringValue(string(result1))
				}
			}
			r.InputAzureBlob.Status.Timestamp = types.Float64Value(resp.InputAzureBlob.Status.Timestamp)
			r.InputAzureBlob.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputAzureBlob.Status.UseStatusFromLB)
		}
		r.InputAzureBlob.StorageAccountName = types.StringPointerValue(resp.InputAzureBlob.StorageAccountName)
		r.InputAzureBlob.Streamtags = make([]types.String, 0, len(resp.InputAzureBlob.Streamtags))
		for _, v := range resp.InputAzureBlob.Streamtags {
			r.InputAzureBlob.Streamtags = append(r.InputAzureBlob.Streamtags, types.StringValue(v))
		}
		r.InputAzureBlob.TenantID = types.StringPointerValue(resp.InputAzureBlob.TenantID)
		r.InputAzureBlob.TextSecret = types.StringPointerValue(resp.InputAzureBlob.TextSecret)
		r.InputAzureBlob.Type = types.StringValue(string(resp.InputAzureBlob.Type))
		r.InputAzureBlob.VisibilityTimeout = types.Float64PointerValue(resp.InputAzureBlob.VisibilityTimeout)
	}
	if resp.InputCollection != nil {
		r.InputCollection = &tfTypes.InputCollection{}
		r.InputCollection.BreakerRulesets = make([]types.String, 0, len(resp.InputCollection.BreakerRulesets))
		for _, v := range resp.InputCollection.BreakerRulesets {
			r.InputCollection.BreakerRulesets = append(r.InputCollection.BreakerRulesets, types.StringValue(v))
		}
		r.InputCollection.Connections = []tfTypes.Connections{}
		if len(r.InputCollection.Connections) > len(resp.InputCollection.Connections) {
			r.InputCollection.Connections = r.InputCollection.Connections[:len(resp.InputCollection.Connections)]
		}
		for connectionsCount2, connectionsItem2 := range resp.InputCollection.Connections {
			var connections2 tfTypes.Connections
			connections2.Output = types.StringValue(connectionsItem2.Output)
			connections2.Pipeline = types.StringPointerValue(connectionsItem2.Pipeline)
			if connectionsCount2+1 > len(r.InputCollection.Connections) {
				r.InputCollection.Connections = append(r.InputCollection.Connections, connections2)
			} else {
				r.InputCollection.Connections[connectionsCount2].Output = connections2.Output
				r.InputCollection.Connections[connectionsCount2].Pipeline = connections2.Pipeline
			}
		}
		r.InputCollection.Disabled = types.BoolPointerValue(resp.InputCollection.Disabled)
		r.InputCollection.Environment = types.StringPointerValue(resp.InputCollection.Environment)
		r.InputCollection.ID = types.StringValue(resp.InputCollection.ID)
		r.InputCollection.Metadata = []tfTypes.InputCollectionMetadata{}
		if len(r.InputCollection.Metadata) > len(resp.InputCollection.Metadata) {
			r.InputCollection.Metadata = r.InputCollection.Metadata[:len(resp.InputCollection.Metadata)]
		}
		for metadataCount2, metadataItem2 := range resp.InputCollection.Metadata {
			var metadata2 tfTypes.InputCollectionMetadata
			metadata2.Name = types.StringValue(metadataItem2.Name)
			metadata2.Value = types.StringValue(metadataItem2.Value)
			if metadataCount2+1 > len(r.InputCollection.Metadata) {
				r.InputCollection.Metadata = append(r.InputCollection.Metadata, metadata2)
			} else {
				r.InputCollection.Metadata[metadataCount2].Name = metadata2.Name
				r.InputCollection.Metadata[metadataCount2].Value = metadata2.Value
			}
		}
		r.InputCollection.Output = types.StringPointerValue(resp.InputCollection.Output)
		r.InputCollection.Pipeline = types.StringPointerValue(resp.InputCollection.Pipeline)
		if resp.InputCollection.Pq == nil {
			r.InputCollection.Pq = nil
		} else {
			r.InputCollection.Pq = &tfTypes.Pq{}
			r.InputCollection.Pq.CommitFrequency = types.Float64PointerValue(resp.InputCollection.Pq.CommitFrequency)
			if resp.InputCollection.Pq.Compress != nil {
				r.InputCollection.Pq.Compress = types.StringValue(string(*resp.InputCollection.Pq.Compress))
			} else {
				r.InputCollection.Pq.Compress = types.StringNull()
			}
			r.InputCollection.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputCollection.Pq.MaxBufferSize)
			r.InputCollection.Pq.MaxFileSize = types.StringPointerValue(resp.InputCollection.Pq.MaxFileSize)
			r.InputCollection.Pq.MaxSize = types.StringPointerValue(resp.InputCollection.Pq.MaxSize)
			if resp.InputCollection.Pq.Mode != nil {
				r.InputCollection.Pq.Mode = types.StringValue(string(*resp.InputCollection.Pq.Mode))
			} else {
				r.InputCollection.Pq.Mode = types.StringNull()
			}
			r.InputCollection.Pq.Path = types.StringPointerValue(resp.InputCollection.Pq.Path)
		}
		r.InputCollection.PqEnabled = types.BoolPointerValue(resp.InputCollection.PqEnabled)
		if resp.InputCollection.Preprocess == nil {
			r.InputCollection.Preprocess = nil
		} else {
			r.InputCollection.Preprocess = &tfTypes.InputCollectionPreprocess{}
			r.InputCollection.Preprocess.Args = make([]types.String, 0, len(resp.InputCollection.Preprocess.Args))
			for _, v := range resp.InputCollection.Preprocess.Args {
				r.InputCollection.Preprocess.Args = append(r.InputCollection.Preprocess.Args, types.StringValue(v))
			}
			r.InputCollection.Preprocess.Command = types.StringPointerValue(resp.InputCollection.Preprocess.Command)
			r.InputCollection.Preprocess.Disabled = types.BoolPointerValue(resp.InputCollection.Preprocess.Disabled)
		}
		r.InputCollection.SendToRoutes = types.BoolPointerValue(resp.InputCollection.SendToRoutes)
		r.InputCollection.StaleChannelFlushMs = types.Float64PointerValue(resp.InputCollection.StaleChannelFlushMs)
		if resp.InputCollection.Status == nil {
			r.InputCollection.Status = nil
		} else {
			r.InputCollection.Status = &tfTypes.TFStatus{}
			r.InputCollection.Status.Health = types.StringValue(string(resp.InputCollection.Status.Health))
			if len(resp.InputCollection.Status.Metrics) > 0 {
				r.InputCollection.Status.Metrics = make(map[string]types.String, len(resp.InputCollection.Status.Metrics))
				for key2, value2 := range resp.InputCollection.Status.Metrics {
					result2, _ := json.Marshal(value2)
					r.InputCollection.Status.Metrics[key2] = types.StringValue(string(result2))
				}
			}
			r.InputCollection.Status.Timestamp = types.Float64Value(resp.InputCollection.Status.Timestamp)
			r.InputCollection.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputCollection.Status.UseStatusFromLB)
		}
		r.InputCollection.Streamtags = make([]types.String, 0, len(resp.InputCollection.Streamtags))
		for _, v := range resp.InputCollection.Streamtags {
			r.InputCollection.Streamtags = append(r.InputCollection.Streamtags, types.StringValue(v))
		}
		r.InputCollection.ThrottleRatePerSec = types.StringPointerValue(resp.InputCollection.ThrottleRatePerSec)
		if resp.InputCollection.Type != nil {
			r.InputCollection.Type = types.StringValue(string(*resp.InputCollection.Type))
		} else {
			r.InputCollection.Type = types.StringNull()
		}
	}
	if resp.InputConfluentCloud != nil {
		r.InputConfluentCloud = &tfTypes.InputConfluentCloud{}
		r.InputConfluentCloud.AuthenticationTimeout = types.Float64PointerValue(resp.InputConfluentCloud.AuthenticationTimeout)
		r.InputConfluentCloud.AutoCommitInterval = types.Float64PointerValue(resp.InputConfluentCloud.AutoCommitInterval)
		r.InputConfluentCloud.AutoCommitThreshold = types.Float64PointerValue(resp.InputConfluentCloud.AutoCommitThreshold)
		r.InputConfluentCloud.BackoffRate = types.Float64PointerValue(resp.InputConfluentCloud.BackoffRate)
		r.InputConfluentCloud.Brokers = make([]types.String, 0, len(resp.InputConfluentCloud.Brokers))
		for _, v := range resp.InputConfluentCloud.Brokers {
			r.InputConfluentCloud.Brokers = append(r.InputConfluentCloud.Brokers, types.StringValue(v))
		}
		r.InputConfluentCloud.Connections = []tfTypes.InputConfluentCloudConnections{}
		if len(r.InputConfluentCloud.Connections) > len(resp.InputConfluentCloud.Connections) {
			r.InputConfluentCloud.Connections = r.InputConfluentCloud.Connections[:len(resp.InputConfluentCloud.Connections)]
		}
		for connectionsCount3, connectionsItem3 := range resp.InputConfluentCloud.Connections {
			var connections3 tfTypes.InputConfluentCloudConnections
			connections3.Output = types.StringValue(connectionsItem3.Output)
			connections3.Pipeline = types.StringPointerValue(connectionsItem3.Pipeline)
			if connectionsCount3+1 > len(r.InputConfluentCloud.Connections) {
				r.InputConfluentCloud.Connections = append(r.InputConfluentCloud.Connections, connections3)
			} else {
				r.InputConfluentCloud.Connections[connectionsCount3].Output = connections3.Output
				r.InputConfluentCloud.Connections[connectionsCount3].Pipeline = connections3.Pipeline
			}
		}
		r.InputConfluentCloud.ConnectionTimeout = types.Float64PointerValue(resp.InputConfluentCloud.ConnectionTimeout)
		r.InputConfluentCloud.Description = types.StringPointerValue(resp.InputConfluentCloud.Description)
		r.InputConfluentCloud.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.Disabled)
		r.InputConfluentCloud.Environment = types.StringPointerValue(resp.InputConfluentCloud.Environment)
		r.InputConfluentCloud.FromBeginning = types.BoolPointerValue(resp.InputConfluentCloud.FromBeginning)
		r.InputConfluentCloud.GroupID = types.StringPointerValue(resp.InputConfluentCloud.GroupID)
		r.InputConfluentCloud.HeartbeatInterval = types.Float64PointerValue(resp.InputConfluentCloud.HeartbeatInterval)
		r.InputConfluentCloud.ID = types.StringPointerValue(resp.InputConfluentCloud.ID)
		r.InputConfluentCloud.InitialBackoff = types.Float64PointerValue(resp.InputConfluentCloud.InitialBackoff)
		if resp.InputConfluentCloud.KafkaSchemaRegistry == nil {
			r.InputConfluentCloud.KafkaSchemaRegistry = nil
		} else {
			r.InputConfluentCloud.KafkaSchemaRegistry = &tfTypes.InputConfluentCloudKafkaSchemaRegistryAuthentication{}
			if resp.InputConfluentCloud.KafkaSchemaRegistry.Auth == nil {
				r.InputConfluentCloud.KafkaSchemaRegistry.Auth = nil
			} else {
				r.InputConfluentCloud.KafkaSchemaRegistry.Auth = &tfTypes.InputConfluentCloudAuth{}
				r.InputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.InputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.Auth.Disabled)
			}
			r.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.ConnectionTimeout)
			r.InputConfluentCloud.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.Disabled)
			r.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.MaxRetries)
			r.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.RequestTimeout)
			r.InputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.InputConfluentCloud.KafkaSchemaRegistry.TLS == nil {
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS = nil
			} else {
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS = &tfTypes.InputConfluentCloudInputTLSSettingsClientSide{}
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.CaPath)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertificateName)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.CertPath)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.Disabled)
				if resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.InputConfluentCloud.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.Passphrase)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.InputConfluentCloud.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.InputConfluentCloud.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		r.InputConfluentCloud.MaxBackOff = types.Float64PointerValue(resp.InputConfluentCloud.MaxBackOff)
		r.InputConfluentCloud.MaxBytes = types.Float64PointerValue(resp.InputConfluentCloud.MaxBytes)
		r.InputConfluentCloud.MaxBytesPerPartition = types.Float64PointerValue(resp.InputConfluentCloud.MaxBytesPerPartition)
		r.InputConfluentCloud.MaxRetries = types.Float64PointerValue(resp.InputConfluentCloud.MaxRetries)
		r.InputConfluentCloud.MaxSocketErrors = types.Float64PointerValue(resp.InputConfluentCloud.MaxSocketErrors)
		r.InputConfluentCloud.Metadata = []tfTypes.InputConfluentCloudMetadata{}
		if len(r.InputConfluentCloud.Metadata) > len(resp.InputConfluentCloud.Metadata) {
			r.InputConfluentCloud.Metadata = r.InputConfluentCloud.Metadata[:len(resp.InputConfluentCloud.Metadata)]
		}
		for metadataCount3, metadataItem3 := range resp.InputConfluentCloud.Metadata {
			var metadata3 tfTypes.InputConfluentCloudMetadata
			metadata3.Name = types.StringValue(metadataItem3.Name)
			metadata3.Value = types.StringValue(metadataItem3.Value)
			if metadataCount3+1 > len(r.InputConfluentCloud.Metadata) {
				r.InputConfluentCloud.Metadata = append(r.InputConfluentCloud.Metadata, metadata3)
			} else {
				r.InputConfluentCloud.Metadata[metadataCount3].Name = metadata3.Name
				r.InputConfluentCloud.Metadata[metadataCount3].Value = metadata3.Value
			}
		}
		r.InputConfluentCloud.Pipeline = types.StringPointerValue(resp.InputConfluentCloud.Pipeline)
		if resp.InputConfluentCloud.Pq == nil {
			r.InputConfluentCloud.Pq = nil
		} else {
			r.InputConfluentCloud.Pq = &tfTypes.InputConfluentCloudPq{}
			r.InputConfluentCloud.Pq.CommitFrequency = types.Float64PointerValue(resp.InputConfluentCloud.Pq.CommitFrequency)
			if resp.InputConfluentCloud.Pq.Compress != nil {
				r.InputConfluentCloud.Pq.Compress = types.StringValue(string(*resp.InputConfluentCloud.Pq.Compress))
			} else {
				r.InputConfluentCloud.Pq.Compress = types.StringNull()
			}
			r.InputConfluentCloud.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputConfluentCloud.Pq.MaxBufferSize)
			r.InputConfluentCloud.Pq.MaxFileSize = types.StringPointerValue(resp.InputConfluentCloud.Pq.MaxFileSize)
			r.InputConfluentCloud.Pq.MaxSize = types.StringPointerValue(resp.InputConfluentCloud.Pq.MaxSize)
			if resp.InputConfluentCloud.Pq.Mode != nil {
				r.InputConfluentCloud.Pq.Mode = types.StringValue(string(*resp.InputConfluentCloud.Pq.Mode))
			} else {
				r.InputConfluentCloud.Pq.Mode = types.StringNull()
			}
			r.InputConfluentCloud.Pq.Path = types.StringPointerValue(resp.InputConfluentCloud.Pq.Path)
		}
		r.InputConfluentCloud.PqEnabled = types.BoolPointerValue(resp.InputConfluentCloud.PqEnabled)
		r.InputConfluentCloud.ReauthenticationThreshold = types.Float64PointerValue(resp.InputConfluentCloud.ReauthenticationThreshold)
		r.InputConfluentCloud.RebalanceTimeout = types.Float64PointerValue(resp.InputConfluentCloud.RebalanceTimeout)
		r.InputConfluentCloud.RequestTimeout = types.Float64PointerValue(resp.InputConfluentCloud.RequestTimeout)
		if resp.InputConfluentCloud.Sasl == nil {
			r.InputConfluentCloud.Sasl = nil
		} else {
			r.InputConfluentCloud.Sasl = &tfTypes.InputConfluentCloudAuthentication{}
			r.InputConfluentCloud.Sasl.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.Sasl.Disabled)
			if resp.InputConfluentCloud.Sasl.Mechanism != nil {
				r.InputConfluentCloud.Sasl.Mechanism = types.StringValue(string(*resp.InputConfluentCloud.Sasl.Mechanism))
			} else {
				r.InputConfluentCloud.Sasl.Mechanism = types.StringNull()
			}
		}
		r.InputConfluentCloud.SendToRoutes = types.BoolPointerValue(resp.InputConfluentCloud.SendToRoutes)
		r.InputConfluentCloud.SessionTimeout = types.Float64PointerValue(resp.InputConfluentCloud.SessionTimeout)
		if resp.InputConfluentCloud.Status == nil {
			r.InputConfluentCloud.Status = nil
		} else {
			r.InputConfluentCloud.Status = &tfTypes.TFStatus{}
			r.InputConfluentCloud.Status.Health = types.StringValue(string(resp.InputConfluentCloud.Status.Health))
			if len(resp.InputConfluentCloud.Status.Metrics) > 0 {
				r.InputConfluentCloud.Status.Metrics = make(map[string]types.String, len(resp.InputConfluentCloud.Status.Metrics))
				for key3, value3 := range resp.InputConfluentCloud.Status.Metrics {
					result3, _ := json.Marshal(value3)
					r.InputConfluentCloud.Status.Metrics[key3] = types.StringValue(string(result3))
				}
			}
			r.InputConfluentCloud.Status.Timestamp = types.Float64Value(resp.InputConfluentCloud.Status.Timestamp)
			r.InputConfluentCloud.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputConfluentCloud.Status.UseStatusFromLB)
		}
		r.InputConfluentCloud.Streamtags = make([]types.String, 0, len(resp.InputConfluentCloud.Streamtags))
		for _, v := range resp.InputConfluentCloud.Streamtags {
			r.InputConfluentCloud.Streamtags = append(r.InputConfluentCloud.Streamtags, types.StringValue(v))
		}
		if resp.InputConfluentCloud.TLS == nil {
			r.InputConfluentCloud.TLS = nil
		} else {
			r.InputConfluentCloud.TLS = &tfTypes.InputConfluentCloudTLSSettingsClientSide{}
			r.InputConfluentCloud.TLS.CaPath = types.StringPointerValue(resp.InputConfluentCloud.TLS.CaPath)
			r.InputConfluentCloud.TLS.CertificateName = types.StringPointerValue(resp.InputConfluentCloud.TLS.CertificateName)
			r.InputConfluentCloud.TLS.CertPath = types.StringPointerValue(resp.InputConfluentCloud.TLS.CertPath)
			r.InputConfluentCloud.TLS.Disabled = types.BoolPointerValue(resp.InputConfluentCloud.TLS.Disabled)
			if resp.InputConfluentCloud.TLS.MaxVersion != nil {
				r.InputConfluentCloud.TLS.MaxVersion = types.StringValue(string(*resp.InputConfluentCloud.TLS.MaxVersion))
			} else {
				r.InputConfluentCloud.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputConfluentCloud.TLS.MinVersion != nil {
				r.InputConfluentCloud.TLS.MinVersion = types.StringValue(string(*resp.InputConfluentCloud.TLS.MinVersion))
			} else {
				r.InputConfluentCloud.TLS.MinVersion = types.StringNull()
			}
			r.InputConfluentCloud.TLS.Passphrase = types.StringPointerValue(resp.InputConfluentCloud.TLS.Passphrase)
			r.InputConfluentCloud.TLS.PrivKeyPath = types.StringPointerValue(resp.InputConfluentCloud.TLS.PrivKeyPath)
			r.InputConfluentCloud.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputConfluentCloud.TLS.RejectUnauthorized)
			r.InputConfluentCloud.TLS.Servername = types.StringPointerValue(resp.InputConfluentCloud.TLS.Servername)
		}
		r.InputConfluentCloud.Topics = make([]types.String, 0, len(resp.InputConfluentCloud.Topics))
		for _, v := range resp.InputConfluentCloud.Topics {
			r.InputConfluentCloud.Topics = append(r.InputConfluentCloud.Topics, types.StringValue(v))
		}
		if resp.InputConfluentCloud.Type != nil {
			r.InputConfluentCloud.Type = types.StringValue(string(*resp.InputConfluentCloud.Type))
		} else {
			r.InputConfluentCloud.Type = types.StringNull()
		}
	}
	if resp.InputCribl != nil {
		r.InputCribl = &tfTypes.InputCribl{}
		r.InputCribl.Connections = []tfTypes.InputCriblConnections{}
		if len(r.InputCribl.Connections) > len(resp.InputCribl.Connections) {
			r.InputCribl.Connections = r.InputCribl.Connections[:len(resp.InputCribl.Connections)]
		}
		for connectionsCount4, connectionsItem4 := range resp.InputCribl.Connections {
			var connections4 tfTypes.InputCriblConnections
			connections4.Output = types.StringValue(connectionsItem4.Output)
			connections4.Pipeline = types.StringPointerValue(connectionsItem4.Pipeline)
			if connectionsCount4+1 > len(r.InputCribl.Connections) {
				r.InputCribl.Connections = append(r.InputCribl.Connections, connections4)
			} else {
				r.InputCribl.Connections[connectionsCount4].Output = connections4.Output
				r.InputCribl.Connections[connectionsCount4].Pipeline = connections4.Pipeline
			}
		}
		r.InputCribl.Description = types.StringPointerValue(resp.InputCribl.Description)
		r.InputCribl.Disabled = types.BoolPointerValue(resp.InputCribl.Disabled)
		r.InputCribl.Environment = types.StringPointerValue(resp.InputCribl.Environment)
		r.InputCribl.Filter = types.StringPointerValue(resp.InputCribl.Filter)
		r.InputCribl.ID = types.StringValue(resp.InputCribl.ID)
		r.InputCribl.Metadata = []tfTypes.InputCriblMetadata{}
		if len(r.InputCribl.Metadata) > len(resp.InputCribl.Metadata) {
			r.InputCribl.Metadata = r.InputCribl.Metadata[:len(resp.InputCribl.Metadata)]
		}
		for metadataCount4, metadataItem4 := range resp.InputCribl.Metadata {
			var metadata4 tfTypes.InputCriblMetadata
			metadata4.Name = types.StringValue(metadataItem4.Name)
			metadata4.Value = types.StringValue(metadataItem4.Value)
			if metadataCount4+1 > len(r.InputCribl.Metadata) {
				r.InputCribl.Metadata = append(r.InputCribl.Metadata, metadata4)
			} else {
				r.InputCribl.Metadata[metadataCount4].Name = metadata4.Name
				r.InputCribl.Metadata[metadataCount4].Value = metadata4.Value
			}
		}
		r.InputCribl.Pipeline = types.StringPointerValue(resp.InputCribl.Pipeline)
		if resp.InputCribl.Pq == nil {
			r.InputCribl.Pq = nil
		} else {
			r.InputCribl.Pq = &tfTypes.InputCriblPq{}
			r.InputCribl.Pq.CommitFrequency = types.Float64PointerValue(resp.InputCribl.Pq.CommitFrequency)
			if resp.InputCribl.Pq.Compress != nil {
				r.InputCribl.Pq.Compress = types.StringValue(string(*resp.InputCribl.Pq.Compress))
			} else {
				r.InputCribl.Pq.Compress = types.StringNull()
			}
			r.InputCribl.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputCribl.Pq.MaxBufferSize)
			r.InputCribl.Pq.MaxFileSize = types.StringPointerValue(resp.InputCribl.Pq.MaxFileSize)
			r.InputCribl.Pq.MaxSize = types.StringPointerValue(resp.InputCribl.Pq.MaxSize)
			if resp.InputCribl.Pq.Mode != nil {
				r.InputCribl.Pq.Mode = types.StringValue(string(*resp.InputCribl.Pq.Mode))
			} else {
				r.InputCribl.Pq.Mode = types.StringNull()
			}
			r.InputCribl.Pq.Path = types.StringPointerValue(resp.InputCribl.Pq.Path)
		}
		r.InputCribl.PqEnabled = types.BoolPointerValue(resp.InputCribl.PqEnabled)
		r.InputCribl.SendToRoutes = types.BoolPointerValue(resp.InputCribl.SendToRoutes)
		if resp.InputCribl.Status == nil {
			r.InputCribl.Status = nil
		} else {
			r.InputCribl.Status = &tfTypes.TFStatus{}
			r.InputCribl.Status.Health = types.StringValue(string(resp.InputCribl.Status.Health))
			if len(resp.InputCribl.Status.Metrics) > 0 {
				r.InputCribl.Status.Metrics = make(map[string]types.String, len(resp.InputCribl.Status.Metrics))
				for key4, value4 := range resp.InputCribl.Status.Metrics {
					result4, _ := json.Marshal(value4)
					r.InputCribl.Status.Metrics[key4] = types.StringValue(string(result4))
				}
			}
			r.InputCribl.Status.Timestamp = types.Float64Value(resp.InputCribl.Status.Timestamp)
			r.InputCribl.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputCribl.Status.UseStatusFromLB)
		}
		r.InputCribl.Streamtags = make([]types.String, 0, len(resp.InputCribl.Streamtags))
		for _, v := range resp.InputCribl.Streamtags {
			r.InputCribl.Streamtags = append(r.InputCribl.Streamtags, types.StringValue(v))
		}
		r.InputCribl.Type = types.StringValue(string(resp.InputCribl.Type))
	}
	if resp.InputCriblHTTP != nil {
		r.InputCriblHTTP = &tfTypes.InputCriblHTTP{}
		r.InputCriblHTTP.ActivityLogSampleRate = types.Float64PointerValue(resp.InputCriblHTTP.ActivityLogSampleRate)
		r.InputCriblHTTP.AuthTokens = make([]types.String, 0, len(resp.InputCriblHTTP.AuthTokens))
		for _, v := range resp.InputCriblHTTP.AuthTokens {
			r.InputCriblHTTP.AuthTokens = append(r.InputCriblHTTP.AuthTokens, types.StringValue(v))
		}
		r.InputCriblHTTP.CaptureHeaders = types.BoolPointerValue(resp.InputCriblHTTP.CaptureHeaders)
		r.InputCriblHTTP.Connections = []tfTypes.InputCriblHTTPConnections{}
		if len(r.InputCriblHTTP.Connections) > len(resp.InputCriblHTTP.Connections) {
			r.InputCriblHTTP.Connections = r.InputCriblHTTP.Connections[:len(resp.InputCriblHTTP.Connections)]
		}
		for connectionsCount5, connectionsItem5 := range resp.InputCriblHTTP.Connections {
			var connections5 tfTypes.InputCriblHTTPConnections
			connections5.Output = types.StringValue(connectionsItem5.Output)
			connections5.Pipeline = types.StringPointerValue(connectionsItem5.Pipeline)
			if connectionsCount5+1 > len(r.InputCriblHTTP.Connections) {
				r.InputCriblHTTP.Connections = append(r.InputCriblHTTP.Connections, connections5)
			} else {
				r.InputCriblHTTP.Connections[connectionsCount5].Output = connections5.Output
				r.InputCriblHTTP.Connections[connectionsCount5].Pipeline = connections5.Pipeline
			}
		}
		r.InputCriblHTTP.Description = types.StringPointerValue(resp.InputCriblHTTP.Description)
		r.InputCriblHTTP.Disabled = types.BoolPointerValue(resp.InputCriblHTTP.Disabled)
		r.InputCriblHTTP.EnableHealthCheck = types.BoolPointerValue(resp.InputCriblHTTP.EnableHealthCheck)
		r.InputCriblHTTP.EnableProxyHeader = types.BoolPointerValue(resp.InputCriblHTTP.EnableProxyHeader)
		r.InputCriblHTTP.Environment = types.StringPointerValue(resp.InputCriblHTTP.Environment)
		r.InputCriblHTTP.Host = types.StringPointerValue(resp.InputCriblHTTP.Host)
		r.InputCriblHTTP.ID = types.StringPointerValue(resp.InputCriblHTTP.ID)
		r.InputCriblHTTP.IPAllowlistRegex = types.StringPointerValue(resp.InputCriblHTTP.IPAllowlistRegex)
		r.InputCriblHTTP.IPDenylistRegex = types.StringPointerValue(resp.InputCriblHTTP.IPDenylistRegex)
		r.InputCriblHTTP.KeepAliveTimeout = types.Float64PointerValue(resp.InputCriblHTTP.KeepAliveTimeout)
		r.InputCriblHTTP.MaxActiveReq = types.Float64PointerValue(resp.InputCriblHTTP.MaxActiveReq)
		r.InputCriblHTTP.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputCriblHTTP.MaxRequestsPerSocket)
		r.InputCriblHTTP.Metadata = []tfTypes.InputCriblHTTPMetadata{}
		if len(r.InputCriblHTTP.Metadata) > len(resp.InputCriblHTTP.Metadata) {
			r.InputCriblHTTP.Metadata = r.InputCriblHTTP.Metadata[:len(resp.InputCriblHTTP.Metadata)]
		}
		for metadataCount5, metadataItem5 := range resp.InputCriblHTTP.Metadata {
			var metadata5 tfTypes.InputCriblHTTPMetadata
			metadata5.Name = types.StringValue(metadataItem5.Name)
			metadata5.Value = types.StringValue(metadataItem5.Value)
			if metadataCount5+1 > len(r.InputCriblHTTP.Metadata) {
				r.InputCriblHTTP.Metadata = append(r.InputCriblHTTP.Metadata, metadata5)
			} else {
				r.InputCriblHTTP.Metadata[metadataCount5].Name = metadata5.Name
				r.InputCriblHTTP.Metadata[metadataCount5].Value = metadata5.Value
			}
		}
		r.InputCriblHTTP.Pipeline = types.StringPointerValue(resp.InputCriblHTTP.Pipeline)
		r.InputCriblHTTP.Port = types.Float64Value(resp.InputCriblHTTP.Port)
		if resp.InputCriblHTTP.Pq == nil {
			r.InputCriblHTTP.Pq = nil
		} else {
			r.InputCriblHTTP.Pq = &tfTypes.InputCriblHTTPPq{}
			r.InputCriblHTTP.Pq.CommitFrequency = types.Float64PointerValue(resp.InputCriblHTTP.Pq.CommitFrequency)
			if resp.InputCriblHTTP.Pq.Compress != nil {
				r.InputCriblHTTP.Pq.Compress = types.StringValue(string(*resp.InputCriblHTTP.Pq.Compress))
			} else {
				r.InputCriblHTTP.Pq.Compress = types.StringNull()
			}
			r.InputCriblHTTP.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputCriblHTTP.Pq.MaxBufferSize)
			r.InputCriblHTTP.Pq.MaxFileSize = types.StringPointerValue(resp.InputCriblHTTP.Pq.MaxFileSize)
			r.InputCriblHTTP.Pq.MaxSize = types.StringPointerValue(resp.InputCriblHTTP.Pq.MaxSize)
			if resp.InputCriblHTTP.Pq.Mode != nil {
				r.InputCriblHTTP.Pq.Mode = types.StringValue(string(*resp.InputCriblHTTP.Pq.Mode))
			} else {
				r.InputCriblHTTP.Pq.Mode = types.StringNull()
			}
			r.InputCriblHTTP.Pq.Path = types.StringPointerValue(resp.InputCriblHTTP.Pq.Path)
		}
		r.InputCriblHTTP.PqEnabled = types.BoolPointerValue(resp.InputCriblHTTP.PqEnabled)
		r.InputCriblHTTP.RequestTimeout = types.Float64PointerValue(resp.InputCriblHTTP.RequestTimeout)
		r.InputCriblHTTP.SendToRoutes = types.BoolPointerValue(resp.InputCriblHTTP.SendToRoutes)
		r.InputCriblHTTP.SocketTimeout = types.Float64PointerValue(resp.InputCriblHTTP.SocketTimeout)
		if resp.InputCriblHTTP.Status == nil {
			r.InputCriblHTTP.Status = nil
		} else {
			r.InputCriblHTTP.Status = &tfTypes.TFStatus{}
			r.InputCriblHTTP.Status.Health = types.StringValue(string(resp.InputCriblHTTP.Status.Health))
			if len(resp.InputCriblHTTP.Status.Metrics) > 0 {
				r.InputCriblHTTP.Status.Metrics = make(map[string]types.String, len(resp.InputCriblHTTP.Status.Metrics))
				for key5, value5 := range resp.InputCriblHTTP.Status.Metrics {
					result5, _ := json.Marshal(value5)
					r.InputCriblHTTP.Status.Metrics[key5] = types.StringValue(string(result5))
				}
			}
			r.InputCriblHTTP.Status.Timestamp = types.Float64Value(resp.InputCriblHTTP.Status.Timestamp)
			r.InputCriblHTTP.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputCriblHTTP.Status.UseStatusFromLB)
		}
		r.InputCriblHTTP.Streamtags = make([]types.String, 0, len(resp.InputCriblHTTP.Streamtags))
		for _, v := range resp.InputCriblHTTP.Streamtags {
			r.InputCriblHTTP.Streamtags = append(r.InputCriblHTTP.Streamtags, types.StringValue(v))
		}
		if resp.InputCriblHTTP.TLS == nil {
			r.InputCriblHTTP.TLS = nil
		} else {
			r.InputCriblHTTP.TLS = &tfTypes.InputCriblHTTPTLSSettingsServerSide{}
			r.InputCriblHTTP.TLS.CaPath = types.StringPointerValue(resp.InputCriblHTTP.TLS.CaPath)
			r.InputCriblHTTP.TLS.CertificateName = types.StringPointerValue(resp.InputCriblHTTP.TLS.CertificateName)
			r.InputCriblHTTP.TLS.CertPath = types.StringPointerValue(resp.InputCriblHTTP.TLS.CertPath)
			if resp.InputCriblHTTP.TLS.CommonNameRegex == nil {
				r.InputCriblHTTP.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult1, _ := json.Marshal(resp.InputCriblHTTP.TLS.CommonNameRegex)
				r.InputCriblHTTP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult1))
			}
			r.InputCriblHTTP.TLS.Disabled = types.BoolPointerValue(resp.InputCriblHTTP.TLS.Disabled)
			if resp.InputCriblHTTP.TLS.MaxVersion != nil {
				r.InputCriblHTTP.TLS.MaxVersion = types.StringValue(string(*resp.InputCriblHTTP.TLS.MaxVersion))
			} else {
				r.InputCriblHTTP.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputCriblHTTP.TLS.MinVersion != nil {
				r.InputCriblHTTP.TLS.MinVersion = types.StringValue(string(*resp.InputCriblHTTP.TLS.MinVersion))
			} else {
				r.InputCriblHTTP.TLS.MinVersion = types.StringNull()
			}
			r.InputCriblHTTP.TLS.Passphrase = types.StringPointerValue(resp.InputCriblHTTP.TLS.Passphrase)
			r.InputCriblHTTP.TLS.PrivKeyPath = types.StringPointerValue(resp.InputCriblHTTP.TLS.PrivKeyPath)
			if resp.InputCriblHTTP.TLS.RejectUnauthorized == nil {
				r.InputCriblHTTP.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult1, _ := json.Marshal(resp.InputCriblHTTP.TLS.RejectUnauthorized)
				r.InputCriblHTTP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult1))
			}
			r.InputCriblHTTP.TLS.RequestCert = types.BoolPointerValue(resp.InputCriblHTTP.TLS.RequestCert)
		}
		if resp.InputCriblHTTP.Type != nil {
			r.InputCriblHTTP.Type = types.StringValue(string(*resp.InputCriblHTTP.Type))
		} else {
			r.InputCriblHTTP.Type = types.StringNull()
		}
	}
	if resp.InputCriblmetrics != nil {
		r.InputCriblmetrics = &tfTypes.InputCriblmetrics{}
		r.InputCriblmetrics.Connections = []tfTypes.InputCriblmetricsConnections{}
		if len(r.InputCriblmetrics.Connections) > len(resp.InputCriblmetrics.Connections) {
			r.InputCriblmetrics.Connections = r.InputCriblmetrics.Connections[:len(resp.InputCriblmetrics.Connections)]
		}
		for connectionsCount6, connectionsItem6 := range resp.InputCriblmetrics.Connections {
			var connections6 tfTypes.InputCriblmetricsConnections
			connections6.Output = types.StringValue(connectionsItem6.Output)
			connections6.Pipeline = types.StringPointerValue(connectionsItem6.Pipeline)
			if connectionsCount6+1 > len(r.InputCriblmetrics.Connections) {
				r.InputCriblmetrics.Connections = append(r.InputCriblmetrics.Connections, connections6)
			} else {
				r.InputCriblmetrics.Connections[connectionsCount6].Output = connections6.Output
				r.InputCriblmetrics.Connections[connectionsCount6].Pipeline = connections6.Pipeline
			}
		}
		r.InputCriblmetrics.Description = types.StringPointerValue(resp.InputCriblmetrics.Description)
		r.InputCriblmetrics.Disabled = types.BoolPointerValue(resp.InputCriblmetrics.Disabled)
		r.InputCriblmetrics.Environment = types.StringPointerValue(resp.InputCriblmetrics.Environment)
		r.InputCriblmetrics.FullFidelity = types.BoolPointerValue(resp.InputCriblmetrics.FullFidelity)
		r.InputCriblmetrics.ID = types.StringValue(resp.InputCriblmetrics.ID)
		r.InputCriblmetrics.Metadata = []tfTypes.InputCriblmetricsMetadata{}
		if len(r.InputCriblmetrics.Metadata) > len(resp.InputCriblmetrics.Metadata) {
			r.InputCriblmetrics.Metadata = r.InputCriblmetrics.Metadata[:len(resp.InputCriblmetrics.Metadata)]
		}
		for metadataCount6, metadataItem6 := range resp.InputCriblmetrics.Metadata {
			var metadata6 tfTypes.InputCriblmetricsMetadata
			metadata6.Name = types.StringValue(metadataItem6.Name)
			metadata6.Value = types.StringValue(metadataItem6.Value)
			if metadataCount6+1 > len(r.InputCriblmetrics.Metadata) {
				r.InputCriblmetrics.Metadata = append(r.InputCriblmetrics.Metadata, metadata6)
			} else {
				r.InputCriblmetrics.Metadata[metadataCount6].Name = metadata6.Name
				r.InputCriblmetrics.Metadata[metadataCount6].Value = metadata6.Value
			}
		}
		r.InputCriblmetrics.Pipeline = types.StringPointerValue(resp.InputCriblmetrics.Pipeline)
		if resp.InputCriblmetrics.Pq == nil {
			r.InputCriblmetrics.Pq = nil
		} else {
			r.InputCriblmetrics.Pq = &tfTypes.InputCriblmetricsPq{}
			r.InputCriblmetrics.Pq.CommitFrequency = types.Float64PointerValue(resp.InputCriblmetrics.Pq.CommitFrequency)
			if resp.InputCriblmetrics.Pq.Compress != nil {
				r.InputCriblmetrics.Pq.Compress = types.StringValue(string(*resp.InputCriblmetrics.Pq.Compress))
			} else {
				r.InputCriblmetrics.Pq.Compress = types.StringNull()
			}
			r.InputCriblmetrics.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputCriblmetrics.Pq.MaxBufferSize)
			r.InputCriblmetrics.Pq.MaxFileSize = types.StringPointerValue(resp.InputCriblmetrics.Pq.MaxFileSize)
			r.InputCriblmetrics.Pq.MaxSize = types.StringPointerValue(resp.InputCriblmetrics.Pq.MaxSize)
			if resp.InputCriblmetrics.Pq.Mode != nil {
				r.InputCriblmetrics.Pq.Mode = types.StringValue(string(*resp.InputCriblmetrics.Pq.Mode))
			} else {
				r.InputCriblmetrics.Pq.Mode = types.StringNull()
			}
			r.InputCriblmetrics.Pq.Path = types.StringPointerValue(resp.InputCriblmetrics.Pq.Path)
		}
		r.InputCriblmetrics.PqEnabled = types.BoolPointerValue(resp.InputCriblmetrics.PqEnabled)
		r.InputCriblmetrics.Prefix = types.StringPointerValue(resp.InputCriblmetrics.Prefix)
		r.InputCriblmetrics.SendToRoutes = types.BoolPointerValue(resp.InputCriblmetrics.SendToRoutes)
		if resp.InputCriblmetrics.Status == nil {
			r.InputCriblmetrics.Status = nil
		} else {
			r.InputCriblmetrics.Status = &tfTypes.TFStatus{}
			r.InputCriblmetrics.Status.Health = types.StringValue(string(resp.InputCriblmetrics.Status.Health))
			if len(resp.InputCriblmetrics.Status.Metrics) > 0 {
				r.InputCriblmetrics.Status.Metrics = make(map[string]types.String, len(resp.InputCriblmetrics.Status.Metrics))
				for key6, value6 := range resp.InputCriblmetrics.Status.Metrics {
					result6, _ := json.Marshal(value6)
					r.InputCriblmetrics.Status.Metrics[key6] = types.StringValue(string(result6))
				}
			}
			r.InputCriblmetrics.Status.Timestamp = types.Float64Value(resp.InputCriblmetrics.Status.Timestamp)
			r.InputCriblmetrics.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputCriblmetrics.Status.UseStatusFromLB)
		}
		r.InputCriblmetrics.Streamtags = make([]types.String, 0, len(resp.InputCriblmetrics.Streamtags))
		for _, v := range resp.InputCriblmetrics.Streamtags {
			r.InputCriblmetrics.Streamtags = append(r.InputCriblmetrics.Streamtags, types.StringValue(v))
		}
		r.InputCriblmetrics.Type = types.StringValue(string(resp.InputCriblmetrics.Type))
	}
	if resp.InputCriblTCP != nil {
		r.InputCriblTCP = &tfTypes.InputCriblTCP{}
		r.InputCriblTCP.Connections = []tfTypes.InputCriblTCPConnections{}
		if len(r.InputCriblTCP.Connections) > len(resp.InputCriblTCP.Connections) {
			r.InputCriblTCP.Connections = r.InputCriblTCP.Connections[:len(resp.InputCriblTCP.Connections)]
		}
		for connectionsCount7, connectionsItem7 := range resp.InputCriblTCP.Connections {
			var connections7 tfTypes.InputCriblTCPConnections
			connections7.Output = types.StringValue(connectionsItem7.Output)
			connections7.Pipeline = types.StringPointerValue(connectionsItem7.Pipeline)
			if connectionsCount7+1 > len(r.InputCriblTCP.Connections) {
				r.InputCriblTCP.Connections = append(r.InputCriblTCP.Connections, connections7)
			} else {
				r.InputCriblTCP.Connections[connectionsCount7].Output = connections7.Output
				r.InputCriblTCP.Connections[connectionsCount7].Pipeline = connections7.Pipeline
			}
		}
		r.InputCriblTCP.Description = types.StringPointerValue(resp.InputCriblTCP.Description)
		r.InputCriblTCP.Disabled = types.BoolPointerValue(resp.InputCriblTCP.Disabled)
		r.InputCriblTCP.EnableLoadBalancing = types.BoolPointerValue(resp.InputCriblTCP.EnableLoadBalancing)
		r.InputCriblTCP.EnableProxyHeader = types.BoolPointerValue(resp.InputCriblTCP.EnableProxyHeader)
		r.InputCriblTCP.Environment = types.StringPointerValue(resp.InputCriblTCP.Environment)
		r.InputCriblTCP.Host = types.StringPointerValue(resp.InputCriblTCP.Host)
		r.InputCriblTCP.ID = types.StringPointerValue(resp.InputCriblTCP.ID)
		r.InputCriblTCP.MaxActiveCxn = types.Float64PointerValue(resp.InputCriblTCP.MaxActiveCxn)
		r.InputCriblTCP.Metadata = []tfTypes.InputCriblTCPMetadata{}
		if len(r.InputCriblTCP.Metadata) > len(resp.InputCriblTCP.Metadata) {
			r.InputCriblTCP.Metadata = r.InputCriblTCP.Metadata[:len(resp.InputCriblTCP.Metadata)]
		}
		for metadataCount7, metadataItem7 := range resp.InputCriblTCP.Metadata {
			var metadata7 tfTypes.InputCriblTCPMetadata
			metadata7.Name = types.StringValue(metadataItem7.Name)
			metadata7.Value = types.StringValue(metadataItem7.Value)
			if metadataCount7+1 > len(r.InputCriblTCP.Metadata) {
				r.InputCriblTCP.Metadata = append(r.InputCriblTCP.Metadata, metadata7)
			} else {
				r.InputCriblTCP.Metadata[metadataCount7].Name = metadata7.Name
				r.InputCriblTCP.Metadata[metadataCount7].Value = metadata7.Value
			}
		}
		r.InputCriblTCP.Pipeline = types.StringPointerValue(resp.InputCriblTCP.Pipeline)
		r.InputCriblTCP.Port = types.Float64Value(resp.InputCriblTCP.Port)
		if resp.InputCriblTCP.Pq == nil {
			r.InputCriblTCP.Pq = nil
		} else {
			r.InputCriblTCP.Pq = &tfTypes.InputCriblTCPPq{}
			r.InputCriblTCP.Pq.CommitFrequency = types.Float64PointerValue(resp.InputCriblTCP.Pq.CommitFrequency)
			if resp.InputCriblTCP.Pq.Compress != nil {
				r.InputCriblTCP.Pq.Compress = types.StringValue(string(*resp.InputCriblTCP.Pq.Compress))
			} else {
				r.InputCriblTCP.Pq.Compress = types.StringNull()
			}
			r.InputCriblTCP.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputCriblTCP.Pq.MaxBufferSize)
			r.InputCriblTCP.Pq.MaxFileSize = types.StringPointerValue(resp.InputCriblTCP.Pq.MaxFileSize)
			r.InputCriblTCP.Pq.MaxSize = types.StringPointerValue(resp.InputCriblTCP.Pq.MaxSize)
			if resp.InputCriblTCP.Pq.Mode != nil {
				r.InputCriblTCP.Pq.Mode = types.StringValue(string(*resp.InputCriblTCP.Pq.Mode))
			} else {
				r.InputCriblTCP.Pq.Mode = types.StringNull()
			}
			r.InputCriblTCP.Pq.Path = types.StringPointerValue(resp.InputCriblTCP.Pq.Path)
		}
		r.InputCriblTCP.PqEnabled = types.BoolPointerValue(resp.InputCriblTCP.PqEnabled)
		r.InputCriblTCP.SendToRoutes = types.BoolPointerValue(resp.InputCriblTCP.SendToRoutes)
		r.InputCriblTCP.SocketEndingMaxWait = types.Float64PointerValue(resp.InputCriblTCP.SocketEndingMaxWait)
		r.InputCriblTCP.SocketIdleTimeout = types.Float64PointerValue(resp.InputCriblTCP.SocketIdleTimeout)
		r.InputCriblTCP.SocketMaxLifespan = types.Float64PointerValue(resp.InputCriblTCP.SocketMaxLifespan)
		if resp.InputCriblTCP.Status == nil {
			r.InputCriblTCP.Status = nil
		} else {
			r.InputCriblTCP.Status = &tfTypes.TFStatus{}
			r.InputCriblTCP.Status.Health = types.StringValue(string(resp.InputCriblTCP.Status.Health))
			if len(resp.InputCriblTCP.Status.Metrics) > 0 {
				r.InputCriblTCP.Status.Metrics = make(map[string]types.String, len(resp.InputCriblTCP.Status.Metrics))
				for key7, value7 := range resp.InputCriblTCP.Status.Metrics {
					result7, _ := json.Marshal(value7)
					r.InputCriblTCP.Status.Metrics[key7] = types.StringValue(string(result7))
				}
			}
			r.InputCriblTCP.Status.Timestamp = types.Float64Value(resp.InputCriblTCP.Status.Timestamp)
			r.InputCriblTCP.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputCriblTCP.Status.UseStatusFromLB)
		}
		r.InputCriblTCP.Streamtags = make([]types.String, 0, len(resp.InputCriblTCP.Streamtags))
		for _, v := range resp.InputCriblTCP.Streamtags {
			r.InputCriblTCP.Streamtags = append(r.InputCriblTCP.Streamtags, types.StringValue(v))
		}
		if resp.InputCriblTCP.TLS == nil {
			r.InputCriblTCP.TLS = nil
		} else {
			r.InputCriblTCP.TLS = &tfTypes.InputCriblTCPTLSSettingsServerSide{}
			r.InputCriblTCP.TLS.CaPath = types.StringPointerValue(resp.InputCriblTCP.TLS.CaPath)
			r.InputCriblTCP.TLS.CertificateName = types.StringPointerValue(resp.InputCriblTCP.TLS.CertificateName)
			r.InputCriblTCP.TLS.CertPath = types.StringPointerValue(resp.InputCriblTCP.TLS.CertPath)
			if resp.InputCriblTCP.TLS.CommonNameRegex == nil {
				r.InputCriblTCP.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult2, _ := json.Marshal(resp.InputCriblTCP.TLS.CommonNameRegex)
				r.InputCriblTCP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult2))
			}
			r.InputCriblTCP.TLS.Disabled = types.BoolPointerValue(resp.InputCriblTCP.TLS.Disabled)
			if resp.InputCriblTCP.TLS.MaxVersion != nil {
				r.InputCriblTCP.TLS.MaxVersion = types.StringValue(string(*resp.InputCriblTCP.TLS.MaxVersion))
			} else {
				r.InputCriblTCP.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputCriblTCP.TLS.MinVersion != nil {
				r.InputCriblTCP.TLS.MinVersion = types.StringValue(string(*resp.InputCriblTCP.TLS.MinVersion))
			} else {
				r.InputCriblTCP.TLS.MinVersion = types.StringNull()
			}
			r.InputCriblTCP.TLS.Passphrase = types.StringPointerValue(resp.InputCriblTCP.TLS.Passphrase)
			r.InputCriblTCP.TLS.PrivKeyPath = types.StringPointerValue(resp.InputCriblTCP.TLS.PrivKeyPath)
			if resp.InputCriblTCP.TLS.RejectUnauthorized == nil {
				r.InputCriblTCP.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult2, _ := json.Marshal(resp.InputCriblTCP.TLS.RejectUnauthorized)
				r.InputCriblTCP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult2))
			}
			r.InputCriblTCP.TLS.RequestCert = types.BoolPointerValue(resp.InputCriblTCP.TLS.RequestCert)
		}
		if resp.InputCriblTCP.Type != nil {
			r.InputCriblTCP.Type = types.StringValue(string(*resp.InputCriblTCP.Type))
		} else {
			r.InputCriblTCP.Type = types.StringNull()
		}
	}
	if resp.InputCrowdstrike != nil {
		r.InputCrowdstrike = &tfTypes.InputCrowdstrike{}
		r.InputCrowdstrike.AssumeRoleArn = types.StringPointerValue(resp.InputCrowdstrike.AssumeRoleArn)
		r.InputCrowdstrike.AssumeRoleExternalID = types.StringPointerValue(resp.InputCrowdstrike.AssumeRoleExternalID)
		r.InputCrowdstrike.AwsAccountID = types.StringPointerValue(resp.InputCrowdstrike.AwsAccountID)
		r.InputCrowdstrike.AwsAPIKey = types.StringPointerValue(resp.InputCrowdstrike.AwsAPIKey)
		if resp.InputCrowdstrike.AwsAuthenticationMethod != nil {
			r.InputCrowdstrike.AwsAuthenticationMethod = types.StringValue(string(*resp.InputCrowdstrike.AwsAuthenticationMethod))
		} else {
			r.InputCrowdstrike.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputCrowdstrike.AwsSecret = types.StringPointerValue(resp.InputCrowdstrike.AwsSecret)
		r.InputCrowdstrike.AwsSecretKey = types.StringPointerValue(resp.InputCrowdstrike.AwsSecretKey)
		r.InputCrowdstrike.BreakerRulesets = make([]types.String, 0, len(resp.InputCrowdstrike.BreakerRulesets))
		for _, v := range resp.InputCrowdstrike.BreakerRulesets {
			r.InputCrowdstrike.BreakerRulesets = append(r.InputCrowdstrike.BreakerRulesets, types.StringValue(v))
		}
		if resp.InputCrowdstrike.Checkpointing == nil {
			r.InputCrowdstrike.Checkpointing = nil
		} else {
			r.InputCrowdstrike.Checkpointing = &tfTypes.Checkpointing{}
			r.InputCrowdstrike.Checkpointing.Enabled = types.BoolPointerValue(resp.InputCrowdstrike.Checkpointing.Enabled)
			r.InputCrowdstrike.Checkpointing.Retries = types.Float64PointerValue(resp.InputCrowdstrike.Checkpointing.Retries)
		}
		r.InputCrowdstrike.Connections = []tfTypes.InputCrowdstrikeConnections{}
		if len(r.InputCrowdstrike.Connections) > len(resp.InputCrowdstrike.Connections) {
			r.InputCrowdstrike.Connections = r.InputCrowdstrike.Connections[:len(resp.InputCrowdstrike.Connections)]
		}
		for connectionsCount8, connectionsItem8 := range resp.InputCrowdstrike.Connections {
			var connections8 tfTypes.InputCrowdstrikeConnections
			connections8.Output = types.StringValue(connectionsItem8.Output)
			connections8.Pipeline = types.StringPointerValue(connectionsItem8.Pipeline)
			if connectionsCount8+1 > len(r.InputCrowdstrike.Connections) {
				r.InputCrowdstrike.Connections = append(r.InputCrowdstrike.Connections, connections8)
			} else {
				r.InputCrowdstrike.Connections[connectionsCount8].Output = connections8.Output
				r.InputCrowdstrike.Connections[connectionsCount8].Pipeline = connections8.Pipeline
			}
		}
		r.InputCrowdstrike.Description = types.StringPointerValue(resp.InputCrowdstrike.Description)
		r.InputCrowdstrike.Disabled = types.BoolPointerValue(resp.InputCrowdstrike.Disabled)
		r.InputCrowdstrike.DurationSeconds = types.Float64PointerValue(resp.InputCrowdstrike.DurationSeconds)
		r.InputCrowdstrike.EnableAssumeRole = types.BoolPointerValue(resp.InputCrowdstrike.EnableAssumeRole)
		r.InputCrowdstrike.EnableSQSAssumeRole = types.BoolPointerValue(resp.InputCrowdstrike.EnableSQSAssumeRole)
		r.InputCrowdstrike.Encoding = types.StringPointerValue(resp.InputCrowdstrike.Encoding)
		r.InputCrowdstrike.Endpoint = types.StringPointerValue(resp.InputCrowdstrike.Endpoint)
		r.InputCrowdstrike.Environment = types.StringPointerValue(resp.InputCrowdstrike.Environment)
		r.InputCrowdstrike.FileFilter = types.StringPointerValue(resp.InputCrowdstrike.FileFilter)
		r.InputCrowdstrike.ID = types.StringPointerValue(resp.InputCrowdstrike.ID)
		r.InputCrowdstrike.MaxMessages = types.Float64PointerValue(resp.InputCrowdstrike.MaxMessages)
		r.InputCrowdstrike.Metadata = []tfTypes.InputCrowdstrikeMetadata{}
		if len(r.InputCrowdstrike.Metadata) > len(resp.InputCrowdstrike.Metadata) {
			r.InputCrowdstrike.Metadata = r.InputCrowdstrike.Metadata[:len(resp.InputCrowdstrike.Metadata)]
		}
		for metadataCount8, metadataItem8 := range resp.InputCrowdstrike.Metadata {
			var metadata8 tfTypes.InputCrowdstrikeMetadata
			metadata8.Name = types.StringValue(metadataItem8.Name)
			metadata8.Value = types.StringValue(metadataItem8.Value)
			if metadataCount8+1 > len(r.InputCrowdstrike.Metadata) {
				r.InputCrowdstrike.Metadata = append(r.InputCrowdstrike.Metadata, metadata8)
			} else {
				r.InputCrowdstrike.Metadata[metadataCount8].Name = metadata8.Name
				r.InputCrowdstrike.Metadata[metadataCount8].Value = metadata8.Value
			}
		}
		r.InputCrowdstrike.NumReceivers = types.Float64PointerValue(resp.InputCrowdstrike.NumReceivers)
		r.InputCrowdstrike.Pipeline = types.StringPointerValue(resp.InputCrowdstrike.Pipeline)
		r.InputCrowdstrike.PollTimeout = types.Float64PointerValue(resp.InputCrowdstrike.PollTimeout)
		if resp.InputCrowdstrike.Pq == nil {
			r.InputCrowdstrike.Pq = nil
		} else {
			r.InputCrowdstrike.Pq = &tfTypes.InputCrowdstrikePq{}
			r.InputCrowdstrike.Pq.CommitFrequency = types.Float64PointerValue(resp.InputCrowdstrike.Pq.CommitFrequency)
			if resp.InputCrowdstrike.Pq.Compress != nil {
				r.InputCrowdstrike.Pq.Compress = types.StringValue(string(*resp.InputCrowdstrike.Pq.Compress))
			} else {
				r.InputCrowdstrike.Pq.Compress = types.StringNull()
			}
			r.InputCrowdstrike.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputCrowdstrike.Pq.MaxBufferSize)
			r.InputCrowdstrike.Pq.MaxFileSize = types.StringPointerValue(resp.InputCrowdstrike.Pq.MaxFileSize)
			r.InputCrowdstrike.Pq.MaxSize = types.StringPointerValue(resp.InputCrowdstrike.Pq.MaxSize)
			if resp.InputCrowdstrike.Pq.Mode != nil {
				r.InputCrowdstrike.Pq.Mode = types.StringValue(string(*resp.InputCrowdstrike.Pq.Mode))
			} else {
				r.InputCrowdstrike.Pq.Mode = types.StringNull()
			}
			r.InputCrowdstrike.Pq.Path = types.StringPointerValue(resp.InputCrowdstrike.Pq.Path)
		}
		r.InputCrowdstrike.PqEnabled = types.BoolPointerValue(resp.InputCrowdstrike.PqEnabled)
		if resp.InputCrowdstrike.Preprocess == nil {
			r.InputCrowdstrike.Preprocess = nil
		} else {
			r.InputCrowdstrike.Preprocess = &tfTypes.InputCrowdstrikePreprocess{}
			r.InputCrowdstrike.Preprocess.Args = make([]types.String, 0, len(resp.InputCrowdstrike.Preprocess.Args))
			for _, v := range resp.InputCrowdstrike.Preprocess.Args {
				r.InputCrowdstrike.Preprocess.Args = append(r.InputCrowdstrike.Preprocess.Args, types.StringValue(v))
			}
			r.InputCrowdstrike.Preprocess.Command = types.StringPointerValue(resp.InputCrowdstrike.Preprocess.Command)
			r.InputCrowdstrike.Preprocess.Disabled = types.BoolPointerValue(resp.InputCrowdstrike.Preprocess.Disabled)
		}
		r.InputCrowdstrike.QueueName = types.StringValue(resp.InputCrowdstrike.QueueName)
		r.InputCrowdstrike.Region = types.StringPointerValue(resp.InputCrowdstrike.Region)
		r.InputCrowdstrike.RejectUnauthorized = types.BoolPointerValue(resp.InputCrowdstrike.RejectUnauthorized)
		r.InputCrowdstrike.ReuseConnections = types.BoolPointerValue(resp.InputCrowdstrike.ReuseConnections)
		r.InputCrowdstrike.SendToRoutes = types.BoolPointerValue(resp.InputCrowdstrike.SendToRoutes)
		if resp.InputCrowdstrike.SignatureVersion != nil {
			r.InputCrowdstrike.SignatureVersion = types.StringValue(string(*resp.InputCrowdstrike.SignatureVersion))
		} else {
			r.InputCrowdstrike.SignatureVersion = types.StringNull()
		}
		r.InputCrowdstrike.SkipOnError = types.BoolPointerValue(resp.InputCrowdstrike.SkipOnError)
		r.InputCrowdstrike.SocketTimeout = types.Float64PointerValue(resp.InputCrowdstrike.SocketTimeout)
		r.InputCrowdstrike.StaleChannelFlushMs = types.Float64PointerValue(resp.InputCrowdstrike.StaleChannelFlushMs)
		if resp.InputCrowdstrike.Status == nil {
			r.InputCrowdstrike.Status = nil
		} else {
			r.InputCrowdstrike.Status = &tfTypes.TFStatus{}
			r.InputCrowdstrike.Status.Health = types.StringValue(string(resp.InputCrowdstrike.Status.Health))
			if len(resp.InputCrowdstrike.Status.Metrics) > 0 {
				r.InputCrowdstrike.Status.Metrics = make(map[string]types.String, len(resp.InputCrowdstrike.Status.Metrics))
				for key8, value8 := range resp.InputCrowdstrike.Status.Metrics {
					result8, _ := json.Marshal(value8)
					r.InputCrowdstrike.Status.Metrics[key8] = types.StringValue(string(result8))
				}
			}
			r.InputCrowdstrike.Status.Timestamp = types.Float64Value(resp.InputCrowdstrike.Status.Timestamp)
			r.InputCrowdstrike.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputCrowdstrike.Status.UseStatusFromLB)
		}
		r.InputCrowdstrike.Streamtags = make([]types.String, 0, len(resp.InputCrowdstrike.Streamtags))
		for _, v := range resp.InputCrowdstrike.Streamtags {
			r.InputCrowdstrike.Streamtags = append(r.InputCrowdstrike.Streamtags, types.StringValue(v))
		}
		r.InputCrowdstrike.Type = types.StringValue(string(resp.InputCrowdstrike.Type))
		r.InputCrowdstrike.VisibilityTimeout = types.Float64PointerValue(resp.InputCrowdstrike.VisibilityTimeout)
	}
	if resp.InputDatadogAgent != nil {
		r.InputDatadogAgent = &tfTypes.InputDatadogAgent{}
		r.InputDatadogAgent.ActivityLogSampleRate = types.Float64PointerValue(resp.InputDatadogAgent.ActivityLogSampleRate)
		r.InputDatadogAgent.CaptureHeaders = types.BoolPointerValue(resp.InputDatadogAgent.CaptureHeaders)
		r.InputDatadogAgent.Connections = []tfTypes.InputDatadogAgentConnections{}
		if len(r.InputDatadogAgent.Connections) > len(resp.InputDatadogAgent.Connections) {
			r.InputDatadogAgent.Connections = r.InputDatadogAgent.Connections[:len(resp.InputDatadogAgent.Connections)]
		}
		for connectionsCount9, connectionsItem9 := range resp.InputDatadogAgent.Connections {
			var connections9 tfTypes.InputDatadogAgentConnections
			connections9.Output = types.StringValue(connectionsItem9.Output)
			connections9.Pipeline = types.StringPointerValue(connectionsItem9.Pipeline)
			if connectionsCount9+1 > len(r.InputDatadogAgent.Connections) {
				r.InputDatadogAgent.Connections = append(r.InputDatadogAgent.Connections, connections9)
			} else {
				r.InputDatadogAgent.Connections[connectionsCount9].Output = connections9.Output
				r.InputDatadogAgent.Connections[connectionsCount9].Pipeline = connections9.Pipeline
			}
		}
		r.InputDatadogAgent.Description = types.StringPointerValue(resp.InputDatadogAgent.Description)
		r.InputDatadogAgent.Disabled = types.BoolPointerValue(resp.InputDatadogAgent.Disabled)
		r.InputDatadogAgent.EnableHealthCheck = types.BoolPointerValue(resp.InputDatadogAgent.EnableHealthCheck)
		r.InputDatadogAgent.EnableProxyHeader = types.BoolPointerValue(resp.InputDatadogAgent.EnableProxyHeader)
		r.InputDatadogAgent.Environment = types.StringPointerValue(resp.InputDatadogAgent.Environment)
		r.InputDatadogAgent.ExtractMetrics = types.BoolPointerValue(resp.InputDatadogAgent.ExtractMetrics)
		r.InputDatadogAgent.Host = types.StringPointerValue(resp.InputDatadogAgent.Host)
		r.InputDatadogAgent.ID = types.StringPointerValue(resp.InputDatadogAgent.ID)
		r.InputDatadogAgent.IPAllowlistRegex = types.StringPointerValue(resp.InputDatadogAgent.IPAllowlistRegex)
		r.InputDatadogAgent.IPDenylistRegex = types.StringPointerValue(resp.InputDatadogAgent.IPDenylistRegex)
		r.InputDatadogAgent.KeepAliveTimeout = types.Float64PointerValue(resp.InputDatadogAgent.KeepAliveTimeout)
		r.InputDatadogAgent.MaxActiveReq = types.Float64PointerValue(resp.InputDatadogAgent.MaxActiveReq)
		r.InputDatadogAgent.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputDatadogAgent.MaxRequestsPerSocket)
		r.InputDatadogAgent.Metadata = []tfTypes.InputDatadogAgentMetadata{}
		if len(r.InputDatadogAgent.Metadata) > len(resp.InputDatadogAgent.Metadata) {
			r.InputDatadogAgent.Metadata = r.InputDatadogAgent.Metadata[:len(resp.InputDatadogAgent.Metadata)]
		}
		for metadataCount9, metadataItem9 := range resp.InputDatadogAgent.Metadata {
			var metadata9 tfTypes.InputDatadogAgentMetadata
			metadata9.Name = types.StringValue(metadataItem9.Name)
			metadata9.Value = types.StringValue(metadataItem9.Value)
			if metadataCount9+1 > len(r.InputDatadogAgent.Metadata) {
				r.InputDatadogAgent.Metadata = append(r.InputDatadogAgent.Metadata, metadata9)
			} else {
				r.InputDatadogAgent.Metadata[metadataCount9].Name = metadata9.Name
				r.InputDatadogAgent.Metadata[metadataCount9].Value = metadata9.Value
			}
		}
		r.InputDatadogAgent.Pipeline = types.StringPointerValue(resp.InputDatadogAgent.Pipeline)
		r.InputDatadogAgent.Port = types.Float64Value(resp.InputDatadogAgent.Port)
		if resp.InputDatadogAgent.Pq == nil {
			r.InputDatadogAgent.Pq = nil
		} else {
			r.InputDatadogAgent.Pq = &tfTypes.InputDatadogAgentPq{}
			r.InputDatadogAgent.Pq.CommitFrequency = types.Float64PointerValue(resp.InputDatadogAgent.Pq.CommitFrequency)
			if resp.InputDatadogAgent.Pq.Compress != nil {
				r.InputDatadogAgent.Pq.Compress = types.StringValue(string(*resp.InputDatadogAgent.Pq.Compress))
			} else {
				r.InputDatadogAgent.Pq.Compress = types.StringNull()
			}
			r.InputDatadogAgent.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputDatadogAgent.Pq.MaxBufferSize)
			r.InputDatadogAgent.Pq.MaxFileSize = types.StringPointerValue(resp.InputDatadogAgent.Pq.MaxFileSize)
			r.InputDatadogAgent.Pq.MaxSize = types.StringPointerValue(resp.InputDatadogAgent.Pq.MaxSize)
			if resp.InputDatadogAgent.Pq.Mode != nil {
				r.InputDatadogAgent.Pq.Mode = types.StringValue(string(*resp.InputDatadogAgent.Pq.Mode))
			} else {
				r.InputDatadogAgent.Pq.Mode = types.StringNull()
			}
			r.InputDatadogAgent.Pq.Path = types.StringPointerValue(resp.InputDatadogAgent.Pq.Path)
		}
		r.InputDatadogAgent.PqEnabled = types.BoolPointerValue(resp.InputDatadogAgent.PqEnabled)
		if resp.InputDatadogAgent.ProxyMode == nil {
			r.InputDatadogAgent.ProxyMode = nil
		} else {
			r.InputDatadogAgent.ProxyMode = &tfTypes.InputDatadogAgentProxyMode{}
			r.InputDatadogAgent.ProxyMode.Enabled = types.BoolPointerValue(resp.InputDatadogAgent.ProxyMode.Enabled)
			r.InputDatadogAgent.ProxyMode.RejectUnauthorized = types.BoolPointerValue(resp.InputDatadogAgent.ProxyMode.RejectUnauthorized)
		}
		r.InputDatadogAgent.RequestTimeout = types.Float64PointerValue(resp.InputDatadogAgent.RequestTimeout)
		r.InputDatadogAgent.SendToRoutes = types.BoolPointerValue(resp.InputDatadogAgent.SendToRoutes)
		r.InputDatadogAgent.SocketTimeout = types.Float64PointerValue(resp.InputDatadogAgent.SocketTimeout)
		if resp.InputDatadogAgent.Status == nil {
			r.InputDatadogAgent.Status = nil
		} else {
			r.InputDatadogAgent.Status = &tfTypes.TFStatus{}
			r.InputDatadogAgent.Status.Health = types.StringValue(string(resp.InputDatadogAgent.Status.Health))
			if len(resp.InputDatadogAgent.Status.Metrics) > 0 {
				r.InputDatadogAgent.Status.Metrics = make(map[string]types.String, len(resp.InputDatadogAgent.Status.Metrics))
				for key9, value9 := range resp.InputDatadogAgent.Status.Metrics {
					result9, _ := json.Marshal(value9)
					r.InputDatadogAgent.Status.Metrics[key9] = types.StringValue(string(result9))
				}
			}
			r.InputDatadogAgent.Status.Timestamp = types.Float64Value(resp.InputDatadogAgent.Status.Timestamp)
			r.InputDatadogAgent.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputDatadogAgent.Status.UseStatusFromLB)
		}
		r.InputDatadogAgent.Streamtags = make([]types.String, 0, len(resp.InputDatadogAgent.Streamtags))
		for _, v := range resp.InputDatadogAgent.Streamtags {
			r.InputDatadogAgent.Streamtags = append(r.InputDatadogAgent.Streamtags, types.StringValue(v))
		}
		if resp.InputDatadogAgent.TLS == nil {
			r.InputDatadogAgent.TLS = nil
		} else {
			r.InputDatadogAgent.TLS = &tfTypes.InputDatadogAgentTLSSettingsServerSide{}
			r.InputDatadogAgent.TLS.CaPath = types.StringPointerValue(resp.InputDatadogAgent.TLS.CaPath)
			r.InputDatadogAgent.TLS.CertificateName = types.StringPointerValue(resp.InputDatadogAgent.TLS.CertificateName)
			r.InputDatadogAgent.TLS.CertPath = types.StringPointerValue(resp.InputDatadogAgent.TLS.CertPath)
			if resp.InputDatadogAgent.TLS.CommonNameRegex == nil {
				r.InputDatadogAgent.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult3, _ := json.Marshal(resp.InputDatadogAgent.TLS.CommonNameRegex)
				r.InputDatadogAgent.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult3))
			}
			r.InputDatadogAgent.TLS.Disabled = types.BoolPointerValue(resp.InputDatadogAgent.TLS.Disabled)
			if resp.InputDatadogAgent.TLS.MaxVersion != nil {
				r.InputDatadogAgent.TLS.MaxVersion = types.StringValue(string(*resp.InputDatadogAgent.TLS.MaxVersion))
			} else {
				r.InputDatadogAgent.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputDatadogAgent.TLS.MinVersion != nil {
				r.InputDatadogAgent.TLS.MinVersion = types.StringValue(string(*resp.InputDatadogAgent.TLS.MinVersion))
			} else {
				r.InputDatadogAgent.TLS.MinVersion = types.StringNull()
			}
			r.InputDatadogAgent.TLS.Passphrase = types.StringPointerValue(resp.InputDatadogAgent.TLS.Passphrase)
			r.InputDatadogAgent.TLS.PrivKeyPath = types.StringPointerValue(resp.InputDatadogAgent.TLS.PrivKeyPath)
			if resp.InputDatadogAgent.TLS.RejectUnauthorized == nil {
				r.InputDatadogAgent.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult3, _ := json.Marshal(resp.InputDatadogAgent.TLS.RejectUnauthorized)
				r.InputDatadogAgent.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult3))
			}
			r.InputDatadogAgent.TLS.RequestCert = types.BoolPointerValue(resp.InputDatadogAgent.TLS.RequestCert)
		}
		if resp.InputDatadogAgent.Type != nil {
			r.InputDatadogAgent.Type = types.StringValue(string(*resp.InputDatadogAgent.Type))
		} else {
			r.InputDatadogAgent.Type = types.StringNull()
		}
	}
	if resp.InputDatagen != nil {
		r.InputDatagen = &tfTypes.InputDatagen{}
		r.InputDatagen.Connections = []tfTypes.InputDatagenConnections{}
		if len(r.InputDatagen.Connections) > len(resp.InputDatagen.Connections) {
			r.InputDatagen.Connections = r.InputDatagen.Connections[:len(resp.InputDatagen.Connections)]
		}
		for connectionsCount10, connectionsItem10 := range resp.InputDatagen.Connections {
			var connections10 tfTypes.InputDatagenConnections
			connections10.Output = types.StringValue(connectionsItem10.Output)
			connections10.Pipeline = types.StringPointerValue(connectionsItem10.Pipeline)
			if connectionsCount10+1 > len(r.InputDatagen.Connections) {
				r.InputDatagen.Connections = append(r.InputDatagen.Connections, connections10)
			} else {
				r.InputDatagen.Connections[connectionsCount10].Output = connections10.Output
				r.InputDatagen.Connections[connectionsCount10].Pipeline = connections10.Pipeline
			}
		}
		r.InputDatagen.Description = types.StringPointerValue(resp.InputDatagen.Description)
		r.InputDatagen.Disabled = types.BoolPointerValue(resp.InputDatagen.Disabled)
		r.InputDatagen.Environment = types.StringPointerValue(resp.InputDatagen.Environment)
		r.InputDatagen.ID = types.StringPointerValue(resp.InputDatagen.ID)
		r.InputDatagen.Metadata = []tfTypes.InputDatagenMetadata{}
		if len(r.InputDatagen.Metadata) > len(resp.InputDatagen.Metadata) {
			r.InputDatagen.Metadata = r.InputDatagen.Metadata[:len(resp.InputDatagen.Metadata)]
		}
		for metadataCount10, metadataItem10 := range resp.InputDatagen.Metadata {
			var metadata10 tfTypes.InputDatagenMetadata
			metadata10.Name = types.StringValue(metadataItem10.Name)
			metadata10.Value = types.StringValue(metadataItem10.Value)
			if metadataCount10+1 > len(r.InputDatagen.Metadata) {
				r.InputDatagen.Metadata = append(r.InputDatagen.Metadata, metadata10)
			} else {
				r.InputDatagen.Metadata[metadataCount10].Name = metadata10.Name
				r.InputDatagen.Metadata[metadataCount10].Value = metadata10.Value
			}
		}
		r.InputDatagen.Pipeline = types.StringPointerValue(resp.InputDatagen.Pipeline)
		if resp.InputDatagen.Pq == nil {
			r.InputDatagen.Pq = nil
		} else {
			r.InputDatagen.Pq = &tfTypes.InputDatagenPq{}
			r.InputDatagen.Pq.CommitFrequency = types.Float64PointerValue(resp.InputDatagen.Pq.CommitFrequency)
			if resp.InputDatagen.Pq.Compress != nil {
				r.InputDatagen.Pq.Compress = types.StringValue(string(*resp.InputDatagen.Pq.Compress))
			} else {
				r.InputDatagen.Pq.Compress = types.StringNull()
			}
			r.InputDatagen.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputDatagen.Pq.MaxBufferSize)
			r.InputDatagen.Pq.MaxFileSize = types.StringPointerValue(resp.InputDatagen.Pq.MaxFileSize)
			r.InputDatagen.Pq.MaxSize = types.StringPointerValue(resp.InputDatagen.Pq.MaxSize)
			if resp.InputDatagen.Pq.Mode != nil {
				r.InputDatagen.Pq.Mode = types.StringValue(string(*resp.InputDatagen.Pq.Mode))
			} else {
				r.InputDatagen.Pq.Mode = types.StringNull()
			}
			r.InputDatagen.Pq.Path = types.StringPointerValue(resp.InputDatagen.Pq.Path)
		}
		r.InputDatagen.PqEnabled = types.BoolPointerValue(resp.InputDatagen.PqEnabled)
		r.InputDatagen.Samples = []tfTypes.InputDatagenSamples{}
		if len(r.InputDatagen.Samples) > len(resp.InputDatagen.Samples) {
			r.InputDatagen.Samples = r.InputDatagen.Samples[:len(resp.InputDatagen.Samples)]
		}
		for samplesCount, samplesItem := range resp.InputDatagen.Samples {
			var samples tfTypes.InputDatagenSamples
			samples.EventsPerSec = types.Float64PointerValue(samplesItem.EventsPerSec)
			samples.Sample = types.StringValue(samplesItem.Sample)
			if samplesCount+1 > len(r.InputDatagen.Samples) {
				r.InputDatagen.Samples = append(r.InputDatagen.Samples, samples)
			} else {
				r.InputDatagen.Samples[samplesCount].EventsPerSec = samples.EventsPerSec
				r.InputDatagen.Samples[samplesCount].Sample = samples.Sample
			}
		}
		r.InputDatagen.SendToRoutes = types.BoolPointerValue(resp.InputDatagen.SendToRoutes)
		if resp.InputDatagen.Status == nil {
			r.InputDatagen.Status = nil
		} else {
			r.InputDatagen.Status = &tfTypes.TFStatus{}
			r.InputDatagen.Status.Health = types.StringValue(string(resp.InputDatagen.Status.Health))
			if len(resp.InputDatagen.Status.Metrics) > 0 {
				r.InputDatagen.Status.Metrics = make(map[string]types.String, len(resp.InputDatagen.Status.Metrics))
				for key10, value10 := range resp.InputDatagen.Status.Metrics {
					result10, _ := json.Marshal(value10)
					r.InputDatagen.Status.Metrics[key10] = types.StringValue(string(result10))
				}
			}
			r.InputDatagen.Status.Timestamp = types.Float64Value(resp.InputDatagen.Status.Timestamp)
			r.InputDatagen.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputDatagen.Status.UseStatusFromLB)
		}
		r.InputDatagen.Streamtags = make([]types.String, 0, len(resp.InputDatagen.Streamtags))
		for _, v := range resp.InputDatagen.Streamtags {
			r.InputDatagen.Streamtags = append(r.InputDatagen.Streamtags, types.StringValue(v))
		}
		r.InputDatagen.Type = types.StringValue(string(resp.InputDatagen.Type))
	}
	if resp.InputEdgePrometheus != nil {
		r.InputEdgePrometheus = &tfTypes.InputEdgePrometheus{}
		r.InputEdgePrometheus.AssumeRoleArn = types.StringPointerValue(resp.InputEdgePrometheus.AssumeRoleArn)
		r.InputEdgePrometheus.AssumeRoleExternalID = types.StringPointerValue(resp.InputEdgePrometheus.AssumeRoleExternalID)
		if resp.InputEdgePrometheus.AuthType != nil {
			r.InputEdgePrometheus.AuthType = types.StringValue(string(*resp.InputEdgePrometheus.AuthType))
		} else {
			r.InputEdgePrometheus.AuthType = types.StringNull()
		}
		if resp.InputEdgePrometheus.AwsAuthenticationMethod != nil {
			r.InputEdgePrometheus.AwsAuthenticationMethod = types.StringValue(string(*resp.InputEdgePrometheus.AwsAuthenticationMethod))
		} else {
			r.InputEdgePrometheus.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputEdgePrometheus.AwsSecretKey = types.StringPointerValue(resp.InputEdgePrometheus.AwsSecretKey)
		r.InputEdgePrometheus.Connections = []tfTypes.InputEdgePrometheusConnections{}
		if len(r.InputEdgePrometheus.Connections) > len(resp.InputEdgePrometheus.Connections) {
			r.InputEdgePrometheus.Connections = r.InputEdgePrometheus.Connections[:len(resp.InputEdgePrometheus.Connections)]
		}
		for connectionsCount11, connectionsItem11 := range resp.InputEdgePrometheus.Connections {
			var connections11 tfTypes.InputEdgePrometheusConnections
			connections11.Output = types.StringValue(connectionsItem11.Output)
			connections11.Pipeline = types.StringPointerValue(connectionsItem11.Pipeline)
			if connectionsCount11+1 > len(r.InputEdgePrometheus.Connections) {
				r.InputEdgePrometheus.Connections = append(r.InputEdgePrometheus.Connections, connections11)
			} else {
				r.InputEdgePrometheus.Connections[connectionsCount11].Output = connections11.Output
				r.InputEdgePrometheus.Connections[connectionsCount11].Pipeline = connections11.Pipeline
			}
		}
		r.InputEdgePrometheus.CredentialsSecret = types.StringPointerValue(resp.InputEdgePrometheus.CredentialsSecret)
		r.InputEdgePrometheus.Description = types.StringPointerValue(resp.InputEdgePrometheus.Description)
		r.InputEdgePrometheus.DimensionList = make([]types.String, 0, len(resp.InputEdgePrometheus.DimensionList))
		for _, v := range resp.InputEdgePrometheus.DimensionList {
			r.InputEdgePrometheus.DimensionList = append(r.InputEdgePrometheus.DimensionList, types.StringValue(v))
		}
		r.InputEdgePrometheus.Disabled = types.BoolPointerValue(resp.InputEdgePrometheus.Disabled)
		if resp.InputEdgePrometheus.DiscoveryType != nil {
			r.InputEdgePrometheus.DiscoveryType = types.StringValue(string(*resp.InputEdgePrometheus.DiscoveryType))
		} else {
			r.InputEdgePrometheus.DiscoveryType = types.StringNull()
		}
		r.InputEdgePrometheus.DurationSeconds = types.Float64PointerValue(resp.InputEdgePrometheus.DurationSeconds)
		r.InputEdgePrometheus.EnableAssumeRole = types.BoolPointerValue(resp.InputEdgePrometheus.EnableAssumeRole)
		r.InputEdgePrometheus.Endpoint = types.StringPointerValue(resp.InputEdgePrometheus.Endpoint)
		r.InputEdgePrometheus.Environment = types.StringPointerValue(resp.InputEdgePrometheus.Environment)
		r.InputEdgePrometheus.ID = types.StringPointerValue(resp.InputEdgePrometheus.ID)
		r.InputEdgePrometheus.Interval = types.Float64PointerValue(resp.InputEdgePrometheus.Interval)
		r.InputEdgePrometheus.Metadata = []tfTypes.InputEdgePrometheusMetadata{}
		if len(r.InputEdgePrometheus.Metadata) > len(resp.InputEdgePrometheus.Metadata) {
			r.InputEdgePrometheus.Metadata = r.InputEdgePrometheus.Metadata[:len(resp.InputEdgePrometheus.Metadata)]
		}
		for metadataCount11, metadataItem11 := range resp.InputEdgePrometheus.Metadata {
			var metadata11 tfTypes.InputEdgePrometheusMetadata
			metadata11.Name = types.StringValue(metadataItem11.Name)
			metadata11.Value = types.StringValue(metadataItem11.Value)
			if metadataCount11+1 > len(r.InputEdgePrometheus.Metadata) {
				r.InputEdgePrometheus.Metadata = append(r.InputEdgePrometheus.Metadata, metadata11)
			} else {
				r.InputEdgePrometheus.Metadata[metadataCount11].Name = metadata11.Name
				r.InputEdgePrometheus.Metadata[metadataCount11].Value = metadata11.Value
			}
		}
		r.InputEdgePrometheus.NameList = make([]types.String, 0, len(resp.InputEdgePrometheus.NameList))
		for _, v := range resp.InputEdgePrometheus.NameList {
			r.InputEdgePrometheus.NameList = append(r.InputEdgePrometheus.NameList, types.StringValue(v))
		}
		r.InputEdgePrometheus.Password = types.StringPointerValue(resp.InputEdgePrometheus.Password)
		if resp.InputEdgePrometheus.Persistence == nil {
			r.InputEdgePrometheus.Persistence = nil
		} else {
			r.InputEdgePrometheus.Persistence = &tfTypes.DiskSpooling{}
			if resp.InputEdgePrometheus.Persistence.Compress != nil {
				r.InputEdgePrometheus.Persistence.Compress = types.StringValue(string(*resp.InputEdgePrometheus.Persistence.Compress))
			} else {
				r.InputEdgePrometheus.Persistence.Compress = types.StringNull()
			}
			r.InputEdgePrometheus.Persistence.Enable = types.BoolPointerValue(resp.InputEdgePrometheus.Persistence.Enable)
			r.InputEdgePrometheus.Persistence.MaxDataSize = types.StringPointerValue(resp.InputEdgePrometheus.Persistence.MaxDataSize)
			r.InputEdgePrometheus.Persistence.MaxDataTime = types.StringPointerValue(resp.InputEdgePrometheus.Persistence.MaxDataTime)
			r.InputEdgePrometheus.Persistence.TimeWindow = types.StringPointerValue(resp.InputEdgePrometheus.Persistence.TimeWindow)
		}
		r.InputEdgePrometheus.Pipeline = types.StringPointerValue(resp.InputEdgePrometheus.Pipeline)
		r.InputEdgePrometheus.PodFilter = []tfTypes.PodFilter{}
		if len(r.InputEdgePrometheus.PodFilter) > len(resp.InputEdgePrometheus.PodFilter) {
			r.InputEdgePrometheus.PodFilter = r.InputEdgePrometheus.PodFilter[:len(resp.InputEdgePrometheus.PodFilter)]
		}
		for podFilterCount, podFilterItem := range resp.InputEdgePrometheus.PodFilter {
			var podFilter tfTypes.PodFilter
			podFilter.Description = types.StringPointerValue(podFilterItem.Description)
			podFilter.Filter = types.StringValue(podFilterItem.Filter)
			if podFilterCount+1 > len(r.InputEdgePrometheus.PodFilter) {
				r.InputEdgePrometheus.PodFilter = append(r.InputEdgePrometheus.PodFilter, podFilter)
			} else {
				r.InputEdgePrometheus.PodFilter[podFilterCount].Description = podFilter.Description
				r.InputEdgePrometheus.PodFilter[podFilterCount].Filter = podFilter.Filter
			}
		}
		if resp.InputEdgePrometheus.Pq == nil {
			r.InputEdgePrometheus.Pq = nil
		} else {
			r.InputEdgePrometheus.Pq = &tfTypes.InputEdgePrometheusPq{}
			r.InputEdgePrometheus.Pq.CommitFrequency = types.Float64PointerValue(resp.InputEdgePrometheus.Pq.CommitFrequency)
			if resp.InputEdgePrometheus.Pq.Compress != nil {
				r.InputEdgePrometheus.Pq.Compress = types.StringValue(string(*resp.InputEdgePrometheus.Pq.Compress))
			} else {
				r.InputEdgePrometheus.Pq.Compress = types.StringNull()
			}
			r.InputEdgePrometheus.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputEdgePrometheus.Pq.MaxBufferSize)
			r.InputEdgePrometheus.Pq.MaxFileSize = types.StringPointerValue(resp.InputEdgePrometheus.Pq.MaxFileSize)
			r.InputEdgePrometheus.Pq.MaxSize = types.StringPointerValue(resp.InputEdgePrometheus.Pq.MaxSize)
			if resp.InputEdgePrometheus.Pq.Mode != nil {
				r.InputEdgePrometheus.Pq.Mode = types.StringValue(string(*resp.InputEdgePrometheus.Pq.Mode))
			} else {
				r.InputEdgePrometheus.Pq.Mode = types.StringNull()
			}
			r.InputEdgePrometheus.Pq.Path = types.StringPointerValue(resp.InputEdgePrometheus.Pq.Path)
		}
		r.InputEdgePrometheus.PqEnabled = types.BoolPointerValue(resp.InputEdgePrometheus.PqEnabled)
		if resp.InputEdgePrometheus.RecordType != nil {
			r.InputEdgePrometheus.RecordType = types.StringValue(string(*resp.InputEdgePrometheus.RecordType))
		} else {
			r.InputEdgePrometheus.RecordType = types.StringNull()
		}
		r.InputEdgePrometheus.Region = types.StringPointerValue(resp.InputEdgePrometheus.Region)
		r.InputEdgePrometheus.RejectUnauthorized = types.BoolPointerValue(resp.InputEdgePrometheus.RejectUnauthorized)
		r.InputEdgePrometheus.ReuseConnections = types.BoolPointerValue(resp.InputEdgePrometheus.ReuseConnections)
		r.InputEdgePrometheus.ScrapePath = types.StringPointerValue(resp.InputEdgePrometheus.ScrapePath)
		r.InputEdgePrometheus.ScrapePathExpr = types.StringPointerValue(resp.InputEdgePrometheus.ScrapePathExpr)
		r.InputEdgePrometheus.ScrapePort = types.Float64PointerValue(resp.InputEdgePrometheus.ScrapePort)
		r.InputEdgePrometheus.ScrapePortExpr = types.StringPointerValue(resp.InputEdgePrometheus.ScrapePortExpr)
		if resp.InputEdgePrometheus.ScrapeProtocol != nil {
			r.InputEdgePrometheus.ScrapeProtocol = types.StringValue(string(*resp.InputEdgePrometheus.ScrapeProtocol))
		} else {
			r.InputEdgePrometheus.ScrapeProtocol = types.StringNull()
		}
		r.InputEdgePrometheus.ScrapeProtocolExpr = types.StringPointerValue(resp.InputEdgePrometheus.ScrapeProtocolExpr)
		r.InputEdgePrometheus.SearchFilter = []tfTypes.InputEdgePrometheusSearchFilter{}
		if len(r.InputEdgePrometheus.SearchFilter) > len(resp.InputEdgePrometheus.SearchFilter) {
			r.InputEdgePrometheus.SearchFilter = r.InputEdgePrometheus.SearchFilter[:len(resp.InputEdgePrometheus.SearchFilter)]
		}
		for searchFilterCount, searchFilterItem := range resp.InputEdgePrometheus.SearchFilter {
			var searchFilter tfTypes.InputEdgePrometheusSearchFilter
			searchFilter.Name = types.StringValue(searchFilterItem.Name)
			searchFilter.Values = make([]types.String, 0, len(searchFilterItem.Values))
			for _, v := range searchFilterItem.Values {
				searchFilter.Values = append(searchFilter.Values, types.StringValue(v))
			}
			if searchFilterCount+1 > len(r.InputEdgePrometheus.SearchFilter) {
				r.InputEdgePrometheus.SearchFilter = append(r.InputEdgePrometheus.SearchFilter, searchFilter)
			} else {
				r.InputEdgePrometheus.SearchFilter[searchFilterCount].Name = searchFilter.Name
				r.InputEdgePrometheus.SearchFilter[searchFilterCount].Values = searchFilter.Values
			}
		}
		r.InputEdgePrometheus.SendToRoutes = types.BoolPointerValue(resp.InputEdgePrometheus.SendToRoutes)
		if resp.InputEdgePrometheus.SignatureVersion != nil {
			r.InputEdgePrometheus.SignatureVersion = types.StringValue(string(*resp.InputEdgePrometheus.SignatureVersion))
		} else {
			r.InputEdgePrometheus.SignatureVersion = types.StringNull()
		}
		if resp.InputEdgePrometheus.Status == nil {
			r.InputEdgePrometheus.Status = nil
		} else {
			r.InputEdgePrometheus.Status = &tfTypes.TFStatus{}
			r.InputEdgePrometheus.Status.Health = types.StringValue(string(resp.InputEdgePrometheus.Status.Health))
			if len(resp.InputEdgePrometheus.Status.Metrics) > 0 {
				r.InputEdgePrometheus.Status.Metrics = make(map[string]types.String, len(resp.InputEdgePrometheus.Status.Metrics))
				for key11, value11 := range resp.InputEdgePrometheus.Status.Metrics {
					result11, _ := json.Marshal(value11)
					r.InputEdgePrometheus.Status.Metrics[key11] = types.StringValue(string(result11))
				}
			}
			r.InputEdgePrometheus.Status.Timestamp = types.Float64Value(resp.InputEdgePrometheus.Status.Timestamp)
			r.InputEdgePrometheus.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputEdgePrometheus.Status.UseStatusFromLB)
		}
		r.InputEdgePrometheus.Streamtags = make([]types.String, 0, len(resp.InputEdgePrometheus.Streamtags))
		for _, v := range resp.InputEdgePrometheus.Streamtags {
			r.InputEdgePrometheus.Streamtags = append(r.InputEdgePrometheus.Streamtags, types.StringValue(v))
		}
		r.InputEdgePrometheus.Targets = []tfTypes.Targets{}
		if len(r.InputEdgePrometheus.Targets) > len(resp.InputEdgePrometheus.Targets) {
			r.InputEdgePrometheus.Targets = r.InputEdgePrometheus.Targets[:len(resp.InputEdgePrometheus.Targets)]
		}
		for targetsCount, targetsItem := range resp.InputEdgePrometheus.Targets {
			var targets tfTypes.Targets
			targets.Host = types.StringValue(targetsItem.Host)
			targets.Path = types.StringPointerValue(targetsItem.Path)
			targets.Port = types.Float64PointerValue(targetsItem.Port)
			if targetsItem.Protocol != nil {
				targets.Protocol = types.StringValue(string(*targetsItem.Protocol))
			} else {
				targets.Protocol = types.StringNull()
			}
			if targetsCount+1 > len(r.InputEdgePrometheus.Targets) {
				r.InputEdgePrometheus.Targets = append(r.InputEdgePrometheus.Targets, targets)
			} else {
				r.InputEdgePrometheus.Targets[targetsCount].Host = targets.Host
				r.InputEdgePrometheus.Targets[targetsCount].Path = targets.Path
				r.InputEdgePrometheus.Targets[targetsCount].Port = targets.Port
				r.InputEdgePrometheus.Targets[targetsCount].Protocol = targets.Protocol
			}
		}
		r.InputEdgePrometheus.Timeout = types.Float64PointerValue(resp.InputEdgePrometheus.Timeout)
		if resp.InputEdgePrometheus.Type != nil {
			r.InputEdgePrometheus.Type = types.StringValue(string(*resp.InputEdgePrometheus.Type))
		} else {
			r.InputEdgePrometheus.Type = types.StringNull()
		}
		r.InputEdgePrometheus.UsePublicIP = types.BoolPointerValue(resp.InputEdgePrometheus.UsePublicIP)
		r.InputEdgePrometheus.Username = types.StringPointerValue(resp.InputEdgePrometheus.Username)
	}
	if resp.InputElastic != nil {
		r.InputElastic = &tfTypes.InputElastic{}
		r.InputElastic.ActivityLogSampleRate = types.Float64PointerValue(resp.InputElastic.ActivityLogSampleRate)
		if resp.InputElastic.APIVersion != nil {
			r.InputElastic.APIVersion = types.StringValue(string(*resp.InputElastic.APIVersion))
		} else {
			r.InputElastic.APIVersion = types.StringNull()
		}
		r.InputElastic.AuthTokens = make([]types.String, 0, len(resp.InputElastic.AuthTokens))
		for _, v := range resp.InputElastic.AuthTokens {
			r.InputElastic.AuthTokens = append(r.InputElastic.AuthTokens, types.StringValue(v))
		}
		if resp.InputElastic.AuthType != nil {
			r.InputElastic.AuthType = types.StringValue(string(*resp.InputElastic.AuthType))
		} else {
			r.InputElastic.AuthType = types.StringNull()
		}
		r.InputElastic.CaptureHeaders = types.BoolPointerValue(resp.InputElastic.CaptureHeaders)
		r.InputElastic.Connections = []tfTypes.InputElasticConnections{}
		if len(r.InputElastic.Connections) > len(resp.InputElastic.Connections) {
			r.InputElastic.Connections = r.InputElastic.Connections[:len(resp.InputElastic.Connections)]
		}
		for connectionsCount12, connectionsItem12 := range resp.InputElastic.Connections {
			var connections12 tfTypes.InputElasticConnections
			connections12.Output = types.StringValue(connectionsItem12.Output)
			connections12.Pipeline = types.StringPointerValue(connectionsItem12.Pipeline)
			if connectionsCount12+1 > len(r.InputElastic.Connections) {
				r.InputElastic.Connections = append(r.InputElastic.Connections, connections12)
			} else {
				r.InputElastic.Connections[connectionsCount12].Output = connections12.Output
				r.InputElastic.Connections[connectionsCount12].Pipeline = connections12.Pipeline
			}
		}
		r.InputElastic.CredentialsSecret = types.StringPointerValue(resp.InputElastic.CredentialsSecret)
		r.InputElastic.CustomAPIVersion = types.StringPointerValue(resp.InputElastic.CustomAPIVersion)
		r.InputElastic.Description = types.StringPointerValue(resp.InputElastic.Description)
		r.InputElastic.Disabled = types.BoolPointerValue(resp.InputElastic.Disabled)
		r.InputElastic.ElasticAPI = types.StringPointerValue(resp.InputElastic.ElasticAPI)
		r.InputElastic.EnableHealthCheck = types.BoolPointerValue(resp.InputElastic.EnableHealthCheck)
		r.InputElastic.EnableProxyHeader = types.BoolPointerValue(resp.InputElastic.EnableProxyHeader)
		r.InputElastic.Environment = types.StringPointerValue(resp.InputElastic.Environment)
		r.InputElastic.ExtraHTTPHeaders = []tfTypes.ExtraHTTPHeaders{}
		if len(r.InputElastic.ExtraHTTPHeaders) > len(resp.InputElastic.ExtraHTTPHeaders) {
			r.InputElastic.ExtraHTTPHeaders = r.InputElastic.ExtraHTTPHeaders[:len(resp.InputElastic.ExtraHTTPHeaders)]
		}
		for extraHTTPHeadersCount, extraHTTPHeadersItem := range resp.InputElastic.ExtraHTTPHeaders {
			var extraHTTPHeaders tfTypes.ExtraHTTPHeaders
			extraHTTPHeaders.Name = types.StringPointerValue(extraHTTPHeadersItem.Name)
			extraHTTPHeaders.Value = types.StringValue(extraHTTPHeadersItem.Value)
			if extraHTTPHeadersCount+1 > len(r.InputElastic.ExtraHTTPHeaders) {
				r.InputElastic.ExtraHTTPHeaders = append(r.InputElastic.ExtraHTTPHeaders, extraHTTPHeaders)
			} else {
				r.InputElastic.ExtraHTTPHeaders[extraHTTPHeadersCount].Name = extraHTTPHeaders.Name
				r.InputElastic.ExtraHTTPHeaders[extraHTTPHeadersCount].Value = extraHTTPHeaders.Value
			}
		}
		r.InputElastic.Host = types.StringPointerValue(resp.InputElastic.Host)
		r.InputElastic.ID = types.StringPointerValue(resp.InputElastic.ID)
		r.InputElastic.IgnoreStandardHeaders = types.BoolPointerValue(resp.InputElastic.IgnoreStandardHeaders)
		r.InputElastic.IPAllowlistRegex = types.StringPointerValue(resp.InputElastic.IPAllowlistRegex)
		r.InputElastic.IPDenylistRegex = types.StringPointerValue(resp.InputElastic.IPDenylistRegex)
		r.InputElastic.KeepAliveTimeout = types.Float64PointerValue(resp.InputElastic.KeepAliveTimeout)
		r.InputElastic.MaxActiveReq = types.Float64PointerValue(resp.InputElastic.MaxActiveReq)
		r.InputElastic.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputElastic.MaxRequestsPerSocket)
		r.InputElastic.Metadata = []tfTypes.InputElasticMetadata{}
		if len(r.InputElastic.Metadata) > len(resp.InputElastic.Metadata) {
			r.InputElastic.Metadata = r.InputElastic.Metadata[:len(resp.InputElastic.Metadata)]
		}
		for metadataCount12, metadataItem12 := range resp.InputElastic.Metadata {
			var metadata12 tfTypes.InputElasticMetadata
			metadata12.Name = types.StringValue(metadataItem12.Name)
			metadata12.Value = types.StringValue(metadataItem12.Value)
			if metadataCount12+1 > len(r.InputElastic.Metadata) {
				r.InputElastic.Metadata = append(r.InputElastic.Metadata, metadata12)
			} else {
				r.InputElastic.Metadata[metadataCount12].Name = metadata12.Name
				r.InputElastic.Metadata[metadataCount12].Value = metadata12.Value
			}
		}
		r.InputElastic.Password = types.StringPointerValue(resp.InputElastic.Password)
		r.InputElastic.Pipeline = types.StringPointerValue(resp.InputElastic.Pipeline)
		r.InputElastic.Port = types.Float64Value(resp.InputElastic.Port)
		if resp.InputElastic.Pq == nil {
			r.InputElastic.Pq = nil
		} else {
			r.InputElastic.Pq = &tfTypes.InputElasticPq{}
			r.InputElastic.Pq.CommitFrequency = types.Float64PointerValue(resp.InputElastic.Pq.CommitFrequency)
			if resp.InputElastic.Pq.Compress != nil {
				r.InputElastic.Pq.Compress = types.StringValue(string(*resp.InputElastic.Pq.Compress))
			} else {
				r.InputElastic.Pq.Compress = types.StringNull()
			}
			r.InputElastic.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputElastic.Pq.MaxBufferSize)
			r.InputElastic.Pq.MaxFileSize = types.StringPointerValue(resp.InputElastic.Pq.MaxFileSize)
			r.InputElastic.Pq.MaxSize = types.StringPointerValue(resp.InputElastic.Pq.MaxSize)
			if resp.InputElastic.Pq.Mode != nil {
				r.InputElastic.Pq.Mode = types.StringValue(string(*resp.InputElastic.Pq.Mode))
			} else {
				r.InputElastic.Pq.Mode = types.StringNull()
			}
			r.InputElastic.Pq.Path = types.StringPointerValue(resp.InputElastic.Pq.Path)
		}
		r.InputElastic.PqEnabled = types.BoolPointerValue(resp.InputElastic.PqEnabled)
		if resp.InputElastic.ProxyMode == nil {
			r.InputElastic.ProxyMode = nil
		} else {
			r.InputElastic.ProxyMode = &tfTypes.ProxyMode{}
			if resp.InputElastic.ProxyMode.AuthType != nil {
				r.InputElastic.ProxyMode.AuthType = types.StringValue(string(*resp.InputElastic.ProxyMode.AuthType))
			} else {
				r.InputElastic.ProxyMode.AuthType = types.StringNull()
			}
			r.InputElastic.ProxyMode.Enabled = types.BoolPointerValue(resp.InputElastic.ProxyMode.Enabled)
			r.InputElastic.ProxyMode.RejectUnauthorized = types.BoolPointerValue(resp.InputElastic.ProxyMode.RejectUnauthorized)
			r.InputElastic.ProxyMode.RemoveHeaders = make([]types.String, 0, len(resp.InputElastic.ProxyMode.RemoveHeaders))
			for _, v := range resp.InputElastic.ProxyMode.RemoveHeaders {
				r.InputElastic.ProxyMode.RemoveHeaders = append(r.InputElastic.ProxyMode.RemoveHeaders, types.StringValue(v))
			}
			r.InputElastic.ProxyMode.TimeoutSec = types.Float64PointerValue(resp.InputElastic.ProxyMode.TimeoutSec)
			r.InputElastic.ProxyMode.URL = types.StringPointerValue(resp.InputElastic.ProxyMode.URL)
		}
		r.InputElastic.RequestTimeout = types.Float64PointerValue(resp.InputElastic.RequestTimeout)
		r.InputElastic.SendToRoutes = types.BoolPointerValue(resp.InputElastic.SendToRoutes)
		r.InputElastic.SocketTimeout = types.Float64PointerValue(resp.InputElastic.SocketTimeout)
		if resp.InputElastic.Status == nil {
			r.InputElastic.Status = nil
		} else {
			r.InputElastic.Status = &tfTypes.TFStatus{}
			r.InputElastic.Status.Health = types.StringValue(string(resp.InputElastic.Status.Health))
			if len(resp.InputElastic.Status.Metrics) > 0 {
				r.InputElastic.Status.Metrics = make(map[string]types.String, len(resp.InputElastic.Status.Metrics))
				for key12, value12 := range resp.InputElastic.Status.Metrics {
					result12, _ := json.Marshal(value12)
					r.InputElastic.Status.Metrics[key12] = types.StringValue(string(result12))
				}
			}
			r.InputElastic.Status.Timestamp = types.Float64Value(resp.InputElastic.Status.Timestamp)
			r.InputElastic.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputElastic.Status.UseStatusFromLB)
		}
		r.InputElastic.Streamtags = make([]types.String, 0, len(resp.InputElastic.Streamtags))
		for _, v := range resp.InputElastic.Streamtags {
			r.InputElastic.Streamtags = append(r.InputElastic.Streamtags, types.StringValue(v))
		}
		if resp.InputElastic.TLS == nil {
			r.InputElastic.TLS = nil
		} else {
			r.InputElastic.TLS = &tfTypes.InputElasticTLSSettingsServerSide{}
			r.InputElastic.TLS.CaPath = types.StringPointerValue(resp.InputElastic.TLS.CaPath)
			r.InputElastic.TLS.CertificateName = types.StringPointerValue(resp.InputElastic.TLS.CertificateName)
			r.InputElastic.TLS.CertPath = types.StringPointerValue(resp.InputElastic.TLS.CertPath)
			if resp.InputElastic.TLS.CommonNameRegex == nil {
				r.InputElastic.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult4, _ := json.Marshal(resp.InputElastic.TLS.CommonNameRegex)
				r.InputElastic.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult4))
			}
			r.InputElastic.TLS.Disabled = types.BoolPointerValue(resp.InputElastic.TLS.Disabled)
			if resp.InputElastic.TLS.MaxVersion != nil {
				r.InputElastic.TLS.MaxVersion = types.StringValue(string(*resp.InputElastic.TLS.MaxVersion))
			} else {
				r.InputElastic.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputElastic.TLS.MinVersion != nil {
				r.InputElastic.TLS.MinVersion = types.StringValue(string(*resp.InputElastic.TLS.MinVersion))
			} else {
				r.InputElastic.TLS.MinVersion = types.StringNull()
			}
			r.InputElastic.TLS.Passphrase = types.StringPointerValue(resp.InputElastic.TLS.Passphrase)
			r.InputElastic.TLS.PrivKeyPath = types.StringPointerValue(resp.InputElastic.TLS.PrivKeyPath)
			if resp.InputElastic.TLS.RejectUnauthorized == nil {
				r.InputElastic.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult4, _ := json.Marshal(resp.InputElastic.TLS.RejectUnauthorized)
				r.InputElastic.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult4))
			}
			r.InputElastic.TLS.RequestCert = types.BoolPointerValue(resp.InputElastic.TLS.RequestCert)
		}
		if resp.InputElastic.Type != nil {
			r.InputElastic.Type = types.StringValue(string(*resp.InputElastic.Type))
		} else {
			r.InputElastic.Type = types.StringNull()
		}
		r.InputElastic.Username = types.StringPointerValue(resp.InputElastic.Username)
	}
	if resp.InputEventhub != nil {
		r.InputEventhub = &tfTypes.InputEventhub{}
		r.InputEventhub.AuthenticationTimeout = types.Float64PointerValue(resp.InputEventhub.AuthenticationTimeout)
		r.InputEventhub.AutoCommitInterval = types.Float64PointerValue(resp.InputEventhub.AutoCommitInterval)
		r.InputEventhub.AutoCommitThreshold = types.Float64PointerValue(resp.InputEventhub.AutoCommitThreshold)
		r.InputEventhub.BackoffRate = types.Float64PointerValue(resp.InputEventhub.BackoffRate)
		r.InputEventhub.Brokers = make([]types.String, 0, len(resp.InputEventhub.Brokers))
		for _, v := range resp.InputEventhub.Brokers {
			r.InputEventhub.Brokers = append(r.InputEventhub.Brokers, types.StringValue(v))
		}
		r.InputEventhub.Connections = []tfTypes.InputEventhubConnections{}
		if len(r.InputEventhub.Connections) > len(resp.InputEventhub.Connections) {
			r.InputEventhub.Connections = r.InputEventhub.Connections[:len(resp.InputEventhub.Connections)]
		}
		for connectionsCount13, connectionsItem13 := range resp.InputEventhub.Connections {
			var connections13 tfTypes.InputEventhubConnections
			connections13.Output = types.StringValue(connectionsItem13.Output)
			connections13.Pipeline = types.StringPointerValue(connectionsItem13.Pipeline)
			if connectionsCount13+1 > len(r.InputEventhub.Connections) {
				r.InputEventhub.Connections = append(r.InputEventhub.Connections, connections13)
			} else {
				r.InputEventhub.Connections[connectionsCount13].Output = connections13.Output
				r.InputEventhub.Connections[connectionsCount13].Pipeline = connections13.Pipeline
			}
		}
		r.InputEventhub.ConnectionTimeout = types.Float64PointerValue(resp.InputEventhub.ConnectionTimeout)
		r.InputEventhub.Description = types.StringPointerValue(resp.InputEventhub.Description)
		r.InputEventhub.Disabled = types.BoolPointerValue(resp.InputEventhub.Disabled)
		r.InputEventhub.Environment = types.StringPointerValue(resp.InputEventhub.Environment)
		r.InputEventhub.FromBeginning = types.BoolPointerValue(resp.InputEventhub.FromBeginning)
		r.InputEventhub.GroupID = types.StringPointerValue(resp.InputEventhub.GroupID)
		r.InputEventhub.HeartbeatInterval = types.Float64PointerValue(resp.InputEventhub.HeartbeatInterval)
		r.InputEventhub.ID = types.StringPointerValue(resp.InputEventhub.ID)
		r.InputEventhub.InitialBackoff = types.Float64PointerValue(resp.InputEventhub.InitialBackoff)
		r.InputEventhub.MaxBackOff = types.Float64PointerValue(resp.InputEventhub.MaxBackOff)
		r.InputEventhub.MaxBytes = types.Float64PointerValue(resp.InputEventhub.MaxBytes)
		r.InputEventhub.MaxBytesPerPartition = types.Float64PointerValue(resp.InputEventhub.MaxBytesPerPartition)
		r.InputEventhub.MaxRetries = types.Float64PointerValue(resp.InputEventhub.MaxRetries)
		r.InputEventhub.MaxSocketErrors = types.Float64PointerValue(resp.InputEventhub.MaxSocketErrors)
		r.InputEventhub.Metadata = []tfTypes.InputEventhubMetadata{}
		if len(r.InputEventhub.Metadata) > len(resp.InputEventhub.Metadata) {
			r.InputEventhub.Metadata = r.InputEventhub.Metadata[:len(resp.InputEventhub.Metadata)]
		}
		for metadataCount13, metadataItem13 := range resp.InputEventhub.Metadata {
			var metadata13 tfTypes.InputEventhubMetadata
			metadata13.Name = types.StringValue(metadataItem13.Name)
			metadata13.Value = types.StringValue(metadataItem13.Value)
			if metadataCount13+1 > len(r.InputEventhub.Metadata) {
				r.InputEventhub.Metadata = append(r.InputEventhub.Metadata, metadata13)
			} else {
				r.InputEventhub.Metadata[metadataCount13].Name = metadata13.Name
				r.InputEventhub.Metadata[metadataCount13].Value = metadata13.Value
			}
		}
		r.InputEventhub.MinimizeDuplicates = types.BoolPointerValue(resp.InputEventhub.MinimizeDuplicates)
		r.InputEventhub.Pipeline = types.StringPointerValue(resp.InputEventhub.Pipeline)
		if resp.InputEventhub.Pq == nil {
			r.InputEventhub.Pq = nil
		} else {
			r.InputEventhub.Pq = &tfTypes.InputEventhubPq{}
			r.InputEventhub.Pq.CommitFrequency = types.Float64PointerValue(resp.InputEventhub.Pq.CommitFrequency)
			if resp.InputEventhub.Pq.Compress != nil {
				r.InputEventhub.Pq.Compress = types.StringValue(string(*resp.InputEventhub.Pq.Compress))
			} else {
				r.InputEventhub.Pq.Compress = types.StringNull()
			}
			r.InputEventhub.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputEventhub.Pq.MaxBufferSize)
			r.InputEventhub.Pq.MaxFileSize = types.StringPointerValue(resp.InputEventhub.Pq.MaxFileSize)
			r.InputEventhub.Pq.MaxSize = types.StringPointerValue(resp.InputEventhub.Pq.MaxSize)
			if resp.InputEventhub.Pq.Mode != nil {
				r.InputEventhub.Pq.Mode = types.StringValue(string(*resp.InputEventhub.Pq.Mode))
			} else {
				r.InputEventhub.Pq.Mode = types.StringNull()
			}
			r.InputEventhub.Pq.Path = types.StringPointerValue(resp.InputEventhub.Pq.Path)
		}
		r.InputEventhub.PqEnabled = types.BoolPointerValue(resp.InputEventhub.PqEnabled)
		r.InputEventhub.ReauthenticationThreshold = types.Float64PointerValue(resp.InputEventhub.ReauthenticationThreshold)
		r.InputEventhub.RebalanceTimeout = types.Float64PointerValue(resp.InputEventhub.RebalanceTimeout)
		r.InputEventhub.RequestTimeout = types.Float64PointerValue(resp.InputEventhub.RequestTimeout)
		if resp.InputEventhub.Sasl == nil {
			r.InputEventhub.Sasl = nil
		} else {
			r.InputEventhub.Sasl = &tfTypes.InputEventhubAuthentication{}
			r.InputEventhub.Sasl.Disabled = types.BoolPointerValue(resp.InputEventhub.Sasl.Disabled)
			if resp.InputEventhub.Sasl.Mechanism != nil {
				r.InputEventhub.Sasl.Mechanism = types.StringValue(string(*resp.InputEventhub.Sasl.Mechanism))
			} else {
				r.InputEventhub.Sasl.Mechanism = types.StringNull()
			}
		}
		r.InputEventhub.SendToRoutes = types.BoolPointerValue(resp.InputEventhub.SendToRoutes)
		r.InputEventhub.SessionTimeout = types.Float64PointerValue(resp.InputEventhub.SessionTimeout)
		if resp.InputEventhub.Status == nil {
			r.InputEventhub.Status = nil
		} else {
			r.InputEventhub.Status = &tfTypes.TFStatus{}
			r.InputEventhub.Status.Health = types.StringValue(string(resp.InputEventhub.Status.Health))
			if len(resp.InputEventhub.Status.Metrics) > 0 {
				r.InputEventhub.Status.Metrics = make(map[string]types.String, len(resp.InputEventhub.Status.Metrics))
				for key13, value13 := range resp.InputEventhub.Status.Metrics {
					result13, _ := json.Marshal(value13)
					r.InputEventhub.Status.Metrics[key13] = types.StringValue(string(result13))
				}
			}
			r.InputEventhub.Status.Timestamp = types.Float64Value(resp.InputEventhub.Status.Timestamp)
			r.InputEventhub.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputEventhub.Status.UseStatusFromLB)
		}
		r.InputEventhub.Streamtags = make([]types.String, 0, len(resp.InputEventhub.Streamtags))
		for _, v := range resp.InputEventhub.Streamtags {
			r.InputEventhub.Streamtags = append(r.InputEventhub.Streamtags, types.StringValue(v))
		}
		if resp.InputEventhub.TLS == nil {
			r.InputEventhub.TLS = nil
		} else {
			r.InputEventhub.TLS = &tfTypes.InputEventhubTLSSettingsClientSide{}
			r.InputEventhub.TLS.Disabled = types.BoolPointerValue(resp.InputEventhub.TLS.Disabled)
			r.InputEventhub.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputEventhub.TLS.RejectUnauthorized)
		}
		r.InputEventhub.Topics = make([]types.String, 0, len(resp.InputEventhub.Topics))
		for _, v := range resp.InputEventhub.Topics {
			r.InputEventhub.Topics = append(r.InputEventhub.Topics, types.StringValue(v))
		}
		if resp.InputEventhub.Type != nil {
			r.InputEventhub.Type = types.StringValue(string(*resp.InputEventhub.Type))
		} else {
			r.InputEventhub.Type = types.StringNull()
		}
	}
	if resp.InputExec != nil {
		r.InputExec = &tfTypes.InputExec{}
		r.InputExec.BreakerRulesets = make([]types.String, 0, len(resp.InputExec.BreakerRulesets))
		for _, v := range resp.InputExec.BreakerRulesets {
			r.InputExec.BreakerRulesets = append(r.InputExec.BreakerRulesets, types.StringValue(v))
		}
		r.InputExec.Command = types.StringValue(resp.InputExec.Command)
		r.InputExec.Connections = []tfTypes.InputExecConnections{}
		if len(r.InputExec.Connections) > len(resp.InputExec.Connections) {
			r.InputExec.Connections = r.InputExec.Connections[:len(resp.InputExec.Connections)]
		}
		for connectionsCount14, connectionsItem14 := range resp.InputExec.Connections {
			var connections14 tfTypes.InputExecConnections
			connections14.Output = types.StringValue(connectionsItem14.Output)
			connections14.Pipeline = types.StringPointerValue(connectionsItem14.Pipeline)
			if connectionsCount14+1 > len(r.InputExec.Connections) {
				r.InputExec.Connections = append(r.InputExec.Connections, connections14)
			} else {
				r.InputExec.Connections[connectionsCount14].Output = connections14.Output
				r.InputExec.Connections[connectionsCount14].Pipeline = connections14.Pipeline
			}
		}
		r.InputExec.CronSchedule = types.StringPointerValue(resp.InputExec.CronSchedule)
		r.InputExec.Description = types.StringPointerValue(resp.InputExec.Description)
		r.InputExec.Disabled = types.BoolPointerValue(resp.InputExec.Disabled)
		r.InputExec.Environment = types.StringPointerValue(resp.InputExec.Environment)
		r.InputExec.ID = types.StringPointerValue(resp.InputExec.ID)
		r.InputExec.Interval = types.Float64PointerValue(resp.InputExec.Interval)
		r.InputExec.Metadata = []tfTypes.InputExecMetadata{}
		if len(r.InputExec.Metadata) > len(resp.InputExec.Metadata) {
			r.InputExec.Metadata = r.InputExec.Metadata[:len(resp.InputExec.Metadata)]
		}
		for metadataCount14, metadataItem14 := range resp.InputExec.Metadata {
			var metadata14 tfTypes.InputExecMetadata
			metadata14.Name = types.StringValue(metadataItem14.Name)
			metadata14.Value = types.StringValue(metadataItem14.Value)
			if metadataCount14+1 > len(r.InputExec.Metadata) {
				r.InputExec.Metadata = append(r.InputExec.Metadata, metadata14)
			} else {
				r.InputExec.Metadata[metadataCount14].Name = metadata14.Name
				r.InputExec.Metadata[metadataCount14].Value = metadata14.Value
			}
		}
		r.InputExec.Pipeline = types.StringPointerValue(resp.InputExec.Pipeline)
		if resp.InputExec.Pq == nil {
			r.InputExec.Pq = nil
		} else {
			r.InputExec.Pq = &tfTypes.InputExecPq{}
			r.InputExec.Pq.CommitFrequency = types.Float64PointerValue(resp.InputExec.Pq.CommitFrequency)
			if resp.InputExec.Pq.Compress != nil {
				r.InputExec.Pq.Compress = types.StringValue(string(*resp.InputExec.Pq.Compress))
			} else {
				r.InputExec.Pq.Compress = types.StringNull()
			}
			r.InputExec.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputExec.Pq.MaxBufferSize)
			r.InputExec.Pq.MaxFileSize = types.StringPointerValue(resp.InputExec.Pq.MaxFileSize)
			r.InputExec.Pq.MaxSize = types.StringPointerValue(resp.InputExec.Pq.MaxSize)
			if resp.InputExec.Pq.Mode != nil {
				r.InputExec.Pq.Mode = types.StringValue(string(*resp.InputExec.Pq.Mode))
			} else {
				r.InputExec.Pq.Mode = types.StringNull()
			}
			r.InputExec.Pq.Path = types.StringPointerValue(resp.InputExec.Pq.Path)
		}
		r.InputExec.PqEnabled = types.BoolPointerValue(resp.InputExec.PqEnabled)
		r.InputExec.Retries = types.Float64PointerValue(resp.InputExec.Retries)
		if resp.InputExec.ScheduleType != nil {
			r.InputExec.ScheduleType = types.StringValue(string(*resp.InputExec.ScheduleType))
		} else {
			r.InputExec.ScheduleType = types.StringNull()
		}
		r.InputExec.SendToRoutes = types.BoolPointerValue(resp.InputExec.SendToRoutes)
		r.InputExec.StaleChannelFlushMs = types.Float64PointerValue(resp.InputExec.StaleChannelFlushMs)
		if resp.InputExec.Status == nil {
			r.InputExec.Status = nil
		} else {
			r.InputExec.Status = &tfTypes.TFStatus{}
			r.InputExec.Status.Health = types.StringValue(string(resp.InputExec.Status.Health))
			if len(resp.InputExec.Status.Metrics) > 0 {
				r.InputExec.Status.Metrics = make(map[string]types.String, len(resp.InputExec.Status.Metrics))
				for key14, value14 := range resp.InputExec.Status.Metrics {
					result14, _ := json.Marshal(value14)
					r.InputExec.Status.Metrics[key14] = types.StringValue(string(result14))
				}
			}
			r.InputExec.Status.Timestamp = types.Float64Value(resp.InputExec.Status.Timestamp)
			r.InputExec.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputExec.Status.UseStatusFromLB)
		}
		r.InputExec.Streamtags = make([]types.String, 0, len(resp.InputExec.Streamtags))
		for _, v := range resp.InputExec.Streamtags {
			r.InputExec.Streamtags = append(r.InputExec.Streamtags, types.StringValue(v))
		}
		r.InputExec.Type = types.StringValue(string(resp.InputExec.Type))
	}
	if resp.InputFile != nil {
		r.InputFile = &tfTypes.InputFile{}
		r.InputFile.BreakerRulesets = make([]types.String, 0, len(resp.InputFile.BreakerRulesets))
		for _, v := range resp.InputFile.BreakerRulesets {
			r.InputFile.BreakerRulesets = append(r.InputFile.BreakerRulesets, types.StringValue(v))
		}
		r.InputFile.CheckFileModTime = types.BoolPointerValue(resp.InputFile.CheckFileModTime)
		r.InputFile.Connections = []tfTypes.InputFileConnections{}
		if len(r.InputFile.Connections) > len(resp.InputFile.Connections) {
			r.InputFile.Connections = r.InputFile.Connections[:len(resp.InputFile.Connections)]
		}
		for connectionsCount15, connectionsItem15 := range resp.InputFile.Connections {
			var connections15 tfTypes.InputFileConnections
			connections15.Output = types.StringValue(connectionsItem15.Output)
			connections15.Pipeline = types.StringPointerValue(connectionsItem15.Pipeline)
			if connectionsCount15+1 > len(r.InputFile.Connections) {
				r.InputFile.Connections = append(r.InputFile.Connections, connections15)
			} else {
				r.InputFile.Connections[connectionsCount15].Output = connections15.Output
				r.InputFile.Connections[connectionsCount15].Pipeline = connections15.Pipeline
			}
		}
		r.InputFile.DeleteFiles = types.BoolPointerValue(resp.InputFile.DeleteFiles)
		r.InputFile.Depth = types.Float64PointerValue(resp.InputFile.Depth)
		r.InputFile.Description = types.StringPointerValue(resp.InputFile.Description)
		r.InputFile.Disabled = types.BoolPointerValue(resp.InputFile.Disabled)
		r.InputFile.Environment = types.StringPointerValue(resp.InputFile.Environment)
		r.InputFile.Filenames = make([]types.String, 0, len(resp.InputFile.Filenames))
		for _, v := range resp.InputFile.Filenames {
			r.InputFile.Filenames = append(r.InputFile.Filenames, types.StringValue(v))
		}
		r.InputFile.ForceText = types.BoolPointerValue(resp.InputFile.ForceText)
		r.InputFile.HashLen = types.Float64PointerValue(resp.InputFile.HashLen)
		r.InputFile.ID = types.StringValue(resp.InputFile.ID)
		r.InputFile.IdleTimeout = types.Float64PointerValue(resp.InputFile.IdleTimeout)
		r.InputFile.IncludeUnidentifiableBinary = types.BoolPointerValue(resp.InputFile.IncludeUnidentifiableBinary)
		r.InputFile.Interval = types.Float64PointerValue(resp.InputFile.Interval)
		r.InputFile.MaxAgeDur = types.StringPointerValue(resp.InputFile.MaxAgeDur)
		r.InputFile.Metadata = []tfTypes.InputFileMetadata{}
		if len(r.InputFile.Metadata) > len(resp.InputFile.Metadata) {
			r.InputFile.Metadata = r.InputFile.Metadata[:len(resp.InputFile.Metadata)]
		}
		for metadataCount15, metadataItem15 := range resp.InputFile.Metadata {
			var metadata15 tfTypes.InputFileMetadata
			metadata15.Name = types.StringValue(metadataItem15.Name)
			metadata15.Value = types.StringValue(metadataItem15.Value)
			if metadataCount15+1 > len(r.InputFile.Metadata) {
				r.InputFile.Metadata = append(r.InputFile.Metadata, metadata15)
			} else {
				r.InputFile.Metadata[metadataCount15].Name = metadata15.Name
				r.InputFile.Metadata[metadataCount15].Value = metadata15.Value
			}
		}
		if resp.InputFile.Mode != nil {
			r.InputFile.Mode = types.StringValue(string(*resp.InputFile.Mode))
		} else {
			r.InputFile.Mode = types.StringNull()
		}
		r.InputFile.Path = types.StringPointerValue(resp.InputFile.Path)
		r.InputFile.Pipeline = types.StringPointerValue(resp.InputFile.Pipeline)
		if resp.InputFile.Pq == nil {
			r.InputFile.Pq = nil
		} else {
			r.InputFile.Pq = &tfTypes.InputFilePq{}
			r.InputFile.Pq.CommitFrequency = types.Float64PointerValue(resp.InputFile.Pq.CommitFrequency)
			if resp.InputFile.Pq.Compress != nil {
				r.InputFile.Pq.Compress = types.StringValue(string(*resp.InputFile.Pq.Compress))
			} else {
				r.InputFile.Pq.Compress = types.StringNull()
			}
			r.InputFile.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputFile.Pq.MaxBufferSize)
			r.InputFile.Pq.MaxFileSize = types.StringPointerValue(resp.InputFile.Pq.MaxFileSize)
			r.InputFile.Pq.MaxSize = types.StringPointerValue(resp.InputFile.Pq.MaxSize)
			if resp.InputFile.Pq.Mode != nil {
				r.InputFile.Pq.Mode = types.StringValue(string(*resp.InputFile.Pq.Mode))
			} else {
				r.InputFile.Pq.Mode = types.StringNull()
			}
			r.InputFile.Pq.Path = types.StringPointerValue(resp.InputFile.Pq.Path)
		}
		r.InputFile.PqEnabled = types.BoolPointerValue(resp.InputFile.PqEnabled)
		r.InputFile.SendToRoutes = types.BoolPointerValue(resp.InputFile.SendToRoutes)
		r.InputFile.StaleChannelFlushMs = types.Float64PointerValue(resp.InputFile.StaleChannelFlushMs)
		if resp.InputFile.Status == nil {
			r.InputFile.Status = nil
		} else {
			r.InputFile.Status = &tfTypes.TFStatus{}
			r.InputFile.Status.Health = types.StringValue(string(resp.InputFile.Status.Health))
			if len(resp.InputFile.Status.Metrics) > 0 {
				r.InputFile.Status.Metrics = make(map[string]types.String, len(resp.InputFile.Status.Metrics))
				for key15, value15 := range resp.InputFile.Status.Metrics {
					result15, _ := json.Marshal(value15)
					r.InputFile.Status.Metrics[key15] = types.StringValue(string(result15))
				}
			}
			r.InputFile.Status.Timestamp = types.Float64Value(resp.InputFile.Status.Timestamp)
			r.InputFile.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputFile.Status.UseStatusFromLB)
		}
		r.InputFile.Streamtags = make([]types.String, 0, len(resp.InputFile.Streamtags))
		for _, v := range resp.InputFile.Streamtags {
			r.InputFile.Streamtags = append(r.InputFile.Streamtags, types.StringValue(v))
		}
		r.InputFile.SuppressMissingPathErrors = types.BoolPointerValue(resp.InputFile.SuppressMissingPathErrors)
		r.InputFile.TailOnly = types.BoolPointerValue(resp.InputFile.TailOnly)
		r.InputFile.Type = types.StringValue(string(resp.InputFile.Type))
	}
	if resp.InputFirehose != nil {
		r.InputFirehose = &tfTypes.InputFirehose{}
		r.InputFirehose.ActivityLogSampleRate = types.Float64PointerValue(resp.InputFirehose.ActivityLogSampleRate)
		r.InputFirehose.AuthTokens = make([]types.String, 0, len(resp.InputFirehose.AuthTokens))
		for _, v := range resp.InputFirehose.AuthTokens {
			r.InputFirehose.AuthTokens = append(r.InputFirehose.AuthTokens, types.StringValue(v))
		}
		r.InputFirehose.CaptureHeaders = types.BoolPointerValue(resp.InputFirehose.CaptureHeaders)
		r.InputFirehose.Connections = []tfTypes.InputFirehoseConnections{}
		if len(r.InputFirehose.Connections) > len(resp.InputFirehose.Connections) {
			r.InputFirehose.Connections = r.InputFirehose.Connections[:len(resp.InputFirehose.Connections)]
		}
		for connectionsCount16, connectionsItem16 := range resp.InputFirehose.Connections {
			var connections16 tfTypes.InputFirehoseConnections
			connections16.Output = types.StringValue(connectionsItem16.Output)
			connections16.Pipeline = types.StringPointerValue(connectionsItem16.Pipeline)
			if connectionsCount16+1 > len(r.InputFirehose.Connections) {
				r.InputFirehose.Connections = append(r.InputFirehose.Connections, connections16)
			} else {
				r.InputFirehose.Connections[connectionsCount16].Output = connections16.Output
				r.InputFirehose.Connections[connectionsCount16].Pipeline = connections16.Pipeline
			}
		}
		r.InputFirehose.Description = types.StringPointerValue(resp.InputFirehose.Description)
		r.InputFirehose.Disabled = types.BoolPointerValue(resp.InputFirehose.Disabled)
		r.InputFirehose.EnableHealthCheck = types.BoolPointerValue(resp.InputFirehose.EnableHealthCheck)
		r.InputFirehose.EnableProxyHeader = types.BoolPointerValue(resp.InputFirehose.EnableProxyHeader)
		r.InputFirehose.Environment = types.StringPointerValue(resp.InputFirehose.Environment)
		r.InputFirehose.Host = types.StringPointerValue(resp.InputFirehose.Host)
		r.InputFirehose.ID = types.StringPointerValue(resp.InputFirehose.ID)
		r.InputFirehose.IPAllowlistRegex = types.StringPointerValue(resp.InputFirehose.IPAllowlistRegex)
		r.InputFirehose.IPDenylistRegex = types.StringPointerValue(resp.InputFirehose.IPDenylistRegex)
		r.InputFirehose.KeepAliveTimeout = types.Float64PointerValue(resp.InputFirehose.KeepAliveTimeout)
		r.InputFirehose.MaxActiveReq = types.Float64PointerValue(resp.InputFirehose.MaxActiveReq)
		r.InputFirehose.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputFirehose.MaxRequestsPerSocket)
		r.InputFirehose.Metadata = []tfTypes.InputFirehoseMetadata{}
		if len(r.InputFirehose.Metadata) > len(resp.InputFirehose.Metadata) {
			r.InputFirehose.Metadata = r.InputFirehose.Metadata[:len(resp.InputFirehose.Metadata)]
		}
		for metadataCount16, metadataItem16 := range resp.InputFirehose.Metadata {
			var metadata16 tfTypes.InputFirehoseMetadata
			metadata16.Name = types.StringValue(metadataItem16.Name)
			metadata16.Value = types.StringValue(metadataItem16.Value)
			if metadataCount16+1 > len(r.InputFirehose.Metadata) {
				r.InputFirehose.Metadata = append(r.InputFirehose.Metadata, metadata16)
			} else {
				r.InputFirehose.Metadata[metadataCount16].Name = metadata16.Name
				r.InputFirehose.Metadata[metadataCount16].Value = metadata16.Value
			}
		}
		r.InputFirehose.Pipeline = types.StringPointerValue(resp.InputFirehose.Pipeline)
		r.InputFirehose.Port = types.Float64Value(resp.InputFirehose.Port)
		if resp.InputFirehose.Pq == nil {
			r.InputFirehose.Pq = nil
		} else {
			r.InputFirehose.Pq = &tfTypes.InputFirehosePq{}
			r.InputFirehose.Pq.CommitFrequency = types.Float64PointerValue(resp.InputFirehose.Pq.CommitFrequency)
			if resp.InputFirehose.Pq.Compress != nil {
				r.InputFirehose.Pq.Compress = types.StringValue(string(*resp.InputFirehose.Pq.Compress))
			} else {
				r.InputFirehose.Pq.Compress = types.StringNull()
			}
			r.InputFirehose.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputFirehose.Pq.MaxBufferSize)
			r.InputFirehose.Pq.MaxFileSize = types.StringPointerValue(resp.InputFirehose.Pq.MaxFileSize)
			r.InputFirehose.Pq.MaxSize = types.StringPointerValue(resp.InputFirehose.Pq.MaxSize)
			if resp.InputFirehose.Pq.Mode != nil {
				r.InputFirehose.Pq.Mode = types.StringValue(string(*resp.InputFirehose.Pq.Mode))
			} else {
				r.InputFirehose.Pq.Mode = types.StringNull()
			}
			r.InputFirehose.Pq.Path = types.StringPointerValue(resp.InputFirehose.Pq.Path)
		}
		r.InputFirehose.PqEnabled = types.BoolPointerValue(resp.InputFirehose.PqEnabled)
		r.InputFirehose.RequestTimeout = types.Float64PointerValue(resp.InputFirehose.RequestTimeout)
		r.InputFirehose.SendToRoutes = types.BoolPointerValue(resp.InputFirehose.SendToRoutes)
		r.InputFirehose.SocketTimeout = types.Float64PointerValue(resp.InputFirehose.SocketTimeout)
		if resp.InputFirehose.Status == nil {
			r.InputFirehose.Status = nil
		} else {
			r.InputFirehose.Status = &tfTypes.TFStatus{}
			r.InputFirehose.Status.Health = types.StringValue(string(resp.InputFirehose.Status.Health))
			if len(resp.InputFirehose.Status.Metrics) > 0 {
				r.InputFirehose.Status.Metrics = make(map[string]types.String, len(resp.InputFirehose.Status.Metrics))
				for key16, value16 := range resp.InputFirehose.Status.Metrics {
					result16, _ := json.Marshal(value16)
					r.InputFirehose.Status.Metrics[key16] = types.StringValue(string(result16))
				}
			}
			r.InputFirehose.Status.Timestamp = types.Float64Value(resp.InputFirehose.Status.Timestamp)
			r.InputFirehose.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputFirehose.Status.UseStatusFromLB)
		}
		r.InputFirehose.Streamtags = make([]types.String, 0, len(resp.InputFirehose.Streamtags))
		for _, v := range resp.InputFirehose.Streamtags {
			r.InputFirehose.Streamtags = append(r.InputFirehose.Streamtags, types.StringValue(v))
		}
		if resp.InputFirehose.TLS == nil {
			r.InputFirehose.TLS = nil
		} else {
			r.InputFirehose.TLS = &tfTypes.InputFirehoseTLSSettingsServerSide{}
			r.InputFirehose.TLS.CaPath = types.StringPointerValue(resp.InputFirehose.TLS.CaPath)
			r.InputFirehose.TLS.CertificateName = types.StringPointerValue(resp.InputFirehose.TLS.CertificateName)
			r.InputFirehose.TLS.CertPath = types.StringPointerValue(resp.InputFirehose.TLS.CertPath)
			if resp.InputFirehose.TLS.CommonNameRegex == nil {
				r.InputFirehose.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult5, _ := json.Marshal(resp.InputFirehose.TLS.CommonNameRegex)
				r.InputFirehose.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult5))
			}
			r.InputFirehose.TLS.Disabled = types.BoolPointerValue(resp.InputFirehose.TLS.Disabled)
			if resp.InputFirehose.TLS.MaxVersion != nil {
				r.InputFirehose.TLS.MaxVersion = types.StringValue(string(*resp.InputFirehose.TLS.MaxVersion))
			} else {
				r.InputFirehose.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputFirehose.TLS.MinVersion != nil {
				r.InputFirehose.TLS.MinVersion = types.StringValue(string(*resp.InputFirehose.TLS.MinVersion))
			} else {
				r.InputFirehose.TLS.MinVersion = types.StringNull()
			}
			r.InputFirehose.TLS.Passphrase = types.StringPointerValue(resp.InputFirehose.TLS.Passphrase)
			r.InputFirehose.TLS.PrivKeyPath = types.StringPointerValue(resp.InputFirehose.TLS.PrivKeyPath)
			if resp.InputFirehose.TLS.RejectUnauthorized == nil {
				r.InputFirehose.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult5, _ := json.Marshal(resp.InputFirehose.TLS.RejectUnauthorized)
				r.InputFirehose.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult5))
			}
			r.InputFirehose.TLS.RequestCert = types.BoolPointerValue(resp.InputFirehose.TLS.RequestCert)
		}
		if resp.InputFirehose.Type != nil {
			r.InputFirehose.Type = types.StringValue(string(*resp.InputFirehose.Type))
		} else {
			r.InputFirehose.Type = types.StringNull()
		}
	}
	if resp.InputGooglePubsub != nil {
		r.InputGooglePubsub = &tfTypes.InputGooglePubsub{}
		r.InputGooglePubsub.Concurrency = types.Float64PointerValue(resp.InputGooglePubsub.Concurrency)
		r.InputGooglePubsub.Connections = []tfTypes.InputGooglePubsubConnections{}
		if len(r.InputGooglePubsub.Connections) > len(resp.InputGooglePubsub.Connections) {
			r.InputGooglePubsub.Connections = r.InputGooglePubsub.Connections[:len(resp.InputGooglePubsub.Connections)]
		}
		for connectionsCount17, connectionsItem17 := range resp.InputGooglePubsub.Connections {
			var connections17 tfTypes.InputGooglePubsubConnections
			connections17.Output = types.StringValue(connectionsItem17.Output)
			connections17.Pipeline = types.StringPointerValue(connectionsItem17.Pipeline)
			if connectionsCount17+1 > len(r.InputGooglePubsub.Connections) {
				r.InputGooglePubsub.Connections = append(r.InputGooglePubsub.Connections, connections17)
			} else {
				r.InputGooglePubsub.Connections[connectionsCount17].Output = connections17.Output
				r.InputGooglePubsub.Connections[connectionsCount17].Pipeline = connections17.Pipeline
			}
		}
		r.InputGooglePubsub.CreateSubscription = types.BoolPointerValue(resp.InputGooglePubsub.CreateSubscription)
		r.InputGooglePubsub.CreateTopic = types.BoolPointerValue(resp.InputGooglePubsub.CreateTopic)
		r.InputGooglePubsub.Description = types.StringPointerValue(resp.InputGooglePubsub.Description)
		r.InputGooglePubsub.Disabled = types.BoolPointerValue(resp.InputGooglePubsub.Disabled)
		r.InputGooglePubsub.Environment = types.StringPointerValue(resp.InputGooglePubsub.Environment)
		if resp.InputGooglePubsub.GoogleAuthMethod != nil {
			r.InputGooglePubsub.GoogleAuthMethod = types.StringValue(string(*resp.InputGooglePubsub.GoogleAuthMethod))
		} else {
			r.InputGooglePubsub.GoogleAuthMethod = types.StringNull()
		}
		r.InputGooglePubsub.ID = types.StringPointerValue(resp.InputGooglePubsub.ID)
		r.InputGooglePubsub.MaxBacklog = types.Float64PointerValue(resp.InputGooglePubsub.MaxBacklog)
		r.InputGooglePubsub.Metadata = []tfTypes.InputGooglePubsubMetadata{}
		if len(r.InputGooglePubsub.Metadata) > len(resp.InputGooglePubsub.Metadata) {
			r.InputGooglePubsub.Metadata = r.InputGooglePubsub.Metadata[:len(resp.InputGooglePubsub.Metadata)]
		}
		for metadataCount17, metadataItem17 := range resp.InputGooglePubsub.Metadata {
			var metadata17 tfTypes.InputGooglePubsubMetadata
			metadata17.Name = types.StringValue(metadataItem17.Name)
			metadata17.Value = types.StringValue(metadataItem17.Value)
			if metadataCount17+1 > len(r.InputGooglePubsub.Metadata) {
				r.InputGooglePubsub.Metadata = append(r.InputGooglePubsub.Metadata, metadata17)
			} else {
				r.InputGooglePubsub.Metadata[metadataCount17].Name = metadata17.Name
				r.InputGooglePubsub.Metadata[metadataCount17].Value = metadata17.Value
			}
		}
		r.InputGooglePubsub.OrderedDelivery = types.BoolPointerValue(resp.InputGooglePubsub.OrderedDelivery)
		r.InputGooglePubsub.Pipeline = types.StringPointerValue(resp.InputGooglePubsub.Pipeline)
		if resp.InputGooglePubsub.Pq == nil {
			r.InputGooglePubsub.Pq = nil
		} else {
			r.InputGooglePubsub.Pq = &tfTypes.InputGooglePubsubPq{}
			r.InputGooglePubsub.Pq.CommitFrequency = types.Float64PointerValue(resp.InputGooglePubsub.Pq.CommitFrequency)
			if resp.InputGooglePubsub.Pq.Compress != nil {
				r.InputGooglePubsub.Pq.Compress = types.StringValue(string(*resp.InputGooglePubsub.Pq.Compress))
			} else {
				r.InputGooglePubsub.Pq.Compress = types.StringNull()
			}
			r.InputGooglePubsub.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputGooglePubsub.Pq.MaxBufferSize)
			r.InputGooglePubsub.Pq.MaxFileSize = types.StringPointerValue(resp.InputGooglePubsub.Pq.MaxFileSize)
			r.InputGooglePubsub.Pq.MaxSize = types.StringPointerValue(resp.InputGooglePubsub.Pq.MaxSize)
			if resp.InputGooglePubsub.Pq.Mode != nil {
				r.InputGooglePubsub.Pq.Mode = types.StringValue(string(*resp.InputGooglePubsub.Pq.Mode))
			} else {
				r.InputGooglePubsub.Pq.Mode = types.StringNull()
			}
			r.InputGooglePubsub.Pq.Path = types.StringPointerValue(resp.InputGooglePubsub.Pq.Path)
		}
		r.InputGooglePubsub.PqEnabled = types.BoolPointerValue(resp.InputGooglePubsub.PqEnabled)
		r.InputGooglePubsub.Region = types.StringPointerValue(resp.InputGooglePubsub.Region)
		r.InputGooglePubsub.RequestTimeout = types.Float64PointerValue(resp.InputGooglePubsub.RequestTimeout)
		r.InputGooglePubsub.Secret = types.StringPointerValue(resp.InputGooglePubsub.Secret)
		r.InputGooglePubsub.SendToRoutes = types.BoolPointerValue(resp.InputGooglePubsub.SendToRoutes)
		r.InputGooglePubsub.ServiceAccountCredentials = types.StringPointerValue(resp.InputGooglePubsub.ServiceAccountCredentials)
		if resp.InputGooglePubsub.Status == nil {
			r.InputGooglePubsub.Status = nil
		} else {
			r.InputGooglePubsub.Status = &tfTypes.TFStatus{}
			r.InputGooglePubsub.Status.Health = types.StringValue(string(resp.InputGooglePubsub.Status.Health))
			if len(resp.InputGooglePubsub.Status.Metrics) > 0 {
				r.InputGooglePubsub.Status.Metrics = make(map[string]types.String, len(resp.InputGooglePubsub.Status.Metrics))
				for key17, value17 := range resp.InputGooglePubsub.Status.Metrics {
					result17, _ := json.Marshal(value17)
					r.InputGooglePubsub.Status.Metrics[key17] = types.StringValue(string(result17))
				}
			}
			r.InputGooglePubsub.Status.Timestamp = types.Float64Value(resp.InputGooglePubsub.Status.Timestamp)
			r.InputGooglePubsub.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputGooglePubsub.Status.UseStatusFromLB)
		}
		r.InputGooglePubsub.Streamtags = make([]types.String, 0, len(resp.InputGooglePubsub.Streamtags))
		for _, v := range resp.InputGooglePubsub.Streamtags {
			r.InputGooglePubsub.Streamtags = append(r.InputGooglePubsub.Streamtags, types.StringValue(v))
		}
		r.InputGooglePubsub.SubscriptionName = types.StringValue(resp.InputGooglePubsub.SubscriptionName)
		r.InputGooglePubsub.TopicName = types.StringValue(resp.InputGooglePubsub.TopicName)
		if resp.InputGooglePubsub.Type != nil {
			r.InputGooglePubsub.Type = types.StringValue(string(*resp.InputGooglePubsub.Type))
		} else {
			r.InputGooglePubsub.Type = types.StringNull()
		}
	}
	if resp.InputGrafana != nil {
		r.InputGrafana = &tfTypes.InputGrafana{}
		if resp.InputGrafana.InputGrafana1 != nil {
			r.InputGrafana.One = &tfTypes.InputGrafana1{}
			r.InputGrafana.One.ActivityLogSampleRate = types.Float64PointerValue(resp.InputGrafana.InputGrafana1.ActivityLogSampleRate)
			r.InputGrafana.One.CaptureHeaders = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.CaptureHeaders)
			r.InputGrafana.One.Connections = []tfTypes.InputGrafanaConnections{}
			if len(r.InputGrafana.One.Connections) > len(resp.InputGrafana.InputGrafana1.Connections) {
				r.InputGrafana.One.Connections = r.InputGrafana.One.Connections[:len(resp.InputGrafana.InputGrafana1.Connections)]
			}
			for connectionsCount18, connectionsItem18 := range resp.InputGrafana.InputGrafana1.Connections {
				var connections18 tfTypes.InputGrafanaConnections
				connections18.Output = types.StringValue(connectionsItem18.Output)
				connections18.Pipeline = types.StringPointerValue(connectionsItem18.Pipeline)
				if connectionsCount18+1 > len(r.InputGrafana.One.Connections) {
					r.InputGrafana.One.Connections = append(r.InputGrafana.One.Connections, connections18)
				} else {
					r.InputGrafana.One.Connections[connectionsCount18].Output = connections18.Output
					r.InputGrafana.One.Connections[connectionsCount18].Pipeline = connections18.Pipeline
				}
			}
			r.InputGrafana.One.Description = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Description)
			r.InputGrafana.One.Disabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.Disabled)
			r.InputGrafana.One.EnableHealthCheck = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.EnableHealthCheck)
			r.InputGrafana.One.EnableProxyHeader = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.EnableProxyHeader)
			r.InputGrafana.One.Environment = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Environment)
			r.InputGrafana.One.Host = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Host)
			r.InputGrafana.One.ID = types.StringPointerValue(resp.InputGrafana.InputGrafana1.ID)
			r.InputGrafana.One.IPAllowlistRegex = types.StringPointerValue(resp.InputGrafana.InputGrafana1.IPAllowlistRegex)
			r.InputGrafana.One.IPDenylistRegex = types.StringPointerValue(resp.InputGrafana.InputGrafana1.IPDenylistRegex)
			r.InputGrafana.One.KeepAliveTimeout = types.Float64PointerValue(resp.InputGrafana.InputGrafana1.KeepAliveTimeout)
			r.InputGrafana.One.LokiAPI = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAPI)
			if resp.InputGrafana.InputGrafana1.LokiAuth == nil {
				r.InputGrafana.One.LokiAuth = nil
			} else {
				r.InputGrafana.One.LokiAuth = &tfTypes.LokiAuth{}
				r.InputGrafana.One.LokiAuth.AuthHeaderExpr = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.AuthHeaderExpr)
				if resp.InputGrafana.InputGrafana1.LokiAuth.AuthType != nil {
					r.InputGrafana.One.LokiAuth.AuthType = types.StringValue(string(*resp.InputGrafana.InputGrafana1.LokiAuth.AuthType))
				} else {
					r.InputGrafana.One.LokiAuth.AuthType = types.StringNull()
				}
				r.InputGrafana.One.LokiAuth.CredentialsSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.CredentialsSecret)
				r.InputGrafana.One.LokiAuth.LoginURL = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.LoginURL)
				r.InputGrafana.One.LokiAuth.OauthHeaders = []tfTypes.InputInputGrafanaOauthHeaders{}
				if len(r.InputGrafana.One.LokiAuth.OauthHeaders) > len(resp.InputGrafana.InputGrafana1.LokiAuth.OauthHeaders) {
					r.InputGrafana.One.LokiAuth.OauthHeaders = r.InputGrafana.One.LokiAuth.OauthHeaders[:len(resp.InputGrafana.InputGrafana1.LokiAuth.OauthHeaders)]
				}
				for oauthHeadersCount, oauthHeadersItem := range resp.InputGrafana.InputGrafana1.LokiAuth.OauthHeaders {
					var oauthHeaders tfTypes.InputInputGrafanaOauthHeaders
					oauthHeaders.Name = types.StringValue(oauthHeadersItem.Name)
					oauthHeaders.Value = types.StringValue(oauthHeadersItem.Value)
					if oauthHeadersCount+1 > len(r.InputGrafana.One.LokiAuth.OauthHeaders) {
						r.InputGrafana.One.LokiAuth.OauthHeaders = append(r.InputGrafana.One.LokiAuth.OauthHeaders, oauthHeaders)
					} else {
						r.InputGrafana.One.LokiAuth.OauthHeaders[oauthHeadersCount].Name = oauthHeaders.Name
						r.InputGrafana.One.LokiAuth.OauthHeaders[oauthHeadersCount].Value = oauthHeaders.Value
					}
				}
				r.InputGrafana.One.LokiAuth.OauthParams = []tfTypes.InputInputGrafanaOauthParams{}
				if len(r.InputGrafana.One.LokiAuth.OauthParams) > len(resp.InputGrafana.InputGrafana1.LokiAuth.OauthParams) {
					r.InputGrafana.One.LokiAuth.OauthParams = r.InputGrafana.One.LokiAuth.OauthParams[:len(resp.InputGrafana.InputGrafana1.LokiAuth.OauthParams)]
				}
				for oauthParamsCount, oauthParamsItem := range resp.InputGrafana.InputGrafana1.LokiAuth.OauthParams {
					var oauthParams tfTypes.InputInputGrafanaOauthParams
					oauthParams.Name = types.StringValue(oauthParamsItem.Name)
					oauthParams.Value = types.StringValue(oauthParamsItem.Value)
					if oauthParamsCount+1 > len(r.InputGrafana.One.LokiAuth.OauthParams) {
						r.InputGrafana.One.LokiAuth.OauthParams = append(r.InputGrafana.One.LokiAuth.OauthParams, oauthParams)
					} else {
						r.InputGrafana.One.LokiAuth.OauthParams[oauthParamsCount].Name = oauthParams.Name
						r.InputGrafana.One.LokiAuth.OauthParams[oauthParamsCount].Value = oauthParams.Value
					}
				}
				r.InputGrafana.One.LokiAuth.Password = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.Password)
				r.InputGrafana.One.LokiAuth.Secret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.Secret)
				r.InputGrafana.One.LokiAuth.SecretParamName = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.SecretParamName)
				r.InputGrafana.One.LokiAuth.TextSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.TextSecret)
				r.InputGrafana.One.LokiAuth.Token = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.Token)
				r.InputGrafana.One.LokiAuth.TokenAttributeName = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.TokenAttributeName)
				r.InputGrafana.One.LokiAuth.TokenTimeoutSecs = types.Float64PointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.TokenTimeoutSecs)
				r.InputGrafana.One.LokiAuth.Username = types.StringPointerValue(resp.InputGrafana.InputGrafana1.LokiAuth.Username)
			}
			r.InputGrafana.One.MaxActiveReq = types.Float64PointerValue(resp.InputGrafana.InputGrafana1.MaxActiveReq)
			r.InputGrafana.One.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputGrafana.InputGrafana1.MaxRequestsPerSocket)
			r.InputGrafana.One.Metadata = []tfTypes.InputGrafanaMetadata{}
			if len(r.InputGrafana.One.Metadata) > len(resp.InputGrafana.InputGrafana1.Metadata) {
				r.InputGrafana.One.Metadata = r.InputGrafana.One.Metadata[:len(resp.InputGrafana.InputGrafana1.Metadata)]
			}
			for metadataCount18, metadataItem18 := range resp.InputGrafana.InputGrafana1.Metadata {
				var metadata18 tfTypes.InputGrafanaMetadata
				metadata18.Name = types.StringValue(metadataItem18.Name)
				metadata18.Value = types.StringValue(metadataItem18.Value)
				if metadataCount18+1 > len(r.InputGrafana.One.Metadata) {
					r.InputGrafana.One.Metadata = append(r.InputGrafana.One.Metadata, metadata18)
				} else {
					r.InputGrafana.One.Metadata[metadataCount18].Name = metadata18.Name
					r.InputGrafana.One.Metadata[metadataCount18].Value = metadata18.Value
				}
			}
			r.InputGrafana.One.Pipeline = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Pipeline)
			r.InputGrafana.One.Port = types.Float64Value(resp.InputGrafana.InputGrafana1.Port)
			if resp.InputGrafana.InputGrafana1.Pq == nil {
				r.InputGrafana.One.Pq = nil
			} else {
				r.InputGrafana.One.Pq = &tfTypes.InputGrafanaPq{}
				r.InputGrafana.One.Pq.CommitFrequency = types.Float64PointerValue(resp.InputGrafana.InputGrafana1.Pq.CommitFrequency)
				if resp.InputGrafana.InputGrafana1.Pq.Compress != nil {
					r.InputGrafana.One.Pq.Compress = types.StringValue(string(*resp.InputGrafana.InputGrafana1.Pq.Compress))
				} else {
					r.InputGrafana.One.Pq.Compress = types.StringNull()
				}
				r.InputGrafana.One.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputGrafana.InputGrafana1.Pq.MaxBufferSize)
				r.InputGrafana.One.Pq.MaxFileSize = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Pq.MaxFileSize)
				r.InputGrafana.One.Pq.MaxSize = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Pq.MaxSize)
				if resp.InputGrafana.InputGrafana1.Pq.Mode != nil {
					r.InputGrafana.One.Pq.Mode = types.StringValue(string(*resp.InputGrafana.InputGrafana1.Pq.Mode))
				} else {
					r.InputGrafana.One.Pq.Mode = types.StringNull()
				}
				r.InputGrafana.One.Pq.Path = types.StringPointerValue(resp.InputGrafana.InputGrafana1.Pq.Path)
			}
			r.InputGrafana.One.PqEnabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.PqEnabled)
			r.InputGrafana.One.PrometheusAPI = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAPI)
			if resp.InputGrafana.InputGrafana1.PrometheusAuth == nil {
				r.InputGrafana.One.PrometheusAuth = nil
			} else {
				r.InputGrafana.One.PrometheusAuth = &tfTypes.PrometheusAuth{}
				r.InputGrafana.One.PrometheusAuth.AuthHeaderExpr = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.AuthHeaderExpr)
				if resp.InputGrafana.InputGrafana1.PrometheusAuth.AuthType != nil {
					r.InputGrafana.One.PrometheusAuth.AuthType = types.StringValue(string(*resp.InputGrafana.InputGrafana1.PrometheusAuth.AuthType))
				} else {
					r.InputGrafana.One.PrometheusAuth.AuthType = types.StringNull()
				}
				r.InputGrafana.One.PrometheusAuth.CredentialsSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.CredentialsSecret)
				r.InputGrafana.One.PrometheusAuth.LoginURL = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.LoginURL)
				r.InputGrafana.One.PrometheusAuth.OauthHeaders = []tfTypes.InputGrafanaOauthHeaders{}
				if len(r.InputGrafana.One.PrometheusAuth.OauthHeaders) > len(resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthHeaders) {
					r.InputGrafana.One.PrometheusAuth.OauthHeaders = r.InputGrafana.One.PrometheusAuth.OauthHeaders[:len(resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthHeaders)]
				}
				for oauthHeadersCount1, oauthHeadersItem1 := range resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthHeaders {
					var oauthHeaders1 tfTypes.InputGrafanaOauthHeaders
					oauthHeaders1.Name = types.StringValue(oauthHeadersItem1.Name)
					oauthHeaders1.Value = types.StringValue(oauthHeadersItem1.Value)
					if oauthHeadersCount1+1 > len(r.InputGrafana.One.PrometheusAuth.OauthHeaders) {
						r.InputGrafana.One.PrometheusAuth.OauthHeaders = append(r.InputGrafana.One.PrometheusAuth.OauthHeaders, oauthHeaders1)
					} else {
						r.InputGrafana.One.PrometheusAuth.OauthHeaders[oauthHeadersCount1].Name = oauthHeaders1.Name
						r.InputGrafana.One.PrometheusAuth.OauthHeaders[oauthHeadersCount1].Value = oauthHeaders1.Value
					}
				}
				r.InputGrafana.One.PrometheusAuth.OauthParams = []tfTypes.InputGrafanaOauthParams{}
				if len(r.InputGrafana.One.PrometheusAuth.OauthParams) > len(resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthParams) {
					r.InputGrafana.One.PrometheusAuth.OauthParams = r.InputGrafana.One.PrometheusAuth.OauthParams[:len(resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthParams)]
				}
				for oauthParamsCount1, oauthParamsItem1 := range resp.InputGrafana.InputGrafana1.PrometheusAuth.OauthParams {
					var oauthParams1 tfTypes.InputGrafanaOauthParams
					oauthParams1.Name = types.StringValue(oauthParamsItem1.Name)
					oauthParams1.Value = types.StringValue(oauthParamsItem1.Value)
					if oauthParamsCount1+1 > len(r.InputGrafana.One.PrometheusAuth.OauthParams) {
						r.InputGrafana.One.PrometheusAuth.OauthParams = append(r.InputGrafana.One.PrometheusAuth.OauthParams, oauthParams1)
					} else {
						r.InputGrafana.One.PrometheusAuth.OauthParams[oauthParamsCount1].Name = oauthParams1.Name
						r.InputGrafana.One.PrometheusAuth.OauthParams[oauthParamsCount1].Value = oauthParams1.Value
					}
				}
				r.InputGrafana.One.PrometheusAuth.Password = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.Password)
				r.InputGrafana.One.PrometheusAuth.Secret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.Secret)
				r.InputGrafana.One.PrometheusAuth.SecretParamName = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.SecretParamName)
				r.InputGrafana.One.PrometheusAuth.TextSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.TextSecret)
				r.InputGrafana.One.PrometheusAuth.Token = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.Token)
				r.InputGrafana.One.PrometheusAuth.TokenAttributeName = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.TokenAttributeName)
				r.InputGrafana.One.PrometheusAuth.TokenTimeoutSecs = types.Float64PointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.TokenTimeoutSecs)
				r.InputGrafana.One.PrometheusAuth.Username = types.StringPointerValue(resp.InputGrafana.InputGrafana1.PrometheusAuth.Username)
			}
			r.InputGrafana.One.RequestTimeout = types.Float64PointerValue(resp.InputGrafana.InputGrafana1.RequestTimeout)
			r.InputGrafana.One.SendToRoutes = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.SendToRoutes)
			r.InputGrafana.One.SocketTimeout = types.Float64PointerValue(resp.InputGrafana.InputGrafana1.SocketTimeout)
			if resp.InputGrafana.InputGrafana1.Status == nil {
				r.InputGrafana.One.Status = nil
			} else {
				r.InputGrafana.One.Status = &tfTypes.TFStatus{}
				r.InputGrafana.One.Status.Health = types.StringValue(string(resp.InputGrafana.InputGrafana1.Status.Health))
				if len(resp.InputGrafana.InputGrafana1.Status.Metrics) > 0 {
					r.InputGrafana.One.Status.Metrics = make(map[string]types.String, len(resp.InputGrafana.InputGrafana1.Status.Metrics))
					for key18, value18 := range resp.InputGrafana.InputGrafana1.Status.Metrics {
						result18, _ := json.Marshal(value18)
						r.InputGrafana.One.Status.Metrics[key18] = types.StringValue(string(result18))
					}
				}
				r.InputGrafana.One.Status.Timestamp = types.Float64Value(resp.InputGrafana.InputGrafana1.Status.Timestamp)
				r.InputGrafana.One.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.Status.UseStatusFromLB)
			}
			r.InputGrafana.One.Streamtags = make([]types.String, 0, len(resp.InputGrafana.InputGrafana1.Streamtags))
			for _, v := range resp.InputGrafana.InputGrafana1.Streamtags {
				r.InputGrafana.One.Streamtags = append(r.InputGrafana.One.Streamtags, types.StringValue(v))
			}
			if resp.InputGrafana.InputGrafana1.TLS == nil {
				r.InputGrafana.One.TLS = nil
			} else {
				r.InputGrafana.One.TLS = &tfTypes.InputGrafanaTLSSettingsServerSide{}
				r.InputGrafana.One.TLS.CaPath = types.StringPointerValue(resp.InputGrafana.InputGrafana1.TLS.CaPath)
				r.InputGrafana.One.TLS.CertificateName = types.StringPointerValue(resp.InputGrafana.InputGrafana1.TLS.CertificateName)
				r.InputGrafana.One.TLS.CertPath = types.StringPointerValue(resp.InputGrafana.InputGrafana1.TLS.CertPath)
				if resp.InputGrafana.InputGrafana1.TLS.CommonNameRegex == nil {
					r.InputGrafana.One.TLS.CommonNameRegex = types.StringNull()
				} else {
					commonNameRegexResult6, _ := json.Marshal(resp.InputGrafana.InputGrafana1.TLS.CommonNameRegex)
					r.InputGrafana.One.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult6))
				}
				r.InputGrafana.One.TLS.Disabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.TLS.Disabled)
				if resp.InputGrafana.InputGrafana1.TLS.MaxVersion != nil {
					r.InputGrafana.One.TLS.MaxVersion = types.StringValue(string(*resp.InputGrafana.InputGrafana1.TLS.MaxVersion))
				} else {
					r.InputGrafana.One.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputGrafana.InputGrafana1.TLS.MinVersion != nil {
					r.InputGrafana.One.TLS.MinVersion = types.StringValue(string(*resp.InputGrafana.InputGrafana1.TLS.MinVersion))
				} else {
					r.InputGrafana.One.TLS.MinVersion = types.StringNull()
				}
				r.InputGrafana.One.TLS.Passphrase = types.StringPointerValue(resp.InputGrafana.InputGrafana1.TLS.Passphrase)
				r.InputGrafana.One.TLS.PrivKeyPath = types.StringPointerValue(resp.InputGrafana.InputGrafana1.TLS.PrivKeyPath)
				if resp.InputGrafana.InputGrafana1.TLS.RejectUnauthorized == nil {
					r.InputGrafana.One.TLS.RejectUnauthorized = types.StringNull()
				} else {
					rejectUnauthorizedResult6, _ := json.Marshal(resp.InputGrafana.InputGrafana1.TLS.RejectUnauthorized)
					r.InputGrafana.One.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult6))
				}
				r.InputGrafana.One.TLS.RequestCert = types.BoolPointerValue(resp.InputGrafana.InputGrafana1.TLS.RequestCert)
			}
			if resp.InputGrafana.InputGrafana1.Type != nil {
				r.InputGrafana.One.Type = types.StringValue(string(*resp.InputGrafana.InputGrafana1.Type))
			} else {
				r.InputGrafana.One.Type = types.StringNull()
			}
		}
		if resp.InputGrafana.InputGrafana2 != nil {
			r.InputGrafana.Two = &tfTypes.InputGrafana2{}
			r.InputGrafana.Two.ActivityLogSampleRate = types.Float64PointerValue(resp.InputGrafana.InputGrafana2.ActivityLogSampleRate)
			r.InputGrafana.Two.CaptureHeaders = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.CaptureHeaders)
			r.InputGrafana.Two.Connections = []tfTypes.InputInputGrafanaConnections{}
			if len(r.InputGrafana.Two.Connections) > len(resp.InputGrafana.InputGrafana2.Connections) {
				r.InputGrafana.Two.Connections = r.InputGrafana.Two.Connections[:len(resp.InputGrafana.InputGrafana2.Connections)]
			}
			for connectionsCount19, connectionsItem19 := range resp.InputGrafana.InputGrafana2.Connections {
				var connections19 tfTypes.InputInputGrafanaConnections
				connections19.Output = types.StringValue(connectionsItem19.Output)
				connections19.Pipeline = types.StringPointerValue(connectionsItem19.Pipeline)
				if connectionsCount19+1 > len(r.InputGrafana.Two.Connections) {
					r.InputGrafana.Two.Connections = append(r.InputGrafana.Two.Connections, connections19)
				} else {
					r.InputGrafana.Two.Connections[connectionsCount19].Output = connections19.Output
					r.InputGrafana.Two.Connections[connectionsCount19].Pipeline = connections19.Pipeline
				}
			}
			r.InputGrafana.Two.Description = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Description)
			r.InputGrafana.Two.Disabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.Disabled)
			r.InputGrafana.Two.EnableHealthCheck = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.EnableHealthCheck)
			r.InputGrafana.Two.EnableProxyHeader = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.EnableProxyHeader)
			r.InputGrafana.Two.Environment = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Environment)
			r.InputGrafana.Two.Host = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Host)
			r.InputGrafana.Two.ID = types.StringPointerValue(resp.InputGrafana.InputGrafana2.ID)
			r.InputGrafana.Two.IPAllowlistRegex = types.StringPointerValue(resp.InputGrafana.InputGrafana2.IPAllowlistRegex)
			r.InputGrafana.Two.IPDenylistRegex = types.StringPointerValue(resp.InputGrafana.InputGrafana2.IPDenylistRegex)
			r.InputGrafana.Two.KeepAliveTimeout = types.Float64PointerValue(resp.InputGrafana.InputGrafana2.KeepAliveTimeout)
			r.InputGrafana.Two.LokiAPI = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAPI)
			if resp.InputGrafana.InputGrafana2.LokiAuth == nil {
				r.InputGrafana.Two.LokiAuth = nil
			} else {
				r.InputGrafana.Two.LokiAuth = &tfTypes.InputGrafanaLokiAuth{}
				r.InputGrafana.Two.LokiAuth.AuthHeaderExpr = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.AuthHeaderExpr)
				if resp.InputGrafana.InputGrafana2.LokiAuth.AuthType != nil {
					r.InputGrafana.Two.LokiAuth.AuthType = types.StringValue(string(*resp.InputGrafana.InputGrafana2.LokiAuth.AuthType))
				} else {
					r.InputGrafana.Two.LokiAuth.AuthType = types.StringNull()
				}
				r.InputGrafana.Two.LokiAuth.CredentialsSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.CredentialsSecret)
				r.InputGrafana.Two.LokiAuth.LoginURL = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.LoginURL)
				r.InputGrafana.Two.LokiAuth.OauthHeaders = []tfTypes.InputInputGrafana2LokiAuthOauthHeaders{}
				if len(r.InputGrafana.Two.LokiAuth.OauthHeaders) > len(resp.InputGrafana.InputGrafana2.LokiAuth.OauthHeaders) {
					r.InputGrafana.Two.LokiAuth.OauthHeaders = r.InputGrafana.Two.LokiAuth.OauthHeaders[:len(resp.InputGrafana.InputGrafana2.LokiAuth.OauthHeaders)]
				}
				for oauthHeadersCount2, oauthHeadersItem2 := range resp.InputGrafana.InputGrafana2.LokiAuth.OauthHeaders {
					var oauthHeaders2 tfTypes.InputInputGrafana2LokiAuthOauthHeaders
					oauthHeaders2.Name = types.StringValue(oauthHeadersItem2.Name)
					oauthHeaders2.Value = types.StringValue(oauthHeadersItem2.Value)
					if oauthHeadersCount2+1 > len(r.InputGrafana.Two.LokiAuth.OauthHeaders) {
						r.InputGrafana.Two.LokiAuth.OauthHeaders = append(r.InputGrafana.Two.LokiAuth.OauthHeaders, oauthHeaders2)
					} else {
						r.InputGrafana.Two.LokiAuth.OauthHeaders[oauthHeadersCount2].Name = oauthHeaders2.Name
						r.InputGrafana.Two.LokiAuth.OauthHeaders[oauthHeadersCount2].Value = oauthHeaders2.Value
					}
				}
				r.InputGrafana.Two.LokiAuth.OauthParams = []tfTypes.InputInputGrafana2LokiAuthOauthParams{}
				if len(r.InputGrafana.Two.LokiAuth.OauthParams) > len(resp.InputGrafana.InputGrafana2.LokiAuth.OauthParams) {
					r.InputGrafana.Two.LokiAuth.OauthParams = r.InputGrafana.Two.LokiAuth.OauthParams[:len(resp.InputGrafana.InputGrafana2.LokiAuth.OauthParams)]
				}
				for oauthParamsCount2, oauthParamsItem2 := range resp.InputGrafana.InputGrafana2.LokiAuth.OauthParams {
					var oauthParams2 tfTypes.InputInputGrafana2LokiAuthOauthParams
					oauthParams2.Name = types.StringValue(oauthParamsItem2.Name)
					oauthParams2.Value = types.StringValue(oauthParamsItem2.Value)
					if oauthParamsCount2+1 > len(r.InputGrafana.Two.LokiAuth.OauthParams) {
						r.InputGrafana.Two.LokiAuth.OauthParams = append(r.InputGrafana.Two.LokiAuth.OauthParams, oauthParams2)
					} else {
						r.InputGrafana.Two.LokiAuth.OauthParams[oauthParamsCount2].Name = oauthParams2.Name
						r.InputGrafana.Two.LokiAuth.OauthParams[oauthParamsCount2].Value = oauthParams2.Value
					}
				}
				r.InputGrafana.Two.LokiAuth.Password = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.Password)
				r.InputGrafana.Two.LokiAuth.Secret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.Secret)
				r.InputGrafana.Two.LokiAuth.SecretParamName = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.SecretParamName)
				r.InputGrafana.Two.LokiAuth.TextSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.TextSecret)
				r.InputGrafana.Two.LokiAuth.Token = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.Token)
				r.InputGrafana.Two.LokiAuth.TokenAttributeName = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.TokenAttributeName)
				r.InputGrafana.Two.LokiAuth.TokenTimeoutSecs = types.Float64PointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.TokenTimeoutSecs)
				r.InputGrafana.Two.LokiAuth.Username = types.StringPointerValue(resp.InputGrafana.InputGrafana2.LokiAuth.Username)
			}
			r.InputGrafana.Two.MaxActiveReq = types.Float64PointerValue(resp.InputGrafana.InputGrafana2.MaxActiveReq)
			r.InputGrafana.Two.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputGrafana.InputGrafana2.MaxRequestsPerSocket)
			r.InputGrafana.Two.Metadata = []tfTypes.InputInputGrafanaMetadata{}
			if len(r.InputGrafana.Two.Metadata) > len(resp.InputGrafana.InputGrafana2.Metadata) {
				r.InputGrafana.Two.Metadata = r.InputGrafana.Two.Metadata[:len(resp.InputGrafana.InputGrafana2.Metadata)]
			}
			for metadataCount19, metadataItem19 := range resp.InputGrafana.InputGrafana2.Metadata {
				var metadata19 tfTypes.InputInputGrafanaMetadata
				metadata19.Name = types.StringValue(metadataItem19.Name)
				metadata19.Value = types.StringValue(metadataItem19.Value)
				if metadataCount19+1 > len(r.InputGrafana.Two.Metadata) {
					r.InputGrafana.Two.Metadata = append(r.InputGrafana.Two.Metadata, metadata19)
				} else {
					r.InputGrafana.Two.Metadata[metadataCount19].Name = metadata19.Name
					r.InputGrafana.Two.Metadata[metadataCount19].Value = metadata19.Value
				}
			}
			r.InputGrafana.Two.Pipeline = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Pipeline)
			r.InputGrafana.Two.Port = types.Float64Value(resp.InputGrafana.InputGrafana2.Port)
			if resp.InputGrafana.InputGrafana2.Pq == nil {
				r.InputGrafana.Two.Pq = nil
			} else {
				r.InputGrafana.Two.Pq = &tfTypes.InputInputGrafanaPq{}
				r.InputGrafana.Two.Pq.CommitFrequency = types.Float64PointerValue(resp.InputGrafana.InputGrafana2.Pq.CommitFrequency)
				if resp.InputGrafana.InputGrafana2.Pq.Compress != nil {
					r.InputGrafana.Two.Pq.Compress = types.StringValue(string(*resp.InputGrafana.InputGrafana2.Pq.Compress))
				} else {
					r.InputGrafana.Two.Pq.Compress = types.StringNull()
				}
				r.InputGrafana.Two.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputGrafana.InputGrafana2.Pq.MaxBufferSize)
				r.InputGrafana.Two.Pq.MaxFileSize = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Pq.MaxFileSize)
				r.InputGrafana.Two.Pq.MaxSize = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Pq.MaxSize)
				if resp.InputGrafana.InputGrafana2.Pq.Mode != nil {
					r.InputGrafana.Two.Pq.Mode = types.StringValue(string(*resp.InputGrafana.InputGrafana2.Pq.Mode))
				} else {
					r.InputGrafana.Two.Pq.Mode = types.StringNull()
				}
				r.InputGrafana.Two.Pq.Path = types.StringPointerValue(resp.InputGrafana.InputGrafana2.Pq.Path)
			}
			r.InputGrafana.Two.PqEnabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.PqEnabled)
			r.InputGrafana.Two.PrometheusAPI = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAPI)
			if resp.InputGrafana.InputGrafana2.PrometheusAuth == nil {
				r.InputGrafana.Two.PrometheusAuth = nil
			} else {
				r.InputGrafana.Two.PrometheusAuth = &tfTypes.InputGrafanaPrometheusAuth{}
				r.InputGrafana.Two.PrometheusAuth.AuthHeaderExpr = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.AuthHeaderExpr)
				if resp.InputGrafana.InputGrafana2.PrometheusAuth.AuthType != nil {
					r.InputGrafana.Two.PrometheusAuth.AuthType = types.StringValue(string(*resp.InputGrafana.InputGrafana2.PrometheusAuth.AuthType))
				} else {
					r.InputGrafana.Two.PrometheusAuth.AuthType = types.StringNull()
				}
				r.InputGrafana.Two.PrometheusAuth.CredentialsSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.CredentialsSecret)
				r.InputGrafana.Two.PrometheusAuth.LoginURL = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.LoginURL)
				r.InputGrafana.Two.PrometheusAuth.OauthHeaders = []tfTypes.InputInputGrafana2OauthHeaders{}
				if len(r.InputGrafana.Two.PrometheusAuth.OauthHeaders) > len(resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthHeaders) {
					r.InputGrafana.Two.PrometheusAuth.OauthHeaders = r.InputGrafana.Two.PrometheusAuth.OauthHeaders[:len(resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthHeaders)]
				}
				for oauthHeadersCount3, oauthHeadersItem3 := range resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthHeaders {
					var oauthHeaders3 tfTypes.InputInputGrafana2OauthHeaders
					oauthHeaders3.Name = types.StringValue(oauthHeadersItem3.Name)
					oauthHeaders3.Value = types.StringValue(oauthHeadersItem3.Value)
					if oauthHeadersCount3+1 > len(r.InputGrafana.Two.PrometheusAuth.OauthHeaders) {
						r.InputGrafana.Two.PrometheusAuth.OauthHeaders = append(r.InputGrafana.Two.PrometheusAuth.OauthHeaders, oauthHeaders3)
					} else {
						r.InputGrafana.Two.PrometheusAuth.OauthHeaders[oauthHeadersCount3].Name = oauthHeaders3.Name
						r.InputGrafana.Two.PrometheusAuth.OauthHeaders[oauthHeadersCount3].Value = oauthHeaders3.Value
					}
				}
				r.InputGrafana.Two.PrometheusAuth.OauthParams = []tfTypes.InputInputGrafana2OauthParams{}
				if len(r.InputGrafana.Two.PrometheusAuth.OauthParams) > len(resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthParams) {
					r.InputGrafana.Two.PrometheusAuth.OauthParams = r.InputGrafana.Two.PrometheusAuth.OauthParams[:len(resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthParams)]
				}
				for oauthParamsCount3, oauthParamsItem3 := range resp.InputGrafana.InputGrafana2.PrometheusAuth.OauthParams {
					var oauthParams3 tfTypes.InputInputGrafana2OauthParams
					oauthParams3.Name = types.StringValue(oauthParamsItem3.Name)
					oauthParams3.Value = types.StringValue(oauthParamsItem3.Value)
					if oauthParamsCount3+1 > len(r.InputGrafana.Two.PrometheusAuth.OauthParams) {
						r.InputGrafana.Two.PrometheusAuth.OauthParams = append(r.InputGrafana.Two.PrometheusAuth.OauthParams, oauthParams3)
					} else {
						r.InputGrafana.Two.PrometheusAuth.OauthParams[oauthParamsCount3].Name = oauthParams3.Name
						r.InputGrafana.Two.PrometheusAuth.OauthParams[oauthParamsCount3].Value = oauthParams3.Value
					}
				}
				r.InputGrafana.Two.PrometheusAuth.Password = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.Password)
				r.InputGrafana.Two.PrometheusAuth.Secret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.Secret)
				r.InputGrafana.Two.PrometheusAuth.SecretParamName = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.SecretParamName)
				r.InputGrafana.Two.PrometheusAuth.TextSecret = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.TextSecret)
				r.InputGrafana.Two.PrometheusAuth.Token = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.Token)
				r.InputGrafana.Two.PrometheusAuth.TokenAttributeName = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.TokenAttributeName)
				r.InputGrafana.Two.PrometheusAuth.TokenTimeoutSecs = types.Float64PointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.TokenTimeoutSecs)
				r.InputGrafana.Two.PrometheusAuth.Username = types.StringPointerValue(resp.InputGrafana.InputGrafana2.PrometheusAuth.Username)
			}
			r.InputGrafana.Two.RequestTimeout = types.Float64PointerValue(resp.InputGrafana.InputGrafana2.RequestTimeout)
			r.InputGrafana.Two.SendToRoutes = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.SendToRoutes)
			r.InputGrafana.Two.SocketTimeout = types.Float64PointerValue(resp.InputGrafana.InputGrafana2.SocketTimeout)
			if resp.InputGrafana.InputGrafana2.Status == nil {
				r.InputGrafana.Two.Status = nil
			} else {
				r.InputGrafana.Two.Status = &tfTypes.TFStatus{}
				r.InputGrafana.Two.Status.Health = types.StringValue(string(resp.InputGrafana.InputGrafana2.Status.Health))
				if len(resp.InputGrafana.InputGrafana2.Status.Metrics) > 0 {
					r.InputGrafana.Two.Status.Metrics = make(map[string]types.String, len(resp.InputGrafana.InputGrafana2.Status.Metrics))
					for key19, value19 := range resp.InputGrafana.InputGrafana2.Status.Metrics {
						result19, _ := json.Marshal(value19)
						r.InputGrafana.Two.Status.Metrics[key19] = types.StringValue(string(result19))
					}
				}
				r.InputGrafana.Two.Status.Timestamp = types.Float64Value(resp.InputGrafana.InputGrafana2.Status.Timestamp)
				r.InputGrafana.Two.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.Status.UseStatusFromLB)
			}
			r.InputGrafana.Two.Streamtags = make([]types.String, 0, len(resp.InputGrafana.InputGrafana2.Streamtags))
			for _, v := range resp.InputGrafana.InputGrafana2.Streamtags {
				r.InputGrafana.Two.Streamtags = append(r.InputGrafana.Two.Streamtags, types.StringValue(v))
			}
			if resp.InputGrafana.InputGrafana2.TLS == nil {
				r.InputGrafana.Two.TLS = nil
			} else {
				r.InputGrafana.Two.TLS = &tfTypes.InputInputGrafanaTLSSettingsServerSide{}
				r.InputGrafana.Two.TLS.CaPath = types.StringPointerValue(resp.InputGrafana.InputGrafana2.TLS.CaPath)
				r.InputGrafana.Two.TLS.CertificateName = types.StringPointerValue(resp.InputGrafana.InputGrafana2.TLS.CertificateName)
				r.InputGrafana.Two.TLS.CertPath = types.StringPointerValue(resp.InputGrafana.InputGrafana2.TLS.CertPath)
				if resp.InputGrafana.InputGrafana2.TLS.CommonNameRegex == nil {
					r.InputGrafana.Two.TLS.CommonNameRegex = types.StringNull()
				} else {
					commonNameRegexResult7, _ := json.Marshal(resp.InputGrafana.InputGrafana2.TLS.CommonNameRegex)
					r.InputGrafana.Two.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult7))
				}
				r.InputGrafana.Two.TLS.Disabled = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.TLS.Disabled)
				if resp.InputGrafana.InputGrafana2.TLS.MaxVersion != nil {
					r.InputGrafana.Two.TLS.MaxVersion = types.StringValue(string(*resp.InputGrafana.InputGrafana2.TLS.MaxVersion))
				} else {
					r.InputGrafana.Two.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputGrafana.InputGrafana2.TLS.MinVersion != nil {
					r.InputGrafana.Two.TLS.MinVersion = types.StringValue(string(*resp.InputGrafana.InputGrafana2.TLS.MinVersion))
				} else {
					r.InputGrafana.Two.TLS.MinVersion = types.StringNull()
				}
				r.InputGrafana.Two.TLS.Passphrase = types.StringPointerValue(resp.InputGrafana.InputGrafana2.TLS.Passphrase)
				r.InputGrafana.Two.TLS.PrivKeyPath = types.StringPointerValue(resp.InputGrafana.InputGrafana2.TLS.PrivKeyPath)
				if resp.InputGrafana.InputGrafana2.TLS.RejectUnauthorized == nil {
					r.InputGrafana.Two.TLS.RejectUnauthorized = types.StringNull()
				} else {
					rejectUnauthorizedResult7, _ := json.Marshal(resp.InputGrafana.InputGrafana2.TLS.RejectUnauthorized)
					r.InputGrafana.Two.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult7))
				}
				r.InputGrafana.Two.TLS.RequestCert = types.BoolPointerValue(resp.InputGrafana.InputGrafana2.TLS.RequestCert)
			}
			if resp.InputGrafana.InputGrafana2.Type != nil {
				r.InputGrafana.Two.Type = types.StringValue(string(*resp.InputGrafana.InputGrafana2.Type))
			} else {
				r.InputGrafana.Two.Type = types.StringNull()
			}
		}
	}
	if resp.InputHTTP != nil {
		r.InputHTTP = &tfTypes.InputHTTP{}
		r.InputHTTP.ActivityLogSampleRate = types.Float64PointerValue(resp.InputHTTP.ActivityLogSampleRate)
		r.InputHTTP.AuthTokens = make([]types.String, 0, len(resp.InputHTTP.AuthTokens))
		for _, v := range resp.InputHTTP.AuthTokens {
			r.InputHTTP.AuthTokens = append(r.InputHTTP.AuthTokens, types.StringValue(v))
		}
		r.InputHTTP.AuthTokensExt = []tfTypes.AuthTokensExt{}
		if len(r.InputHTTP.AuthTokensExt) > len(resp.InputHTTP.AuthTokensExt) {
			r.InputHTTP.AuthTokensExt = r.InputHTTP.AuthTokensExt[:len(resp.InputHTTP.AuthTokensExt)]
		}
		for authTokensExtCount, authTokensExtItem := range resp.InputHTTP.AuthTokensExt {
			var authTokensExt tfTypes.AuthTokensExt
			authTokensExt.Description = types.StringPointerValue(authTokensExtItem.Description)
			authTokensExt.Metadata = []tfTypes.InputHTTPInputMetadata{}
			for metadataCount20, metadataItem20 := range authTokensExtItem.Metadata {
				var metadata20 tfTypes.InputHTTPInputMetadata
				metadata20.Name = types.StringValue(metadataItem20.Name)
				metadata20.Value = types.StringValue(metadataItem20.Value)
				if metadataCount20+1 > len(authTokensExt.Metadata) {
					authTokensExt.Metadata = append(authTokensExt.Metadata, metadata20)
				} else {
					authTokensExt.Metadata[metadataCount20].Name = metadata20.Name
					authTokensExt.Metadata[metadataCount20].Value = metadata20.Value
				}
			}
			authTokensExt.Token = types.StringValue(authTokensExtItem.Token)
			if authTokensExtCount+1 > len(r.InputHTTP.AuthTokensExt) {
				r.InputHTTP.AuthTokensExt = append(r.InputHTTP.AuthTokensExt, authTokensExt)
			} else {
				r.InputHTTP.AuthTokensExt[authTokensExtCount].Description = authTokensExt.Description
				r.InputHTTP.AuthTokensExt[authTokensExtCount].Metadata = authTokensExt.Metadata
				r.InputHTTP.AuthTokensExt[authTokensExtCount].Token = authTokensExt.Token
			}
		}
		r.InputHTTP.CaptureHeaders = types.BoolPointerValue(resp.InputHTTP.CaptureHeaders)
		r.InputHTTP.Connections = []tfTypes.InputHTTPConnections{}
		if len(r.InputHTTP.Connections) > len(resp.InputHTTP.Connections) {
			r.InputHTTP.Connections = r.InputHTTP.Connections[:len(resp.InputHTTP.Connections)]
		}
		for connectionsCount20, connectionsItem20 := range resp.InputHTTP.Connections {
			var connections20 tfTypes.InputHTTPConnections
			connections20.Output = types.StringValue(connectionsItem20.Output)
			connections20.Pipeline = types.StringPointerValue(connectionsItem20.Pipeline)
			if connectionsCount20+1 > len(r.InputHTTP.Connections) {
				r.InputHTTP.Connections = append(r.InputHTTP.Connections, connections20)
			} else {
				r.InputHTTP.Connections[connectionsCount20].Output = connections20.Output
				r.InputHTTP.Connections[connectionsCount20].Pipeline = connections20.Pipeline
			}
		}
		r.InputHTTP.CriblAPI = types.StringPointerValue(resp.InputHTTP.CriblAPI)
		r.InputHTTP.Description = types.StringPointerValue(resp.InputHTTP.Description)
		r.InputHTTP.Disabled = types.BoolPointerValue(resp.InputHTTP.Disabled)
		r.InputHTTP.ElasticAPI = types.StringPointerValue(resp.InputHTTP.ElasticAPI)
		r.InputHTTP.EnableHealthCheck = types.BoolPointerValue(resp.InputHTTP.EnableHealthCheck)
		r.InputHTTP.EnableProxyHeader = types.BoolPointerValue(resp.InputHTTP.EnableProxyHeader)
		r.InputHTTP.Environment = types.StringPointerValue(resp.InputHTTP.Environment)
		r.InputHTTP.Host = types.StringPointerValue(resp.InputHTTP.Host)
		r.InputHTTP.ID = types.StringPointerValue(resp.InputHTTP.ID)
		r.InputHTTP.IPAllowlistRegex = types.StringPointerValue(resp.InputHTTP.IPAllowlistRegex)
		r.InputHTTP.IPDenylistRegex = types.StringPointerValue(resp.InputHTTP.IPDenylistRegex)
		r.InputHTTP.KeepAliveTimeout = types.Float64PointerValue(resp.InputHTTP.KeepAliveTimeout)
		r.InputHTTP.MaxActiveReq = types.Float64PointerValue(resp.InputHTTP.MaxActiveReq)
		r.InputHTTP.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputHTTP.MaxRequestsPerSocket)
		r.InputHTTP.Metadata = []tfTypes.InputHTTPMetadata{}
		if len(r.InputHTTP.Metadata) > len(resp.InputHTTP.Metadata) {
			r.InputHTTP.Metadata = r.InputHTTP.Metadata[:len(resp.InputHTTP.Metadata)]
		}
		for metadataCount21, metadataItem21 := range resp.InputHTTP.Metadata {
			var metadata21 tfTypes.InputHTTPMetadata
			metadata21.Name = types.StringValue(metadataItem21.Name)
			metadata21.Value = types.StringValue(metadataItem21.Value)
			if metadataCount21+1 > len(r.InputHTTP.Metadata) {
				r.InputHTTP.Metadata = append(r.InputHTTP.Metadata, metadata21)
			} else {
				r.InputHTTP.Metadata[metadataCount21].Name = metadata21.Name
				r.InputHTTP.Metadata[metadataCount21].Value = metadata21.Value
			}
		}
		r.InputHTTP.Pipeline = types.StringPointerValue(resp.InputHTTP.Pipeline)
		r.InputHTTP.Port = types.Float64Value(resp.InputHTTP.Port)
		if resp.InputHTTP.Pq == nil {
			r.InputHTTP.Pq = nil
		} else {
			r.InputHTTP.Pq = &tfTypes.InputHTTPPq{}
			r.InputHTTP.Pq.CommitFrequency = types.Float64PointerValue(resp.InputHTTP.Pq.CommitFrequency)
			if resp.InputHTTP.Pq.Compress != nil {
				r.InputHTTP.Pq.Compress = types.StringValue(string(*resp.InputHTTP.Pq.Compress))
			} else {
				r.InputHTTP.Pq.Compress = types.StringNull()
			}
			r.InputHTTP.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputHTTP.Pq.MaxBufferSize)
			r.InputHTTP.Pq.MaxFileSize = types.StringPointerValue(resp.InputHTTP.Pq.MaxFileSize)
			r.InputHTTP.Pq.MaxSize = types.StringPointerValue(resp.InputHTTP.Pq.MaxSize)
			if resp.InputHTTP.Pq.Mode != nil {
				r.InputHTTP.Pq.Mode = types.StringValue(string(*resp.InputHTTP.Pq.Mode))
			} else {
				r.InputHTTP.Pq.Mode = types.StringNull()
			}
			r.InputHTTP.Pq.Path = types.StringPointerValue(resp.InputHTTP.Pq.Path)
		}
		r.InputHTTP.PqEnabled = types.BoolPointerValue(resp.InputHTTP.PqEnabled)
		r.InputHTTP.RequestTimeout = types.Float64PointerValue(resp.InputHTTP.RequestTimeout)
		r.InputHTTP.SendToRoutes = types.BoolPointerValue(resp.InputHTTP.SendToRoutes)
		r.InputHTTP.SocketTimeout = types.Float64PointerValue(resp.InputHTTP.SocketTimeout)
		r.InputHTTP.SplunkHecAcks = types.BoolPointerValue(resp.InputHTTP.SplunkHecAcks)
		r.InputHTTP.SplunkHecAPI = types.StringPointerValue(resp.InputHTTP.SplunkHecAPI)
		if resp.InputHTTP.Status == nil {
			r.InputHTTP.Status = nil
		} else {
			r.InputHTTP.Status = &tfTypes.TFStatus{}
			r.InputHTTP.Status.Health = types.StringValue(string(resp.InputHTTP.Status.Health))
			if len(resp.InputHTTP.Status.Metrics) > 0 {
				r.InputHTTP.Status.Metrics = make(map[string]types.String, len(resp.InputHTTP.Status.Metrics))
				for key20, value20 := range resp.InputHTTP.Status.Metrics {
					result20, _ := json.Marshal(value20)
					r.InputHTTP.Status.Metrics[key20] = types.StringValue(string(result20))
				}
			}
			r.InputHTTP.Status.Timestamp = types.Float64Value(resp.InputHTTP.Status.Timestamp)
			r.InputHTTP.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputHTTP.Status.UseStatusFromLB)
		}
		r.InputHTTP.Streamtags = make([]types.String, 0, len(resp.InputHTTP.Streamtags))
		for _, v := range resp.InputHTTP.Streamtags {
			r.InputHTTP.Streamtags = append(r.InputHTTP.Streamtags, types.StringValue(v))
		}
		if resp.InputHTTP.TLS == nil {
			r.InputHTTP.TLS = nil
		} else {
			r.InputHTTP.TLS = &tfTypes.TLSSettingsServerSide{}
			r.InputHTTP.TLS.CaPath = types.StringPointerValue(resp.InputHTTP.TLS.CaPath)
			r.InputHTTP.TLS.CertificateName = types.StringPointerValue(resp.InputHTTP.TLS.CertificateName)
			r.InputHTTP.TLS.CertPath = types.StringPointerValue(resp.InputHTTP.TLS.CertPath)
			if resp.InputHTTP.TLS.CommonNameRegex == nil {
				r.InputHTTP.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult8, _ := json.Marshal(resp.InputHTTP.TLS.CommonNameRegex)
				r.InputHTTP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult8))
			}
			r.InputHTTP.TLS.Disabled = types.BoolPointerValue(resp.InputHTTP.TLS.Disabled)
			if resp.InputHTTP.TLS.MaxVersion != nil {
				r.InputHTTP.TLS.MaxVersion = types.StringValue(string(*resp.InputHTTP.TLS.MaxVersion))
			} else {
				r.InputHTTP.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputHTTP.TLS.MinVersion != nil {
				r.InputHTTP.TLS.MinVersion = types.StringValue(string(*resp.InputHTTP.TLS.MinVersion))
			} else {
				r.InputHTTP.TLS.MinVersion = types.StringNull()
			}
			r.InputHTTP.TLS.Passphrase = types.StringPointerValue(resp.InputHTTP.TLS.Passphrase)
			r.InputHTTP.TLS.PrivKeyPath = types.StringPointerValue(resp.InputHTTP.TLS.PrivKeyPath)
			if resp.InputHTTP.TLS.RejectUnauthorized == nil {
				r.InputHTTP.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult8, _ := json.Marshal(resp.InputHTTP.TLS.RejectUnauthorized)
				r.InputHTTP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult8))
			}
			r.InputHTTP.TLS.RequestCert = types.BoolPointerValue(resp.InputHTTP.TLS.RequestCert)
		}
		if resp.InputHTTP.Type != nil {
			r.InputHTTP.Type = types.StringValue(string(*resp.InputHTTP.Type))
		} else {
			r.InputHTTP.Type = types.StringNull()
		}
	}
	if resp.InputHTTPRaw != nil {
		r.InputHTTPRaw = &tfTypes.InputHTTPRaw{}
		r.InputHTTPRaw.ActivityLogSampleRate = types.Float64PointerValue(resp.InputHTTPRaw.ActivityLogSampleRate)
		r.InputHTTPRaw.AllowedMethods = make([]types.String, 0, len(resp.InputHTTPRaw.AllowedMethods))
		for _, v := range resp.InputHTTPRaw.AllowedMethods {
			r.InputHTTPRaw.AllowedMethods = append(r.InputHTTPRaw.AllowedMethods, types.StringValue(v))
		}
		r.InputHTTPRaw.AllowedPaths = make([]types.String, 0, len(resp.InputHTTPRaw.AllowedPaths))
		for _, v := range resp.InputHTTPRaw.AllowedPaths {
			r.InputHTTPRaw.AllowedPaths = append(r.InputHTTPRaw.AllowedPaths, types.StringValue(v))
		}
		r.InputHTTPRaw.AuthTokens = make([]types.String, 0, len(resp.InputHTTPRaw.AuthTokens))
		for _, v := range resp.InputHTTPRaw.AuthTokens {
			r.InputHTTPRaw.AuthTokens = append(r.InputHTTPRaw.AuthTokens, types.StringValue(v))
		}
		r.InputHTTPRaw.AuthTokensExt = []tfTypes.InputHTTPRawAuthTokensExt{}
		if len(r.InputHTTPRaw.AuthTokensExt) > len(resp.InputHTTPRaw.AuthTokensExt) {
			r.InputHTTPRaw.AuthTokensExt = r.InputHTTPRaw.AuthTokensExt[:len(resp.InputHTTPRaw.AuthTokensExt)]
		}
		for authTokensExtCount1, authTokensExtItem1 := range resp.InputHTTPRaw.AuthTokensExt {
			var authTokensExt1 tfTypes.InputHTTPRawAuthTokensExt
			authTokensExt1.Description = types.StringPointerValue(authTokensExtItem1.Description)
			authTokensExt1.Metadata = []tfTypes.InputHTTPRawInputMetadata{}
			for metadataCount22, metadataItem22 := range authTokensExtItem1.Metadata {
				var metadata22 tfTypes.InputHTTPRawInputMetadata
				metadata22.Name = types.StringValue(metadataItem22.Name)
				metadata22.Value = types.StringValue(metadataItem22.Value)
				if metadataCount22+1 > len(authTokensExt1.Metadata) {
					authTokensExt1.Metadata = append(authTokensExt1.Metadata, metadata22)
				} else {
					authTokensExt1.Metadata[metadataCount22].Name = metadata22.Name
					authTokensExt1.Metadata[metadataCount22].Value = metadata22.Value
				}
			}
			authTokensExt1.Token = types.StringValue(authTokensExtItem1.Token)
			if authTokensExtCount1+1 > len(r.InputHTTPRaw.AuthTokensExt) {
				r.InputHTTPRaw.AuthTokensExt = append(r.InputHTTPRaw.AuthTokensExt, authTokensExt1)
			} else {
				r.InputHTTPRaw.AuthTokensExt[authTokensExtCount1].Description = authTokensExt1.Description
				r.InputHTTPRaw.AuthTokensExt[authTokensExtCount1].Metadata = authTokensExt1.Metadata
				r.InputHTTPRaw.AuthTokensExt[authTokensExtCount1].Token = authTokensExt1.Token
			}
		}
		r.InputHTTPRaw.BreakerRulesets = make([]types.String, 0, len(resp.InputHTTPRaw.BreakerRulesets))
		for _, v := range resp.InputHTTPRaw.BreakerRulesets {
			r.InputHTTPRaw.BreakerRulesets = append(r.InputHTTPRaw.BreakerRulesets, types.StringValue(v))
		}
		r.InputHTTPRaw.CaptureHeaders = types.BoolPointerValue(resp.InputHTTPRaw.CaptureHeaders)
		r.InputHTTPRaw.Connections = []tfTypes.InputHTTPRawConnections{}
		if len(r.InputHTTPRaw.Connections) > len(resp.InputHTTPRaw.Connections) {
			r.InputHTTPRaw.Connections = r.InputHTTPRaw.Connections[:len(resp.InputHTTPRaw.Connections)]
		}
		for connectionsCount21, connectionsItem21 := range resp.InputHTTPRaw.Connections {
			var connections21 tfTypes.InputHTTPRawConnections
			connections21.Output = types.StringValue(connectionsItem21.Output)
			connections21.Pipeline = types.StringPointerValue(connectionsItem21.Pipeline)
			if connectionsCount21+1 > len(r.InputHTTPRaw.Connections) {
				r.InputHTTPRaw.Connections = append(r.InputHTTPRaw.Connections, connections21)
			} else {
				r.InputHTTPRaw.Connections[connectionsCount21].Output = connections21.Output
				r.InputHTTPRaw.Connections[connectionsCount21].Pipeline = connections21.Pipeline
			}
		}
		r.InputHTTPRaw.Description = types.StringPointerValue(resp.InputHTTPRaw.Description)
		r.InputHTTPRaw.Disabled = types.BoolPointerValue(resp.InputHTTPRaw.Disabled)
		r.InputHTTPRaw.EnableHealthCheck = types.BoolPointerValue(resp.InputHTTPRaw.EnableHealthCheck)
		r.InputHTTPRaw.EnableProxyHeader = types.BoolPointerValue(resp.InputHTTPRaw.EnableProxyHeader)
		r.InputHTTPRaw.Environment = types.StringPointerValue(resp.InputHTTPRaw.Environment)
		r.InputHTTPRaw.Host = types.StringPointerValue(resp.InputHTTPRaw.Host)
		r.InputHTTPRaw.ID = types.StringPointerValue(resp.InputHTTPRaw.ID)
		r.InputHTTPRaw.IPAllowlistRegex = types.StringPointerValue(resp.InputHTTPRaw.IPAllowlistRegex)
		r.InputHTTPRaw.IPDenylistRegex = types.StringPointerValue(resp.InputHTTPRaw.IPDenylistRegex)
		r.InputHTTPRaw.KeepAliveTimeout = types.Float64PointerValue(resp.InputHTTPRaw.KeepAliveTimeout)
		r.InputHTTPRaw.MaxActiveReq = types.Float64PointerValue(resp.InputHTTPRaw.MaxActiveReq)
		r.InputHTTPRaw.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputHTTPRaw.MaxRequestsPerSocket)
		r.InputHTTPRaw.Metadata = []tfTypes.InputHTTPRawMetadata{}
		if len(r.InputHTTPRaw.Metadata) > len(resp.InputHTTPRaw.Metadata) {
			r.InputHTTPRaw.Metadata = r.InputHTTPRaw.Metadata[:len(resp.InputHTTPRaw.Metadata)]
		}
		for metadataCount23, metadataItem23 := range resp.InputHTTPRaw.Metadata {
			var metadata23 tfTypes.InputHTTPRawMetadata
			metadata23.Name = types.StringValue(metadataItem23.Name)
			metadata23.Value = types.StringValue(metadataItem23.Value)
			if metadataCount23+1 > len(r.InputHTTPRaw.Metadata) {
				r.InputHTTPRaw.Metadata = append(r.InputHTTPRaw.Metadata, metadata23)
			} else {
				r.InputHTTPRaw.Metadata[metadataCount23].Name = metadata23.Name
				r.InputHTTPRaw.Metadata[metadataCount23].Value = metadata23.Value
			}
		}
		r.InputHTTPRaw.Pipeline = types.StringPointerValue(resp.InputHTTPRaw.Pipeline)
		r.InputHTTPRaw.Port = types.Float64Value(resp.InputHTTPRaw.Port)
		if resp.InputHTTPRaw.Pq == nil {
			r.InputHTTPRaw.Pq = nil
		} else {
			r.InputHTTPRaw.Pq = &tfTypes.InputHTTPRawPq{}
			r.InputHTTPRaw.Pq.CommitFrequency = types.Float64PointerValue(resp.InputHTTPRaw.Pq.CommitFrequency)
			if resp.InputHTTPRaw.Pq.Compress != nil {
				r.InputHTTPRaw.Pq.Compress = types.StringValue(string(*resp.InputHTTPRaw.Pq.Compress))
			} else {
				r.InputHTTPRaw.Pq.Compress = types.StringNull()
			}
			r.InputHTTPRaw.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputHTTPRaw.Pq.MaxBufferSize)
			r.InputHTTPRaw.Pq.MaxFileSize = types.StringPointerValue(resp.InputHTTPRaw.Pq.MaxFileSize)
			r.InputHTTPRaw.Pq.MaxSize = types.StringPointerValue(resp.InputHTTPRaw.Pq.MaxSize)
			if resp.InputHTTPRaw.Pq.Mode != nil {
				r.InputHTTPRaw.Pq.Mode = types.StringValue(string(*resp.InputHTTPRaw.Pq.Mode))
			} else {
				r.InputHTTPRaw.Pq.Mode = types.StringNull()
			}
			r.InputHTTPRaw.Pq.Path = types.StringPointerValue(resp.InputHTTPRaw.Pq.Path)
		}
		r.InputHTTPRaw.PqEnabled = types.BoolPointerValue(resp.InputHTTPRaw.PqEnabled)
		r.InputHTTPRaw.RequestTimeout = types.Float64PointerValue(resp.InputHTTPRaw.RequestTimeout)
		r.InputHTTPRaw.SendToRoutes = types.BoolPointerValue(resp.InputHTTPRaw.SendToRoutes)
		r.InputHTTPRaw.SocketTimeout = types.Float64PointerValue(resp.InputHTTPRaw.SocketTimeout)
		r.InputHTTPRaw.StaleChannelFlushMs = types.Float64PointerValue(resp.InputHTTPRaw.StaleChannelFlushMs)
		if resp.InputHTTPRaw.Status == nil {
			r.InputHTTPRaw.Status = nil
		} else {
			r.InputHTTPRaw.Status = &tfTypes.TFStatus{}
			r.InputHTTPRaw.Status.Health = types.StringValue(string(resp.InputHTTPRaw.Status.Health))
			if len(resp.InputHTTPRaw.Status.Metrics) > 0 {
				r.InputHTTPRaw.Status.Metrics = make(map[string]types.String, len(resp.InputHTTPRaw.Status.Metrics))
				for key21, value21 := range resp.InputHTTPRaw.Status.Metrics {
					result21, _ := json.Marshal(value21)
					r.InputHTTPRaw.Status.Metrics[key21] = types.StringValue(string(result21))
				}
			}
			r.InputHTTPRaw.Status.Timestamp = types.Float64Value(resp.InputHTTPRaw.Status.Timestamp)
			r.InputHTTPRaw.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputHTTPRaw.Status.UseStatusFromLB)
		}
		r.InputHTTPRaw.Streamtags = make([]types.String, 0, len(resp.InputHTTPRaw.Streamtags))
		for _, v := range resp.InputHTTPRaw.Streamtags {
			r.InputHTTPRaw.Streamtags = append(r.InputHTTPRaw.Streamtags, types.StringValue(v))
		}
		if resp.InputHTTPRaw.TLS == nil {
			r.InputHTTPRaw.TLS = nil
		} else {
			r.InputHTTPRaw.TLS = &tfTypes.InputHTTPRawTLSSettingsServerSide{}
			r.InputHTTPRaw.TLS.CaPath = types.StringPointerValue(resp.InputHTTPRaw.TLS.CaPath)
			r.InputHTTPRaw.TLS.CertificateName = types.StringPointerValue(resp.InputHTTPRaw.TLS.CertificateName)
			r.InputHTTPRaw.TLS.CertPath = types.StringPointerValue(resp.InputHTTPRaw.TLS.CertPath)
			if resp.InputHTTPRaw.TLS.CommonNameRegex == nil {
				r.InputHTTPRaw.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult9, _ := json.Marshal(resp.InputHTTPRaw.TLS.CommonNameRegex)
				r.InputHTTPRaw.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult9))
			}
			r.InputHTTPRaw.TLS.Disabled = types.BoolPointerValue(resp.InputHTTPRaw.TLS.Disabled)
			if resp.InputHTTPRaw.TLS.MaxVersion != nil {
				r.InputHTTPRaw.TLS.MaxVersion = types.StringValue(string(*resp.InputHTTPRaw.TLS.MaxVersion))
			} else {
				r.InputHTTPRaw.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputHTTPRaw.TLS.MinVersion != nil {
				r.InputHTTPRaw.TLS.MinVersion = types.StringValue(string(*resp.InputHTTPRaw.TLS.MinVersion))
			} else {
				r.InputHTTPRaw.TLS.MinVersion = types.StringNull()
			}
			r.InputHTTPRaw.TLS.Passphrase = types.StringPointerValue(resp.InputHTTPRaw.TLS.Passphrase)
			r.InputHTTPRaw.TLS.PrivKeyPath = types.StringPointerValue(resp.InputHTTPRaw.TLS.PrivKeyPath)
			if resp.InputHTTPRaw.TLS.RejectUnauthorized == nil {
				r.InputHTTPRaw.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult9, _ := json.Marshal(resp.InputHTTPRaw.TLS.RejectUnauthorized)
				r.InputHTTPRaw.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult9))
			}
			r.InputHTTPRaw.TLS.RequestCert = types.BoolPointerValue(resp.InputHTTPRaw.TLS.RequestCert)
		}
		if resp.InputHTTPRaw.Type != nil {
			r.InputHTTPRaw.Type = types.StringValue(string(*resp.InputHTTPRaw.Type))
		} else {
			r.InputHTTPRaw.Type = types.StringNull()
		}
	}
	if resp.InputJournalFiles != nil {
		r.InputJournalFiles = &tfTypes.InputJournalFiles{}
		r.InputJournalFiles.Connections = []tfTypes.InputJournalFilesConnections{}
		if len(r.InputJournalFiles.Connections) > len(resp.InputJournalFiles.Connections) {
			r.InputJournalFiles.Connections = r.InputJournalFiles.Connections[:len(resp.InputJournalFiles.Connections)]
		}
		for connectionsCount22, connectionsItem22 := range resp.InputJournalFiles.Connections {
			var connections22 tfTypes.InputJournalFilesConnections
			connections22.Output = types.StringValue(connectionsItem22.Output)
			connections22.Pipeline = types.StringPointerValue(connectionsItem22.Pipeline)
			if connectionsCount22+1 > len(r.InputJournalFiles.Connections) {
				r.InputJournalFiles.Connections = append(r.InputJournalFiles.Connections, connections22)
			} else {
				r.InputJournalFiles.Connections[connectionsCount22].Output = connections22.Output
				r.InputJournalFiles.Connections[connectionsCount22].Pipeline = connections22.Pipeline
			}
		}
		r.InputJournalFiles.CurrentBoot = types.BoolPointerValue(resp.InputJournalFiles.CurrentBoot)
		r.InputJournalFiles.Description = types.StringPointerValue(resp.InputJournalFiles.Description)
		r.InputJournalFiles.Disabled = types.BoolPointerValue(resp.InputJournalFiles.Disabled)
		r.InputJournalFiles.Environment = types.StringPointerValue(resp.InputJournalFiles.Environment)
		r.InputJournalFiles.ID = types.StringPointerValue(resp.InputJournalFiles.ID)
		r.InputJournalFiles.Interval = types.Float64PointerValue(resp.InputJournalFiles.Interval)
		r.InputJournalFiles.Journals = make([]types.String, 0, len(resp.InputJournalFiles.Journals))
		for _, v := range resp.InputJournalFiles.Journals {
			r.InputJournalFiles.Journals = append(r.InputJournalFiles.Journals, types.StringValue(v))
		}
		r.InputJournalFiles.MaxAgeDur = types.StringPointerValue(resp.InputJournalFiles.MaxAgeDur)
		r.InputJournalFiles.Metadata = []tfTypes.InputJournalFilesMetadata{}
		if len(r.InputJournalFiles.Metadata) > len(resp.InputJournalFiles.Metadata) {
			r.InputJournalFiles.Metadata = r.InputJournalFiles.Metadata[:len(resp.InputJournalFiles.Metadata)]
		}
		for metadataCount24, metadataItem24 := range resp.InputJournalFiles.Metadata {
			var metadata24 tfTypes.InputJournalFilesMetadata
			metadata24.Name = types.StringValue(metadataItem24.Name)
			metadata24.Value = types.StringValue(metadataItem24.Value)
			if metadataCount24+1 > len(r.InputJournalFiles.Metadata) {
				r.InputJournalFiles.Metadata = append(r.InputJournalFiles.Metadata, metadata24)
			} else {
				r.InputJournalFiles.Metadata[metadataCount24].Name = metadata24.Name
				r.InputJournalFiles.Metadata[metadataCount24].Value = metadata24.Value
			}
		}
		r.InputJournalFiles.Path = types.StringValue(resp.InputJournalFiles.Path)
		r.InputJournalFiles.Pipeline = types.StringPointerValue(resp.InputJournalFiles.Pipeline)
		if resp.InputJournalFiles.Pq == nil {
			r.InputJournalFiles.Pq = nil
		} else {
			r.InputJournalFiles.Pq = &tfTypes.InputJournalFilesPq{}
			r.InputJournalFiles.Pq.CommitFrequency = types.Float64PointerValue(resp.InputJournalFiles.Pq.CommitFrequency)
			if resp.InputJournalFiles.Pq.Compress != nil {
				r.InputJournalFiles.Pq.Compress = types.StringValue(string(*resp.InputJournalFiles.Pq.Compress))
			} else {
				r.InputJournalFiles.Pq.Compress = types.StringNull()
			}
			r.InputJournalFiles.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputJournalFiles.Pq.MaxBufferSize)
			r.InputJournalFiles.Pq.MaxFileSize = types.StringPointerValue(resp.InputJournalFiles.Pq.MaxFileSize)
			r.InputJournalFiles.Pq.MaxSize = types.StringPointerValue(resp.InputJournalFiles.Pq.MaxSize)
			if resp.InputJournalFiles.Pq.Mode != nil {
				r.InputJournalFiles.Pq.Mode = types.StringValue(string(*resp.InputJournalFiles.Pq.Mode))
			} else {
				r.InputJournalFiles.Pq.Mode = types.StringNull()
			}
			r.InputJournalFiles.Pq.Path = types.StringPointerValue(resp.InputJournalFiles.Pq.Path)
		}
		r.InputJournalFiles.PqEnabled = types.BoolPointerValue(resp.InputJournalFiles.PqEnabled)
		r.InputJournalFiles.Rules = []tfTypes.InputJournalFilesRules{}
		if len(r.InputJournalFiles.Rules) > len(resp.InputJournalFiles.Rules) {
			r.InputJournalFiles.Rules = r.InputJournalFiles.Rules[:len(resp.InputJournalFiles.Rules)]
		}
		for rulesCount, rulesItem := range resp.InputJournalFiles.Rules {
			var rules tfTypes.InputJournalFilesRules
			rules.Description = types.StringPointerValue(rulesItem.Description)
			rules.Filter = types.StringValue(rulesItem.Filter)
			if rulesCount+1 > len(r.InputJournalFiles.Rules) {
				r.InputJournalFiles.Rules = append(r.InputJournalFiles.Rules, rules)
			} else {
				r.InputJournalFiles.Rules[rulesCount].Description = rules.Description
				r.InputJournalFiles.Rules[rulesCount].Filter = rules.Filter
			}
		}
		r.InputJournalFiles.SendToRoutes = types.BoolPointerValue(resp.InputJournalFiles.SendToRoutes)
		if resp.InputJournalFiles.Status == nil {
			r.InputJournalFiles.Status = nil
		} else {
			r.InputJournalFiles.Status = &tfTypes.TFStatus{}
			r.InputJournalFiles.Status.Health = types.StringValue(string(resp.InputJournalFiles.Status.Health))
			if len(resp.InputJournalFiles.Status.Metrics) > 0 {
				r.InputJournalFiles.Status.Metrics = make(map[string]types.String, len(resp.InputJournalFiles.Status.Metrics))
				for key22, value22 := range resp.InputJournalFiles.Status.Metrics {
					result22, _ := json.Marshal(value22)
					r.InputJournalFiles.Status.Metrics[key22] = types.StringValue(string(result22))
				}
			}
			r.InputJournalFiles.Status.Timestamp = types.Float64Value(resp.InputJournalFiles.Status.Timestamp)
			r.InputJournalFiles.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputJournalFiles.Status.UseStatusFromLB)
		}
		r.InputJournalFiles.Streamtags = make([]types.String, 0, len(resp.InputJournalFiles.Streamtags))
		for _, v := range resp.InputJournalFiles.Streamtags {
			r.InputJournalFiles.Streamtags = append(r.InputJournalFiles.Streamtags, types.StringValue(v))
		}
		if resp.InputJournalFiles.Type != nil {
			r.InputJournalFiles.Type = types.StringValue(string(*resp.InputJournalFiles.Type))
		} else {
			r.InputJournalFiles.Type = types.StringNull()
		}
	}
	if resp.InputKafka != nil {
		r.InputKafka = &tfTypes.InputKafka{}
		r.InputKafka.AuthenticationTimeout = types.Float64PointerValue(resp.InputKafka.AuthenticationTimeout)
		r.InputKafka.AutoCommitInterval = types.Float64PointerValue(resp.InputKafka.AutoCommitInterval)
		r.InputKafka.AutoCommitThreshold = types.Float64PointerValue(resp.InputKafka.AutoCommitThreshold)
		r.InputKafka.BackoffRate = types.Float64PointerValue(resp.InputKafka.BackoffRate)
		r.InputKafka.Brokers = make([]types.String, 0, len(resp.InputKafka.Brokers))
		for _, v := range resp.InputKafka.Brokers {
			r.InputKafka.Brokers = append(r.InputKafka.Brokers, types.StringValue(v))
		}
		r.InputKafka.Connections = []tfTypes.InputKafkaConnections{}
		if len(r.InputKafka.Connections) > len(resp.InputKafka.Connections) {
			r.InputKafka.Connections = r.InputKafka.Connections[:len(resp.InputKafka.Connections)]
		}
		for connectionsCount23, connectionsItem23 := range resp.InputKafka.Connections {
			var connections23 tfTypes.InputKafkaConnections
			connections23.Output = types.StringValue(connectionsItem23.Output)
			connections23.Pipeline = types.StringPointerValue(connectionsItem23.Pipeline)
			if connectionsCount23+1 > len(r.InputKafka.Connections) {
				r.InputKafka.Connections = append(r.InputKafka.Connections, connections23)
			} else {
				r.InputKafka.Connections[connectionsCount23].Output = connections23.Output
				r.InputKafka.Connections[connectionsCount23].Pipeline = connections23.Pipeline
			}
		}
		r.InputKafka.ConnectionTimeout = types.Float64PointerValue(resp.InputKafka.ConnectionTimeout)
		r.InputKafka.Description = types.StringPointerValue(resp.InputKafka.Description)
		r.InputKafka.Disabled = types.BoolPointerValue(resp.InputKafka.Disabled)
		r.InputKafka.Environment = types.StringPointerValue(resp.InputKafka.Environment)
		r.InputKafka.FromBeginning = types.BoolPointerValue(resp.InputKafka.FromBeginning)
		r.InputKafka.GroupID = types.StringPointerValue(resp.InputKafka.GroupID)
		r.InputKafka.HeartbeatInterval = types.Float64PointerValue(resp.InputKafka.HeartbeatInterval)
		r.InputKafka.ID = types.StringPointerValue(resp.InputKafka.ID)
		r.InputKafka.InitialBackoff = types.Float64PointerValue(resp.InputKafka.InitialBackoff)
		if resp.InputKafka.KafkaSchemaRegistry == nil {
			r.InputKafka.KafkaSchemaRegistry = nil
		} else {
			r.InputKafka.KafkaSchemaRegistry = &tfTypes.KafkaSchemaRegistryAuthentication{}
			if resp.InputKafka.KafkaSchemaRegistry.Auth == nil {
				r.InputKafka.KafkaSchemaRegistry.Auth = nil
			} else {
				r.InputKafka.KafkaSchemaRegistry.Auth = &tfTypes.InputKafkaAuth{}
				r.InputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.InputKafka.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.InputKafka.KafkaSchemaRegistry.Auth.Disabled)
			}
			r.InputKafka.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(resp.InputKafka.KafkaSchemaRegistry.ConnectionTimeout)
			r.InputKafka.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.InputKafka.KafkaSchemaRegistry.Disabled)
			r.InputKafka.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(resp.InputKafka.KafkaSchemaRegistry.MaxRetries)
			r.InputKafka.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(resp.InputKafka.KafkaSchemaRegistry.RequestTimeout)
			r.InputKafka.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.InputKafka.KafkaSchemaRegistry.TLS == nil {
				r.InputKafka.KafkaSchemaRegistry.TLS = nil
			} else {
				r.InputKafka.KafkaSchemaRegistry.TLS = &tfTypes.InputKafkaTLSSettingsClientSide{}
				r.InputKafka.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.CaPath)
				r.InputKafka.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.CertificateName)
				r.InputKafka.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.CertPath)
				r.InputKafka.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.Disabled)
				if resp.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.InputKafka.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputKafka.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.InputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.InputKafka.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.InputKafka.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.InputKafka.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.Passphrase)
				r.InputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.InputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.InputKafka.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.InputKafka.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		r.InputKafka.MaxBackOff = types.Float64PointerValue(resp.InputKafka.MaxBackOff)
		r.InputKafka.MaxBytes = types.Float64PointerValue(resp.InputKafka.MaxBytes)
		r.InputKafka.MaxBytesPerPartition = types.Float64PointerValue(resp.InputKafka.MaxBytesPerPartition)
		r.InputKafka.MaxRetries = types.Float64PointerValue(resp.InputKafka.MaxRetries)
		r.InputKafka.MaxSocketErrors = types.Float64PointerValue(resp.InputKafka.MaxSocketErrors)
		r.InputKafka.Metadata = []tfTypes.InputKafkaMetadata{}
		if len(r.InputKafka.Metadata) > len(resp.InputKafka.Metadata) {
			r.InputKafka.Metadata = r.InputKafka.Metadata[:len(resp.InputKafka.Metadata)]
		}
		for metadataCount25, metadataItem25 := range resp.InputKafka.Metadata {
			var metadata25 tfTypes.InputKafkaMetadata
			metadata25.Name = types.StringValue(metadataItem25.Name)
			metadata25.Value = types.StringValue(metadataItem25.Value)
			if metadataCount25+1 > len(r.InputKafka.Metadata) {
				r.InputKafka.Metadata = append(r.InputKafka.Metadata, metadata25)
			} else {
				r.InputKafka.Metadata[metadataCount25].Name = metadata25.Name
				r.InputKafka.Metadata[metadataCount25].Value = metadata25.Value
			}
		}
		r.InputKafka.Pipeline = types.StringPointerValue(resp.InputKafka.Pipeline)
		if resp.InputKafka.Pq == nil {
			r.InputKafka.Pq = nil
		} else {
			r.InputKafka.Pq = &tfTypes.InputKafkaPq{}
			r.InputKafka.Pq.CommitFrequency = types.Float64PointerValue(resp.InputKafka.Pq.CommitFrequency)
			if resp.InputKafka.Pq.Compress != nil {
				r.InputKafka.Pq.Compress = types.StringValue(string(*resp.InputKafka.Pq.Compress))
			} else {
				r.InputKafka.Pq.Compress = types.StringNull()
			}
			r.InputKafka.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputKafka.Pq.MaxBufferSize)
			r.InputKafka.Pq.MaxFileSize = types.StringPointerValue(resp.InputKafka.Pq.MaxFileSize)
			r.InputKafka.Pq.MaxSize = types.StringPointerValue(resp.InputKafka.Pq.MaxSize)
			if resp.InputKafka.Pq.Mode != nil {
				r.InputKafka.Pq.Mode = types.StringValue(string(*resp.InputKafka.Pq.Mode))
			} else {
				r.InputKafka.Pq.Mode = types.StringNull()
			}
			r.InputKafka.Pq.Path = types.StringPointerValue(resp.InputKafka.Pq.Path)
		}
		r.InputKafka.PqEnabled = types.BoolPointerValue(resp.InputKafka.PqEnabled)
		r.InputKafka.ReauthenticationThreshold = types.Float64PointerValue(resp.InputKafka.ReauthenticationThreshold)
		r.InputKafka.RebalanceTimeout = types.Float64PointerValue(resp.InputKafka.RebalanceTimeout)
		r.InputKafka.RequestTimeout = types.Float64PointerValue(resp.InputKafka.RequestTimeout)
		if resp.InputKafka.Sasl == nil {
			r.InputKafka.Sasl = nil
		} else {
			r.InputKafka.Sasl = &tfTypes.Authentication{}
			r.InputKafka.Sasl.Disabled = types.BoolPointerValue(resp.InputKafka.Sasl.Disabled)
			if resp.InputKafka.Sasl.Mechanism != nil {
				r.InputKafka.Sasl.Mechanism = types.StringValue(string(*resp.InputKafka.Sasl.Mechanism))
			} else {
				r.InputKafka.Sasl.Mechanism = types.StringNull()
			}
		}
		r.InputKafka.SendToRoutes = types.BoolPointerValue(resp.InputKafka.SendToRoutes)
		r.InputKafka.SessionTimeout = types.Float64PointerValue(resp.InputKafka.SessionTimeout)
		if resp.InputKafka.Status == nil {
			r.InputKafka.Status = nil
		} else {
			r.InputKafka.Status = &tfTypes.TFStatus{}
			r.InputKafka.Status.Health = types.StringValue(string(resp.InputKafka.Status.Health))
			if len(resp.InputKafka.Status.Metrics) > 0 {
				r.InputKafka.Status.Metrics = make(map[string]types.String, len(resp.InputKafka.Status.Metrics))
				for key23, value23 := range resp.InputKafka.Status.Metrics {
					result23, _ := json.Marshal(value23)
					r.InputKafka.Status.Metrics[key23] = types.StringValue(string(result23))
				}
			}
			r.InputKafka.Status.Timestamp = types.Float64Value(resp.InputKafka.Status.Timestamp)
			r.InputKafka.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputKafka.Status.UseStatusFromLB)
		}
		r.InputKafka.Streamtags = make([]types.String, 0, len(resp.InputKafka.Streamtags))
		for _, v := range resp.InputKafka.Streamtags {
			r.InputKafka.Streamtags = append(r.InputKafka.Streamtags, types.StringValue(v))
		}
		if resp.InputKafka.TLS == nil {
			r.InputKafka.TLS = nil
		} else {
			r.InputKafka.TLS = &tfTypes.TLSSettingsClientSide{}
			r.InputKafka.TLS.CaPath = types.StringPointerValue(resp.InputKafka.TLS.CaPath)
			r.InputKafka.TLS.CertificateName = types.StringPointerValue(resp.InputKafka.TLS.CertificateName)
			r.InputKafka.TLS.CertPath = types.StringPointerValue(resp.InputKafka.TLS.CertPath)
			r.InputKafka.TLS.Disabled = types.BoolPointerValue(resp.InputKafka.TLS.Disabled)
			if resp.InputKafka.TLS.MaxVersion != nil {
				r.InputKafka.TLS.MaxVersion = types.StringValue(string(*resp.InputKafka.TLS.MaxVersion))
			} else {
				r.InputKafka.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputKafka.TLS.MinVersion != nil {
				r.InputKafka.TLS.MinVersion = types.StringValue(string(*resp.InputKafka.TLS.MinVersion))
			} else {
				r.InputKafka.TLS.MinVersion = types.StringNull()
			}
			r.InputKafka.TLS.Passphrase = types.StringPointerValue(resp.InputKafka.TLS.Passphrase)
			r.InputKafka.TLS.PrivKeyPath = types.StringPointerValue(resp.InputKafka.TLS.PrivKeyPath)
			r.InputKafka.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputKafka.TLS.RejectUnauthorized)
			r.InputKafka.TLS.Servername = types.StringPointerValue(resp.InputKafka.TLS.Servername)
		}
		r.InputKafka.Topics = make([]types.String, 0, len(resp.InputKafka.Topics))
		for _, v := range resp.InputKafka.Topics {
			r.InputKafka.Topics = append(r.InputKafka.Topics, types.StringValue(v))
		}
		if resp.InputKafka.Type != nil {
			r.InputKafka.Type = types.StringValue(string(*resp.InputKafka.Type))
		} else {
			r.InputKafka.Type = types.StringNull()
		}
	}
	if resp.InputKinesis != nil {
		r.InputKinesis = &tfTypes.InputKinesis{}
		r.InputKinesis.AssumeRoleArn = types.StringPointerValue(resp.InputKinesis.AssumeRoleArn)
		r.InputKinesis.AssumeRoleExternalID = types.StringPointerValue(resp.InputKinesis.AssumeRoleExternalID)
		r.InputKinesis.AvoidDuplicates = types.BoolPointerValue(resp.InputKinesis.AvoidDuplicates)
		r.InputKinesis.AwsAPIKey = types.StringPointerValue(resp.InputKinesis.AwsAPIKey)
		if resp.InputKinesis.AwsAuthenticationMethod != nil {
			r.InputKinesis.AwsAuthenticationMethod = types.StringValue(string(*resp.InputKinesis.AwsAuthenticationMethod))
		} else {
			r.InputKinesis.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputKinesis.AwsSecret = types.StringPointerValue(resp.InputKinesis.AwsSecret)
		r.InputKinesis.AwsSecretKey = types.StringPointerValue(resp.InputKinesis.AwsSecretKey)
		r.InputKinesis.Connections = []tfTypes.InputKinesisConnections{}
		if len(r.InputKinesis.Connections) > len(resp.InputKinesis.Connections) {
			r.InputKinesis.Connections = r.InputKinesis.Connections[:len(resp.InputKinesis.Connections)]
		}
		for connectionsCount24, connectionsItem24 := range resp.InputKinesis.Connections {
			var connections24 tfTypes.InputKinesisConnections
			connections24.Output = types.StringValue(connectionsItem24.Output)
			connections24.Pipeline = types.StringPointerValue(connectionsItem24.Pipeline)
			if connectionsCount24+1 > len(r.InputKinesis.Connections) {
				r.InputKinesis.Connections = append(r.InputKinesis.Connections, connections24)
			} else {
				r.InputKinesis.Connections[connectionsCount24].Output = connections24.Output
				r.InputKinesis.Connections[connectionsCount24].Pipeline = connections24.Pipeline
			}
		}
		r.InputKinesis.Description = types.StringPointerValue(resp.InputKinesis.Description)
		r.InputKinesis.Disabled = types.BoolPointerValue(resp.InputKinesis.Disabled)
		r.InputKinesis.DurationSeconds = types.Float64PointerValue(resp.InputKinesis.DurationSeconds)
		r.InputKinesis.EnableAssumeRole = types.BoolPointerValue(resp.InputKinesis.EnableAssumeRole)
		r.InputKinesis.Endpoint = types.StringPointerValue(resp.InputKinesis.Endpoint)
		r.InputKinesis.Environment = types.StringPointerValue(resp.InputKinesis.Environment)
		r.InputKinesis.GetRecordsLimit = types.Float64PointerValue(resp.InputKinesis.GetRecordsLimit)
		r.InputKinesis.GetRecordsLimitTotal = types.Float64PointerValue(resp.InputKinesis.GetRecordsLimitTotal)
		r.InputKinesis.ID = types.StringPointerValue(resp.InputKinesis.ID)
		if resp.InputKinesis.LoadBalancingAlgorithm != nil {
			r.InputKinesis.LoadBalancingAlgorithm = types.StringValue(string(*resp.InputKinesis.LoadBalancingAlgorithm))
		} else {
			r.InputKinesis.LoadBalancingAlgorithm = types.StringNull()
		}
		r.InputKinesis.Metadata = []tfTypes.InputKinesisMetadata{}
		if len(r.InputKinesis.Metadata) > len(resp.InputKinesis.Metadata) {
			r.InputKinesis.Metadata = r.InputKinesis.Metadata[:len(resp.InputKinesis.Metadata)]
		}
		for metadataCount26, metadataItem26 := range resp.InputKinesis.Metadata {
			var metadata26 tfTypes.InputKinesisMetadata
			metadata26.Name = types.StringValue(metadataItem26.Name)
			metadata26.Value = types.StringValue(metadataItem26.Value)
			if metadataCount26+1 > len(r.InputKinesis.Metadata) {
				r.InputKinesis.Metadata = append(r.InputKinesis.Metadata, metadata26)
			} else {
				r.InputKinesis.Metadata[metadataCount26].Name = metadata26.Name
				r.InputKinesis.Metadata[metadataCount26].Value = metadata26.Value
			}
		}
		if resp.InputKinesis.PayloadFormat != nil {
			r.InputKinesis.PayloadFormat = types.StringValue(string(*resp.InputKinesis.PayloadFormat))
		} else {
			r.InputKinesis.PayloadFormat = types.StringNull()
		}
		r.InputKinesis.Pipeline = types.StringPointerValue(resp.InputKinesis.Pipeline)
		if resp.InputKinesis.Pq == nil {
			r.InputKinesis.Pq = nil
		} else {
			r.InputKinesis.Pq = &tfTypes.InputKinesisPq{}
			r.InputKinesis.Pq.CommitFrequency = types.Float64PointerValue(resp.InputKinesis.Pq.CommitFrequency)
			if resp.InputKinesis.Pq.Compress != nil {
				r.InputKinesis.Pq.Compress = types.StringValue(string(*resp.InputKinesis.Pq.Compress))
			} else {
				r.InputKinesis.Pq.Compress = types.StringNull()
			}
			r.InputKinesis.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputKinesis.Pq.MaxBufferSize)
			r.InputKinesis.Pq.MaxFileSize = types.StringPointerValue(resp.InputKinesis.Pq.MaxFileSize)
			r.InputKinesis.Pq.MaxSize = types.StringPointerValue(resp.InputKinesis.Pq.MaxSize)
			if resp.InputKinesis.Pq.Mode != nil {
				r.InputKinesis.Pq.Mode = types.StringValue(string(*resp.InputKinesis.Pq.Mode))
			} else {
				r.InputKinesis.Pq.Mode = types.StringNull()
			}
			r.InputKinesis.Pq.Path = types.StringPointerValue(resp.InputKinesis.Pq.Path)
		}
		r.InputKinesis.PqEnabled = types.BoolPointerValue(resp.InputKinesis.PqEnabled)
		r.InputKinesis.Region = types.StringValue(resp.InputKinesis.Region)
		r.InputKinesis.RejectUnauthorized = types.BoolPointerValue(resp.InputKinesis.RejectUnauthorized)
		r.InputKinesis.ReuseConnections = types.BoolPointerValue(resp.InputKinesis.ReuseConnections)
		r.InputKinesis.SendToRoutes = types.BoolPointerValue(resp.InputKinesis.SendToRoutes)
		r.InputKinesis.ServiceInterval = types.Float64PointerValue(resp.InputKinesis.ServiceInterval)
		r.InputKinesis.ShardExpr = types.StringPointerValue(resp.InputKinesis.ShardExpr)
		if resp.InputKinesis.ShardIteratorType != nil {
			r.InputKinesis.ShardIteratorType = types.StringValue(string(*resp.InputKinesis.ShardIteratorType))
		} else {
			r.InputKinesis.ShardIteratorType = types.StringNull()
		}
		if resp.InputKinesis.SignatureVersion != nil {
			r.InputKinesis.SignatureVersion = types.StringValue(string(*resp.InputKinesis.SignatureVersion))
		} else {
			r.InputKinesis.SignatureVersion = types.StringNull()
		}
		if resp.InputKinesis.Status == nil {
			r.InputKinesis.Status = nil
		} else {
			r.InputKinesis.Status = &tfTypes.TFStatus{}
			r.InputKinesis.Status.Health = types.StringValue(string(resp.InputKinesis.Status.Health))
			if len(resp.InputKinesis.Status.Metrics) > 0 {
				r.InputKinesis.Status.Metrics = make(map[string]types.String, len(resp.InputKinesis.Status.Metrics))
				for key24, value24 := range resp.InputKinesis.Status.Metrics {
					result24, _ := json.Marshal(value24)
					r.InputKinesis.Status.Metrics[key24] = types.StringValue(string(result24))
				}
			}
			r.InputKinesis.Status.Timestamp = types.Float64Value(resp.InputKinesis.Status.Timestamp)
			r.InputKinesis.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputKinesis.Status.UseStatusFromLB)
		}
		r.InputKinesis.StreamName = types.StringValue(resp.InputKinesis.StreamName)
		r.InputKinesis.Streamtags = make([]types.String, 0, len(resp.InputKinesis.Streamtags))
		for _, v := range resp.InputKinesis.Streamtags {
			r.InputKinesis.Streamtags = append(r.InputKinesis.Streamtags, types.StringValue(v))
		}
		if resp.InputKinesis.Type != nil {
			r.InputKinesis.Type = types.StringValue(string(*resp.InputKinesis.Type))
		} else {
			r.InputKinesis.Type = types.StringNull()
		}
		r.InputKinesis.VerifyKPLCheckSums = types.BoolPointerValue(resp.InputKinesis.VerifyKPLCheckSums)
	}
	if resp.InputKubeEvents != nil {
		r.InputKubeEvents = &tfTypes.InputKubeEvents{}
		r.InputKubeEvents.Connections = []tfTypes.InputKubeEventsConnections{}
		if len(r.InputKubeEvents.Connections) > len(resp.InputKubeEvents.Connections) {
			r.InputKubeEvents.Connections = r.InputKubeEvents.Connections[:len(resp.InputKubeEvents.Connections)]
		}
		for connectionsCount25, connectionsItem25 := range resp.InputKubeEvents.Connections {
			var connections25 tfTypes.InputKubeEventsConnections
			connections25.Output = types.StringValue(connectionsItem25.Output)
			connections25.Pipeline = types.StringPointerValue(connectionsItem25.Pipeline)
			if connectionsCount25+1 > len(r.InputKubeEvents.Connections) {
				r.InputKubeEvents.Connections = append(r.InputKubeEvents.Connections, connections25)
			} else {
				r.InputKubeEvents.Connections[connectionsCount25].Output = connections25.Output
				r.InputKubeEvents.Connections[connectionsCount25].Pipeline = connections25.Pipeline
			}
		}
		r.InputKubeEvents.Description = types.StringPointerValue(resp.InputKubeEvents.Description)
		r.InputKubeEvents.Disabled = types.BoolPointerValue(resp.InputKubeEvents.Disabled)
		r.InputKubeEvents.Environment = types.StringPointerValue(resp.InputKubeEvents.Environment)
		r.InputKubeEvents.ID = types.StringValue(resp.InputKubeEvents.ID)
		r.InputKubeEvents.Metadata = []tfTypes.InputKubeEventsMetadata{}
		if len(r.InputKubeEvents.Metadata) > len(resp.InputKubeEvents.Metadata) {
			r.InputKubeEvents.Metadata = r.InputKubeEvents.Metadata[:len(resp.InputKubeEvents.Metadata)]
		}
		for metadataCount27, metadataItem27 := range resp.InputKubeEvents.Metadata {
			var metadata27 tfTypes.InputKubeEventsMetadata
			metadata27.Name = types.StringValue(metadataItem27.Name)
			metadata27.Value = types.StringValue(metadataItem27.Value)
			if metadataCount27+1 > len(r.InputKubeEvents.Metadata) {
				r.InputKubeEvents.Metadata = append(r.InputKubeEvents.Metadata, metadata27)
			} else {
				r.InputKubeEvents.Metadata[metadataCount27].Name = metadata27.Name
				r.InputKubeEvents.Metadata[metadataCount27].Value = metadata27.Value
			}
		}
		r.InputKubeEvents.Pipeline = types.StringPointerValue(resp.InputKubeEvents.Pipeline)
		if resp.InputKubeEvents.Pq == nil {
			r.InputKubeEvents.Pq = nil
		} else {
			r.InputKubeEvents.Pq = &tfTypes.InputKubeEventsPq{}
			r.InputKubeEvents.Pq.CommitFrequency = types.Float64PointerValue(resp.InputKubeEvents.Pq.CommitFrequency)
			if resp.InputKubeEvents.Pq.Compress != nil {
				r.InputKubeEvents.Pq.Compress = types.StringValue(string(*resp.InputKubeEvents.Pq.Compress))
			} else {
				r.InputKubeEvents.Pq.Compress = types.StringNull()
			}
			r.InputKubeEvents.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputKubeEvents.Pq.MaxBufferSize)
			r.InputKubeEvents.Pq.MaxFileSize = types.StringPointerValue(resp.InputKubeEvents.Pq.MaxFileSize)
			r.InputKubeEvents.Pq.MaxSize = types.StringPointerValue(resp.InputKubeEvents.Pq.MaxSize)
			if resp.InputKubeEvents.Pq.Mode != nil {
				r.InputKubeEvents.Pq.Mode = types.StringValue(string(*resp.InputKubeEvents.Pq.Mode))
			} else {
				r.InputKubeEvents.Pq.Mode = types.StringNull()
			}
			r.InputKubeEvents.Pq.Path = types.StringPointerValue(resp.InputKubeEvents.Pq.Path)
		}
		r.InputKubeEvents.PqEnabled = types.BoolPointerValue(resp.InputKubeEvents.PqEnabled)
		r.InputKubeEvents.Rules = []tfTypes.InputKubeEventsRules{}
		if len(r.InputKubeEvents.Rules) > len(resp.InputKubeEvents.Rules) {
			r.InputKubeEvents.Rules = r.InputKubeEvents.Rules[:len(resp.InputKubeEvents.Rules)]
		}
		for rulesCount1, rulesItem1 := range resp.InputKubeEvents.Rules {
			var rules1 tfTypes.InputKubeEventsRules
			rules1.Description = types.StringPointerValue(rulesItem1.Description)
			rules1.Filter = types.StringValue(rulesItem1.Filter)
			if rulesCount1+1 > len(r.InputKubeEvents.Rules) {
				r.InputKubeEvents.Rules = append(r.InputKubeEvents.Rules, rules1)
			} else {
				r.InputKubeEvents.Rules[rulesCount1].Description = rules1.Description
				r.InputKubeEvents.Rules[rulesCount1].Filter = rules1.Filter
			}
		}
		r.InputKubeEvents.SendToRoutes = types.BoolPointerValue(resp.InputKubeEvents.SendToRoutes)
		if resp.InputKubeEvents.Status == nil {
			r.InputKubeEvents.Status = nil
		} else {
			r.InputKubeEvents.Status = &tfTypes.TFStatus{}
			r.InputKubeEvents.Status.Health = types.StringValue(string(resp.InputKubeEvents.Status.Health))
			if len(resp.InputKubeEvents.Status.Metrics) > 0 {
				r.InputKubeEvents.Status.Metrics = make(map[string]types.String, len(resp.InputKubeEvents.Status.Metrics))
				for key25, value25 := range resp.InputKubeEvents.Status.Metrics {
					result25, _ := json.Marshal(value25)
					r.InputKubeEvents.Status.Metrics[key25] = types.StringValue(string(result25))
				}
			}
			r.InputKubeEvents.Status.Timestamp = types.Float64Value(resp.InputKubeEvents.Status.Timestamp)
			r.InputKubeEvents.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputKubeEvents.Status.UseStatusFromLB)
		}
		r.InputKubeEvents.Streamtags = make([]types.String, 0, len(resp.InputKubeEvents.Streamtags))
		for _, v := range resp.InputKubeEvents.Streamtags {
			r.InputKubeEvents.Streamtags = append(r.InputKubeEvents.Streamtags, types.StringValue(v))
		}
		r.InputKubeEvents.Type = types.StringValue(string(resp.InputKubeEvents.Type))
	}
	if resp.InputKubeLogs != nil {
		r.InputKubeLogs = &tfTypes.InputKubeLogs{}
		r.InputKubeLogs.BreakerRulesets = make([]types.String, 0, len(resp.InputKubeLogs.BreakerRulesets))
		for _, v := range resp.InputKubeLogs.BreakerRulesets {
			r.InputKubeLogs.BreakerRulesets = append(r.InputKubeLogs.BreakerRulesets, types.StringValue(v))
		}
		r.InputKubeLogs.Connections = []tfTypes.InputKubeLogsConnections{}
		if len(r.InputKubeLogs.Connections) > len(resp.InputKubeLogs.Connections) {
			r.InputKubeLogs.Connections = r.InputKubeLogs.Connections[:len(resp.InputKubeLogs.Connections)]
		}
		for connectionsCount26, connectionsItem26 := range resp.InputKubeLogs.Connections {
			var connections26 tfTypes.InputKubeLogsConnections
			connections26.Output = types.StringValue(connectionsItem26.Output)
			connections26.Pipeline = types.StringPointerValue(connectionsItem26.Pipeline)
			if connectionsCount26+1 > len(r.InputKubeLogs.Connections) {
				r.InputKubeLogs.Connections = append(r.InputKubeLogs.Connections, connections26)
			} else {
				r.InputKubeLogs.Connections[connectionsCount26].Output = connections26.Output
				r.InputKubeLogs.Connections[connectionsCount26].Pipeline = connections26.Pipeline
			}
		}
		r.InputKubeLogs.Description = types.StringPointerValue(resp.InputKubeLogs.Description)
		r.InputKubeLogs.Disabled = types.BoolPointerValue(resp.InputKubeLogs.Disabled)
		r.InputKubeLogs.EnableLoadBalancing = types.BoolPointerValue(resp.InputKubeLogs.EnableLoadBalancing)
		r.InputKubeLogs.Environment = types.StringPointerValue(resp.InputKubeLogs.Environment)
		r.InputKubeLogs.ID = types.StringValue(resp.InputKubeLogs.ID)
		r.InputKubeLogs.Interval = types.Float64PointerValue(resp.InputKubeLogs.Interval)
		r.InputKubeLogs.Metadata = []tfTypes.InputKubeLogsMetadata{}
		if len(r.InputKubeLogs.Metadata) > len(resp.InputKubeLogs.Metadata) {
			r.InputKubeLogs.Metadata = r.InputKubeLogs.Metadata[:len(resp.InputKubeLogs.Metadata)]
		}
		for metadataCount28, metadataItem28 := range resp.InputKubeLogs.Metadata {
			var metadata28 tfTypes.InputKubeLogsMetadata
			metadata28.Name = types.StringValue(metadataItem28.Name)
			metadata28.Value = types.StringValue(metadataItem28.Value)
			if metadataCount28+1 > len(r.InputKubeLogs.Metadata) {
				r.InputKubeLogs.Metadata = append(r.InputKubeLogs.Metadata, metadata28)
			} else {
				r.InputKubeLogs.Metadata[metadataCount28].Name = metadata28.Name
				r.InputKubeLogs.Metadata[metadataCount28].Value = metadata28.Value
			}
		}
		if resp.InputKubeLogs.Persistence == nil {
			r.InputKubeLogs.Persistence = nil
		} else {
			r.InputKubeLogs.Persistence = &tfTypes.InputKubeLogsDiskSpooling{}
			if resp.InputKubeLogs.Persistence.Compress != nil {
				r.InputKubeLogs.Persistence.Compress = types.StringValue(string(*resp.InputKubeLogs.Persistence.Compress))
			} else {
				r.InputKubeLogs.Persistence.Compress = types.StringNull()
			}
			r.InputKubeLogs.Persistence.Enable = types.BoolPointerValue(resp.InputKubeLogs.Persistence.Enable)
			r.InputKubeLogs.Persistence.MaxDataSize = types.StringPointerValue(resp.InputKubeLogs.Persistence.MaxDataSize)
			r.InputKubeLogs.Persistence.MaxDataTime = types.StringPointerValue(resp.InputKubeLogs.Persistence.MaxDataTime)
			r.InputKubeLogs.Persistence.TimeWindow = types.StringPointerValue(resp.InputKubeLogs.Persistence.TimeWindow)
		}
		r.InputKubeLogs.Pipeline = types.StringPointerValue(resp.InputKubeLogs.Pipeline)
		if resp.InputKubeLogs.Pq == nil {
			r.InputKubeLogs.Pq = nil
		} else {
			r.InputKubeLogs.Pq = &tfTypes.InputKubeLogsPq{}
			r.InputKubeLogs.Pq.CommitFrequency = types.Float64PointerValue(resp.InputKubeLogs.Pq.CommitFrequency)
			if resp.InputKubeLogs.Pq.Compress != nil {
				r.InputKubeLogs.Pq.Compress = types.StringValue(string(*resp.InputKubeLogs.Pq.Compress))
			} else {
				r.InputKubeLogs.Pq.Compress = types.StringNull()
			}
			r.InputKubeLogs.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputKubeLogs.Pq.MaxBufferSize)
			r.InputKubeLogs.Pq.MaxFileSize = types.StringPointerValue(resp.InputKubeLogs.Pq.MaxFileSize)
			r.InputKubeLogs.Pq.MaxSize = types.StringPointerValue(resp.InputKubeLogs.Pq.MaxSize)
			if resp.InputKubeLogs.Pq.Mode != nil {
				r.InputKubeLogs.Pq.Mode = types.StringValue(string(*resp.InputKubeLogs.Pq.Mode))
			} else {
				r.InputKubeLogs.Pq.Mode = types.StringNull()
			}
			r.InputKubeLogs.Pq.Path = types.StringPointerValue(resp.InputKubeLogs.Pq.Path)
		}
		r.InputKubeLogs.PqEnabled = types.BoolPointerValue(resp.InputKubeLogs.PqEnabled)
		r.InputKubeLogs.Rules = []tfTypes.InputKubeLogsRules{}
		if len(r.InputKubeLogs.Rules) > len(resp.InputKubeLogs.Rules) {
			r.InputKubeLogs.Rules = r.InputKubeLogs.Rules[:len(resp.InputKubeLogs.Rules)]
		}
		for rulesCount2, rulesItem2 := range resp.InputKubeLogs.Rules {
			var rules2 tfTypes.InputKubeLogsRules
			rules2.Description = types.StringPointerValue(rulesItem2.Description)
			rules2.Filter = types.StringValue(rulesItem2.Filter)
			if rulesCount2+1 > len(r.InputKubeLogs.Rules) {
				r.InputKubeLogs.Rules = append(r.InputKubeLogs.Rules, rules2)
			} else {
				r.InputKubeLogs.Rules[rulesCount2].Description = rules2.Description
				r.InputKubeLogs.Rules[rulesCount2].Filter = rules2.Filter
			}
		}
		r.InputKubeLogs.SendToRoutes = types.BoolPointerValue(resp.InputKubeLogs.SendToRoutes)
		r.InputKubeLogs.StaleChannelFlushMs = types.Float64PointerValue(resp.InputKubeLogs.StaleChannelFlushMs)
		if resp.InputKubeLogs.Status == nil {
			r.InputKubeLogs.Status = nil
		} else {
			r.InputKubeLogs.Status = &tfTypes.TFStatus{}
			r.InputKubeLogs.Status.Health = types.StringValue(string(resp.InputKubeLogs.Status.Health))
			if len(resp.InputKubeLogs.Status.Metrics) > 0 {
				r.InputKubeLogs.Status.Metrics = make(map[string]types.String, len(resp.InputKubeLogs.Status.Metrics))
				for key26, value26 := range resp.InputKubeLogs.Status.Metrics {
					result26, _ := json.Marshal(value26)
					r.InputKubeLogs.Status.Metrics[key26] = types.StringValue(string(result26))
				}
			}
			r.InputKubeLogs.Status.Timestamp = types.Float64Value(resp.InputKubeLogs.Status.Timestamp)
			r.InputKubeLogs.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputKubeLogs.Status.UseStatusFromLB)
		}
		r.InputKubeLogs.Streamtags = make([]types.String, 0, len(resp.InputKubeLogs.Streamtags))
		for _, v := range resp.InputKubeLogs.Streamtags {
			r.InputKubeLogs.Streamtags = append(r.InputKubeLogs.Streamtags, types.StringValue(v))
		}
		r.InputKubeLogs.Timestamps = types.BoolPointerValue(resp.InputKubeLogs.Timestamps)
		r.InputKubeLogs.Type = types.StringValue(string(resp.InputKubeLogs.Type))
	}
	if resp.InputKubeMetrics != nil {
		r.InputKubeMetrics = &tfTypes.InputKubeMetrics{}
		r.InputKubeMetrics.Connections = []tfTypes.InputKubeMetricsConnections{}
		if len(r.InputKubeMetrics.Connections) > len(resp.InputKubeMetrics.Connections) {
			r.InputKubeMetrics.Connections = r.InputKubeMetrics.Connections[:len(resp.InputKubeMetrics.Connections)]
		}
		for connectionsCount27, connectionsItem27 := range resp.InputKubeMetrics.Connections {
			var connections27 tfTypes.InputKubeMetricsConnections
			connections27.Output = types.StringValue(connectionsItem27.Output)
			connections27.Pipeline = types.StringPointerValue(connectionsItem27.Pipeline)
			if connectionsCount27+1 > len(r.InputKubeMetrics.Connections) {
				r.InputKubeMetrics.Connections = append(r.InputKubeMetrics.Connections, connections27)
			} else {
				r.InputKubeMetrics.Connections[connectionsCount27].Output = connections27.Output
				r.InputKubeMetrics.Connections[connectionsCount27].Pipeline = connections27.Pipeline
			}
		}
		r.InputKubeMetrics.Description = types.StringPointerValue(resp.InputKubeMetrics.Description)
		r.InputKubeMetrics.Disabled = types.BoolPointerValue(resp.InputKubeMetrics.Disabled)
		r.InputKubeMetrics.Environment = types.StringPointerValue(resp.InputKubeMetrics.Environment)
		r.InputKubeMetrics.ID = types.StringValue(resp.InputKubeMetrics.ID)
		r.InputKubeMetrics.Interval = types.Float64PointerValue(resp.InputKubeMetrics.Interval)
		r.InputKubeMetrics.Metadata = []tfTypes.InputKubeMetricsMetadata{}
		if len(r.InputKubeMetrics.Metadata) > len(resp.InputKubeMetrics.Metadata) {
			r.InputKubeMetrics.Metadata = r.InputKubeMetrics.Metadata[:len(resp.InputKubeMetrics.Metadata)]
		}
		for metadataCount29, metadataItem29 := range resp.InputKubeMetrics.Metadata {
			var metadata29 tfTypes.InputKubeMetricsMetadata
			metadata29.Name = types.StringValue(metadataItem29.Name)
			metadata29.Value = types.StringValue(metadataItem29.Value)
			if metadataCount29+1 > len(r.InputKubeMetrics.Metadata) {
				r.InputKubeMetrics.Metadata = append(r.InputKubeMetrics.Metadata, metadata29)
			} else {
				r.InputKubeMetrics.Metadata[metadataCount29].Name = metadata29.Name
				r.InputKubeMetrics.Metadata[metadataCount29].Value = metadata29.Value
			}
		}
		if resp.InputKubeMetrics.Persistence == nil {
			r.InputKubeMetrics.Persistence = nil
		} else {
			r.InputKubeMetrics.Persistence = &tfTypes.InputKubeMetricsPersistence{}
			if resp.InputKubeMetrics.Persistence.Compress != nil {
				r.InputKubeMetrics.Persistence.Compress = types.StringValue(string(*resp.InputKubeMetrics.Persistence.Compress))
			} else {
				r.InputKubeMetrics.Persistence.Compress = types.StringNull()
			}
			r.InputKubeMetrics.Persistence.DestPath = types.StringPointerValue(resp.InputKubeMetrics.Persistence.DestPath)
			r.InputKubeMetrics.Persistence.Enable = types.BoolPointerValue(resp.InputKubeMetrics.Persistence.Enable)
			r.InputKubeMetrics.Persistence.MaxDataSize = types.StringPointerValue(resp.InputKubeMetrics.Persistence.MaxDataSize)
			r.InputKubeMetrics.Persistence.MaxDataTime = types.StringPointerValue(resp.InputKubeMetrics.Persistence.MaxDataTime)
			r.InputKubeMetrics.Persistence.TimeWindow = types.StringPointerValue(resp.InputKubeMetrics.Persistence.TimeWindow)
		}
		r.InputKubeMetrics.Pipeline = types.StringPointerValue(resp.InputKubeMetrics.Pipeline)
		if resp.InputKubeMetrics.Pq == nil {
			r.InputKubeMetrics.Pq = nil
		} else {
			r.InputKubeMetrics.Pq = &tfTypes.InputKubeMetricsPq{}
			r.InputKubeMetrics.Pq.CommitFrequency = types.Float64PointerValue(resp.InputKubeMetrics.Pq.CommitFrequency)
			if resp.InputKubeMetrics.Pq.Compress != nil {
				r.InputKubeMetrics.Pq.Compress = types.StringValue(string(*resp.InputKubeMetrics.Pq.Compress))
			} else {
				r.InputKubeMetrics.Pq.Compress = types.StringNull()
			}
			r.InputKubeMetrics.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputKubeMetrics.Pq.MaxBufferSize)
			r.InputKubeMetrics.Pq.MaxFileSize = types.StringPointerValue(resp.InputKubeMetrics.Pq.MaxFileSize)
			r.InputKubeMetrics.Pq.MaxSize = types.StringPointerValue(resp.InputKubeMetrics.Pq.MaxSize)
			if resp.InputKubeMetrics.Pq.Mode != nil {
				r.InputKubeMetrics.Pq.Mode = types.StringValue(string(*resp.InputKubeMetrics.Pq.Mode))
			} else {
				r.InputKubeMetrics.Pq.Mode = types.StringNull()
			}
			r.InputKubeMetrics.Pq.Path = types.StringPointerValue(resp.InputKubeMetrics.Pq.Path)
		}
		r.InputKubeMetrics.PqEnabled = types.BoolPointerValue(resp.InputKubeMetrics.PqEnabled)
		r.InputKubeMetrics.Rules = []tfTypes.InputKubeMetricsRules{}
		if len(r.InputKubeMetrics.Rules) > len(resp.InputKubeMetrics.Rules) {
			r.InputKubeMetrics.Rules = r.InputKubeMetrics.Rules[:len(resp.InputKubeMetrics.Rules)]
		}
		for rulesCount3, rulesItem3 := range resp.InputKubeMetrics.Rules {
			var rules3 tfTypes.InputKubeMetricsRules
			rules3.Description = types.StringPointerValue(rulesItem3.Description)
			rules3.Filter = types.StringValue(rulesItem3.Filter)
			if rulesCount3+1 > len(r.InputKubeMetrics.Rules) {
				r.InputKubeMetrics.Rules = append(r.InputKubeMetrics.Rules, rules3)
			} else {
				r.InputKubeMetrics.Rules[rulesCount3].Description = rules3.Description
				r.InputKubeMetrics.Rules[rulesCount3].Filter = rules3.Filter
			}
		}
		r.InputKubeMetrics.SendToRoutes = types.BoolPointerValue(resp.InputKubeMetrics.SendToRoutes)
		if resp.InputKubeMetrics.Status == nil {
			r.InputKubeMetrics.Status = nil
		} else {
			r.InputKubeMetrics.Status = &tfTypes.TFStatus{}
			r.InputKubeMetrics.Status.Health = types.StringValue(string(resp.InputKubeMetrics.Status.Health))
			if len(resp.InputKubeMetrics.Status.Metrics) > 0 {
				r.InputKubeMetrics.Status.Metrics = make(map[string]types.String, len(resp.InputKubeMetrics.Status.Metrics))
				for key27, value27 := range resp.InputKubeMetrics.Status.Metrics {
					result27, _ := json.Marshal(value27)
					r.InputKubeMetrics.Status.Metrics[key27] = types.StringValue(string(result27))
				}
			}
			r.InputKubeMetrics.Status.Timestamp = types.Float64Value(resp.InputKubeMetrics.Status.Timestamp)
			r.InputKubeMetrics.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputKubeMetrics.Status.UseStatusFromLB)
		}
		r.InputKubeMetrics.Streamtags = make([]types.String, 0, len(resp.InputKubeMetrics.Streamtags))
		for _, v := range resp.InputKubeMetrics.Streamtags {
			r.InputKubeMetrics.Streamtags = append(r.InputKubeMetrics.Streamtags, types.StringValue(v))
		}
		r.InputKubeMetrics.Type = types.StringValue(string(resp.InputKubeMetrics.Type))
	}
	if resp.InputLoki != nil {
		r.InputLoki = &tfTypes.InputLoki{}
		r.InputLoki.ActivityLogSampleRate = types.Float64PointerValue(resp.InputLoki.ActivityLogSampleRate)
		r.InputLoki.AuthHeaderExpr = types.StringPointerValue(resp.InputLoki.AuthHeaderExpr)
		if resp.InputLoki.AuthType != nil {
			r.InputLoki.AuthType = types.StringValue(string(*resp.InputLoki.AuthType))
		} else {
			r.InputLoki.AuthType = types.StringNull()
		}
		r.InputLoki.CaptureHeaders = types.BoolPointerValue(resp.InputLoki.CaptureHeaders)
		r.InputLoki.Connections = []tfTypes.InputLokiConnections{}
		if len(r.InputLoki.Connections) > len(resp.InputLoki.Connections) {
			r.InputLoki.Connections = r.InputLoki.Connections[:len(resp.InputLoki.Connections)]
		}
		for connectionsCount28, connectionsItem28 := range resp.InputLoki.Connections {
			var connections28 tfTypes.InputLokiConnections
			connections28.Output = types.StringValue(connectionsItem28.Output)
			connections28.Pipeline = types.StringPointerValue(connectionsItem28.Pipeline)
			if connectionsCount28+1 > len(r.InputLoki.Connections) {
				r.InputLoki.Connections = append(r.InputLoki.Connections, connections28)
			} else {
				r.InputLoki.Connections[connectionsCount28].Output = connections28.Output
				r.InputLoki.Connections[connectionsCount28].Pipeline = connections28.Pipeline
			}
		}
		r.InputLoki.CredentialsSecret = types.StringPointerValue(resp.InputLoki.CredentialsSecret)
		r.InputLoki.Description = types.StringPointerValue(resp.InputLoki.Description)
		r.InputLoki.Disabled = types.BoolPointerValue(resp.InputLoki.Disabled)
		r.InputLoki.EnableHealthCheck = types.BoolPointerValue(resp.InputLoki.EnableHealthCheck)
		r.InputLoki.EnableProxyHeader = types.BoolPointerValue(resp.InputLoki.EnableProxyHeader)
		r.InputLoki.Environment = types.StringPointerValue(resp.InputLoki.Environment)
		r.InputLoki.Host = types.StringPointerValue(resp.InputLoki.Host)
		r.InputLoki.ID = types.StringPointerValue(resp.InputLoki.ID)
		r.InputLoki.IPAllowlistRegex = types.StringPointerValue(resp.InputLoki.IPAllowlistRegex)
		r.InputLoki.IPDenylistRegex = types.StringPointerValue(resp.InputLoki.IPDenylistRegex)
		r.InputLoki.KeepAliveTimeout = types.Float64PointerValue(resp.InputLoki.KeepAliveTimeout)
		r.InputLoki.LoginURL = types.StringPointerValue(resp.InputLoki.LoginURL)
		r.InputLoki.LokiAPI = types.StringPointerValue(resp.InputLoki.LokiAPI)
		r.InputLoki.MaxActiveReq = types.Float64PointerValue(resp.InputLoki.MaxActiveReq)
		r.InputLoki.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputLoki.MaxRequestsPerSocket)
		r.InputLoki.Metadata = []tfTypes.InputLokiMetadata{}
		if len(r.InputLoki.Metadata) > len(resp.InputLoki.Metadata) {
			r.InputLoki.Metadata = r.InputLoki.Metadata[:len(resp.InputLoki.Metadata)]
		}
		for metadataCount30, metadataItem30 := range resp.InputLoki.Metadata {
			var metadata30 tfTypes.InputLokiMetadata
			metadata30.Name = types.StringValue(metadataItem30.Name)
			metadata30.Value = types.StringValue(metadataItem30.Value)
			if metadataCount30+1 > len(r.InputLoki.Metadata) {
				r.InputLoki.Metadata = append(r.InputLoki.Metadata, metadata30)
			} else {
				r.InputLoki.Metadata[metadataCount30].Name = metadata30.Name
				r.InputLoki.Metadata[metadataCount30].Value = metadata30.Value
			}
		}
		r.InputLoki.OauthHeaders = []tfTypes.InputLokiOauthHeaders{}
		if len(r.InputLoki.OauthHeaders) > len(resp.InputLoki.OauthHeaders) {
			r.InputLoki.OauthHeaders = r.InputLoki.OauthHeaders[:len(resp.InputLoki.OauthHeaders)]
		}
		for oauthHeadersCount4, oauthHeadersItem4 := range resp.InputLoki.OauthHeaders {
			var oauthHeaders4 tfTypes.InputLokiOauthHeaders
			oauthHeaders4.Name = types.StringValue(oauthHeadersItem4.Name)
			oauthHeaders4.Value = types.StringValue(oauthHeadersItem4.Value)
			if oauthHeadersCount4+1 > len(r.InputLoki.OauthHeaders) {
				r.InputLoki.OauthHeaders = append(r.InputLoki.OauthHeaders, oauthHeaders4)
			} else {
				r.InputLoki.OauthHeaders[oauthHeadersCount4].Name = oauthHeaders4.Name
				r.InputLoki.OauthHeaders[oauthHeadersCount4].Value = oauthHeaders4.Value
			}
		}
		r.InputLoki.OauthParams = []tfTypes.InputLokiOauthParams{}
		if len(r.InputLoki.OauthParams) > len(resp.InputLoki.OauthParams) {
			r.InputLoki.OauthParams = r.InputLoki.OauthParams[:len(resp.InputLoki.OauthParams)]
		}
		for oauthParamsCount4, oauthParamsItem4 := range resp.InputLoki.OauthParams {
			var oauthParams4 tfTypes.InputLokiOauthParams
			oauthParams4.Name = types.StringValue(oauthParamsItem4.Name)
			oauthParams4.Value = types.StringValue(oauthParamsItem4.Value)
			if oauthParamsCount4+1 > len(r.InputLoki.OauthParams) {
				r.InputLoki.OauthParams = append(r.InputLoki.OauthParams, oauthParams4)
			} else {
				r.InputLoki.OauthParams[oauthParamsCount4].Name = oauthParams4.Name
				r.InputLoki.OauthParams[oauthParamsCount4].Value = oauthParams4.Value
			}
		}
		r.InputLoki.Password = types.StringPointerValue(resp.InputLoki.Password)
		r.InputLoki.Pipeline = types.StringPointerValue(resp.InputLoki.Pipeline)
		r.InputLoki.Port = types.Float64Value(resp.InputLoki.Port)
		if resp.InputLoki.Pq == nil {
			r.InputLoki.Pq = nil
		} else {
			r.InputLoki.Pq = &tfTypes.InputLokiPq{}
			r.InputLoki.Pq.CommitFrequency = types.Float64PointerValue(resp.InputLoki.Pq.CommitFrequency)
			if resp.InputLoki.Pq.Compress != nil {
				r.InputLoki.Pq.Compress = types.StringValue(string(*resp.InputLoki.Pq.Compress))
			} else {
				r.InputLoki.Pq.Compress = types.StringNull()
			}
			r.InputLoki.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputLoki.Pq.MaxBufferSize)
			r.InputLoki.Pq.MaxFileSize = types.StringPointerValue(resp.InputLoki.Pq.MaxFileSize)
			r.InputLoki.Pq.MaxSize = types.StringPointerValue(resp.InputLoki.Pq.MaxSize)
			if resp.InputLoki.Pq.Mode != nil {
				r.InputLoki.Pq.Mode = types.StringValue(string(*resp.InputLoki.Pq.Mode))
			} else {
				r.InputLoki.Pq.Mode = types.StringNull()
			}
			r.InputLoki.Pq.Path = types.StringPointerValue(resp.InputLoki.Pq.Path)
		}
		r.InputLoki.PqEnabled = types.BoolPointerValue(resp.InputLoki.PqEnabled)
		r.InputLoki.RequestTimeout = types.Float64PointerValue(resp.InputLoki.RequestTimeout)
		r.InputLoki.Secret = types.StringPointerValue(resp.InputLoki.Secret)
		r.InputLoki.SecretParamName = types.StringPointerValue(resp.InputLoki.SecretParamName)
		r.InputLoki.SendToRoutes = types.BoolPointerValue(resp.InputLoki.SendToRoutes)
		r.InputLoki.SocketTimeout = types.Float64PointerValue(resp.InputLoki.SocketTimeout)
		if resp.InputLoki.Status == nil {
			r.InputLoki.Status = nil
		} else {
			r.InputLoki.Status = &tfTypes.TFStatus{}
			r.InputLoki.Status.Health = types.StringValue(string(resp.InputLoki.Status.Health))
			if len(resp.InputLoki.Status.Metrics) > 0 {
				r.InputLoki.Status.Metrics = make(map[string]types.String, len(resp.InputLoki.Status.Metrics))
				for key28, value28 := range resp.InputLoki.Status.Metrics {
					result28, _ := json.Marshal(value28)
					r.InputLoki.Status.Metrics[key28] = types.StringValue(string(result28))
				}
			}
			r.InputLoki.Status.Timestamp = types.Float64Value(resp.InputLoki.Status.Timestamp)
			r.InputLoki.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputLoki.Status.UseStatusFromLB)
		}
		r.InputLoki.Streamtags = make([]types.String, 0, len(resp.InputLoki.Streamtags))
		for _, v := range resp.InputLoki.Streamtags {
			r.InputLoki.Streamtags = append(r.InputLoki.Streamtags, types.StringValue(v))
		}
		r.InputLoki.TextSecret = types.StringPointerValue(resp.InputLoki.TextSecret)
		if resp.InputLoki.TLS == nil {
			r.InputLoki.TLS = nil
		} else {
			r.InputLoki.TLS = &tfTypes.InputLokiTLSSettingsServerSide{}
			r.InputLoki.TLS.CaPath = types.StringPointerValue(resp.InputLoki.TLS.CaPath)
			r.InputLoki.TLS.CertificateName = types.StringPointerValue(resp.InputLoki.TLS.CertificateName)
			r.InputLoki.TLS.CertPath = types.StringPointerValue(resp.InputLoki.TLS.CertPath)
			if resp.InputLoki.TLS.CommonNameRegex == nil {
				r.InputLoki.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult10, _ := json.Marshal(resp.InputLoki.TLS.CommonNameRegex)
				r.InputLoki.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult10))
			}
			r.InputLoki.TLS.Disabled = types.BoolPointerValue(resp.InputLoki.TLS.Disabled)
			if resp.InputLoki.TLS.MaxVersion != nil {
				r.InputLoki.TLS.MaxVersion = types.StringValue(string(*resp.InputLoki.TLS.MaxVersion))
			} else {
				r.InputLoki.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputLoki.TLS.MinVersion != nil {
				r.InputLoki.TLS.MinVersion = types.StringValue(string(*resp.InputLoki.TLS.MinVersion))
			} else {
				r.InputLoki.TLS.MinVersion = types.StringNull()
			}
			r.InputLoki.TLS.Passphrase = types.StringPointerValue(resp.InputLoki.TLS.Passphrase)
			r.InputLoki.TLS.PrivKeyPath = types.StringPointerValue(resp.InputLoki.TLS.PrivKeyPath)
			if resp.InputLoki.TLS.RejectUnauthorized == nil {
				r.InputLoki.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult10, _ := json.Marshal(resp.InputLoki.TLS.RejectUnauthorized)
				r.InputLoki.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult10))
			}
			r.InputLoki.TLS.RequestCert = types.BoolPointerValue(resp.InputLoki.TLS.RequestCert)
		}
		r.InputLoki.Token = types.StringPointerValue(resp.InputLoki.Token)
		r.InputLoki.TokenAttributeName = types.StringPointerValue(resp.InputLoki.TokenAttributeName)
		r.InputLoki.TokenTimeoutSecs = types.Float64PointerValue(resp.InputLoki.TokenTimeoutSecs)
		if resp.InputLoki.Type != nil {
			r.InputLoki.Type = types.StringValue(string(*resp.InputLoki.Type))
		} else {
			r.InputLoki.Type = types.StringNull()
		}
		r.InputLoki.Username = types.StringPointerValue(resp.InputLoki.Username)
	}
	if resp.InputMetrics != nil {
		r.InputMetrics = &tfTypes.InputMetrics{}
		r.InputMetrics.Connections = []tfTypes.InputMetricsConnections{}
		if len(r.InputMetrics.Connections) > len(resp.InputMetrics.Connections) {
			r.InputMetrics.Connections = r.InputMetrics.Connections[:len(resp.InputMetrics.Connections)]
		}
		for connectionsCount29, connectionsItem29 := range resp.InputMetrics.Connections {
			var connections29 tfTypes.InputMetricsConnections
			connections29.Output = types.StringValue(connectionsItem29.Output)
			connections29.Pipeline = types.StringPointerValue(connectionsItem29.Pipeline)
			if connectionsCount29+1 > len(r.InputMetrics.Connections) {
				r.InputMetrics.Connections = append(r.InputMetrics.Connections, connections29)
			} else {
				r.InputMetrics.Connections[connectionsCount29].Output = connections29.Output
				r.InputMetrics.Connections[connectionsCount29].Pipeline = connections29.Pipeline
			}
		}
		r.InputMetrics.Description = types.StringPointerValue(resp.InputMetrics.Description)
		r.InputMetrics.Disabled = types.BoolPointerValue(resp.InputMetrics.Disabled)
		r.InputMetrics.EnableProxyHeader = types.BoolPointerValue(resp.InputMetrics.EnableProxyHeader)
		r.InputMetrics.Environment = types.StringPointerValue(resp.InputMetrics.Environment)
		r.InputMetrics.Host = types.StringPointerValue(resp.InputMetrics.Host)
		r.InputMetrics.ID = types.StringPointerValue(resp.InputMetrics.ID)
		r.InputMetrics.IPWhitelistRegex = types.StringPointerValue(resp.InputMetrics.IPWhitelistRegex)
		r.InputMetrics.MaxBufferSize = types.Float64PointerValue(resp.InputMetrics.MaxBufferSize)
		r.InputMetrics.Metadata = []tfTypes.InputMetricsMetadata{}
		if len(r.InputMetrics.Metadata) > len(resp.InputMetrics.Metadata) {
			r.InputMetrics.Metadata = r.InputMetrics.Metadata[:len(resp.InputMetrics.Metadata)]
		}
		for metadataCount31, metadataItem31 := range resp.InputMetrics.Metadata {
			var metadata31 tfTypes.InputMetricsMetadata
			metadata31.Name = types.StringValue(metadataItem31.Name)
			metadata31.Value = types.StringValue(metadataItem31.Value)
			if metadataCount31+1 > len(r.InputMetrics.Metadata) {
				r.InputMetrics.Metadata = append(r.InputMetrics.Metadata, metadata31)
			} else {
				r.InputMetrics.Metadata[metadataCount31].Name = metadata31.Name
				r.InputMetrics.Metadata[metadataCount31].Value = metadata31.Value
			}
		}
		r.InputMetrics.Pipeline = types.StringPointerValue(resp.InputMetrics.Pipeline)
		if resp.InputMetrics.Pq == nil {
			r.InputMetrics.Pq = nil
		} else {
			r.InputMetrics.Pq = &tfTypes.InputMetricsPq{}
			r.InputMetrics.Pq.CommitFrequency = types.Float64PointerValue(resp.InputMetrics.Pq.CommitFrequency)
			if resp.InputMetrics.Pq.Compress != nil {
				r.InputMetrics.Pq.Compress = types.StringValue(string(*resp.InputMetrics.Pq.Compress))
			} else {
				r.InputMetrics.Pq.Compress = types.StringNull()
			}
			r.InputMetrics.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputMetrics.Pq.MaxBufferSize)
			r.InputMetrics.Pq.MaxFileSize = types.StringPointerValue(resp.InputMetrics.Pq.MaxFileSize)
			r.InputMetrics.Pq.MaxSize = types.StringPointerValue(resp.InputMetrics.Pq.MaxSize)
			if resp.InputMetrics.Pq.Mode != nil {
				r.InputMetrics.Pq.Mode = types.StringValue(string(*resp.InputMetrics.Pq.Mode))
			} else {
				r.InputMetrics.Pq.Mode = types.StringNull()
			}
			r.InputMetrics.Pq.Path = types.StringPointerValue(resp.InputMetrics.Pq.Path)
		}
		r.InputMetrics.PqEnabled = types.BoolPointerValue(resp.InputMetrics.PqEnabled)
		r.InputMetrics.SendToRoutes = types.BoolPointerValue(resp.InputMetrics.SendToRoutes)
		if resp.InputMetrics.Status == nil {
			r.InputMetrics.Status = nil
		} else {
			r.InputMetrics.Status = &tfTypes.TFStatus{}
			r.InputMetrics.Status.Health = types.StringValue(string(resp.InputMetrics.Status.Health))
			if len(resp.InputMetrics.Status.Metrics) > 0 {
				r.InputMetrics.Status.Metrics = make(map[string]types.String, len(resp.InputMetrics.Status.Metrics))
				for key29, value29 := range resp.InputMetrics.Status.Metrics {
					result29, _ := json.Marshal(value29)
					r.InputMetrics.Status.Metrics[key29] = types.StringValue(string(result29))
				}
			}
			r.InputMetrics.Status.Timestamp = types.Float64Value(resp.InputMetrics.Status.Timestamp)
			r.InputMetrics.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputMetrics.Status.UseStatusFromLB)
		}
		r.InputMetrics.Streamtags = make([]types.String, 0, len(resp.InputMetrics.Streamtags))
		for _, v := range resp.InputMetrics.Streamtags {
			r.InputMetrics.Streamtags = append(r.InputMetrics.Streamtags, types.StringValue(v))
		}
		r.InputMetrics.TCPPort = types.Float64PointerValue(resp.InputMetrics.TCPPort)
		if resp.InputMetrics.TLS == nil {
			r.InputMetrics.TLS = nil
		} else {
			r.InputMetrics.TLS = &tfTypes.InputMetricsTLSSettingsServerSide{}
			r.InputMetrics.TLS.CaPath = types.StringPointerValue(resp.InputMetrics.TLS.CaPath)
			r.InputMetrics.TLS.CertificateName = types.StringPointerValue(resp.InputMetrics.TLS.CertificateName)
			r.InputMetrics.TLS.CertPath = types.StringPointerValue(resp.InputMetrics.TLS.CertPath)
			if resp.InputMetrics.TLS.CommonNameRegex == nil {
				r.InputMetrics.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult11, _ := json.Marshal(resp.InputMetrics.TLS.CommonNameRegex)
				r.InputMetrics.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult11))
			}
			r.InputMetrics.TLS.Disabled = types.BoolPointerValue(resp.InputMetrics.TLS.Disabled)
			if resp.InputMetrics.TLS.MaxVersion != nil {
				r.InputMetrics.TLS.MaxVersion = types.StringValue(string(*resp.InputMetrics.TLS.MaxVersion))
			} else {
				r.InputMetrics.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputMetrics.TLS.MinVersion != nil {
				r.InputMetrics.TLS.MinVersion = types.StringValue(string(*resp.InputMetrics.TLS.MinVersion))
			} else {
				r.InputMetrics.TLS.MinVersion = types.StringNull()
			}
			r.InputMetrics.TLS.Passphrase = types.StringPointerValue(resp.InputMetrics.TLS.Passphrase)
			r.InputMetrics.TLS.PrivKeyPath = types.StringPointerValue(resp.InputMetrics.TLS.PrivKeyPath)
			if resp.InputMetrics.TLS.RejectUnauthorized == nil {
				r.InputMetrics.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult11, _ := json.Marshal(resp.InputMetrics.TLS.RejectUnauthorized)
				r.InputMetrics.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult11))
			}
			r.InputMetrics.TLS.RequestCert = types.BoolPointerValue(resp.InputMetrics.TLS.RequestCert)
		}
		r.InputMetrics.Type = types.StringValue(string(resp.InputMetrics.Type))
		r.InputMetrics.UDPPort = types.Float64PointerValue(resp.InputMetrics.UDPPort)
		r.InputMetrics.UDPSocketRxBufSize = types.Float64PointerValue(resp.InputMetrics.UDPSocketRxBufSize)
	}
	if resp.InputModelDrivenTelemetry != nil {
		r.InputModelDrivenTelemetry = &tfTypes.InputModelDrivenTelemetry{}
		r.InputModelDrivenTelemetry.Connections = []tfTypes.InputModelDrivenTelemetryConnections{}
		if len(r.InputModelDrivenTelemetry.Connections) > len(resp.InputModelDrivenTelemetry.Connections) {
			r.InputModelDrivenTelemetry.Connections = r.InputModelDrivenTelemetry.Connections[:len(resp.InputModelDrivenTelemetry.Connections)]
		}
		for connectionsCount30, connectionsItem30 := range resp.InputModelDrivenTelemetry.Connections {
			var connections30 tfTypes.InputModelDrivenTelemetryConnections
			connections30.Output = types.StringValue(connectionsItem30.Output)
			connections30.Pipeline = types.StringPointerValue(connectionsItem30.Pipeline)
			if connectionsCount30+1 > len(r.InputModelDrivenTelemetry.Connections) {
				r.InputModelDrivenTelemetry.Connections = append(r.InputModelDrivenTelemetry.Connections, connections30)
			} else {
				r.InputModelDrivenTelemetry.Connections[connectionsCount30].Output = connections30.Output
				r.InputModelDrivenTelemetry.Connections[connectionsCount30].Pipeline = connections30.Pipeline
			}
		}
		r.InputModelDrivenTelemetry.Description = types.StringPointerValue(resp.InputModelDrivenTelemetry.Description)
		r.InputModelDrivenTelemetry.Disabled = types.BoolPointerValue(resp.InputModelDrivenTelemetry.Disabled)
		r.InputModelDrivenTelemetry.Environment = types.StringPointerValue(resp.InputModelDrivenTelemetry.Environment)
		r.InputModelDrivenTelemetry.Host = types.StringPointerValue(resp.InputModelDrivenTelemetry.Host)
		r.InputModelDrivenTelemetry.ID = types.StringPointerValue(resp.InputModelDrivenTelemetry.ID)
		r.InputModelDrivenTelemetry.MaxActiveCxn = types.Float64PointerValue(resp.InputModelDrivenTelemetry.MaxActiveCxn)
		r.InputModelDrivenTelemetry.Metadata = []tfTypes.InputModelDrivenTelemetryMetadata{}
		if len(r.InputModelDrivenTelemetry.Metadata) > len(resp.InputModelDrivenTelemetry.Metadata) {
			r.InputModelDrivenTelemetry.Metadata = r.InputModelDrivenTelemetry.Metadata[:len(resp.InputModelDrivenTelemetry.Metadata)]
		}
		for metadataCount32, metadataItem32 := range resp.InputModelDrivenTelemetry.Metadata {
			var metadata32 tfTypes.InputModelDrivenTelemetryMetadata
			metadata32.Name = types.StringValue(metadataItem32.Name)
			metadata32.Value = types.StringValue(metadataItem32.Value)
			if metadataCount32+1 > len(r.InputModelDrivenTelemetry.Metadata) {
				r.InputModelDrivenTelemetry.Metadata = append(r.InputModelDrivenTelemetry.Metadata, metadata32)
			} else {
				r.InputModelDrivenTelemetry.Metadata[metadataCount32].Name = metadata32.Name
				r.InputModelDrivenTelemetry.Metadata[metadataCount32].Value = metadata32.Value
			}
		}
		r.InputModelDrivenTelemetry.Pipeline = types.StringPointerValue(resp.InputModelDrivenTelemetry.Pipeline)
		r.InputModelDrivenTelemetry.Port = types.Float64PointerValue(resp.InputModelDrivenTelemetry.Port)
		if resp.InputModelDrivenTelemetry.Pq == nil {
			r.InputModelDrivenTelemetry.Pq = nil
		} else {
			r.InputModelDrivenTelemetry.Pq = &tfTypes.InputModelDrivenTelemetryPq{}
			r.InputModelDrivenTelemetry.Pq.CommitFrequency = types.Float64PointerValue(resp.InputModelDrivenTelemetry.Pq.CommitFrequency)
			if resp.InputModelDrivenTelemetry.Pq.Compress != nil {
				r.InputModelDrivenTelemetry.Pq.Compress = types.StringValue(string(*resp.InputModelDrivenTelemetry.Pq.Compress))
			} else {
				r.InputModelDrivenTelemetry.Pq.Compress = types.StringNull()
			}
			r.InputModelDrivenTelemetry.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputModelDrivenTelemetry.Pq.MaxBufferSize)
			r.InputModelDrivenTelemetry.Pq.MaxFileSize = types.StringPointerValue(resp.InputModelDrivenTelemetry.Pq.MaxFileSize)
			r.InputModelDrivenTelemetry.Pq.MaxSize = types.StringPointerValue(resp.InputModelDrivenTelemetry.Pq.MaxSize)
			if resp.InputModelDrivenTelemetry.Pq.Mode != nil {
				r.InputModelDrivenTelemetry.Pq.Mode = types.StringValue(string(*resp.InputModelDrivenTelemetry.Pq.Mode))
			} else {
				r.InputModelDrivenTelemetry.Pq.Mode = types.StringNull()
			}
			r.InputModelDrivenTelemetry.Pq.Path = types.StringPointerValue(resp.InputModelDrivenTelemetry.Pq.Path)
		}
		r.InputModelDrivenTelemetry.PqEnabled = types.BoolPointerValue(resp.InputModelDrivenTelemetry.PqEnabled)
		r.InputModelDrivenTelemetry.SendToRoutes = types.BoolPointerValue(resp.InputModelDrivenTelemetry.SendToRoutes)
		r.InputModelDrivenTelemetry.ShutdownTimeoutMs = types.Float64PointerValue(resp.InputModelDrivenTelemetry.ShutdownTimeoutMs)
		if resp.InputModelDrivenTelemetry.Status == nil {
			r.InputModelDrivenTelemetry.Status = nil
		} else {
			r.InputModelDrivenTelemetry.Status = &tfTypes.TFStatus{}
			r.InputModelDrivenTelemetry.Status.Health = types.StringValue(string(resp.InputModelDrivenTelemetry.Status.Health))
			if len(resp.InputModelDrivenTelemetry.Status.Metrics) > 0 {
				r.InputModelDrivenTelemetry.Status.Metrics = make(map[string]types.String, len(resp.InputModelDrivenTelemetry.Status.Metrics))
				for key30, value30 := range resp.InputModelDrivenTelemetry.Status.Metrics {
					result30, _ := json.Marshal(value30)
					r.InputModelDrivenTelemetry.Status.Metrics[key30] = types.StringValue(string(result30))
				}
			}
			r.InputModelDrivenTelemetry.Status.Timestamp = types.Float64Value(resp.InputModelDrivenTelemetry.Status.Timestamp)
			r.InputModelDrivenTelemetry.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputModelDrivenTelemetry.Status.UseStatusFromLB)
		}
		r.InputModelDrivenTelemetry.Streamtags = make([]types.String, 0, len(resp.InputModelDrivenTelemetry.Streamtags))
		for _, v := range resp.InputModelDrivenTelemetry.Streamtags {
			r.InputModelDrivenTelemetry.Streamtags = append(r.InputModelDrivenTelemetry.Streamtags, types.StringValue(v))
		}
		if resp.InputModelDrivenTelemetry.TLS == nil {
			r.InputModelDrivenTelemetry.TLS = nil
		} else {
			r.InputModelDrivenTelemetry.TLS = &tfTypes.InputModelDrivenTelemetryTLSSettingsServerSide{}
			r.InputModelDrivenTelemetry.TLS.CaPath = types.StringPointerValue(resp.InputModelDrivenTelemetry.TLS.CaPath)
			r.InputModelDrivenTelemetry.TLS.CertificateName = types.StringPointerValue(resp.InputModelDrivenTelemetry.TLS.CertificateName)
			r.InputModelDrivenTelemetry.TLS.CertPath = types.StringPointerValue(resp.InputModelDrivenTelemetry.TLS.CertPath)
			if resp.InputModelDrivenTelemetry.TLS.CommonNameRegex == nil {
				r.InputModelDrivenTelemetry.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult12, _ := json.Marshal(resp.InputModelDrivenTelemetry.TLS.CommonNameRegex)
				r.InputModelDrivenTelemetry.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult12))
			}
			r.InputModelDrivenTelemetry.TLS.Disabled = types.BoolPointerValue(resp.InputModelDrivenTelemetry.TLS.Disabled)
			if resp.InputModelDrivenTelemetry.TLS.MaxVersion != nil {
				r.InputModelDrivenTelemetry.TLS.MaxVersion = types.StringValue(string(*resp.InputModelDrivenTelemetry.TLS.MaxVersion))
			} else {
				r.InputModelDrivenTelemetry.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputModelDrivenTelemetry.TLS.MinVersion != nil {
				r.InputModelDrivenTelemetry.TLS.MinVersion = types.StringValue(string(*resp.InputModelDrivenTelemetry.TLS.MinVersion))
			} else {
				r.InputModelDrivenTelemetry.TLS.MinVersion = types.StringNull()
			}
			r.InputModelDrivenTelemetry.TLS.PrivKeyPath = types.StringPointerValue(resp.InputModelDrivenTelemetry.TLS.PrivKeyPath)
			if resp.InputModelDrivenTelemetry.TLS.RejectUnauthorized == nil {
				r.InputModelDrivenTelemetry.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult12, _ := json.Marshal(resp.InputModelDrivenTelemetry.TLS.RejectUnauthorized)
				r.InputModelDrivenTelemetry.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult12))
			}
			r.InputModelDrivenTelemetry.TLS.RequestCert = types.BoolPointerValue(resp.InputModelDrivenTelemetry.TLS.RequestCert)
		}
		if resp.InputModelDrivenTelemetry.Type != nil {
			r.InputModelDrivenTelemetry.Type = types.StringValue(string(*resp.InputModelDrivenTelemetry.Type))
		} else {
			r.InputModelDrivenTelemetry.Type = types.StringNull()
		}
	}
	if resp.InputMsk != nil {
		r.InputMsk = &tfTypes.InputMsk{}
		r.InputMsk.AssumeRoleArn = types.StringPointerValue(resp.InputMsk.AssumeRoleArn)
		r.InputMsk.AssumeRoleExternalID = types.StringPointerValue(resp.InputMsk.AssumeRoleExternalID)
		r.InputMsk.AuthenticationTimeout = types.Float64PointerValue(resp.InputMsk.AuthenticationTimeout)
		r.InputMsk.AutoCommitInterval = types.Float64PointerValue(resp.InputMsk.AutoCommitInterval)
		r.InputMsk.AutoCommitThreshold = types.Float64PointerValue(resp.InputMsk.AutoCommitThreshold)
		r.InputMsk.AwsAPIKey = types.StringPointerValue(resp.InputMsk.AwsAPIKey)
		if resp.InputMsk.AwsAuthenticationMethod != nil {
			r.InputMsk.AwsAuthenticationMethod = types.StringValue(string(*resp.InputMsk.AwsAuthenticationMethod))
		} else {
			r.InputMsk.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputMsk.AwsSecret = types.StringPointerValue(resp.InputMsk.AwsSecret)
		r.InputMsk.AwsSecretKey = types.StringPointerValue(resp.InputMsk.AwsSecretKey)
		r.InputMsk.BackoffRate = types.Float64PointerValue(resp.InputMsk.BackoffRate)
		r.InputMsk.Brokers = make([]types.String, 0, len(resp.InputMsk.Brokers))
		for _, v := range resp.InputMsk.Brokers {
			r.InputMsk.Brokers = append(r.InputMsk.Brokers, types.StringValue(v))
		}
		r.InputMsk.Connections = []tfTypes.InputMskConnections{}
		if len(r.InputMsk.Connections) > len(resp.InputMsk.Connections) {
			r.InputMsk.Connections = r.InputMsk.Connections[:len(resp.InputMsk.Connections)]
		}
		for connectionsCount31, connectionsItem31 := range resp.InputMsk.Connections {
			var connections31 tfTypes.InputMskConnections
			connections31.Output = types.StringValue(connectionsItem31.Output)
			connections31.Pipeline = types.StringPointerValue(connectionsItem31.Pipeline)
			if connectionsCount31+1 > len(r.InputMsk.Connections) {
				r.InputMsk.Connections = append(r.InputMsk.Connections, connections31)
			} else {
				r.InputMsk.Connections[connectionsCount31].Output = connections31.Output
				r.InputMsk.Connections[connectionsCount31].Pipeline = connections31.Pipeline
			}
		}
		r.InputMsk.ConnectionTimeout = types.Float64PointerValue(resp.InputMsk.ConnectionTimeout)
		r.InputMsk.Description = types.StringPointerValue(resp.InputMsk.Description)
		r.InputMsk.Disabled = types.BoolPointerValue(resp.InputMsk.Disabled)
		r.InputMsk.DurationSeconds = types.Float64PointerValue(resp.InputMsk.DurationSeconds)
		r.InputMsk.EnableAssumeRole = types.BoolPointerValue(resp.InputMsk.EnableAssumeRole)
		r.InputMsk.Endpoint = types.StringPointerValue(resp.InputMsk.Endpoint)
		r.InputMsk.Environment = types.StringPointerValue(resp.InputMsk.Environment)
		r.InputMsk.FromBeginning = types.BoolPointerValue(resp.InputMsk.FromBeginning)
		r.InputMsk.GroupID = types.StringPointerValue(resp.InputMsk.GroupID)
		r.InputMsk.HeartbeatInterval = types.Float64PointerValue(resp.InputMsk.HeartbeatInterval)
		r.InputMsk.ID = types.StringPointerValue(resp.InputMsk.ID)
		r.InputMsk.InitialBackoff = types.Float64PointerValue(resp.InputMsk.InitialBackoff)
		if resp.InputMsk.KafkaSchemaRegistry == nil {
			r.InputMsk.KafkaSchemaRegistry = nil
		} else {
			r.InputMsk.KafkaSchemaRegistry = &tfTypes.InputMskKafkaSchemaRegistryAuthentication{}
			if resp.InputMsk.KafkaSchemaRegistry.Auth == nil {
				r.InputMsk.KafkaSchemaRegistry.Auth = nil
			} else {
				r.InputMsk.KafkaSchemaRegistry.Auth = &tfTypes.InputMskAuth{}
				r.InputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.Auth.CredentialsSecret)
				r.InputMsk.KafkaSchemaRegistry.Auth.Disabled = types.BoolPointerValue(resp.InputMsk.KafkaSchemaRegistry.Auth.Disabled)
			}
			r.InputMsk.KafkaSchemaRegistry.ConnectionTimeout = types.Float64PointerValue(resp.InputMsk.KafkaSchemaRegistry.ConnectionTimeout)
			r.InputMsk.KafkaSchemaRegistry.Disabled = types.BoolPointerValue(resp.InputMsk.KafkaSchemaRegistry.Disabled)
			r.InputMsk.KafkaSchemaRegistry.MaxRetries = types.Float64PointerValue(resp.InputMsk.KafkaSchemaRegistry.MaxRetries)
			r.InputMsk.KafkaSchemaRegistry.RequestTimeout = types.Float64PointerValue(resp.InputMsk.KafkaSchemaRegistry.RequestTimeout)
			r.InputMsk.KafkaSchemaRegistry.SchemaRegistryURL = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.SchemaRegistryURL)
			if resp.InputMsk.KafkaSchemaRegistry.TLS == nil {
				r.InputMsk.KafkaSchemaRegistry.TLS = nil
			} else {
				r.InputMsk.KafkaSchemaRegistry.TLS = &tfTypes.InputMskInputTLSSettingsClientSide{}
				r.InputMsk.KafkaSchemaRegistry.TLS.CaPath = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.CaPath)
				r.InputMsk.KafkaSchemaRegistry.TLS.CertificateName = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.CertificateName)
				r.InputMsk.KafkaSchemaRegistry.TLS.CertPath = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.CertPath)
				r.InputMsk.KafkaSchemaRegistry.TLS.Disabled = types.BoolPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.Disabled)
				if resp.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion != nil {
					r.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringValue(string(*resp.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion))
				} else {
					r.InputMsk.KafkaSchemaRegistry.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputMsk.KafkaSchemaRegistry.TLS.MinVersion != nil {
					r.InputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringValue(string(*resp.InputMsk.KafkaSchemaRegistry.TLS.MinVersion))
				} else {
					r.InputMsk.KafkaSchemaRegistry.TLS.MinVersion = types.StringNull()
				}
				r.InputMsk.KafkaSchemaRegistry.TLS.Passphrase = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.Passphrase)
				r.InputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.PrivKeyPath)
				r.InputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.RejectUnauthorized)
				r.InputMsk.KafkaSchemaRegistry.TLS.Servername = types.StringPointerValue(resp.InputMsk.KafkaSchemaRegistry.TLS.Servername)
			}
		}
		r.InputMsk.MaxBackOff = types.Float64PointerValue(resp.InputMsk.MaxBackOff)
		r.InputMsk.MaxBytes = types.Float64PointerValue(resp.InputMsk.MaxBytes)
		r.InputMsk.MaxBytesPerPartition = types.Float64PointerValue(resp.InputMsk.MaxBytesPerPartition)
		r.InputMsk.MaxRetries = types.Float64PointerValue(resp.InputMsk.MaxRetries)
		r.InputMsk.MaxSocketErrors = types.Float64PointerValue(resp.InputMsk.MaxSocketErrors)
		r.InputMsk.Metadata = []tfTypes.InputMskMetadata{}
		if len(r.InputMsk.Metadata) > len(resp.InputMsk.Metadata) {
			r.InputMsk.Metadata = r.InputMsk.Metadata[:len(resp.InputMsk.Metadata)]
		}
		for metadataCount33, metadataItem33 := range resp.InputMsk.Metadata {
			var metadata33 tfTypes.InputMskMetadata
			metadata33.Name = types.StringValue(metadataItem33.Name)
			metadata33.Value = types.StringValue(metadataItem33.Value)
			if metadataCount33+1 > len(r.InputMsk.Metadata) {
				r.InputMsk.Metadata = append(r.InputMsk.Metadata, metadata33)
			} else {
				r.InputMsk.Metadata[metadataCount33].Name = metadata33.Name
				r.InputMsk.Metadata[metadataCount33].Value = metadata33.Value
			}
		}
		r.InputMsk.Pipeline = types.StringPointerValue(resp.InputMsk.Pipeline)
		if resp.InputMsk.Pq == nil {
			r.InputMsk.Pq = nil
		} else {
			r.InputMsk.Pq = &tfTypes.InputMskPq{}
			r.InputMsk.Pq.CommitFrequency = types.Float64PointerValue(resp.InputMsk.Pq.CommitFrequency)
			if resp.InputMsk.Pq.Compress != nil {
				r.InputMsk.Pq.Compress = types.StringValue(string(*resp.InputMsk.Pq.Compress))
			} else {
				r.InputMsk.Pq.Compress = types.StringNull()
			}
			r.InputMsk.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputMsk.Pq.MaxBufferSize)
			r.InputMsk.Pq.MaxFileSize = types.StringPointerValue(resp.InputMsk.Pq.MaxFileSize)
			r.InputMsk.Pq.MaxSize = types.StringPointerValue(resp.InputMsk.Pq.MaxSize)
			if resp.InputMsk.Pq.Mode != nil {
				r.InputMsk.Pq.Mode = types.StringValue(string(*resp.InputMsk.Pq.Mode))
			} else {
				r.InputMsk.Pq.Mode = types.StringNull()
			}
			r.InputMsk.Pq.Path = types.StringPointerValue(resp.InputMsk.Pq.Path)
		}
		r.InputMsk.PqEnabled = types.BoolPointerValue(resp.InputMsk.PqEnabled)
		r.InputMsk.ReauthenticationThreshold = types.Float64PointerValue(resp.InputMsk.ReauthenticationThreshold)
		r.InputMsk.RebalanceTimeout = types.Float64PointerValue(resp.InputMsk.RebalanceTimeout)
		r.InputMsk.Region = types.StringValue(resp.InputMsk.Region)
		r.InputMsk.RejectUnauthorized = types.BoolPointerValue(resp.InputMsk.RejectUnauthorized)
		r.InputMsk.RequestTimeout = types.Float64PointerValue(resp.InputMsk.RequestTimeout)
		r.InputMsk.ReuseConnections = types.BoolPointerValue(resp.InputMsk.ReuseConnections)
		r.InputMsk.SendToRoutes = types.BoolPointerValue(resp.InputMsk.SendToRoutes)
		r.InputMsk.SessionTimeout = types.Float64PointerValue(resp.InputMsk.SessionTimeout)
		if resp.InputMsk.SignatureVersion != nil {
			r.InputMsk.SignatureVersion = types.StringValue(string(*resp.InputMsk.SignatureVersion))
		} else {
			r.InputMsk.SignatureVersion = types.StringNull()
		}
		if resp.InputMsk.Status == nil {
			r.InputMsk.Status = nil
		} else {
			r.InputMsk.Status = &tfTypes.TFStatus{}
			r.InputMsk.Status.Health = types.StringValue(string(resp.InputMsk.Status.Health))
			if len(resp.InputMsk.Status.Metrics) > 0 {
				r.InputMsk.Status.Metrics = make(map[string]types.String, len(resp.InputMsk.Status.Metrics))
				for key31, value31 := range resp.InputMsk.Status.Metrics {
					result31, _ := json.Marshal(value31)
					r.InputMsk.Status.Metrics[key31] = types.StringValue(string(result31))
				}
			}
			r.InputMsk.Status.Timestamp = types.Float64Value(resp.InputMsk.Status.Timestamp)
			r.InputMsk.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputMsk.Status.UseStatusFromLB)
		}
		r.InputMsk.Streamtags = make([]types.String, 0, len(resp.InputMsk.Streamtags))
		for _, v := range resp.InputMsk.Streamtags {
			r.InputMsk.Streamtags = append(r.InputMsk.Streamtags, types.StringValue(v))
		}
		if resp.InputMsk.TLS == nil {
			r.InputMsk.TLS = nil
		} else {
			r.InputMsk.TLS = &tfTypes.InputMskTLSSettingsClientSide{}
			r.InputMsk.TLS.CaPath = types.StringPointerValue(resp.InputMsk.TLS.CaPath)
			r.InputMsk.TLS.CertificateName = types.StringPointerValue(resp.InputMsk.TLS.CertificateName)
			r.InputMsk.TLS.CertPath = types.StringPointerValue(resp.InputMsk.TLS.CertPath)
			r.InputMsk.TLS.Disabled = types.BoolPointerValue(resp.InputMsk.TLS.Disabled)
			if resp.InputMsk.TLS.MaxVersion != nil {
				r.InputMsk.TLS.MaxVersion = types.StringValue(string(*resp.InputMsk.TLS.MaxVersion))
			} else {
				r.InputMsk.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputMsk.TLS.MinVersion != nil {
				r.InputMsk.TLS.MinVersion = types.StringValue(string(*resp.InputMsk.TLS.MinVersion))
			} else {
				r.InputMsk.TLS.MinVersion = types.StringNull()
			}
			r.InputMsk.TLS.Passphrase = types.StringPointerValue(resp.InputMsk.TLS.Passphrase)
			r.InputMsk.TLS.PrivKeyPath = types.StringPointerValue(resp.InputMsk.TLS.PrivKeyPath)
			r.InputMsk.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputMsk.TLS.RejectUnauthorized)
			r.InputMsk.TLS.Servername = types.StringPointerValue(resp.InputMsk.TLS.Servername)
		}
		r.InputMsk.Topics = make([]types.String, 0, len(resp.InputMsk.Topics))
		for _, v := range resp.InputMsk.Topics {
			r.InputMsk.Topics = append(r.InputMsk.Topics, types.StringValue(v))
		}
		if resp.InputMsk.Type != nil {
			r.InputMsk.Type = types.StringValue(string(*resp.InputMsk.Type))
		} else {
			r.InputMsk.Type = types.StringNull()
		}
	}
	if resp.InputNetflow != nil {
		r.InputNetflow = &tfTypes.InputNetflow{}
		r.InputNetflow.Connections = []tfTypes.InputNetflowConnections{}
		if len(r.InputNetflow.Connections) > len(resp.InputNetflow.Connections) {
			r.InputNetflow.Connections = r.InputNetflow.Connections[:len(resp.InputNetflow.Connections)]
		}
		for connectionsCount32, connectionsItem32 := range resp.InputNetflow.Connections {
			var connections32 tfTypes.InputNetflowConnections
			connections32.Output = types.StringValue(connectionsItem32.Output)
			connections32.Pipeline = types.StringPointerValue(connectionsItem32.Pipeline)
			if connectionsCount32+1 > len(r.InputNetflow.Connections) {
				r.InputNetflow.Connections = append(r.InputNetflow.Connections, connections32)
			} else {
				r.InputNetflow.Connections[connectionsCount32].Output = connections32.Output
				r.InputNetflow.Connections[connectionsCount32].Pipeline = connections32.Pipeline
			}
		}
		r.InputNetflow.Description = types.StringPointerValue(resp.InputNetflow.Description)
		r.InputNetflow.Disabled = types.BoolPointerValue(resp.InputNetflow.Disabled)
		r.InputNetflow.EnablePassThrough = types.BoolPointerValue(resp.InputNetflow.EnablePassThrough)
		r.InputNetflow.Environment = types.StringPointerValue(resp.InputNetflow.Environment)
		r.InputNetflow.Host = types.StringPointerValue(resp.InputNetflow.Host)
		r.InputNetflow.ID = types.StringPointerValue(resp.InputNetflow.ID)
		r.InputNetflow.IPAllowlistRegex = types.StringPointerValue(resp.InputNetflow.IPAllowlistRegex)
		r.InputNetflow.IPDenylistRegex = types.StringPointerValue(resp.InputNetflow.IPDenylistRegex)
		r.InputNetflow.IpfixEnabled = types.BoolPointerValue(resp.InputNetflow.IpfixEnabled)
		r.InputNetflow.Metadata = []tfTypes.InputNetflowMetadata{}
		if len(r.InputNetflow.Metadata) > len(resp.InputNetflow.Metadata) {
			r.InputNetflow.Metadata = r.InputNetflow.Metadata[:len(resp.InputNetflow.Metadata)]
		}
		for metadataCount34, metadataItem34 := range resp.InputNetflow.Metadata {
			var metadata34 tfTypes.InputNetflowMetadata
			metadata34.Name = types.StringValue(metadataItem34.Name)
			metadata34.Value = types.StringValue(metadataItem34.Value)
			if metadataCount34+1 > len(r.InputNetflow.Metadata) {
				r.InputNetflow.Metadata = append(r.InputNetflow.Metadata, metadata34)
			} else {
				r.InputNetflow.Metadata[metadataCount34].Name = metadata34.Name
				r.InputNetflow.Metadata[metadataCount34].Value = metadata34.Value
			}
		}
		r.InputNetflow.Pipeline = types.StringPointerValue(resp.InputNetflow.Pipeline)
		r.InputNetflow.Port = types.Float64PointerValue(resp.InputNetflow.Port)
		if resp.InputNetflow.Pq == nil {
			r.InputNetflow.Pq = nil
		} else {
			r.InputNetflow.Pq = &tfTypes.InputNetflowPq{}
			r.InputNetflow.Pq.CommitFrequency = types.Float64PointerValue(resp.InputNetflow.Pq.CommitFrequency)
			if resp.InputNetflow.Pq.Compress != nil {
				r.InputNetflow.Pq.Compress = types.StringValue(string(*resp.InputNetflow.Pq.Compress))
			} else {
				r.InputNetflow.Pq.Compress = types.StringNull()
			}
			r.InputNetflow.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputNetflow.Pq.MaxBufferSize)
			r.InputNetflow.Pq.MaxFileSize = types.StringPointerValue(resp.InputNetflow.Pq.MaxFileSize)
			r.InputNetflow.Pq.MaxSize = types.StringPointerValue(resp.InputNetflow.Pq.MaxSize)
			if resp.InputNetflow.Pq.Mode != nil {
				r.InputNetflow.Pq.Mode = types.StringValue(string(*resp.InputNetflow.Pq.Mode))
			} else {
				r.InputNetflow.Pq.Mode = types.StringNull()
			}
			r.InputNetflow.Pq.Path = types.StringPointerValue(resp.InputNetflow.Pq.Path)
		}
		r.InputNetflow.PqEnabled = types.BoolPointerValue(resp.InputNetflow.PqEnabled)
		r.InputNetflow.SendToRoutes = types.BoolPointerValue(resp.InputNetflow.SendToRoutes)
		if resp.InputNetflow.Status == nil {
			r.InputNetflow.Status = nil
		} else {
			r.InputNetflow.Status = &tfTypes.TFStatus{}
			r.InputNetflow.Status.Health = types.StringValue(string(resp.InputNetflow.Status.Health))
			if len(resp.InputNetflow.Status.Metrics) > 0 {
				r.InputNetflow.Status.Metrics = make(map[string]types.String, len(resp.InputNetflow.Status.Metrics))
				for key32, value32 := range resp.InputNetflow.Status.Metrics {
					result32, _ := json.Marshal(value32)
					r.InputNetflow.Status.Metrics[key32] = types.StringValue(string(result32))
				}
			}
			r.InputNetflow.Status.Timestamp = types.Float64Value(resp.InputNetflow.Status.Timestamp)
			r.InputNetflow.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputNetflow.Status.UseStatusFromLB)
		}
		r.InputNetflow.Streamtags = make([]types.String, 0, len(resp.InputNetflow.Streamtags))
		for _, v := range resp.InputNetflow.Streamtags {
			r.InputNetflow.Streamtags = append(r.InputNetflow.Streamtags, types.StringValue(v))
		}
		r.InputNetflow.TemplateCacheMinutes = types.Float64PointerValue(resp.InputNetflow.TemplateCacheMinutes)
		if resp.InputNetflow.Type != nil {
			r.InputNetflow.Type = types.StringValue(string(*resp.InputNetflow.Type))
		} else {
			r.InputNetflow.Type = types.StringNull()
		}
		r.InputNetflow.UDPSocketRxBufSize = types.Float64PointerValue(resp.InputNetflow.UDPSocketRxBufSize)
		r.InputNetflow.V5Enabled = types.BoolPointerValue(resp.InputNetflow.V5Enabled)
		r.InputNetflow.V9Enabled = types.BoolPointerValue(resp.InputNetflow.V9Enabled)
	}
	if resp.InputOffice365Mgmt != nil {
		r.InputOffice365Mgmt = &tfTypes.InputOffice365Mgmt{}
		r.InputOffice365Mgmt.AppID = types.StringValue(resp.InputOffice365Mgmt.AppID)
		if resp.InputOffice365Mgmt.AuthType != nil {
			r.InputOffice365Mgmt.AuthType = types.StringValue(string(*resp.InputOffice365Mgmt.AuthType))
		} else {
			r.InputOffice365Mgmt.AuthType = types.StringNull()
		}
		r.InputOffice365Mgmt.ClientSecret = types.StringPointerValue(resp.InputOffice365Mgmt.ClientSecret)
		r.InputOffice365Mgmt.Connections = []tfTypes.InputOffice365MgmtConnections{}
		if len(r.InputOffice365Mgmt.Connections) > len(resp.InputOffice365Mgmt.Connections) {
			r.InputOffice365Mgmt.Connections = r.InputOffice365Mgmt.Connections[:len(resp.InputOffice365Mgmt.Connections)]
		}
		for connectionsCount33, connectionsItem33 := range resp.InputOffice365Mgmt.Connections {
			var connections33 tfTypes.InputOffice365MgmtConnections
			connections33.Output = types.StringValue(connectionsItem33.Output)
			connections33.Pipeline = types.StringPointerValue(connectionsItem33.Pipeline)
			if connectionsCount33+1 > len(r.InputOffice365Mgmt.Connections) {
				r.InputOffice365Mgmt.Connections = append(r.InputOffice365Mgmt.Connections, connections33)
			} else {
				r.InputOffice365Mgmt.Connections[connectionsCount33].Output = connections33.Output
				r.InputOffice365Mgmt.Connections[connectionsCount33].Pipeline = connections33.Pipeline
			}
		}
		r.InputOffice365Mgmt.ContentConfig = []tfTypes.ContentConfig{}
		if len(r.InputOffice365Mgmt.ContentConfig) > len(resp.InputOffice365Mgmt.ContentConfig) {
			r.InputOffice365Mgmt.ContentConfig = r.InputOffice365Mgmt.ContentConfig[:len(resp.InputOffice365Mgmt.ContentConfig)]
		}
		for contentConfigCount, contentConfigItem := range resp.InputOffice365Mgmt.ContentConfig {
			var contentConfig tfTypes.ContentConfig
			contentConfig.ContentType = types.StringPointerValue(contentConfigItem.ContentType)
			contentConfig.Description = types.StringPointerValue(contentConfigItem.Description)
			contentConfig.Enabled = types.BoolPointerValue(contentConfigItem.Enabled)
			contentConfig.Interval = types.Float64PointerValue(contentConfigItem.Interval)
			if contentConfigItem.LogLevel != nil {
				contentConfig.LogLevel = types.StringValue(string(*contentConfigItem.LogLevel))
			} else {
				contentConfig.LogLevel = types.StringNull()
			}
			if contentConfigCount+1 > len(r.InputOffice365Mgmt.ContentConfig) {
				r.InputOffice365Mgmt.ContentConfig = append(r.InputOffice365Mgmt.ContentConfig, contentConfig)
			} else {
				r.InputOffice365Mgmt.ContentConfig[contentConfigCount].ContentType = contentConfig.ContentType
				r.InputOffice365Mgmt.ContentConfig[contentConfigCount].Description = contentConfig.Description
				r.InputOffice365Mgmt.ContentConfig[contentConfigCount].Enabled = contentConfig.Enabled
				r.InputOffice365Mgmt.ContentConfig[contentConfigCount].Interval = contentConfig.Interval
				r.InputOffice365Mgmt.ContentConfig[contentConfigCount].LogLevel = contentConfig.LogLevel
			}
		}
		r.InputOffice365Mgmt.Description = types.StringPointerValue(resp.InputOffice365Mgmt.Description)
		r.InputOffice365Mgmt.Disabled = types.BoolPointerValue(resp.InputOffice365Mgmt.Disabled)
		r.InputOffice365Mgmt.Environment = types.StringPointerValue(resp.InputOffice365Mgmt.Environment)
		r.InputOffice365Mgmt.ID = types.StringPointerValue(resp.InputOffice365Mgmt.ID)
		r.InputOffice365Mgmt.IngestionLag = types.Float64PointerValue(resp.InputOffice365Mgmt.IngestionLag)
		r.InputOffice365Mgmt.JobTimeout = types.StringPointerValue(resp.InputOffice365Mgmt.JobTimeout)
		r.InputOffice365Mgmt.KeepAliveTime = types.Float64PointerValue(resp.InputOffice365Mgmt.KeepAliveTime)
		r.InputOffice365Mgmt.MaxMissedKeepAlives = types.Float64PointerValue(resp.InputOffice365Mgmt.MaxMissedKeepAlives)
		r.InputOffice365Mgmt.Metadata = []tfTypes.InputOffice365MgmtMetadata{}
		if len(r.InputOffice365Mgmt.Metadata) > len(resp.InputOffice365Mgmt.Metadata) {
			r.InputOffice365Mgmt.Metadata = r.InputOffice365Mgmt.Metadata[:len(resp.InputOffice365Mgmt.Metadata)]
		}
		for metadataCount35, metadataItem35 := range resp.InputOffice365Mgmt.Metadata {
			var metadata35 tfTypes.InputOffice365MgmtMetadata
			metadata35.Name = types.StringValue(metadataItem35.Name)
			metadata35.Value = types.StringValue(metadataItem35.Value)
			if metadataCount35+1 > len(r.InputOffice365Mgmt.Metadata) {
				r.InputOffice365Mgmt.Metadata = append(r.InputOffice365Mgmt.Metadata, metadata35)
			} else {
				r.InputOffice365Mgmt.Metadata[metadataCount35].Name = metadata35.Name
				r.InputOffice365Mgmt.Metadata[metadataCount35].Value = metadata35.Value
			}
		}
		r.InputOffice365Mgmt.Pipeline = types.StringPointerValue(resp.InputOffice365Mgmt.Pipeline)
		if resp.InputOffice365Mgmt.PlanType != nil {
			r.InputOffice365Mgmt.PlanType = types.StringValue(string(*resp.InputOffice365Mgmt.PlanType))
		} else {
			r.InputOffice365Mgmt.PlanType = types.StringNull()
		}
		if resp.InputOffice365Mgmt.Pq == nil {
			r.InputOffice365Mgmt.Pq = nil
		} else {
			r.InputOffice365Mgmt.Pq = &tfTypes.InputOffice365MgmtPq{}
			r.InputOffice365Mgmt.Pq.CommitFrequency = types.Float64PointerValue(resp.InputOffice365Mgmt.Pq.CommitFrequency)
			if resp.InputOffice365Mgmt.Pq.Compress != nil {
				r.InputOffice365Mgmt.Pq.Compress = types.StringValue(string(*resp.InputOffice365Mgmt.Pq.Compress))
			} else {
				r.InputOffice365Mgmt.Pq.Compress = types.StringNull()
			}
			r.InputOffice365Mgmt.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputOffice365Mgmt.Pq.MaxBufferSize)
			r.InputOffice365Mgmt.Pq.MaxFileSize = types.StringPointerValue(resp.InputOffice365Mgmt.Pq.MaxFileSize)
			r.InputOffice365Mgmt.Pq.MaxSize = types.StringPointerValue(resp.InputOffice365Mgmt.Pq.MaxSize)
			if resp.InputOffice365Mgmt.Pq.Mode != nil {
				r.InputOffice365Mgmt.Pq.Mode = types.StringValue(string(*resp.InputOffice365Mgmt.Pq.Mode))
			} else {
				r.InputOffice365Mgmt.Pq.Mode = types.StringNull()
			}
			r.InputOffice365Mgmt.Pq.Path = types.StringPointerValue(resp.InputOffice365Mgmt.Pq.Path)
		}
		r.InputOffice365Mgmt.PqEnabled = types.BoolPointerValue(resp.InputOffice365Mgmt.PqEnabled)
		r.InputOffice365Mgmt.PublisherIdentifier = types.StringPointerValue(resp.InputOffice365Mgmt.PublisherIdentifier)
		if resp.InputOffice365Mgmt.RetryRules == nil {
			r.InputOffice365Mgmt.RetryRules = nil
		} else {
			r.InputOffice365Mgmt.RetryRules = &tfTypes.InputOffice365MgmtRetryRules{}
			r.InputOffice365Mgmt.RetryRules.Codes = make([]types.Float64, 0, len(resp.InputOffice365Mgmt.RetryRules.Codes))
			for _, v := range resp.InputOffice365Mgmt.RetryRules.Codes {
				r.InputOffice365Mgmt.RetryRules.Codes = append(r.InputOffice365Mgmt.RetryRules.Codes, types.Float64Value(v))
			}
			r.InputOffice365Mgmt.RetryRules.EnableHeader = types.BoolPointerValue(resp.InputOffice365Mgmt.RetryRules.EnableHeader)
			r.InputOffice365Mgmt.RetryRules.Interval = types.Float64PointerValue(resp.InputOffice365Mgmt.RetryRules.Interval)
			r.InputOffice365Mgmt.RetryRules.Limit = types.Float64PointerValue(resp.InputOffice365Mgmt.RetryRules.Limit)
			r.InputOffice365Mgmt.RetryRules.Multiplier = types.Float64PointerValue(resp.InputOffice365Mgmt.RetryRules.Multiplier)
			r.InputOffice365Mgmt.RetryRules.RetryConnectReset = types.BoolPointerValue(resp.InputOffice365Mgmt.RetryRules.RetryConnectReset)
			r.InputOffice365Mgmt.RetryRules.RetryConnectTimeout = types.BoolPointerValue(resp.InputOffice365Mgmt.RetryRules.RetryConnectTimeout)
			if resp.InputOffice365Mgmt.RetryRules.Type != nil {
				r.InputOffice365Mgmt.RetryRules.Type = types.StringValue(string(*resp.InputOffice365Mgmt.RetryRules.Type))
			} else {
				r.InputOffice365Mgmt.RetryRules.Type = types.StringNull()
			}
		}
		r.InputOffice365Mgmt.SendToRoutes = types.BoolPointerValue(resp.InputOffice365Mgmt.SendToRoutes)
		if resp.InputOffice365Mgmt.Status == nil {
			r.InputOffice365Mgmt.Status = nil
		} else {
			r.InputOffice365Mgmt.Status = &tfTypes.TFStatus{}
			r.InputOffice365Mgmt.Status.Health = types.StringValue(string(resp.InputOffice365Mgmt.Status.Health))
			if len(resp.InputOffice365Mgmt.Status.Metrics) > 0 {
				r.InputOffice365Mgmt.Status.Metrics = make(map[string]types.String, len(resp.InputOffice365Mgmt.Status.Metrics))
				for key33, value33 := range resp.InputOffice365Mgmt.Status.Metrics {
					result33, _ := json.Marshal(value33)
					r.InputOffice365Mgmt.Status.Metrics[key33] = types.StringValue(string(result33))
				}
			}
			r.InputOffice365Mgmt.Status.Timestamp = types.Float64Value(resp.InputOffice365Mgmt.Status.Timestamp)
			r.InputOffice365Mgmt.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputOffice365Mgmt.Status.UseStatusFromLB)
		}
		r.InputOffice365Mgmt.Streamtags = make([]types.String, 0, len(resp.InputOffice365Mgmt.Streamtags))
		for _, v := range resp.InputOffice365Mgmt.Streamtags {
			r.InputOffice365Mgmt.Streamtags = append(r.InputOffice365Mgmt.Streamtags, types.StringValue(v))
		}
		r.InputOffice365Mgmt.TenantID = types.StringValue(resp.InputOffice365Mgmt.TenantID)
		r.InputOffice365Mgmt.TextSecret = types.StringPointerValue(resp.InputOffice365Mgmt.TextSecret)
		r.InputOffice365Mgmt.Timeout = types.Float64PointerValue(resp.InputOffice365Mgmt.Timeout)
		r.InputOffice365Mgmt.TTL = types.StringPointerValue(resp.InputOffice365Mgmt.TTL)
		if resp.InputOffice365Mgmt.Type != nil {
			r.InputOffice365Mgmt.Type = types.StringValue(string(*resp.InputOffice365Mgmt.Type))
		} else {
			r.InputOffice365Mgmt.Type = types.StringNull()
		}
	}
	if resp.InputOffice365MsgTrace != nil {
		r.InputOffice365MsgTrace = &tfTypes.InputOffice365MsgTrace{}
		if resp.InputOffice365MsgTrace.AuthType != nil {
			r.InputOffice365MsgTrace.AuthType = types.StringValue(string(*resp.InputOffice365MsgTrace.AuthType))
		} else {
			r.InputOffice365MsgTrace.AuthType = types.StringNull()
		}
		if resp.InputOffice365MsgTrace.CertOptions == nil {
			r.InputOffice365MsgTrace.CertOptions = nil
		} else {
			r.InputOffice365MsgTrace.CertOptions = &tfTypes.CertOptions{}
			r.InputOffice365MsgTrace.CertOptions.CertificateName = types.StringPointerValue(resp.InputOffice365MsgTrace.CertOptions.CertificateName)
			r.InputOffice365MsgTrace.CertOptions.CertPath = types.StringValue(resp.InputOffice365MsgTrace.CertOptions.CertPath)
			r.InputOffice365MsgTrace.CertOptions.Passphrase = types.StringPointerValue(resp.InputOffice365MsgTrace.CertOptions.Passphrase)
			r.InputOffice365MsgTrace.CertOptions.PrivKeyPath = types.StringValue(resp.InputOffice365MsgTrace.CertOptions.PrivKeyPath)
		}
		r.InputOffice365MsgTrace.ClientID = types.StringPointerValue(resp.InputOffice365MsgTrace.ClientID)
		r.InputOffice365MsgTrace.ClientSecret = types.StringPointerValue(resp.InputOffice365MsgTrace.ClientSecret)
		r.InputOffice365MsgTrace.Connections = []tfTypes.InputOffice365MsgTraceConnections{}
		if len(r.InputOffice365MsgTrace.Connections) > len(resp.InputOffice365MsgTrace.Connections) {
			r.InputOffice365MsgTrace.Connections = r.InputOffice365MsgTrace.Connections[:len(resp.InputOffice365MsgTrace.Connections)]
		}
		for connectionsCount34, connectionsItem34 := range resp.InputOffice365MsgTrace.Connections {
			var connections34 tfTypes.InputOffice365MsgTraceConnections
			connections34.Output = types.StringValue(connectionsItem34.Output)
			connections34.Pipeline = types.StringPointerValue(connectionsItem34.Pipeline)
			if connectionsCount34+1 > len(r.InputOffice365MsgTrace.Connections) {
				r.InputOffice365MsgTrace.Connections = append(r.InputOffice365MsgTrace.Connections, connections34)
			} else {
				r.InputOffice365MsgTrace.Connections[connectionsCount34].Output = connections34.Output
				r.InputOffice365MsgTrace.Connections[connectionsCount34].Pipeline = connections34.Pipeline
			}
		}
		r.InputOffice365MsgTrace.CredentialsSecret = types.StringPointerValue(resp.InputOffice365MsgTrace.CredentialsSecret)
		r.InputOffice365MsgTrace.Description = types.StringPointerValue(resp.InputOffice365MsgTrace.Description)
		r.InputOffice365MsgTrace.Disabled = types.BoolPointerValue(resp.InputOffice365MsgTrace.Disabled)
		r.InputOffice365MsgTrace.DisableTimeFilter = types.BoolPointerValue(resp.InputOffice365MsgTrace.DisableTimeFilter)
		r.InputOffice365MsgTrace.EndDate = types.StringPointerValue(resp.InputOffice365MsgTrace.EndDate)
		r.InputOffice365MsgTrace.Environment = types.StringPointerValue(resp.InputOffice365MsgTrace.Environment)
		r.InputOffice365MsgTrace.ID = types.StringPointerValue(resp.InputOffice365MsgTrace.ID)
		r.InputOffice365MsgTrace.Interval = types.Float64PointerValue(resp.InputOffice365MsgTrace.Interval)
		r.InputOffice365MsgTrace.JobTimeout = types.StringPointerValue(resp.InputOffice365MsgTrace.JobTimeout)
		r.InputOffice365MsgTrace.KeepAliveTime = types.Float64PointerValue(resp.InputOffice365MsgTrace.KeepAliveTime)
		if resp.InputOffice365MsgTrace.LogLevel != nil {
			r.InputOffice365MsgTrace.LogLevel = types.StringValue(string(*resp.InputOffice365MsgTrace.LogLevel))
		} else {
			r.InputOffice365MsgTrace.LogLevel = types.StringNull()
		}
		r.InputOffice365MsgTrace.MaxMissedKeepAlives = types.Float64PointerValue(resp.InputOffice365MsgTrace.MaxMissedKeepAlives)
		r.InputOffice365MsgTrace.MaxTaskReschedule = types.Float64PointerValue(resp.InputOffice365MsgTrace.MaxTaskReschedule)
		r.InputOffice365MsgTrace.Metadata = []tfTypes.InputOffice365MsgTraceMetadata{}
		if len(r.InputOffice365MsgTrace.Metadata) > len(resp.InputOffice365MsgTrace.Metadata) {
			r.InputOffice365MsgTrace.Metadata = r.InputOffice365MsgTrace.Metadata[:len(resp.InputOffice365MsgTrace.Metadata)]
		}
		for metadataCount36, metadataItem36 := range resp.InputOffice365MsgTrace.Metadata {
			var metadata36 tfTypes.InputOffice365MsgTraceMetadata
			metadata36.Name = types.StringValue(metadataItem36.Name)
			metadata36.Value = types.StringValue(metadataItem36.Value)
			if metadataCount36+1 > len(r.InputOffice365MsgTrace.Metadata) {
				r.InputOffice365MsgTrace.Metadata = append(r.InputOffice365MsgTrace.Metadata, metadata36)
			} else {
				r.InputOffice365MsgTrace.Metadata[metadataCount36].Name = metadata36.Name
				r.InputOffice365MsgTrace.Metadata[metadataCount36].Value = metadata36.Value
			}
		}
		r.InputOffice365MsgTrace.Password = types.StringPointerValue(resp.InputOffice365MsgTrace.Password)
		r.InputOffice365MsgTrace.Pipeline = types.StringPointerValue(resp.InputOffice365MsgTrace.Pipeline)
		if resp.InputOffice365MsgTrace.PlanType != nil {
			r.InputOffice365MsgTrace.PlanType = types.StringValue(string(*resp.InputOffice365MsgTrace.PlanType))
		} else {
			r.InputOffice365MsgTrace.PlanType = types.StringNull()
		}
		if resp.InputOffice365MsgTrace.Pq == nil {
			r.InputOffice365MsgTrace.Pq = nil
		} else {
			r.InputOffice365MsgTrace.Pq = &tfTypes.InputOffice365MsgTracePq{}
			r.InputOffice365MsgTrace.Pq.CommitFrequency = types.Float64PointerValue(resp.InputOffice365MsgTrace.Pq.CommitFrequency)
			if resp.InputOffice365MsgTrace.Pq.Compress != nil {
				r.InputOffice365MsgTrace.Pq.Compress = types.StringValue(string(*resp.InputOffice365MsgTrace.Pq.Compress))
			} else {
				r.InputOffice365MsgTrace.Pq.Compress = types.StringNull()
			}
			r.InputOffice365MsgTrace.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputOffice365MsgTrace.Pq.MaxBufferSize)
			r.InputOffice365MsgTrace.Pq.MaxFileSize = types.StringPointerValue(resp.InputOffice365MsgTrace.Pq.MaxFileSize)
			r.InputOffice365MsgTrace.Pq.MaxSize = types.StringPointerValue(resp.InputOffice365MsgTrace.Pq.MaxSize)
			if resp.InputOffice365MsgTrace.Pq.Mode != nil {
				r.InputOffice365MsgTrace.Pq.Mode = types.StringValue(string(*resp.InputOffice365MsgTrace.Pq.Mode))
			} else {
				r.InputOffice365MsgTrace.Pq.Mode = types.StringNull()
			}
			r.InputOffice365MsgTrace.Pq.Path = types.StringPointerValue(resp.InputOffice365MsgTrace.Pq.Path)
		}
		r.InputOffice365MsgTrace.PqEnabled = types.BoolPointerValue(resp.InputOffice365MsgTrace.PqEnabled)
		r.InputOffice365MsgTrace.RescheduleDroppedTasks = types.BoolPointerValue(resp.InputOffice365MsgTrace.RescheduleDroppedTasks)
		r.InputOffice365MsgTrace.Resource = types.StringPointerValue(resp.InputOffice365MsgTrace.Resource)
		if resp.InputOffice365MsgTrace.RetryRules == nil {
			r.InputOffice365MsgTrace.RetryRules = nil
		} else {
			r.InputOffice365MsgTrace.RetryRules = &tfTypes.InputOffice365MsgTraceRetryRules{}
			r.InputOffice365MsgTrace.RetryRules.Codes = make([]types.Float64, 0, len(resp.InputOffice365MsgTrace.RetryRules.Codes))
			for _, v := range resp.InputOffice365MsgTrace.RetryRules.Codes {
				r.InputOffice365MsgTrace.RetryRules.Codes = append(r.InputOffice365MsgTrace.RetryRules.Codes, types.Float64Value(v))
			}
			r.InputOffice365MsgTrace.RetryRules.EnableHeader = types.BoolPointerValue(resp.InputOffice365MsgTrace.RetryRules.EnableHeader)
			r.InputOffice365MsgTrace.RetryRules.Interval = types.Float64PointerValue(resp.InputOffice365MsgTrace.RetryRules.Interval)
			r.InputOffice365MsgTrace.RetryRules.Limit = types.Float64PointerValue(resp.InputOffice365MsgTrace.RetryRules.Limit)
			r.InputOffice365MsgTrace.RetryRules.Multiplier = types.Float64PointerValue(resp.InputOffice365MsgTrace.RetryRules.Multiplier)
			r.InputOffice365MsgTrace.RetryRules.RetryConnectReset = types.BoolPointerValue(resp.InputOffice365MsgTrace.RetryRules.RetryConnectReset)
			r.InputOffice365MsgTrace.RetryRules.RetryConnectTimeout = types.BoolPointerValue(resp.InputOffice365MsgTrace.RetryRules.RetryConnectTimeout)
			if resp.InputOffice365MsgTrace.RetryRules.Type != nil {
				r.InputOffice365MsgTrace.RetryRules.Type = types.StringValue(string(*resp.InputOffice365MsgTrace.RetryRules.Type))
			} else {
				r.InputOffice365MsgTrace.RetryRules.Type = types.StringNull()
			}
		}
		r.InputOffice365MsgTrace.SendToRoutes = types.BoolPointerValue(resp.InputOffice365MsgTrace.SendToRoutes)
		r.InputOffice365MsgTrace.StartDate = types.StringPointerValue(resp.InputOffice365MsgTrace.StartDate)
		if resp.InputOffice365MsgTrace.Status == nil {
			r.InputOffice365MsgTrace.Status = nil
		} else {
			r.InputOffice365MsgTrace.Status = &tfTypes.TFStatus{}
			r.InputOffice365MsgTrace.Status.Health = types.StringValue(string(resp.InputOffice365MsgTrace.Status.Health))
			if len(resp.InputOffice365MsgTrace.Status.Metrics) > 0 {
				r.InputOffice365MsgTrace.Status.Metrics = make(map[string]types.String, len(resp.InputOffice365MsgTrace.Status.Metrics))
				for key34, value34 := range resp.InputOffice365MsgTrace.Status.Metrics {
					result34, _ := json.Marshal(value34)
					r.InputOffice365MsgTrace.Status.Metrics[key34] = types.StringValue(string(result34))
				}
			}
			r.InputOffice365MsgTrace.Status.Timestamp = types.Float64Value(resp.InputOffice365MsgTrace.Status.Timestamp)
			r.InputOffice365MsgTrace.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputOffice365MsgTrace.Status.UseStatusFromLB)
		}
		r.InputOffice365MsgTrace.Streamtags = make([]types.String, 0, len(resp.InputOffice365MsgTrace.Streamtags))
		for _, v := range resp.InputOffice365MsgTrace.Streamtags {
			r.InputOffice365MsgTrace.Streamtags = append(r.InputOffice365MsgTrace.Streamtags, types.StringValue(v))
		}
		r.InputOffice365MsgTrace.TenantID = types.StringPointerValue(resp.InputOffice365MsgTrace.TenantID)
		r.InputOffice365MsgTrace.TextSecret = types.StringPointerValue(resp.InputOffice365MsgTrace.TextSecret)
		r.InputOffice365MsgTrace.Timeout = types.Float64PointerValue(resp.InputOffice365MsgTrace.Timeout)
		r.InputOffice365MsgTrace.TTL = types.StringPointerValue(resp.InputOffice365MsgTrace.TTL)
		if resp.InputOffice365MsgTrace.Type != nil {
			r.InputOffice365MsgTrace.Type = types.StringValue(string(*resp.InputOffice365MsgTrace.Type))
		} else {
			r.InputOffice365MsgTrace.Type = types.StringNull()
		}
		r.InputOffice365MsgTrace.URL = types.StringPointerValue(resp.InputOffice365MsgTrace.URL)
		r.InputOffice365MsgTrace.Username = types.StringPointerValue(resp.InputOffice365MsgTrace.Username)
	}
	if resp.InputOffice365Service != nil {
		r.InputOffice365Service = &tfTypes.InputOffice365Service{}
		r.InputOffice365Service.AppID = types.StringValue(resp.InputOffice365Service.AppID)
		if resp.InputOffice365Service.AuthType != nil {
			r.InputOffice365Service.AuthType = types.StringValue(string(*resp.InputOffice365Service.AuthType))
		} else {
			r.InputOffice365Service.AuthType = types.StringNull()
		}
		r.InputOffice365Service.ClientSecret = types.StringPointerValue(resp.InputOffice365Service.ClientSecret)
		r.InputOffice365Service.Connections = []tfTypes.InputOffice365ServiceConnections{}
		if len(r.InputOffice365Service.Connections) > len(resp.InputOffice365Service.Connections) {
			r.InputOffice365Service.Connections = r.InputOffice365Service.Connections[:len(resp.InputOffice365Service.Connections)]
		}
		for connectionsCount35, connectionsItem35 := range resp.InputOffice365Service.Connections {
			var connections35 tfTypes.InputOffice365ServiceConnections
			connections35.Output = types.StringValue(connectionsItem35.Output)
			connections35.Pipeline = types.StringPointerValue(connectionsItem35.Pipeline)
			if connectionsCount35+1 > len(r.InputOffice365Service.Connections) {
				r.InputOffice365Service.Connections = append(r.InputOffice365Service.Connections, connections35)
			} else {
				r.InputOffice365Service.Connections[connectionsCount35].Output = connections35.Output
				r.InputOffice365Service.Connections[connectionsCount35].Pipeline = connections35.Pipeline
			}
		}
		r.InputOffice365Service.ContentConfig = []tfTypes.InputOffice365ServiceContentConfig{}
		if len(r.InputOffice365Service.ContentConfig) > len(resp.InputOffice365Service.ContentConfig) {
			r.InputOffice365Service.ContentConfig = r.InputOffice365Service.ContentConfig[:len(resp.InputOffice365Service.ContentConfig)]
		}
		for contentConfigCount1, contentConfigItem1 := range resp.InputOffice365Service.ContentConfig {
			var contentConfig1 tfTypes.InputOffice365ServiceContentConfig
			contentConfig1.ContentType = types.StringPointerValue(contentConfigItem1.ContentType)
			contentConfig1.Description = types.StringPointerValue(contentConfigItem1.Description)
			contentConfig1.Enabled = types.BoolPointerValue(contentConfigItem1.Enabled)
			contentConfig1.Interval = types.Float64PointerValue(contentConfigItem1.Interval)
			if contentConfigItem1.LogLevel != nil {
				contentConfig1.LogLevel = types.StringValue(string(*contentConfigItem1.LogLevel))
			} else {
				contentConfig1.LogLevel = types.StringNull()
			}
			if contentConfigCount1+1 > len(r.InputOffice365Service.ContentConfig) {
				r.InputOffice365Service.ContentConfig = append(r.InputOffice365Service.ContentConfig, contentConfig1)
			} else {
				r.InputOffice365Service.ContentConfig[contentConfigCount1].ContentType = contentConfig1.ContentType
				r.InputOffice365Service.ContentConfig[contentConfigCount1].Description = contentConfig1.Description
				r.InputOffice365Service.ContentConfig[contentConfigCount1].Enabled = contentConfig1.Enabled
				r.InputOffice365Service.ContentConfig[contentConfigCount1].Interval = contentConfig1.Interval
				r.InputOffice365Service.ContentConfig[contentConfigCount1].LogLevel = contentConfig1.LogLevel
			}
		}
		r.InputOffice365Service.Description = types.StringPointerValue(resp.InputOffice365Service.Description)
		r.InputOffice365Service.Disabled = types.BoolPointerValue(resp.InputOffice365Service.Disabled)
		r.InputOffice365Service.Environment = types.StringPointerValue(resp.InputOffice365Service.Environment)
		r.InputOffice365Service.ID = types.StringPointerValue(resp.InputOffice365Service.ID)
		r.InputOffice365Service.JobTimeout = types.StringPointerValue(resp.InputOffice365Service.JobTimeout)
		r.InputOffice365Service.KeepAliveTime = types.Float64PointerValue(resp.InputOffice365Service.KeepAliveTime)
		r.InputOffice365Service.MaxMissedKeepAlives = types.Float64PointerValue(resp.InputOffice365Service.MaxMissedKeepAlives)
		r.InputOffice365Service.Metadata = []tfTypes.InputOffice365ServiceMetadata{}
		if len(r.InputOffice365Service.Metadata) > len(resp.InputOffice365Service.Metadata) {
			r.InputOffice365Service.Metadata = r.InputOffice365Service.Metadata[:len(resp.InputOffice365Service.Metadata)]
		}
		for metadataCount37, metadataItem37 := range resp.InputOffice365Service.Metadata {
			var metadata37 tfTypes.InputOffice365ServiceMetadata
			metadata37.Name = types.StringValue(metadataItem37.Name)
			metadata37.Value = types.StringValue(metadataItem37.Value)
			if metadataCount37+1 > len(r.InputOffice365Service.Metadata) {
				r.InputOffice365Service.Metadata = append(r.InputOffice365Service.Metadata, metadata37)
			} else {
				r.InputOffice365Service.Metadata[metadataCount37].Name = metadata37.Name
				r.InputOffice365Service.Metadata[metadataCount37].Value = metadata37.Value
			}
		}
		r.InputOffice365Service.Pipeline = types.StringPointerValue(resp.InputOffice365Service.Pipeline)
		if resp.InputOffice365Service.PlanType != nil {
			r.InputOffice365Service.PlanType = types.StringValue(string(*resp.InputOffice365Service.PlanType))
		} else {
			r.InputOffice365Service.PlanType = types.StringNull()
		}
		if resp.InputOffice365Service.Pq == nil {
			r.InputOffice365Service.Pq = nil
		} else {
			r.InputOffice365Service.Pq = &tfTypes.InputOffice365ServicePq{}
			r.InputOffice365Service.Pq.CommitFrequency = types.Float64PointerValue(resp.InputOffice365Service.Pq.CommitFrequency)
			if resp.InputOffice365Service.Pq.Compress != nil {
				r.InputOffice365Service.Pq.Compress = types.StringValue(string(*resp.InputOffice365Service.Pq.Compress))
			} else {
				r.InputOffice365Service.Pq.Compress = types.StringNull()
			}
			r.InputOffice365Service.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputOffice365Service.Pq.MaxBufferSize)
			r.InputOffice365Service.Pq.MaxFileSize = types.StringPointerValue(resp.InputOffice365Service.Pq.MaxFileSize)
			r.InputOffice365Service.Pq.MaxSize = types.StringPointerValue(resp.InputOffice365Service.Pq.MaxSize)
			if resp.InputOffice365Service.Pq.Mode != nil {
				r.InputOffice365Service.Pq.Mode = types.StringValue(string(*resp.InputOffice365Service.Pq.Mode))
			} else {
				r.InputOffice365Service.Pq.Mode = types.StringNull()
			}
			r.InputOffice365Service.Pq.Path = types.StringPointerValue(resp.InputOffice365Service.Pq.Path)
		}
		r.InputOffice365Service.PqEnabled = types.BoolPointerValue(resp.InputOffice365Service.PqEnabled)
		if resp.InputOffice365Service.RetryRules == nil {
			r.InputOffice365Service.RetryRules = nil
		} else {
			r.InputOffice365Service.RetryRules = &tfTypes.InputOffice365ServiceRetryRules{}
			r.InputOffice365Service.RetryRules.Codes = make([]types.Float64, 0, len(resp.InputOffice365Service.RetryRules.Codes))
			for _, v := range resp.InputOffice365Service.RetryRules.Codes {
				r.InputOffice365Service.RetryRules.Codes = append(r.InputOffice365Service.RetryRules.Codes, types.Float64Value(v))
			}
			r.InputOffice365Service.RetryRules.EnableHeader = types.BoolPointerValue(resp.InputOffice365Service.RetryRules.EnableHeader)
			r.InputOffice365Service.RetryRules.Interval = types.Float64PointerValue(resp.InputOffice365Service.RetryRules.Interval)
			r.InputOffice365Service.RetryRules.Limit = types.Float64PointerValue(resp.InputOffice365Service.RetryRules.Limit)
			r.InputOffice365Service.RetryRules.Multiplier = types.Float64PointerValue(resp.InputOffice365Service.RetryRules.Multiplier)
			r.InputOffice365Service.RetryRules.RetryConnectReset = types.BoolPointerValue(resp.InputOffice365Service.RetryRules.RetryConnectReset)
			r.InputOffice365Service.RetryRules.RetryConnectTimeout = types.BoolPointerValue(resp.InputOffice365Service.RetryRules.RetryConnectTimeout)
			if resp.InputOffice365Service.RetryRules.Type != nil {
				r.InputOffice365Service.RetryRules.Type = types.StringValue(string(*resp.InputOffice365Service.RetryRules.Type))
			} else {
				r.InputOffice365Service.RetryRules.Type = types.StringNull()
			}
		}
		r.InputOffice365Service.SendToRoutes = types.BoolPointerValue(resp.InputOffice365Service.SendToRoutes)
		if resp.InputOffice365Service.Status == nil {
			r.InputOffice365Service.Status = nil
		} else {
			r.InputOffice365Service.Status = &tfTypes.TFStatus{}
			r.InputOffice365Service.Status.Health = types.StringValue(string(resp.InputOffice365Service.Status.Health))
			if len(resp.InputOffice365Service.Status.Metrics) > 0 {
				r.InputOffice365Service.Status.Metrics = make(map[string]types.String, len(resp.InputOffice365Service.Status.Metrics))
				for key35, value35 := range resp.InputOffice365Service.Status.Metrics {
					result35, _ := json.Marshal(value35)
					r.InputOffice365Service.Status.Metrics[key35] = types.StringValue(string(result35))
				}
			}
			r.InputOffice365Service.Status.Timestamp = types.Float64Value(resp.InputOffice365Service.Status.Timestamp)
			r.InputOffice365Service.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputOffice365Service.Status.UseStatusFromLB)
		}
		r.InputOffice365Service.Streamtags = make([]types.String, 0, len(resp.InputOffice365Service.Streamtags))
		for _, v := range resp.InputOffice365Service.Streamtags {
			r.InputOffice365Service.Streamtags = append(r.InputOffice365Service.Streamtags, types.StringValue(v))
		}
		r.InputOffice365Service.TenantID = types.StringValue(resp.InputOffice365Service.TenantID)
		r.InputOffice365Service.TextSecret = types.StringPointerValue(resp.InputOffice365Service.TextSecret)
		r.InputOffice365Service.Timeout = types.Float64PointerValue(resp.InputOffice365Service.Timeout)
		r.InputOffice365Service.TTL = types.StringPointerValue(resp.InputOffice365Service.TTL)
		if resp.InputOffice365Service.Type != nil {
			r.InputOffice365Service.Type = types.StringValue(string(*resp.InputOffice365Service.Type))
		} else {
			r.InputOffice365Service.Type = types.StringNull()
		}
	}
	if resp.InputOpenTelemetry != nil {
		r.InputOpenTelemetry = &tfTypes.InputOpenTelemetry{}
		if resp.InputOpenTelemetry.ActivityLogSampleRate == nil {
			r.InputOpenTelemetry.ActivityLogSampleRate = types.StringNull()
		} else {
			activityLogSampleRateResult, _ := json.Marshal(resp.InputOpenTelemetry.ActivityLogSampleRate)
			r.InputOpenTelemetry.ActivityLogSampleRate = types.StringValue(string(activityLogSampleRateResult))
		}
		r.InputOpenTelemetry.AuthHeaderExpr = types.StringPointerValue(resp.InputOpenTelemetry.AuthHeaderExpr)
		if resp.InputOpenTelemetry.AuthType != nil {
			r.InputOpenTelemetry.AuthType = types.StringValue(string(*resp.InputOpenTelemetry.AuthType))
		} else {
			r.InputOpenTelemetry.AuthType = types.StringNull()
		}
		if resp.InputOpenTelemetry.CaptureHeaders == nil {
			r.InputOpenTelemetry.CaptureHeaders = types.StringNull()
		} else {
			captureHeadersResult, _ := json.Marshal(resp.InputOpenTelemetry.CaptureHeaders)
			r.InputOpenTelemetry.CaptureHeaders = types.StringValue(string(captureHeadersResult))
		}
		r.InputOpenTelemetry.Connections = []tfTypes.InputOpenTelemetryConnections{}
		if len(r.InputOpenTelemetry.Connections) > len(resp.InputOpenTelemetry.Connections) {
			r.InputOpenTelemetry.Connections = r.InputOpenTelemetry.Connections[:len(resp.InputOpenTelemetry.Connections)]
		}
		for connectionsCount36, connectionsItem36 := range resp.InputOpenTelemetry.Connections {
			var connections36 tfTypes.InputOpenTelemetryConnections
			connections36.Output = types.StringValue(connectionsItem36.Output)
			connections36.Pipeline = types.StringPointerValue(connectionsItem36.Pipeline)
			if connectionsCount36+1 > len(r.InputOpenTelemetry.Connections) {
				r.InputOpenTelemetry.Connections = append(r.InputOpenTelemetry.Connections, connections36)
			} else {
				r.InputOpenTelemetry.Connections[connectionsCount36].Output = connections36.Output
				r.InputOpenTelemetry.Connections[connectionsCount36].Pipeline = connections36.Pipeline
			}
		}
		r.InputOpenTelemetry.CredentialsSecret = types.StringPointerValue(resp.InputOpenTelemetry.CredentialsSecret)
		r.InputOpenTelemetry.Description = types.StringPointerValue(resp.InputOpenTelemetry.Description)
		r.InputOpenTelemetry.Disabled = types.BoolPointerValue(resp.InputOpenTelemetry.Disabled)
		r.InputOpenTelemetry.EnableHealthCheck = types.BoolPointerValue(resp.InputOpenTelemetry.EnableHealthCheck)
		if resp.InputOpenTelemetry.EnableProxyHeader == nil {
			r.InputOpenTelemetry.EnableProxyHeader = types.StringNull()
		} else {
			enableProxyHeaderResult, _ := json.Marshal(resp.InputOpenTelemetry.EnableProxyHeader)
			r.InputOpenTelemetry.EnableProxyHeader = types.StringValue(string(enableProxyHeaderResult))
		}
		r.InputOpenTelemetry.Environment = types.StringPointerValue(resp.InputOpenTelemetry.Environment)
		r.InputOpenTelemetry.ExtractLogs = types.BoolPointerValue(resp.InputOpenTelemetry.ExtractLogs)
		r.InputOpenTelemetry.ExtractMetrics = types.BoolPointerValue(resp.InputOpenTelemetry.ExtractMetrics)
		r.InputOpenTelemetry.ExtractSpans = types.BoolPointerValue(resp.InputOpenTelemetry.ExtractSpans)
		r.InputOpenTelemetry.Host = types.StringPointerValue(resp.InputOpenTelemetry.Host)
		r.InputOpenTelemetry.ID = types.StringPointerValue(resp.InputOpenTelemetry.ID)
		r.InputOpenTelemetry.IPAllowlistRegex = types.StringPointerValue(resp.InputOpenTelemetry.IPAllowlistRegex)
		r.InputOpenTelemetry.IPDenylistRegex = types.StringPointerValue(resp.InputOpenTelemetry.IPDenylistRegex)
		r.InputOpenTelemetry.KeepAliveTimeout = types.Float64PointerValue(resp.InputOpenTelemetry.KeepAliveTimeout)
		r.InputOpenTelemetry.LoginURL = types.StringPointerValue(resp.InputOpenTelemetry.LoginURL)
		r.InputOpenTelemetry.MaxActiveCxn = types.Float64PointerValue(resp.InputOpenTelemetry.MaxActiveCxn)
		r.InputOpenTelemetry.MaxActiveReq = types.Float64PointerValue(resp.InputOpenTelemetry.MaxActiveReq)
		r.InputOpenTelemetry.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputOpenTelemetry.MaxRequestsPerSocket)
		r.InputOpenTelemetry.Metadata = []tfTypes.InputOpenTelemetryMetadata{}
		if len(r.InputOpenTelemetry.Metadata) > len(resp.InputOpenTelemetry.Metadata) {
			r.InputOpenTelemetry.Metadata = r.InputOpenTelemetry.Metadata[:len(resp.InputOpenTelemetry.Metadata)]
		}
		for metadataCount38, metadataItem38 := range resp.InputOpenTelemetry.Metadata {
			var metadata38 tfTypes.InputOpenTelemetryMetadata
			metadata38.Name = types.StringValue(metadataItem38.Name)
			metadata38.Value = types.StringValue(metadataItem38.Value)
			if metadataCount38+1 > len(r.InputOpenTelemetry.Metadata) {
				r.InputOpenTelemetry.Metadata = append(r.InputOpenTelemetry.Metadata, metadata38)
			} else {
				r.InputOpenTelemetry.Metadata[metadataCount38].Name = metadata38.Name
				r.InputOpenTelemetry.Metadata[metadataCount38].Value = metadata38.Value
			}
		}
		r.InputOpenTelemetry.OauthHeaders = []tfTypes.InputOpenTelemetryOauthHeaders{}
		if len(r.InputOpenTelemetry.OauthHeaders) > len(resp.InputOpenTelemetry.OauthHeaders) {
			r.InputOpenTelemetry.OauthHeaders = r.InputOpenTelemetry.OauthHeaders[:len(resp.InputOpenTelemetry.OauthHeaders)]
		}
		for oauthHeadersCount5, oauthHeadersItem5 := range resp.InputOpenTelemetry.OauthHeaders {
			var oauthHeaders5 tfTypes.InputOpenTelemetryOauthHeaders
			oauthHeaders5.Name = types.StringValue(oauthHeadersItem5.Name)
			oauthHeaders5.Value = types.StringValue(oauthHeadersItem5.Value)
			if oauthHeadersCount5+1 > len(r.InputOpenTelemetry.OauthHeaders) {
				r.InputOpenTelemetry.OauthHeaders = append(r.InputOpenTelemetry.OauthHeaders, oauthHeaders5)
			} else {
				r.InputOpenTelemetry.OauthHeaders[oauthHeadersCount5].Name = oauthHeaders5.Name
				r.InputOpenTelemetry.OauthHeaders[oauthHeadersCount5].Value = oauthHeaders5.Value
			}
		}
		r.InputOpenTelemetry.OauthParams = []tfTypes.InputOpenTelemetryOauthParams{}
		if len(r.InputOpenTelemetry.OauthParams) > len(resp.InputOpenTelemetry.OauthParams) {
			r.InputOpenTelemetry.OauthParams = r.InputOpenTelemetry.OauthParams[:len(resp.InputOpenTelemetry.OauthParams)]
		}
		for oauthParamsCount5, oauthParamsItem5 := range resp.InputOpenTelemetry.OauthParams {
			var oauthParams5 tfTypes.InputOpenTelemetryOauthParams
			oauthParams5.Name = types.StringValue(oauthParamsItem5.Name)
			oauthParams5.Value = types.StringValue(oauthParamsItem5.Value)
			if oauthParamsCount5+1 > len(r.InputOpenTelemetry.OauthParams) {
				r.InputOpenTelemetry.OauthParams = append(r.InputOpenTelemetry.OauthParams, oauthParams5)
			} else {
				r.InputOpenTelemetry.OauthParams[oauthParamsCount5].Name = oauthParams5.Name
				r.InputOpenTelemetry.OauthParams[oauthParamsCount5].Value = oauthParams5.Value
			}
		}
		if resp.InputOpenTelemetry.OtlpVersion != nil {
			r.InputOpenTelemetry.OtlpVersion = types.StringValue(string(*resp.InputOpenTelemetry.OtlpVersion))
		} else {
			r.InputOpenTelemetry.OtlpVersion = types.StringNull()
		}
		r.InputOpenTelemetry.Password = types.StringPointerValue(resp.InputOpenTelemetry.Password)
		r.InputOpenTelemetry.Pipeline = types.StringPointerValue(resp.InputOpenTelemetry.Pipeline)
		r.InputOpenTelemetry.Port = types.Float64PointerValue(resp.InputOpenTelemetry.Port)
		if resp.InputOpenTelemetry.Pq == nil {
			r.InputOpenTelemetry.Pq = nil
		} else {
			r.InputOpenTelemetry.Pq = &tfTypes.InputOpenTelemetryPq{}
			r.InputOpenTelemetry.Pq.CommitFrequency = types.Float64PointerValue(resp.InputOpenTelemetry.Pq.CommitFrequency)
			if resp.InputOpenTelemetry.Pq.Compress != nil {
				r.InputOpenTelemetry.Pq.Compress = types.StringValue(string(*resp.InputOpenTelemetry.Pq.Compress))
			} else {
				r.InputOpenTelemetry.Pq.Compress = types.StringNull()
			}
			r.InputOpenTelemetry.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputOpenTelemetry.Pq.MaxBufferSize)
			r.InputOpenTelemetry.Pq.MaxFileSize = types.StringPointerValue(resp.InputOpenTelemetry.Pq.MaxFileSize)
			r.InputOpenTelemetry.Pq.MaxSize = types.StringPointerValue(resp.InputOpenTelemetry.Pq.MaxSize)
			if resp.InputOpenTelemetry.Pq.Mode != nil {
				r.InputOpenTelemetry.Pq.Mode = types.StringValue(string(*resp.InputOpenTelemetry.Pq.Mode))
			} else {
				r.InputOpenTelemetry.Pq.Mode = types.StringNull()
			}
			r.InputOpenTelemetry.Pq.Path = types.StringPointerValue(resp.InputOpenTelemetry.Pq.Path)
		}
		r.InputOpenTelemetry.PqEnabled = types.BoolPointerValue(resp.InputOpenTelemetry.PqEnabled)
		if resp.InputOpenTelemetry.Protocol != nil {
			r.InputOpenTelemetry.Protocol = types.StringValue(string(*resp.InputOpenTelemetry.Protocol))
		} else {
			r.InputOpenTelemetry.Protocol = types.StringNull()
		}
		r.InputOpenTelemetry.RequestTimeout = types.Float64PointerValue(resp.InputOpenTelemetry.RequestTimeout)
		r.InputOpenTelemetry.Secret = types.StringPointerValue(resp.InputOpenTelemetry.Secret)
		r.InputOpenTelemetry.SecretParamName = types.StringPointerValue(resp.InputOpenTelemetry.SecretParamName)
		r.InputOpenTelemetry.SendToRoutes = types.BoolPointerValue(resp.InputOpenTelemetry.SendToRoutes)
		r.InputOpenTelemetry.SocketTimeout = types.Float64PointerValue(resp.InputOpenTelemetry.SocketTimeout)
		if resp.InputOpenTelemetry.Status == nil {
			r.InputOpenTelemetry.Status = nil
		} else {
			r.InputOpenTelemetry.Status = &tfTypes.TFStatus{}
			r.InputOpenTelemetry.Status.Health = types.StringValue(string(resp.InputOpenTelemetry.Status.Health))
			if len(resp.InputOpenTelemetry.Status.Metrics) > 0 {
				r.InputOpenTelemetry.Status.Metrics = make(map[string]types.String, len(resp.InputOpenTelemetry.Status.Metrics))
				for key36, value36 := range resp.InputOpenTelemetry.Status.Metrics {
					result36, _ := json.Marshal(value36)
					r.InputOpenTelemetry.Status.Metrics[key36] = types.StringValue(string(result36))
				}
			}
			r.InputOpenTelemetry.Status.Timestamp = types.Float64Value(resp.InputOpenTelemetry.Status.Timestamp)
			r.InputOpenTelemetry.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputOpenTelemetry.Status.UseStatusFromLB)
		}
		r.InputOpenTelemetry.Streamtags = make([]types.String, 0, len(resp.InputOpenTelemetry.Streamtags))
		for _, v := range resp.InputOpenTelemetry.Streamtags {
			r.InputOpenTelemetry.Streamtags = append(r.InputOpenTelemetry.Streamtags, types.StringValue(v))
		}
		r.InputOpenTelemetry.TextSecret = types.StringPointerValue(resp.InputOpenTelemetry.TextSecret)
		if resp.InputOpenTelemetry.TLS == nil {
			r.InputOpenTelemetry.TLS = nil
		} else {
			r.InputOpenTelemetry.TLS = &tfTypes.InputOpenTelemetryTLSSettingsServerSide{}
			r.InputOpenTelemetry.TLS.CaPath = types.StringPointerValue(resp.InputOpenTelemetry.TLS.CaPath)
			r.InputOpenTelemetry.TLS.CertificateName = types.StringPointerValue(resp.InputOpenTelemetry.TLS.CertificateName)
			r.InputOpenTelemetry.TLS.CertPath = types.StringPointerValue(resp.InputOpenTelemetry.TLS.CertPath)
			if resp.InputOpenTelemetry.TLS.CommonNameRegex == nil {
				r.InputOpenTelemetry.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult13, _ := json.Marshal(resp.InputOpenTelemetry.TLS.CommonNameRegex)
				r.InputOpenTelemetry.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult13))
			}
			r.InputOpenTelemetry.TLS.Disabled = types.BoolPointerValue(resp.InputOpenTelemetry.TLS.Disabled)
			if resp.InputOpenTelemetry.TLS.MaxVersion != nil {
				r.InputOpenTelemetry.TLS.MaxVersion = types.StringValue(string(*resp.InputOpenTelemetry.TLS.MaxVersion))
			} else {
				r.InputOpenTelemetry.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputOpenTelemetry.TLS.MinVersion != nil {
				r.InputOpenTelemetry.TLS.MinVersion = types.StringValue(string(*resp.InputOpenTelemetry.TLS.MinVersion))
			} else {
				r.InputOpenTelemetry.TLS.MinVersion = types.StringNull()
			}
			r.InputOpenTelemetry.TLS.Passphrase = types.StringPointerValue(resp.InputOpenTelemetry.TLS.Passphrase)
			r.InputOpenTelemetry.TLS.PrivKeyPath = types.StringPointerValue(resp.InputOpenTelemetry.TLS.PrivKeyPath)
			if resp.InputOpenTelemetry.TLS.RejectUnauthorized == nil {
				r.InputOpenTelemetry.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult13, _ := json.Marshal(resp.InputOpenTelemetry.TLS.RejectUnauthorized)
				r.InputOpenTelemetry.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult13))
			}
			r.InputOpenTelemetry.TLS.RequestCert = types.BoolPointerValue(resp.InputOpenTelemetry.TLS.RequestCert)
		}
		r.InputOpenTelemetry.Token = types.StringPointerValue(resp.InputOpenTelemetry.Token)
		r.InputOpenTelemetry.TokenAttributeName = types.StringPointerValue(resp.InputOpenTelemetry.TokenAttributeName)
		r.InputOpenTelemetry.TokenTimeoutSecs = types.Float64PointerValue(resp.InputOpenTelemetry.TokenTimeoutSecs)
		if resp.InputOpenTelemetry.Type != nil {
			r.InputOpenTelemetry.Type = types.StringValue(string(*resp.InputOpenTelemetry.Type))
		} else {
			r.InputOpenTelemetry.Type = types.StringNull()
		}
		r.InputOpenTelemetry.Username = types.StringPointerValue(resp.InputOpenTelemetry.Username)
	}
	if resp.InputPrometheus != nil {
		r.InputPrometheus = &tfTypes.InputPrometheus{}
		r.InputPrometheus.AssumeRoleArn = types.StringPointerValue(resp.InputPrometheus.AssumeRoleArn)
		r.InputPrometheus.AssumeRoleExternalID = types.StringPointerValue(resp.InputPrometheus.AssumeRoleExternalID)
		if resp.InputPrometheus.AuthType != nil {
			r.InputPrometheus.AuthType = types.StringValue(string(*resp.InputPrometheus.AuthType))
		} else {
			r.InputPrometheus.AuthType = types.StringNull()
		}
		if resp.InputPrometheus.AwsAuthenticationMethod != nil {
			r.InputPrometheus.AwsAuthenticationMethod = types.StringValue(string(*resp.InputPrometheus.AwsAuthenticationMethod))
		} else {
			r.InputPrometheus.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputPrometheus.AwsSecretKey = types.StringPointerValue(resp.InputPrometheus.AwsSecretKey)
		r.InputPrometheus.Connections = []tfTypes.InputPrometheusConnections{}
		if len(r.InputPrometheus.Connections) > len(resp.InputPrometheus.Connections) {
			r.InputPrometheus.Connections = r.InputPrometheus.Connections[:len(resp.InputPrometheus.Connections)]
		}
		for connectionsCount37, connectionsItem37 := range resp.InputPrometheus.Connections {
			var connections37 tfTypes.InputPrometheusConnections
			connections37.Output = types.StringValue(connectionsItem37.Output)
			connections37.Pipeline = types.StringPointerValue(connectionsItem37.Pipeline)
			if connectionsCount37+1 > len(r.InputPrometheus.Connections) {
				r.InputPrometheus.Connections = append(r.InputPrometheus.Connections, connections37)
			} else {
				r.InputPrometheus.Connections[connectionsCount37].Output = connections37.Output
				r.InputPrometheus.Connections[connectionsCount37].Pipeline = connections37.Pipeline
			}
		}
		r.InputPrometheus.CredentialsSecret = types.StringPointerValue(resp.InputPrometheus.CredentialsSecret)
		r.InputPrometheus.Description = types.StringPointerValue(resp.InputPrometheus.Description)
		r.InputPrometheus.DimensionList = make([]types.String, 0, len(resp.InputPrometheus.DimensionList))
		for _, v := range resp.InputPrometheus.DimensionList {
			r.InputPrometheus.DimensionList = append(r.InputPrometheus.DimensionList, types.StringValue(v))
		}
		r.InputPrometheus.Disabled = types.BoolPointerValue(resp.InputPrometheus.Disabled)
		if resp.InputPrometheus.DiscoveryType != nil {
			r.InputPrometheus.DiscoveryType = types.StringValue(string(*resp.InputPrometheus.DiscoveryType))
		} else {
			r.InputPrometheus.DiscoveryType = types.StringNull()
		}
		r.InputPrometheus.DurationSeconds = types.Float64PointerValue(resp.InputPrometheus.DurationSeconds)
		r.InputPrometheus.EnableAssumeRole = types.BoolPointerValue(resp.InputPrometheus.EnableAssumeRole)
		r.InputPrometheus.Endpoint = types.StringPointerValue(resp.InputPrometheus.Endpoint)
		r.InputPrometheus.Environment = types.StringPointerValue(resp.InputPrometheus.Environment)
		r.InputPrometheus.ID = types.StringPointerValue(resp.InputPrometheus.ID)
		r.InputPrometheus.Interval = types.Float64PointerValue(resp.InputPrometheus.Interval)
		r.InputPrometheus.JobTimeout = types.StringPointerValue(resp.InputPrometheus.JobTimeout)
		r.InputPrometheus.KeepAliveTime = types.Float64PointerValue(resp.InputPrometheus.KeepAliveTime)
		if resp.InputPrometheus.LogLevel != nil {
			r.InputPrometheus.LogLevel = types.StringValue(string(*resp.InputPrometheus.LogLevel))
		} else {
			r.InputPrometheus.LogLevel = types.StringNull()
		}
		r.InputPrometheus.MaxMissedKeepAlives = types.Float64PointerValue(resp.InputPrometheus.MaxMissedKeepAlives)
		r.InputPrometheus.Metadata = []tfTypes.InputPrometheusMetadata{}
		if len(r.InputPrometheus.Metadata) > len(resp.InputPrometheus.Metadata) {
			r.InputPrometheus.Metadata = r.InputPrometheus.Metadata[:len(resp.InputPrometheus.Metadata)]
		}
		for metadataCount39, metadataItem39 := range resp.InputPrometheus.Metadata {
			var metadata39 tfTypes.InputPrometheusMetadata
			metadata39.Name = types.StringValue(metadataItem39.Name)
			metadata39.Value = types.StringValue(metadataItem39.Value)
			if metadataCount39+1 > len(r.InputPrometheus.Metadata) {
				r.InputPrometheus.Metadata = append(r.InputPrometheus.Metadata, metadata39)
			} else {
				r.InputPrometheus.Metadata[metadataCount39].Name = metadata39.Name
				r.InputPrometheus.Metadata[metadataCount39].Value = metadata39.Value
			}
		}
		r.InputPrometheus.NameList = make([]types.String, 0, len(resp.InputPrometheus.NameList))
		for _, v := range resp.InputPrometheus.NameList {
			r.InputPrometheus.NameList = append(r.InputPrometheus.NameList, types.StringValue(v))
		}
		r.InputPrometheus.Password = types.StringPointerValue(resp.InputPrometheus.Password)
		r.InputPrometheus.Pipeline = types.StringPointerValue(resp.InputPrometheus.Pipeline)
		if resp.InputPrometheus.Pq == nil {
			r.InputPrometheus.Pq = nil
		} else {
			r.InputPrometheus.Pq = &tfTypes.InputPrometheusPq{}
			r.InputPrometheus.Pq.CommitFrequency = types.Float64PointerValue(resp.InputPrometheus.Pq.CommitFrequency)
			if resp.InputPrometheus.Pq.Compress != nil {
				r.InputPrometheus.Pq.Compress = types.StringValue(string(*resp.InputPrometheus.Pq.Compress))
			} else {
				r.InputPrometheus.Pq.Compress = types.StringNull()
			}
			r.InputPrometheus.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputPrometheus.Pq.MaxBufferSize)
			r.InputPrometheus.Pq.MaxFileSize = types.StringPointerValue(resp.InputPrometheus.Pq.MaxFileSize)
			r.InputPrometheus.Pq.MaxSize = types.StringPointerValue(resp.InputPrometheus.Pq.MaxSize)
			if resp.InputPrometheus.Pq.Mode != nil {
				r.InputPrometheus.Pq.Mode = types.StringValue(string(*resp.InputPrometheus.Pq.Mode))
			} else {
				r.InputPrometheus.Pq.Mode = types.StringNull()
			}
			r.InputPrometheus.Pq.Path = types.StringPointerValue(resp.InputPrometheus.Pq.Path)
		}
		r.InputPrometheus.PqEnabled = types.BoolPointerValue(resp.InputPrometheus.PqEnabled)
		if resp.InputPrometheus.RecordType != nil {
			r.InputPrometheus.RecordType = types.StringValue(string(*resp.InputPrometheus.RecordType))
		} else {
			r.InputPrometheus.RecordType = types.StringNull()
		}
		r.InputPrometheus.Region = types.StringPointerValue(resp.InputPrometheus.Region)
		r.InputPrometheus.RejectUnauthorized = types.BoolPointerValue(resp.InputPrometheus.RejectUnauthorized)
		r.InputPrometheus.ReuseConnections = types.BoolPointerValue(resp.InputPrometheus.ReuseConnections)
		r.InputPrometheus.ScrapePath = types.StringPointerValue(resp.InputPrometheus.ScrapePath)
		r.InputPrometheus.ScrapePort = types.Float64PointerValue(resp.InputPrometheus.ScrapePort)
		if resp.InputPrometheus.ScrapeProtocol != nil {
			r.InputPrometheus.ScrapeProtocol = types.StringValue(string(*resp.InputPrometheus.ScrapeProtocol))
		} else {
			r.InputPrometheus.ScrapeProtocol = types.StringNull()
		}
		r.InputPrometheus.SearchFilter = []tfTypes.SearchFilter{}
		if len(r.InputPrometheus.SearchFilter) > len(resp.InputPrometheus.SearchFilter) {
			r.InputPrometheus.SearchFilter = r.InputPrometheus.SearchFilter[:len(resp.InputPrometheus.SearchFilter)]
		}
		for searchFilterCount1, searchFilterItem1 := range resp.InputPrometheus.SearchFilter {
			var searchFilter1 tfTypes.SearchFilter
			searchFilter1.Name = types.StringValue(searchFilterItem1.Name)
			searchFilter1.Values = make([]types.String, 0, len(searchFilterItem1.Values))
			for _, v := range searchFilterItem1.Values {
				searchFilter1.Values = append(searchFilter1.Values, types.StringValue(v))
			}
			if searchFilterCount1+1 > len(r.InputPrometheus.SearchFilter) {
				r.InputPrometheus.SearchFilter = append(r.InputPrometheus.SearchFilter, searchFilter1)
			} else {
				r.InputPrometheus.SearchFilter[searchFilterCount1].Name = searchFilter1.Name
				r.InputPrometheus.SearchFilter[searchFilterCount1].Values = searchFilter1.Values
			}
		}
		r.InputPrometheus.SendToRoutes = types.BoolPointerValue(resp.InputPrometheus.SendToRoutes)
		if resp.InputPrometheus.SignatureVersion != nil {
			r.InputPrometheus.SignatureVersion = types.StringValue(string(*resp.InputPrometheus.SignatureVersion))
		} else {
			r.InputPrometheus.SignatureVersion = types.StringNull()
		}
		if resp.InputPrometheus.Status == nil {
			r.InputPrometheus.Status = nil
		} else {
			r.InputPrometheus.Status = &tfTypes.TFStatus{}
			r.InputPrometheus.Status.Health = types.StringValue(string(resp.InputPrometheus.Status.Health))
			if len(resp.InputPrometheus.Status.Metrics) > 0 {
				r.InputPrometheus.Status.Metrics = make(map[string]types.String, len(resp.InputPrometheus.Status.Metrics))
				for key37, value37 := range resp.InputPrometheus.Status.Metrics {
					result37, _ := json.Marshal(value37)
					r.InputPrometheus.Status.Metrics[key37] = types.StringValue(string(result37))
				}
			}
			r.InputPrometheus.Status.Timestamp = types.Float64Value(resp.InputPrometheus.Status.Timestamp)
			r.InputPrometheus.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputPrometheus.Status.UseStatusFromLB)
		}
		r.InputPrometheus.Streamtags = make([]types.String, 0, len(resp.InputPrometheus.Streamtags))
		for _, v := range resp.InputPrometheus.Streamtags {
			r.InputPrometheus.Streamtags = append(r.InputPrometheus.Streamtags, types.StringValue(v))
		}
		r.InputPrometheus.TargetList = make([]types.String, 0, len(resp.InputPrometheus.TargetList))
		for _, v := range resp.InputPrometheus.TargetList {
			r.InputPrometheus.TargetList = append(r.InputPrometheus.TargetList, types.StringValue(v))
		}
		r.InputPrometheus.TTL = types.StringPointerValue(resp.InputPrometheus.TTL)
		if resp.InputPrometheus.Type != nil {
			r.InputPrometheus.Type = types.StringValue(string(*resp.InputPrometheus.Type))
		} else {
			r.InputPrometheus.Type = types.StringNull()
		}
		r.InputPrometheus.UsePublicIP = types.BoolPointerValue(resp.InputPrometheus.UsePublicIP)
		r.InputPrometheus.Username = types.StringPointerValue(resp.InputPrometheus.Username)
	}
	if resp.InputPrometheusRw != nil {
		r.InputPrometheusRw = &tfTypes.InputPrometheusRw{}
		r.InputPrometheusRw.ActivityLogSampleRate = types.Float64PointerValue(resp.InputPrometheusRw.ActivityLogSampleRate)
		r.InputPrometheusRw.AuthHeaderExpr = types.StringPointerValue(resp.InputPrometheusRw.AuthHeaderExpr)
		if resp.InputPrometheusRw.AuthType != nil {
			r.InputPrometheusRw.AuthType = types.StringValue(string(*resp.InputPrometheusRw.AuthType))
		} else {
			r.InputPrometheusRw.AuthType = types.StringNull()
		}
		r.InputPrometheusRw.CaptureHeaders = types.BoolPointerValue(resp.InputPrometheusRw.CaptureHeaders)
		r.InputPrometheusRw.Connections = []tfTypes.InputPrometheusRwConnections{}
		if len(r.InputPrometheusRw.Connections) > len(resp.InputPrometheusRw.Connections) {
			r.InputPrometheusRw.Connections = r.InputPrometheusRw.Connections[:len(resp.InputPrometheusRw.Connections)]
		}
		for connectionsCount38, connectionsItem38 := range resp.InputPrometheusRw.Connections {
			var connections38 tfTypes.InputPrometheusRwConnections
			connections38.Output = types.StringValue(connectionsItem38.Output)
			connections38.Pipeline = types.StringPointerValue(connectionsItem38.Pipeline)
			if connectionsCount38+1 > len(r.InputPrometheusRw.Connections) {
				r.InputPrometheusRw.Connections = append(r.InputPrometheusRw.Connections, connections38)
			} else {
				r.InputPrometheusRw.Connections[connectionsCount38].Output = connections38.Output
				r.InputPrometheusRw.Connections[connectionsCount38].Pipeline = connections38.Pipeline
			}
		}
		r.InputPrometheusRw.CredentialsSecret = types.StringPointerValue(resp.InputPrometheusRw.CredentialsSecret)
		r.InputPrometheusRw.Description = types.StringPointerValue(resp.InputPrometheusRw.Description)
		r.InputPrometheusRw.Disabled = types.BoolPointerValue(resp.InputPrometheusRw.Disabled)
		r.InputPrometheusRw.EnableHealthCheck = types.BoolPointerValue(resp.InputPrometheusRw.EnableHealthCheck)
		r.InputPrometheusRw.EnableProxyHeader = types.BoolPointerValue(resp.InputPrometheusRw.EnableProxyHeader)
		r.InputPrometheusRw.Environment = types.StringPointerValue(resp.InputPrometheusRw.Environment)
		r.InputPrometheusRw.Host = types.StringPointerValue(resp.InputPrometheusRw.Host)
		r.InputPrometheusRw.ID = types.StringPointerValue(resp.InputPrometheusRw.ID)
		r.InputPrometheusRw.IPAllowlistRegex = types.StringPointerValue(resp.InputPrometheusRw.IPAllowlistRegex)
		r.InputPrometheusRw.IPDenylistRegex = types.StringPointerValue(resp.InputPrometheusRw.IPDenylistRegex)
		r.InputPrometheusRw.KeepAliveTimeout = types.Float64PointerValue(resp.InputPrometheusRw.KeepAliveTimeout)
		r.InputPrometheusRw.LoginURL = types.StringPointerValue(resp.InputPrometheusRw.LoginURL)
		r.InputPrometheusRw.MaxActiveReq = types.Float64PointerValue(resp.InputPrometheusRw.MaxActiveReq)
		r.InputPrometheusRw.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputPrometheusRw.MaxRequestsPerSocket)
		r.InputPrometheusRw.Metadata = []tfTypes.InputPrometheusRwMetadata{}
		if len(r.InputPrometheusRw.Metadata) > len(resp.InputPrometheusRw.Metadata) {
			r.InputPrometheusRw.Metadata = r.InputPrometheusRw.Metadata[:len(resp.InputPrometheusRw.Metadata)]
		}
		for metadataCount40, metadataItem40 := range resp.InputPrometheusRw.Metadata {
			var metadata40 tfTypes.InputPrometheusRwMetadata
			metadata40.Name = types.StringValue(metadataItem40.Name)
			metadata40.Value = types.StringValue(metadataItem40.Value)
			if metadataCount40+1 > len(r.InputPrometheusRw.Metadata) {
				r.InputPrometheusRw.Metadata = append(r.InputPrometheusRw.Metadata, metadata40)
			} else {
				r.InputPrometheusRw.Metadata[metadataCount40].Name = metadata40.Name
				r.InputPrometheusRw.Metadata[metadataCount40].Value = metadata40.Value
			}
		}
		r.InputPrometheusRw.OauthHeaders = []tfTypes.InputPrometheusRwOauthHeaders{}
		if len(r.InputPrometheusRw.OauthHeaders) > len(resp.InputPrometheusRw.OauthHeaders) {
			r.InputPrometheusRw.OauthHeaders = r.InputPrometheusRw.OauthHeaders[:len(resp.InputPrometheusRw.OauthHeaders)]
		}
		for oauthHeadersCount6, oauthHeadersItem6 := range resp.InputPrometheusRw.OauthHeaders {
			var oauthHeaders6 tfTypes.InputPrometheusRwOauthHeaders
			oauthHeaders6.Name = types.StringValue(oauthHeadersItem6.Name)
			oauthHeaders6.Value = types.StringValue(oauthHeadersItem6.Value)
			if oauthHeadersCount6+1 > len(r.InputPrometheusRw.OauthHeaders) {
				r.InputPrometheusRw.OauthHeaders = append(r.InputPrometheusRw.OauthHeaders, oauthHeaders6)
			} else {
				r.InputPrometheusRw.OauthHeaders[oauthHeadersCount6].Name = oauthHeaders6.Name
				r.InputPrometheusRw.OauthHeaders[oauthHeadersCount6].Value = oauthHeaders6.Value
			}
		}
		r.InputPrometheusRw.OauthParams = []tfTypes.InputPrometheusRwOauthParams{}
		if len(r.InputPrometheusRw.OauthParams) > len(resp.InputPrometheusRw.OauthParams) {
			r.InputPrometheusRw.OauthParams = r.InputPrometheusRw.OauthParams[:len(resp.InputPrometheusRw.OauthParams)]
		}
		for oauthParamsCount6, oauthParamsItem6 := range resp.InputPrometheusRw.OauthParams {
			var oauthParams6 tfTypes.InputPrometheusRwOauthParams
			oauthParams6.Name = types.StringValue(oauthParamsItem6.Name)
			oauthParams6.Value = types.StringValue(oauthParamsItem6.Value)
			if oauthParamsCount6+1 > len(r.InputPrometheusRw.OauthParams) {
				r.InputPrometheusRw.OauthParams = append(r.InputPrometheusRw.OauthParams, oauthParams6)
			} else {
				r.InputPrometheusRw.OauthParams[oauthParamsCount6].Name = oauthParams6.Name
				r.InputPrometheusRw.OauthParams[oauthParamsCount6].Value = oauthParams6.Value
			}
		}
		r.InputPrometheusRw.Password = types.StringPointerValue(resp.InputPrometheusRw.Password)
		r.InputPrometheusRw.Pipeline = types.StringPointerValue(resp.InputPrometheusRw.Pipeline)
		r.InputPrometheusRw.Port = types.Float64Value(resp.InputPrometheusRw.Port)
		if resp.InputPrometheusRw.Pq == nil {
			r.InputPrometheusRw.Pq = nil
		} else {
			r.InputPrometheusRw.Pq = &tfTypes.InputPrometheusRwPq{}
			r.InputPrometheusRw.Pq.CommitFrequency = types.Float64PointerValue(resp.InputPrometheusRw.Pq.CommitFrequency)
			if resp.InputPrometheusRw.Pq.Compress != nil {
				r.InputPrometheusRw.Pq.Compress = types.StringValue(string(*resp.InputPrometheusRw.Pq.Compress))
			} else {
				r.InputPrometheusRw.Pq.Compress = types.StringNull()
			}
			r.InputPrometheusRw.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputPrometheusRw.Pq.MaxBufferSize)
			r.InputPrometheusRw.Pq.MaxFileSize = types.StringPointerValue(resp.InputPrometheusRw.Pq.MaxFileSize)
			r.InputPrometheusRw.Pq.MaxSize = types.StringPointerValue(resp.InputPrometheusRw.Pq.MaxSize)
			if resp.InputPrometheusRw.Pq.Mode != nil {
				r.InputPrometheusRw.Pq.Mode = types.StringValue(string(*resp.InputPrometheusRw.Pq.Mode))
			} else {
				r.InputPrometheusRw.Pq.Mode = types.StringNull()
			}
			r.InputPrometheusRw.Pq.Path = types.StringPointerValue(resp.InputPrometheusRw.Pq.Path)
		}
		r.InputPrometheusRw.PqEnabled = types.BoolPointerValue(resp.InputPrometheusRw.PqEnabled)
		r.InputPrometheusRw.PrometheusAPI = types.StringPointerValue(resp.InputPrometheusRw.PrometheusAPI)
		r.InputPrometheusRw.RequestTimeout = types.Float64PointerValue(resp.InputPrometheusRw.RequestTimeout)
		r.InputPrometheusRw.Secret = types.StringPointerValue(resp.InputPrometheusRw.Secret)
		r.InputPrometheusRw.SecretParamName = types.StringPointerValue(resp.InputPrometheusRw.SecretParamName)
		r.InputPrometheusRw.SendToRoutes = types.BoolPointerValue(resp.InputPrometheusRw.SendToRoutes)
		r.InputPrometheusRw.SocketTimeout = types.Float64PointerValue(resp.InputPrometheusRw.SocketTimeout)
		if resp.InputPrometheusRw.Status == nil {
			r.InputPrometheusRw.Status = nil
		} else {
			r.InputPrometheusRw.Status = &tfTypes.TFStatus{}
			r.InputPrometheusRw.Status.Health = types.StringValue(string(resp.InputPrometheusRw.Status.Health))
			if len(resp.InputPrometheusRw.Status.Metrics) > 0 {
				r.InputPrometheusRw.Status.Metrics = make(map[string]types.String, len(resp.InputPrometheusRw.Status.Metrics))
				for key38, value38 := range resp.InputPrometheusRw.Status.Metrics {
					result38, _ := json.Marshal(value38)
					r.InputPrometheusRw.Status.Metrics[key38] = types.StringValue(string(result38))
				}
			}
			r.InputPrometheusRw.Status.Timestamp = types.Float64Value(resp.InputPrometheusRw.Status.Timestamp)
			r.InputPrometheusRw.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputPrometheusRw.Status.UseStatusFromLB)
		}
		r.InputPrometheusRw.Streamtags = make([]types.String, 0, len(resp.InputPrometheusRw.Streamtags))
		for _, v := range resp.InputPrometheusRw.Streamtags {
			r.InputPrometheusRw.Streamtags = append(r.InputPrometheusRw.Streamtags, types.StringValue(v))
		}
		r.InputPrometheusRw.TextSecret = types.StringPointerValue(resp.InputPrometheusRw.TextSecret)
		if resp.InputPrometheusRw.TLS == nil {
			r.InputPrometheusRw.TLS = nil
		} else {
			r.InputPrometheusRw.TLS = &tfTypes.InputPrometheusRwTLSSettingsServerSide{}
			r.InputPrometheusRw.TLS.CaPath = types.StringPointerValue(resp.InputPrometheusRw.TLS.CaPath)
			r.InputPrometheusRw.TLS.CertificateName = types.StringPointerValue(resp.InputPrometheusRw.TLS.CertificateName)
			r.InputPrometheusRw.TLS.CertPath = types.StringPointerValue(resp.InputPrometheusRw.TLS.CertPath)
			if resp.InputPrometheusRw.TLS.CommonNameRegex == nil {
				r.InputPrometheusRw.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult14, _ := json.Marshal(resp.InputPrometheusRw.TLS.CommonNameRegex)
				r.InputPrometheusRw.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult14))
			}
			r.InputPrometheusRw.TLS.Disabled = types.BoolPointerValue(resp.InputPrometheusRw.TLS.Disabled)
			if resp.InputPrometheusRw.TLS.MaxVersion != nil {
				r.InputPrometheusRw.TLS.MaxVersion = types.StringValue(string(*resp.InputPrometheusRw.TLS.MaxVersion))
			} else {
				r.InputPrometheusRw.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputPrometheusRw.TLS.MinVersion != nil {
				r.InputPrometheusRw.TLS.MinVersion = types.StringValue(string(*resp.InputPrometheusRw.TLS.MinVersion))
			} else {
				r.InputPrometheusRw.TLS.MinVersion = types.StringNull()
			}
			r.InputPrometheusRw.TLS.Passphrase = types.StringPointerValue(resp.InputPrometheusRw.TLS.Passphrase)
			r.InputPrometheusRw.TLS.PrivKeyPath = types.StringPointerValue(resp.InputPrometheusRw.TLS.PrivKeyPath)
			if resp.InputPrometheusRw.TLS.RejectUnauthorized == nil {
				r.InputPrometheusRw.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult14, _ := json.Marshal(resp.InputPrometheusRw.TLS.RejectUnauthorized)
				r.InputPrometheusRw.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult14))
			}
			r.InputPrometheusRw.TLS.RequestCert = types.BoolPointerValue(resp.InputPrometheusRw.TLS.RequestCert)
		}
		r.InputPrometheusRw.Token = types.StringPointerValue(resp.InputPrometheusRw.Token)
		r.InputPrometheusRw.TokenAttributeName = types.StringPointerValue(resp.InputPrometheusRw.TokenAttributeName)
		r.InputPrometheusRw.TokenTimeoutSecs = types.Float64PointerValue(resp.InputPrometheusRw.TokenTimeoutSecs)
		if resp.InputPrometheusRw.Type != nil {
			r.InputPrometheusRw.Type = types.StringValue(string(*resp.InputPrometheusRw.Type))
		} else {
			r.InputPrometheusRw.Type = types.StringNull()
		}
		r.InputPrometheusRw.Username = types.StringPointerValue(resp.InputPrometheusRw.Username)
	}
	if resp.InputRawUDP != nil {
		r.InputRawUDP = &tfTypes.InputRawUDP{}
		r.InputRawUDP.Connections = []tfTypes.InputRawUDPConnections{}
		if len(r.InputRawUDP.Connections) > len(resp.InputRawUDP.Connections) {
			r.InputRawUDP.Connections = r.InputRawUDP.Connections[:len(resp.InputRawUDP.Connections)]
		}
		for connectionsCount39, connectionsItem39 := range resp.InputRawUDP.Connections {
			var connections39 tfTypes.InputRawUDPConnections
			connections39.Output = types.StringValue(connectionsItem39.Output)
			connections39.Pipeline = types.StringPointerValue(connectionsItem39.Pipeline)
			if connectionsCount39+1 > len(r.InputRawUDP.Connections) {
				r.InputRawUDP.Connections = append(r.InputRawUDP.Connections, connections39)
			} else {
				r.InputRawUDP.Connections[connectionsCount39].Output = connections39.Output
				r.InputRawUDP.Connections[connectionsCount39].Pipeline = connections39.Pipeline
			}
		}
		r.InputRawUDP.Description = types.StringPointerValue(resp.InputRawUDP.Description)
		r.InputRawUDP.Disabled = types.BoolPointerValue(resp.InputRawUDP.Disabled)
		r.InputRawUDP.Environment = types.StringPointerValue(resp.InputRawUDP.Environment)
		r.InputRawUDP.Host = types.StringPointerValue(resp.InputRawUDP.Host)
		r.InputRawUDP.ID = types.StringPointerValue(resp.InputRawUDP.ID)
		r.InputRawUDP.IngestRawBytes = types.BoolPointerValue(resp.InputRawUDP.IngestRawBytes)
		r.InputRawUDP.IPWhitelistRegex = types.StringPointerValue(resp.InputRawUDP.IPWhitelistRegex)
		r.InputRawUDP.MaxBufferSize = types.Float64PointerValue(resp.InputRawUDP.MaxBufferSize)
		r.InputRawUDP.Metadata = []tfTypes.InputRawUDPMetadata{}
		if len(r.InputRawUDP.Metadata) > len(resp.InputRawUDP.Metadata) {
			r.InputRawUDP.Metadata = r.InputRawUDP.Metadata[:len(resp.InputRawUDP.Metadata)]
		}
		for metadataCount41, metadataItem41 := range resp.InputRawUDP.Metadata {
			var metadata41 tfTypes.InputRawUDPMetadata
			metadata41.Name = types.StringValue(metadataItem41.Name)
			metadata41.Value = types.StringValue(metadataItem41.Value)
			if metadataCount41+1 > len(r.InputRawUDP.Metadata) {
				r.InputRawUDP.Metadata = append(r.InputRawUDP.Metadata, metadata41)
			} else {
				r.InputRawUDP.Metadata[metadataCount41].Name = metadata41.Name
				r.InputRawUDP.Metadata[metadataCount41].Value = metadata41.Value
			}
		}
		r.InputRawUDP.Pipeline = types.StringPointerValue(resp.InputRawUDP.Pipeline)
		r.InputRawUDP.Port = types.Float64Value(resp.InputRawUDP.Port)
		if resp.InputRawUDP.Pq == nil {
			r.InputRawUDP.Pq = nil
		} else {
			r.InputRawUDP.Pq = &tfTypes.InputRawUDPPq{}
			r.InputRawUDP.Pq.CommitFrequency = types.Float64PointerValue(resp.InputRawUDP.Pq.CommitFrequency)
			if resp.InputRawUDP.Pq.Compress != nil {
				r.InputRawUDP.Pq.Compress = types.StringValue(string(*resp.InputRawUDP.Pq.Compress))
			} else {
				r.InputRawUDP.Pq.Compress = types.StringNull()
			}
			r.InputRawUDP.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputRawUDP.Pq.MaxBufferSize)
			r.InputRawUDP.Pq.MaxFileSize = types.StringPointerValue(resp.InputRawUDP.Pq.MaxFileSize)
			r.InputRawUDP.Pq.MaxSize = types.StringPointerValue(resp.InputRawUDP.Pq.MaxSize)
			if resp.InputRawUDP.Pq.Mode != nil {
				r.InputRawUDP.Pq.Mode = types.StringValue(string(*resp.InputRawUDP.Pq.Mode))
			} else {
				r.InputRawUDP.Pq.Mode = types.StringNull()
			}
			r.InputRawUDP.Pq.Path = types.StringPointerValue(resp.InputRawUDP.Pq.Path)
		}
		r.InputRawUDP.PqEnabled = types.BoolPointerValue(resp.InputRawUDP.PqEnabled)
		r.InputRawUDP.SendToRoutes = types.BoolPointerValue(resp.InputRawUDP.SendToRoutes)
		r.InputRawUDP.SingleMsgUDPPackets = types.BoolPointerValue(resp.InputRawUDP.SingleMsgUDPPackets)
		if resp.InputRawUDP.Status == nil {
			r.InputRawUDP.Status = nil
		} else {
			r.InputRawUDP.Status = &tfTypes.TFStatus{}
			r.InputRawUDP.Status.Health = types.StringValue(string(resp.InputRawUDP.Status.Health))
			if len(resp.InputRawUDP.Status.Metrics) > 0 {
				r.InputRawUDP.Status.Metrics = make(map[string]types.String, len(resp.InputRawUDP.Status.Metrics))
				for key39, value39 := range resp.InputRawUDP.Status.Metrics {
					result39, _ := json.Marshal(value39)
					r.InputRawUDP.Status.Metrics[key39] = types.StringValue(string(result39))
				}
			}
			r.InputRawUDP.Status.Timestamp = types.Float64Value(resp.InputRawUDP.Status.Timestamp)
			r.InputRawUDP.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputRawUDP.Status.UseStatusFromLB)
		}
		r.InputRawUDP.Streamtags = make([]types.String, 0, len(resp.InputRawUDP.Streamtags))
		for _, v := range resp.InputRawUDP.Streamtags {
			r.InputRawUDP.Streamtags = append(r.InputRawUDP.Streamtags, types.StringValue(v))
		}
		if resp.InputRawUDP.Type != nil {
			r.InputRawUDP.Type = types.StringValue(string(*resp.InputRawUDP.Type))
		} else {
			r.InputRawUDP.Type = types.StringNull()
		}
		r.InputRawUDP.UDPSocketRxBufSize = types.Float64PointerValue(resp.InputRawUDP.UDPSocketRxBufSize)
	}
	if resp.InputS3 != nil {
		r.InputS3 = &tfTypes.InputS3{}
		r.InputS3.AssumeRoleArn = types.StringPointerValue(resp.InputS3.AssumeRoleArn)
		r.InputS3.AssumeRoleExternalID = types.StringPointerValue(resp.InputS3.AssumeRoleExternalID)
		r.InputS3.AwsAccountID = types.StringPointerValue(resp.InputS3.AwsAccountID)
		r.InputS3.AwsAPIKey = types.StringPointerValue(resp.InputS3.AwsAPIKey)
		if resp.InputS3.AwsAuthenticationMethod != nil {
			r.InputS3.AwsAuthenticationMethod = types.StringValue(string(*resp.InputS3.AwsAuthenticationMethod))
		} else {
			r.InputS3.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputS3.AwsSecret = types.StringPointerValue(resp.InputS3.AwsSecret)
		r.InputS3.AwsSecretKey = types.StringPointerValue(resp.InputS3.AwsSecretKey)
		r.InputS3.BreakerRulesets = make([]types.String, 0, len(resp.InputS3.BreakerRulesets))
		for _, v := range resp.InputS3.BreakerRulesets {
			r.InputS3.BreakerRulesets = append(r.InputS3.BreakerRulesets, types.StringValue(v))
		}
		if resp.InputS3.Checkpointing == nil {
			r.InputS3.Checkpointing = nil
		} else {
			r.InputS3.Checkpointing = &tfTypes.InputS3Checkpointing{}
			r.InputS3.Checkpointing.Enabled = types.BoolPointerValue(resp.InputS3.Checkpointing.Enabled)
			r.InputS3.Checkpointing.Retries = types.Float64PointerValue(resp.InputS3.Checkpointing.Retries)
		}
		r.InputS3.Connections = []tfTypes.InputS3Connections{}
		if len(r.InputS3.Connections) > len(resp.InputS3.Connections) {
			r.InputS3.Connections = r.InputS3.Connections[:len(resp.InputS3.Connections)]
		}
		for connectionsCount40, connectionsItem40 := range resp.InputS3.Connections {
			var connections40 tfTypes.InputS3Connections
			connections40.Output = types.StringValue(connectionsItem40.Output)
			connections40.Pipeline = types.StringPointerValue(connectionsItem40.Pipeline)
			if connectionsCount40+1 > len(r.InputS3.Connections) {
				r.InputS3.Connections = append(r.InputS3.Connections, connections40)
			} else {
				r.InputS3.Connections[connectionsCount40].Output = connections40.Output
				r.InputS3.Connections[connectionsCount40].Pipeline = connections40.Pipeline
			}
		}
		r.InputS3.Description = types.StringPointerValue(resp.InputS3.Description)
		r.InputS3.Disabled = types.BoolPointerValue(resp.InputS3.Disabled)
		r.InputS3.DurationSeconds = types.Float64PointerValue(resp.InputS3.DurationSeconds)
		r.InputS3.EnableAssumeRole = types.BoolPointerValue(resp.InputS3.EnableAssumeRole)
		r.InputS3.EnableSQSAssumeRole = types.BoolPointerValue(resp.InputS3.EnableSQSAssumeRole)
		r.InputS3.Encoding = types.StringPointerValue(resp.InputS3.Encoding)
		r.InputS3.Endpoint = types.StringPointerValue(resp.InputS3.Endpoint)
		r.InputS3.Environment = types.StringPointerValue(resp.InputS3.Environment)
		r.InputS3.FileFilter = types.StringPointerValue(resp.InputS3.FileFilter)
		r.InputS3.ID = types.StringPointerValue(resp.InputS3.ID)
		r.InputS3.MaxMessages = types.Float64PointerValue(resp.InputS3.MaxMessages)
		r.InputS3.Metadata = []tfTypes.InputS3Metadata{}
		if len(r.InputS3.Metadata) > len(resp.InputS3.Metadata) {
			r.InputS3.Metadata = r.InputS3.Metadata[:len(resp.InputS3.Metadata)]
		}
		for metadataCount42, metadataItem42 := range resp.InputS3.Metadata {
			var metadata42 tfTypes.InputS3Metadata
			metadata42.Name = types.StringValue(metadataItem42.Name)
			metadata42.Value = types.StringValue(metadataItem42.Value)
			if metadataCount42+1 > len(r.InputS3.Metadata) {
				r.InputS3.Metadata = append(r.InputS3.Metadata, metadata42)
			} else {
				r.InputS3.Metadata[metadataCount42].Name = metadata42.Name
				r.InputS3.Metadata[metadataCount42].Value = metadata42.Value
			}
		}
		r.InputS3.NumReceivers = types.Float64PointerValue(resp.InputS3.NumReceivers)
		r.InputS3.ParquetChunkDownloadTimeout = types.Float64PointerValue(resp.InputS3.ParquetChunkDownloadTimeout)
		r.InputS3.ParquetChunkSizeMB = types.Float64PointerValue(resp.InputS3.ParquetChunkSizeMB)
		r.InputS3.Pipeline = types.StringPointerValue(resp.InputS3.Pipeline)
		r.InputS3.PollTimeout = types.Float64PointerValue(resp.InputS3.PollTimeout)
		if resp.InputS3.Pq == nil {
			r.InputS3.Pq = nil
		} else {
			r.InputS3.Pq = &tfTypes.InputS3Pq{}
			r.InputS3.Pq.CommitFrequency = types.Float64PointerValue(resp.InputS3.Pq.CommitFrequency)
			if resp.InputS3.Pq.Compress != nil {
				r.InputS3.Pq.Compress = types.StringValue(string(*resp.InputS3.Pq.Compress))
			} else {
				r.InputS3.Pq.Compress = types.StringNull()
			}
			r.InputS3.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputS3.Pq.MaxBufferSize)
			r.InputS3.Pq.MaxFileSize = types.StringPointerValue(resp.InputS3.Pq.MaxFileSize)
			r.InputS3.Pq.MaxSize = types.StringPointerValue(resp.InputS3.Pq.MaxSize)
			if resp.InputS3.Pq.Mode != nil {
				r.InputS3.Pq.Mode = types.StringValue(string(*resp.InputS3.Pq.Mode))
			} else {
				r.InputS3.Pq.Mode = types.StringNull()
			}
			r.InputS3.Pq.Path = types.StringPointerValue(resp.InputS3.Pq.Path)
		}
		r.InputS3.PqEnabled = types.BoolPointerValue(resp.InputS3.PqEnabled)
		if resp.InputS3.Preprocess == nil {
			r.InputS3.Preprocess = nil
		} else {
			r.InputS3.Preprocess = &tfTypes.InputS3Preprocess{}
			r.InputS3.Preprocess.Args = make([]types.String, 0, len(resp.InputS3.Preprocess.Args))
			for _, v := range resp.InputS3.Preprocess.Args {
				r.InputS3.Preprocess.Args = append(r.InputS3.Preprocess.Args, types.StringValue(v))
			}
			r.InputS3.Preprocess.Command = types.StringPointerValue(resp.InputS3.Preprocess.Command)
			r.InputS3.Preprocess.Disabled = types.BoolPointerValue(resp.InputS3.Preprocess.Disabled)
		}
		r.InputS3.QueueName = types.StringValue(resp.InputS3.QueueName)
		r.InputS3.Region = types.StringPointerValue(resp.InputS3.Region)
		r.InputS3.RejectUnauthorized = types.BoolPointerValue(resp.InputS3.RejectUnauthorized)
		r.InputS3.ReuseConnections = types.BoolPointerValue(resp.InputS3.ReuseConnections)
		r.InputS3.SendToRoutes = types.BoolPointerValue(resp.InputS3.SendToRoutes)
		if resp.InputS3.SignatureVersion != nil {
			r.InputS3.SignatureVersion = types.StringValue(string(*resp.InputS3.SignatureVersion))
		} else {
			r.InputS3.SignatureVersion = types.StringNull()
		}
		r.InputS3.SkipOnError = types.BoolPointerValue(resp.InputS3.SkipOnError)
		r.InputS3.SocketTimeout = types.Float64PointerValue(resp.InputS3.SocketTimeout)
		r.InputS3.StaleChannelFlushMs = types.Float64PointerValue(resp.InputS3.StaleChannelFlushMs)
		if resp.InputS3.Status == nil {
			r.InputS3.Status = nil
		} else {
			r.InputS3.Status = &tfTypes.TFStatus{}
			r.InputS3.Status.Health = types.StringValue(string(resp.InputS3.Status.Health))
			if len(resp.InputS3.Status.Metrics) > 0 {
				r.InputS3.Status.Metrics = make(map[string]types.String, len(resp.InputS3.Status.Metrics))
				for key40, value40 := range resp.InputS3.Status.Metrics {
					result40, _ := json.Marshal(value40)
					r.InputS3.Status.Metrics[key40] = types.StringValue(string(result40))
				}
			}
			r.InputS3.Status.Timestamp = types.Float64Value(resp.InputS3.Status.Timestamp)
			r.InputS3.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputS3.Status.UseStatusFromLB)
		}
		r.InputS3.Streamtags = make([]types.String, 0, len(resp.InputS3.Streamtags))
		for _, v := range resp.InputS3.Streamtags {
			r.InputS3.Streamtags = append(r.InputS3.Streamtags, types.StringValue(v))
		}
		r.InputS3.Type = types.StringValue(string(resp.InputS3.Type))
		r.InputS3.VisibilityTimeout = types.Float64PointerValue(resp.InputS3.VisibilityTimeout)
	}
	if resp.InputS3Inventory != nil {
		r.InputS3Inventory = &tfTypes.InputS3Inventory{}
		r.InputS3Inventory.AssumeRoleArn = types.StringPointerValue(resp.InputS3Inventory.AssumeRoleArn)
		r.InputS3Inventory.AssumeRoleExternalID = types.StringPointerValue(resp.InputS3Inventory.AssumeRoleExternalID)
		r.InputS3Inventory.AwsAccountID = types.StringPointerValue(resp.InputS3Inventory.AwsAccountID)
		r.InputS3Inventory.AwsAPIKey = types.StringPointerValue(resp.InputS3Inventory.AwsAPIKey)
		if resp.InputS3Inventory.AwsAuthenticationMethod != nil {
			r.InputS3Inventory.AwsAuthenticationMethod = types.StringValue(string(*resp.InputS3Inventory.AwsAuthenticationMethod))
		} else {
			r.InputS3Inventory.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputS3Inventory.AwsSecret = types.StringPointerValue(resp.InputS3Inventory.AwsSecret)
		r.InputS3Inventory.AwsSecretKey = types.StringPointerValue(resp.InputS3Inventory.AwsSecretKey)
		r.InputS3Inventory.BreakerRulesets = make([]types.String, 0, len(resp.InputS3Inventory.BreakerRulesets))
		for _, v := range resp.InputS3Inventory.BreakerRulesets {
			r.InputS3Inventory.BreakerRulesets = append(r.InputS3Inventory.BreakerRulesets, types.StringValue(v))
		}
		if resp.InputS3Inventory.Checkpointing == nil {
			r.InputS3Inventory.Checkpointing = nil
		} else {
			r.InputS3Inventory.Checkpointing = &tfTypes.InputS3InventoryCheckpointing{}
			r.InputS3Inventory.Checkpointing.Enabled = types.BoolPointerValue(resp.InputS3Inventory.Checkpointing.Enabled)
			r.InputS3Inventory.Checkpointing.Retries = types.Float64PointerValue(resp.InputS3Inventory.Checkpointing.Retries)
		}
		r.InputS3Inventory.ChecksumSuffix = types.StringPointerValue(resp.InputS3Inventory.ChecksumSuffix)
		r.InputS3Inventory.Connections = []tfTypes.InputS3InventoryConnections{}
		if len(r.InputS3Inventory.Connections) > len(resp.InputS3Inventory.Connections) {
			r.InputS3Inventory.Connections = r.InputS3Inventory.Connections[:len(resp.InputS3Inventory.Connections)]
		}
		for connectionsCount41, connectionsItem41 := range resp.InputS3Inventory.Connections {
			var connections41 tfTypes.InputS3InventoryConnections
			connections41.Output = types.StringValue(connectionsItem41.Output)
			connections41.Pipeline = types.StringPointerValue(connectionsItem41.Pipeline)
			if connectionsCount41+1 > len(r.InputS3Inventory.Connections) {
				r.InputS3Inventory.Connections = append(r.InputS3Inventory.Connections, connections41)
			} else {
				r.InputS3Inventory.Connections[connectionsCount41].Output = connections41.Output
				r.InputS3Inventory.Connections[connectionsCount41].Pipeline = connections41.Pipeline
			}
		}
		r.InputS3Inventory.Description = types.StringPointerValue(resp.InputS3Inventory.Description)
		r.InputS3Inventory.Disabled = types.BoolPointerValue(resp.InputS3Inventory.Disabled)
		r.InputS3Inventory.DurationSeconds = types.Float64PointerValue(resp.InputS3Inventory.DurationSeconds)
		r.InputS3Inventory.EnableAssumeRole = types.BoolPointerValue(resp.InputS3Inventory.EnableAssumeRole)
		r.InputS3Inventory.EnableSQSAssumeRole = types.BoolPointerValue(resp.InputS3Inventory.EnableSQSAssumeRole)
		r.InputS3Inventory.Endpoint = types.StringPointerValue(resp.InputS3Inventory.Endpoint)
		r.InputS3Inventory.Environment = types.StringPointerValue(resp.InputS3Inventory.Environment)
		r.InputS3Inventory.FileFilter = types.StringPointerValue(resp.InputS3Inventory.FileFilter)
		r.InputS3Inventory.ID = types.StringPointerValue(resp.InputS3Inventory.ID)
		r.InputS3Inventory.MaxManifestSizeKB = types.Int64PointerValue(resp.InputS3Inventory.MaxManifestSizeKB)
		r.InputS3Inventory.MaxMessages = types.Float64PointerValue(resp.InputS3Inventory.MaxMessages)
		r.InputS3Inventory.Metadata = []tfTypes.InputS3InventoryMetadata{}
		if len(r.InputS3Inventory.Metadata) > len(resp.InputS3Inventory.Metadata) {
			r.InputS3Inventory.Metadata = r.InputS3Inventory.Metadata[:len(resp.InputS3Inventory.Metadata)]
		}
		for metadataCount43, metadataItem43 := range resp.InputS3Inventory.Metadata {
			var metadata43 tfTypes.InputS3InventoryMetadata
			metadata43.Name = types.StringValue(metadataItem43.Name)
			metadata43.Value = types.StringValue(metadataItem43.Value)
			if metadataCount43+1 > len(r.InputS3Inventory.Metadata) {
				r.InputS3Inventory.Metadata = append(r.InputS3Inventory.Metadata, metadata43)
			} else {
				r.InputS3Inventory.Metadata[metadataCount43].Name = metadata43.Name
				r.InputS3Inventory.Metadata[metadataCount43].Value = metadata43.Value
			}
		}
		r.InputS3Inventory.NumReceivers = types.Float64PointerValue(resp.InputS3Inventory.NumReceivers)
		r.InputS3Inventory.ParquetChunkDownloadTimeout = types.Float64PointerValue(resp.InputS3Inventory.ParquetChunkDownloadTimeout)
		r.InputS3Inventory.ParquetChunkSizeMB = types.Float64PointerValue(resp.InputS3Inventory.ParquetChunkSizeMB)
		r.InputS3Inventory.Pipeline = types.StringPointerValue(resp.InputS3Inventory.Pipeline)
		r.InputS3Inventory.PollTimeout = types.Float64PointerValue(resp.InputS3Inventory.PollTimeout)
		if resp.InputS3Inventory.Pq == nil {
			r.InputS3Inventory.Pq = nil
		} else {
			r.InputS3Inventory.Pq = &tfTypes.InputS3InventoryPq{}
			r.InputS3Inventory.Pq.CommitFrequency = types.Float64PointerValue(resp.InputS3Inventory.Pq.CommitFrequency)
			if resp.InputS3Inventory.Pq.Compress != nil {
				r.InputS3Inventory.Pq.Compress = types.StringValue(string(*resp.InputS3Inventory.Pq.Compress))
			} else {
				r.InputS3Inventory.Pq.Compress = types.StringNull()
			}
			r.InputS3Inventory.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputS3Inventory.Pq.MaxBufferSize)
			r.InputS3Inventory.Pq.MaxFileSize = types.StringPointerValue(resp.InputS3Inventory.Pq.MaxFileSize)
			r.InputS3Inventory.Pq.MaxSize = types.StringPointerValue(resp.InputS3Inventory.Pq.MaxSize)
			if resp.InputS3Inventory.Pq.Mode != nil {
				r.InputS3Inventory.Pq.Mode = types.StringValue(string(*resp.InputS3Inventory.Pq.Mode))
			} else {
				r.InputS3Inventory.Pq.Mode = types.StringNull()
			}
			r.InputS3Inventory.Pq.Path = types.StringPointerValue(resp.InputS3Inventory.Pq.Path)
		}
		r.InputS3Inventory.PqEnabled = types.BoolPointerValue(resp.InputS3Inventory.PqEnabled)
		if resp.InputS3Inventory.Preprocess == nil {
			r.InputS3Inventory.Preprocess = nil
		} else {
			r.InputS3Inventory.Preprocess = &tfTypes.InputS3InventoryPreprocess{}
			r.InputS3Inventory.Preprocess.Args = make([]types.String, 0, len(resp.InputS3Inventory.Preprocess.Args))
			for _, v := range resp.InputS3Inventory.Preprocess.Args {
				r.InputS3Inventory.Preprocess.Args = append(r.InputS3Inventory.Preprocess.Args, types.StringValue(v))
			}
			r.InputS3Inventory.Preprocess.Command = types.StringPointerValue(resp.InputS3Inventory.Preprocess.Command)
			r.InputS3Inventory.Preprocess.Disabled = types.BoolPointerValue(resp.InputS3Inventory.Preprocess.Disabled)
		}
		r.InputS3Inventory.QueueName = types.StringValue(resp.InputS3Inventory.QueueName)
		r.InputS3Inventory.Region = types.StringPointerValue(resp.InputS3Inventory.Region)
		r.InputS3Inventory.RejectUnauthorized = types.BoolPointerValue(resp.InputS3Inventory.RejectUnauthorized)
		r.InputS3Inventory.ReuseConnections = types.BoolPointerValue(resp.InputS3Inventory.ReuseConnections)
		r.InputS3Inventory.SendToRoutes = types.BoolPointerValue(resp.InputS3Inventory.SendToRoutes)
		if resp.InputS3Inventory.SignatureVersion != nil {
			r.InputS3Inventory.SignatureVersion = types.StringValue(string(*resp.InputS3Inventory.SignatureVersion))
		} else {
			r.InputS3Inventory.SignatureVersion = types.StringNull()
		}
		r.InputS3Inventory.SkipOnError = types.BoolPointerValue(resp.InputS3Inventory.SkipOnError)
		r.InputS3Inventory.SocketTimeout = types.Float64PointerValue(resp.InputS3Inventory.SocketTimeout)
		r.InputS3Inventory.StaleChannelFlushMs = types.Float64PointerValue(resp.InputS3Inventory.StaleChannelFlushMs)
		if resp.InputS3Inventory.Status == nil {
			r.InputS3Inventory.Status = nil
		} else {
			r.InputS3Inventory.Status = &tfTypes.TFStatus{}
			r.InputS3Inventory.Status.Health = types.StringValue(string(resp.InputS3Inventory.Status.Health))
			if len(resp.InputS3Inventory.Status.Metrics) > 0 {
				r.InputS3Inventory.Status.Metrics = make(map[string]types.String, len(resp.InputS3Inventory.Status.Metrics))
				for key41, value41 := range resp.InputS3Inventory.Status.Metrics {
					result41, _ := json.Marshal(value41)
					r.InputS3Inventory.Status.Metrics[key41] = types.StringValue(string(result41))
				}
			}
			r.InputS3Inventory.Status.Timestamp = types.Float64Value(resp.InputS3Inventory.Status.Timestamp)
			r.InputS3Inventory.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputS3Inventory.Status.UseStatusFromLB)
		}
		r.InputS3Inventory.Streamtags = make([]types.String, 0, len(resp.InputS3Inventory.Streamtags))
		for _, v := range resp.InputS3Inventory.Streamtags {
			r.InputS3Inventory.Streamtags = append(r.InputS3Inventory.Streamtags, types.StringValue(v))
		}
		r.InputS3Inventory.Type = types.StringValue(string(resp.InputS3Inventory.Type))
		r.InputS3Inventory.ValidateInventoryFiles = types.BoolPointerValue(resp.InputS3Inventory.ValidateInventoryFiles)
		r.InputS3Inventory.VisibilityTimeout = types.Float64PointerValue(resp.InputS3Inventory.VisibilityTimeout)
	}
	if resp.InputSecurityLake != nil {
		r.InputSecurityLake = &tfTypes.InputSecurityLake{}
		r.InputSecurityLake.AssumeRoleArn = types.StringPointerValue(resp.InputSecurityLake.AssumeRoleArn)
		r.InputSecurityLake.AssumeRoleExternalID = types.StringPointerValue(resp.InputSecurityLake.AssumeRoleExternalID)
		r.InputSecurityLake.AwsAccountID = types.StringPointerValue(resp.InputSecurityLake.AwsAccountID)
		r.InputSecurityLake.AwsAPIKey = types.StringPointerValue(resp.InputSecurityLake.AwsAPIKey)
		if resp.InputSecurityLake.AwsAuthenticationMethod != nil {
			r.InputSecurityLake.AwsAuthenticationMethod = types.StringValue(string(*resp.InputSecurityLake.AwsAuthenticationMethod))
		} else {
			r.InputSecurityLake.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputSecurityLake.AwsSecret = types.StringPointerValue(resp.InputSecurityLake.AwsSecret)
		r.InputSecurityLake.AwsSecretKey = types.StringPointerValue(resp.InputSecurityLake.AwsSecretKey)
		r.InputSecurityLake.BreakerRulesets = make([]types.String, 0, len(resp.InputSecurityLake.BreakerRulesets))
		for _, v := range resp.InputSecurityLake.BreakerRulesets {
			r.InputSecurityLake.BreakerRulesets = append(r.InputSecurityLake.BreakerRulesets, types.StringValue(v))
		}
		if resp.InputSecurityLake.Checkpointing == nil {
			r.InputSecurityLake.Checkpointing = nil
		} else {
			r.InputSecurityLake.Checkpointing = &tfTypes.InputSecurityLakeCheckpointing{}
			r.InputSecurityLake.Checkpointing.Enabled = types.BoolPointerValue(resp.InputSecurityLake.Checkpointing.Enabled)
			r.InputSecurityLake.Checkpointing.Retries = types.Float64PointerValue(resp.InputSecurityLake.Checkpointing.Retries)
		}
		r.InputSecurityLake.Connections = []tfTypes.InputSecurityLakeConnections{}
		if len(r.InputSecurityLake.Connections) > len(resp.InputSecurityLake.Connections) {
			r.InputSecurityLake.Connections = r.InputSecurityLake.Connections[:len(resp.InputSecurityLake.Connections)]
		}
		for connectionsCount42, connectionsItem42 := range resp.InputSecurityLake.Connections {
			var connections42 tfTypes.InputSecurityLakeConnections
			connections42.Output = types.StringValue(connectionsItem42.Output)
			connections42.Pipeline = types.StringPointerValue(connectionsItem42.Pipeline)
			if connectionsCount42+1 > len(r.InputSecurityLake.Connections) {
				r.InputSecurityLake.Connections = append(r.InputSecurityLake.Connections, connections42)
			} else {
				r.InputSecurityLake.Connections[connectionsCount42].Output = connections42.Output
				r.InputSecurityLake.Connections[connectionsCount42].Pipeline = connections42.Pipeline
			}
		}
		r.InputSecurityLake.Description = types.StringPointerValue(resp.InputSecurityLake.Description)
		r.InputSecurityLake.Disabled = types.BoolPointerValue(resp.InputSecurityLake.Disabled)
		r.InputSecurityLake.DurationSeconds = types.Float64PointerValue(resp.InputSecurityLake.DurationSeconds)
		r.InputSecurityLake.EnableAssumeRole = types.BoolPointerValue(resp.InputSecurityLake.EnableAssumeRole)
		r.InputSecurityLake.EnableSQSAssumeRole = types.BoolPointerValue(resp.InputSecurityLake.EnableSQSAssumeRole)
		r.InputSecurityLake.Encoding = types.StringPointerValue(resp.InputSecurityLake.Encoding)
		r.InputSecurityLake.Endpoint = types.StringPointerValue(resp.InputSecurityLake.Endpoint)
		r.InputSecurityLake.Environment = types.StringPointerValue(resp.InputSecurityLake.Environment)
		r.InputSecurityLake.FileFilter = types.StringPointerValue(resp.InputSecurityLake.FileFilter)
		r.InputSecurityLake.ID = types.StringPointerValue(resp.InputSecurityLake.ID)
		r.InputSecurityLake.MaxMessages = types.Float64PointerValue(resp.InputSecurityLake.MaxMessages)
		r.InputSecurityLake.Metadata = []tfTypes.InputSecurityLakeMetadata{}
		if len(r.InputSecurityLake.Metadata) > len(resp.InputSecurityLake.Metadata) {
			r.InputSecurityLake.Metadata = r.InputSecurityLake.Metadata[:len(resp.InputSecurityLake.Metadata)]
		}
		for metadataCount44, metadataItem44 := range resp.InputSecurityLake.Metadata {
			var metadata44 tfTypes.InputSecurityLakeMetadata
			metadata44.Name = types.StringValue(metadataItem44.Name)
			metadata44.Value = types.StringValue(metadataItem44.Value)
			if metadataCount44+1 > len(r.InputSecurityLake.Metadata) {
				r.InputSecurityLake.Metadata = append(r.InputSecurityLake.Metadata, metadata44)
			} else {
				r.InputSecurityLake.Metadata[metadataCount44].Name = metadata44.Name
				r.InputSecurityLake.Metadata[metadataCount44].Value = metadata44.Value
			}
		}
		r.InputSecurityLake.NumReceivers = types.Float64PointerValue(resp.InputSecurityLake.NumReceivers)
		r.InputSecurityLake.ParquetChunkDownloadTimeout = types.Float64PointerValue(resp.InputSecurityLake.ParquetChunkDownloadTimeout)
		r.InputSecurityLake.ParquetChunkSizeMB = types.Float64PointerValue(resp.InputSecurityLake.ParquetChunkSizeMB)
		r.InputSecurityLake.Pipeline = types.StringPointerValue(resp.InputSecurityLake.Pipeline)
		r.InputSecurityLake.PollTimeout = types.Float64PointerValue(resp.InputSecurityLake.PollTimeout)
		if resp.InputSecurityLake.Pq == nil {
			r.InputSecurityLake.Pq = nil
		} else {
			r.InputSecurityLake.Pq = &tfTypes.InputSecurityLakePq{}
			r.InputSecurityLake.Pq.CommitFrequency = types.Float64PointerValue(resp.InputSecurityLake.Pq.CommitFrequency)
			if resp.InputSecurityLake.Pq.Compress != nil {
				r.InputSecurityLake.Pq.Compress = types.StringValue(string(*resp.InputSecurityLake.Pq.Compress))
			} else {
				r.InputSecurityLake.Pq.Compress = types.StringNull()
			}
			r.InputSecurityLake.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputSecurityLake.Pq.MaxBufferSize)
			r.InputSecurityLake.Pq.MaxFileSize = types.StringPointerValue(resp.InputSecurityLake.Pq.MaxFileSize)
			r.InputSecurityLake.Pq.MaxSize = types.StringPointerValue(resp.InputSecurityLake.Pq.MaxSize)
			if resp.InputSecurityLake.Pq.Mode != nil {
				r.InputSecurityLake.Pq.Mode = types.StringValue(string(*resp.InputSecurityLake.Pq.Mode))
			} else {
				r.InputSecurityLake.Pq.Mode = types.StringNull()
			}
			r.InputSecurityLake.Pq.Path = types.StringPointerValue(resp.InputSecurityLake.Pq.Path)
		}
		r.InputSecurityLake.PqEnabled = types.BoolPointerValue(resp.InputSecurityLake.PqEnabled)
		if resp.InputSecurityLake.Preprocess == nil {
			r.InputSecurityLake.Preprocess = nil
		} else {
			r.InputSecurityLake.Preprocess = &tfTypes.InputSecurityLakePreprocess{}
			r.InputSecurityLake.Preprocess.Args = make([]types.String, 0, len(resp.InputSecurityLake.Preprocess.Args))
			for _, v := range resp.InputSecurityLake.Preprocess.Args {
				r.InputSecurityLake.Preprocess.Args = append(r.InputSecurityLake.Preprocess.Args, types.StringValue(v))
			}
			r.InputSecurityLake.Preprocess.Command = types.StringPointerValue(resp.InputSecurityLake.Preprocess.Command)
			r.InputSecurityLake.Preprocess.Disabled = types.BoolPointerValue(resp.InputSecurityLake.Preprocess.Disabled)
		}
		r.InputSecurityLake.QueueName = types.StringValue(resp.InputSecurityLake.QueueName)
		r.InputSecurityLake.Region = types.StringPointerValue(resp.InputSecurityLake.Region)
		r.InputSecurityLake.RejectUnauthorized = types.BoolPointerValue(resp.InputSecurityLake.RejectUnauthorized)
		r.InputSecurityLake.ReuseConnections = types.BoolPointerValue(resp.InputSecurityLake.ReuseConnections)
		r.InputSecurityLake.SendToRoutes = types.BoolPointerValue(resp.InputSecurityLake.SendToRoutes)
		if resp.InputSecurityLake.SignatureVersion != nil {
			r.InputSecurityLake.SignatureVersion = types.StringValue(string(*resp.InputSecurityLake.SignatureVersion))
		} else {
			r.InputSecurityLake.SignatureVersion = types.StringNull()
		}
		r.InputSecurityLake.SkipOnError = types.BoolPointerValue(resp.InputSecurityLake.SkipOnError)
		r.InputSecurityLake.SocketTimeout = types.Float64PointerValue(resp.InputSecurityLake.SocketTimeout)
		r.InputSecurityLake.StaleChannelFlushMs = types.Float64PointerValue(resp.InputSecurityLake.StaleChannelFlushMs)
		if resp.InputSecurityLake.Status == nil {
			r.InputSecurityLake.Status = nil
		} else {
			r.InputSecurityLake.Status = &tfTypes.TFStatus{}
			r.InputSecurityLake.Status.Health = types.StringValue(string(resp.InputSecurityLake.Status.Health))
			if len(resp.InputSecurityLake.Status.Metrics) > 0 {
				r.InputSecurityLake.Status.Metrics = make(map[string]types.String, len(resp.InputSecurityLake.Status.Metrics))
				for key42, value42 := range resp.InputSecurityLake.Status.Metrics {
					result42, _ := json.Marshal(value42)
					r.InputSecurityLake.Status.Metrics[key42] = types.StringValue(string(result42))
				}
			}
			r.InputSecurityLake.Status.Timestamp = types.Float64Value(resp.InputSecurityLake.Status.Timestamp)
			r.InputSecurityLake.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputSecurityLake.Status.UseStatusFromLB)
		}
		r.InputSecurityLake.Streamtags = make([]types.String, 0, len(resp.InputSecurityLake.Streamtags))
		for _, v := range resp.InputSecurityLake.Streamtags {
			r.InputSecurityLake.Streamtags = append(r.InputSecurityLake.Streamtags, types.StringValue(v))
		}
		r.InputSecurityLake.Type = types.StringValue(string(resp.InputSecurityLake.Type))
		r.InputSecurityLake.VisibilityTimeout = types.Float64PointerValue(resp.InputSecurityLake.VisibilityTimeout)
	}
	if resp.InputSnmp != nil {
		r.InputSnmp = &tfTypes.InputSnmp{}
		r.InputSnmp.Connections = []tfTypes.InputSnmpConnections{}
		if len(r.InputSnmp.Connections) > len(resp.InputSnmp.Connections) {
			r.InputSnmp.Connections = r.InputSnmp.Connections[:len(resp.InputSnmp.Connections)]
		}
		for connectionsCount43, connectionsItem43 := range resp.InputSnmp.Connections {
			var connections43 tfTypes.InputSnmpConnections
			connections43.Output = types.StringValue(connectionsItem43.Output)
			connections43.Pipeline = types.StringPointerValue(connectionsItem43.Pipeline)
			if connectionsCount43+1 > len(r.InputSnmp.Connections) {
				r.InputSnmp.Connections = append(r.InputSnmp.Connections, connections43)
			} else {
				r.InputSnmp.Connections[connectionsCount43].Output = connections43.Output
				r.InputSnmp.Connections[connectionsCount43].Pipeline = connections43.Pipeline
			}
		}
		r.InputSnmp.Description = types.StringPointerValue(resp.InputSnmp.Description)
		r.InputSnmp.Disabled = types.BoolPointerValue(resp.InputSnmp.Disabled)
		r.InputSnmp.Environment = types.StringPointerValue(resp.InputSnmp.Environment)
		r.InputSnmp.Host = types.StringPointerValue(resp.InputSnmp.Host)
		r.InputSnmp.ID = types.StringPointerValue(resp.InputSnmp.ID)
		r.InputSnmp.IPWhitelistRegex = types.StringPointerValue(resp.InputSnmp.IPWhitelistRegex)
		r.InputSnmp.MaxBufferSize = types.Float64PointerValue(resp.InputSnmp.MaxBufferSize)
		r.InputSnmp.Metadata = []tfTypes.InputSnmpMetadata{}
		if len(r.InputSnmp.Metadata) > len(resp.InputSnmp.Metadata) {
			r.InputSnmp.Metadata = r.InputSnmp.Metadata[:len(resp.InputSnmp.Metadata)]
		}
		for metadataCount45, metadataItem45 := range resp.InputSnmp.Metadata {
			var metadata45 tfTypes.InputSnmpMetadata
			metadata45.Name = types.StringValue(metadataItem45.Name)
			metadata45.Value = types.StringValue(metadataItem45.Value)
			if metadataCount45+1 > len(r.InputSnmp.Metadata) {
				r.InputSnmp.Metadata = append(r.InputSnmp.Metadata, metadata45)
			} else {
				r.InputSnmp.Metadata[metadataCount45].Name = metadata45.Name
				r.InputSnmp.Metadata[metadataCount45].Value = metadata45.Value
			}
		}
		r.InputSnmp.Pipeline = types.StringPointerValue(resp.InputSnmp.Pipeline)
		r.InputSnmp.Port = types.Float64PointerValue(resp.InputSnmp.Port)
		if resp.InputSnmp.Pq == nil {
			r.InputSnmp.Pq = nil
		} else {
			r.InputSnmp.Pq = &tfTypes.InputSnmpPq{}
			r.InputSnmp.Pq.CommitFrequency = types.Float64PointerValue(resp.InputSnmp.Pq.CommitFrequency)
			if resp.InputSnmp.Pq.Compress != nil {
				r.InputSnmp.Pq.Compress = types.StringValue(string(*resp.InputSnmp.Pq.Compress))
			} else {
				r.InputSnmp.Pq.Compress = types.StringNull()
			}
			r.InputSnmp.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputSnmp.Pq.MaxBufferSize)
			r.InputSnmp.Pq.MaxFileSize = types.StringPointerValue(resp.InputSnmp.Pq.MaxFileSize)
			r.InputSnmp.Pq.MaxSize = types.StringPointerValue(resp.InputSnmp.Pq.MaxSize)
			if resp.InputSnmp.Pq.Mode != nil {
				r.InputSnmp.Pq.Mode = types.StringValue(string(*resp.InputSnmp.Pq.Mode))
			} else {
				r.InputSnmp.Pq.Mode = types.StringNull()
			}
			r.InputSnmp.Pq.Path = types.StringPointerValue(resp.InputSnmp.Pq.Path)
		}
		r.InputSnmp.PqEnabled = types.BoolPointerValue(resp.InputSnmp.PqEnabled)
		r.InputSnmp.SendToRoutes = types.BoolPointerValue(resp.InputSnmp.SendToRoutes)
		if resp.InputSnmp.SnmpV3Auth == nil {
			r.InputSnmp.SnmpV3Auth = nil
		} else {
			r.InputSnmp.SnmpV3Auth = &tfTypes.SNMPv3Authentication{}
			r.InputSnmp.SnmpV3Auth.AllowUnmatchedTrap = types.BoolPointerValue(resp.InputSnmp.SnmpV3Auth.AllowUnmatchedTrap)
			r.InputSnmp.SnmpV3Auth.V3AuthEnabled = types.BoolPointerValue(resp.InputSnmp.SnmpV3Auth.V3AuthEnabled)
			r.InputSnmp.SnmpV3Auth.V3Users = []tfTypes.V3Users{}
			if len(r.InputSnmp.SnmpV3Auth.V3Users) > len(resp.InputSnmp.SnmpV3Auth.V3Users) {
				r.InputSnmp.SnmpV3Auth.V3Users = r.InputSnmp.SnmpV3Auth.V3Users[:len(resp.InputSnmp.SnmpV3Auth.V3Users)]
			}
			for v3UsersCount, v3UsersItem := range resp.InputSnmp.SnmpV3Auth.V3Users {
				var v3Users tfTypes.V3Users
				if v3UsersItem.AuthKey == nil {
					v3Users.AuthKey = types.StringNull()
				} else {
					authKeyResult, _ := json.Marshal(v3UsersItem.AuthKey)
					v3Users.AuthKey = types.StringValue(string(authKeyResult))
				}
				if v3UsersItem.AuthProtocol != nil {
					v3Users.AuthProtocol = types.StringValue(string(*v3UsersItem.AuthProtocol))
				} else {
					v3Users.AuthProtocol = types.StringNull()
				}
				v3Users.Name = types.StringValue(v3UsersItem.Name)
				v3Users.PrivProtocol = types.StringPointerValue(v3UsersItem.PrivProtocol)
				if v3UsersCount+1 > len(r.InputSnmp.SnmpV3Auth.V3Users) {
					r.InputSnmp.SnmpV3Auth.V3Users = append(r.InputSnmp.SnmpV3Auth.V3Users, v3Users)
				} else {
					r.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].AuthKey = v3Users.AuthKey
					r.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].AuthProtocol = v3Users.AuthProtocol
					r.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].Name = v3Users.Name
					r.InputSnmp.SnmpV3Auth.V3Users[v3UsersCount].PrivProtocol = v3Users.PrivProtocol
				}
			}
		}
		if resp.InputSnmp.Status == nil {
			r.InputSnmp.Status = nil
		} else {
			r.InputSnmp.Status = &tfTypes.TFStatus{}
			r.InputSnmp.Status.Health = types.StringValue(string(resp.InputSnmp.Status.Health))
			if len(resp.InputSnmp.Status.Metrics) > 0 {
				r.InputSnmp.Status.Metrics = make(map[string]types.String, len(resp.InputSnmp.Status.Metrics))
				for key43, value43 := range resp.InputSnmp.Status.Metrics {
					result43, _ := json.Marshal(value43)
					r.InputSnmp.Status.Metrics[key43] = types.StringValue(string(result43))
				}
			}
			r.InputSnmp.Status.Timestamp = types.Float64Value(resp.InputSnmp.Status.Timestamp)
			r.InputSnmp.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputSnmp.Status.UseStatusFromLB)
		}
		r.InputSnmp.Streamtags = make([]types.String, 0, len(resp.InputSnmp.Streamtags))
		for _, v := range resp.InputSnmp.Streamtags {
			r.InputSnmp.Streamtags = append(r.InputSnmp.Streamtags, types.StringValue(v))
		}
		if resp.InputSnmp.Type != nil {
			r.InputSnmp.Type = types.StringValue(string(*resp.InputSnmp.Type))
		} else {
			r.InputSnmp.Type = types.StringNull()
		}
		r.InputSnmp.UDPSocketRxBufSize = types.Float64PointerValue(resp.InputSnmp.UDPSocketRxBufSize)
		r.InputSnmp.VarbindsWithTypes = types.BoolPointerValue(resp.InputSnmp.VarbindsWithTypes)
	}
	if resp.InputSplunk != nil {
		r.InputSplunk = &tfTypes.InputSplunk{}
		r.InputSplunk.AuthTokens = []tfTypes.AuthTokens{}
		if len(r.InputSplunk.AuthTokens) > len(resp.InputSplunk.AuthTokens) {
			r.InputSplunk.AuthTokens = r.InputSplunk.AuthTokens[:len(resp.InputSplunk.AuthTokens)]
		}
		for authTokensCount, authTokensItem := range resp.InputSplunk.AuthTokens {
			var authTokens tfTypes.AuthTokens
			authTokens.Description = types.StringPointerValue(authTokensItem.Description)
			authTokens.Token = types.StringValue(authTokensItem.Token)
			if authTokensCount+1 > len(r.InputSplunk.AuthTokens) {
				r.InputSplunk.AuthTokens = append(r.InputSplunk.AuthTokens, authTokens)
			} else {
				r.InputSplunk.AuthTokens[authTokensCount].Description = authTokens.Description
				r.InputSplunk.AuthTokens[authTokensCount].Token = authTokens.Token
			}
		}
		r.InputSplunk.BreakerRulesets = make([]types.String, 0, len(resp.InputSplunk.BreakerRulesets))
		for _, v := range resp.InputSplunk.BreakerRulesets {
			r.InputSplunk.BreakerRulesets = append(r.InputSplunk.BreakerRulesets, types.StringValue(v))
		}
		if resp.InputSplunk.Compress != nil {
			r.InputSplunk.Compress = types.StringValue(string(*resp.InputSplunk.Compress))
		} else {
			r.InputSplunk.Compress = types.StringNull()
		}
		r.InputSplunk.Connections = []tfTypes.InputSplunkConnections{}
		if len(r.InputSplunk.Connections) > len(resp.InputSplunk.Connections) {
			r.InputSplunk.Connections = r.InputSplunk.Connections[:len(resp.InputSplunk.Connections)]
		}
		for connectionsCount44, connectionsItem44 := range resp.InputSplunk.Connections {
			var connections44 tfTypes.InputSplunkConnections
			connections44.Output = types.StringValue(connectionsItem44.Output)
			connections44.Pipeline = types.StringPointerValue(connectionsItem44.Pipeline)
			if connectionsCount44+1 > len(r.InputSplunk.Connections) {
				r.InputSplunk.Connections = append(r.InputSplunk.Connections, connections44)
			} else {
				r.InputSplunk.Connections[connectionsCount44].Output = connections44.Output
				r.InputSplunk.Connections[connectionsCount44].Pipeline = connections44.Pipeline
			}
		}
		r.InputSplunk.Description = types.StringPointerValue(resp.InputSplunk.Description)
		r.InputSplunk.Disabled = types.BoolPointerValue(resp.InputSplunk.Disabled)
		r.InputSplunk.DropControlFields = types.BoolPointerValue(resp.InputSplunk.DropControlFields)
		r.InputSplunk.EnableProxyHeader = types.BoolPointerValue(resp.InputSplunk.EnableProxyHeader)
		r.InputSplunk.Environment = types.StringPointerValue(resp.InputSplunk.Environment)
		r.InputSplunk.ExtractMetrics = types.BoolPointerValue(resp.InputSplunk.ExtractMetrics)
		r.InputSplunk.Host = types.StringPointerValue(resp.InputSplunk.Host)
		r.InputSplunk.ID = types.StringPointerValue(resp.InputSplunk.ID)
		r.InputSplunk.IPWhitelistRegex = types.StringPointerValue(resp.InputSplunk.IPWhitelistRegex)
		r.InputSplunk.MaxActiveCxn = types.Float64PointerValue(resp.InputSplunk.MaxActiveCxn)
		if resp.InputSplunk.MaxS2Sversion != nil {
			r.InputSplunk.MaxS2Sversion = types.StringValue(string(*resp.InputSplunk.MaxS2Sversion))
		} else {
			r.InputSplunk.MaxS2Sversion = types.StringNull()
		}
		r.InputSplunk.Metadata = []tfTypes.InputSplunkMetadata{}
		if len(r.InputSplunk.Metadata) > len(resp.InputSplunk.Metadata) {
			r.InputSplunk.Metadata = r.InputSplunk.Metadata[:len(resp.InputSplunk.Metadata)]
		}
		for metadataCount46, metadataItem46 := range resp.InputSplunk.Metadata {
			var metadata46 tfTypes.InputSplunkMetadata
			metadata46.Name = types.StringValue(metadataItem46.Name)
			metadata46.Value = types.StringValue(metadataItem46.Value)
			if metadataCount46+1 > len(r.InputSplunk.Metadata) {
				r.InputSplunk.Metadata = append(r.InputSplunk.Metadata, metadata46)
			} else {
				r.InputSplunk.Metadata[metadataCount46].Name = metadata46.Name
				r.InputSplunk.Metadata[metadataCount46].Value = metadata46.Value
			}
		}
		r.InputSplunk.Pipeline = types.StringPointerValue(resp.InputSplunk.Pipeline)
		r.InputSplunk.Port = types.Float64Value(resp.InputSplunk.Port)
		if resp.InputSplunk.Pq == nil {
			r.InputSplunk.Pq = nil
		} else {
			r.InputSplunk.Pq = &tfTypes.InputSplunkPq{}
			r.InputSplunk.Pq.CommitFrequency = types.Float64PointerValue(resp.InputSplunk.Pq.CommitFrequency)
			if resp.InputSplunk.Pq.Compress != nil {
				r.InputSplunk.Pq.Compress = types.StringValue(string(*resp.InputSplunk.Pq.Compress))
			} else {
				r.InputSplunk.Pq.Compress = types.StringNull()
			}
			r.InputSplunk.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputSplunk.Pq.MaxBufferSize)
			r.InputSplunk.Pq.MaxFileSize = types.StringPointerValue(resp.InputSplunk.Pq.MaxFileSize)
			r.InputSplunk.Pq.MaxSize = types.StringPointerValue(resp.InputSplunk.Pq.MaxSize)
			if resp.InputSplunk.Pq.Mode != nil {
				r.InputSplunk.Pq.Mode = types.StringValue(string(*resp.InputSplunk.Pq.Mode))
			} else {
				r.InputSplunk.Pq.Mode = types.StringNull()
			}
			r.InputSplunk.Pq.Path = types.StringPointerValue(resp.InputSplunk.Pq.Path)
		}
		r.InputSplunk.PqEnabled = types.BoolPointerValue(resp.InputSplunk.PqEnabled)
		r.InputSplunk.SendToRoutes = types.BoolPointerValue(resp.InputSplunk.SendToRoutes)
		r.InputSplunk.SocketEndingMaxWait = types.Float64PointerValue(resp.InputSplunk.SocketEndingMaxWait)
		r.InputSplunk.SocketIdleTimeout = types.Float64PointerValue(resp.InputSplunk.SocketIdleTimeout)
		r.InputSplunk.SocketMaxLifespan = types.Float64PointerValue(resp.InputSplunk.SocketMaxLifespan)
		r.InputSplunk.StaleChannelFlushMs = types.Float64PointerValue(resp.InputSplunk.StaleChannelFlushMs)
		if resp.InputSplunk.Status == nil {
			r.InputSplunk.Status = nil
		} else {
			r.InputSplunk.Status = &tfTypes.TFStatus{}
			r.InputSplunk.Status.Health = types.StringValue(string(resp.InputSplunk.Status.Health))
			if len(resp.InputSplunk.Status.Metrics) > 0 {
				r.InputSplunk.Status.Metrics = make(map[string]types.String, len(resp.InputSplunk.Status.Metrics))
				for key44, value44 := range resp.InputSplunk.Status.Metrics {
					result44, _ := json.Marshal(value44)
					r.InputSplunk.Status.Metrics[key44] = types.StringValue(string(result44))
				}
			}
			r.InputSplunk.Status.Timestamp = types.Float64Value(resp.InputSplunk.Status.Timestamp)
			r.InputSplunk.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputSplunk.Status.UseStatusFromLB)
		}
		r.InputSplunk.Streamtags = make([]types.String, 0, len(resp.InputSplunk.Streamtags))
		for _, v := range resp.InputSplunk.Streamtags {
			r.InputSplunk.Streamtags = append(r.InputSplunk.Streamtags, types.StringValue(v))
		}
		if resp.InputSplunk.TLS == nil {
			r.InputSplunk.TLS = nil
		} else {
			r.InputSplunk.TLS = &tfTypes.InputSplunkTLSSettingsServerSide{}
			r.InputSplunk.TLS.CaPath = types.StringPointerValue(resp.InputSplunk.TLS.CaPath)
			r.InputSplunk.TLS.CertificateName = types.StringPointerValue(resp.InputSplunk.TLS.CertificateName)
			r.InputSplunk.TLS.CertPath = types.StringPointerValue(resp.InputSplunk.TLS.CertPath)
			if resp.InputSplunk.TLS.CommonNameRegex == nil {
				r.InputSplunk.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult15, _ := json.Marshal(resp.InputSplunk.TLS.CommonNameRegex)
				r.InputSplunk.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult15))
			}
			r.InputSplunk.TLS.Disabled = types.BoolPointerValue(resp.InputSplunk.TLS.Disabled)
			if resp.InputSplunk.TLS.MaxVersion != nil {
				r.InputSplunk.TLS.MaxVersion = types.StringValue(string(*resp.InputSplunk.TLS.MaxVersion))
			} else {
				r.InputSplunk.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputSplunk.TLS.MinVersion != nil {
				r.InputSplunk.TLS.MinVersion = types.StringValue(string(*resp.InputSplunk.TLS.MinVersion))
			} else {
				r.InputSplunk.TLS.MinVersion = types.StringNull()
			}
			r.InputSplunk.TLS.Passphrase = types.StringPointerValue(resp.InputSplunk.TLS.Passphrase)
			r.InputSplunk.TLS.PrivKeyPath = types.StringPointerValue(resp.InputSplunk.TLS.PrivKeyPath)
			if resp.InputSplunk.TLS.RejectUnauthorized == nil {
				r.InputSplunk.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult15, _ := json.Marshal(resp.InputSplunk.TLS.RejectUnauthorized)
				r.InputSplunk.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult15))
			}
			r.InputSplunk.TLS.RequestCert = types.BoolPointerValue(resp.InputSplunk.TLS.RequestCert)
		}
		if resp.InputSplunk.Type != nil {
			r.InputSplunk.Type = types.StringValue(string(*resp.InputSplunk.Type))
		} else {
			r.InputSplunk.Type = types.StringNull()
		}
		r.InputSplunk.UseFwdTimezone = types.BoolPointerValue(resp.InputSplunk.UseFwdTimezone)
	}
	if resp.InputSplunkHec != nil {
		r.InputSplunkHec = &tfTypes.InputSplunkHec{}
		r.InputSplunkHec.AccessControlAllowHeaders = make([]types.String, 0, len(resp.InputSplunkHec.AccessControlAllowHeaders))
		for _, v := range resp.InputSplunkHec.AccessControlAllowHeaders {
			r.InputSplunkHec.AccessControlAllowHeaders = append(r.InputSplunkHec.AccessControlAllowHeaders, types.StringValue(v))
		}
		r.InputSplunkHec.AccessControlAllowOrigin = make([]types.String, 0, len(resp.InputSplunkHec.AccessControlAllowOrigin))
		for _, v := range resp.InputSplunkHec.AccessControlAllowOrigin {
			r.InputSplunkHec.AccessControlAllowOrigin = append(r.InputSplunkHec.AccessControlAllowOrigin, types.StringValue(v))
		}
		r.InputSplunkHec.ActivityLogSampleRate = types.Float64PointerValue(resp.InputSplunkHec.ActivityLogSampleRate)
		r.InputSplunkHec.AllowedIndexes = make([]types.String, 0, len(resp.InputSplunkHec.AllowedIndexes))
		for _, v := range resp.InputSplunkHec.AllowedIndexes {
			r.InputSplunkHec.AllowedIndexes = append(r.InputSplunkHec.AllowedIndexes, types.StringValue(v))
		}
		r.InputSplunkHec.AuthTokens = []tfTypes.InputSplunkHecAuthTokens{}
		if len(r.InputSplunkHec.AuthTokens) > len(resp.InputSplunkHec.AuthTokens) {
			r.InputSplunkHec.AuthTokens = r.InputSplunkHec.AuthTokens[:len(resp.InputSplunkHec.AuthTokens)]
		}
		for authTokensCount1, authTokensItem1 := range resp.InputSplunkHec.AuthTokens {
			var authTokens1 tfTypes.InputSplunkHecAuthTokens
			authTokens1.AllowedIndexesAtToken = make([]types.String, 0, len(authTokensItem1.AllowedIndexesAtToken))
			for _, v := range authTokensItem1.AllowedIndexesAtToken {
				authTokens1.AllowedIndexesAtToken = append(authTokens1.AllowedIndexesAtToken, types.StringValue(v))
			}
			if authTokensItem1.AuthType != nil {
				authTokens1.AuthType = types.StringValue(string(*authTokensItem1.AuthType))
			} else {
				authTokens1.AuthType = types.StringNull()
			}
			authTokens1.Description = types.StringPointerValue(authTokensItem1.Description)
			authTokens1.Enabled = types.BoolPointerValue(authTokensItem1.Enabled)
			authTokens1.Metadata = []tfTypes.InputSplunkHecInputMetadata{}
			for metadataCount47, metadataItem47 := range authTokensItem1.Metadata {
				var metadata47 tfTypes.InputSplunkHecInputMetadata
				metadata47.Name = types.StringValue(metadataItem47.Name)
				metadata47.Value = types.StringValue(metadataItem47.Value)
				if metadataCount47+1 > len(authTokens1.Metadata) {
					authTokens1.Metadata = append(authTokens1.Metadata, metadata47)
				} else {
					authTokens1.Metadata[metadataCount47].Name = metadata47.Name
					authTokens1.Metadata[metadataCount47].Value = metadata47.Value
				}
			}
			tokenResult, _ := json.Marshal(authTokensItem1.Token)
			authTokens1.Token = types.StringValue(string(tokenResult))
			if authTokensItem1.TokenSecret == nil {
				authTokens1.TokenSecret = types.StringNull()
			} else {
				tokenSecretResult, _ := json.Marshal(authTokensItem1.TokenSecret)
				authTokens1.TokenSecret = types.StringValue(string(tokenSecretResult))
			}
			if authTokensCount1+1 > len(r.InputSplunkHec.AuthTokens) {
				r.InputSplunkHec.AuthTokens = append(r.InputSplunkHec.AuthTokens, authTokens1)
			} else {
				r.InputSplunkHec.AuthTokens[authTokensCount1].AllowedIndexesAtToken = authTokens1.AllowedIndexesAtToken
				r.InputSplunkHec.AuthTokens[authTokensCount1].AuthType = authTokens1.AuthType
				r.InputSplunkHec.AuthTokens[authTokensCount1].Description = authTokens1.Description
				r.InputSplunkHec.AuthTokens[authTokensCount1].Enabled = authTokens1.Enabled
				r.InputSplunkHec.AuthTokens[authTokensCount1].Metadata = authTokens1.Metadata
				r.InputSplunkHec.AuthTokens[authTokensCount1].Token = authTokens1.Token
				r.InputSplunkHec.AuthTokens[authTokensCount1].TokenSecret = authTokens1.TokenSecret
			}
		}
		r.InputSplunkHec.BreakerRulesets = make([]types.String, 0, len(resp.InputSplunkHec.BreakerRulesets))
		for _, v := range resp.InputSplunkHec.BreakerRulesets {
			r.InputSplunkHec.BreakerRulesets = append(r.InputSplunkHec.BreakerRulesets, types.StringValue(v))
		}
		r.InputSplunkHec.CaptureHeaders = types.BoolPointerValue(resp.InputSplunkHec.CaptureHeaders)
		r.InputSplunkHec.Connections = []tfTypes.InputSplunkHecConnections{}
		if len(r.InputSplunkHec.Connections) > len(resp.InputSplunkHec.Connections) {
			r.InputSplunkHec.Connections = r.InputSplunkHec.Connections[:len(resp.InputSplunkHec.Connections)]
		}
		for connectionsCount45, connectionsItem45 := range resp.InputSplunkHec.Connections {
			var connections45 tfTypes.InputSplunkHecConnections
			connections45.Output = types.StringValue(connectionsItem45.Output)
			connections45.Pipeline = types.StringPointerValue(connectionsItem45.Pipeline)
			if connectionsCount45+1 > len(r.InputSplunkHec.Connections) {
				r.InputSplunkHec.Connections = append(r.InputSplunkHec.Connections, connections45)
			} else {
				r.InputSplunkHec.Connections[connectionsCount45].Output = connections45.Output
				r.InputSplunkHec.Connections[connectionsCount45].Pipeline = connections45.Pipeline
			}
		}
		r.InputSplunkHec.Description = types.StringPointerValue(resp.InputSplunkHec.Description)
		r.InputSplunkHec.Disabled = types.BoolPointerValue(resp.InputSplunkHec.Disabled)
		r.InputSplunkHec.DropControlFields = types.BoolPointerValue(resp.InputSplunkHec.DropControlFields)
		r.InputSplunkHec.EmitTokenMetrics = types.BoolPointerValue(resp.InputSplunkHec.EmitTokenMetrics)
		if resp.InputSplunkHec.EnableHealthCheck == nil {
			r.InputSplunkHec.EnableHealthCheck = types.StringNull()
		} else {
			enableHealthCheckResult, _ := json.Marshal(resp.InputSplunkHec.EnableHealthCheck)
			r.InputSplunkHec.EnableHealthCheck = types.StringValue(string(enableHealthCheckResult))
		}
		r.InputSplunkHec.EnableProxyHeader = types.BoolPointerValue(resp.InputSplunkHec.EnableProxyHeader)
		r.InputSplunkHec.Environment = types.StringPointerValue(resp.InputSplunkHec.Environment)
		r.InputSplunkHec.ExtractMetrics = types.BoolPointerValue(resp.InputSplunkHec.ExtractMetrics)
		r.InputSplunkHec.Host = types.StringPointerValue(resp.InputSplunkHec.Host)
		r.InputSplunkHec.ID = types.StringPointerValue(resp.InputSplunkHec.ID)
		r.InputSplunkHec.IPAllowlistRegex = types.StringPointerValue(resp.InputSplunkHec.IPAllowlistRegex)
		r.InputSplunkHec.IPDenylistRegex = types.StringPointerValue(resp.InputSplunkHec.IPDenylistRegex)
		r.InputSplunkHec.KeepAliveTimeout = types.Float64PointerValue(resp.InputSplunkHec.KeepAliveTimeout)
		r.InputSplunkHec.MaxActiveReq = types.Float64PointerValue(resp.InputSplunkHec.MaxActiveReq)
		r.InputSplunkHec.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputSplunkHec.MaxRequestsPerSocket)
		r.InputSplunkHec.Metadata = []tfTypes.InputSplunkHecMetadata{}
		if len(r.InputSplunkHec.Metadata) > len(resp.InputSplunkHec.Metadata) {
			r.InputSplunkHec.Metadata = r.InputSplunkHec.Metadata[:len(resp.InputSplunkHec.Metadata)]
		}
		for metadataCount48, metadataItem48 := range resp.InputSplunkHec.Metadata {
			var metadata48 tfTypes.InputSplunkHecMetadata
			metadata48.Name = types.StringValue(metadataItem48.Name)
			metadata48.Value = types.StringValue(metadataItem48.Value)
			if metadataCount48+1 > len(r.InputSplunkHec.Metadata) {
				r.InputSplunkHec.Metadata = append(r.InputSplunkHec.Metadata, metadata48)
			} else {
				r.InputSplunkHec.Metadata[metadataCount48].Name = metadata48.Name
				r.InputSplunkHec.Metadata[metadataCount48].Value = metadata48.Value
			}
		}
		r.InputSplunkHec.Pipeline = types.StringPointerValue(resp.InputSplunkHec.Pipeline)
		r.InputSplunkHec.Port = types.Float64Value(resp.InputSplunkHec.Port)
		if resp.InputSplunkHec.Pq == nil {
			r.InputSplunkHec.Pq = nil
		} else {
			r.InputSplunkHec.Pq = &tfTypes.InputSplunkHecPq{}
			r.InputSplunkHec.Pq.CommitFrequency = types.Float64PointerValue(resp.InputSplunkHec.Pq.CommitFrequency)
			if resp.InputSplunkHec.Pq.Compress != nil {
				r.InputSplunkHec.Pq.Compress = types.StringValue(string(*resp.InputSplunkHec.Pq.Compress))
			} else {
				r.InputSplunkHec.Pq.Compress = types.StringNull()
			}
			r.InputSplunkHec.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputSplunkHec.Pq.MaxBufferSize)
			r.InputSplunkHec.Pq.MaxFileSize = types.StringPointerValue(resp.InputSplunkHec.Pq.MaxFileSize)
			r.InputSplunkHec.Pq.MaxSize = types.StringPointerValue(resp.InputSplunkHec.Pq.MaxSize)
			if resp.InputSplunkHec.Pq.Mode != nil {
				r.InputSplunkHec.Pq.Mode = types.StringValue(string(*resp.InputSplunkHec.Pq.Mode))
			} else {
				r.InputSplunkHec.Pq.Mode = types.StringNull()
			}
			r.InputSplunkHec.Pq.Path = types.StringPointerValue(resp.InputSplunkHec.Pq.Path)
		}
		r.InputSplunkHec.PqEnabled = types.BoolPointerValue(resp.InputSplunkHec.PqEnabled)
		r.InputSplunkHec.RequestTimeout = types.Float64PointerValue(resp.InputSplunkHec.RequestTimeout)
		r.InputSplunkHec.SendToRoutes = types.BoolPointerValue(resp.InputSplunkHec.SendToRoutes)
		r.InputSplunkHec.SocketTimeout = types.Float64PointerValue(resp.InputSplunkHec.SocketTimeout)
		r.InputSplunkHec.SplunkHecAcks = types.BoolPointerValue(resp.InputSplunkHec.SplunkHecAcks)
		r.InputSplunkHec.SplunkHecAPI = types.StringPointerValue(resp.InputSplunkHec.SplunkHecAPI)
		r.InputSplunkHec.StaleChannelFlushMs = types.Float64PointerValue(resp.InputSplunkHec.StaleChannelFlushMs)
		if resp.InputSplunkHec.Status == nil {
			r.InputSplunkHec.Status = nil
		} else {
			r.InputSplunkHec.Status = &tfTypes.TFStatus{}
			r.InputSplunkHec.Status.Health = types.StringValue(string(resp.InputSplunkHec.Status.Health))
			if len(resp.InputSplunkHec.Status.Metrics) > 0 {
				r.InputSplunkHec.Status.Metrics = make(map[string]types.String, len(resp.InputSplunkHec.Status.Metrics))
				for key45, value45 := range resp.InputSplunkHec.Status.Metrics {
					result45, _ := json.Marshal(value45)
					r.InputSplunkHec.Status.Metrics[key45] = types.StringValue(string(result45))
				}
			}
			r.InputSplunkHec.Status.Timestamp = types.Float64Value(resp.InputSplunkHec.Status.Timestamp)
			r.InputSplunkHec.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputSplunkHec.Status.UseStatusFromLB)
		}
		r.InputSplunkHec.Streamtags = make([]types.String, 0, len(resp.InputSplunkHec.Streamtags))
		for _, v := range resp.InputSplunkHec.Streamtags {
			r.InputSplunkHec.Streamtags = append(r.InputSplunkHec.Streamtags, types.StringValue(v))
		}
		if resp.InputSplunkHec.TLS == nil {
			r.InputSplunkHec.TLS = nil
		} else {
			r.InputSplunkHec.TLS = &tfTypes.InputSplunkHecTLSSettingsServerSide{}
			r.InputSplunkHec.TLS.CaPath = types.StringPointerValue(resp.InputSplunkHec.TLS.CaPath)
			r.InputSplunkHec.TLS.CertificateName = types.StringPointerValue(resp.InputSplunkHec.TLS.CertificateName)
			r.InputSplunkHec.TLS.CertPath = types.StringPointerValue(resp.InputSplunkHec.TLS.CertPath)
			if resp.InputSplunkHec.TLS.CommonNameRegex == nil {
				r.InputSplunkHec.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult16, _ := json.Marshal(resp.InputSplunkHec.TLS.CommonNameRegex)
				r.InputSplunkHec.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult16))
			}
			r.InputSplunkHec.TLS.Disabled = types.BoolPointerValue(resp.InputSplunkHec.TLS.Disabled)
			if resp.InputSplunkHec.TLS.MaxVersion != nil {
				r.InputSplunkHec.TLS.MaxVersion = types.StringValue(string(*resp.InputSplunkHec.TLS.MaxVersion))
			} else {
				r.InputSplunkHec.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputSplunkHec.TLS.MinVersion != nil {
				r.InputSplunkHec.TLS.MinVersion = types.StringValue(string(*resp.InputSplunkHec.TLS.MinVersion))
			} else {
				r.InputSplunkHec.TLS.MinVersion = types.StringNull()
			}
			r.InputSplunkHec.TLS.Passphrase = types.StringPointerValue(resp.InputSplunkHec.TLS.Passphrase)
			r.InputSplunkHec.TLS.PrivKeyPath = types.StringPointerValue(resp.InputSplunkHec.TLS.PrivKeyPath)
			if resp.InputSplunkHec.TLS.RejectUnauthorized == nil {
				r.InputSplunkHec.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult16, _ := json.Marshal(resp.InputSplunkHec.TLS.RejectUnauthorized)
				r.InputSplunkHec.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult16))
			}
			r.InputSplunkHec.TLS.RequestCert = types.BoolPointerValue(resp.InputSplunkHec.TLS.RequestCert)
		}
		if resp.InputSplunkHec.Type != nil {
			r.InputSplunkHec.Type = types.StringValue(string(*resp.InputSplunkHec.Type))
		} else {
			r.InputSplunkHec.Type = types.StringNull()
		}
		r.InputSplunkHec.UseFwdTimezone = types.BoolPointerValue(resp.InputSplunkHec.UseFwdTimezone)
	}
	if resp.InputSplunkSearch != nil {
		r.InputSplunkSearch = &tfTypes.InputSplunkSearch{}
		r.InputSplunkSearch.AuthHeaderExpr = types.StringPointerValue(resp.InputSplunkSearch.AuthHeaderExpr)
		if resp.InputSplunkSearch.AuthType != nil {
			r.InputSplunkSearch.AuthType = types.StringValue(string(*resp.InputSplunkSearch.AuthType))
		} else {
			r.InputSplunkSearch.AuthType = types.StringNull()
		}
		r.InputSplunkSearch.BreakerRulesets = make([]types.String, 0, len(resp.InputSplunkSearch.BreakerRulesets))
		for _, v := range resp.InputSplunkSearch.BreakerRulesets {
			r.InputSplunkSearch.BreakerRulesets = append(r.InputSplunkSearch.BreakerRulesets, types.StringValue(v))
		}
		r.InputSplunkSearch.Connections = []tfTypes.InputSplunkSearchConnections{}
		if len(r.InputSplunkSearch.Connections) > len(resp.InputSplunkSearch.Connections) {
			r.InputSplunkSearch.Connections = r.InputSplunkSearch.Connections[:len(resp.InputSplunkSearch.Connections)]
		}
		for connectionsCount46, connectionsItem46 := range resp.InputSplunkSearch.Connections {
			var connections46 tfTypes.InputSplunkSearchConnections
			connections46.Output = types.StringValue(connectionsItem46.Output)
			connections46.Pipeline = types.StringPointerValue(connectionsItem46.Pipeline)
			if connectionsCount46+1 > len(r.InputSplunkSearch.Connections) {
				r.InputSplunkSearch.Connections = append(r.InputSplunkSearch.Connections, connections46)
			} else {
				r.InputSplunkSearch.Connections[connectionsCount46].Output = connections46.Output
				r.InputSplunkSearch.Connections[connectionsCount46].Pipeline = connections46.Pipeline
			}
		}
		r.InputSplunkSearch.CredentialsSecret = types.StringPointerValue(resp.InputSplunkSearch.CredentialsSecret)
		r.InputSplunkSearch.CronSchedule = types.StringPointerValue(resp.InputSplunkSearch.CronSchedule)
		r.InputSplunkSearch.Description = types.StringPointerValue(resp.InputSplunkSearch.Description)
		r.InputSplunkSearch.Disabled = types.BoolPointerValue(resp.InputSplunkSearch.Disabled)
		r.InputSplunkSearch.Earliest = types.StringPointerValue(resp.InputSplunkSearch.Earliest)
		r.InputSplunkSearch.Encoding = types.StringPointerValue(resp.InputSplunkSearch.Encoding)
		r.InputSplunkSearch.Endpoint = types.StringPointerValue(resp.InputSplunkSearch.Endpoint)
		r.InputSplunkSearch.EndpointHeaders = []tfTypes.EndpointHeaders{}
		if len(r.InputSplunkSearch.EndpointHeaders) > len(resp.InputSplunkSearch.EndpointHeaders) {
			r.InputSplunkSearch.EndpointHeaders = r.InputSplunkSearch.EndpointHeaders[:len(resp.InputSplunkSearch.EndpointHeaders)]
		}
		for endpointHeadersCount, endpointHeadersItem := range resp.InputSplunkSearch.EndpointHeaders {
			var endpointHeaders tfTypes.EndpointHeaders
			endpointHeaders.Name = types.StringValue(endpointHeadersItem.Name)
			endpointHeaders.Value = types.StringValue(endpointHeadersItem.Value)
			if endpointHeadersCount+1 > len(r.InputSplunkSearch.EndpointHeaders) {
				r.InputSplunkSearch.EndpointHeaders = append(r.InputSplunkSearch.EndpointHeaders, endpointHeaders)
			} else {
				r.InputSplunkSearch.EndpointHeaders[endpointHeadersCount].Name = endpointHeaders.Name
				r.InputSplunkSearch.EndpointHeaders[endpointHeadersCount].Value = endpointHeaders.Value
			}
		}
		r.InputSplunkSearch.EndpointParams = []tfTypes.EndpointParams{}
		if len(r.InputSplunkSearch.EndpointParams) > len(resp.InputSplunkSearch.EndpointParams) {
			r.InputSplunkSearch.EndpointParams = r.InputSplunkSearch.EndpointParams[:len(resp.InputSplunkSearch.EndpointParams)]
		}
		for endpointParamsCount, endpointParamsItem := range resp.InputSplunkSearch.EndpointParams {
			var endpointParams tfTypes.EndpointParams
			endpointParams.Name = types.StringValue(endpointParamsItem.Name)
			endpointParams.Value = types.StringValue(endpointParamsItem.Value)
			if endpointParamsCount+1 > len(r.InputSplunkSearch.EndpointParams) {
				r.InputSplunkSearch.EndpointParams = append(r.InputSplunkSearch.EndpointParams, endpointParams)
			} else {
				r.InputSplunkSearch.EndpointParams[endpointParamsCount].Name = endpointParams.Name
				r.InputSplunkSearch.EndpointParams[endpointParamsCount].Value = endpointParams.Value
			}
		}
		r.InputSplunkSearch.Environment = types.StringPointerValue(resp.InputSplunkSearch.Environment)
		r.InputSplunkSearch.ID = types.StringPointerValue(resp.InputSplunkSearch.ID)
		r.InputSplunkSearch.JobTimeout = types.StringPointerValue(resp.InputSplunkSearch.JobTimeout)
		r.InputSplunkSearch.KeepAliveTime = types.Float64PointerValue(resp.InputSplunkSearch.KeepAliveTime)
		r.InputSplunkSearch.Latest = types.StringPointerValue(resp.InputSplunkSearch.Latest)
		r.InputSplunkSearch.LoginURL = types.StringPointerValue(resp.InputSplunkSearch.LoginURL)
		if resp.InputSplunkSearch.LogLevel != nil {
			r.InputSplunkSearch.LogLevel = types.StringValue(string(*resp.InputSplunkSearch.LogLevel))
		} else {
			r.InputSplunkSearch.LogLevel = types.StringNull()
		}
		r.InputSplunkSearch.MaxMissedKeepAlives = types.Float64PointerValue(resp.InputSplunkSearch.MaxMissedKeepAlives)
		r.InputSplunkSearch.Metadata = []tfTypes.InputSplunkSearchMetadata{}
		if len(r.InputSplunkSearch.Metadata) > len(resp.InputSplunkSearch.Metadata) {
			r.InputSplunkSearch.Metadata = r.InputSplunkSearch.Metadata[:len(resp.InputSplunkSearch.Metadata)]
		}
		for metadataCount49, metadataItem49 := range resp.InputSplunkSearch.Metadata {
			var metadata49 tfTypes.InputSplunkSearchMetadata
			metadata49.Name = types.StringValue(metadataItem49.Name)
			metadata49.Value = types.StringValue(metadataItem49.Value)
			if metadataCount49+1 > len(r.InputSplunkSearch.Metadata) {
				r.InputSplunkSearch.Metadata = append(r.InputSplunkSearch.Metadata, metadata49)
			} else {
				r.InputSplunkSearch.Metadata[metadataCount49].Name = metadata49.Name
				r.InputSplunkSearch.Metadata[metadataCount49].Value = metadata49.Value
			}
		}
		r.InputSplunkSearch.OauthHeaders = []tfTypes.OauthHeaders{}
		if len(r.InputSplunkSearch.OauthHeaders) > len(resp.InputSplunkSearch.OauthHeaders) {
			r.InputSplunkSearch.OauthHeaders = r.InputSplunkSearch.OauthHeaders[:len(resp.InputSplunkSearch.OauthHeaders)]
		}
		for oauthHeadersCount7, oauthHeadersItem7 := range resp.InputSplunkSearch.OauthHeaders {
			var oauthHeaders7 tfTypes.OauthHeaders
			oauthHeaders7.Name = types.StringValue(oauthHeadersItem7.Name)
			oauthHeaders7.Value = types.StringValue(oauthHeadersItem7.Value)
			if oauthHeadersCount7+1 > len(r.InputSplunkSearch.OauthHeaders) {
				r.InputSplunkSearch.OauthHeaders = append(r.InputSplunkSearch.OauthHeaders, oauthHeaders7)
			} else {
				r.InputSplunkSearch.OauthHeaders[oauthHeadersCount7].Name = oauthHeaders7.Name
				r.InputSplunkSearch.OauthHeaders[oauthHeadersCount7].Value = oauthHeaders7.Value
			}
		}
		r.InputSplunkSearch.OauthParams = []tfTypes.OauthParams{}
		if len(r.InputSplunkSearch.OauthParams) > len(resp.InputSplunkSearch.OauthParams) {
			r.InputSplunkSearch.OauthParams = r.InputSplunkSearch.OauthParams[:len(resp.InputSplunkSearch.OauthParams)]
		}
		for oauthParamsCount7, oauthParamsItem7 := range resp.InputSplunkSearch.OauthParams {
			var oauthParams7 tfTypes.OauthParams
			oauthParams7.Name = types.StringValue(oauthParamsItem7.Name)
			oauthParams7.Value = types.StringValue(oauthParamsItem7.Value)
			if oauthParamsCount7+1 > len(r.InputSplunkSearch.OauthParams) {
				r.InputSplunkSearch.OauthParams = append(r.InputSplunkSearch.OauthParams, oauthParams7)
			} else {
				r.InputSplunkSearch.OauthParams[oauthParamsCount7].Name = oauthParams7.Name
				r.InputSplunkSearch.OauthParams[oauthParamsCount7].Value = oauthParams7.Value
			}
		}
		if resp.InputSplunkSearch.OutputMode != nil {
			r.InputSplunkSearch.OutputMode = types.StringValue(string(*resp.InputSplunkSearch.OutputMode))
		} else {
			r.InputSplunkSearch.OutputMode = types.StringNull()
		}
		r.InputSplunkSearch.Password = types.StringPointerValue(resp.InputSplunkSearch.Password)
		r.InputSplunkSearch.Pipeline = types.StringPointerValue(resp.InputSplunkSearch.Pipeline)
		if resp.InputSplunkSearch.Pq == nil {
			r.InputSplunkSearch.Pq = nil
		} else {
			r.InputSplunkSearch.Pq = &tfTypes.InputSplunkSearchPq{}
			r.InputSplunkSearch.Pq.CommitFrequency = types.Float64PointerValue(resp.InputSplunkSearch.Pq.CommitFrequency)
			if resp.InputSplunkSearch.Pq.Compress != nil {
				r.InputSplunkSearch.Pq.Compress = types.StringValue(string(*resp.InputSplunkSearch.Pq.Compress))
			} else {
				r.InputSplunkSearch.Pq.Compress = types.StringNull()
			}
			r.InputSplunkSearch.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputSplunkSearch.Pq.MaxBufferSize)
			r.InputSplunkSearch.Pq.MaxFileSize = types.StringPointerValue(resp.InputSplunkSearch.Pq.MaxFileSize)
			r.InputSplunkSearch.Pq.MaxSize = types.StringPointerValue(resp.InputSplunkSearch.Pq.MaxSize)
			if resp.InputSplunkSearch.Pq.Mode != nil {
				r.InputSplunkSearch.Pq.Mode = types.StringValue(string(*resp.InputSplunkSearch.Pq.Mode))
			} else {
				r.InputSplunkSearch.Pq.Mode = types.StringNull()
			}
			r.InputSplunkSearch.Pq.Path = types.StringPointerValue(resp.InputSplunkSearch.Pq.Path)
		}
		r.InputSplunkSearch.PqEnabled = types.BoolPointerValue(resp.InputSplunkSearch.PqEnabled)
		r.InputSplunkSearch.RejectUnauthorized = types.BoolPointerValue(resp.InputSplunkSearch.RejectUnauthorized)
		r.InputSplunkSearch.RequestTimeout = types.Float64PointerValue(resp.InputSplunkSearch.RequestTimeout)
		if resp.InputSplunkSearch.RetryRules == nil {
			r.InputSplunkSearch.RetryRules = nil
		} else {
			r.InputSplunkSearch.RetryRules = &tfTypes.RetryRules{}
			r.InputSplunkSearch.RetryRules.Codes = make([]types.Float64, 0, len(resp.InputSplunkSearch.RetryRules.Codes))
			for _, v := range resp.InputSplunkSearch.RetryRules.Codes {
				r.InputSplunkSearch.RetryRules.Codes = append(r.InputSplunkSearch.RetryRules.Codes, types.Float64Value(v))
			}
			r.InputSplunkSearch.RetryRules.EnableHeader = types.BoolPointerValue(resp.InputSplunkSearch.RetryRules.EnableHeader)
			r.InputSplunkSearch.RetryRules.Interval = types.Float64PointerValue(resp.InputSplunkSearch.RetryRules.Interval)
			r.InputSplunkSearch.RetryRules.Limit = types.Float64PointerValue(resp.InputSplunkSearch.RetryRules.Limit)
			r.InputSplunkSearch.RetryRules.Multiplier = types.Float64PointerValue(resp.InputSplunkSearch.RetryRules.Multiplier)
			r.InputSplunkSearch.RetryRules.RetryConnectReset = types.BoolPointerValue(resp.InputSplunkSearch.RetryRules.RetryConnectReset)
			r.InputSplunkSearch.RetryRules.RetryConnectTimeout = types.BoolPointerValue(resp.InputSplunkSearch.RetryRules.RetryConnectTimeout)
			if resp.InputSplunkSearch.RetryRules.Type != nil {
				r.InputSplunkSearch.RetryRules.Type = types.StringValue(string(*resp.InputSplunkSearch.RetryRules.Type))
			} else {
				r.InputSplunkSearch.RetryRules.Type = types.StringNull()
			}
		}
		r.InputSplunkSearch.Search = types.StringValue(resp.InputSplunkSearch.Search)
		r.InputSplunkSearch.SearchHead = types.StringPointerValue(resp.InputSplunkSearch.SearchHead)
		r.InputSplunkSearch.Secret = types.StringPointerValue(resp.InputSplunkSearch.Secret)
		r.InputSplunkSearch.SecretParamName = types.StringPointerValue(resp.InputSplunkSearch.SecretParamName)
		r.InputSplunkSearch.SendToRoutes = types.BoolPointerValue(resp.InputSplunkSearch.SendToRoutes)
		r.InputSplunkSearch.StaleChannelFlushMs = types.Float64PointerValue(resp.InputSplunkSearch.StaleChannelFlushMs)
		if resp.InputSplunkSearch.Status == nil {
			r.InputSplunkSearch.Status = nil
		} else {
			r.InputSplunkSearch.Status = &tfTypes.TFStatus{}
			r.InputSplunkSearch.Status.Health = types.StringValue(string(resp.InputSplunkSearch.Status.Health))
			if len(resp.InputSplunkSearch.Status.Metrics) > 0 {
				r.InputSplunkSearch.Status.Metrics = make(map[string]types.String, len(resp.InputSplunkSearch.Status.Metrics))
				for key46, value46 := range resp.InputSplunkSearch.Status.Metrics {
					result46, _ := json.Marshal(value46)
					r.InputSplunkSearch.Status.Metrics[key46] = types.StringValue(string(result46))
				}
			}
			r.InputSplunkSearch.Status.Timestamp = types.Float64Value(resp.InputSplunkSearch.Status.Timestamp)
			r.InputSplunkSearch.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputSplunkSearch.Status.UseStatusFromLB)
		}
		r.InputSplunkSearch.Streamtags = make([]types.String, 0, len(resp.InputSplunkSearch.Streamtags))
		for _, v := range resp.InputSplunkSearch.Streamtags {
			r.InputSplunkSearch.Streamtags = append(r.InputSplunkSearch.Streamtags, types.StringValue(v))
		}
		r.InputSplunkSearch.TextSecret = types.StringPointerValue(resp.InputSplunkSearch.TextSecret)
		r.InputSplunkSearch.Token = types.StringPointerValue(resp.InputSplunkSearch.Token)
		r.InputSplunkSearch.TokenAttributeName = types.StringPointerValue(resp.InputSplunkSearch.TokenAttributeName)
		r.InputSplunkSearch.TokenTimeoutSecs = types.Float64PointerValue(resp.InputSplunkSearch.TokenTimeoutSecs)
		r.InputSplunkSearch.TTL = types.StringPointerValue(resp.InputSplunkSearch.TTL)
		if resp.InputSplunkSearch.Type != nil {
			r.InputSplunkSearch.Type = types.StringValue(string(*resp.InputSplunkSearch.Type))
		} else {
			r.InputSplunkSearch.Type = types.StringNull()
		}
		r.InputSplunkSearch.Username = types.StringPointerValue(resp.InputSplunkSearch.Username)
		r.InputSplunkSearch.UseRoundRobinDNS = types.BoolPointerValue(resp.InputSplunkSearch.UseRoundRobinDNS)
	}
	if resp.InputSqs != nil {
		r.InputSqs = &tfTypes.InputSqs{}
		r.InputSqs.AssumeRoleArn = types.StringPointerValue(resp.InputSqs.AssumeRoleArn)
		r.InputSqs.AssumeRoleExternalID = types.StringPointerValue(resp.InputSqs.AssumeRoleExternalID)
		r.InputSqs.AwsAccountID = types.StringPointerValue(resp.InputSqs.AwsAccountID)
		r.InputSqs.AwsAPIKey = types.StringPointerValue(resp.InputSqs.AwsAPIKey)
		if resp.InputSqs.AwsAuthenticationMethod != nil {
			r.InputSqs.AwsAuthenticationMethod = types.StringValue(string(*resp.InputSqs.AwsAuthenticationMethod))
		} else {
			r.InputSqs.AwsAuthenticationMethod = types.StringNull()
		}
		r.InputSqs.AwsSecret = types.StringPointerValue(resp.InputSqs.AwsSecret)
		r.InputSqs.AwsSecretKey = types.StringPointerValue(resp.InputSqs.AwsSecretKey)
		r.InputSqs.Connections = []tfTypes.InputSqsConnections{}
		if len(r.InputSqs.Connections) > len(resp.InputSqs.Connections) {
			r.InputSqs.Connections = r.InputSqs.Connections[:len(resp.InputSqs.Connections)]
		}
		for connectionsCount47, connectionsItem47 := range resp.InputSqs.Connections {
			var connections47 tfTypes.InputSqsConnections
			connections47.Output = types.StringValue(connectionsItem47.Output)
			connections47.Pipeline = types.StringPointerValue(connectionsItem47.Pipeline)
			if connectionsCount47+1 > len(r.InputSqs.Connections) {
				r.InputSqs.Connections = append(r.InputSqs.Connections, connections47)
			} else {
				r.InputSqs.Connections[connectionsCount47].Output = connections47.Output
				r.InputSqs.Connections[connectionsCount47].Pipeline = connections47.Pipeline
			}
		}
		r.InputSqs.CreateQueue = types.BoolPointerValue(resp.InputSqs.CreateQueue)
		r.InputSqs.Description = types.StringPointerValue(resp.InputSqs.Description)
		r.InputSqs.Disabled = types.BoolPointerValue(resp.InputSqs.Disabled)
		r.InputSqs.DurationSeconds = types.Float64PointerValue(resp.InputSqs.DurationSeconds)
		r.InputSqs.EnableAssumeRole = types.BoolPointerValue(resp.InputSqs.EnableAssumeRole)
		r.InputSqs.Endpoint = types.StringPointerValue(resp.InputSqs.Endpoint)
		r.InputSqs.Environment = types.StringPointerValue(resp.InputSqs.Environment)
		r.InputSqs.ID = types.StringPointerValue(resp.InputSqs.ID)
		r.InputSqs.MaxMessages = types.Float64PointerValue(resp.InputSqs.MaxMessages)
		r.InputSqs.Metadata = []tfTypes.InputSqsMetadata{}
		if len(r.InputSqs.Metadata) > len(resp.InputSqs.Metadata) {
			r.InputSqs.Metadata = r.InputSqs.Metadata[:len(resp.InputSqs.Metadata)]
		}
		for metadataCount50, metadataItem50 := range resp.InputSqs.Metadata {
			var metadata50 tfTypes.InputSqsMetadata
			metadata50.Name = types.StringValue(metadataItem50.Name)
			metadata50.Value = types.StringValue(metadataItem50.Value)
			if metadataCount50+1 > len(r.InputSqs.Metadata) {
				r.InputSqs.Metadata = append(r.InputSqs.Metadata, metadata50)
			} else {
				r.InputSqs.Metadata[metadataCount50].Name = metadata50.Name
				r.InputSqs.Metadata[metadataCount50].Value = metadata50.Value
			}
		}
		r.InputSqs.NumReceivers = types.Float64PointerValue(resp.InputSqs.NumReceivers)
		r.InputSqs.Pipeline = types.StringPointerValue(resp.InputSqs.Pipeline)
		r.InputSqs.PollTimeout = types.Float64PointerValue(resp.InputSqs.PollTimeout)
		if resp.InputSqs.Pq == nil {
			r.InputSqs.Pq = nil
		} else {
			r.InputSqs.Pq = &tfTypes.InputSqsPq{}
			r.InputSqs.Pq.CommitFrequency = types.Float64PointerValue(resp.InputSqs.Pq.CommitFrequency)
			if resp.InputSqs.Pq.Compress != nil {
				r.InputSqs.Pq.Compress = types.StringValue(string(*resp.InputSqs.Pq.Compress))
			} else {
				r.InputSqs.Pq.Compress = types.StringNull()
			}
			r.InputSqs.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputSqs.Pq.MaxBufferSize)
			r.InputSqs.Pq.MaxFileSize = types.StringPointerValue(resp.InputSqs.Pq.MaxFileSize)
			r.InputSqs.Pq.MaxSize = types.StringPointerValue(resp.InputSqs.Pq.MaxSize)
			if resp.InputSqs.Pq.Mode != nil {
				r.InputSqs.Pq.Mode = types.StringValue(string(*resp.InputSqs.Pq.Mode))
			} else {
				r.InputSqs.Pq.Mode = types.StringNull()
			}
			r.InputSqs.Pq.Path = types.StringPointerValue(resp.InputSqs.Pq.Path)
		}
		r.InputSqs.PqEnabled = types.BoolPointerValue(resp.InputSqs.PqEnabled)
		r.InputSqs.QueueName = types.StringValue(resp.InputSqs.QueueName)
		if resp.InputSqs.QueueType != nil {
			r.InputSqs.QueueType = types.StringValue(string(*resp.InputSqs.QueueType))
		} else {
			r.InputSqs.QueueType = types.StringNull()
		}
		r.InputSqs.Region = types.StringPointerValue(resp.InputSqs.Region)
		r.InputSqs.RejectUnauthorized = types.BoolPointerValue(resp.InputSqs.RejectUnauthorized)
		r.InputSqs.ReuseConnections = types.BoolPointerValue(resp.InputSqs.ReuseConnections)
		r.InputSqs.SendToRoutes = types.BoolPointerValue(resp.InputSqs.SendToRoutes)
		if resp.InputSqs.SignatureVersion != nil {
			r.InputSqs.SignatureVersion = types.StringValue(string(*resp.InputSqs.SignatureVersion))
		} else {
			r.InputSqs.SignatureVersion = types.StringNull()
		}
		if resp.InputSqs.Status == nil {
			r.InputSqs.Status = nil
		} else {
			r.InputSqs.Status = &tfTypes.TFStatus{}
			r.InputSqs.Status.Health = types.StringValue(string(resp.InputSqs.Status.Health))
			if len(resp.InputSqs.Status.Metrics) > 0 {
				r.InputSqs.Status.Metrics = make(map[string]types.String, len(resp.InputSqs.Status.Metrics))
				for key47, value47 := range resp.InputSqs.Status.Metrics {
					result47, _ := json.Marshal(value47)
					r.InputSqs.Status.Metrics[key47] = types.StringValue(string(result47))
				}
			}
			r.InputSqs.Status.Timestamp = types.Float64Value(resp.InputSqs.Status.Timestamp)
			r.InputSqs.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputSqs.Status.UseStatusFromLB)
		}
		r.InputSqs.Streamtags = make([]types.String, 0, len(resp.InputSqs.Streamtags))
		for _, v := range resp.InputSqs.Streamtags {
			r.InputSqs.Streamtags = append(r.InputSqs.Streamtags, types.StringValue(v))
		}
		if resp.InputSqs.Type != nil {
			r.InputSqs.Type = types.StringValue(string(*resp.InputSqs.Type))
		} else {
			r.InputSqs.Type = types.StringNull()
		}
		r.InputSqs.VisibilityTimeout = types.Float64PointerValue(resp.InputSqs.VisibilityTimeout)
	}
	if resp.InputSyslog != nil {
		r.InputSyslog = &tfTypes.InputSyslog{}
		if resp.InputSyslog.InputSyslog1 != nil {
			r.InputSyslog.One = &tfTypes.InputSyslog1{}
			r.InputSyslog.One.AllowNonStandardAppName = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.AllowNonStandardAppName)
			r.InputSyslog.One.Connections = []tfTypes.InputSyslogConnections{}
			if len(r.InputSyslog.One.Connections) > len(resp.InputSyslog.InputSyslog1.Connections) {
				r.InputSyslog.One.Connections = r.InputSyslog.One.Connections[:len(resp.InputSyslog.InputSyslog1.Connections)]
			}
			for connectionsCount48, connectionsItem48 := range resp.InputSyslog.InputSyslog1.Connections {
				var connections48 tfTypes.InputSyslogConnections
				connections48.Output = types.StringValue(connectionsItem48.Output)
				connections48.Pipeline = types.StringPointerValue(connectionsItem48.Pipeline)
				if connectionsCount48+1 > len(r.InputSyslog.One.Connections) {
					r.InputSyslog.One.Connections = append(r.InputSyslog.One.Connections, connections48)
				} else {
					r.InputSyslog.One.Connections[connectionsCount48].Output = connections48.Output
					r.InputSyslog.One.Connections[connectionsCount48].Pipeline = connections48.Pipeline
				}
			}
			r.InputSyslog.One.Description = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Description)
			r.InputSyslog.One.Disabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.Disabled)
			r.InputSyslog.One.EnableLoadBalancing = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.EnableLoadBalancing)
			r.InputSyslog.One.EnableProxyHeader = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.EnableProxyHeader)
			r.InputSyslog.One.Environment = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Environment)
			r.InputSyslog.One.Host = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Host)
			r.InputSyslog.One.ID = types.StringPointerValue(resp.InputSyslog.InputSyslog1.ID)
			r.InputSyslog.One.InferFraming = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.InferFraming)
			r.InputSyslog.One.IPWhitelistRegex = types.StringPointerValue(resp.InputSyslog.InputSyslog1.IPWhitelistRegex)
			r.InputSyslog.One.KeepFieldsList = make([]types.String, 0, len(resp.InputSyslog.InputSyslog1.KeepFieldsList))
			for _, v := range resp.InputSyslog.InputSyslog1.KeepFieldsList {
				r.InputSyslog.One.KeepFieldsList = append(r.InputSyslog.One.KeepFieldsList, types.StringValue(v))
			}
			r.InputSyslog.One.MaxActiveCxn = types.Float64PointerValue(resp.InputSyslog.InputSyslog1.MaxActiveCxn)
			r.InputSyslog.One.MaxBufferSize = types.Float64PointerValue(resp.InputSyslog.InputSyslog1.MaxBufferSize)
			r.InputSyslog.One.Metadata = []tfTypes.InputSyslogMetadata{}
			if len(r.InputSyslog.One.Metadata) > len(resp.InputSyslog.InputSyslog1.Metadata) {
				r.InputSyslog.One.Metadata = r.InputSyslog.One.Metadata[:len(resp.InputSyslog.InputSyslog1.Metadata)]
			}
			for metadataCount51, metadataItem51 := range resp.InputSyslog.InputSyslog1.Metadata {
				var metadata51 tfTypes.InputSyslogMetadata
				metadata51.Name = types.StringValue(metadataItem51.Name)
				metadata51.Value = types.StringValue(metadataItem51.Value)
				if metadataCount51+1 > len(r.InputSyslog.One.Metadata) {
					r.InputSyslog.One.Metadata = append(r.InputSyslog.One.Metadata, metadata51)
				} else {
					r.InputSyslog.One.Metadata[metadataCount51].Name = metadata51.Name
					r.InputSyslog.One.Metadata[metadataCount51].Value = metadata51.Value
				}
			}
			r.InputSyslog.One.OctetCounting = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.OctetCounting)
			r.InputSyslog.One.Pipeline = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Pipeline)
			if resp.InputSyslog.InputSyslog1.Pq == nil {
				r.InputSyslog.One.Pq = nil
			} else {
				r.InputSyslog.One.Pq = &tfTypes.InputSyslogPq{}
				r.InputSyslog.One.Pq.CommitFrequency = types.Float64PointerValue(resp.InputSyslog.InputSyslog1.Pq.CommitFrequency)
				if resp.InputSyslog.InputSyslog1.Pq.Compress != nil {
					r.InputSyslog.One.Pq.Compress = types.StringValue(string(*resp.InputSyslog.InputSyslog1.Pq.Compress))
				} else {
					r.InputSyslog.One.Pq.Compress = types.StringNull()
				}
				r.InputSyslog.One.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputSyslog.InputSyslog1.Pq.MaxBufferSize)
				r.InputSyslog.One.Pq.MaxFileSize = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Pq.MaxFileSize)
				r.InputSyslog.One.Pq.MaxSize = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Pq.MaxSize)
				if resp.InputSyslog.InputSyslog1.Pq.Mode != nil {
					r.InputSyslog.One.Pq.Mode = types.StringValue(string(*resp.InputSyslog.InputSyslog1.Pq.Mode))
				} else {
					r.InputSyslog.One.Pq.Mode = types.StringNull()
				}
				r.InputSyslog.One.Pq.Path = types.StringPointerValue(resp.InputSyslog.InputSyslog1.Pq.Path)
			}
			r.InputSyslog.One.PqEnabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.PqEnabled)
			r.InputSyslog.One.SendToRoutes = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.SendToRoutes)
			r.InputSyslog.One.SingleMsgUDPPackets = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.SingleMsgUDPPackets)
			r.InputSyslog.One.SocketEndingMaxWait = types.Float64PointerValue(resp.InputSyslog.InputSyslog1.SocketEndingMaxWait)
			r.InputSyslog.One.SocketIdleTimeout = types.Float64PointerValue(resp.InputSyslog.InputSyslog1.SocketIdleTimeout)
			r.InputSyslog.One.SocketMaxLifespan = types.Float64PointerValue(resp.InputSyslog.InputSyslog1.SocketMaxLifespan)
			if resp.InputSyslog.InputSyslog1.Status == nil {
				r.InputSyslog.One.Status = nil
			} else {
				r.InputSyslog.One.Status = &tfTypes.TFStatus{}
				r.InputSyslog.One.Status.Health = types.StringValue(string(resp.InputSyslog.InputSyslog1.Status.Health))
				if len(resp.InputSyslog.InputSyslog1.Status.Metrics) > 0 {
					r.InputSyslog.One.Status.Metrics = make(map[string]types.String, len(resp.InputSyslog.InputSyslog1.Status.Metrics))
					for key48, value48 := range resp.InputSyslog.InputSyslog1.Status.Metrics {
						result48, _ := json.Marshal(value48)
						r.InputSyslog.One.Status.Metrics[key48] = types.StringValue(string(result48))
					}
				}
				r.InputSyslog.One.Status.Timestamp = types.Float64Value(resp.InputSyslog.InputSyslog1.Status.Timestamp)
				r.InputSyslog.One.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.Status.UseStatusFromLB)
			}
			r.InputSyslog.One.Streamtags = make([]types.String, 0, len(resp.InputSyslog.InputSyslog1.Streamtags))
			for _, v := range resp.InputSyslog.InputSyslog1.Streamtags {
				r.InputSyslog.One.Streamtags = append(r.InputSyslog.One.Streamtags, types.StringValue(v))
			}
			r.InputSyslog.One.StrictlyInferOctetCounting = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.StrictlyInferOctetCounting)
			r.InputSyslog.One.TCPPort = types.Float64PointerValue(resp.InputSyslog.InputSyslog1.TCPPort)
			r.InputSyslog.One.TimestampTimezone = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TimestampTimezone)
			if resp.InputSyslog.InputSyslog1.TLS == nil {
				r.InputSyslog.One.TLS = nil
			} else {
				r.InputSyslog.One.TLS = &tfTypes.InputSyslogTLSSettingsServerSide{}
				r.InputSyslog.One.TLS.CaPath = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TLS.CaPath)
				r.InputSyslog.One.TLS.CertificateName = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TLS.CertificateName)
				r.InputSyslog.One.TLS.CertPath = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TLS.CertPath)
				if resp.InputSyslog.InputSyslog1.TLS.CommonNameRegex == nil {
					r.InputSyslog.One.TLS.CommonNameRegex = types.StringNull()
				} else {
					commonNameRegexResult17, _ := json.Marshal(resp.InputSyslog.InputSyslog1.TLS.CommonNameRegex)
					r.InputSyslog.One.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult17))
				}
				r.InputSyslog.One.TLS.Disabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.TLS.Disabled)
				if resp.InputSyslog.InputSyslog1.TLS.MaxVersion != nil {
					r.InputSyslog.One.TLS.MaxVersion = types.StringValue(string(*resp.InputSyslog.InputSyslog1.TLS.MaxVersion))
				} else {
					r.InputSyslog.One.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputSyslog.InputSyslog1.TLS.MinVersion != nil {
					r.InputSyslog.One.TLS.MinVersion = types.StringValue(string(*resp.InputSyslog.InputSyslog1.TLS.MinVersion))
				} else {
					r.InputSyslog.One.TLS.MinVersion = types.StringNull()
				}
				r.InputSyslog.One.TLS.Passphrase = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TLS.Passphrase)
				r.InputSyslog.One.TLS.PrivKeyPath = types.StringPointerValue(resp.InputSyslog.InputSyslog1.TLS.PrivKeyPath)
				if resp.InputSyslog.InputSyslog1.TLS.RejectUnauthorized == nil {
					r.InputSyslog.One.TLS.RejectUnauthorized = types.StringNull()
				} else {
					rejectUnauthorizedResult17, _ := json.Marshal(resp.InputSyslog.InputSyslog1.TLS.RejectUnauthorized)
					r.InputSyslog.One.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult17))
				}
				r.InputSyslog.One.TLS.RequestCert = types.BoolPointerValue(resp.InputSyslog.InputSyslog1.TLS.RequestCert)
			}
			r.InputSyslog.One.Type = types.StringValue(string(resp.InputSyslog.InputSyslog1.Type))
			r.InputSyslog.One.UDPPort = types.Float64Value(resp.InputSyslog.InputSyslog1.UDPPort)
			r.InputSyslog.One.UDPSocketRxBufSize = types.Float64PointerValue(resp.InputSyslog.InputSyslog1.UDPSocketRxBufSize)
		}
		if resp.InputSyslog.InputSyslog2 != nil {
			r.InputSyslog.Two = &tfTypes.InputSyslog2{}
			r.InputSyslog.Two.AllowNonStandardAppName = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.AllowNonStandardAppName)
			r.InputSyslog.Two.Connections = []tfTypes.InputInputSyslogConnections{}
			if len(r.InputSyslog.Two.Connections) > len(resp.InputSyslog.InputSyslog2.Connections) {
				r.InputSyslog.Two.Connections = r.InputSyslog.Two.Connections[:len(resp.InputSyslog.InputSyslog2.Connections)]
			}
			for connectionsCount49, connectionsItem49 := range resp.InputSyslog.InputSyslog2.Connections {
				var connections49 tfTypes.InputInputSyslogConnections
				connections49.Output = types.StringValue(connectionsItem49.Output)
				connections49.Pipeline = types.StringPointerValue(connectionsItem49.Pipeline)
				if connectionsCount49+1 > len(r.InputSyslog.Two.Connections) {
					r.InputSyslog.Two.Connections = append(r.InputSyslog.Two.Connections, connections49)
				} else {
					r.InputSyslog.Two.Connections[connectionsCount49].Output = connections49.Output
					r.InputSyslog.Two.Connections[connectionsCount49].Pipeline = connections49.Pipeline
				}
			}
			r.InputSyslog.Two.Description = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Description)
			r.InputSyslog.Two.Disabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.Disabled)
			r.InputSyslog.Two.EnableLoadBalancing = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.EnableLoadBalancing)
			r.InputSyslog.Two.EnableProxyHeader = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.EnableProxyHeader)
			r.InputSyslog.Two.Environment = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Environment)
			r.InputSyslog.Two.Host = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Host)
			r.InputSyslog.Two.ID = types.StringPointerValue(resp.InputSyslog.InputSyslog2.ID)
			r.InputSyslog.Two.InferFraming = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.InferFraming)
			r.InputSyslog.Two.IPWhitelistRegex = types.StringPointerValue(resp.InputSyslog.InputSyslog2.IPWhitelistRegex)
			r.InputSyslog.Two.KeepFieldsList = make([]types.String, 0, len(resp.InputSyslog.InputSyslog2.KeepFieldsList))
			for _, v := range resp.InputSyslog.InputSyslog2.KeepFieldsList {
				r.InputSyslog.Two.KeepFieldsList = append(r.InputSyslog.Two.KeepFieldsList, types.StringValue(v))
			}
			r.InputSyslog.Two.MaxActiveCxn = types.Float64PointerValue(resp.InputSyslog.InputSyslog2.MaxActiveCxn)
			r.InputSyslog.Two.MaxBufferSize = types.Float64PointerValue(resp.InputSyslog.InputSyslog2.MaxBufferSize)
			r.InputSyslog.Two.Metadata = []tfTypes.InputInputSyslogMetadata{}
			if len(r.InputSyslog.Two.Metadata) > len(resp.InputSyslog.InputSyslog2.Metadata) {
				r.InputSyslog.Two.Metadata = r.InputSyslog.Two.Metadata[:len(resp.InputSyslog.InputSyslog2.Metadata)]
			}
			for metadataCount52, metadataItem52 := range resp.InputSyslog.InputSyslog2.Metadata {
				var metadata52 tfTypes.InputInputSyslogMetadata
				metadata52.Name = types.StringValue(metadataItem52.Name)
				metadata52.Value = types.StringValue(metadataItem52.Value)
				if metadataCount52+1 > len(r.InputSyslog.Two.Metadata) {
					r.InputSyslog.Two.Metadata = append(r.InputSyslog.Two.Metadata, metadata52)
				} else {
					r.InputSyslog.Two.Metadata[metadataCount52].Name = metadata52.Name
					r.InputSyslog.Two.Metadata[metadataCount52].Value = metadata52.Value
				}
			}
			r.InputSyslog.Two.OctetCounting = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.OctetCounting)
			r.InputSyslog.Two.Pipeline = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Pipeline)
			if resp.InputSyslog.InputSyslog2.Pq == nil {
				r.InputSyslog.Two.Pq = nil
			} else {
				r.InputSyslog.Two.Pq = &tfTypes.InputInputSyslogPq{}
				r.InputSyslog.Two.Pq.CommitFrequency = types.Float64PointerValue(resp.InputSyslog.InputSyslog2.Pq.CommitFrequency)
				if resp.InputSyslog.InputSyslog2.Pq.Compress != nil {
					r.InputSyslog.Two.Pq.Compress = types.StringValue(string(*resp.InputSyslog.InputSyslog2.Pq.Compress))
				} else {
					r.InputSyslog.Two.Pq.Compress = types.StringNull()
				}
				r.InputSyslog.Two.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputSyslog.InputSyslog2.Pq.MaxBufferSize)
				r.InputSyslog.Two.Pq.MaxFileSize = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Pq.MaxFileSize)
				r.InputSyslog.Two.Pq.MaxSize = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Pq.MaxSize)
				if resp.InputSyslog.InputSyslog2.Pq.Mode != nil {
					r.InputSyslog.Two.Pq.Mode = types.StringValue(string(*resp.InputSyslog.InputSyslog2.Pq.Mode))
				} else {
					r.InputSyslog.Two.Pq.Mode = types.StringNull()
				}
				r.InputSyslog.Two.Pq.Path = types.StringPointerValue(resp.InputSyslog.InputSyslog2.Pq.Path)
			}
			r.InputSyslog.Two.PqEnabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.PqEnabled)
			r.InputSyslog.Two.SendToRoutes = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.SendToRoutes)
			r.InputSyslog.Two.SingleMsgUDPPackets = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.SingleMsgUDPPackets)
			r.InputSyslog.Two.SocketEndingMaxWait = types.Float64PointerValue(resp.InputSyslog.InputSyslog2.SocketEndingMaxWait)
			r.InputSyslog.Two.SocketIdleTimeout = types.Float64PointerValue(resp.InputSyslog.InputSyslog2.SocketIdleTimeout)
			r.InputSyslog.Two.SocketMaxLifespan = types.Float64PointerValue(resp.InputSyslog.InputSyslog2.SocketMaxLifespan)
			if resp.InputSyslog.InputSyslog2.Status == nil {
				r.InputSyslog.Two.Status = nil
			} else {
				r.InputSyslog.Two.Status = &tfTypes.TFStatus{}
				r.InputSyslog.Two.Status.Health = types.StringValue(string(resp.InputSyslog.InputSyslog2.Status.Health))
				if len(resp.InputSyslog.InputSyslog2.Status.Metrics) > 0 {
					r.InputSyslog.Two.Status.Metrics = make(map[string]types.String, len(resp.InputSyslog.InputSyslog2.Status.Metrics))
					for key49, value49 := range resp.InputSyslog.InputSyslog2.Status.Metrics {
						result49, _ := json.Marshal(value49)
						r.InputSyslog.Two.Status.Metrics[key49] = types.StringValue(string(result49))
					}
				}
				r.InputSyslog.Two.Status.Timestamp = types.Float64Value(resp.InputSyslog.InputSyslog2.Status.Timestamp)
				r.InputSyslog.Two.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.Status.UseStatusFromLB)
			}
			r.InputSyslog.Two.Streamtags = make([]types.String, 0, len(resp.InputSyslog.InputSyslog2.Streamtags))
			for _, v := range resp.InputSyslog.InputSyslog2.Streamtags {
				r.InputSyslog.Two.Streamtags = append(r.InputSyslog.Two.Streamtags, types.StringValue(v))
			}
			r.InputSyslog.Two.StrictlyInferOctetCounting = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.StrictlyInferOctetCounting)
			r.InputSyslog.Two.TCPPort = types.Float64Value(resp.InputSyslog.InputSyslog2.TCPPort)
			r.InputSyslog.Two.TimestampTimezone = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TimestampTimezone)
			if resp.InputSyslog.InputSyslog2.TLS == nil {
				r.InputSyslog.Two.TLS = nil
			} else {
				r.InputSyslog.Two.TLS = &tfTypes.InputInputSyslogTLSSettingsServerSide{}
				r.InputSyslog.Two.TLS.CaPath = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TLS.CaPath)
				r.InputSyslog.Two.TLS.CertificateName = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TLS.CertificateName)
				r.InputSyslog.Two.TLS.CertPath = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TLS.CertPath)
				if resp.InputSyslog.InputSyslog2.TLS.CommonNameRegex == nil {
					r.InputSyslog.Two.TLS.CommonNameRegex = types.StringNull()
				} else {
					commonNameRegexResult18, _ := json.Marshal(resp.InputSyslog.InputSyslog2.TLS.CommonNameRegex)
					r.InputSyslog.Two.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult18))
				}
				r.InputSyslog.Two.TLS.Disabled = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.TLS.Disabled)
				if resp.InputSyslog.InputSyslog2.TLS.MaxVersion != nil {
					r.InputSyslog.Two.TLS.MaxVersion = types.StringValue(string(*resp.InputSyslog.InputSyslog2.TLS.MaxVersion))
				} else {
					r.InputSyslog.Two.TLS.MaxVersion = types.StringNull()
				}
				if resp.InputSyslog.InputSyslog2.TLS.MinVersion != nil {
					r.InputSyslog.Two.TLS.MinVersion = types.StringValue(string(*resp.InputSyslog.InputSyslog2.TLS.MinVersion))
				} else {
					r.InputSyslog.Two.TLS.MinVersion = types.StringNull()
				}
				r.InputSyslog.Two.TLS.Passphrase = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TLS.Passphrase)
				r.InputSyslog.Two.TLS.PrivKeyPath = types.StringPointerValue(resp.InputSyslog.InputSyslog2.TLS.PrivKeyPath)
				if resp.InputSyslog.InputSyslog2.TLS.RejectUnauthorized == nil {
					r.InputSyslog.Two.TLS.RejectUnauthorized = types.StringNull()
				} else {
					rejectUnauthorizedResult18, _ := json.Marshal(resp.InputSyslog.InputSyslog2.TLS.RejectUnauthorized)
					r.InputSyslog.Two.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult18))
				}
				r.InputSyslog.Two.TLS.RequestCert = types.BoolPointerValue(resp.InputSyslog.InputSyslog2.TLS.RequestCert)
			}
			r.InputSyslog.Two.Type = types.StringValue(string(resp.InputSyslog.InputSyslog2.Type))
			r.InputSyslog.Two.UDPPort = types.Float64PointerValue(resp.InputSyslog.InputSyslog2.UDPPort)
			r.InputSyslog.Two.UDPSocketRxBufSize = types.Float64PointerValue(resp.InputSyslog.InputSyslog2.UDPSocketRxBufSize)
		}
	}
	if resp.InputSystemMetrics != nil {
		r.InputSystemMetrics = &tfTypes.InputSystemMetrics{}
		r.InputSystemMetrics.Connections = []tfTypes.InputSystemMetricsConnections{}
		if len(r.InputSystemMetrics.Connections) > len(resp.InputSystemMetrics.Connections) {
			r.InputSystemMetrics.Connections = r.InputSystemMetrics.Connections[:len(resp.InputSystemMetrics.Connections)]
		}
		for connectionsCount50, connectionsItem50 := range resp.InputSystemMetrics.Connections {
			var connections50 tfTypes.InputSystemMetricsConnections
			connections50.Output = types.StringValue(connectionsItem50.Output)
			connections50.Pipeline = types.StringPointerValue(connectionsItem50.Pipeline)
			if connectionsCount50+1 > len(r.InputSystemMetrics.Connections) {
				r.InputSystemMetrics.Connections = append(r.InputSystemMetrics.Connections, connections50)
			} else {
				r.InputSystemMetrics.Connections[connectionsCount50].Output = connections50.Output
				r.InputSystemMetrics.Connections[connectionsCount50].Pipeline = connections50.Pipeline
			}
		}
		if resp.InputSystemMetrics.Container == nil {
			r.InputSystemMetrics.Container = nil
		} else {
			r.InputSystemMetrics.Container = &tfTypes.InputSystemMetricsContainer{}
			r.InputSystemMetrics.Container.AllContainers = types.BoolPointerValue(resp.InputSystemMetrics.Container.AllContainers)
			r.InputSystemMetrics.Container.Detail = types.BoolPointerValue(resp.InputSystemMetrics.Container.Detail)
			r.InputSystemMetrics.Container.DockerSocket = make([]types.String, 0, len(resp.InputSystemMetrics.Container.DockerSocket))
			for _, v := range resp.InputSystemMetrics.Container.DockerSocket {
				r.InputSystemMetrics.Container.DockerSocket = append(r.InputSystemMetrics.Container.DockerSocket, types.StringValue(v))
			}
			r.InputSystemMetrics.Container.DockerTimeout = types.Float64PointerValue(resp.InputSystemMetrics.Container.DockerTimeout)
			r.InputSystemMetrics.Container.Filters = []tfTypes.Filters{}
			if len(r.InputSystemMetrics.Container.Filters) > len(resp.InputSystemMetrics.Container.Filters) {
				r.InputSystemMetrics.Container.Filters = r.InputSystemMetrics.Container.Filters[:len(resp.InputSystemMetrics.Container.Filters)]
			}
			for filtersCount, filtersItem := range resp.InputSystemMetrics.Container.Filters {
				var filters tfTypes.Filters
				filters.Expr = types.StringValue(filtersItem.Expr)
				if filtersCount+1 > len(r.InputSystemMetrics.Container.Filters) {
					r.InputSystemMetrics.Container.Filters = append(r.InputSystemMetrics.Container.Filters, filters)
				} else {
					r.InputSystemMetrics.Container.Filters[filtersCount].Expr = filters.Expr
				}
			}
			if resp.InputSystemMetrics.Container.Mode != nil {
				r.InputSystemMetrics.Container.Mode = types.StringValue(string(*resp.InputSystemMetrics.Container.Mode))
			} else {
				r.InputSystemMetrics.Container.Mode = types.StringNull()
			}
			r.InputSystemMetrics.Container.PerDevice = types.BoolPointerValue(resp.InputSystemMetrics.Container.PerDevice)
		}
		r.InputSystemMetrics.Description = types.StringPointerValue(resp.InputSystemMetrics.Description)
		r.InputSystemMetrics.Disabled = types.BoolPointerValue(resp.InputSystemMetrics.Disabled)
		r.InputSystemMetrics.Environment = types.StringPointerValue(resp.InputSystemMetrics.Environment)
		if resp.InputSystemMetrics.Host == nil {
			r.InputSystemMetrics.Host = nil
		} else {
			r.InputSystemMetrics.Host = &tfTypes.Host{}
			if resp.InputSystemMetrics.Host.Custom == nil {
				r.InputSystemMetrics.Host.Custom = nil
			} else {
				r.InputSystemMetrics.Host.Custom = &tfTypes.Custom{}
				if resp.InputSystemMetrics.Host.Custom.CPU == nil {
					r.InputSystemMetrics.Host.Custom.CPU = nil
				} else {
					r.InputSystemMetrics.Host.Custom.CPU = &tfTypes.CPU{}
					r.InputSystemMetrics.Host.Custom.CPU.Detail = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.CPU.Detail)
					if resp.InputSystemMetrics.Host.Custom.CPU.Mode != nil {
						r.InputSystemMetrics.Host.Custom.CPU.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Custom.CPU.Mode))
					} else {
						r.InputSystemMetrics.Host.Custom.CPU.Mode = types.StringNull()
					}
					r.InputSystemMetrics.Host.Custom.CPU.PerCPU = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.CPU.PerCPU)
					r.InputSystemMetrics.Host.Custom.CPU.Time = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.CPU.Time)
				}
				if resp.InputSystemMetrics.Host.Custom.Disk == nil {
					r.InputSystemMetrics.Host.Custom.Disk = nil
				} else {
					r.InputSystemMetrics.Host.Custom.Disk = &tfTypes.Disk{}
					r.InputSystemMetrics.Host.Custom.Disk.Detail = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.Disk.Detail)
					r.InputSystemMetrics.Host.Custom.Disk.Devices = make([]types.String, 0, len(resp.InputSystemMetrics.Host.Custom.Disk.Devices))
					for _, v := range resp.InputSystemMetrics.Host.Custom.Disk.Devices {
						r.InputSystemMetrics.Host.Custom.Disk.Devices = append(r.InputSystemMetrics.Host.Custom.Disk.Devices, types.StringValue(v))
					}
					r.InputSystemMetrics.Host.Custom.Disk.Fstypes = make([]types.String, 0, len(resp.InputSystemMetrics.Host.Custom.Disk.Fstypes))
					for _, v := range resp.InputSystemMetrics.Host.Custom.Disk.Fstypes {
						r.InputSystemMetrics.Host.Custom.Disk.Fstypes = append(r.InputSystemMetrics.Host.Custom.Disk.Fstypes, types.StringValue(v))
					}
					if resp.InputSystemMetrics.Host.Custom.Disk.Mode != nil {
						r.InputSystemMetrics.Host.Custom.Disk.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Custom.Disk.Mode))
					} else {
						r.InputSystemMetrics.Host.Custom.Disk.Mode = types.StringNull()
					}
					r.InputSystemMetrics.Host.Custom.Disk.Mountpoints = make([]types.String, 0, len(resp.InputSystemMetrics.Host.Custom.Disk.Mountpoints))
					for _, v := range resp.InputSystemMetrics.Host.Custom.Disk.Mountpoints {
						r.InputSystemMetrics.Host.Custom.Disk.Mountpoints = append(r.InputSystemMetrics.Host.Custom.Disk.Mountpoints, types.StringValue(v))
					}
					r.InputSystemMetrics.Host.Custom.Disk.PerDevice = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.Disk.PerDevice)
				}
				if resp.InputSystemMetrics.Host.Custom.Memory == nil {
					r.InputSystemMetrics.Host.Custom.Memory = nil
				} else {
					r.InputSystemMetrics.Host.Custom.Memory = &tfTypes.InputSystemMetricsMemory{}
					r.InputSystemMetrics.Host.Custom.Memory.Detail = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.Memory.Detail)
					if resp.InputSystemMetrics.Host.Custom.Memory.Mode != nil {
						r.InputSystemMetrics.Host.Custom.Memory.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Custom.Memory.Mode))
					} else {
						r.InputSystemMetrics.Host.Custom.Memory.Mode = types.StringNull()
					}
				}
				if resp.InputSystemMetrics.Host.Custom.Network == nil {
					r.InputSystemMetrics.Host.Custom.Network = nil
				} else {
					r.InputSystemMetrics.Host.Custom.Network = &tfTypes.Network{}
					r.InputSystemMetrics.Host.Custom.Network.Detail = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.Network.Detail)
					r.InputSystemMetrics.Host.Custom.Network.Devices = make([]types.String, 0, len(resp.InputSystemMetrics.Host.Custom.Network.Devices))
					for _, v := range resp.InputSystemMetrics.Host.Custom.Network.Devices {
						r.InputSystemMetrics.Host.Custom.Network.Devices = append(r.InputSystemMetrics.Host.Custom.Network.Devices, types.StringValue(v))
					}
					if resp.InputSystemMetrics.Host.Custom.Network.Mode != nil {
						r.InputSystemMetrics.Host.Custom.Network.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Custom.Network.Mode))
					} else {
						r.InputSystemMetrics.Host.Custom.Network.Mode = types.StringNull()
					}
					r.InputSystemMetrics.Host.Custom.Network.PerInterface = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.Network.PerInterface)
				}
				if resp.InputSystemMetrics.Host.Custom.System == nil {
					r.InputSystemMetrics.Host.Custom.System = nil
				} else {
					r.InputSystemMetrics.Host.Custom.System = &tfTypes.InputSystemMetricsSystem{}
					if resp.InputSystemMetrics.Host.Custom.System.Mode != nil {
						r.InputSystemMetrics.Host.Custom.System.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Custom.System.Mode))
					} else {
						r.InputSystemMetrics.Host.Custom.System.Mode = types.StringNull()
					}
					r.InputSystemMetrics.Host.Custom.System.Processes = types.BoolPointerValue(resp.InputSystemMetrics.Host.Custom.System.Processes)
				}
			}
			if resp.InputSystemMetrics.Host.Mode != nil {
				r.InputSystemMetrics.Host.Mode = types.StringValue(string(*resp.InputSystemMetrics.Host.Mode))
			} else {
				r.InputSystemMetrics.Host.Mode = types.StringNull()
			}
		}
		r.InputSystemMetrics.ID = types.StringValue(resp.InputSystemMetrics.ID)
		r.InputSystemMetrics.Interval = types.Float64PointerValue(resp.InputSystemMetrics.Interval)
		r.InputSystemMetrics.Metadata = []tfTypes.InputSystemMetricsMetadata{}
		if len(r.InputSystemMetrics.Metadata) > len(resp.InputSystemMetrics.Metadata) {
			r.InputSystemMetrics.Metadata = r.InputSystemMetrics.Metadata[:len(resp.InputSystemMetrics.Metadata)]
		}
		for metadataCount53, metadataItem53 := range resp.InputSystemMetrics.Metadata {
			var metadata53 tfTypes.InputSystemMetricsMetadata
			metadata53.Name = types.StringValue(metadataItem53.Name)
			metadata53.Value = types.StringValue(metadataItem53.Value)
			if metadataCount53+1 > len(r.InputSystemMetrics.Metadata) {
				r.InputSystemMetrics.Metadata = append(r.InputSystemMetrics.Metadata, metadata53)
			} else {
				r.InputSystemMetrics.Metadata[metadataCount53].Name = metadata53.Name
				r.InputSystemMetrics.Metadata[metadataCount53].Value = metadata53.Value
			}
		}
		if resp.InputSystemMetrics.Persistence == nil {
			r.InputSystemMetrics.Persistence = nil
		} else {
			r.InputSystemMetrics.Persistence = &tfTypes.InputSystemMetricsPersistence{}
			if resp.InputSystemMetrics.Persistence.Compress != nil {
				r.InputSystemMetrics.Persistence.Compress = types.StringValue(string(*resp.InputSystemMetrics.Persistence.Compress))
			} else {
				r.InputSystemMetrics.Persistence.Compress = types.StringNull()
			}
			r.InputSystemMetrics.Persistence.DestPath = types.StringPointerValue(resp.InputSystemMetrics.Persistence.DestPath)
			r.InputSystemMetrics.Persistence.Enable = types.BoolPointerValue(resp.InputSystemMetrics.Persistence.Enable)
			r.InputSystemMetrics.Persistence.MaxDataSize = types.StringPointerValue(resp.InputSystemMetrics.Persistence.MaxDataSize)
			r.InputSystemMetrics.Persistence.MaxDataTime = types.StringPointerValue(resp.InputSystemMetrics.Persistence.MaxDataTime)
			r.InputSystemMetrics.Persistence.TimeWindow = types.StringPointerValue(resp.InputSystemMetrics.Persistence.TimeWindow)
		}
		r.InputSystemMetrics.Pipeline = types.StringPointerValue(resp.InputSystemMetrics.Pipeline)
		if resp.InputSystemMetrics.Pq == nil {
			r.InputSystemMetrics.Pq = nil
		} else {
			r.InputSystemMetrics.Pq = &tfTypes.InputSystemMetricsPq{}
			r.InputSystemMetrics.Pq.CommitFrequency = types.Float64PointerValue(resp.InputSystemMetrics.Pq.CommitFrequency)
			if resp.InputSystemMetrics.Pq.Compress != nil {
				r.InputSystemMetrics.Pq.Compress = types.StringValue(string(*resp.InputSystemMetrics.Pq.Compress))
			} else {
				r.InputSystemMetrics.Pq.Compress = types.StringNull()
			}
			r.InputSystemMetrics.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputSystemMetrics.Pq.MaxBufferSize)
			r.InputSystemMetrics.Pq.MaxFileSize = types.StringPointerValue(resp.InputSystemMetrics.Pq.MaxFileSize)
			r.InputSystemMetrics.Pq.MaxSize = types.StringPointerValue(resp.InputSystemMetrics.Pq.MaxSize)
			if resp.InputSystemMetrics.Pq.Mode != nil {
				r.InputSystemMetrics.Pq.Mode = types.StringValue(string(*resp.InputSystemMetrics.Pq.Mode))
			} else {
				r.InputSystemMetrics.Pq.Mode = types.StringNull()
			}
			r.InputSystemMetrics.Pq.Path = types.StringPointerValue(resp.InputSystemMetrics.Pq.Path)
		}
		r.InputSystemMetrics.PqEnabled = types.BoolPointerValue(resp.InputSystemMetrics.PqEnabled)
		if resp.InputSystemMetrics.Process == nil {
			r.InputSystemMetrics.Process = nil
		} else {
			r.InputSystemMetrics.Process = &tfTypes.InputSystemMetricsProcess{}
			r.InputSystemMetrics.Process.Sets = []tfTypes.Sets{}
			if len(r.InputSystemMetrics.Process.Sets) > len(resp.InputSystemMetrics.Process.Sets) {
				r.InputSystemMetrics.Process.Sets = r.InputSystemMetrics.Process.Sets[:len(resp.InputSystemMetrics.Process.Sets)]
			}
			for setsCount, setsItem := range resp.InputSystemMetrics.Process.Sets {
				var sets tfTypes.Sets
				sets.Filter = types.StringValue(setsItem.Filter)
				sets.IncludeChildren = types.BoolPointerValue(setsItem.IncludeChildren)
				sets.Name = types.StringValue(setsItem.Name)
				if setsCount+1 > len(r.InputSystemMetrics.Process.Sets) {
					r.InputSystemMetrics.Process.Sets = append(r.InputSystemMetrics.Process.Sets, sets)
				} else {
					r.InputSystemMetrics.Process.Sets[setsCount].Filter = sets.Filter
					r.InputSystemMetrics.Process.Sets[setsCount].IncludeChildren = sets.IncludeChildren
					r.InputSystemMetrics.Process.Sets[setsCount].Name = sets.Name
				}
			}
		}
		r.InputSystemMetrics.SendToRoutes = types.BoolPointerValue(resp.InputSystemMetrics.SendToRoutes)
		if resp.InputSystemMetrics.Status == nil {
			r.InputSystemMetrics.Status = nil
		} else {
			r.InputSystemMetrics.Status = &tfTypes.TFStatus{}
			r.InputSystemMetrics.Status.Health = types.StringValue(string(resp.InputSystemMetrics.Status.Health))
			if len(resp.InputSystemMetrics.Status.Metrics) > 0 {
				r.InputSystemMetrics.Status.Metrics = make(map[string]types.String, len(resp.InputSystemMetrics.Status.Metrics))
				for key50, value50 := range resp.InputSystemMetrics.Status.Metrics {
					result50, _ := json.Marshal(value50)
					r.InputSystemMetrics.Status.Metrics[key50] = types.StringValue(string(result50))
				}
			}
			r.InputSystemMetrics.Status.Timestamp = types.Float64Value(resp.InputSystemMetrics.Status.Timestamp)
			r.InputSystemMetrics.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputSystemMetrics.Status.UseStatusFromLB)
		}
		r.InputSystemMetrics.Streamtags = make([]types.String, 0, len(resp.InputSystemMetrics.Streamtags))
		for _, v := range resp.InputSystemMetrics.Streamtags {
			r.InputSystemMetrics.Streamtags = append(r.InputSystemMetrics.Streamtags, types.StringValue(v))
		}
		r.InputSystemMetrics.Type = types.StringValue(string(resp.InputSystemMetrics.Type))
	}
	if resp.InputSystemState != nil {
		r.InputSystemState = &tfTypes.InputSystemState{}
		if resp.InputSystemState.Collectors == nil {
			r.InputSystemState.Collectors = nil
		} else {
			r.InputSystemState.Collectors = &tfTypes.Collectors{}
			if resp.InputSystemState.Collectors.Disk == nil {
				r.InputSystemState.Collectors.Disk = nil
			} else {
				r.InputSystemState.Collectors.Disk = &tfTypes.DisksAndFileSystems{}
				r.InputSystemState.Collectors.Disk.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Disk.Enable)
			}
			if resp.InputSystemState.Collectors.DNS == nil {
				r.InputSystemState.Collectors.DNS = nil
			} else {
				r.InputSystemState.Collectors.DNS = &tfTypes.DNS{}
				r.InputSystemState.Collectors.DNS.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.DNS.Enable)
			}
			if resp.InputSystemState.Collectors.Firewall == nil {
				r.InputSystemState.Collectors.Firewall = nil
			} else {
				r.InputSystemState.Collectors.Firewall = &tfTypes.Firewall{}
				r.InputSystemState.Collectors.Firewall.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Firewall.Enable)
			}
			if resp.InputSystemState.Collectors.Hostsfile == nil {
				r.InputSystemState.Collectors.Hostsfile = nil
			} else {
				r.InputSystemState.Collectors.Hostsfile = &tfTypes.HostsFile{}
				r.InputSystemState.Collectors.Hostsfile.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Hostsfile.Enable)
			}
			if resp.InputSystemState.Collectors.Interfaces == nil {
				r.InputSystemState.Collectors.Interfaces = nil
			} else {
				r.InputSystemState.Collectors.Interfaces = &tfTypes.InputSystemStateInterfaces{}
				r.InputSystemState.Collectors.Interfaces.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Interfaces.Enable)
			}
			if resp.InputSystemState.Collectors.LoginUsers == nil {
				r.InputSystemState.Collectors.LoginUsers = nil
			} else {
				r.InputSystemState.Collectors.LoginUsers = &tfTypes.LoggedInUsers{}
				r.InputSystemState.Collectors.LoginUsers.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.LoginUsers.Enable)
			}
			if resp.InputSystemState.Collectors.Metadata == nil {
				r.InputSystemState.Collectors.Metadata = nil
			} else {
				r.InputSystemState.Collectors.Metadata = &tfTypes.HostInfo{}
				r.InputSystemState.Collectors.Metadata.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Metadata.Enable)
			}
			if resp.InputSystemState.Collectors.Ports == nil {
				r.InputSystemState.Collectors.Ports = nil
			} else {
				r.InputSystemState.Collectors.Ports = &tfTypes.ListeningPorts{}
				r.InputSystemState.Collectors.Ports.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Ports.Enable)
			}
			if resp.InputSystemState.Collectors.Routes == nil {
				r.InputSystemState.Collectors.Routes = nil
			} else {
				r.InputSystemState.Collectors.Routes = &tfTypes.InputSystemStateRoutes{}
				r.InputSystemState.Collectors.Routes.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Routes.Enable)
			}
			if resp.InputSystemState.Collectors.Services == nil {
				r.InputSystemState.Collectors.Services = nil
			} else {
				r.InputSystemState.Collectors.Services = &tfTypes.Services{}
				r.InputSystemState.Collectors.Services.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.Services.Enable)
			}
			if resp.InputSystemState.Collectors.User == nil {
				r.InputSystemState.Collectors.User = nil
			} else {
				r.InputSystemState.Collectors.User = &tfTypes.UsersAndGroups{}
				r.InputSystemState.Collectors.User.Enable = types.BoolPointerValue(resp.InputSystemState.Collectors.User.Enable)
			}
		}
		r.InputSystemState.Connections = []tfTypes.InputSystemStateConnections{}
		if len(r.InputSystemState.Connections) > len(resp.InputSystemState.Connections) {
			r.InputSystemState.Connections = r.InputSystemState.Connections[:len(resp.InputSystemState.Connections)]
		}
		for connectionsCount51, connectionsItem51 := range resp.InputSystemState.Connections {
			var connections51 tfTypes.InputSystemStateConnections
			connections51.Output = types.StringValue(connectionsItem51.Output)
			connections51.Pipeline = types.StringPointerValue(connectionsItem51.Pipeline)
			if connectionsCount51+1 > len(r.InputSystemState.Connections) {
				r.InputSystemState.Connections = append(r.InputSystemState.Connections, connections51)
			} else {
				r.InputSystemState.Connections[connectionsCount51].Output = connections51.Output
				r.InputSystemState.Connections[connectionsCount51].Pipeline = connections51.Pipeline
			}
		}
		r.InputSystemState.Description = types.StringPointerValue(resp.InputSystemState.Description)
		r.InputSystemState.Disabled = types.BoolPointerValue(resp.InputSystemState.Disabled)
		r.InputSystemState.Environment = types.StringPointerValue(resp.InputSystemState.Environment)
		r.InputSystemState.ID = types.StringValue(resp.InputSystemState.ID)
		r.InputSystemState.Interval = types.Float64PointerValue(resp.InputSystemState.Interval)
		r.InputSystemState.Metadata = []tfTypes.InputSystemStateMetadata{}
		if len(r.InputSystemState.Metadata) > len(resp.InputSystemState.Metadata) {
			r.InputSystemState.Metadata = r.InputSystemState.Metadata[:len(resp.InputSystemState.Metadata)]
		}
		for metadataCount54, metadataItem54 := range resp.InputSystemState.Metadata {
			var metadata54 tfTypes.InputSystemStateMetadata
			metadata54.Name = types.StringValue(metadataItem54.Name)
			metadata54.Value = types.StringValue(metadataItem54.Value)
			if metadataCount54+1 > len(r.InputSystemState.Metadata) {
				r.InputSystemState.Metadata = append(r.InputSystemState.Metadata, metadata54)
			} else {
				r.InputSystemState.Metadata[metadataCount54].Name = metadata54.Name
				r.InputSystemState.Metadata[metadataCount54].Value = metadata54.Value
			}
		}
		if resp.InputSystemState.Persistence == nil {
			r.InputSystemState.Persistence = nil
		} else {
			r.InputSystemState.Persistence = &tfTypes.Persistence{}
			if resp.InputSystemState.Persistence.Compress != nil {
				r.InputSystemState.Persistence.Compress = types.StringValue(string(*resp.InputSystemState.Persistence.Compress))
			} else {
				r.InputSystemState.Persistence.Compress = types.StringNull()
			}
			r.InputSystemState.Persistence.DestPath = types.StringPointerValue(resp.InputSystemState.Persistence.DestPath)
			r.InputSystemState.Persistence.Enable = types.BoolPointerValue(resp.InputSystemState.Persistence.Enable)
			r.InputSystemState.Persistence.MaxDataSize = types.StringPointerValue(resp.InputSystemState.Persistence.MaxDataSize)
			r.InputSystemState.Persistence.MaxDataTime = types.StringPointerValue(resp.InputSystemState.Persistence.MaxDataTime)
			r.InputSystemState.Persistence.TimeWindow = types.StringPointerValue(resp.InputSystemState.Persistence.TimeWindow)
		}
		r.InputSystemState.Pipeline = types.StringPointerValue(resp.InputSystemState.Pipeline)
		if resp.InputSystemState.Pq == nil {
			r.InputSystemState.Pq = nil
		} else {
			r.InputSystemState.Pq = &tfTypes.InputSystemStatePq{}
			r.InputSystemState.Pq.CommitFrequency = types.Float64PointerValue(resp.InputSystemState.Pq.CommitFrequency)
			if resp.InputSystemState.Pq.Compress != nil {
				r.InputSystemState.Pq.Compress = types.StringValue(string(*resp.InputSystemState.Pq.Compress))
			} else {
				r.InputSystemState.Pq.Compress = types.StringNull()
			}
			r.InputSystemState.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputSystemState.Pq.MaxBufferSize)
			r.InputSystemState.Pq.MaxFileSize = types.StringPointerValue(resp.InputSystemState.Pq.MaxFileSize)
			r.InputSystemState.Pq.MaxSize = types.StringPointerValue(resp.InputSystemState.Pq.MaxSize)
			if resp.InputSystemState.Pq.Mode != nil {
				r.InputSystemState.Pq.Mode = types.StringValue(string(*resp.InputSystemState.Pq.Mode))
			} else {
				r.InputSystemState.Pq.Mode = types.StringNull()
			}
			r.InputSystemState.Pq.Path = types.StringPointerValue(resp.InputSystemState.Pq.Path)
		}
		r.InputSystemState.PqEnabled = types.BoolPointerValue(resp.InputSystemState.PqEnabled)
		r.InputSystemState.SendToRoutes = types.BoolPointerValue(resp.InputSystemState.SendToRoutes)
		if resp.InputSystemState.Status == nil {
			r.InputSystemState.Status = nil
		} else {
			r.InputSystemState.Status = &tfTypes.TFStatus{}
			r.InputSystemState.Status.Health = types.StringValue(string(resp.InputSystemState.Status.Health))
			if len(resp.InputSystemState.Status.Metrics) > 0 {
				r.InputSystemState.Status.Metrics = make(map[string]types.String, len(resp.InputSystemState.Status.Metrics))
				for key51, value51 := range resp.InputSystemState.Status.Metrics {
					result51, _ := json.Marshal(value51)
					r.InputSystemState.Status.Metrics[key51] = types.StringValue(string(result51))
				}
			}
			r.InputSystemState.Status.Timestamp = types.Float64Value(resp.InputSystemState.Status.Timestamp)
			r.InputSystemState.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputSystemState.Status.UseStatusFromLB)
		}
		r.InputSystemState.Streamtags = make([]types.String, 0, len(resp.InputSystemState.Streamtags))
		for _, v := range resp.InputSystemState.Streamtags {
			r.InputSystemState.Streamtags = append(r.InputSystemState.Streamtags, types.StringValue(v))
		}
		r.InputSystemState.Type = types.StringValue(string(resp.InputSystemState.Type))
	}
	if resp.InputTCP != nil {
		r.InputTCP = &tfTypes.InputTCP{}
		if resp.InputTCP.AuthType != nil {
			r.InputTCP.AuthType = types.StringValue(string(*resp.InputTCP.AuthType))
		} else {
			r.InputTCP.AuthType = types.StringNull()
		}
		r.InputTCP.BreakerRulesets = make([]types.String, 0, len(resp.InputTCP.BreakerRulesets))
		for _, v := range resp.InputTCP.BreakerRulesets {
			r.InputTCP.BreakerRulesets = append(r.InputTCP.BreakerRulesets, types.StringValue(v))
		}
		r.InputTCP.Connections = []tfTypes.InputTCPConnections{}
		if len(r.InputTCP.Connections) > len(resp.InputTCP.Connections) {
			r.InputTCP.Connections = r.InputTCP.Connections[:len(resp.InputTCP.Connections)]
		}
		for connectionsCount52, connectionsItem52 := range resp.InputTCP.Connections {
			var connections52 tfTypes.InputTCPConnections
			connections52.Output = types.StringValue(connectionsItem52.Output)
			connections52.Pipeline = types.StringPointerValue(connectionsItem52.Pipeline)
			if connectionsCount52+1 > len(r.InputTCP.Connections) {
				r.InputTCP.Connections = append(r.InputTCP.Connections, connections52)
			} else {
				r.InputTCP.Connections[connectionsCount52].Output = connections52.Output
				r.InputTCP.Connections[connectionsCount52].Pipeline = connections52.Pipeline
			}
		}
		r.InputTCP.Description = types.StringPointerValue(resp.InputTCP.Description)
		r.InputTCP.Disabled = types.BoolPointerValue(resp.InputTCP.Disabled)
		r.InputTCP.EnableHeader = types.BoolPointerValue(resp.InputTCP.EnableHeader)
		r.InputTCP.EnableProxyHeader = types.BoolPointerValue(resp.InputTCP.EnableProxyHeader)
		r.InputTCP.Environment = types.StringPointerValue(resp.InputTCP.Environment)
		r.InputTCP.Host = types.StringPointerValue(resp.InputTCP.Host)
		r.InputTCP.ID = types.StringPointerValue(resp.InputTCP.ID)
		r.InputTCP.IPWhitelistRegex = types.StringPointerValue(resp.InputTCP.IPWhitelistRegex)
		r.InputTCP.MaxActiveCxn = types.Float64PointerValue(resp.InputTCP.MaxActiveCxn)
		r.InputTCP.Metadata = []tfTypes.InputTCPMetadata{}
		if len(r.InputTCP.Metadata) > len(resp.InputTCP.Metadata) {
			r.InputTCP.Metadata = r.InputTCP.Metadata[:len(resp.InputTCP.Metadata)]
		}
		for metadataCount55, metadataItem55 := range resp.InputTCP.Metadata {
			var metadata55 tfTypes.InputTCPMetadata
			metadata55.Name = types.StringValue(metadataItem55.Name)
			metadata55.Value = types.StringValue(metadataItem55.Value)
			if metadataCount55+1 > len(r.InputTCP.Metadata) {
				r.InputTCP.Metadata = append(r.InputTCP.Metadata, metadata55)
			} else {
				r.InputTCP.Metadata[metadataCount55].Name = metadata55.Name
				r.InputTCP.Metadata[metadataCount55].Value = metadata55.Value
			}
		}
		r.InputTCP.Pipeline = types.StringPointerValue(resp.InputTCP.Pipeline)
		r.InputTCP.Port = types.Float64Value(resp.InputTCP.Port)
		if resp.InputTCP.Pq == nil {
			r.InputTCP.Pq = nil
		} else {
			r.InputTCP.Pq = &tfTypes.InputTCPPq{}
			r.InputTCP.Pq.CommitFrequency = types.Float64PointerValue(resp.InputTCP.Pq.CommitFrequency)
			if resp.InputTCP.Pq.Compress != nil {
				r.InputTCP.Pq.Compress = types.StringValue(string(*resp.InputTCP.Pq.Compress))
			} else {
				r.InputTCP.Pq.Compress = types.StringNull()
			}
			r.InputTCP.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputTCP.Pq.MaxBufferSize)
			r.InputTCP.Pq.MaxFileSize = types.StringPointerValue(resp.InputTCP.Pq.MaxFileSize)
			r.InputTCP.Pq.MaxSize = types.StringPointerValue(resp.InputTCP.Pq.MaxSize)
			if resp.InputTCP.Pq.Mode != nil {
				r.InputTCP.Pq.Mode = types.StringValue(string(*resp.InputTCP.Pq.Mode))
			} else {
				r.InputTCP.Pq.Mode = types.StringNull()
			}
			r.InputTCP.Pq.Path = types.StringPointerValue(resp.InputTCP.Pq.Path)
		}
		r.InputTCP.PqEnabled = types.BoolPointerValue(resp.InputTCP.PqEnabled)
		if resp.InputTCP.Preprocess == nil {
			r.InputTCP.Preprocess = nil
		} else {
			r.InputTCP.Preprocess = &tfTypes.InputTCPPreprocess{}
			r.InputTCP.Preprocess.Args = make([]types.String, 0, len(resp.InputTCP.Preprocess.Args))
			for _, v := range resp.InputTCP.Preprocess.Args {
				r.InputTCP.Preprocess.Args = append(r.InputTCP.Preprocess.Args, types.StringValue(v))
			}
			r.InputTCP.Preprocess.Command = types.StringPointerValue(resp.InputTCP.Preprocess.Command)
			r.InputTCP.Preprocess.Disabled = types.BoolPointerValue(resp.InputTCP.Preprocess.Disabled)
		}
		r.InputTCP.SendToRoutes = types.BoolPointerValue(resp.InputTCP.SendToRoutes)
		r.InputTCP.SocketEndingMaxWait = types.Float64PointerValue(resp.InputTCP.SocketEndingMaxWait)
		r.InputTCP.SocketIdleTimeout = types.Float64PointerValue(resp.InputTCP.SocketIdleTimeout)
		r.InputTCP.SocketMaxLifespan = types.Float64PointerValue(resp.InputTCP.SocketMaxLifespan)
		r.InputTCP.StaleChannelFlushMs = types.Float64PointerValue(resp.InputTCP.StaleChannelFlushMs)
		if resp.InputTCP.Status == nil {
			r.InputTCP.Status = nil
		} else {
			r.InputTCP.Status = &tfTypes.TFStatus{}
			r.InputTCP.Status.Health = types.StringValue(string(resp.InputTCP.Status.Health))
			if len(resp.InputTCP.Status.Metrics) > 0 {
				r.InputTCP.Status.Metrics = make(map[string]types.String, len(resp.InputTCP.Status.Metrics))
				for key52, value52 := range resp.InputTCP.Status.Metrics {
					result52, _ := json.Marshal(value52)
					r.InputTCP.Status.Metrics[key52] = types.StringValue(string(result52))
				}
			}
			r.InputTCP.Status.Timestamp = types.Float64Value(resp.InputTCP.Status.Timestamp)
			r.InputTCP.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputTCP.Status.UseStatusFromLB)
		}
		r.InputTCP.Streamtags = make([]types.String, 0, len(resp.InputTCP.Streamtags))
		for _, v := range resp.InputTCP.Streamtags {
			r.InputTCP.Streamtags = append(r.InputTCP.Streamtags, types.StringValue(v))
		}
		if resp.InputTCP.TLS == nil {
			r.InputTCP.TLS = nil
		} else {
			r.InputTCP.TLS = &tfTypes.InputTCPTLSSettingsServerSide{}
			r.InputTCP.TLS.CaPath = types.StringPointerValue(resp.InputTCP.TLS.CaPath)
			r.InputTCP.TLS.CertificateName = types.StringPointerValue(resp.InputTCP.TLS.CertificateName)
			r.InputTCP.TLS.CertPath = types.StringPointerValue(resp.InputTCP.TLS.CertPath)
			if resp.InputTCP.TLS.CommonNameRegex == nil {
				r.InputTCP.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult19, _ := json.Marshal(resp.InputTCP.TLS.CommonNameRegex)
				r.InputTCP.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult19))
			}
			r.InputTCP.TLS.Disabled = types.BoolPointerValue(resp.InputTCP.TLS.Disabled)
			if resp.InputTCP.TLS.MaxVersion != nil {
				r.InputTCP.TLS.MaxVersion = types.StringValue(string(*resp.InputTCP.TLS.MaxVersion))
			} else {
				r.InputTCP.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputTCP.TLS.MinVersion != nil {
				r.InputTCP.TLS.MinVersion = types.StringValue(string(*resp.InputTCP.TLS.MinVersion))
			} else {
				r.InputTCP.TLS.MinVersion = types.StringNull()
			}
			r.InputTCP.TLS.Passphrase = types.StringPointerValue(resp.InputTCP.TLS.Passphrase)
			r.InputTCP.TLS.PrivKeyPath = types.StringPointerValue(resp.InputTCP.TLS.PrivKeyPath)
			if resp.InputTCP.TLS.RejectUnauthorized == nil {
				r.InputTCP.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult19, _ := json.Marshal(resp.InputTCP.TLS.RejectUnauthorized)
				r.InputTCP.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult19))
			}
			r.InputTCP.TLS.RequestCert = types.BoolPointerValue(resp.InputTCP.TLS.RequestCert)
		}
		if resp.InputTCP.Type != nil {
			r.InputTCP.Type = types.StringValue(string(*resp.InputTCP.Type))
		} else {
			r.InputTCP.Type = types.StringNull()
		}
	}
	if resp.InputTcpjson != nil {
		r.InputTcpjson = &tfTypes.InputTcpjson{}
		r.InputTcpjson.AuthToken = types.StringPointerValue(resp.InputTcpjson.AuthToken)
		if resp.InputTcpjson.AuthType != nil {
			r.InputTcpjson.AuthType = types.StringValue(string(*resp.InputTcpjson.AuthType))
		} else {
			r.InputTcpjson.AuthType = types.StringNull()
		}
		r.InputTcpjson.Connections = []tfTypes.InputTcpjsonConnections{}
		if len(r.InputTcpjson.Connections) > len(resp.InputTcpjson.Connections) {
			r.InputTcpjson.Connections = r.InputTcpjson.Connections[:len(resp.InputTcpjson.Connections)]
		}
		for connectionsCount53, connectionsItem53 := range resp.InputTcpjson.Connections {
			var connections53 tfTypes.InputTcpjsonConnections
			connections53.Output = types.StringValue(connectionsItem53.Output)
			connections53.Pipeline = types.StringPointerValue(connectionsItem53.Pipeline)
			if connectionsCount53+1 > len(r.InputTcpjson.Connections) {
				r.InputTcpjson.Connections = append(r.InputTcpjson.Connections, connections53)
			} else {
				r.InputTcpjson.Connections[connectionsCount53].Output = connections53.Output
				r.InputTcpjson.Connections[connectionsCount53].Pipeline = connections53.Pipeline
			}
		}
		r.InputTcpjson.Description = types.StringPointerValue(resp.InputTcpjson.Description)
		r.InputTcpjson.Disabled = types.BoolPointerValue(resp.InputTcpjson.Disabled)
		r.InputTcpjson.EnableLoadBalancing = types.BoolPointerValue(resp.InputTcpjson.EnableLoadBalancing)
		r.InputTcpjson.EnableProxyHeader = types.BoolPointerValue(resp.InputTcpjson.EnableProxyHeader)
		r.InputTcpjson.Environment = types.StringPointerValue(resp.InputTcpjson.Environment)
		r.InputTcpjson.Host = types.StringPointerValue(resp.InputTcpjson.Host)
		r.InputTcpjson.ID = types.StringPointerValue(resp.InputTcpjson.ID)
		r.InputTcpjson.IPWhitelistRegex = types.StringPointerValue(resp.InputTcpjson.IPWhitelistRegex)
		r.InputTcpjson.MaxActiveCxn = types.Float64PointerValue(resp.InputTcpjson.MaxActiveCxn)
		r.InputTcpjson.Metadata = []tfTypes.InputTcpjsonMetadata{}
		if len(r.InputTcpjson.Metadata) > len(resp.InputTcpjson.Metadata) {
			r.InputTcpjson.Metadata = r.InputTcpjson.Metadata[:len(resp.InputTcpjson.Metadata)]
		}
		for metadataCount56, metadataItem56 := range resp.InputTcpjson.Metadata {
			var metadata56 tfTypes.InputTcpjsonMetadata
			metadata56.Name = types.StringValue(metadataItem56.Name)
			metadata56.Value = types.StringValue(metadataItem56.Value)
			if metadataCount56+1 > len(r.InputTcpjson.Metadata) {
				r.InputTcpjson.Metadata = append(r.InputTcpjson.Metadata, metadata56)
			} else {
				r.InputTcpjson.Metadata[metadataCount56].Name = metadata56.Name
				r.InputTcpjson.Metadata[metadataCount56].Value = metadata56.Value
			}
		}
		r.InputTcpjson.Pipeline = types.StringPointerValue(resp.InputTcpjson.Pipeline)
		r.InputTcpjson.Port = types.Float64Value(resp.InputTcpjson.Port)
		if resp.InputTcpjson.Pq == nil {
			r.InputTcpjson.Pq = nil
		} else {
			r.InputTcpjson.Pq = &tfTypes.InputTcpjsonPq{}
			r.InputTcpjson.Pq.CommitFrequency = types.Float64PointerValue(resp.InputTcpjson.Pq.CommitFrequency)
			if resp.InputTcpjson.Pq.Compress != nil {
				r.InputTcpjson.Pq.Compress = types.StringValue(string(*resp.InputTcpjson.Pq.Compress))
			} else {
				r.InputTcpjson.Pq.Compress = types.StringNull()
			}
			r.InputTcpjson.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputTcpjson.Pq.MaxBufferSize)
			r.InputTcpjson.Pq.MaxFileSize = types.StringPointerValue(resp.InputTcpjson.Pq.MaxFileSize)
			r.InputTcpjson.Pq.MaxSize = types.StringPointerValue(resp.InputTcpjson.Pq.MaxSize)
			if resp.InputTcpjson.Pq.Mode != nil {
				r.InputTcpjson.Pq.Mode = types.StringValue(string(*resp.InputTcpjson.Pq.Mode))
			} else {
				r.InputTcpjson.Pq.Mode = types.StringNull()
			}
			r.InputTcpjson.Pq.Path = types.StringPointerValue(resp.InputTcpjson.Pq.Path)
		}
		r.InputTcpjson.PqEnabled = types.BoolPointerValue(resp.InputTcpjson.PqEnabled)
		r.InputTcpjson.SendToRoutes = types.BoolPointerValue(resp.InputTcpjson.SendToRoutes)
		r.InputTcpjson.SocketEndingMaxWait = types.Float64PointerValue(resp.InputTcpjson.SocketEndingMaxWait)
		r.InputTcpjson.SocketIdleTimeout = types.Float64PointerValue(resp.InputTcpjson.SocketIdleTimeout)
		r.InputTcpjson.SocketMaxLifespan = types.Float64PointerValue(resp.InputTcpjson.SocketMaxLifespan)
		if resp.InputTcpjson.Status == nil {
			r.InputTcpjson.Status = nil
		} else {
			r.InputTcpjson.Status = &tfTypes.TFStatus{}
			r.InputTcpjson.Status.Health = types.StringValue(string(resp.InputTcpjson.Status.Health))
			if len(resp.InputTcpjson.Status.Metrics) > 0 {
				r.InputTcpjson.Status.Metrics = make(map[string]types.String, len(resp.InputTcpjson.Status.Metrics))
				for key53, value53 := range resp.InputTcpjson.Status.Metrics {
					result53, _ := json.Marshal(value53)
					r.InputTcpjson.Status.Metrics[key53] = types.StringValue(string(result53))
				}
			}
			r.InputTcpjson.Status.Timestamp = types.Float64Value(resp.InputTcpjson.Status.Timestamp)
			r.InputTcpjson.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputTcpjson.Status.UseStatusFromLB)
		}
		r.InputTcpjson.Streamtags = make([]types.String, 0, len(resp.InputTcpjson.Streamtags))
		for _, v := range resp.InputTcpjson.Streamtags {
			r.InputTcpjson.Streamtags = append(r.InputTcpjson.Streamtags, types.StringValue(v))
		}
		r.InputTcpjson.TextSecret = types.StringPointerValue(resp.InputTcpjson.TextSecret)
		if resp.InputTcpjson.TLS == nil {
			r.InputTcpjson.TLS = nil
		} else {
			r.InputTcpjson.TLS = &tfTypes.InputTcpjsonTLSSettingsServerSide{}
			r.InputTcpjson.TLS.CaPath = types.StringPointerValue(resp.InputTcpjson.TLS.CaPath)
			r.InputTcpjson.TLS.CertificateName = types.StringPointerValue(resp.InputTcpjson.TLS.CertificateName)
			r.InputTcpjson.TLS.CertPath = types.StringPointerValue(resp.InputTcpjson.TLS.CertPath)
			if resp.InputTcpjson.TLS.CommonNameRegex == nil {
				r.InputTcpjson.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult20, _ := json.Marshal(resp.InputTcpjson.TLS.CommonNameRegex)
				r.InputTcpjson.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult20))
			}
			r.InputTcpjson.TLS.Disabled = types.BoolPointerValue(resp.InputTcpjson.TLS.Disabled)
			if resp.InputTcpjson.TLS.MaxVersion != nil {
				r.InputTcpjson.TLS.MaxVersion = types.StringValue(string(*resp.InputTcpjson.TLS.MaxVersion))
			} else {
				r.InputTcpjson.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputTcpjson.TLS.MinVersion != nil {
				r.InputTcpjson.TLS.MinVersion = types.StringValue(string(*resp.InputTcpjson.TLS.MinVersion))
			} else {
				r.InputTcpjson.TLS.MinVersion = types.StringNull()
			}
			r.InputTcpjson.TLS.Passphrase = types.StringPointerValue(resp.InputTcpjson.TLS.Passphrase)
			r.InputTcpjson.TLS.PrivKeyPath = types.StringPointerValue(resp.InputTcpjson.TLS.PrivKeyPath)
			if resp.InputTcpjson.TLS.RejectUnauthorized == nil {
				r.InputTcpjson.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult20, _ := json.Marshal(resp.InputTcpjson.TLS.RejectUnauthorized)
				r.InputTcpjson.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult20))
			}
			r.InputTcpjson.TLS.RequestCert = types.BoolPointerValue(resp.InputTcpjson.TLS.RequestCert)
		}
		if resp.InputTcpjson.Type != nil {
			r.InputTcpjson.Type = types.StringValue(string(*resp.InputTcpjson.Type))
		} else {
			r.InputTcpjson.Type = types.StringNull()
		}
	}
	if resp.InputWef != nil {
		r.InputWef = &tfTypes.InputWef{}
		r.InputWef.AllowMachineIDMismatch = types.BoolPointerValue(resp.InputWef.AllowMachineIDMismatch)
		if resp.InputWef.AuthMethod != nil {
			r.InputWef.AuthMethod = types.StringValue(string(*resp.InputWef.AuthMethod))
		} else {
			r.InputWef.AuthMethod = types.StringNull()
		}
		r.InputWef.CaFingerprint = types.StringPointerValue(resp.InputWef.CaFingerprint)
		r.InputWef.CaptureHeaders = types.BoolPointerValue(resp.InputWef.CaptureHeaders)
		r.InputWef.Connections = []tfTypes.InputWefConnections{}
		if len(r.InputWef.Connections) > len(resp.InputWef.Connections) {
			r.InputWef.Connections = r.InputWef.Connections[:len(resp.InputWef.Connections)]
		}
		for connectionsCount54, connectionsItem54 := range resp.InputWef.Connections {
			var connections54 tfTypes.InputWefConnections
			connections54.Output = types.StringValue(connectionsItem54.Output)
			connections54.Pipeline = types.StringPointerValue(connectionsItem54.Pipeline)
			if connectionsCount54+1 > len(r.InputWef.Connections) {
				r.InputWef.Connections = append(r.InputWef.Connections, connections54)
			} else {
				r.InputWef.Connections[connectionsCount54].Output = connections54.Output
				r.InputWef.Connections[connectionsCount54].Pipeline = connections54.Pipeline
			}
		}
		r.InputWef.Description = types.StringPointerValue(resp.InputWef.Description)
		r.InputWef.Disabled = types.BoolPointerValue(resp.InputWef.Disabled)
		r.InputWef.EnableHealthCheck = types.BoolPointerValue(resp.InputWef.EnableHealthCheck)
		r.InputWef.EnableProxyHeader = types.BoolPointerValue(resp.InputWef.EnableProxyHeader)
		r.InputWef.Environment = types.StringPointerValue(resp.InputWef.Environment)
		r.InputWef.Host = types.StringPointerValue(resp.InputWef.Host)
		r.InputWef.ID = types.StringPointerValue(resp.InputWef.ID)
		r.InputWef.IPAllowlistRegex = types.StringPointerValue(resp.InputWef.IPAllowlistRegex)
		r.InputWef.IPDenylistRegex = types.StringPointerValue(resp.InputWef.IPDenylistRegex)
		r.InputWef.KeepAliveTimeout = types.Float64PointerValue(resp.InputWef.KeepAliveTimeout)
		r.InputWef.Keytab = types.StringPointerValue(resp.InputWef.Keytab)
		r.InputWef.MaxActiveReq = types.Float64PointerValue(resp.InputWef.MaxActiveReq)
		r.InputWef.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputWef.MaxRequestsPerSocket)
		r.InputWef.Metadata = []tfTypes.InputWefMetadata{}
		if len(r.InputWef.Metadata) > len(resp.InputWef.Metadata) {
			r.InputWef.Metadata = r.InputWef.Metadata[:len(resp.InputWef.Metadata)]
		}
		for metadataCount57, metadataItem57 := range resp.InputWef.Metadata {
			var metadata57 tfTypes.InputWefMetadata
			metadata57.Name = types.StringValue(metadataItem57.Name)
			metadata57.Value = types.StringValue(metadataItem57.Value)
			if metadataCount57+1 > len(r.InputWef.Metadata) {
				r.InputWef.Metadata = append(r.InputWef.Metadata, metadata57)
			} else {
				r.InputWef.Metadata[metadataCount57].Name = metadata57.Name
				r.InputWef.Metadata[metadataCount57].Value = metadata57.Value
			}
		}
		r.InputWef.Pipeline = types.StringPointerValue(resp.InputWef.Pipeline)
		r.InputWef.Port = types.Float64PointerValue(resp.InputWef.Port)
		if resp.InputWef.Pq == nil {
			r.InputWef.Pq = nil
		} else {
			r.InputWef.Pq = &tfTypes.InputWefPq{}
			r.InputWef.Pq.CommitFrequency = types.Float64PointerValue(resp.InputWef.Pq.CommitFrequency)
			if resp.InputWef.Pq.Compress != nil {
				r.InputWef.Pq.Compress = types.StringValue(string(*resp.InputWef.Pq.Compress))
			} else {
				r.InputWef.Pq.Compress = types.StringNull()
			}
			r.InputWef.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputWef.Pq.MaxBufferSize)
			r.InputWef.Pq.MaxFileSize = types.StringPointerValue(resp.InputWef.Pq.MaxFileSize)
			r.InputWef.Pq.MaxSize = types.StringPointerValue(resp.InputWef.Pq.MaxSize)
			if resp.InputWef.Pq.Mode != nil {
				r.InputWef.Pq.Mode = types.StringValue(string(*resp.InputWef.Pq.Mode))
			} else {
				r.InputWef.Pq.Mode = types.StringNull()
			}
			r.InputWef.Pq.Path = types.StringPointerValue(resp.InputWef.Pq.Path)
		}
		r.InputWef.PqEnabled = types.BoolPointerValue(resp.InputWef.PqEnabled)
		r.InputWef.Principal = types.StringPointerValue(resp.InputWef.Principal)
		r.InputWef.SendToRoutes = types.BoolPointerValue(resp.InputWef.SendToRoutes)
		r.InputWef.SocketTimeout = types.Float64PointerValue(resp.InputWef.SocketTimeout)
		if resp.InputWef.Status == nil {
			r.InputWef.Status = nil
		} else {
			r.InputWef.Status = &tfTypes.TFStatus{}
			r.InputWef.Status.Health = types.StringValue(string(resp.InputWef.Status.Health))
			if len(resp.InputWef.Status.Metrics) > 0 {
				r.InputWef.Status.Metrics = make(map[string]types.String, len(resp.InputWef.Status.Metrics))
				for key54, value54 := range resp.InputWef.Status.Metrics {
					result54, _ := json.Marshal(value54)
					r.InputWef.Status.Metrics[key54] = types.StringValue(string(result54))
				}
			}
			r.InputWef.Status.Timestamp = types.Float64Value(resp.InputWef.Status.Timestamp)
			r.InputWef.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputWef.Status.UseStatusFromLB)
		}
		r.InputWef.Streamtags = make([]types.String, 0, len(resp.InputWef.Streamtags))
		for _, v := range resp.InputWef.Streamtags {
			r.InputWef.Streamtags = append(r.InputWef.Streamtags, types.StringValue(v))
		}
		r.InputWef.Subscriptions = []tfTypes.Subscriptions{}
		if len(r.InputWef.Subscriptions) > len(resp.InputWef.Subscriptions) {
			r.InputWef.Subscriptions = r.InputWef.Subscriptions[:len(resp.InputWef.Subscriptions)]
		}
		for subscriptionsCount, subscriptionsItem := range resp.InputWef.Subscriptions {
			var subscriptions tfTypes.Subscriptions
			subscriptions.BatchTimeout = types.Float64PointerValue(subscriptionsItem.BatchTimeout)
			subscriptions.Compress = types.BoolPointerValue(subscriptionsItem.Compress)
			if subscriptionsItem.ContentFormat != nil {
				subscriptions.ContentFormat = types.StringValue(string(*subscriptionsItem.ContentFormat))
			} else {
				subscriptions.ContentFormat = types.StringNull()
			}
			subscriptions.HeartbeatInterval = types.Float64PointerValue(subscriptionsItem.HeartbeatInterval)
			subscriptions.Locale = types.StringPointerValue(subscriptionsItem.Locale)
			subscriptions.Metadata = []tfTypes.InputWefInputMetadata{}
			for metadataCount58, metadataItem58 := range subscriptionsItem.Metadata {
				var metadata58 tfTypes.InputWefInputMetadata
				metadata58.Name = types.StringValue(metadataItem58.Name)
				metadata58.Value = types.StringValue(metadataItem58.Value)
				if metadataCount58+1 > len(subscriptions.Metadata) {
					subscriptions.Metadata = append(subscriptions.Metadata, metadata58)
				} else {
					subscriptions.Metadata[metadataCount58].Name = metadata58.Name
					subscriptions.Metadata[metadataCount58].Value = metadata58.Value
				}
			}
			if subscriptionsItem.QuerySelector != nil {
				subscriptions.QuerySelector = types.StringValue(string(*subscriptionsItem.QuerySelector))
			} else {
				subscriptions.QuerySelector = types.StringNull()
			}
			subscriptions.ReadExistingEvents = types.BoolPointerValue(subscriptionsItem.ReadExistingEvents)
			subscriptions.SendBookmarks = types.BoolPointerValue(subscriptionsItem.SendBookmarks)
			subscriptions.SubscriptionName = types.StringValue(subscriptionsItem.SubscriptionName)
			subscriptions.Targets = make([]types.String, 0, len(subscriptionsItem.Targets))
			for _, v := range subscriptionsItem.Targets {
				subscriptions.Targets = append(subscriptions.Targets, types.StringValue(v))
			}
			subscriptions.Version = types.StringPointerValue(subscriptionsItem.Version)
			if subscriptionsCount+1 > len(r.InputWef.Subscriptions) {
				r.InputWef.Subscriptions = append(r.InputWef.Subscriptions, subscriptions)
			} else {
				r.InputWef.Subscriptions[subscriptionsCount].BatchTimeout = subscriptions.BatchTimeout
				r.InputWef.Subscriptions[subscriptionsCount].Compress = subscriptions.Compress
				r.InputWef.Subscriptions[subscriptionsCount].ContentFormat = subscriptions.ContentFormat
				r.InputWef.Subscriptions[subscriptionsCount].HeartbeatInterval = subscriptions.HeartbeatInterval
				r.InputWef.Subscriptions[subscriptionsCount].Locale = subscriptions.Locale
				r.InputWef.Subscriptions[subscriptionsCount].Metadata = subscriptions.Metadata
				r.InputWef.Subscriptions[subscriptionsCount].QuerySelector = subscriptions.QuerySelector
				r.InputWef.Subscriptions[subscriptionsCount].ReadExistingEvents = subscriptions.ReadExistingEvents
				r.InputWef.Subscriptions[subscriptionsCount].SendBookmarks = subscriptions.SendBookmarks
				r.InputWef.Subscriptions[subscriptionsCount].SubscriptionName = subscriptions.SubscriptionName
				r.InputWef.Subscriptions[subscriptionsCount].Targets = subscriptions.Targets
				r.InputWef.Subscriptions[subscriptionsCount].Version = subscriptions.Version
			}
		}
		if resp.InputWef.TLS == nil {
			r.InputWef.TLS = nil
		} else {
			r.InputWef.TLS = &tfTypes.MTLSSettings{}
			r.InputWef.TLS.CaPath = types.StringValue(resp.InputWef.TLS.CaPath)
			r.InputWef.TLS.CertificateName = types.StringPointerValue(resp.InputWef.TLS.CertificateName)
			r.InputWef.TLS.CertPath = types.StringValue(resp.InputWef.TLS.CertPath)
			r.InputWef.TLS.CommonNameRegex = types.StringPointerValue(resp.InputWef.TLS.CommonNameRegex)
			r.InputWef.TLS.Disabled = types.BoolPointerValue(resp.InputWef.TLS.Disabled)
			if resp.InputWef.TLS.Keytab == nil {
				r.InputWef.TLS.Keytab = types.StringNull()
			} else {
				keytabResult, _ := json.Marshal(resp.InputWef.TLS.Keytab)
				r.InputWef.TLS.Keytab = types.StringValue(string(keytabResult))
			}
			if resp.InputWef.TLS.MaxVersion != nil {
				r.InputWef.TLS.MaxVersion = types.StringValue(string(*resp.InputWef.TLS.MaxVersion))
			} else {
				r.InputWef.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputWef.TLS.MinVersion != nil {
				r.InputWef.TLS.MinVersion = types.StringValue(string(*resp.InputWef.TLS.MinVersion))
			} else {
				r.InputWef.TLS.MinVersion = types.StringNull()
			}
			r.InputWef.TLS.OcspCheck = types.BoolPointerValue(resp.InputWef.TLS.OcspCheck)
			r.InputWef.TLS.OcspCheckFailClose = types.BoolPointerValue(resp.InputWef.TLS.OcspCheckFailClose)
			r.InputWef.TLS.Passphrase = types.StringPointerValue(resp.InputWef.TLS.Passphrase)
			if resp.InputWef.TLS.Principal == nil {
				r.InputWef.TLS.Principal = types.StringNull()
			} else {
				principalResult, _ := json.Marshal(resp.InputWef.TLS.Principal)
				r.InputWef.TLS.Principal = types.StringValue(string(principalResult))
			}
			r.InputWef.TLS.PrivKeyPath = types.StringValue(resp.InputWef.TLS.PrivKeyPath)
			r.InputWef.TLS.RejectUnauthorized = types.BoolPointerValue(resp.InputWef.TLS.RejectUnauthorized)
			r.InputWef.TLS.RequestCert = types.BoolPointerValue(resp.InputWef.TLS.RequestCert)
		}
		if resp.InputWef.Type != nil {
			r.InputWef.Type = types.StringValue(string(*resp.InputWef.Type))
		} else {
			r.InputWef.Type = types.StringNull()
		}
	}
	if resp.InputWindowsMetrics != nil {
		r.InputWindowsMetrics = &tfTypes.InputWindowsMetrics{}
		r.InputWindowsMetrics.Connections = []tfTypes.InputWindowsMetricsConnections{}
		if len(r.InputWindowsMetrics.Connections) > len(resp.InputWindowsMetrics.Connections) {
			r.InputWindowsMetrics.Connections = r.InputWindowsMetrics.Connections[:len(resp.InputWindowsMetrics.Connections)]
		}
		for connectionsCount55, connectionsItem55 := range resp.InputWindowsMetrics.Connections {
			var connections55 tfTypes.InputWindowsMetricsConnections
			connections55.Output = types.StringValue(connectionsItem55.Output)
			connections55.Pipeline = types.StringPointerValue(connectionsItem55.Pipeline)
			if connectionsCount55+1 > len(r.InputWindowsMetrics.Connections) {
				r.InputWindowsMetrics.Connections = append(r.InputWindowsMetrics.Connections, connections55)
			} else {
				r.InputWindowsMetrics.Connections[connectionsCount55].Output = connections55.Output
				r.InputWindowsMetrics.Connections[connectionsCount55].Pipeline = connections55.Pipeline
			}
		}
		r.InputWindowsMetrics.Description = types.StringPointerValue(resp.InputWindowsMetrics.Description)
		r.InputWindowsMetrics.Disabled = types.BoolPointerValue(resp.InputWindowsMetrics.Disabled)
		r.InputWindowsMetrics.DisableNativeModule = types.BoolPointerValue(resp.InputWindowsMetrics.DisableNativeModule)
		r.InputWindowsMetrics.Environment = types.StringPointerValue(resp.InputWindowsMetrics.Environment)
		if resp.InputWindowsMetrics.Host == nil {
			r.InputWindowsMetrics.Host = nil
		} else {
			r.InputWindowsMetrics.Host = &tfTypes.InputWindowsMetricsHost{}
			if resp.InputWindowsMetrics.Host.Custom == nil {
				r.InputWindowsMetrics.Host.Custom = nil
			} else {
				r.InputWindowsMetrics.Host.Custom = &tfTypes.InputWindowsMetricsCustom{}
				if resp.InputWindowsMetrics.Host.Custom.CPU == nil {
					r.InputWindowsMetrics.Host.Custom.CPU = nil
				} else {
					r.InputWindowsMetrics.Host.Custom.CPU = &tfTypes.InputWindowsMetricsCPU{}
					r.InputWindowsMetrics.Host.Custom.CPU.Detail = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.CPU.Detail)
					if resp.InputWindowsMetrics.Host.Custom.CPU.Mode != nil {
						r.InputWindowsMetrics.Host.Custom.CPU.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Custom.CPU.Mode))
					} else {
						r.InputWindowsMetrics.Host.Custom.CPU.Mode = types.StringNull()
					}
					r.InputWindowsMetrics.Host.Custom.CPU.PerCPU = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.CPU.PerCPU)
					r.InputWindowsMetrics.Host.Custom.CPU.Time = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.CPU.Time)
				}
				if resp.InputWindowsMetrics.Host.Custom.Disk == nil {
					r.InputWindowsMetrics.Host.Custom.Disk = nil
				} else {
					r.InputWindowsMetrics.Host.Custom.Disk = &tfTypes.InputWindowsMetricsDisk{}
					if resp.InputWindowsMetrics.Host.Custom.Disk.Mode != nil {
						r.InputWindowsMetrics.Host.Custom.Disk.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Custom.Disk.Mode))
					} else {
						r.InputWindowsMetrics.Host.Custom.Disk.Mode = types.StringNull()
					}
					r.InputWindowsMetrics.Host.Custom.Disk.PerVolume = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.Disk.PerVolume)
					r.InputWindowsMetrics.Host.Custom.Disk.Volumes = make([]types.String, 0, len(resp.InputWindowsMetrics.Host.Custom.Disk.Volumes))
					for _, v := range resp.InputWindowsMetrics.Host.Custom.Disk.Volumes {
						r.InputWindowsMetrics.Host.Custom.Disk.Volumes = append(r.InputWindowsMetrics.Host.Custom.Disk.Volumes, types.StringValue(v))
					}
				}
				if resp.InputWindowsMetrics.Host.Custom.Memory == nil {
					r.InputWindowsMetrics.Host.Custom.Memory = nil
				} else {
					r.InputWindowsMetrics.Host.Custom.Memory = &tfTypes.InputWindowsMetricsMemory{}
					r.InputWindowsMetrics.Host.Custom.Memory.Detail = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.Memory.Detail)
					if resp.InputWindowsMetrics.Host.Custom.Memory.Mode != nil {
						r.InputWindowsMetrics.Host.Custom.Memory.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Custom.Memory.Mode))
					} else {
						r.InputWindowsMetrics.Host.Custom.Memory.Mode = types.StringNull()
					}
				}
				if resp.InputWindowsMetrics.Host.Custom.Network == nil {
					r.InputWindowsMetrics.Host.Custom.Network = nil
				} else {
					r.InputWindowsMetrics.Host.Custom.Network = &tfTypes.InputWindowsMetricsNetwork{}
					r.InputWindowsMetrics.Host.Custom.Network.Detail = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.Network.Detail)
					r.InputWindowsMetrics.Host.Custom.Network.Devices = make([]types.String, 0, len(resp.InputWindowsMetrics.Host.Custom.Network.Devices))
					for _, v := range resp.InputWindowsMetrics.Host.Custom.Network.Devices {
						r.InputWindowsMetrics.Host.Custom.Network.Devices = append(r.InputWindowsMetrics.Host.Custom.Network.Devices, types.StringValue(v))
					}
					if resp.InputWindowsMetrics.Host.Custom.Network.Mode != nil {
						r.InputWindowsMetrics.Host.Custom.Network.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Custom.Network.Mode))
					} else {
						r.InputWindowsMetrics.Host.Custom.Network.Mode = types.StringNull()
					}
					r.InputWindowsMetrics.Host.Custom.Network.PerInterface = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.Network.PerInterface)
				}
				if resp.InputWindowsMetrics.Host.Custom.System == nil {
					r.InputWindowsMetrics.Host.Custom.System = nil
				} else {
					r.InputWindowsMetrics.Host.Custom.System = &tfTypes.InputWindowsMetricsSystem{}
					r.InputWindowsMetrics.Host.Custom.System.Detail = types.BoolPointerValue(resp.InputWindowsMetrics.Host.Custom.System.Detail)
					if resp.InputWindowsMetrics.Host.Custom.System.Mode != nil {
						r.InputWindowsMetrics.Host.Custom.System.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Custom.System.Mode))
					} else {
						r.InputWindowsMetrics.Host.Custom.System.Mode = types.StringNull()
					}
				}
			}
			if resp.InputWindowsMetrics.Host.Mode != nil {
				r.InputWindowsMetrics.Host.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Host.Mode))
			} else {
				r.InputWindowsMetrics.Host.Mode = types.StringNull()
			}
		}
		r.InputWindowsMetrics.ID = types.StringValue(resp.InputWindowsMetrics.ID)
		r.InputWindowsMetrics.Interval = types.Float64PointerValue(resp.InputWindowsMetrics.Interval)
		r.InputWindowsMetrics.Metadata = []tfTypes.InputWindowsMetricsMetadata{}
		if len(r.InputWindowsMetrics.Metadata) > len(resp.InputWindowsMetrics.Metadata) {
			r.InputWindowsMetrics.Metadata = r.InputWindowsMetrics.Metadata[:len(resp.InputWindowsMetrics.Metadata)]
		}
		for metadataCount59, metadataItem59 := range resp.InputWindowsMetrics.Metadata {
			var metadata59 tfTypes.InputWindowsMetricsMetadata
			metadata59.Name = types.StringValue(metadataItem59.Name)
			metadata59.Value = types.StringValue(metadataItem59.Value)
			if metadataCount59+1 > len(r.InputWindowsMetrics.Metadata) {
				r.InputWindowsMetrics.Metadata = append(r.InputWindowsMetrics.Metadata, metadata59)
			} else {
				r.InputWindowsMetrics.Metadata[metadataCount59].Name = metadata59.Name
				r.InputWindowsMetrics.Metadata[metadataCount59].Value = metadata59.Value
			}
		}
		if resp.InputWindowsMetrics.Persistence == nil {
			r.InputWindowsMetrics.Persistence = nil
		} else {
			r.InputWindowsMetrics.Persistence = &tfTypes.InputWindowsMetricsPersistence{}
			if resp.InputWindowsMetrics.Persistence.Compress != nil {
				r.InputWindowsMetrics.Persistence.Compress = types.StringValue(string(*resp.InputWindowsMetrics.Persistence.Compress))
			} else {
				r.InputWindowsMetrics.Persistence.Compress = types.StringNull()
			}
			r.InputWindowsMetrics.Persistence.DestPath = types.StringPointerValue(resp.InputWindowsMetrics.Persistence.DestPath)
			r.InputWindowsMetrics.Persistence.Enable = types.BoolPointerValue(resp.InputWindowsMetrics.Persistence.Enable)
			r.InputWindowsMetrics.Persistence.MaxDataSize = types.StringPointerValue(resp.InputWindowsMetrics.Persistence.MaxDataSize)
			r.InputWindowsMetrics.Persistence.MaxDataTime = types.StringPointerValue(resp.InputWindowsMetrics.Persistence.MaxDataTime)
			r.InputWindowsMetrics.Persistence.TimeWindow = types.StringPointerValue(resp.InputWindowsMetrics.Persistence.TimeWindow)
		}
		r.InputWindowsMetrics.Pipeline = types.StringPointerValue(resp.InputWindowsMetrics.Pipeline)
		if resp.InputWindowsMetrics.Pq == nil {
			r.InputWindowsMetrics.Pq = nil
		} else {
			r.InputWindowsMetrics.Pq = &tfTypes.InputWindowsMetricsPq{}
			r.InputWindowsMetrics.Pq.CommitFrequency = types.Float64PointerValue(resp.InputWindowsMetrics.Pq.CommitFrequency)
			if resp.InputWindowsMetrics.Pq.Compress != nil {
				r.InputWindowsMetrics.Pq.Compress = types.StringValue(string(*resp.InputWindowsMetrics.Pq.Compress))
			} else {
				r.InputWindowsMetrics.Pq.Compress = types.StringNull()
			}
			r.InputWindowsMetrics.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputWindowsMetrics.Pq.MaxBufferSize)
			r.InputWindowsMetrics.Pq.MaxFileSize = types.StringPointerValue(resp.InputWindowsMetrics.Pq.MaxFileSize)
			r.InputWindowsMetrics.Pq.MaxSize = types.StringPointerValue(resp.InputWindowsMetrics.Pq.MaxSize)
			if resp.InputWindowsMetrics.Pq.Mode != nil {
				r.InputWindowsMetrics.Pq.Mode = types.StringValue(string(*resp.InputWindowsMetrics.Pq.Mode))
			} else {
				r.InputWindowsMetrics.Pq.Mode = types.StringNull()
			}
			r.InputWindowsMetrics.Pq.Path = types.StringPointerValue(resp.InputWindowsMetrics.Pq.Path)
		}
		r.InputWindowsMetrics.PqEnabled = types.BoolPointerValue(resp.InputWindowsMetrics.PqEnabled)
		if resp.InputWindowsMetrics.Process == nil {
			r.InputWindowsMetrics.Process = nil
		} else {
			r.InputWindowsMetrics.Process = &tfTypes.InputWindowsMetricsProcess{}
			r.InputWindowsMetrics.Process.Sets = []tfTypes.InputWindowsMetricsSets{}
			if len(r.InputWindowsMetrics.Process.Sets) > len(resp.InputWindowsMetrics.Process.Sets) {
				r.InputWindowsMetrics.Process.Sets = r.InputWindowsMetrics.Process.Sets[:len(resp.InputWindowsMetrics.Process.Sets)]
			}
			for setsCount1, setsItem1 := range resp.InputWindowsMetrics.Process.Sets {
				var sets1 tfTypes.InputWindowsMetricsSets
				sets1.Filter = types.StringValue(setsItem1.Filter)
				sets1.IncludeChildren = types.BoolPointerValue(setsItem1.IncludeChildren)
				sets1.Name = types.StringValue(setsItem1.Name)
				if setsCount1+1 > len(r.InputWindowsMetrics.Process.Sets) {
					r.InputWindowsMetrics.Process.Sets = append(r.InputWindowsMetrics.Process.Sets, sets1)
				} else {
					r.InputWindowsMetrics.Process.Sets[setsCount1].Filter = sets1.Filter
					r.InputWindowsMetrics.Process.Sets[setsCount1].IncludeChildren = sets1.IncludeChildren
					r.InputWindowsMetrics.Process.Sets[setsCount1].Name = sets1.Name
				}
			}
		}
		r.InputWindowsMetrics.SendToRoutes = types.BoolPointerValue(resp.InputWindowsMetrics.SendToRoutes)
		if resp.InputWindowsMetrics.Status == nil {
			r.InputWindowsMetrics.Status = nil
		} else {
			r.InputWindowsMetrics.Status = &tfTypes.TFStatus{}
			r.InputWindowsMetrics.Status.Health = types.StringValue(string(resp.InputWindowsMetrics.Status.Health))
			if len(resp.InputWindowsMetrics.Status.Metrics) > 0 {
				r.InputWindowsMetrics.Status.Metrics = make(map[string]types.String, len(resp.InputWindowsMetrics.Status.Metrics))
				for key55, value55 := range resp.InputWindowsMetrics.Status.Metrics {
					result55, _ := json.Marshal(value55)
					r.InputWindowsMetrics.Status.Metrics[key55] = types.StringValue(string(result55))
				}
			}
			r.InputWindowsMetrics.Status.Timestamp = types.Float64Value(resp.InputWindowsMetrics.Status.Timestamp)
			r.InputWindowsMetrics.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputWindowsMetrics.Status.UseStatusFromLB)
		}
		r.InputWindowsMetrics.Streamtags = make([]types.String, 0, len(resp.InputWindowsMetrics.Streamtags))
		for _, v := range resp.InputWindowsMetrics.Streamtags {
			r.InputWindowsMetrics.Streamtags = append(r.InputWindowsMetrics.Streamtags, types.StringValue(v))
		}
		r.InputWindowsMetrics.Type = types.StringValue(string(resp.InputWindowsMetrics.Type))
	}
	if resp.InputWinEventLogs != nil {
		r.InputWinEventLogs = &tfTypes.InputWinEventLogs{}
		r.InputWinEventLogs.BatchSize = types.Float64PointerValue(resp.InputWinEventLogs.BatchSize)
		r.InputWinEventLogs.Connections = []tfTypes.InputWinEventLogsConnections{}
		if len(r.InputWinEventLogs.Connections) > len(resp.InputWinEventLogs.Connections) {
			r.InputWinEventLogs.Connections = r.InputWinEventLogs.Connections[:len(resp.InputWinEventLogs.Connections)]
		}
		for connectionsCount56, connectionsItem56 := range resp.InputWinEventLogs.Connections {
			var connections56 tfTypes.InputWinEventLogsConnections
			connections56.Output = types.StringValue(connectionsItem56.Output)
			connections56.Pipeline = types.StringPointerValue(connectionsItem56.Pipeline)
			if connectionsCount56+1 > len(r.InputWinEventLogs.Connections) {
				r.InputWinEventLogs.Connections = append(r.InputWinEventLogs.Connections, connections56)
			} else {
				r.InputWinEventLogs.Connections[connectionsCount56].Output = connections56.Output
				r.InputWinEventLogs.Connections[connectionsCount56].Pipeline = connections56.Pipeline
			}
		}
		r.InputWinEventLogs.Description = types.StringPointerValue(resp.InputWinEventLogs.Description)
		r.InputWinEventLogs.Disabled = types.BoolPointerValue(resp.InputWinEventLogs.Disabled)
		r.InputWinEventLogs.DisableNativeModule = types.BoolPointerValue(resp.InputWinEventLogs.DisableNativeModule)
		r.InputWinEventLogs.Environment = types.StringPointerValue(resp.InputWinEventLogs.Environment)
		if resp.InputWinEventLogs.EventFormat != nil {
			r.InputWinEventLogs.EventFormat = types.StringValue(string(*resp.InputWinEventLogs.EventFormat))
		} else {
			r.InputWinEventLogs.EventFormat = types.StringNull()
		}
		r.InputWinEventLogs.ID = types.StringPointerValue(resp.InputWinEventLogs.ID)
		r.InputWinEventLogs.Interval = types.Float64PointerValue(resp.InputWinEventLogs.Interval)
		r.InputWinEventLogs.LogNames = make([]types.String, 0, len(resp.InputWinEventLogs.LogNames))
		for _, v := range resp.InputWinEventLogs.LogNames {
			r.InputWinEventLogs.LogNames = append(r.InputWinEventLogs.LogNames, types.StringValue(v))
		}
		r.InputWinEventLogs.MaxEventBytes = types.Float64PointerValue(resp.InputWinEventLogs.MaxEventBytes)
		r.InputWinEventLogs.Metadata = []tfTypes.InputWinEventLogsMetadata{}
		if len(r.InputWinEventLogs.Metadata) > len(resp.InputWinEventLogs.Metadata) {
			r.InputWinEventLogs.Metadata = r.InputWinEventLogs.Metadata[:len(resp.InputWinEventLogs.Metadata)]
		}
		for metadataCount60, metadataItem60 := range resp.InputWinEventLogs.Metadata {
			var metadata60 tfTypes.InputWinEventLogsMetadata
			metadata60.Name = types.StringValue(metadataItem60.Name)
			metadata60.Value = types.StringValue(metadataItem60.Value)
			if metadataCount60+1 > len(r.InputWinEventLogs.Metadata) {
				r.InputWinEventLogs.Metadata = append(r.InputWinEventLogs.Metadata, metadata60)
			} else {
				r.InputWinEventLogs.Metadata[metadataCount60].Name = metadata60.Name
				r.InputWinEventLogs.Metadata[metadataCount60].Value = metadata60.Value
			}
		}
		r.InputWinEventLogs.Pipeline = types.StringPointerValue(resp.InputWinEventLogs.Pipeline)
		if resp.InputWinEventLogs.Pq == nil {
			r.InputWinEventLogs.Pq = nil
		} else {
			r.InputWinEventLogs.Pq = &tfTypes.InputWinEventLogsPq{}
			r.InputWinEventLogs.Pq.CommitFrequency = types.Float64PointerValue(resp.InputWinEventLogs.Pq.CommitFrequency)
			if resp.InputWinEventLogs.Pq.Compress != nil {
				r.InputWinEventLogs.Pq.Compress = types.StringValue(string(*resp.InputWinEventLogs.Pq.Compress))
			} else {
				r.InputWinEventLogs.Pq.Compress = types.StringNull()
			}
			r.InputWinEventLogs.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputWinEventLogs.Pq.MaxBufferSize)
			r.InputWinEventLogs.Pq.MaxFileSize = types.StringPointerValue(resp.InputWinEventLogs.Pq.MaxFileSize)
			r.InputWinEventLogs.Pq.MaxSize = types.StringPointerValue(resp.InputWinEventLogs.Pq.MaxSize)
			if resp.InputWinEventLogs.Pq.Mode != nil {
				r.InputWinEventLogs.Pq.Mode = types.StringValue(string(*resp.InputWinEventLogs.Pq.Mode))
			} else {
				r.InputWinEventLogs.Pq.Mode = types.StringNull()
			}
			r.InputWinEventLogs.Pq.Path = types.StringPointerValue(resp.InputWinEventLogs.Pq.Path)
		}
		r.InputWinEventLogs.PqEnabled = types.BoolPointerValue(resp.InputWinEventLogs.PqEnabled)
		if resp.InputWinEventLogs.ReadMode != nil {
			r.InputWinEventLogs.ReadMode = types.StringValue(string(*resp.InputWinEventLogs.ReadMode))
		} else {
			r.InputWinEventLogs.ReadMode = types.StringNull()
		}
		r.InputWinEventLogs.SendToRoutes = types.BoolPointerValue(resp.InputWinEventLogs.SendToRoutes)
		if resp.InputWinEventLogs.Status == nil {
			r.InputWinEventLogs.Status = nil
		} else {
			r.InputWinEventLogs.Status = &tfTypes.TFStatus{}
			r.InputWinEventLogs.Status.Health = types.StringValue(string(resp.InputWinEventLogs.Status.Health))
			if len(resp.InputWinEventLogs.Status.Metrics) > 0 {
				r.InputWinEventLogs.Status.Metrics = make(map[string]types.String, len(resp.InputWinEventLogs.Status.Metrics))
				for key56, value56 := range resp.InputWinEventLogs.Status.Metrics {
					result56, _ := json.Marshal(value56)
					r.InputWinEventLogs.Status.Metrics[key56] = types.StringValue(string(result56))
				}
			}
			r.InputWinEventLogs.Status.Timestamp = types.Float64Value(resp.InputWinEventLogs.Status.Timestamp)
			r.InputWinEventLogs.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputWinEventLogs.Status.UseStatusFromLB)
		}
		r.InputWinEventLogs.Streamtags = make([]types.String, 0, len(resp.InputWinEventLogs.Streamtags))
		for _, v := range resp.InputWinEventLogs.Streamtags {
			r.InputWinEventLogs.Streamtags = append(r.InputWinEventLogs.Streamtags, types.StringValue(v))
		}
		r.InputWinEventLogs.Type = types.StringValue(string(resp.InputWinEventLogs.Type))
	}
	if resp.InputWiz != nil {
		r.InputWiz = &tfTypes.InputWiz{}
		r.InputWiz.AuthAudienceOverride = types.StringPointerValue(resp.InputWiz.AuthAudienceOverride)
		if resp.InputWiz.AuthType != nil {
			r.InputWiz.AuthType = types.StringValue(string(*resp.InputWiz.AuthType))
		} else {
			r.InputWiz.AuthType = types.StringNull()
		}
		r.InputWiz.AuthURL = types.StringValue(resp.InputWiz.AuthURL)
		r.InputWiz.ClientID = types.StringValue(resp.InputWiz.ClientID)
		r.InputWiz.ClientSecret = types.StringPointerValue(resp.InputWiz.ClientSecret)
		r.InputWiz.Connections = []tfTypes.InputWizConnections{}
		if len(r.InputWiz.Connections) > len(resp.InputWiz.Connections) {
			r.InputWiz.Connections = r.InputWiz.Connections[:len(resp.InputWiz.Connections)]
		}
		for connectionsCount57, connectionsItem57 := range resp.InputWiz.Connections {
			var connections57 tfTypes.InputWizConnections
			connections57.Output = types.StringValue(connectionsItem57.Output)
			connections57.Pipeline = types.StringPointerValue(connectionsItem57.Pipeline)
			if connectionsCount57+1 > len(r.InputWiz.Connections) {
				r.InputWiz.Connections = append(r.InputWiz.Connections, connections57)
			} else {
				r.InputWiz.Connections[connectionsCount57].Output = connections57.Output
				r.InputWiz.Connections[connectionsCount57].Pipeline = connections57.Pipeline
			}
		}
		r.InputWiz.ContentConfig = []tfTypes.InputWizContentConfig{}
		if len(r.InputWiz.ContentConfig) > len(resp.InputWiz.ContentConfig) {
			r.InputWiz.ContentConfig = r.InputWiz.ContentConfig[:len(resp.InputWiz.ContentConfig)]
		}
		for contentConfigCount2, contentConfigItem2 := range resp.InputWiz.ContentConfig {
			var contentConfig2 tfTypes.InputWizContentConfig
			contentConfig2.ContentDescription = types.StringPointerValue(contentConfigItem2.ContentDescription)
			contentConfig2.ContentType = types.StringValue(contentConfigItem2.ContentType)
			contentConfig2.Enabled = types.BoolPointerValue(contentConfigItem2.Enabled)
			if contentConfigCount2+1 > len(r.InputWiz.ContentConfig) {
				r.InputWiz.ContentConfig = append(r.InputWiz.ContentConfig, contentConfig2)
			} else {
				r.InputWiz.ContentConfig[contentConfigCount2].ContentDescription = contentConfig2.ContentDescription
				r.InputWiz.ContentConfig[contentConfigCount2].ContentType = contentConfig2.ContentType
				r.InputWiz.ContentConfig[contentConfigCount2].Enabled = contentConfig2.Enabled
			}
		}
		r.InputWiz.Description = types.StringPointerValue(resp.InputWiz.Description)
		r.InputWiz.Disabled = types.BoolPointerValue(resp.InputWiz.Disabled)
		r.InputWiz.Endpoint = types.StringPointerValue(resp.InputWiz.Endpoint)
		r.InputWiz.Environment = types.StringPointerValue(resp.InputWiz.Environment)
		r.InputWiz.ID = types.StringPointerValue(resp.InputWiz.ID)
		r.InputWiz.KeepAliveTime = types.Float64PointerValue(resp.InputWiz.KeepAliveTime)
		r.InputWiz.MaxMissedKeepAlives = types.Float64PointerValue(resp.InputWiz.MaxMissedKeepAlives)
		r.InputWiz.Metadata = []tfTypes.InputWizMetadata{}
		if len(r.InputWiz.Metadata) > len(resp.InputWiz.Metadata) {
			r.InputWiz.Metadata = r.InputWiz.Metadata[:len(resp.InputWiz.Metadata)]
		}
		for metadataCount61, metadataItem61 := range resp.InputWiz.Metadata {
			var metadata61 tfTypes.InputWizMetadata
			metadata61.Name = types.StringValue(metadataItem61.Name)
			metadata61.Value = types.StringValue(metadataItem61.Value)
			if metadataCount61+1 > len(r.InputWiz.Metadata) {
				r.InputWiz.Metadata = append(r.InputWiz.Metadata, metadata61)
			} else {
				r.InputWiz.Metadata[metadataCount61].Name = metadata61.Name
				r.InputWiz.Metadata[metadataCount61].Value = metadata61.Value
			}
		}
		r.InputWiz.Pipeline = types.StringPointerValue(resp.InputWiz.Pipeline)
		if resp.InputWiz.Pq == nil {
			r.InputWiz.Pq = nil
		} else {
			r.InputWiz.Pq = &tfTypes.InputWizPq{}
			r.InputWiz.Pq.CommitFrequency = types.Float64PointerValue(resp.InputWiz.Pq.CommitFrequency)
			if resp.InputWiz.Pq.Compress != nil {
				r.InputWiz.Pq.Compress = types.StringValue(string(*resp.InputWiz.Pq.Compress))
			} else {
				r.InputWiz.Pq.Compress = types.StringNull()
			}
			r.InputWiz.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputWiz.Pq.MaxBufferSize)
			r.InputWiz.Pq.MaxFileSize = types.StringPointerValue(resp.InputWiz.Pq.MaxFileSize)
			r.InputWiz.Pq.MaxSize = types.StringPointerValue(resp.InputWiz.Pq.MaxSize)
			if resp.InputWiz.Pq.Mode != nil {
				r.InputWiz.Pq.Mode = types.StringValue(string(*resp.InputWiz.Pq.Mode))
			} else {
				r.InputWiz.Pq.Mode = types.StringNull()
			}
			r.InputWiz.Pq.Path = types.StringPointerValue(resp.InputWiz.Pq.Path)
		}
		r.InputWiz.PqEnabled = types.BoolPointerValue(resp.InputWiz.PqEnabled)
		r.InputWiz.RequestTimeout = types.Float64PointerValue(resp.InputWiz.RequestTimeout)
		if resp.InputWiz.RetryRules == nil {
			r.InputWiz.RetryRules = nil
		} else {
			r.InputWiz.RetryRules = &tfTypes.InputWizRetryRules{}
			r.InputWiz.RetryRules.Codes = make([]types.Float64, 0, len(resp.InputWiz.RetryRules.Codes))
			for _, v := range resp.InputWiz.RetryRules.Codes {
				r.InputWiz.RetryRules.Codes = append(r.InputWiz.RetryRules.Codes, types.Float64Value(v))
			}
			r.InputWiz.RetryRules.EnableHeader = types.BoolPointerValue(resp.InputWiz.RetryRules.EnableHeader)
			r.InputWiz.RetryRules.Interval = types.Float64PointerValue(resp.InputWiz.RetryRules.Interval)
			r.InputWiz.RetryRules.Limit = types.Float64PointerValue(resp.InputWiz.RetryRules.Limit)
			r.InputWiz.RetryRules.Multiplier = types.Float64PointerValue(resp.InputWiz.RetryRules.Multiplier)
			r.InputWiz.RetryRules.RetryConnectReset = types.BoolPointerValue(resp.InputWiz.RetryRules.RetryConnectReset)
			r.InputWiz.RetryRules.RetryConnectTimeout = types.BoolPointerValue(resp.InputWiz.RetryRules.RetryConnectTimeout)
			if resp.InputWiz.RetryRules.Type != nil {
				r.InputWiz.RetryRules.Type = types.StringValue(string(*resp.InputWiz.RetryRules.Type))
			} else {
				r.InputWiz.RetryRules.Type = types.StringNull()
			}
		}
		r.InputWiz.SendToRoutes = types.BoolPointerValue(resp.InputWiz.SendToRoutes)
		if resp.InputWiz.Status == nil {
			r.InputWiz.Status = nil
		} else {
			r.InputWiz.Status = &tfTypes.TFStatus{}
			r.InputWiz.Status.Health = types.StringValue(string(resp.InputWiz.Status.Health))
			if len(resp.InputWiz.Status.Metrics) > 0 {
				r.InputWiz.Status.Metrics = make(map[string]types.String, len(resp.InputWiz.Status.Metrics))
				for key57, value57 := range resp.InputWiz.Status.Metrics {
					result57, _ := json.Marshal(value57)
					r.InputWiz.Status.Metrics[key57] = types.StringValue(string(result57))
				}
			}
			r.InputWiz.Status.Timestamp = types.Float64Value(resp.InputWiz.Status.Timestamp)
			r.InputWiz.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputWiz.Status.UseStatusFromLB)
		}
		r.InputWiz.Streamtags = make([]types.String, 0, len(resp.InputWiz.Streamtags))
		for _, v := range resp.InputWiz.Streamtags {
			r.InputWiz.Streamtags = append(r.InputWiz.Streamtags, types.StringValue(v))
		}
		r.InputWiz.TextSecret = types.StringPointerValue(resp.InputWiz.TextSecret)
		r.InputWiz.TTL = types.StringPointerValue(resp.InputWiz.TTL)
		if resp.InputWiz.Type != nil {
			r.InputWiz.Type = types.StringValue(string(*resp.InputWiz.Type))
		} else {
			r.InputWiz.Type = types.StringNull()
		}
	}
	if resp.InputZscalerHec != nil {
		r.InputZscalerHec = &tfTypes.InputZscalerHec{}
		r.InputZscalerHec.AccessControlAllowHeaders = make([]types.String, 0, len(resp.InputZscalerHec.AccessControlAllowHeaders))
		for _, v := range resp.InputZscalerHec.AccessControlAllowHeaders {
			r.InputZscalerHec.AccessControlAllowHeaders = append(r.InputZscalerHec.AccessControlAllowHeaders, types.StringValue(v))
		}
		r.InputZscalerHec.AccessControlAllowOrigin = make([]types.String, 0, len(resp.InputZscalerHec.AccessControlAllowOrigin))
		for _, v := range resp.InputZscalerHec.AccessControlAllowOrigin {
			r.InputZscalerHec.AccessControlAllowOrigin = append(r.InputZscalerHec.AccessControlAllowOrigin, types.StringValue(v))
		}
		r.InputZscalerHec.ActivityLogSampleRate = types.Float64PointerValue(resp.InputZscalerHec.ActivityLogSampleRate)
		r.InputZscalerHec.AllowedIndexes = make([]types.String, 0, len(resp.InputZscalerHec.AllowedIndexes))
		for _, v := range resp.InputZscalerHec.AllowedIndexes {
			r.InputZscalerHec.AllowedIndexes = append(r.InputZscalerHec.AllowedIndexes, types.StringValue(v))
		}
		r.InputZscalerHec.AuthTokens = []tfTypes.InputZscalerHecAuthTokens{}
		if len(r.InputZscalerHec.AuthTokens) > len(resp.InputZscalerHec.AuthTokens) {
			r.InputZscalerHec.AuthTokens = r.InputZscalerHec.AuthTokens[:len(resp.InputZscalerHec.AuthTokens)]
		}
		for authTokensCount2, authTokensItem2 := range resp.InputZscalerHec.AuthTokens {
			var authTokens2 tfTypes.InputZscalerHecAuthTokens
			authTokens2.AllowedIndexesAtToken = make([]types.String, 0, len(authTokensItem2.AllowedIndexesAtToken))
			for _, v := range authTokensItem2.AllowedIndexesAtToken {
				authTokens2.AllowedIndexesAtToken = append(authTokens2.AllowedIndexesAtToken, types.StringValue(v))
			}
			if authTokensItem2.AuthType != nil {
				authTokens2.AuthType = types.StringValue(string(*authTokensItem2.AuthType))
			} else {
				authTokens2.AuthType = types.StringNull()
			}
			authTokens2.Description = types.StringPointerValue(authTokensItem2.Description)
			authTokens2.Enabled = types.BoolPointerValue(authTokensItem2.Enabled)
			authTokens2.Metadata = []tfTypes.InputZscalerHecInputMetadata{}
			for metadataCount62, metadataItem62 := range authTokensItem2.Metadata {
				var metadata62 tfTypes.InputZscalerHecInputMetadata
				metadata62.Name = types.StringValue(metadataItem62.Name)
				metadata62.Value = types.StringValue(metadataItem62.Value)
				if metadataCount62+1 > len(authTokens2.Metadata) {
					authTokens2.Metadata = append(authTokens2.Metadata, metadata62)
				} else {
					authTokens2.Metadata[metadataCount62].Name = metadata62.Name
					authTokens2.Metadata[metadataCount62].Value = metadata62.Value
				}
			}
			tokenResult1, _ := json.Marshal(authTokensItem2.Token)
			authTokens2.Token = types.StringValue(string(tokenResult1))
			if authTokensItem2.TokenSecret == nil {
				authTokens2.TokenSecret = types.StringNull()
			} else {
				tokenSecretResult1, _ := json.Marshal(authTokensItem2.TokenSecret)
				authTokens2.TokenSecret = types.StringValue(string(tokenSecretResult1))
			}
			if authTokensCount2+1 > len(r.InputZscalerHec.AuthTokens) {
				r.InputZscalerHec.AuthTokens = append(r.InputZscalerHec.AuthTokens, authTokens2)
			} else {
				r.InputZscalerHec.AuthTokens[authTokensCount2].AllowedIndexesAtToken = authTokens2.AllowedIndexesAtToken
				r.InputZscalerHec.AuthTokens[authTokensCount2].AuthType = authTokens2.AuthType
				r.InputZscalerHec.AuthTokens[authTokensCount2].Description = authTokens2.Description
				r.InputZscalerHec.AuthTokens[authTokensCount2].Enabled = authTokens2.Enabled
				r.InputZscalerHec.AuthTokens[authTokensCount2].Metadata = authTokens2.Metadata
				r.InputZscalerHec.AuthTokens[authTokensCount2].Token = authTokens2.Token
				r.InputZscalerHec.AuthTokens[authTokensCount2].TokenSecret = authTokens2.TokenSecret
			}
		}
		r.InputZscalerHec.CaptureHeaders = types.BoolPointerValue(resp.InputZscalerHec.CaptureHeaders)
		r.InputZscalerHec.Connections = []tfTypes.InputZscalerHecConnections{}
		if len(r.InputZscalerHec.Connections) > len(resp.InputZscalerHec.Connections) {
			r.InputZscalerHec.Connections = r.InputZscalerHec.Connections[:len(resp.InputZscalerHec.Connections)]
		}
		for connectionsCount58, connectionsItem58 := range resp.InputZscalerHec.Connections {
			var connections58 tfTypes.InputZscalerHecConnections
			connections58.Output = types.StringValue(connectionsItem58.Output)
			connections58.Pipeline = types.StringPointerValue(connectionsItem58.Pipeline)
			if connectionsCount58+1 > len(r.InputZscalerHec.Connections) {
				r.InputZscalerHec.Connections = append(r.InputZscalerHec.Connections, connections58)
			} else {
				r.InputZscalerHec.Connections[connectionsCount58].Output = connections58.Output
				r.InputZscalerHec.Connections[connectionsCount58].Pipeline = connections58.Pipeline
			}
		}
		r.InputZscalerHec.Description = types.StringPointerValue(resp.InputZscalerHec.Description)
		r.InputZscalerHec.Disabled = types.BoolPointerValue(resp.InputZscalerHec.Disabled)
		r.InputZscalerHec.EmitTokenMetrics = types.BoolPointerValue(resp.InputZscalerHec.EmitTokenMetrics)
		if resp.InputZscalerHec.EnableHealthCheck == nil {
			r.InputZscalerHec.EnableHealthCheck = types.StringNull()
		} else {
			enableHealthCheckResult1, _ := json.Marshal(resp.InputZscalerHec.EnableHealthCheck)
			r.InputZscalerHec.EnableHealthCheck = types.StringValue(string(enableHealthCheckResult1))
		}
		r.InputZscalerHec.EnableProxyHeader = types.BoolPointerValue(resp.InputZscalerHec.EnableProxyHeader)
		r.InputZscalerHec.Environment = types.StringPointerValue(resp.InputZscalerHec.Environment)
		r.InputZscalerHec.HecAcks = types.BoolPointerValue(resp.InputZscalerHec.HecAcks)
		r.InputZscalerHec.HecAPI = types.StringPointerValue(resp.InputZscalerHec.HecAPI)
		r.InputZscalerHec.Host = types.StringPointerValue(resp.InputZscalerHec.Host)
		r.InputZscalerHec.ID = types.StringPointerValue(resp.InputZscalerHec.ID)
		r.InputZscalerHec.IPAllowlistRegex = types.StringPointerValue(resp.InputZscalerHec.IPAllowlistRegex)
		r.InputZscalerHec.IPDenylistRegex = types.StringPointerValue(resp.InputZscalerHec.IPDenylistRegex)
		r.InputZscalerHec.KeepAliveTimeout = types.Float64PointerValue(resp.InputZscalerHec.KeepAliveTimeout)
		r.InputZscalerHec.MaxActiveReq = types.Float64PointerValue(resp.InputZscalerHec.MaxActiveReq)
		r.InputZscalerHec.MaxRequestsPerSocket = types.Int64PointerValue(resp.InputZscalerHec.MaxRequestsPerSocket)
		r.InputZscalerHec.Metadata = []tfTypes.InputZscalerHecMetadata{}
		if len(r.InputZscalerHec.Metadata) > len(resp.InputZscalerHec.Metadata) {
			r.InputZscalerHec.Metadata = r.InputZscalerHec.Metadata[:len(resp.InputZscalerHec.Metadata)]
		}
		for metadataCount63, metadataItem63 := range resp.InputZscalerHec.Metadata {
			var metadata63 tfTypes.InputZscalerHecMetadata
			metadata63.Name = types.StringValue(metadataItem63.Name)
			metadata63.Value = types.StringValue(metadataItem63.Value)
			if metadataCount63+1 > len(r.InputZscalerHec.Metadata) {
				r.InputZscalerHec.Metadata = append(r.InputZscalerHec.Metadata, metadata63)
			} else {
				r.InputZscalerHec.Metadata[metadataCount63].Name = metadata63.Name
				r.InputZscalerHec.Metadata[metadataCount63].Value = metadata63.Value
			}
		}
		r.InputZscalerHec.Pipeline = types.StringPointerValue(resp.InputZscalerHec.Pipeline)
		r.InputZscalerHec.Port = types.Float64Value(resp.InputZscalerHec.Port)
		if resp.InputZscalerHec.Pq == nil {
			r.InputZscalerHec.Pq = nil
		} else {
			r.InputZscalerHec.Pq = &tfTypes.InputZscalerHecPq{}
			r.InputZscalerHec.Pq.CommitFrequency = types.Float64PointerValue(resp.InputZscalerHec.Pq.CommitFrequency)
			if resp.InputZscalerHec.Pq.Compress != nil {
				r.InputZscalerHec.Pq.Compress = types.StringValue(string(*resp.InputZscalerHec.Pq.Compress))
			} else {
				r.InputZscalerHec.Pq.Compress = types.StringNull()
			}
			r.InputZscalerHec.Pq.MaxBufferSize = types.Float64PointerValue(resp.InputZscalerHec.Pq.MaxBufferSize)
			r.InputZscalerHec.Pq.MaxFileSize = types.StringPointerValue(resp.InputZscalerHec.Pq.MaxFileSize)
			r.InputZscalerHec.Pq.MaxSize = types.StringPointerValue(resp.InputZscalerHec.Pq.MaxSize)
			if resp.InputZscalerHec.Pq.Mode != nil {
				r.InputZscalerHec.Pq.Mode = types.StringValue(string(*resp.InputZscalerHec.Pq.Mode))
			} else {
				r.InputZscalerHec.Pq.Mode = types.StringNull()
			}
			r.InputZscalerHec.Pq.Path = types.StringPointerValue(resp.InputZscalerHec.Pq.Path)
		}
		r.InputZscalerHec.PqEnabled = types.BoolPointerValue(resp.InputZscalerHec.PqEnabled)
		r.InputZscalerHec.RequestTimeout = types.Float64PointerValue(resp.InputZscalerHec.RequestTimeout)
		r.InputZscalerHec.SendToRoutes = types.BoolPointerValue(resp.InputZscalerHec.SendToRoutes)
		r.InputZscalerHec.SocketTimeout = types.Float64PointerValue(resp.InputZscalerHec.SocketTimeout)
		if resp.InputZscalerHec.Status == nil {
			r.InputZscalerHec.Status = nil
		} else {
			r.InputZscalerHec.Status = &tfTypes.TFStatus{}
			r.InputZscalerHec.Status.Health = types.StringValue(string(resp.InputZscalerHec.Status.Health))
			if len(resp.InputZscalerHec.Status.Metrics) > 0 {
				r.InputZscalerHec.Status.Metrics = make(map[string]types.String, len(resp.InputZscalerHec.Status.Metrics))
				for key58, value58 := range resp.InputZscalerHec.Status.Metrics {
					result58, _ := json.Marshal(value58)
					r.InputZscalerHec.Status.Metrics[key58] = types.StringValue(string(result58))
				}
			}
			r.InputZscalerHec.Status.Timestamp = types.Float64Value(resp.InputZscalerHec.Status.Timestamp)
			r.InputZscalerHec.Status.UseStatusFromLB = types.BoolPointerValue(resp.InputZscalerHec.Status.UseStatusFromLB)
		}
		r.InputZscalerHec.Streamtags = make([]types.String, 0, len(resp.InputZscalerHec.Streamtags))
		for _, v := range resp.InputZscalerHec.Streamtags {
			r.InputZscalerHec.Streamtags = append(r.InputZscalerHec.Streamtags, types.StringValue(v))
		}
		if resp.InputZscalerHec.TLS == nil {
			r.InputZscalerHec.TLS = nil
		} else {
			r.InputZscalerHec.TLS = &tfTypes.InputZscalerHecTLSSettingsServerSide{}
			r.InputZscalerHec.TLS.CaPath = types.StringPointerValue(resp.InputZscalerHec.TLS.CaPath)
			r.InputZscalerHec.TLS.CertificateName = types.StringPointerValue(resp.InputZscalerHec.TLS.CertificateName)
			r.InputZscalerHec.TLS.CertPath = types.StringPointerValue(resp.InputZscalerHec.TLS.CertPath)
			if resp.InputZscalerHec.TLS.CommonNameRegex == nil {
				r.InputZscalerHec.TLS.CommonNameRegex = types.StringNull()
			} else {
				commonNameRegexResult21, _ := json.Marshal(resp.InputZscalerHec.TLS.CommonNameRegex)
				r.InputZscalerHec.TLS.CommonNameRegex = types.StringValue(string(commonNameRegexResult21))
			}
			r.InputZscalerHec.TLS.Disabled = types.BoolPointerValue(resp.InputZscalerHec.TLS.Disabled)
			if resp.InputZscalerHec.TLS.MaxVersion != nil {
				r.InputZscalerHec.TLS.MaxVersion = types.StringValue(string(*resp.InputZscalerHec.TLS.MaxVersion))
			} else {
				r.InputZscalerHec.TLS.MaxVersion = types.StringNull()
			}
			if resp.InputZscalerHec.TLS.MinVersion != nil {
				r.InputZscalerHec.TLS.MinVersion = types.StringValue(string(*resp.InputZscalerHec.TLS.MinVersion))
			} else {
				r.InputZscalerHec.TLS.MinVersion = types.StringNull()
			}
			r.InputZscalerHec.TLS.Passphrase = types.StringPointerValue(resp.InputZscalerHec.TLS.Passphrase)
			r.InputZscalerHec.TLS.PrivKeyPath = types.StringPointerValue(resp.InputZscalerHec.TLS.PrivKeyPath)
			if resp.InputZscalerHec.TLS.RejectUnauthorized == nil {
				r.InputZscalerHec.TLS.RejectUnauthorized = types.StringNull()
			} else {
				rejectUnauthorizedResult21, _ := json.Marshal(resp.InputZscalerHec.TLS.RejectUnauthorized)
				r.InputZscalerHec.TLS.RejectUnauthorized = types.StringValue(string(rejectUnauthorizedResult21))
			}
			r.InputZscalerHec.TLS.RequestCert = types.BoolPointerValue(resp.InputZscalerHec.TLS.RequestCert)
		}
		if resp.InputZscalerHec.Type != nil {
			r.InputZscalerHec.Type = types.StringValue(string(*resp.InputZscalerHec.Type))
		} else {
			r.InputZscalerHec.Type = types.StringNull()
		}
	}

	return diags
}
