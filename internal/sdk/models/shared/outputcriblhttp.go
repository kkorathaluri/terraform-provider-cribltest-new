// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type Health string

const (
	HealthGreen  Health = "Green"
	HealthYellow Health = "Yellow"
	HealthRed    Health = "Red"
)

func (e Health) ToPointer() *Health {
	return &e
}
func (e *Health) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Green":
		fallthrough
	case "Yellow":
		fallthrough
	case "Red":
		*e = Health(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Health: %v", v)
	}
}

type OutputCriblHTTPStatus struct {
	Health          Health         `json:"health"`
	Metrics         map[string]any `json:"metrics"`
	Timestamp       float64        `json:"timestamp"`
	UseStatusFromLB *bool          `json:"useStatusFromLB,omitempty"`
}

func (o *OutputCriblHTTPStatus) GetHealth() Health {
	if o == nil {
		return Health("")
	}
	return o.Health
}

func (o *OutputCriblHTTPStatus) GetMetrics() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Metrics
}

func (o *OutputCriblHTTPStatus) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *OutputCriblHTTPStatus) GetUseStatusFromLB() *bool {
	if o == nil {
		return nil
	}
	return o.UseStatusFromLB
}

type OutputCriblHTTPType string

const (
	OutputCriblHTTPTypeCriblHTTP OutputCriblHTTPType = "cribl_http"
)

func (e OutputCriblHTTPType) ToPointer() *OutputCriblHTTPType {
	return &e
}
func (e *OutputCriblHTTPType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cribl_http":
		*e = OutputCriblHTTPType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPType: %v", v)
	}
}

// OutputCriblHTTPMinimumTLSVersion - Minimum TLS version to use when connecting
type OutputCriblHTTPMinimumTLSVersion string

const (
	OutputCriblHTTPMinimumTLSVersionTlSv1  OutputCriblHTTPMinimumTLSVersion = "TLSv1"
	OutputCriblHTTPMinimumTLSVersionTlSv11 OutputCriblHTTPMinimumTLSVersion = "TLSv1.1"
	OutputCriblHTTPMinimumTLSVersionTlSv12 OutputCriblHTTPMinimumTLSVersion = "TLSv1.2"
	OutputCriblHTTPMinimumTLSVersionTlSv13 OutputCriblHTTPMinimumTLSVersion = "TLSv1.3"
)

func (e OutputCriblHTTPMinimumTLSVersion) ToPointer() *OutputCriblHTTPMinimumTLSVersion {
	return &e
}
func (e *OutputCriblHTTPMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputCriblHTTPMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPMinimumTLSVersion: %v", v)
	}
}

// OutputCriblHTTPMaximumTLSVersion - Maximum TLS version to use when connecting
type OutputCriblHTTPMaximumTLSVersion string

const (
	OutputCriblHTTPMaximumTLSVersionTlSv1  OutputCriblHTTPMaximumTLSVersion = "TLSv1"
	OutputCriblHTTPMaximumTLSVersionTlSv11 OutputCriblHTTPMaximumTLSVersion = "TLSv1.1"
	OutputCriblHTTPMaximumTLSVersionTlSv12 OutputCriblHTTPMaximumTLSVersion = "TLSv1.2"
	OutputCriblHTTPMaximumTLSVersionTlSv13 OutputCriblHTTPMaximumTLSVersion = "TLSv1.3"
)

func (e OutputCriblHTTPMaximumTLSVersion) ToPointer() *OutputCriblHTTPMaximumTLSVersion {
	return &e
}
func (e *OutputCriblHTTPMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputCriblHTTPMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPMaximumTLSVersion: %v", v)
	}
}

type OutputCriblHTTPTLSSettingsClientSide struct {
	Disabled *bool `default:"true" json:"disabled"`
	// Reject certs that are not authorized by a CA in the CA certificate path, or by another
	//                     trusted CA (e.g., the system's CA). Defaults to Yes. Overrides the toggle from Advanced Settings, when also present.
	RejectUnauthorized *bool `default:"true" json:"rejectUnauthorized"`
	// Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
	Servername *string `json:"servername,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string `json:"certificateName,omitempty"`
	// Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Minimum TLS version to use when connecting
	MinVersion *OutputCriblHTTPMinimumTLSVersion `json:"minVersion,omitempty"`
	// Maximum TLS version to use when connecting
	MaxVersion *OutputCriblHTTPMaximumTLSVersion `json:"maxVersion,omitempty"`
}

func (o OutputCriblHTTPTLSSettingsClientSide) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputCriblHTTPTLSSettingsClientSide) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputCriblHTTPTLSSettingsClientSide) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *OutputCriblHTTPTLSSettingsClientSide) GetRejectUnauthorized() *bool {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *OutputCriblHTTPTLSSettingsClientSide) GetServername() *string {
	if o == nil {
		return nil
	}
	return o.Servername
}

func (o *OutputCriblHTTPTLSSettingsClientSide) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *OutputCriblHTTPTLSSettingsClientSide) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *OutputCriblHTTPTLSSettingsClientSide) GetPrivKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.PrivKeyPath
}

func (o *OutputCriblHTTPTLSSettingsClientSide) GetCertPath() *string {
	if o == nil {
		return nil
	}
	return o.CertPath
}

func (o *OutputCriblHTTPTLSSettingsClientSide) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *OutputCriblHTTPTLSSettingsClientSide) GetMinVersion() *OutputCriblHTTPMinimumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *OutputCriblHTTPTLSSettingsClientSide) GetMaxVersion() *OutputCriblHTTPMaximumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MaxVersion
}

// OutputCriblHTTPCompression - Codec to use to compress the data before sending.
type OutputCriblHTTPCompression string

const (
	OutputCriblHTTPCompressionNone OutputCriblHTTPCompression = "none"
	OutputCriblHTTPCompressionGzip OutputCriblHTTPCompression = "gzip"
)

func (e OutputCriblHTTPCompression) ToPointer() *OutputCriblHTTPCompression {
	return &e
}
func (e *OutputCriblHTTPCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputCriblHTTPCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPCompression: %v", v)
	}
}

type OutputCriblHTTPExtraHTTPHeaders struct {
	// Field name
	Name *string `json:"name,omitempty"`
	// Field value
	Value string `json:"value"`
}

func (o *OutputCriblHTTPExtraHTTPHeaders) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OutputCriblHTTPExtraHTTPHeaders) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// OutputCriblHTTPFailedRequestLoggingMode - Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
type OutputCriblHTTPFailedRequestLoggingMode string

const (
	OutputCriblHTTPFailedRequestLoggingModePayload           OutputCriblHTTPFailedRequestLoggingMode = "payload"
	OutputCriblHTTPFailedRequestLoggingModePayloadAndHeaders OutputCriblHTTPFailedRequestLoggingMode = "payloadAndHeaders"
	OutputCriblHTTPFailedRequestLoggingModeNone              OutputCriblHTTPFailedRequestLoggingMode = "none"
)

func (e OutputCriblHTTPFailedRequestLoggingMode) ToPointer() *OutputCriblHTTPFailedRequestLoggingMode {
	return &e
}
func (e *OutputCriblHTTPFailedRequestLoggingMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payload":
		fallthrough
	case "payloadAndHeaders":
		fallthrough
	case "none":
		*e = OutputCriblHTTPFailedRequestLoggingMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPFailedRequestLoggingMode: %v", v)
	}
}

type OutputCriblHTTPResponseRetrySettings struct {
	// The HTTP response status code that will trigger retries
	HTTPStatus float64 `json:"httpStatus"`
	// How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
	InitialBackoff *float64 `default:"1000" json:"initialBackoff"`
	// Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
	BackoffRate *float64 `default:"2" json:"backoffRate"`
	// The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
	MaxBackoff *float64 `default:"10000" json:"maxBackoff"`
}

func (o OutputCriblHTTPResponseRetrySettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputCriblHTTPResponseRetrySettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputCriblHTTPResponseRetrySettings) GetHTTPStatus() float64 {
	if o == nil {
		return 0.0
	}
	return o.HTTPStatus
}

func (o *OutputCriblHTTPResponseRetrySettings) GetInitialBackoff() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialBackoff
}

func (o *OutputCriblHTTPResponseRetrySettings) GetBackoffRate() *float64 {
	if o == nil {
		return nil
	}
	return o.BackoffRate
}

func (o *OutputCriblHTTPResponseRetrySettings) GetMaxBackoff() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBackoff
}

type OutputCriblHTTPTimeoutRetrySettings struct {
	// Enable to retry on request timeout
	TimeoutRetry *bool `default:"false" json:"timeoutRetry"`
	// How long, in milliseconds, Cribl Stream should wait before initiating backoff. Maximum interval is 600,000 ms (10 minutes).
	InitialBackoff *float64 `default:"1000" json:"initialBackoff"`
	// Base for exponential backoff. A value of 2 (default) means Cribl Stream will retry after 2 seconds, then 4 seconds, then 8 seconds, etc.
	BackoffRate *float64 `default:"2" json:"backoffRate"`
	// The maximum backoff interval, in milliseconds, Cribl Stream should apply. Default (and minimum) is 10,000 ms (10 seconds); maximum is 180,000 ms (180 seconds).
	MaxBackoff *float64 `default:"10000" json:"maxBackoff"`
}

func (o OutputCriblHTTPTimeoutRetrySettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputCriblHTTPTimeoutRetrySettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputCriblHTTPTimeoutRetrySettings) GetTimeoutRetry() *bool {
	if o == nil {
		return nil
	}
	return o.TimeoutRetry
}

func (o *OutputCriblHTTPTimeoutRetrySettings) GetInitialBackoff() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialBackoff
}

func (o *OutputCriblHTTPTimeoutRetrySettings) GetBackoffRate() *float64 {
	if o == nil {
		return nil
	}
	return o.BackoffRate
}

func (o *OutputCriblHTTPTimeoutRetrySettings) GetMaxBackoff() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBackoff
}

// OutputCriblHTTPBackpressureBehavior - Whether to block, drop, or queue events when all receivers are exerting backpressure.
type OutputCriblHTTPBackpressureBehavior string

const (
	OutputCriblHTTPBackpressureBehaviorBlock OutputCriblHTTPBackpressureBehavior = "block"
	OutputCriblHTTPBackpressureBehaviorDrop  OutputCriblHTTPBackpressureBehavior = "drop"
	OutputCriblHTTPBackpressureBehaviorQueue OutputCriblHTTPBackpressureBehavior = "queue"
)

func (e OutputCriblHTTPBackpressureBehavior) ToPointer() *OutputCriblHTTPBackpressureBehavior {
	return &e
}
func (e *OutputCriblHTTPBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		fallthrough
	case "queue":
		*e = OutputCriblHTTPBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPBackpressureBehavior: %v", v)
	}
}

type OutputCriblHTTPUrls struct {
	// URL of a Cribl Worker to send events to, e.g., http://localhost:10200
	URL string `json:"url"`
	// Assign a weight (>0) to each endpoint to indicate its traffic-handling capability
	Weight *float64 `default:"1" json:"weight"`
}

func (o OutputCriblHTTPUrls) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputCriblHTTPUrls) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputCriblHTTPUrls) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *OutputCriblHTTPUrls) GetWeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Weight
}

// OutputCriblHTTPPqCompressCompression - Codec to use to compress the persisted data.
type OutputCriblHTTPPqCompressCompression string

const (
	OutputCriblHTTPPqCompressCompressionNone OutputCriblHTTPPqCompressCompression = "none"
	OutputCriblHTTPPqCompressCompressionGzip OutputCriblHTTPPqCompressCompression = "gzip"
)

func (e OutputCriblHTTPPqCompressCompression) ToPointer() *OutputCriblHTTPPqCompressCompression {
	return &e
}
func (e *OutputCriblHTTPPqCompressCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputCriblHTTPPqCompressCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPPqCompressCompression: %v", v)
	}
}

// OutputCriblHTTPQueueFullBehavior - Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputCriblHTTPQueueFullBehavior string

const (
	OutputCriblHTTPQueueFullBehaviorBlock OutputCriblHTTPQueueFullBehavior = "block"
	OutputCriblHTTPQueueFullBehaviorDrop  OutputCriblHTTPQueueFullBehavior = "drop"
)

func (e OutputCriblHTTPQueueFullBehavior) ToPointer() *OutputCriblHTTPQueueFullBehavior {
	return &e
}
func (e *OutputCriblHTTPQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputCriblHTTPQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPQueueFullBehavior: %v", v)
	}
}

// OutputCriblHTTPMode - In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem.
type OutputCriblHTTPMode string

const (
	OutputCriblHTTPModeError        OutputCriblHTTPMode = "error"
	OutputCriblHTTPModeBackpressure OutputCriblHTTPMode = "backpressure"
	OutputCriblHTTPModeAlways       OutputCriblHTTPMode = "always"
)

func (e OutputCriblHTTPMode) ToPointer() *OutputCriblHTTPMode {
	return &e
}
func (e *OutputCriblHTTPMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "backpressure":
		fallthrough
	case "always":
		*e = OutputCriblHTTPMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblHTTPMode: %v", v)
	}
}

type OutputCriblHTTPPqControls struct {
}

type OutputCriblHTTP struct {
	Status *OutputCriblHTTPStatus `json:"status,omitempty"`
	// Unique ID for this output
	ID   string              `json:"id"`
	Type OutputCriblHTTPType `json:"type"`
	// Pipeline to process data before sending out to this output
	Pipeline *string `json:"pipeline,omitempty"`
	// Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
	SystemFields []string `json:"systemFields,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// For optimal performance, enable load balancing even if you have one hostname, as it can expand to multiple IPs. If this setting is disabled, consider enabling round-robin DNS.
	LoadBalanced *bool                                 `default:"true" json:"loadBalanced"`
	TLS          *OutputCriblHTTPTLSSettingsClientSide `json:"tls,omitempty"`
	// The number of minutes before the internally generated authentication token expires, valid values between 1 and 60.
	TokenTTLMinutes *float64 `default:"60" json:"tokenTTLMinutes"`
	// Fields to exclude from the event. By default, all internal fields except `__output` are sent. E.g.: `cribl_pipe`, `c*`. Wildcards supported.
	ExcludeFields []string `json:"excludeFields,omitempty"`
	// Codec to use to compress the data before sending.
	Compression *OutputCriblHTTPCompression `default:"gzip" json:"compression"`
	// Maximum number of ongoing requests before blocking
	Concurrency *float64 `default:"5" json:"concurrency"`
	// Maximum size, in KB, of the request body
	MaxPayloadSizeKB *float64 `default:"4096" json:"maxPayloadSizeKB"`
	// Maximum number of events to include in the request body. Default is 0 (unlimited).
	MaxPayloadEvents *float64 `default:"0" json:"maxPayloadEvents"`
	// Reject certificates not authorized by a CA in the CA certificate path or by another trusted CA (such as the system's).
	//         Defaults to Yes. When this setting is also present in TLS Settings (Client Side),
	//         that value will take precedence.
	RejectUnauthorized *bool `default:"true" json:"rejectUnauthorized"`
	// Amount of time, in seconds, to wait for a request to complete before canceling it
	TimeoutSec *float64 `default:"30" json:"timeoutSec"`
	// Maximum time between requests. Small values could cause the payload size to be smaller than the configured Max body size.
	FlushPeriodSec *float64 `default:"1" json:"flushPeriodSec"`
	// Headers to add to all events.
	ExtraHTTPHeaders []OutputCriblHTTPExtraHTTPHeaders `json:"extraHttpHeaders,omitempty"`
	// Data to log when a request fails. All headers are redacted by default, unless listed as safe headers below.
	FailedRequestLoggingMode *OutputCriblHTTPFailedRequestLoggingMode `default:"none" json:"failedRequestLoggingMode"`
	// List of headers that are safe to log in plain text
	SafeHeaders []string `json:"safeHeaders,omitempty"`
	// Automatically retry after unsuccessful response status codes, such as 429 (Too Many Requests) or 503 (Service Unavailable).
	ResponseRetrySettings []OutputCriblHTTPResponseRetrySettings `json:"responseRetrySettings,omitempty"`
	TimeoutRetrySettings  *OutputCriblHTTPTimeoutRetrySettings   `json:"timeoutRetrySettings,omitempty"`
	// Honor any Retry-After header that specifies a delay (in seconds) no longer than 180 seconds after the retry request. @{product} limits the delay to 180 seconds, even if the Retry-After header specifies a longer delay. When enabled, takes precedence over user-configured retry options. When disabled, all Retry-After headers are ignored.
	ResponseHonorRetryAfterHeader *bool `default:"false" json:"responseHonorRetryAfterHeader"`
	// Whether to block, drop, or queue events when all receivers are exerting backpressure.
	OnBackpressure *OutputCriblHTTPBackpressureBehavior `default:"block" json:"onBackpressure"`
	Description    *string                              `json:"description,omitempty"`
	// URL of a Cribl Worker to send events to, e.g., http://localhost:10200
	URL *string `json:"url,omitempty"`
	// Enables round-robin DNS lookup. When a DNS server returns multiple addresses, @{product} will cycle through them in the order returned. For optimal performance, consider enabling this setting for non-load balanced destinations.
	UseRoundRobinDNS *bool `default:"false" json:"useRoundRobinDns"`
	// Exclude all IPs of the current host from the list of any resolved hostnames.
	ExcludeSelf *bool                 `default:"false" json:"excludeSelf"`
	Urls        []OutputCriblHTTPUrls `json:"urls,omitempty"`
	// Re-resolve any hostnames every this many seconds and pick up destinations from A records.
	DNSResolvePeriodSec *float64 `default:"600" json:"dnsResolvePeriodSec"`
	// How far back in time to keep traffic stats for load balancing purposes.
	LoadBalanceStatsPeriodSec *float64 `default:"300" json:"loadBalanceStatsPeriodSec"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	PqMaxFileSize *string `default:"1 MB" json:"pqMaxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `default:"5GB" json:"pqMaxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `default:"\\$CRIBL_HOME/state/queues" json:"pqPath"`
	// Codec to use to compress the persisted data.
	PqCompress *OutputCriblHTTPPqCompressCompression `default:"none" json:"pqCompress"`
	// Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputCriblHTTPQueueFullBehavior `default:"block" json:"pqOnBackpressure"`
	// In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem.
	PqMode     *OutputCriblHTTPMode       `default:"error" json:"pqMode"`
	PqControls *OutputCriblHTTPPqControls `json:"pqControls,omitempty"`
}

func (o OutputCriblHTTP) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputCriblHTTP) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *OutputCriblHTTP) GetStatus() *OutputCriblHTTPStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *OutputCriblHTTP) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OutputCriblHTTP) GetType() OutputCriblHTTPType {
	if o == nil {
		return OutputCriblHTTPType("")
	}
	return o.Type
}

func (o *OutputCriblHTTP) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *OutputCriblHTTP) GetSystemFields() []string {
	if o == nil {
		return nil
	}
	return o.SystemFields
}

func (o *OutputCriblHTTP) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *OutputCriblHTTP) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *OutputCriblHTTP) GetLoadBalanced() *bool {
	if o == nil {
		return nil
	}
	return o.LoadBalanced
}

func (o *OutputCriblHTTP) GetTLS() *OutputCriblHTTPTLSSettingsClientSide {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *OutputCriblHTTP) GetTokenTTLMinutes() *float64 {
	if o == nil {
		return nil
	}
	return o.TokenTTLMinutes
}

func (o *OutputCriblHTTP) GetExcludeFields() []string {
	if o == nil {
		return nil
	}
	return o.ExcludeFields
}

func (o *OutputCriblHTTP) GetCompression() *OutputCriblHTTPCompression {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *OutputCriblHTTP) GetConcurrency() *float64 {
	if o == nil {
		return nil
	}
	return o.Concurrency
}

func (o *OutputCriblHTTP) GetMaxPayloadSizeKB() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxPayloadSizeKB
}

func (o *OutputCriblHTTP) GetMaxPayloadEvents() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxPayloadEvents
}

func (o *OutputCriblHTTP) GetRejectUnauthorized() *bool {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *OutputCriblHTTP) GetTimeoutSec() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeoutSec
}

func (o *OutputCriblHTTP) GetFlushPeriodSec() *float64 {
	if o == nil {
		return nil
	}
	return o.FlushPeriodSec
}

func (o *OutputCriblHTTP) GetExtraHTTPHeaders() []OutputCriblHTTPExtraHTTPHeaders {
	if o == nil {
		return nil
	}
	return o.ExtraHTTPHeaders
}

func (o *OutputCriblHTTP) GetFailedRequestLoggingMode() *OutputCriblHTTPFailedRequestLoggingMode {
	if o == nil {
		return nil
	}
	return o.FailedRequestLoggingMode
}

func (o *OutputCriblHTTP) GetSafeHeaders() []string {
	if o == nil {
		return nil
	}
	return o.SafeHeaders
}

func (o *OutputCriblHTTP) GetResponseRetrySettings() []OutputCriblHTTPResponseRetrySettings {
	if o == nil {
		return nil
	}
	return o.ResponseRetrySettings
}

func (o *OutputCriblHTTP) GetTimeoutRetrySettings() *OutputCriblHTTPTimeoutRetrySettings {
	if o == nil {
		return nil
	}
	return o.TimeoutRetrySettings
}

func (o *OutputCriblHTTP) GetResponseHonorRetryAfterHeader() *bool {
	if o == nil {
		return nil
	}
	return o.ResponseHonorRetryAfterHeader
}

func (o *OutputCriblHTTP) GetOnBackpressure() *OutputCriblHTTPBackpressureBehavior {
	if o == nil {
		return nil
	}
	return o.OnBackpressure
}

func (o *OutputCriblHTTP) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *OutputCriblHTTP) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *OutputCriblHTTP) GetUseRoundRobinDNS() *bool {
	if o == nil {
		return nil
	}
	return o.UseRoundRobinDNS
}

func (o *OutputCriblHTTP) GetExcludeSelf() *bool {
	if o == nil {
		return nil
	}
	return o.ExcludeSelf
}

func (o *OutputCriblHTTP) GetUrls() []OutputCriblHTTPUrls {
	if o == nil {
		return nil
	}
	return o.Urls
}

func (o *OutputCriblHTTP) GetDNSResolvePeriodSec() *float64 {
	if o == nil {
		return nil
	}
	return o.DNSResolvePeriodSec
}

func (o *OutputCriblHTTP) GetLoadBalanceStatsPeriodSec() *float64 {
	if o == nil {
		return nil
	}
	return o.LoadBalanceStatsPeriodSec
}

func (o *OutputCriblHTTP) GetPqMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.PqMaxFileSize
}

func (o *OutputCriblHTTP) GetPqMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.PqMaxSize
}

func (o *OutputCriblHTTP) GetPqPath() *string {
	if o == nil {
		return nil
	}
	return o.PqPath
}

func (o *OutputCriblHTTP) GetPqCompress() *OutputCriblHTTPPqCompressCompression {
	if o == nil {
		return nil
	}
	return o.PqCompress
}

func (o *OutputCriblHTTP) GetPqOnBackpressure() *OutputCriblHTTPQueueFullBehavior {
	if o == nil {
		return nil
	}
	return o.PqOnBackpressure
}

func (o *OutputCriblHTTP) GetPqMode() *OutputCriblHTTPMode {
	if o == nil {
		return nil
	}
	return o.PqMode
}

func (o *OutputCriblHTTP) GetPqControls() *OutputCriblHTTPPqControls {
	if o == nil {
		return nil
	}
	return o.PqControls
}
