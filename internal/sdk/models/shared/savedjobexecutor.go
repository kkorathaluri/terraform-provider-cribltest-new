// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type SavedJobExecutorJobType string

const (
	SavedJobExecutorJobTypeCollection      SavedJobExecutorJobType = "collection"
	SavedJobExecutorJobTypeExecutor        SavedJobExecutorJobType = "executor"
	SavedJobExecutorJobTypeScheduledSearch SavedJobExecutorJobType = "scheduledSearch"
)

func (e SavedJobExecutorJobType) ToPointer() *SavedJobExecutorJobType {
	return &e
}
func (e *SavedJobExecutorJobType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		fallthrough
	case "executor":
		fallthrough
	case "scheduledSearch":
		*e = SavedJobExecutorJobType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavedJobExecutorJobType: %v", v)
	}
}

type SavedJobExecutorType string

const (
	SavedJobExecutorTypeCollection SavedJobExecutorType = "collection"
)

func (e SavedJobExecutorType) ToPointer() *SavedJobExecutorType {
	return &e
}
func (e *SavedJobExecutorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		*e = SavedJobExecutorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavedJobExecutorType: %v", v)
	}
}

// SavedJobExecutorLogLevel - Level at which to set task logging
type SavedJobExecutorLogLevel string

const (
	SavedJobExecutorLogLevelError SavedJobExecutorLogLevel = "error"
	SavedJobExecutorLogLevelWarn  SavedJobExecutorLogLevel = "warn"
	SavedJobExecutorLogLevelInfo  SavedJobExecutorLogLevel = "info"
	SavedJobExecutorLogLevelDebug SavedJobExecutorLogLevel = "debug"
	SavedJobExecutorLogLevelSilly SavedJobExecutorLogLevel = "silly"
)

func (e SavedJobExecutorLogLevel) ToPointer() *SavedJobExecutorLogLevel {
	return &e
}
func (e *SavedJobExecutorLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "silly":
		*e = SavedJobExecutorLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavedJobExecutorLogLevel: %v", v)
	}
}

type SavedJobExecutorTimeWarning struct {
}

type SavedJobExecutorRunSettings struct {
	Type *SavedJobExecutorType `json:"type,omitempty"`
	// Reschedule tasks that failed with non-fatal errors
	RescheduleDroppedTasks *bool `default:"true" json:"rescheduleDroppedTasks"`
	// Maximum number of times a task can be rescheduled
	MaxTaskReschedule *float64 `default:"1" json:"maxTaskReschedule"`
	// Level at which to set task logging
	LogLevel *SavedJobExecutorLogLevel `default:"info" json:"logLevel"`
	// Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time.
	JobTimeout *string `default:"0" json:"jobTimeout"`
	// Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
	Mode          *string `default:"list" json:"mode"`
	TimeRangeType *string `default:"relative" json:"timeRangeType"`
	// Earliest time to collect data for the selected timezone
	Earliest *float64 `json:"earliest,omitempty"`
	// Latest time to collect data for the selected timezone
	Latest            *float64                     `json:"latest,omitempty"`
	TimestampTimezone any                          `json:"timestampTimezone,omitempty"`
	TimeWarning       *SavedJobExecutorTimeWarning `json:"timeWarning,omitempty"`
	// A filter for tokens in the provided collect path and/or the events being collected
	Expression *string `default:"true" json:"expression"`
	// Limits the bundle size for small tasks. For example,
	//
	//
	//
	//
	//
	//         if your lower bundle size is 1MB, you can bundle up to five 200KB files into one task.
	MinTaskSize *string `default:"1MB" json:"minTaskSize"`
	// Limits the bundle size for files above the lower task bundle size. For example, if your upper bundle size is 10MB,
	//
	//
	//
	//
	//
	//         you can bundle up to five 2MB files into one task. Files greater than this size will be assigned to individual tasks.
	MaxTaskSize *string `default:"10MB" json:"maxTaskSize"`
}

func (s SavedJobExecutorRunSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedJobExecutorRunSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SavedJobExecutorRunSettings) GetType() *SavedJobExecutorType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *SavedJobExecutorRunSettings) GetRescheduleDroppedTasks() *bool {
	if o == nil {
		return nil
	}
	return o.RescheduleDroppedTasks
}

func (o *SavedJobExecutorRunSettings) GetMaxTaskReschedule() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxTaskReschedule
}

func (o *SavedJobExecutorRunSettings) GetLogLevel() *SavedJobExecutorLogLevel {
	if o == nil {
		return nil
	}
	return o.LogLevel
}

func (o *SavedJobExecutorRunSettings) GetJobTimeout() *string {
	if o == nil {
		return nil
	}
	return o.JobTimeout
}

func (o *SavedJobExecutorRunSettings) GetMode() *string {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *SavedJobExecutorRunSettings) GetTimeRangeType() *string {
	if o == nil {
		return nil
	}
	return o.TimeRangeType
}

func (o *SavedJobExecutorRunSettings) GetEarliest() *float64 {
	if o == nil {
		return nil
	}
	return o.Earliest
}

func (o *SavedJobExecutorRunSettings) GetLatest() *float64 {
	if o == nil {
		return nil
	}
	return o.Latest
}

func (o *SavedJobExecutorRunSettings) GetTimestampTimezone() any {
	if o == nil {
		return nil
	}
	return o.TimestampTimezone
}

func (o *SavedJobExecutorRunSettings) GetTimeWarning() *SavedJobExecutorTimeWarning {
	if o == nil {
		return nil
	}
	return o.TimeWarning
}

func (o *SavedJobExecutorRunSettings) GetExpression() *string {
	if o == nil {
		return nil
	}
	return o.Expression
}

func (o *SavedJobExecutorRunSettings) GetMinTaskSize() *string {
	if o == nil {
		return nil
	}
	return o.MinTaskSize
}

func (o *SavedJobExecutorRunSettings) GetMaxTaskSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxTaskSize
}

// SavedJobExecutorSchedule - Configuration for a scheduled job
type SavedJobExecutorSchedule struct {
	// Enable to configure scheduling for this Collector
	Enabled *bool `json:"enabled,omitempty"`
	// A cron schedule on which to run this job
	CronSchedule *string `default:"*/5 * * * *" json:"cronSchedule"`
	// The maximum number of instances of this scheduled job that may be running at any time
	MaxConcurrentRuns *float64 `default:"1" json:"maxConcurrentRuns"`
	// Skippable jobs can be delayed, up to their next run time, if the system is hitting concurrency limits
	Skippable    *bool                        `default:"true" json:"skippable"`
	ResumeMissed any                          `json:"resumeMissed,omitempty"`
	Run          *SavedJobExecutorRunSettings `json:"run,omitempty"`
}

func (s SavedJobExecutorSchedule) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedJobExecutorSchedule) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SavedJobExecutorSchedule) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *SavedJobExecutorSchedule) GetCronSchedule() *string {
	if o == nil {
		return nil
	}
	return o.CronSchedule
}

func (o *SavedJobExecutorSchedule) GetMaxConcurrentRuns() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxConcurrentRuns
}

func (o *SavedJobExecutorSchedule) GetSkippable() *bool {
	if o == nil {
		return nil
	}
	return o.Skippable
}

func (o *SavedJobExecutorSchedule) GetResumeMissed() any {
	if o == nil {
		return nil
	}
	return o.ResumeMissed
}

func (o *SavedJobExecutorSchedule) GetRun() *SavedJobExecutorRunSettings {
	if o == nil {
		return nil
	}
	return o.Run
}

type ExecutorSpecificSettings struct {
}

type SavedJobExecutorExecutor struct {
	// The type of executor to run
	Type string `json:"type"`
	// Determines whether or not to write task results to disk
	StoreTaskResults *bool                     `default:"true" json:"storeTaskResults"`
	Conf             *ExecutorSpecificSettings `json:"conf,omitempty"`
}

func (s SavedJobExecutorExecutor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedJobExecutorExecutor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SavedJobExecutorExecutor) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *SavedJobExecutorExecutor) GetStoreTaskResults() *bool {
	if o == nil {
		return nil
	}
	return o.StoreTaskResults
}

func (o *SavedJobExecutorExecutor) GetConf() *ExecutorSpecificSettings {
	if o == nil {
		return nil
	}
	return o.Conf
}

type SavedJobExecutor struct {
	// Unique ID for this Job
	ID          *string                 `json:"id,omitempty"`
	Description *string                 `json:"description,omitempty"`
	Type        SavedJobExecutorJobType `json:"type"`
	// Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
	TTL *string `default:"4h" json:"ttl"`
	// List of fields to remove from Discover results. Wildcards (for example, aws*) are allowed. This is useful when discovery returns sensitive fields that should not be exposed in the Jobs user interface.
	RemoveFields []string `json:"removeFields,omitempty"`
	// Resume the ad hoc job if a failure condition causes Stream to restart during job execution
	ResumeOnBoot *bool `default:"false" json:"resumeOnBoot"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Configuration for a scheduled job
	Schedule *SavedJobExecutorSchedule `json:"schedule,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string                 `json:"streamtags,omitempty"`
	Executor   SavedJobExecutorExecutor `json:"executor"`
}

func (s SavedJobExecutor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedJobExecutor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SavedJobExecutor) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SavedJobExecutor) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SavedJobExecutor) GetType() SavedJobExecutorJobType {
	if o == nil {
		return SavedJobExecutorJobType("")
	}
	return o.Type
}

func (o *SavedJobExecutor) GetTTL() *string {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *SavedJobExecutor) GetRemoveFields() []string {
	if o == nil {
		return nil
	}
	return o.RemoveFields
}

func (o *SavedJobExecutor) GetResumeOnBoot() *bool {
	if o == nil {
		return nil
	}
	return o.ResumeOnBoot
}

func (o *SavedJobExecutor) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *SavedJobExecutor) GetSchedule() *SavedJobExecutorSchedule {
	if o == nil {
		return nil
	}
	return o.Schedule
}

func (o *SavedJobExecutor) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *SavedJobExecutor) GetExecutor() SavedJobExecutorExecutor {
	if o == nil {
		return SavedJobExecutorExecutor{}
	}
	return o.Executor
}
