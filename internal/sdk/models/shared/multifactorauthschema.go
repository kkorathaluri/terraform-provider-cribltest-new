// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MultiFactorAuthSchemaType string

const (
	MultiFactorAuthSchemaTypePiv MultiFactorAuthSchemaType = "piv"
)

func (e MultiFactorAuthSchemaType) ToPointer() *MultiFactorAuthSchemaType {
	return &e
}
func (e *MultiFactorAuthSchemaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "piv":
		*e = MultiFactorAuthSchemaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MultiFactorAuthSchemaType: %v", v)
	}
}

type MultiFactorAuthSchema struct {
	AccessControlAllowOrigin string                    `json:"accessControlAllowOrigin"`
	AllowLogin               bool                      `json:"allowLogin"`
	APIServerURL             string                    `json:"apiServerUrl"`
	Disabled                 bool                      `json:"disabled"`
	Type                     MultiFactorAuthSchemaType `json:"type"`
	UsernameField            string                    `json:"usernameField"`
	UsernameRegex            string                    `json:"usernameRegex"`
}

func (o *MultiFactorAuthSchema) GetAccessControlAllowOrigin() string {
	if o == nil {
		return ""
	}
	return o.AccessControlAllowOrigin
}

func (o *MultiFactorAuthSchema) GetAllowLogin() bool {
	if o == nil {
		return false
	}
	return o.AllowLogin
}

func (o *MultiFactorAuthSchema) GetAPIServerURL() string {
	if o == nil {
		return ""
	}
	return o.APIServerURL
}

func (o *MultiFactorAuthSchema) GetDisabled() bool {
	if o == nil {
		return false
	}
	return o.Disabled
}

func (o *MultiFactorAuthSchema) GetType() MultiFactorAuthSchemaType {
	if o == nil {
		return MultiFactorAuthSchemaType("")
	}
	return o.Type
}

func (o *MultiFactorAuthSchema) GetUsernameField() string {
	if o == nil {
		return ""
	}
	return o.UsernameField
}

func (o *MultiFactorAuthSchema) GetUsernameRegex() string {
	if o == nil {
		return ""
	}
	return o.UsernameRegex
}
