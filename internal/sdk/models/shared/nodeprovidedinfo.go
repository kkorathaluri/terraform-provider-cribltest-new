// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type NodeProvidedInfoTags struct {
}

type Aws struct {
	Enabled bool                  `json:"enabled"`
	Region  string                `json:"region"`
	Tags    *NodeProvidedInfoTags `json:"tags,omitempty"`
	Type    string                `json:"type"`
	Zone    string                `json:"zone"`
}

func (o *Aws) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *Aws) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *Aws) GetTags() *NodeProvidedInfoTags {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *Aws) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Aws) GetZone() string {
	if o == nil {
		return ""
	}
	return o.Zone
}

type HostOs struct {
	Addresses []string `json:"addresses"`
	Enabled   bool     `json:"enabled"`
	ID        string   `json:"id"`
	Version   string   `json:"version"`
}

func (o *HostOs) GetAddresses() []string {
	if o == nil {
		return []string{}
	}
	return o.Addresses
}

func (o *HostOs) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *HostOs) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *HostOs) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

type Owner struct {
	Kind string `json:"kind"`
	Name string `json:"name"`
}

func (o *Owner) GetKind() string {
	if o == nil {
		return ""
	}
	return o.Kind
}

func (o *Owner) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Kube struct {
	Enabled   bool   `json:"enabled"`
	Namespace string `json:"namespace"`
	Node      string `json:"node"`
	Owner     *Owner `json:"owner,omitempty"`
	Pod       string `json:"pod"`
	Source    string `json:"source"`
}

func (o *Kube) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *Kube) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *Kube) GetNode() string {
	if o == nil {
		return ""
	}
	return o.Node
}

func (o *Kube) GetOwner() *Owner {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *Kube) GetPod() string {
	if o == nil {
		return ""
	}
	return o.Pod
}

func (o *Kube) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

type Os2 struct {
	Addresses []string `json:"addresses"`
}

func (o *Os2) GetAddresses() []string {
	if o == nil {
		return []string{}
	}
	return o.Addresses
}

type Os1 struct {
	Addresses []string `json:"addresses"`
	Enabled   bool     `json:"enabled"`
	ID        string   `json:"id"`
	Version   string   `json:"version"`
}

func (o *Os1) GetAddresses() []string {
	if o == nil {
		return []string{}
	}
	return o.Addresses
}

func (o *Os1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *Os1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Os1) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

type NodeProvidedInfoOsType string

const (
	NodeProvidedInfoOsTypeOs1 NodeProvidedInfoOsType = "os_1"
	NodeProvidedInfoOsTypeOs2 NodeProvidedInfoOsType = "os_2"
)

type NodeProvidedInfoOs struct {
	Os1 *Os1 `queryParam:"inline"`
	Os2 *Os2 `queryParam:"inline"`

	Type NodeProvidedInfoOsType
}

func CreateNodeProvidedInfoOsOs1(os1 Os1) NodeProvidedInfoOs {
	typ := NodeProvidedInfoOsTypeOs1

	return NodeProvidedInfoOs{
		Os1:  &os1,
		Type: typ,
	}
}

func CreateNodeProvidedInfoOsOs2(os2 Os2) NodeProvidedInfoOs {
	typ := NodeProvidedInfoOsTypeOs2

	return NodeProvidedInfoOs{
		Os2:  &os2,
		Type: typ,
	}
}

func (u *NodeProvidedInfoOs) UnmarshalJSON(data []byte) error {

	var os2 Os2 = Os2{}
	if err := utils.UnmarshalJSON(data, &os2, "", true, true); err == nil {
		u.Os2 = &os2
		u.Type = NodeProvidedInfoOsTypeOs2
		return nil
	}

	var os1 Os1 = Os1{}
	if err := utils.UnmarshalJSON(data, &os1, "", true, true); err == nil {
		u.Os1 = &os1
		u.Type = NodeProvidedInfoOsTypeOs1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for NodeProvidedInfoOs", string(data))
}

func (u NodeProvidedInfoOs) MarshalJSON() ([]byte, error) {
	if u.Os1 != nil {
		return utils.MarshalJSON(u.Os1, "", true)
	}

	if u.Os2 != nil {
		return utils.MarshalJSON(u.Os2, "", true)
	}

	return nil, errors.New("could not marshal union type NodeProvidedInfoOs: all fields are null")
}

type NodeProvidedInfo struct {
	Architecture   string              `json:"architecture"`
	Aws            *Aws                `json:"aws,omitempty"`
	ConnIP         *string             `json:"conn_ip,omitempty"`
	Cpus           float64             `json:"cpus"`
	Cribl          HBCriblInfo         `json:"cribl"`
	FreeDiskSpace  float64             `json:"freeDiskSpace"`
	HostOs         *HostOs             `json:"hostOs,omitempty"`
	Hostname       string              `json:"hostname"`
	IsSaasWorker   *bool               `json:"isSaasWorker,omitempty"`
	Kube           *Kube               `json:"kube,omitempty"`
	LocalTime      *float64            `json:"localTime,omitempty"`
	Metadata       *HeartbeatMetadata  `json:"metadata,omitempty"`
	Node           string              `json:"node"`
	Os             *NodeProvidedInfoOs `json:"os,omitempty"`
	Platform       string              `json:"platform"`
	Release        string              `json:"release"`
	TotalDiskSpace float64             `json:"totalDiskSpace"`
	Totalmem       float64             `json:"totalmem"`
}

func (o *NodeProvidedInfo) GetArchitecture() string {
	if o == nil {
		return ""
	}
	return o.Architecture
}

func (o *NodeProvidedInfo) GetAws() *Aws {
	if o == nil {
		return nil
	}
	return o.Aws
}

func (o *NodeProvidedInfo) GetConnIP() *string {
	if o == nil {
		return nil
	}
	return o.ConnIP
}

func (o *NodeProvidedInfo) GetCpus() float64 {
	if o == nil {
		return 0.0
	}
	return o.Cpus
}

func (o *NodeProvidedInfo) GetCribl() HBCriblInfo {
	if o == nil {
		return HBCriblInfo{}
	}
	return o.Cribl
}

func (o *NodeProvidedInfo) GetFreeDiskSpace() float64 {
	if o == nil {
		return 0.0
	}
	return o.FreeDiskSpace
}

func (o *NodeProvidedInfo) GetHostOs() *HostOs {
	if o == nil {
		return nil
	}
	return o.HostOs
}

func (o *NodeProvidedInfo) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *NodeProvidedInfo) GetIsSaasWorker() *bool {
	if o == nil {
		return nil
	}
	return o.IsSaasWorker
}

func (o *NodeProvidedInfo) GetKube() *Kube {
	if o == nil {
		return nil
	}
	return o.Kube
}

func (o *NodeProvidedInfo) GetLocalTime() *float64 {
	if o == nil {
		return nil
	}
	return o.LocalTime
}

func (o *NodeProvidedInfo) GetMetadata() *HeartbeatMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *NodeProvidedInfo) GetNode() string {
	if o == nil {
		return ""
	}
	return o.Node
}

func (o *NodeProvidedInfo) GetOs() *NodeProvidedInfoOs {
	if o == nil {
		return nil
	}
	return o.Os
}

func (o *NodeProvidedInfo) GetPlatform() string {
	if o == nil {
		return ""
	}
	return o.Platform
}

func (o *NodeProvidedInfo) GetRelease() string {
	if o == nil {
		return ""
	}
	return o.Release
}

func (o *NodeProvidedInfo) GetTotalDiskSpace() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalDiskSpace
}

func (o *NodeProvidedInfo) GetTotalmem() float64 {
	if o == nil {
		return 0.0
	}
	return o.Totalmem
}
