// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type HealthStatusRole string

const (
	HealthStatusRolePrimary HealthStatusRole = "primary"
	HealthStatusRoleStandby HealthStatusRole = "standby"
)

func (e HealthStatusRole) ToPointer() *HealthStatusRole {
	return &e
}
func (e *HealthStatusRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "primary":
		fallthrough
	case "standby":
		*e = HealthStatusRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HealthStatusRole: %v", v)
	}
}

type HealthStatusStatus string

const (
	HealthStatusStatusHealthy      HealthStatusStatus = "healthy"
	HealthStatusStatusShuttingDown HealthStatusStatus = "shutting down"
	HealthStatusStatusStandby      HealthStatusStatus = "standby"
)

func (e HealthStatusStatus) ToPointer() *HealthStatusStatus {
	return &e
}
func (e *HealthStatusStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "healthy":
		fallthrough
	case "shutting down":
		fallthrough
	case "standby":
		*e = HealthStatusStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HealthStatusStatus: %v", v)
	}
}

type HealthStatus struct {
	Role      *HealthStatusRole  `json:"role,omitempty"`
	Status    HealthStatusStatus `json:"status"`
	StartTime float64            `json:"startTime"`
}

func (o *HealthStatus) GetRole() *HealthStatusRole {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *HealthStatus) GetStatus() HealthStatusStatus {
	if o == nil {
		return HealthStatusStatus("")
	}
	return o.Status
}

func (o *HealthStatus) GetStartTime() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartTime
}
