// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
	"time"
)

type InvoiceV5Status string

const (
	InvoiceV5StatusDraft     InvoiceV5Status = "DRAFT"
	InvoiceV5StatusFinalized InvoiceV5Status = "FINALIZED"
	InvoiceV5StatusVoid      InvoiceV5Status = "VOID"
)

func (e InvoiceV5Status) ToPointer() *InvoiceV5Status {
	return &e
}
func (e *InvoiceV5Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "FINALIZED":
		fallthrough
	case "VOID":
		*e = InvoiceV5Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvoiceV5Status: %v", v)
	}
}

type InvoiceV5 struct {
	ID           string             `json:"id"`
	FromDate     time.Time          `json:"fromDate"`
	ToDate       time.Time          `json:"toDate"`
	TotalCredits float64            `json:"totalCredits"`
	Status       InvoiceV5Status    `json:"status"`
	Products     []InvoiceProductV5 `json:"products"`
}

func (i InvoiceV5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InvoiceV5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InvoiceV5) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *InvoiceV5) GetFromDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.FromDate
}

func (o *InvoiceV5) GetToDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ToDate
}

func (o *InvoiceV5) GetTotalCredits() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalCredits
}

func (o *InvoiceV5) GetStatus() InvoiceV5Status {
	if o == nil {
		return InvoiceV5Status("")
	}
	return o.Status
}

func (o *InvoiceV5) GetProducts() []InvoiceProductV5 {
	if o == nil {
		return []InvoiceProductV5{}
	}
	return o.Products
}
