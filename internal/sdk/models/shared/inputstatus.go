// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Health string

const (
	HealthGreen  Health = "Green"
	HealthYellow Health = "Yellow"
	HealthRed    Health = "Red"
)

func (e Health) ToPointer() *Health {
	return &e
}
func (e *Health) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Green":
		fallthrough
	case "Yellow":
		fallthrough
	case "Red":
		*e = Health(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Health: %v", v)
	}
}

type InputStatusStatus struct {
	Health          Health         `json:"health"`
	Metrics         map[string]any `json:"metrics"`
	Timestamp       float64        `json:"timestamp"`
	UseStatusFromLB *bool          `json:"useStatusFromLB,omitempty"`
}

func (o *InputStatusStatus) GetHealth() Health {
	if o == nil {
		return Health("")
	}
	return o.Health
}

func (o *InputStatusStatus) GetMetrics() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Metrics
}

func (o *InputStatusStatus) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *InputStatusStatus) GetUseStatusFromLB() *bool {
	if o == nil {
		return nil
	}
	return o.UseStatusFromLB
}

type InputStatus struct {
	ID     string            `json:"id"`
	Status InputStatusStatus `json:"status"`
}

func (o *InputStatus) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *InputStatus) GetStatus() InputStatusStatus {
	if o == nil {
		return InputStatusStatus{}
	}
	return o.Status
}
