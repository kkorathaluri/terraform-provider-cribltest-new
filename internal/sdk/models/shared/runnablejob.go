// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type RunnableJobType string

const (
	RunnableJobTypeRunnableJobCollection      RunnableJobType = "RunnableJobCollection"
	RunnableJobTypeRunnableJobExecutor        RunnableJobType = "RunnableJobExecutor"
	RunnableJobTypeRunnableJobScheduledSearch RunnableJobType = "RunnableJobScheduledSearch"
)

type RunnableJob struct {
	RunnableJobCollection      *RunnableJobCollection      `queryParam:"inline"`
	RunnableJobExecutor        *RunnableJobExecutor        `queryParam:"inline"`
	RunnableJobScheduledSearch *RunnableJobScheduledSearch `queryParam:"inline"`

	Type RunnableJobType
}

func CreateRunnableJobRunnableJobCollection(runnableJobCollection RunnableJobCollection) RunnableJob {
	typ := RunnableJobTypeRunnableJobCollection

	return RunnableJob{
		RunnableJobCollection: &runnableJobCollection,
		Type:                  typ,
	}
}

func CreateRunnableJobRunnableJobExecutor(runnableJobExecutor RunnableJobExecutor) RunnableJob {
	typ := RunnableJobTypeRunnableJobExecutor

	return RunnableJob{
		RunnableJobExecutor: &runnableJobExecutor,
		Type:                typ,
	}
}

func CreateRunnableJobRunnableJobScheduledSearch(runnableJobScheduledSearch RunnableJobScheduledSearch) RunnableJob {
	typ := RunnableJobTypeRunnableJobScheduledSearch

	return RunnableJob{
		RunnableJobScheduledSearch: &runnableJobScheduledSearch,
		Type:                       typ,
	}
}

func (u *RunnableJob) UnmarshalJSON(data []byte) error {

	var runnableJobScheduledSearch RunnableJobScheduledSearch = RunnableJobScheduledSearch{}
	if err := utils.UnmarshalJSON(data, &runnableJobScheduledSearch, "", true, true); err == nil {
		u.RunnableJobScheduledSearch = &runnableJobScheduledSearch
		u.Type = RunnableJobTypeRunnableJobScheduledSearch
		return nil
	}

	var runnableJobExecutor RunnableJobExecutor = RunnableJobExecutor{}
	if err := utils.UnmarshalJSON(data, &runnableJobExecutor, "", true, true); err == nil {
		u.RunnableJobExecutor = &runnableJobExecutor
		u.Type = RunnableJobTypeRunnableJobExecutor
		return nil
	}

	var runnableJobCollection RunnableJobCollection = RunnableJobCollection{}
	if err := utils.UnmarshalJSON(data, &runnableJobCollection, "", true, true); err == nil {
		u.RunnableJobCollection = &runnableJobCollection
		u.Type = RunnableJobTypeRunnableJobCollection
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RunnableJob", string(data))
}

func (u RunnableJob) MarshalJSON() ([]byte, error) {
	if u.RunnableJobCollection != nil {
		return utils.MarshalJSON(u.RunnableJobCollection, "", true)
	}

	if u.RunnableJobExecutor != nil {
		return utils.MarshalJSON(u.RunnableJobExecutor, "", true)
	}

	if u.RunnableJobScheduledSearch != nil {
		return utils.MarshalJSON(u.RunnableJobScheduledSearch, "", true)
	}

	return nil, errors.New("could not marshal union type RunnableJob: all fields are null")
}
