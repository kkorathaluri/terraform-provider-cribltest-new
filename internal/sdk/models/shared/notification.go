// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type EmailRecipient struct {
	// Recipients' email addresses
	To string `json:"to"`
	// Cc: Recipients' email addresses
	Cc *string `json:"cc,omitempty"`
	// Bcc: Recipients' email addresses
	Bcc *string `json:"bcc,omitempty"`
}

func (o *EmailRecipient) GetTo() string {
	if o == nil {
		return ""
	}
	return o.To
}

func (o *EmailRecipient) GetCc() *string {
	if o == nil {
		return nil
	}
	return o.Cc
}

func (o *EmailRecipient) GetBcc() *string {
	if o == nil {
		return nil
	}
	return o.Bcc
}

type NotificationConfigForSMTPTarget struct {
	// Email subject
	Subject *string `json:"subject,omitempty"`
	// Email body
	Body           *string         `json:"body,omitempty"`
	EmailRecipient *EmailRecipient `json:"emailRecipient,omitempty"`
}

func (o *NotificationConfigForSMTPTarget) GetSubject() *string {
	if o == nil {
		return nil
	}
	return o.Subject
}

func (o *NotificationConfigForSMTPTarget) GetBody() *string {
	if o == nil {
		return nil
	}
	return o.Body
}

func (o *NotificationConfigForSMTPTarget) GetEmailRecipient() *EmailRecipient {
	if o == nil {
		return nil
	}
	return o.EmailRecipient
}

type One struct {
	Conf *NotificationConfigForSMTPTarget `json:"conf,omitempty"`
	ID   string                           `json:"id"`
}

func (o *One) GetConf() *NotificationConfigForSMTPTarget {
	if o == nil {
		return nil
	}
	return o.Conf
}

func (o *One) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type TargetConfigsType string

const (
	TargetConfigsTypeOne TargetConfigsType = "1"
)

type TargetConfigs struct {
	One *One `queryParam:"inline"`

	Type TargetConfigsType
}

func CreateTargetConfigsOne(one One) TargetConfigs {
	typ := TargetConfigsTypeOne

	return TargetConfigs{
		One:  &one,
		Type: typ,
	}
}

func (u *TargetConfigs) UnmarshalJSON(data []byte) error {

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = TargetConfigsTypeOne
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TargetConfigs", string(data))
}

func (u TargetConfigs) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	return nil, errors.New("could not marshal union type TargetConfigs: all fields are null")
}

type ConditionSpecificConfigs struct {
}

type NotificationMetadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *NotificationMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *NotificationMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type Notification struct {
	ID        string `json:"id"`
	Disabled  *bool  `default:"false" json:"disabled"`
	Condition string `json:"condition"`
	// Targets to send any Notifications to
	Targets       []string                  `json:"targets,omitempty"`
	TargetConfigs []TargetConfigs           `json:"targetConfigs,omitempty"`
	Conf          *ConditionSpecificConfigs `json:"conf,omitempty"`
	// Fields to add to events from this input
	Metadata []NotificationMetadata `json:"metadata,omitempty"`
}

func (n Notification) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *Notification) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Notification) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Notification) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *Notification) GetCondition() string {
	if o == nil {
		return ""
	}
	return o.Condition
}

func (o *Notification) GetTargets() []string {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *Notification) GetTargetConfigs() []TargetConfigs {
	if o == nil {
		return nil
	}
	return o.TargetConfigs
}

func (o *Notification) GetConf() *ConditionSpecificConfigs {
	if o == nil {
		return nil
	}
	return o.Conf
}

func (o *Notification) GetMetadata() []NotificationMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}
