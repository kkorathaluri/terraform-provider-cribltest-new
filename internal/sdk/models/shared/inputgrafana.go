// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type InputGrafana2Type string

const (
	InputGrafana2TypeGrafana InputGrafana2Type = "grafana"
)

func (e InputGrafana2Type) ToPointer() *InputGrafana2Type {
	return &e
}
func (e *InputGrafana2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grafana":
		*e = InputGrafana2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafana2Type: %v", v)
	}
}

type InputGrafana2Connections struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputGrafana2Connections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputGrafana2Connections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputGrafana2Mode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputGrafana2Mode string

const (
	InputGrafana2ModeSmart  InputGrafana2Mode = "smart"
	InputGrafana2ModeAlways InputGrafana2Mode = "always"
)

func (e InputGrafana2Mode) ToPointer() *InputGrafana2Mode {
	return &e
}
func (e *InputGrafana2Mode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputGrafana2Mode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafana2Mode: %v", v)
	}
}

// InputGrafana2Compression - Codec to use to compress the persisted data
type InputGrafana2Compression string

const (
	InputGrafana2CompressionNone InputGrafana2Compression = "none"
	InputGrafana2CompressionGzip InputGrafana2Compression = "gzip"
)

func (e InputGrafana2Compression) ToPointer() *InputGrafana2Compression {
	return &e
}
func (e *InputGrafana2Compression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputGrafana2Compression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafana2Compression: %v", v)
	}
}

type InputGrafana2Pq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputGrafana2Mode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputGrafana2Compression `default:"none" json:"compress"`
}

func (i InputGrafana2Pq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputGrafana2Pq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputGrafana2Pq) GetMode() *InputGrafana2Mode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputGrafana2Pq) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputGrafana2Pq) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputGrafana2Pq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputGrafana2Pq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputGrafana2Pq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputGrafana2Pq) GetCompress() *InputGrafana2Compression {
	if o == nil {
		return nil
	}
	return o.Compress
}

// InputGrafana2MinimumTLSVersion - Minimum TLS version to accept from connections
type InputGrafana2MinimumTLSVersion string

const (
	InputGrafana2MinimumTLSVersionTlSv1  InputGrafana2MinimumTLSVersion = "TLSv1"
	InputGrafana2MinimumTLSVersionTlSv11 InputGrafana2MinimumTLSVersion = "TLSv1.1"
	InputGrafana2MinimumTLSVersionTlSv12 InputGrafana2MinimumTLSVersion = "TLSv1.2"
	InputGrafana2MinimumTLSVersionTlSv13 InputGrafana2MinimumTLSVersion = "TLSv1.3"
)

func (e InputGrafana2MinimumTLSVersion) ToPointer() *InputGrafana2MinimumTLSVersion {
	return &e
}
func (e *InputGrafana2MinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputGrafana2MinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafana2MinimumTLSVersion: %v", v)
	}
}

// InputGrafana2MaximumTLSVersion - Maximum TLS version to accept from connections
type InputGrafana2MaximumTLSVersion string

const (
	InputGrafana2MaximumTLSVersionTlSv1  InputGrafana2MaximumTLSVersion = "TLSv1"
	InputGrafana2MaximumTLSVersionTlSv11 InputGrafana2MaximumTLSVersion = "TLSv1.1"
	InputGrafana2MaximumTLSVersionTlSv12 InputGrafana2MaximumTLSVersion = "TLSv1.2"
	InputGrafana2MaximumTLSVersionTlSv13 InputGrafana2MaximumTLSVersion = "TLSv1.3"
)

func (e InputGrafana2MaximumTLSVersion) ToPointer() *InputGrafana2MaximumTLSVersion {
	return &e
}
func (e *InputGrafana2MaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputGrafana2MaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafana2MaximumTLSVersion: %v", v)
	}
}

type InputGrafana2TLSSettingsServerSide struct {
	Disabled *bool `default:"true" json:"disabled"`
	// The name of the predefined certificate
	CertificateName *string `json:"certificateName,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Passphrase to use to decrypt private key
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert        *bool `default:"false" json:"requestCert"`
	RejectUnauthorized any   `json:"rejectUnauthorized,omitempty"`
	CommonNameRegex    any   `json:"commonNameRegex,omitempty"`
	// Minimum TLS version to accept from connections
	MinVersion *InputGrafana2MinimumTLSVersion `json:"minVersion,omitempty"`
	// Maximum TLS version to accept from connections
	MaxVersion *InputGrafana2MaximumTLSVersion `json:"maxVersion,omitempty"`
}

func (i InputGrafana2TLSSettingsServerSide) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputGrafana2TLSSettingsServerSide) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputGrafana2TLSSettingsServerSide) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputGrafana2TLSSettingsServerSide) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *InputGrafana2TLSSettingsServerSide) GetPrivKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.PrivKeyPath
}

func (o *InputGrafana2TLSSettingsServerSide) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *InputGrafana2TLSSettingsServerSide) GetCertPath() *string {
	if o == nil {
		return nil
	}
	return o.CertPath
}

func (o *InputGrafana2TLSSettingsServerSide) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *InputGrafana2TLSSettingsServerSide) GetRequestCert() *bool {
	if o == nil {
		return nil
	}
	return o.RequestCert
}

func (o *InputGrafana2TLSSettingsServerSide) GetRejectUnauthorized() any {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputGrafana2TLSSettingsServerSide) GetCommonNameRegex() any {
	if o == nil {
		return nil
	}
	return o.CommonNameRegex
}

func (o *InputGrafana2TLSSettingsServerSide) GetMinVersion() *InputGrafana2MinimumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *InputGrafana2TLSSettingsServerSide) GetMaxVersion() *InputGrafana2MaximumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MaxVersion
}

// InputGrafana2AuthenticationType - Remote Write authentication type
type InputGrafana2AuthenticationType string

const (
	InputGrafana2AuthenticationTypeNone              InputGrafana2AuthenticationType = "none"
	InputGrafana2AuthenticationTypeBasic             InputGrafana2AuthenticationType = "basic"
	InputGrafana2AuthenticationTypeCredentialsSecret InputGrafana2AuthenticationType = "credentialsSecret"
	InputGrafana2AuthenticationTypeToken             InputGrafana2AuthenticationType = "token"
	InputGrafana2AuthenticationTypeTextSecret        InputGrafana2AuthenticationType = "textSecret"
	InputGrafana2AuthenticationTypeOauth             InputGrafana2AuthenticationType = "oauth"
)

func (e InputGrafana2AuthenticationType) ToPointer() *InputGrafana2AuthenticationType {
	return &e
}
func (e *InputGrafana2AuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "basic":
		fallthrough
	case "credentialsSecret":
		fallthrough
	case "token":
		fallthrough
	case "textSecret":
		fallthrough
	case "oauth":
		*e = InputGrafana2AuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafana2AuthenticationType: %v", v)
	}
}

type InputGrafana2OauthParams struct {
	// OAuth parameter name
	Name string `json:"name"`
	// OAuth parameter value
	Value string `json:"value"`
}

func (o *InputGrafana2OauthParams) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputGrafana2OauthParams) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputGrafana2OauthHeaders struct {
	// OAuth header name
	Name string `json:"name"`
	// OAuth header value
	Value string `json:"value"`
}

func (o *InputGrafana2OauthHeaders) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputGrafana2OauthHeaders) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputGrafanaPrometheusAuth struct {
	// Remote Write authentication type
	AuthType *InputGrafana2AuthenticationType `default:"none" json:"authType"`
	// Username for Basic authentication
	Username *string `json:"username,omitempty"`
	// Password for Basic authentication
	Password *string `json:"password,omitempty"`
	// Bearer token to include in the authorization header
	Token *string `json:"token,omitempty"`
	// Select or create a secret that references your credentials
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
	// Select or create a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
	// URL for OAuth
	LoginURL *string `json:"loginUrl,omitempty"`
	// Secret parameter name to pass in request body
	SecretParamName *string `json:"secretParamName,omitempty"`
	// Secret parameter value to pass in request body
	Secret *string `json:"secret,omitempty"`
	// Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
	TokenAttributeName *string `json:"tokenAttributeName,omitempty"`
	// JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
	AuthHeaderExpr *string `default:"Bearer \\${token}" json:"authHeaderExpr"`
	// How often the OAuth token should be refreshed.
	TokenTimeoutSecs *float64 `default:"3600" json:"tokenTimeoutSecs"`
	// Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthParams []InputGrafana2OauthParams `json:"oauthParams,omitempty"`
	// Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthHeaders []InputGrafana2OauthHeaders `json:"oauthHeaders,omitempty"`
}

func (i InputGrafanaPrometheusAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputGrafanaPrometheusAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputGrafanaPrometheusAuth) GetAuthType() *InputGrafana2AuthenticationType {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *InputGrafanaPrometheusAuth) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *InputGrafanaPrometheusAuth) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *InputGrafanaPrometheusAuth) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *InputGrafanaPrometheusAuth) GetCredentialsSecret() *string {
	if o == nil {
		return nil
	}
	return o.CredentialsSecret
}

func (o *InputGrafanaPrometheusAuth) GetTextSecret() *string {
	if o == nil {
		return nil
	}
	return o.TextSecret
}

func (o *InputGrafanaPrometheusAuth) GetLoginURL() *string {
	if o == nil {
		return nil
	}
	return o.LoginURL
}

func (o *InputGrafanaPrometheusAuth) GetSecretParamName() *string {
	if o == nil {
		return nil
	}
	return o.SecretParamName
}

func (o *InputGrafanaPrometheusAuth) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *InputGrafanaPrometheusAuth) GetTokenAttributeName() *string {
	if o == nil {
		return nil
	}
	return o.TokenAttributeName
}

func (o *InputGrafanaPrometheusAuth) GetAuthHeaderExpr() *string {
	if o == nil {
		return nil
	}
	return o.AuthHeaderExpr
}

func (o *InputGrafanaPrometheusAuth) GetTokenTimeoutSecs() *float64 {
	if o == nil {
		return nil
	}
	return o.TokenTimeoutSecs
}

func (o *InputGrafanaPrometheusAuth) GetOauthParams() []InputGrafana2OauthParams {
	if o == nil {
		return nil
	}
	return o.OauthParams
}

func (o *InputGrafanaPrometheusAuth) GetOauthHeaders() []InputGrafana2OauthHeaders {
	if o == nil {
		return nil
	}
	return o.OauthHeaders
}

// InputGrafana2LokiAuthAuthenticationType - Loki logs authentication type
type InputGrafana2LokiAuthAuthenticationType string

const (
	InputGrafana2LokiAuthAuthenticationTypeNone              InputGrafana2LokiAuthAuthenticationType = "none"
	InputGrafana2LokiAuthAuthenticationTypeBasic             InputGrafana2LokiAuthAuthenticationType = "basic"
	InputGrafana2LokiAuthAuthenticationTypeCredentialsSecret InputGrafana2LokiAuthAuthenticationType = "credentialsSecret"
	InputGrafana2LokiAuthAuthenticationTypeToken             InputGrafana2LokiAuthAuthenticationType = "token"
	InputGrafana2LokiAuthAuthenticationTypeTextSecret        InputGrafana2LokiAuthAuthenticationType = "textSecret"
	InputGrafana2LokiAuthAuthenticationTypeOauth             InputGrafana2LokiAuthAuthenticationType = "oauth"
)

func (e InputGrafana2LokiAuthAuthenticationType) ToPointer() *InputGrafana2LokiAuthAuthenticationType {
	return &e
}
func (e *InputGrafana2LokiAuthAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "basic":
		fallthrough
	case "credentialsSecret":
		fallthrough
	case "token":
		fallthrough
	case "textSecret":
		fallthrough
	case "oauth":
		*e = InputGrafana2LokiAuthAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafana2LokiAuthAuthenticationType: %v", v)
	}
}

type InputGrafana2LokiAuthOauthParams struct {
	// OAuth parameter name
	Name string `json:"name"`
	// OAuth parameter value
	Value string `json:"value"`
}

func (o *InputGrafana2LokiAuthOauthParams) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputGrafana2LokiAuthOauthParams) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputGrafana2LokiAuthOauthHeaders struct {
	// OAuth header name
	Name string `json:"name"`
	// OAuth header value
	Value string `json:"value"`
}

func (o *InputGrafana2LokiAuthOauthHeaders) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputGrafana2LokiAuthOauthHeaders) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputGrafanaLokiAuth struct {
	// Loki logs authentication type
	AuthType *InputGrafana2LokiAuthAuthenticationType `default:"none" json:"authType"`
	// Username for Basic authentication
	Username *string `json:"username,omitempty"`
	// Password for Basic authentication
	Password *string `json:"password,omitempty"`
	// Bearer token to include in the authorization header
	Token *string `json:"token,omitempty"`
	// Select or create a secret that references your credentials
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
	// Select or create a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
	// URL for OAuth
	LoginURL *string `json:"loginUrl,omitempty"`
	// Secret parameter name to pass in request body
	SecretParamName *string `json:"secretParamName,omitempty"`
	// Secret parameter value to pass in request body
	Secret *string `json:"secret,omitempty"`
	// Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
	TokenAttributeName *string `json:"tokenAttributeName,omitempty"`
	// JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
	AuthHeaderExpr *string `default:"Bearer \\${token}" json:"authHeaderExpr"`
	// How often the OAuth token should be refreshed.
	TokenTimeoutSecs *float64 `default:"3600" json:"tokenTimeoutSecs"`
	// Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthParams []InputGrafana2LokiAuthOauthParams `json:"oauthParams,omitempty"`
	// Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthHeaders []InputGrafana2LokiAuthOauthHeaders `json:"oauthHeaders,omitempty"`
}

func (i InputGrafanaLokiAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputGrafanaLokiAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputGrafanaLokiAuth) GetAuthType() *InputGrafana2LokiAuthAuthenticationType {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *InputGrafanaLokiAuth) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *InputGrafanaLokiAuth) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *InputGrafanaLokiAuth) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *InputGrafanaLokiAuth) GetCredentialsSecret() *string {
	if o == nil {
		return nil
	}
	return o.CredentialsSecret
}

func (o *InputGrafanaLokiAuth) GetTextSecret() *string {
	if o == nil {
		return nil
	}
	return o.TextSecret
}

func (o *InputGrafanaLokiAuth) GetLoginURL() *string {
	if o == nil {
		return nil
	}
	return o.LoginURL
}

func (o *InputGrafanaLokiAuth) GetSecretParamName() *string {
	if o == nil {
		return nil
	}
	return o.SecretParamName
}

func (o *InputGrafanaLokiAuth) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *InputGrafanaLokiAuth) GetTokenAttributeName() *string {
	if o == nil {
		return nil
	}
	return o.TokenAttributeName
}

func (o *InputGrafanaLokiAuth) GetAuthHeaderExpr() *string {
	if o == nil {
		return nil
	}
	return o.AuthHeaderExpr
}

func (o *InputGrafanaLokiAuth) GetTokenTimeoutSecs() *float64 {
	if o == nil {
		return nil
	}
	return o.TokenTimeoutSecs
}

func (o *InputGrafanaLokiAuth) GetOauthParams() []InputGrafana2LokiAuthOauthParams {
	if o == nil {
		return nil
	}
	return o.OauthParams
}

func (o *InputGrafanaLokiAuth) GetOauthHeaders() []InputGrafana2LokiAuthOauthHeaders {
	if o == nil {
		return nil
	}
	return o.OauthHeaders
}

type InputGrafana2Metadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputGrafana2Metadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputGrafana2Metadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputGrafana2 struct {
	// Unique ID for this input
	ID       *string            `json:"id,omitempty"`
	Type     *InputGrafana2Type `json:"type,omitempty"`
	Disabled *bool              `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputGrafana2Connections `json:"connections,omitempty"`
	Pq          *InputGrafana2Pq           `json:"pq,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses).
	Host *string `default:"0.0.0.0" json:"host"`
	// Port to listen on
	Port float64                             `json:"port"`
	TLS  *InputGrafana2TLSSettingsServerSide `json:"tls,omitempty"`
	// Maximum number of active requests per Worker Process. Use 0 for unlimited.
	MaxActiveReq *float64 `default:"256" json:"maxActiveReq"`
	// Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
	MaxRequestsPerSocket *int64 `default:"0" json:"maxRequestsPerSocket"`
	// Enable when clients are connecting through a proxy that supports the x-forwarded-for header to keep the client's original IP address on the event instead of the proxy's IP address
	EnableProxyHeader *bool `default:"false" json:"enableProxyHeader"`
	// Toggle this to Yes to add request headers to events, in the __headers field.
	CaptureHeaders *bool `default:"false" json:"captureHeaders"`
	// How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
	ActivityLogSampleRate *float64 `default:"100" json:"activityLogSampleRate"`
	// How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
	RequestTimeout *float64 `default:"0" json:"requestTimeout"`
	// How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
	SocketTimeout *float64 `default:"0" json:"socketTimeout"`
	// Maximum time to wait for additional data, after the last response was sent, before closing a socket connection. This can be very useful when Grafana Agent remote write's request frequency is high so, reusing connections, would help mitigating the cost of creating a new connection per request. Note that Grafana Agent's embedded Prometheus would attempt to keep connections open for up to 5 minutes.
	KeepAliveTimeout *float64 `default:"5" json:"keepAliveTimeout"`
	// Enable to expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
	EnableHealthCheck *bool `default:"false" json:"enableHealthCheck"`
	// Messages from matched IP addresses will be processed, unless also matched by the denylist.
	IPAllowlistRegex *string `default:"/.*/" json:"ipAllowlistRegex"`
	// Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
	IPDenylistRegex *string `default:"/^\\$/" json:"ipDenylistRegex"`
	// Absolute path on which to listen for Grafana Agent's Remote Write requests. Defaults to /api/prom/push, which will expand as: 'http://<your‑upstream‑URL>:<your‑port>/api/prom/push'. Either this field or 'Logs API endpoint' must be configured.
	PrometheusAPI *string `default:"/api/prom/push" json:"prometheusAPI"`
	// Absolute path on which to listen for Loki logs requests. Defaults to /loki/api/v1/push, which will (in this example) expand as: 'http://<your‑upstream‑URL>:<your‑port>/loki/api/v1/push'. Either this field or 'Remote Write API endpoint' must be configured.
	LokiAPI        *string                     `default:"/loki/api/v1/push" json:"lokiAPI"`
	PrometheusAuth *InputGrafanaPrometheusAuth `json:"prometheusAuth,omitempty"`
	LokiAuth       *InputGrafanaLokiAuth       `json:"lokiAuth,omitempty"`
	// Fields to add to events from this input
	Metadata    []InputGrafana2Metadata `json:"metadata,omitempty"`
	Description *string                 `json:"description,omitempty"`
}

func (i InputGrafana2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputGrafana2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputGrafana2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputGrafana2) GetType() *InputGrafana2Type {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputGrafana2) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputGrafana2) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputGrafana2) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputGrafana2) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputGrafana2) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputGrafana2) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputGrafana2) GetConnections() []InputGrafana2Connections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputGrafana2) GetPq() *InputGrafana2Pq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputGrafana2) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *InputGrafana2) GetPort() float64 {
	if o == nil {
		return 0.0
	}
	return o.Port
}

func (o *InputGrafana2) GetTLS() *InputGrafana2TLSSettingsServerSide {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *InputGrafana2) GetMaxActiveReq() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxActiveReq
}

func (o *InputGrafana2) GetMaxRequestsPerSocket() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRequestsPerSocket
}

func (o *InputGrafana2) GetEnableProxyHeader() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProxyHeader
}

func (o *InputGrafana2) GetCaptureHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.CaptureHeaders
}

func (o *InputGrafana2) GetActivityLogSampleRate() *float64 {
	if o == nil {
		return nil
	}
	return o.ActivityLogSampleRate
}

func (o *InputGrafana2) GetRequestTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestTimeout
}

func (o *InputGrafana2) GetSocketTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SocketTimeout
}

func (o *InputGrafana2) GetKeepAliveTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.KeepAliveTimeout
}

func (o *InputGrafana2) GetEnableHealthCheck() *bool {
	if o == nil {
		return nil
	}
	return o.EnableHealthCheck
}

func (o *InputGrafana2) GetIPAllowlistRegex() *string {
	if o == nil {
		return nil
	}
	return o.IPAllowlistRegex
}

func (o *InputGrafana2) GetIPDenylistRegex() *string {
	if o == nil {
		return nil
	}
	return o.IPDenylistRegex
}

func (o *InputGrafana2) GetPrometheusAPI() *string {
	if o == nil {
		return nil
	}
	return o.PrometheusAPI
}

func (o *InputGrafana2) GetLokiAPI() *string {
	if o == nil {
		return nil
	}
	return o.LokiAPI
}

func (o *InputGrafana2) GetPrometheusAuth() *InputGrafanaPrometheusAuth {
	if o == nil {
		return nil
	}
	return o.PrometheusAuth
}

func (o *InputGrafana2) GetLokiAuth() *InputGrafanaLokiAuth {
	if o == nil {
		return nil
	}
	return o.LokiAuth
}

func (o *InputGrafana2) GetMetadata() []InputGrafana2Metadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputGrafana2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type InputGrafanaType string

const (
	InputGrafanaTypeGrafana InputGrafanaType = "grafana"
)

func (e InputGrafanaType) ToPointer() *InputGrafanaType {
	return &e
}
func (e *InputGrafanaType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "grafana":
		*e = InputGrafanaType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafanaType: %v", v)
	}
}

type InputGrafanaConnections struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputGrafanaConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputGrafanaConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputGrafanaMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputGrafanaMode string

const (
	InputGrafanaModeSmart  InputGrafanaMode = "smart"
	InputGrafanaModeAlways InputGrafanaMode = "always"
)

func (e InputGrafanaMode) ToPointer() *InputGrafanaMode {
	return &e
}
func (e *InputGrafanaMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputGrafanaMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafanaMode: %v", v)
	}
}

// InputGrafanaCompression - Codec to use to compress the persisted data
type InputGrafanaCompression string

const (
	InputGrafanaCompressionNone InputGrafanaCompression = "none"
	InputGrafanaCompressionGzip InputGrafanaCompression = "gzip"
)

func (e InputGrafanaCompression) ToPointer() *InputGrafanaCompression {
	return &e
}
func (e *InputGrafanaCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputGrafanaCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafanaCompression: %v", v)
	}
}

type InputGrafanaPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputGrafanaMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputGrafanaCompression `default:"none" json:"compress"`
}

func (i InputGrafanaPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputGrafanaPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputGrafanaPq) GetMode() *InputGrafanaMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputGrafanaPq) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputGrafanaPq) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputGrafanaPq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputGrafanaPq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputGrafanaPq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputGrafanaPq) GetCompress() *InputGrafanaCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

// InputGrafanaMinimumTLSVersion - Minimum TLS version to accept from connections
type InputGrafanaMinimumTLSVersion string

const (
	InputGrafanaMinimumTLSVersionTlSv1  InputGrafanaMinimumTLSVersion = "TLSv1"
	InputGrafanaMinimumTLSVersionTlSv11 InputGrafanaMinimumTLSVersion = "TLSv1.1"
	InputGrafanaMinimumTLSVersionTlSv12 InputGrafanaMinimumTLSVersion = "TLSv1.2"
	InputGrafanaMinimumTLSVersionTlSv13 InputGrafanaMinimumTLSVersion = "TLSv1.3"
)

func (e InputGrafanaMinimumTLSVersion) ToPointer() *InputGrafanaMinimumTLSVersion {
	return &e
}
func (e *InputGrafanaMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputGrafanaMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafanaMinimumTLSVersion: %v", v)
	}
}

// InputGrafanaMaximumTLSVersion - Maximum TLS version to accept from connections
type InputGrafanaMaximumTLSVersion string

const (
	InputGrafanaMaximumTLSVersionTlSv1  InputGrafanaMaximumTLSVersion = "TLSv1"
	InputGrafanaMaximumTLSVersionTlSv11 InputGrafanaMaximumTLSVersion = "TLSv1.1"
	InputGrafanaMaximumTLSVersionTlSv12 InputGrafanaMaximumTLSVersion = "TLSv1.2"
	InputGrafanaMaximumTLSVersionTlSv13 InputGrafanaMaximumTLSVersion = "TLSv1.3"
)

func (e InputGrafanaMaximumTLSVersion) ToPointer() *InputGrafanaMaximumTLSVersion {
	return &e
}
func (e *InputGrafanaMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputGrafanaMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafanaMaximumTLSVersion: %v", v)
	}
}

type InputGrafanaTLSSettingsServerSide struct {
	Disabled *bool `default:"true" json:"disabled"`
	// The name of the predefined certificate
	CertificateName *string `json:"certificateName,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Passphrase to use to decrypt private key
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert        *bool `default:"false" json:"requestCert"`
	RejectUnauthorized any   `json:"rejectUnauthorized,omitempty"`
	CommonNameRegex    any   `json:"commonNameRegex,omitempty"`
	// Minimum TLS version to accept from connections
	MinVersion *InputGrafanaMinimumTLSVersion `json:"minVersion,omitempty"`
	// Maximum TLS version to accept from connections
	MaxVersion *InputGrafanaMaximumTLSVersion `json:"maxVersion,omitempty"`
}

func (i InputGrafanaTLSSettingsServerSide) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputGrafanaTLSSettingsServerSide) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputGrafanaTLSSettingsServerSide) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputGrafanaTLSSettingsServerSide) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *InputGrafanaTLSSettingsServerSide) GetPrivKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.PrivKeyPath
}

func (o *InputGrafanaTLSSettingsServerSide) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *InputGrafanaTLSSettingsServerSide) GetCertPath() *string {
	if o == nil {
		return nil
	}
	return o.CertPath
}

func (o *InputGrafanaTLSSettingsServerSide) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *InputGrafanaTLSSettingsServerSide) GetRequestCert() *bool {
	if o == nil {
		return nil
	}
	return o.RequestCert
}

func (o *InputGrafanaTLSSettingsServerSide) GetRejectUnauthorized() any {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputGrafanaTLSSettingsServerSide) GetCommonNameRegex() any {
	if o == nil {
		return nil
	}
	return o.CommonNameRegex
}

func (o *InputGrafanaTLSSettingsServerSide) GetMinVersion() *InputGrafanaMinimumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *InputGrafanaTLSSettingsServerSide) GetMaxVersion() *InputGrafanaMaximumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MaxVersion
}

// InputGrafanaAuthenticationType - Remote Write authentication type
type InputGrafanaAuthenticationType string

const (
	InputGrafanaAuthenticationTypeNone              InputGrafanaAuthenticationType = "none"
	InputGrafanaAuthenticationTypeBasic             InputGrafanaAuthenticationType = "basic"
	InputGrafanaAuthenticationTypeCredentialsSecret InputGrafanaAuthenticationType = "credentialsSecret"
	InputGrafanaAuthenticationTypeToken             InputGrafanaAuthenticationType = "token"
	InputGrafanaAuthenticationTypeTextSecret        InputGrafanaAuthenticationType = "textSecret"
	InputGrafanaAuthenticationTypeOauth             InputGrafanaAuthenticationType = "oauth"
)

func (e InputGrafanaAuthenticationType) ToPointer() *InputGrafanaAuthenticationType {
	return &e
}
func (e *InputGrafanaAuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "basic":
		fallthrough
	case "credentialsSecret":
		fallthrough
	case "token":
		fallthrough
	case "textSecret":
		fallthrough
	case "oauth":
		*e = InputGrafanaAuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafanaAuthenticationType: %v", v)
	}
}

type InputGrafanaOauthParams struct {
	// OAuth parameter name
	Name string `json:"name"`
	// OAuth parameter value
	Value string `json:"value"`
}

func (o *InputGrafanaOauthParams) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputGrafanaOauthParams) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputGrafanaOauthHeaders struct {
	// OAuth header name
	Name string `json:"name"`
	// OAuth header value
	Value string `json:"value"`
}

func (o *InputGrafanaOauthHeaders) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputGrafanaOauthHeaders) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type PrometheusAuth struct {
	// Remote Write authentication type
	AuthType *InputGrafanaAuthenticationType `default:"none" json:"authType"`
	// Username for Basic authentication
	Username *string `json:"username,omitempty"`
	// Password for Basic authentication
	Password *string `json:"password,omitempty"`
	// Bearer token to include in the authorization header
	Token *string `json:"token,omitempty"`
	// Select or create a secret that references your credentials
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
	// Select or create a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
	// URL for OAuth
	LoginURL *string `json:"loginUrl,omitempty"`
	// Secret parameter name to pass in request body
	SecretParamName *string `json:"secretParamName,omitempty"`
	// Secret parameter value to pass in request body
	Secret *string `json:"secret,omitempty"`
	// Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
	TokenAttributeName *string `json:"tokenAttributeName,omitempty"`
	// JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
	AuthHeaderExpr *string `default:"Bearer \\${token}" json:"authHeaderExpr"`
	// How often the OAuth token should be refreshed.
	TokenTimeoutSecs *float64 `default:"3600" json:"tokenTimeoutSecs"`
	// Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthParams []InputGrafanaOauthParams `json:"oauthParams,omitempty"`
	// Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthHeaders []InputGrafanaOauthHeaders `json:"oauthHeaders,omitempty"`
}

func (p PrometheusAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PrometheusAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PrometheusAuth) GetAuthType() *InputGrafanaAuthenticationType {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *PrometheusAuth) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *PrometheusAuth) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *PrometheusAuth) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *PrometheusAuth) GetCredentialsSecret() *string {
	if o == nil {
		return nil
	}
	return o.CredentialsSecret
}

func (o *PrometheusAuth) GetTextSecret() *string {
	if o == nil {
		return nil
	}
	return o.TextSecret
}

func (o *PrometheusAuth) GetLoginURL() *string {
	if o == nil {
		return nil
	}
	return o.LoginURL
}

func (o *PrometheusAuth) GetSecretParamName() *string {
	if o == nil {
		return nil
	}
	return o.SecretParamName
}

func (o *PrometheusAuth) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *PrometheusAuth) GetTokenAttributeName() *string {
	if o == nil {
		return nil
	}
	return o.TokenAttributeName
}

func (o *PrometheusAuth) GetAuthHeaderExpr() *string {
	if o == nil {
		return nil
	}
	return o.AuthHeaderExpr
}

func (o *PrometheusAuth) GetTokenTimeoutSecs() *float64 {
	if o == nil {
		return nil
	}
	return o.TokenTimeoutSecs
}

func (o *PrometheusAuth) GetOauthParams() []InputGrafanaOauthParams {
	if o == nil {
		return nil
	}
	return o.OauthParams
}

func (o *PrometheusAuth) GetOauthHeaders() []InputGrafanaOauthHeaders {
	if o == nil {
		return nil
	}
	return o.OauthHeaders
}

// InputGrafana1AuthenticationType - Loki logs authentication type
type InputGrafana1AuthenticationType string

const (
	InputGrafana1AuthenticationTypeNone              InputGrafana1AuthenticationType = "none"
	InputGrafana1AuthenticationTypeBasic             InputGrafana1AuthenticationType = "basic"
	InputGrafana1AuthenticationTypeCredentialsSecret InputGrafana1AuthenticationType = "credentialsSecret"
	InputGrafana1AuthenticationTypeToken             InputGrafana1AuthenticationType = "token"
	InputGrafana1AuthenticationTypeTextSecret        InputGrafana1AuthenticationType = "textSecret"
	InputGrafana1AuthenticationTypeOauth             InputGrafana1AuthenticationType = "oauth"
)

func (e InputGrafana1AuthenticationType) ToPointer() *InputGrafana1AuthenticationType {
	return &e
}
func (e *InputGrafana1AuthenticationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "basic":
		fallthrough
	case "credentialsSecret":
		fallthrough
	case "token":
		fallthrough
	case "textSecret":
		fallthrough
	case "oauth":
		*e = InputGrafana1AuthenticationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputGrafana1AuthenticationType: %v", v)
	}
}

type InputGrafana1OauthParams struct {
	// OAuth parameter name
	Name string `json:"name"`
	// OAuth parameter value
	Value string `json:"value"`
}

func (o *InputGrafana1OauthParams) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputGrafana1OauthParams) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputGrafana1OauthHeaders struct {
	// OAuth header name
	Name string `json:"name"`
	// OAuth header value
	Value string `json:"value"`
}

func (o *InputGrafana1OauthHeaders) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputGrafana1OauthHeaders) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type LokiAuth struct {
	// Loki logs authentication type
	AuthType *InputGrafana1AuthenticationType `default:"none" json:"authType"`
	// Username for Basic authentication
	Username *string `json:"username,omitempty"`
	// Password for Basic authentication
	Password *string `json:"password,omitempty"`
	// Bearer token to include in the authorization header
	Token *string `json:"token,omitempty"`
	// Select or create a secret that references your credentials
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
	// Select or create a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
	// URL for OAuth
	LoginURL *string `json:"loginUrl,omitempty"`
	// Secret parameter name to pass in request body
	SecretParamName *string `json:"secretParamName,omitempty"`
	// Secret parameter value to pass in request body
	Secret *string `json:"secret,omitempty"`
	// Name of the auth token attribute in the OAuth response. Can be top-level (e.g., 'token'); or nested, using a period (e.g., 'data.token').
	TokenAttributeName *string `json:"tokenAttributeName,omitempty"`
	// JavaScript expression to compute the Authorization header value to pass in requests. The value `${token}` is used to reference the token obtained from authentication, e.g.: `Bearer ${token}`.
	AuthHeaderExpr *string `default:"Bearer \\${token}" json:"authHeaderExpr"`
	// How often the OAuth token should be refreshed.
	TokenTimeoutSecs *float64 `default:"3600" json:"tokenTimeoutSecs"`
	// Additional parameters to send in the OAuth login request. @{product} will combine the secret with these parameters, and will send the URL-encoded result in a POST request to the endpoint specified in the 'Login URL'. We'll automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthParams []InputGrafana1OauthParams `json:"oauthParams,omitempty"`
	// Additional headers to send in the OAuth login request. @{product} will automatically add the content-type header 'application/x-www-form-urlencoded' when sending this request.
	OauthHeaders []InputGrafana1OauthHeaders `json:"oauthHeaders,omitempty"`
}

func (l LokiAuth) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LokiAuth) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LokiAuth) GetAuthType() *InputGrafana1AuthenticationType {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *LokiAuth) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *LokiAuth) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *LokiAuth) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *LokiAuth) GetCredentialsSecret() *string {
	if o == nil {
		return nil
	}
	return o.CredentialsSecret
}

func (o *LokiAuth) GetTextSecret() *string {
	if o == nil {
		return nil
	}
	return o.TextSecret
}

func (o *LokiAuth) GetLoginURL() *string {
	if o == nil {
		return nil
	}
	return o.LoginURL
}

func (o *LokiAuth) GetSecretParamName() *string {
	if o == nil {
		return nil
	}
	return o.SecretParamName
}

func (o *LokiAuth) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *LokiAuth) GetTokenAttributeName() *string {
	if o == nil {
		return nil
	}
	return o.TokenAttributeName
}

func (o *LokiAuth) GetAuthHeaderExpr() *string {
	if o == nil {
		return nil
	}
	return o.AuthHeaderExpr
}

func (o *LokiAuth) GetTokenTimeoutSecs() *float64 {
	if o == nil {
		return nil
	}
	return o.TokenTimeoutSecs
}

func (o *LokiAuth) GetOauthParams() []InputGrafana1OauthParams {
	if o == nil {
		return nil
	}
	return o.OauthParams
}

func (o *LokiAuth) GetOauthHeaders() []InputGrafana1OauthHeaders {
	if o == nil {
		return nil
	}
	return o.OauthHeaders
}

type InputGrafanaMetadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputGrafanaMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputGrafanaMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputGrafana1 struct {
	// Unique ID for this input
	ID       *string           `json:"id,omitempty"`
	Type     *InputGrafanaType `json:"type,omitempty"`
	Disabled *bool             `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputGrafanaConnections `json:"connections,omitempty"`
	Pq          *InputGrafanaPq           `json:"pq,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses).
	Host *string `default:"0.0.0.0" json:"host"`
	// Port to listen on
	Port float64                            `json:"port"`
	TLS  *InputGrafanaTLSSettingsServerSide `json:"tls,omitempty"`
	// Maximum number of active requests per Worker Process. Use 0 for unlimited.
	MaxActiveReq *float64 `default:"256" json:"maxActiveReq"`
	// Maximum number of requests per socket before @{product} instructs the client to close the connection. Default is 0 (unlimited).
	MaxRequestsPerSocket *int64 `default:"0" json:"maxRequestsPerSocket"`
	// Enable when clients are connecting through a proxy that supports the x-forwarded-for header to keep the client's original IP address on the event instead of the proxy's IP address
	EnableProxyHeader *bool `default:"false" json:"enableProxyHeader"`
	// Toggle this to Yes to add request headers to events, in the __headers field.
	CaptureHeaders *bool `default:"false" json:"captureHeaders"`
	// How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
	ActivityLogSampleRate *float64 `default:"100" json:"activityLogSampleRate"`
	// How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
	RequestTimeout *float64 `default:"0" json:"requestTimeout"`
	// How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
	SocketTimeout *float64 `default:"0" json:"socketTimeout"`
	// Maximum time to wait for additional data, after the last response was sent, before closing a socket connection. This can be very useful when Grafana Agent remote write's request frequency is high so, reusing connections, would help mitigating the cost of creating a new connection per request. Note that Grafana Agent's embedded Prometheus would attempt to keep connections open for up to 5 minutes.
	KeepAliveTimeout *float64 `default:"5" json:"keepAliveTimeout"`
	// Enable to expose the /cribl_health endpoint, which returns 200 OK when this Source is healthy
	EnableHealthCheck *bool `default:"false" json:"enableHealthCheck"`
	// Messages from matched IP addresses will be processed, unless also matched by the denylist.
	IPAllowlistRegex *string `default:"/.*/" json:"ipAllowlistRegex"`
	// Messages from matched IP addresses will be ignored. This takes precedence over the allowlist.
	IPDenylistRegex *string `default:"/^\\$/" json:"ipDenylistRegex"`
	// Absolute path on which to listen for Grafana Agent's Remote Write requests. Defaults to /api/prom/push, which will expand as: 'http://<your‑upstream‑URL>:<your‑port>/api/prom/push'. Either this field or 'Logs API endpoint' must be configured.
	PrometheusAPI *string `default:"/api/prom/push" json:"prometheusAPI"`
	// Absolute path on which to listen for Loki logs requests. Defaults to /loki/api/v1/push, which will (in this example) expand as: 'http://<your‑upstream‑URL>:<your‑port>/loki/api/v1/push'. Either this field or 'Remote Write API endpoint' must be configured.
	LokiAPI        *string         `default:"/loki/api/v1/push" json:"lokiAPI"`
	PrometheusAuth *PrometheusAuth `json:"prometheusAuth,omitempty"`
	LokiAuth       *LokiAuth       `json:"lokiAuth,omitempty"`
	// Fields to add to events from this input
	Metadata    []InputGrafanaMetadata `json:"metadata,omitempty"`
	Description *string                `json:"description,omitempty"`
}

func (i InputGrafana1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputGrafana1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputGrafana1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputGrafana1) GetType() *InputGrafanaType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputGrafana1) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputGrafana1) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputGrafana1) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputGrafana1) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputGrafana1) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputGrafana1) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputGrafana1) GetConnections() []InputGrafanaConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputGrafana1) GetPq() *InputGrafanaPq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputGrafana1) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *InputGrafana1) GetPort() float64 {
	if o == nil {
		return 0.0
	}
	return o.Port
}

func (o *InputGrafana1) GetTLS() *InputGrafanaTLSSettingsServerSide {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *InputGrafana1) GetMaxActiveReq() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxActiveReq
}

func (o *InputGrafana1) GetMaxRequestsPerSocket() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxRequestsPerSocket
}

func (o *InputGrafana1) GetEnableProxyHeader() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProxyHeader
}

func (o *InputGrafana1) GetCaptureHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.CaptureHeaders
}

func (o *InputGrafana1) GetActivityLogSampleRate() *float64 {
	if o == nil {
		return nil
	}
	return o.ActivityLogSampleRate
}

func (o *InputGrafana1) GetRequestTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestTimeout
}

func (o *InputGrafana1) GetSocketTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SocketTimeout
}

func (o *InputGrafana1) GetKeepAliveTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.KeepAliveTimeout
}

func (o *InputGrafana1) GetEnableHealthCheck() *bool {
	if o == nil {
		return nil
	}
	return o.EnableHealthCheck
}

func (o *InputGrafana1) GetIPAllowlistRegex() *string {
	if o == nil {
		return nil
	}
	return o.IPAllowlistRegex
}

func (o *InputGrafana1) GetIPDenylistRegex() *string {
	if o == nil {
		return nil
	}
	return o.IPDenylistRegex
}

func (o *InputGrafana1) GetPrometheusAPI() *string {
	if o == nil {
		return nil
	}
	return o.PrometheusAPI
}

func (o *InputGrafana1) GetLokiAPI() *string {
	if o == nil {
		return nil
	}
	return o.LokiAPI
}

func (o *InputGrafana1) GetPrometheusAuth() *PrometheusAuth {
	if o == nil {
		return nil
	}
	return o.PrometheusAuth
}

func (o *InputGrafana1) GetLokiAuth() *LokiAuth {
	if o == nil {
		return nil
	}
	return o.LokiAuth
}

func (o *InputGrafana1) GetMetadata() []InputGrafanaMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputGrafana1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type InputGrafanaUnionType string

const (
	InputGrafanaUnionTypeInputGrafana1 InputGrafanaUnionType = "InputGrafana_1"
	InputGrafanaUnionTypeInputGrafana2 InputGrafanaUnionType = "InputGrafana_2"
)

type InputGrafana struct {
	InputGrafana1 *InputGrafana1 `queryParam:"inline"`
	InputGrafana2 *InputGrafana2 `queryParam:"inline"`

	Type InputGrafanaUnionType
}

func CreateInputGrafanaInputGrafana1(inputGrafana1 InputGrafana1) InputGrafana {
	typ := InputGrafanaUnionTypeInputGrafana1

	return InputGrafana{
		InputGrafana1: &inputGrafana1,
		Type:          typ,
	}
}

func CreateInputGrafanaInputGrafana2(inputGrafana2 InputGrafana2) InputGrafana {
	typ := InputGrafanaUnionTypeInputGrafana2

	return InputGrafana{
		InputGrafana2: &inputGrafana2,
		Type:          typ,
	}
}

func (u *InputGrafana) UnmarshalJSON(data []byte) error {

	var inputGrafana1 InputGrafana1 = InputGrafana1{}
	if err := utils.UnmarshalJSON(data, &inputGrafana1, "", true, true); err == nil {
		u.InputGrafana1 = &inputGrafana1
		u.Type = InputGrafanaUnionTypeInputGrafana1
		return nil
	}

	var inputGrafana2 InputGrafana2 = InputGrafana2{}
	if err := utils.UnmarshalJSON(data, &inputGrafana2, "", true, true); err == nil {
		u.InputGrafana2 = &inputGrafana2
		u.Type = InputGrafanaUnionTypeInputGrafana2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InputGrafana", string(data))
}

func (u InputGrafana) MarshalJSON() ([]byte, error) {
	if u.InputGrafana1 != nil {
		return utils.MarshalJSON(u.InputGrafana1, "", true)
	}

	if u.InputGrafana2 != nil {
		return utils.MarshalJSON(u.InputGrafana2, "", true)
	}

	return nil, errors.New("could not marshal union type InputGrafana: all fields are null")
}
