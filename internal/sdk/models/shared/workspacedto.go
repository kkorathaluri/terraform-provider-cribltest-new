// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
	"time"
)

type WorkspaceDTOState string

const (
	WorkspaceDTOStateWorkspaceRequested                 WorkspaceDTOState = "Workspace-Requested"
	WorkspaceDTOStateWorkspaceProvisioning              WorkspaceDTOState = "Workspace-Provisioning"
	WorkspaceDTOStateWorkspaceProvisioningFailed        WorkspaceDTOState = "Workspace-Provisioning-Failed"
	WorkspaceDTOStateWorkspaceProvisioned               WorkspaceDTOState = "Workspace-Provisioned"
	WorkspaceDTOStateWorkspaceActive                    WorkspaceDTOState = "Workspace-Active"
	WorkspaceDTOStateWorkspaceUpdated                   WorkspaceDTOState = "Workspace-Updated"
	WorkspaceDTOStateWorkspaceFailedUpdate              WorkspaceDTOState = "Workspace-Failed-Update"
	WorkspaceDTOStateWorkspaceCleanupRequested          WorkspaceDTOState = "Workspace-Cleanup-Requested"
	WorkspaceDTOStateWorkspaceCleanupStarted            WorkspaceDTOState = "Workspace-Cleanup-Started"
	WorkspaceDTOStateWorkspaceCleanupTerraformCompleted WorkspaceDTOState = "Workspace-Cleanup-Terraform-Completed"
	WorkspaceDTOStateWorkspaceCleanupTerraformFailed    WorkspaceDTOState = "Workspace-Cleanup-Terraform-Failed"
	WorkspaceDTOStateWorkspaceCleanupCompleted          WorkspaceDTOState = "Workspace-Cleanup-Completed"
	WorkspaceDTOStateWorkspaceCleanupFailed             WorkspaceDTOState = "Workspace-Cleanup-Failed"
)

func (e WorkspaceDTOState) ToPointer() *WorkspaceDTOState {
	return &e
}
func (e *WorkspaceDTOState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Workspace-Requested":
		fallthrough
	case "Workspace-Provisioning":
		fallthrough
	case "Workspace-Provisioning-Failed":
		fallthrough
	case "Workspace-Provisioned":
		fallthrough
	case "Workspace-Active":
		fallthrough
	case "Workspace-Updated":
		fallthrough
	case "Workspace-Failed-Update":
		fallthrough
	case "Workspace-Cleanup-Requested":
		fallthrough
	case "Workspace-Cleanup-Started":
		fallthrough
	case "Workspace-Cleanup-Terraform-Completed":
		fallthrough
	case "Workspace-Cleanup-Terraform-Failed":
		fallthrough
	case "Workspace-Cleanup-Completed":
		fallthrough
	case "Workspace-Cleanup-Failed":
		*e = WorkspaceDTOState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WorkspaceDTOState: %v", v)
	}
}

type WorkspaceDTO struct {
	Alias       *string           `json:"alias,omitempty"`
	Description *string           `json:"description,omitempty"`
	Tags        []string          `json:"tags,omitempty"`
	WorkspaceID string            `json:"workspaceId"`
	Region      string            `json:"region"`
	LastUpdated time.Time         `json:"lastUpdated"`
	LeaderFQDN  string            `json:"leaderFQDN"`
	State       WorkspaceDTOState `json:"state"`
}

func (w WorkspaceDTO) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WorkspaceDTO) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WorkspaceDTO) GetAlias() *string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *WorkspaceDTO) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *WorkspaceDTO) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *WorkspaceDTO) GetWorkspaceID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceID
}

func (o *WorkspaceDTO) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *WorkspaceDTO) GetLastUpdated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.LastUpdated
}

func (o *WorkspaceDTO) GetLeaderFQDN() string {
	if o == nil {
		return ""
	}
	return o.LeaderFQDN
}

func (o *WorkspaceDTO) GetState() WorkspaceDTOState {
	if o == nil {
		return WorkspaceDTOState("")
	}
	return o.State
}
