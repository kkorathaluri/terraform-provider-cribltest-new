// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type OutputRingType string

const (
	OutputRingTypeRing OutputRingType = "ring"
)

func (e OutputRingType) ToPointer() *OutputRingType {
	return &e
}
func (e *OutputRingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ring":
		*e = OutputRingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputRingType: %v", v)
	}
}

// OutputRingDataFormat - Format of the output data.
type OutputRingDataFormat string

const (
	OutputRingDataFormatJSON OutputRingDataFormat = "json"
	OutputRingDataFormatRaw  OutputRingDataFormat = "raw"
)

func (e OutputRingDataFormat) ToPointer() *OutputRingDataFormat {
	return &e
}
func (e *OutputRingDataFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "raw":
		*e = OutputRingDataFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputRingDataFormat: %v", v)
	}
}

type DataCompressionFormat string

const (
	DataCompressionFormatNone DataCompressionFormat = "none"
	DataCompressionFormatGzip DataCompressionFormat = "gzip"
)

func (e DataCompressionFormat) ToPointer() *DataCompressionFormat {
	return &e
}
func (e *DataCompressionFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = DataCompressionFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataCompressionFormat: %v", v)
	}
}

// OutputRingBackpressureBehavior - Whether to block or drop events when all receivers are exerting backpressure
type OutputRingBackpressureBehavior string

const (
	OutputRingBackpressureBehaviorBlock OutputRingBackpressureBehavior = "block"
	OutputRingBackpressureBehaviorDrop  OutputRingBackpressureBehavior = "drop"
)

func (e OutputRingBackpressureBehavior) ToPointer() *OutputRingBackpressureBehavior {
	return &e
}
func (e *OutputRingBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputRingBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputRingBackpressureBehavior: %v", v)
	}
}

type OutputRing struct {
	// Unique ID for this output
	ID   string         `json:"id"`
	Type OutputRingType `json:"type"`
	// Pipeline to process data before sending out to this output
	Pipeline *string `json:"pipeline,omitempty"`
	// Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
	SystemFields []string `json:"systemFields,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Format of the output data.
	Format *OutputRingDataFormat `default:"json" json:"format"`
	// JS expression to define how files are partitioned and organized. If left blank, Cribl Stream will fallback on event.__partition.
	PartitionExpr *string `json:"partitionExpr,omitempty"`
	// Maximum disk space allowed to be consumed (examples: 420MB, 4GB). When limit is reached, older data will be deleted.
	MaxDataSize *string `default:"1GB" json:"maxDataSize"`
	// Maximum amount of time to retain data (examples: 2h, 4d). When limit is reached, older data will be deleted.
	MaxDataTime *string                `default:"24h" json:"maxDataTime"`
	Compress    *DataCompressionFormat `default:"gzip" json:"compress"`
	// Path to use to write metrics. Defaults to $CRIBL_HOME/state/<id>
	DestPath *string `json:"destPath,omitempty"`
	// Whether to block or drop events when all receivers are exerting backpressure
	OnBackpressure *OutputRingBackpressureBehavior `default:"block" json:"onBackpressure"`
	Description    *string                         `json:"description,omitempty"`
}

func (o OutputRing) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputRing) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *OutputRing) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OutputRing) GetType() OutputRingType {
	if o == nil {
		return OutputRingType("")
	}
	return o.Type
}

func (o *OutputRing) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *OutputRing) GetSystemFields() []string {
	if o == nil {
		return nil
	}
	return o.SystemFields
}

func (o *OutputRing) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *OutputRing) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *OutputRing) GetFormat() *OutputRingDataFormat {
	if o == nil {
		return nil
	}
	return o.Format
}

func (o *OutputRing) GetPartitionExpr() *string {
	if o == nil {
		return nil
	}
	return o.PartitionExpr
}

func (o *OutputRing) GetMaxDataSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxDataSize
}

func (o *OutputRing) GetMaxDataTime() *string {
	if o == nil {
		return nil
	}
	return o.MaxDataTime
}

func (o *OutputRing) GetCompress() *DataCompressionFormat {
	if o == nil {
		return nil
	}
	return o.Compress
}

func (o *OutputRing) GetDestPath() *string {
	if o == nil {
		return nil
	}
	return o.DestPath
}

func (o *OutputRing) GetOnBackpressure() *OutputRingBackpressureBehavior {
	if o == nil {
		return nil
	}
	return o.OnBackpressure
}

func (o *OutputRing) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}
