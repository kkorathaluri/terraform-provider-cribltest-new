// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type Auth2 struct {
	AssumeRoleArn           *string `json:"assumeRoleArn,omitempty"`
	AssumeRoleExternalID    *string `json:"assumeRoleExternalId,omitempty"`
	AwsAPIKey               *string `json:"awsApiKey,omitempty"`
	AwsAuthenticationMethod *string `json:"awsAuthenticationMethod,omitempty"`
	AwsSecretKey            *string `json:"awsSecretKey,omitempty"`
	EnableAssumeRole        *bool   `json:"enableAssumeRole,omitempty"`
}

func (o *Auth2) GetAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleArn
}

func (o *Auth2) GetAssumeRoleExternalID() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleExternalID
}

func (o *Auth2) GetAwsAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsAPIKey
}

func (o *Auth2) GetAwsAuthenticationMethod() *string {
	if o == nil {
		return nil
	}
	return o.AwsAuthenticationMethod
}

func (o *Auth2) GetAwsSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretKey
}

func (o *Auth2) GetEnableAssumeRole() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAssumeRole
}

type Auth1 struct {
	AssumeRoleArn           *string      `json:"assumeRoleArn,omitempty"`
	AssumeRoleExternalID    *string      `json:"assumeRoleExternalId,omitempty"`
	AwsAPIKey               *string      `json:"awsApiKey,omitempty"`
	AwsAuthenticationMethod *string      `json:"awsAuthenticationMethod,omitempty"`
	AwsSecretKey            *string      `json:"awsSecretKey,omitempty"`
	EnableAssumeRole        *bool        `json:"enableAssumeRole,omitempty"`
	Provider                AuthProvider `json:"provider"`
	Token                   *string      `json:"token,omitempty"`
	VaultAWSIAMServerID     string       `json:"vaultAWSIAMServerID"`
	VaultRole               *string      `json:"vaultRole,omitempty"`
}

func (o *Auth1) GetAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleArn
}

func (o *Auth1) GetAssumeRoleExternalID() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleExternalID
}

func (o *Auth1) GetAwsAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsAPIKey
}

func (o *Auth1) GetAwsAuthenticationMethod() *string {
	if o == nil {
		return nil
	}
	return o.AwsAuthenticationMethod
}

func (o *Auth1) GetAwsSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretKey
}

func (o *Auth1) GetEnableAssumeRole() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAssumeRole
}

func (o *Auth1) GetProvider() AuthProvider {
	if o == nil {
		return AuthProvider("")
	}
	return o.Provider
}

func (o *Auth1) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *Auth1) GetVaultAWSIAMServerID() string {
	if o == nil {
		return ""
	}
	return o.VaultAWSIAMServerID
}

func (o *Auth1) GetVaultRole() *string {
	if o == nil {
		return nil
	}
	return o.VaultRole
}

type AuthUnionType string

const (
	AuthUnionTypeAuth1 AuthUnionType = "auth_1"
	AuthUnionTypeAuth2 AuthUnionType = "auth_2"
)

type Auth struct {
	Auth1 *Auth1 `queryParam:"inline"`
	Auth2 *Auth2 `queryParam:"inline"`

	Type AuthUnionType
}

func CreateAuthAuth1(auth1 Auth1) Auth {
	typ := AuthUnionTypeAuth1

	return Auth{
		Auth1: &auth1,
		Type:  typ,
	}
}

func CreateAuthAuth2(auth2 Auth2) Auth {
	typ := AuthUnionTypeAuth2

	return Auth{
		Auth2: &auth2,
		Type:  typ,
	}
}

func (u *Auth) UnmarshalJSON(data []byte) error {

	var auth2 Auth2 = Auth2{}
	if err := utils.UnmarshalJSON(data, &auth2, "", true, true); err == nil {
		u.Auth2 = &auth2
		u.Type = AuthUnionTypeAuth2
		return nil
	}

	var auth1 Auth1 = Auth1{}
	if err := utils.UnmarshalJSON(data, &auth1, "", true, true); err == nil {
		u.Auth1 = &auth1
		u.Type = AuthUnionTypeAuth1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Auth", string(data))
}

func (u Auth) MarshalJSON() ([]byte, error) {
	if u.Auth1 != nil {
		return utils.MarshalJSON(u.Auth1, "", true)
	}

	if u.Auth2 != nil {
		return utils.MarshalJSON(u.Auth2, "", true)
	}

	return nil, errors.New("could not marshal union type Auth: all fields are null")
}

type KMSProviderConfig struct {
	Auth                *Auth                    `json:"auth,omitempty"`
	EnableHealthCheck   bool                     `json:"enableHealthCheck"`
	HealthCheckEndpoint *string                  `json:"healthCheckEndpoint,omitempty"`
	Namespace           *string                  `json:"namespace,omitempty"`
	Provider            SecretProvider           `json:"provider"`
	SecretDir           *string                  `json:"secretDir,omitempty"`
	Service             *AWSKMSServiceConfig     `json:"service,omitempty"`
	TLS                 *VaultKMSTLSClientConfig `json:"tls,omitempty"`
	URL                 *string                  `json:"url,omitempty"`
}

func (o *KMSProviderConfig) GetAuth() *Auth {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *KMSProviderConfig) GetEnableHealthCheck() bool {
	if o == nil {
		return false
	}
	return o.EnableHealthCheck
}

func (o *KMSProviderConfig) GetHealthCheckEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.HealthCheckEndpoint
}

func (o *KMSProviderConfig) GetNamespace() *string {
	if o == nil {
		return nil
	}
	return o.Namespace
}

func (o *KMSProviderConfig) GetProvider() SecretProvider {
	if o == nil {
		return SecretProvider("")
	}
	return o.Provider
}

func (o *KMSProviderConfig) GetSecretDir() *string {
	if o == nil {
		return nil
	}
	return o.SecretDir
}

func (o *KMSProviderConfig) GetService() *AWSKMSServiceConfig {
	if o == nil {
		return nil
	}
	return o.Service
}

func (o *KMSProviderConfig) GetTLS() *VaultKMSTLSClientConfig {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *KMSProviderConfig) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}
