// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ID string

const (
	IDPrometheus           ID = "prometheus"
	IDCriblLake            ID = "cribl_lake"
	IDS3                   ID = "s3"
	IDGcs                  ID = "gcs"
	IDAzureBlob            ID = "azure_blob"
	IDCriblLeader          ID = "cribl_leader"
	IDCriblEdge            ID = "cribl_edge"
	IDAmazonSecurityLake   ID = "amazon_security_lake"
	IDAPIHTTP              ID = "api_http"
	IDAPIAws               ID = "api_aws"
	IDAPIAzure             ID = "api_azure"
	IDAPIGcp               ID = "api_gcp"
	IDAPIGoogleWorkspace   ID = "api_google_workspace"
	IDAPIMsgraph           ID = "api_msgraph"
	IDAPIOkta              ID = "api_okta"
	IDAPITailscale         ID = "api_tailscale"
	IDAPIZoom              ID = "api_zoom"
	IDAPIOpensearch        ID = "api_opensearch"
	IDAPIElasticsearch     ID = "api_elasticsearch"
	IDAPIAzureDataExplorer ID = "api_azure_data_explorer"
	IDSnowflake            ID = "snowflake"
	IDClickhouse           ID = "clickhouse"
	IDCriblMeta            ID = "cribl_meta"
)

func (e ID) ToPointer() *ID {
	return &e
}
func (e *ID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prometheus":
		fallthrough
	case "cribl_lake":
		fallthrough
	case "s3":
		fallthrough
	case "gcs":
		fallthrough
	case "azure_blob":
		fallthrough
	case "cribl_leader":
		fallthrough
	case "cribl_edge":
		fallthrough
	case "amazon_security_lake":
		fallthrough
	case "api_http":
		fallthrough
	case "api_aws":
		fallthrough
	case "api_azure":
		fallthrough
	case "api_gcp":
		fallthrough
	case "api_google_workspace":
		fallthrough
	case "api_msgraph":
		fallthrough
	case "api_okta":
		fallthrough
	case "api_tailscale":
		fallthrough
	case "api_zoom":
		fallthrough
	case "api_opensearch":
		fallthrough
	case "api_elasticsearch":
		fallthrough
	case "api_azure_data_explorer":
		fallthrough
	case "snowflake":
		fallthrough
	case "clickhouse":
		fallthrough
	case "cribl_meta":
		*e = ID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ID: %v", v)
	}
}

type DatasetProviderType struct {
	Description *string       `json:"description,omitempty"`
	ID          ID            `json:"id"`
	Locality    *OriginConfig `json:"locality,omitempty"`
}

func (o *DatasetProviderType) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *DatasetProviderType) GetID() ID {
	if o == nil {
		return ID("")
	}
	return o.ID
}

func (o *DatasetProviderType) GetLocality() *OriginConfig {
	if o == nil {
		return nil
	}
	return o.Locality
}
