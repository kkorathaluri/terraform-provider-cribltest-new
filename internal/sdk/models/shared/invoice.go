// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Status string

const (
	StatusDraft     Status = "DRAFT"
	StatusFinalized Status = "FINALIZED"
	StatusVoid      Status = "VOID"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "FINALIZED":
		fallthrough
	case "VOID":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type Invoice struct {
	ID           string           `json:"id"`
	FromDate     string           `json:"fromDate"`
	ToDate       string           `json:"toDate"`
	TotalCredits float64          `json:"totalCredits"`
	Products     []InvoiceProduct `json:"products"`
	Status       Status           `json:"status"`
}

func (o *Invoice) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Invoice) GetFromDate() string {
	if o == nil {
		return ""
	}
	return o.FromDate
}

func (o *Invoice) GetToDate() string {
	if o == nil {
		return ""
	}
	return o.ToDate
}

func (o *Invoice) GetTotalCredits() float64 {
	if o == nil {
		return 0.0
	}
	return o.TotalCredits
}

func (o *Invoice) GetProducts() []InvoiceProduct {
	if o == nil {
		return []InvoiceProduct{}
	}
	return o.Products
}

func (o *Invoice) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}
