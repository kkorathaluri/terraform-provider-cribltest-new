// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type RemoteType string

const (
	RemoteTypeStr     RemoteType = "str"
	RemoteTypeBoolean RemoteType = "boolean"
)

type Remote struct {
	Str     *string `queryParam:"inline"`
	Boolean *bool   `queryParam:"inline"`

	Type RemoteType
}

func CreateRemoteStr(str string) Remote {
	typ := RemoteTypeStr

	return Remote{
		Str:  &str,
		Type: typ,
	}
}

func CreateRemoteBoolean(boolean bool) Remote {
	typ := RemoteTypeBoolean

	return Remote{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *Remote) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RemoteTypeStr
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = RemoteTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Remote", string(data))
}

func (u Remote) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type Remote: all fields are null")
}

type GitInfo struct {
	Remote     Remote `json:"remote"`
	Versioning bool   `json:"versioning"`
}

func (o *GitInfo) GetRemote() Remote {
	if o == nil {
		return Remote{}
	}
	return o.Remote
}

func (o *GitInfo) GetVersioning() bool {
	if o == nil {
		return false
	}
	return o.Versioning
}
