// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AppScopeProcessingStatus string

const (
	AppScopeProcessingStatusNormal       AppScopeProcessingStatus = "normal"
	AppScopeProcessingStatusAttaching    AppScopeProcessingStatus = "attaching"
	AppScopeProcessingStatusAttachFailed AppScopeProcessingStatus = "attach_failed"
	AppScopeProcessingStatusUpdating     AppScopeProcessingStatus = "updating"
	AppScopeProcessingStatusUpdateFailed AppScopeProcessingStatus = "update_failed"
	AppScopeProcessingStatusDetaching    AppScopeProcessingStatus = "detaching"
	AppScopeProcessingStatusDetached     AppScopeProcessingStatus = "detached"
	AppScopeProcessingStatusDetachFailed AppScopeProcessingStatus = "detach_failed"
)

func (e AppScopeProcessingStatus) ToPointer() *AppScopeProcessingStatus {
	return &e
}
func (e *AppScopeProcessingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "normal":
		fallthrough
	case "attaching":
		fallthrough
	case "attach_failed":
		fallthrough
	case "updating":
		fallthrough
	case "update_failed":
		fallthrough
	case "detaching":
		fallthrough
	case "detached":
		fallthrough
	case "detach_failed":
		*e = AppScopeProcessingStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppScopeProcessingStatus: %v", v)
	}
}
