// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type InputOffice365MsgTraceType string

const (
	InputOffice365MsgTraceTypeOffice365MsgTrace InputOffice365MsgTraceType = "office365_msg_trace"
)

func (e InputOffice365MsgTraceType) ToPointer() *InputOffice365MsgTraceType {
	return &e
}
func (e *InputOffice365MsgTraceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "office365_msg_trace":
		*e = InputOffice365MsgTraceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTraceType: %v", v)
	}
}

type InputOffice365MsgTraceConnections struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputOffice365MsgTraceConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputOffice365MsgTraceConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputOffice365MsgTraceMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputOffice365MsgTraceMode string

const (
	InputOffice365MsgTraceModeSmart  InputOffice365MsgTraceMode = "smart"
	InputOffice365MsgTraceModeAlways InputOffice365MsgTraceMode = "always"
)

func (e InputOffice365MsgTraceMode) ToPointer() *InputOffice365MsgTraceMode {
	return &e
}
func (e *InputOffice365MsgTraceMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputOffice365MsgTraceMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTraceMode: %v", v)
	}
}

// InputOffice365MsgTraceCompression - Codec to use to compress the persisted data
type InputOffice365MsgTraceCompression string

const (
	InputOffice365MsgTraceCompressionNone InputOffice365MsgTraceCompression = "none"
	InputOffice365MsgTraceCompressionGzip InputOffice365MsgTraceCompression = "gzip"
)

func (e InputOffice365MsgTraceCompression) ToPointer() *InputOffice365MsgTraceCompression {
	return &e
}
func (e *InputOffice365MsgTraceCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputOffice365MsgTraceCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTraceCompression: %v", v)
	}
}

type InputOffice365MsgTracePq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputOffice365MsgTraceMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputOffice365MsgTraceCompression `default:"none" json:"compress"`
}

func (i InputOffice365MsgTracePq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputOffice365MsgTracePq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputOffice365MsgTracePq) GetMode() *InputOffice365MsgTraceMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputOffice365MsgTracePq) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputOffice365MsgTracePq) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputOffice365MsgTracePq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputOffice365MsgTracePq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputOffice365MsgTracePq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputOffice365MsgTracePq) GetCompress() *InputOffice365MsgTraceCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

// InputOffice365MsgTraceAuthenticationMethod - Select authentication method.
type InputOffice365MsgTraceAuthenticationMethod string

const (
	InputOffice365MsgTraceAuthenticationMethodManual      InputOffice365MsgTraceAuthenticationMethod = "manual"
	InputOffice365MsgTraceAuthenticationMethodSecret      InputOffice365MsgTraceAuthenticationMethod = "secret"
	InputOffice365MsgTraceAuthenticationMethodOauth       InputOffice365MsgTraceAuthenticationMethod = "oauth"
	InputOffice365MsgTraceAuthenticationMethodOauthSecret InputOffice365MsgTraceAuthenticationMethod = "oauthSecret"
	InputOffice365MsgTraceAuthenticationMethodOauthCert   InputOffice365MsgTraceAuthenticationMethod = "oauthCert"
)

func (e InputOffice365MsgTraceAuthenticationMethod) ToPointer() *InputOffice365MsgTraceAuthenticationMethod {
	return &e
}
func (e *InputOffice365MsgTraceAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "secret":
		fallthrough
	case "oauth":
		fallthrough
	case "oauthSecret":
		fallthrough
	case "oauthCert":
		*e = InputOffice365MsgTraceAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTraceAuthenticationMethod: %v", v)
	}
}

// InputOffice365MsgTraceLogLevel - Log Level (verbosity) for collection runtime behavior.
type InputOffice365MsgTraceLogLevel string

const (
	InputOffice365MsgTraceLogLevelError InputOffice365MsgTraceLogLevel = "error"
	InputOffice365MsgTraceLogLevelWarn  InputOffice365MsgTraceLogLevel = "warn"
	InputOffice365MsgTraceLogLevelInfo  InputOffice365MsgTraceLogLevel = "info"
	InputOffice365MsgTraceLogLevelDebug InputOffice365MsgTraceLogLevel = "debug"
	InputOffice365MsgTraceLogLevelSilly InputOffice365MsgTraceLogLevel = "silly"
)

func (e InputOffice365MsgTraceLogLevel) ToPointer() *InputOffice365MsgTraceLogLevel {
	return &e
}
func (e *InputOffice365MsgTraceLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "silly":
		*e = InputOffice365MsgTraceLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTraceLogLevel: %v", v)
	}
}

type InputOffice365MsgTraceMetadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputOffice365MsgTraceMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputOffice365MsgTraceMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// InputOffice365MsgTraceRetryType - The algorithm to use when performing HTTP retries
type InputOffice365MsgTraceRetryType string

const (
	InputOffice365MsgTraceRetryTypeNone    InputOffice365MsgTraceRetryType = "none"
	InputOffice365MsgTraceRetryTypeBackoff InputOffice365MsgTraceRetryType = "backoff"
	InputOffice365MsgTraceRetryTypeStatic  InputOffice365MsgTraceRetryType = "static"
)

func (e InputOffice365MsgTraceRetryType) ToPointer() *InputOffice365MsgTraceRetryType {
	return &e
}
func (e *InputOffice365MsgTraceRetryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "backoff":
		fallthrough
	case "static":
		*e = InputOffice365MsgTraceRetryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTraceRetryType: %v", v)
	}
}

type InputOffice365MsgTraceRetryRules struct {
	// The algorithm to use when performing HTTP retries
	Type *InputOffice365MsgTraceRetryType `default:"backoff" json:"type"`
	// Time interval between failed request and first retry (kickoff). Maximum allowed value is 20,000 ms (1/3 minute).
	Interval *float64 `default:"1000" json:"interval"`
	// The maximum number of times to retry a failed HTTP request
	Limit *float64 `default:"5" json:"limit"`
	// Base for exponential backoff, e.g., base 2 means that retries will occur after 2, then 4, then 8 seconds, and so on
	Multiplier *float64 `default:"2" json:"multiplier"`
	// List of http codes that trigger a retry. Leave empty to use the default list of 429, 500, and 503.
	Codes []float64 `json:"codes,omitempty"`
	// Honor any Retry-After header that specifies a delay (in seconds) or a timestamp after which to retry the request. The delay is limited to 20 seconds, even if the Retry-After header specifies a longer delay. When disabled, all Retry-After headers are ignored.
	EnableHeader *bool `default:"true" json:"enableHeader"`
	// When toggled to Yes, a single retry attempt will be made when a connection timeout (ETIMEDOUT) error occurs
	RetryConnectTimeout *bool `default:"false" json:"retryConnectTimeout"`
	// When toggled to Yes, the request will be retried when a connection reset (ECONNRESET) error occurs
	RetryConnectReset *bool `default:"false" json:"retryConnectReset"`
}

func (i InputOffice365MsgTraceRetryRules) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputOffice365MsgTraceRetryRules) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputOffice365MsgTraceRetryRules) GetType() *InputOffice365MsgTraceRetryType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputOffice365MsgTraceRetryRules) GetInterval() *float64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *InputOffice365MsgTraceRetryRules) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *InputOffice365MsgTraceRetryRules) GetMultiplier() *float64 {
	if o == nil {
		return nil
	}
	return o.Multiplier
}

func (o *InputOffice365MsgTraceRetryRules) GetCodes() []float64 {
	if o == nil {
		return nil
	}
	return o.Codes
}

func (o *InputOffice365MsgTraceRetryRules) GetEnableHeader() *bool {
	if o == nil {
		return nil
	}
	return o.EnableHeader
}

func (o *InputOffice365MsgTraceRetryRules) GetRetryConnectTimeout() *bool {
	if o == nil {
		return nil
	}
	return o.RetryConnectTimeout
}

func (o *InputOffice365MsgTraceRetryRules) GetRetryConnectReset() *bool {
	if o == nil {
		return nil
	}
	return o.RetryConnectReset
}

// InputOffice365MsgTraceSubscriptionPlan - Office 365 subscription plan for your organization, typically Office 365 Enterprise
type InputOffice365MsgTraceSubscriptionPlan string

const (
	InputOffice365MsgTraceSubscriptionPlanEnterpriseGcc InputOffice365MsgTraceSubscriptionPlan = "enterprise_gcc"
	InputOffice365MsgTraceSubscriptionPlanGcc           InputOffice365MsgTraceSubscriptionPlan = "gcc"
	InputOffice365MsgTraceSubscriptionPlanGccHigh       InputOffice365MsgTraceSubscriptionPlan = "gcc_high"
	InputOffice365MsgTraceSubscriptionPlanDod           InputOffice365MsgTraceSubscriptionPlan = "dod"
)

func (e InputOffice365MsgTraceSubscriptionPlan) ToPointer() *InputOffice365MsgTraceSubscriptionPlan {
	return &e
}
func (e *InputOffice365MsgTraceSubscriptionPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enterprise_gcc":
		fallthrough
	case "gcc":
		fallthrough
	case "gcc_high":
		fallthrough
	case "dod":
		*e = InputOffice365MsgTraceSubscriptionPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputOffice365MsgTraceSubscriptionPlan: %v", v)
	}
}

type CertOptions struct {
	// The name of the predefined certificate.
	CertificateName *string `json:"certificateName,omitempty"`
	// Path to the private key to use. Key should be in PEM format. Can reference $ENV_VARS.
	PrivKeyPath string `json:"privKeyPath"`
	// Passphrase to use to decrypt the private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path to the certificate to use. Certificate should be in PEM format. Can reference $ENV_VARS.
	CertPath string `json:"certPath"`
}

func (o *CertOptions) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *CertOptions) GetPrivKeyPath() string {
	if o == nil {
		return ""
	}
	return o.PrivKeyPath
}

func (o *CertOptions) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *CertOptions) GetCertPath() string {
	if o == nil {
		return ""
	}
	return o.CertPath
}

type InputOffice365MsgTrace struct {
	// Unique ID for this input
	ID       *string                     `json:"id,omitempty"`
	Type     *InputOffice365MsgTraceType `json:"type,omitempty"`
	Disabled *bool                       `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputOffice365MsgTraceConnections `json:"connections,omitempty"`
	Pq          *InputOffice365MsgTracePq           `json:"pq,omitempty"`
	// URL to use when retrieving report data.
	URL *string `default:"https://reports.office365.com/ecp/reportingwebservice/reporting.svc/MessageTrace" json:"url"`
	// How often (in minutes) to run the report. Must divide evenly into 60 minutes to create a predictable schedule, or Save will fail.
	Interval *float64 `default:"60" json:"interval"`
	// Backward offset for the search range's head. (E.g.: -3h@h) Message Trace data is delayed; this parameter (with Date range end) compensates for delay and gaps.
	StartDate *string `json:"startDate,omitempty"`
	// Backward offset for the search range's tail. (E.g.: -2h@h) Message Trace data is delayed; this parameter (with Date range start) compensates for delay and gaps.
	EndDate *string `json:"endDate,omitempty"`
	// HTTP request inactivity timeout. Maximum is 2400 (40 minutes); enter 0 to wait indefinitely.
	Timeout *float64 `default:"300" json:"timeout"`
	// Disables time filtering of events when a date range is specified.
	DisableTimeFilter *bool `default:"true" json:"disableTimeFilter"`
	// Select authentication method.
	AuthType *InputOffice365MsgTraceAuthenticationMethod `default:"oauth" json:"authType"`
	// Reschedule tasks that failed with non-fatal errors
	RescheduleDroppedTasks *bool `default:"true" json:"rescheduleDroppedTasks"`
	// Maximum number of times a task can be rescheduled
	MaxTaskReschedule *float64 `default:"1" json:"maxTaskReschedule"`
	// Log Level (verbosity) for collection runtime behavior.
	LogLevel *InputOffice365MsgTraceLogLevel `default:"info" json:"logLevel"`
	// Maximum time the job is allowed to run (e.g., 30, 45s or 15m). Units are seconds, if not specified. Enter 0 for unlimited time.
	JobTimeout *string `default:"0" json:"jobTimeout"`
	// How often workers should check in with the scheduler to keep job subscription alive
	KeepAliveTime *float64 `default:"30" json:"keepAliveTime"`
	// The number of Keep Alive Time periods before an inactive worker will have its job subscription revoked.
	MaxMissedKeepAlives *float64 `default:"3" json:"maxMissedKeepAlives"`
	// Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
	TTL *string `default:"4h" json:"ttl"`
	// Fields to add to events from this input
	Metadata    []InputOffice365MsgTraceMetadata  `json:"metadata,omitempty"`
	RetryRules  *InputOffice365MsgTraceRetryRules `json:"retryRules,omitempty"`
	Description *string                           `json:"description,omitempty"`
	// Username to run Message Trace API call.
	Username *string `json:"username,omitempty"`
	// Password to run Message Trace API call.
	Password *string `json:"password,omitempty"`
	// Select or create a secret that references your credentials.
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
	// client_secret to pass in the OAuth request parameter.
	ClientSecret *string `json:"clientSecret,omitempty"`
	// Directory ID (tenant identifier) in Azure Active Directory.
	TenantID *string `json:"tenantId,omitempty"`
	// client_id to pass in the OAuth request parameter.
	ClientID *string `json:"clientId,omitempty"`
	// Resource to pass in the OAuth request parameter.
	Resource *string `default:"https://outlook.office365.com" json:"resource"`
	// Office 365 subscription plan for your organization, typically Office 365 Enterprise
	PlanType *InputOffice365MsgTraceSubscriptionPlan `default:"enterprise_gcc" json:"planType"`
	// Select or create a secret that references your client_secret to pass in the OAuth request parameter.
	TextSecret  *string      `json:"textSecret,omitempty"`
	CertOptions *CertOptions `json:"certOptions,omitempty"`
}

func (i InputOffice365MsgTrace) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputOffice365MsgTrace) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputOffice365MsgTrace) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputOffice365MsgTrace) GetType() *InputOffice365MsgTraceType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputOffice365MsgTrace) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputOffice365MsgTrace) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputOffice365MsgTrace) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputOffice365MsgTrace) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputOffice365MsgTrace) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputOffice365MsgTrace) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputOffice365MsgTrace) GetConnections() []InputOffice365MsgTraceConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputOffice365MsgTrace) GetPq() *InputOffice365MsgTracePq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputOffice365MsgTrace) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *InputOffice365MsgTrace) GetInterval() *float64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *InputOffice365MsgTrace) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *InputOffice365MsgTrace) GetEndDate() *string {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *InputOffice365MsgTrace) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *InputOffice365MsgTrace) GetDisableTimeFilter() *bool {
	if o == nil {
		return nil
	}
	return o.DisableTimeFilter
}

func (o *InputOffice365MsgTrace) GetAuthType() *InputOffice365MsgTraceAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *InputOffice365MsgTrace) GetRescheduleDroppedTasks() *bool {
	if o == nil {
		return nil
	}
	return o.RescheduleDroppedTasks
}

func (o *InputOffice365MsgTrace) GetMaxTaskReschedule() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxTaskReschedule
}

func (o *InputOffice365MsgTrace) GetLogLevel() *InputOffice365MsgTraceLogLevel {
	if o == nil {
		return nil
	}
	return o.LogLevel
}

func (o *InputOffice365MsgTrace) GetJobTimeout() *string {
	if o == nil {
		return nil
	}
	return o.JobTimeout
}

func (o *InputOffice365MsgTrace) GetKeepAliveTime() *float64 {
	if o == nil {
		return nil
	}
	return o.KeepAliveTime
}

func (o *InputOffice365MsgTrace) GetMaxMissedKeepAlives() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxMissedKeepAlives
}

func (o *InputOffice365MsgTrace) GetTTL() *string {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *InputOffice365MsgTrace) GetMetadata() []InputOffice365MsgTraceMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputOffice365MsgTrace) GetRetryRules() *InputOffice365MsgTraceRetryRules {
	if o == nil {
		return nil
	}
	return o.RetryRules
}

func (o *InputOffice365MsgTrace) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *InputOffice365MsgTrace) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *InputOffice365MsgTrace) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *InputOffice365MsgTrace) GetCredentialsSecret() *string {
	if o == nil {
		return nil
	}
	return o.CredentialsSecret
}

func (o *InputOffice365MsgTrace) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *InputOffice365MsgTrace) GetTenantID() *string {
	if o == nil {
		return nil
	}
	return o.TenantID
}

func (o *InputOffice365MsgTrace) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *InputOffice365MsgTrace) GetResource() *string {
	if o == nil {
		return nil
	}
	return o.Resource
}

func (o *InputOffice365MsgTrace) GetPlanType() *InputOffice365MsgTraceSubscriptionPlan {
	if o == nil {
		return nil
	}
	return o.PlanType
}

func (o *InputOffice365MsgTrace) GetTextSecret() *string {
	if o == nil {
		return nil
	}
	return o.TextSecret
}

func (o *InputOffice365MsgTrace) GetCertOptions() *CertOptions {
	if o == nil {
		return nil
	}
	return o.CertOptions
}
