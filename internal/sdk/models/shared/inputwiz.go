// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type InputWizInputType string

const (
	InputWizInputTypeSplunk               InputWizInputType = "splunk"
	InputWizInputTypeSplunkHec            InputWizInputType = "splunk_hec"
	InputWizInputTypeSyslog               InputWizInputType = "syslog"
	InputWizInputTypeTcpjson              InputWizInputType = "tcpjson"
	InputWizInputTypeGrafana              InputWizInputType = "grafana"
	InputWizInputTypeLoki                 InputWizInputType = "loki"
	InputWizInputTypeHTTP                 InputWizInputType = "http"
	InputWizInputTypeHTTPRaw              InputWizInputType = "http_raw"
	InputWizInputTypeFirehose             InputWizInputType = "firehose"
	InputWizInputTypeElastic              InputWizInputType = "elastic"
	InputWizInputTypeKafka                InputWizInputType = "kafka"
	InputWizInputTypeConfluentCloud       InputWizInputType = "confluent_cloud"
	InputWizInputTypeMsk                  InputWizInputType = "msk"
	InputWizInputTypeKinesis              InputWizInputType = "kinesis"
	InputWizInputTypeEventhub             InputWizInputType = "eventhub"
	InputWizInputTypeAzureBlob            InputWizInputType = "azure_blob"
	InputWizInputTypeMetrics              InputWizInputType = "metrics"
	InputWizInputTypeSqs                  InputWizInputType = "sqs"
	InputWizInputTypeS3                   InputWizInputType = "s3"
	InputWizInputTypeS3Inventory          InputWizInputType = "s3_inventory"
	InputWizInputTypeSnmp                 InputWizInputType = "snmp"
	InputWizInputTypeCrowdstrike          InputWizInputType = "crowdstrike"
	InputWizInputTypeTCP                  InputWizInputType = "tcp"
	InputWizInputTypeRawUDP               InputWizInputType = "raw_udp"
	InputWizInputTypeNetflow              InputWizInputType = "netflow"
	InputWizInputTypeOffice365Service     InputWizInputType = "office365_service"
	InputWizInputTypeOffice365Mgmt        InputWizInputType = "office365_mgmt"
	InputWizInputTypeOffice365MsgTrace    InputWizInputType = "office365_msg_trace"
	InputWizInputTypePrometheus           InputWizInputType = "prometheus"
	InputWizInputTypeEdgePrometheus       InputWizInputType = "edge_prometheus"
	InputWizInputTypePrometheusRw         InputWizInputType = "prometheus_rw"
	InputWizInputTypeAppscope             InputWizInputType = "appscope"
	InputWizInputTypeGooglePubsub         InputWizInputType = "google_pubsub"
	InputWizInputTypeOpenTelemetry        InputWizInputType = "open_telemetry"
	InputWizInputTypeModelDrivenTelemetry InputWizInputType = "model_driven_telemetry"
	InputWizInputTypeDatadogAgent         InputWizInputType = "datadog_agent"
	InputWizInputTypeWef                  InputWizInputType = "wef"
	InputWizInputTypeWiz                  InputWizInputType = "wiz"
	InputWizInputTypeZscalerHec           InputWizInputType = "zscaler_hec"
	InputWizInputTypeDatagen              InputWizInputType = "datagen"
	InputWizInputTypeCribl                InputWizInputType = "cribl"
	InputWizInputTypeCriblmetrics         InputWizInputType = "criblmetrics"
	InputWizInputTypeCriblHTTP            InputWizInputType = "cribl_http"
	InputWizInputTypeCriblTCP             InputWizInputType = "cribl_tcp"
	InputWizInputTypeWinEventLogs         InputWizInputType = "win_event_logs"
	InputWizInputTypeSystemMetrics        InputWizInputType = "system_metrics"
	InputWizInputTypeWindowsMetrics       InputWizInputType = "windows_metrics"
	InputWizInputTypeSystemState          InputWizInputType = "system_state"
	InputWizInputTypeKubeMetrics          InputWizInputType = "kube_metrics"
	InputWizInputTypeKubeLogs             InputWizInputType = "kube_logs"
	InputWizInputTypeKubeEvents           InputWizInputType = "kube_events"
	InputWizInputTypeExec                 InputWizInputType = "exec"
	InputWizInputTypeSplunkSearch         InputWizInputType = "splunk_search"
	InputWizInputTypeFile                 InputWizInputType = "file"
	InputWizInputTypeJournalFiles         InputWizInputType = "journal_files"
	InputWizInputTypeSecurityLake         InputWizInputType = "security_lake"
)

func (e InputWizInputType) ToPointer() *InputWizInputType {
	return &e
}
func (e *InputWizInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "splunk":
		fallthrough
	case "splunk_hec":
		fallthrough
	case "syslog":
		fallthrough
	case "tcpjson":
		fallthrough
	case "grafana":
		fallthrough
	case "loki":
		fallthrough
	case "http":
		fallthrough
	case "http_raw":
		fallthrough
	case "firehose":
		fallthrough
	case "elastic":
		fallthrough
	case "kafka":
		fallthrough
	case "confluent_cloud":
		fallthrough
	case "msk":
		fallthrough
	case "kinesis":
		fallthrough
	case "eventhub":
		fallthrough
	case "azure_blob":
		fallthrough
	case "metrics":
		fallthrough
	case "sqs":
		fallthrough
	case "s3":
		fallthrough
	case "s3_inventory":
		fallthrough
	case "snmp":
		fallthrough
	case "crowdstrike":
		fallthrough
	case "tcp":
		fallthrough
	case "raw_udp":
		fallthrough
	case "netflow":
		fallthrough
	case "office365_service":
		fallthrough
	case "office365_mgmt":
		fallthrough
	case "office365_msg_trace":
		fallthrough
	case "prometheus":
		fallthrough
	case "edge_prometheus":
		fallthrough
	case "prometheus_rw":
		fallthrough
	case "appscope":
		fallthrough
	case "google_pubsub":
		fallthrough
	case "open_telemetry":
		fallthrough
	case "model_driven_telemetry":
		fallthrough
	case "datadog_agent":
		fallthrough
	case "wef":
		fallthrough
	case "wiz":
		fallthrough
	case "zscaler_hec":
		fallthrough
	case "datagen":
		fallthrough
	case "cribl":
		fallthrough
	case "criblmetrics":
		fallthrough
	case "cribl_http":
		fallthrough
	case "cribl_tcp":
		fallthrough
	case "win_event_logs":
		fallthrough
	case "system_metrics":
		fallthrough
	case "windows_metrics":
		fallthrough
	case "system_state":
		fallthrough
	case "kube_metrics":
		fallthrough
	case "kube_logs":
		fallthrough
	case "kube_events":
		fallthrough
	case "exec":
		fallthrough
	case "splunk_search":
		fallthrough
	case "file":
		fallthrough
	case "journal_files":
		fallthrough
	case "security_lake":
		*e = InputWizInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWizInputType: %v", v)
	}
}

type InputWizConnections struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputWizConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputWizConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputWizMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputWizMode string

const (
	InputWizModeSmart  InputWizMode = "smart"
	InputWizModeAlways InputWizMode = "always"
)

func (e InputWizMode) ToPointer() *InputWizMode {
	return &e
}
func (e *InputWizMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputWizMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWizMode: %v", v)
	}
}

// InputWizCompression - Codec to use to compress the persisted data
type InputWizCompression string

const (
	InputWizCompressionNone InputWizCompression = "none"
	InputWizCompressionGzip InputWizCompression = "gzip"
)

func (e InputWizCompression) ToPointer() *InputWizCompression {
	return &e
}
func (e *InputWizCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputWizCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWizCompression: %v", v)
	}
}

type InputWizPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputWizMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputWizCompression `default:"none" json:"compress"`
}

func (i InputWizPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWizPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputWizPq) GetMode() *InputWizMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputWizPq) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputWizPq) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputWizPq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputWizPq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputWizPq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputWizPq) GetCompress() *InputWizCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

type InputWizContentConfig struct {
	// The name of the Wiz query
	ContentType        string  `json:"contentType"`
	ContentDescription *string `json:"contentDescription,omitempty"`
	Enabled            *bool   `default:"false" json:"enabled"`
}

func (i InputWizContentConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWizContentConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputWizContentConfig) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *InputWizContentConfig) GetContentDescription() *string {
	if o == nil {
		return nil
	}
	return o.ContentDescription
}

func (o *InputWizContentConfig) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type InputWizMetadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputWizMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputWizMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// InputWizRetryType - The algorithm to use when performing HTTP retries
type InputWizRetryType string

const (
	InputWizRetryTypeNone    InputWizRetryType = "none"
	InputWizRetryTypeBackoff InputWizRetryType = "backoff"
	InputWizRetryTypeStatic  InputWizRetryType = "static"
)

func (e InputWizRetryType) ToPointer() *InputWizRetryType {
	return &e
}
func (e *InputWizRetryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "backoff":
		fallthrough
	case "static":
		*e = InputWizRetryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWizRetryType: %v", v)
	}
}

type InputWizRetryRules struct {
	// The algorithm to use when performing HTTP retries
	Type *InputWizRetryType `default:"backoff" json:"type"`
	// Time interval between failed request and first retry (kickoff). Maximum allowed value is 20,000 ms (1/3 minute).
	Interval *float64 `default:"1000" json:"interval"`
	// The maximum number of times to retry a failed HTTP request
	Limit *float64 `default:"5" json:"limit"`
	// Base for exponential backoff, e.g., base 2 means that retries will occur after 2, then 4, then 8 seconds, and so on
	Multiplier *float64 `default:"2" json:"multiplier"`
	// List of HTTP codes that trigger a retry. Leave empty to use the default list of 429 and 503.
	Codes []float64 `json:"codes,omitempty"`
	// Honor any Retry-After header that specifies a delay (in seconds) or a timestamp after which to retry the request. The delay is limited to 20 seconds, even if the Retry-After header specifies a longer delay. When disabled, all Retry-After headers are ignored.
	EnableHeader *bool `default:"true" json:"enableHeader"`
	// When toggled to Yes, a single retry attempt will be made when a connection timeout (ETIMEDOUT) error occurs
	RetryConnectTimeout *bool `default:"false" json:"retryConnectTimeout"`
	// When toggled to Yes, the request will be retried when a connection reset (ECONNRESET) error occurs
	RetryConnectReset *bool `default:"false" json:"retryConnectReset"`
}

func (i InputWizRetryRules) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWizRetryRules) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputWizRetryRules) GetType() *InputWizRetryType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputWizRetryRules) GetInterval() *float64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *InputWizRetryRules) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *InputWizRetryRules) GetMultiplier() *float64 {
	if o == nil {
		return nil
	}
	return o.Multiplier
}

func (o *InputWizRetryRules) GetCodes() []float64 {
	if o == nil {
		return nil
	}
	return o.Codes
}

func (o *InputWizRetryRules) GetEnableHeader() *bool {
	if o == nil {
		return nil
	}
	return o.EnableHeader
}

func (o *InputWizRetryRules) GetRetryConnectTimeout() *bool {
	if o == nil {
		return nil
	}
	return o.RetryConnectTimeout
}

func (o *InputWizRetryRules) GetRetryConnectReset() *bool {
	if o == nil {
		return nil
	}
	return o.RetryConnectReset
}

// InputWizAuthenticationMethod - Enter client secret directly, or select a stored secret
type InputWizAuthenticationMethod string

const (
	InputWizAuthenticationMethodManual InputWizAuthenticationMethod = "manual"
	InputWizAuthenticationMethodSecret InputWizAuthenticationMethod = "secret"
)

func (e InputWizAuthenticationMethod) ToPointer() *InputWizAuthenticationMethod {
	return &e
}
func (e *InputWizAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "secret":
		*e = InputWizAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputWizAuthenticationMethod: %v", v)
	}
}

type InputWiz struct {
	// Unique ID for this input
	ID       *string            `json:"id,omitempty"`
	Type     *InputWizInputType `json:"type,omitempty"`
	Disabled *bool              `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputWizConnections `json:"connections,omitempty"`
	Pq          *InputWizPq           `json:"pq,omitempty"`
	// The Wiz GraphQL API endpoint. Example: https://api.us1.app.wiz.io/graphql
	Endpoint *string `default:"https://api.<region>.app.wiz.io/graphql" json:"endpoint"`
	// The authentication URL to generate an OAuth token
	AuthURL string `json:"authUrl"`
	// The audience to use when requesting an OAuth token for a custom auth URL. When not specified, `wiz-api` will be used.
	AuthAudienceOverride *string `json:"authAudienceOverride,omitempty"`
	// The client ID of the Wiz application
	ClientID      string                  `json:"clientId"`
	ContentConfig []InputWizContentConfig `json:"contentConfig,omitempty"`
	// HTTP request inactivity timeout. Use 0 to disable.
	RequestTimeout *float64 `default:"300" json:"requestTimeout"`
	// How often workers should check in with the scheduler to keep job subscription alive
	KeepAliveTime *float64 `default:"30" json:"keepAliveTime"`
	// The number of Keep Alive Time periods before an inactive worker will have its job subscription revoked.
	MaxMissedKeepAlives *float64 `default:"3" json:"maxMissedKeepAlives"`
	// Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
	TTL *string `default:"4h" json:"ttl"`
	// Fields to add to events from this input
	Metadata   []InputWizMetadata  `json:"metadata,omitempty"`
	RetryRules *InputWizRetryRules `json:"retryRules,omitempty"`
	// Enter client secret directly, or select a stored secret
	AuthType    *InputWizAuthenticationMethod `default:"manual" json:"authType"`
	Description *string                       `json:"description,omitempty"`
	// The client secret of the Wiz application
	ClientSecret *string `json:"clientSecret,omitempty"`
	// Select or create a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
}

func (i InputWiz) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputWiz) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputWiz) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputWiz) GetType() *InputWizInputType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputWiz) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputWiz) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputWiz) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputWiz) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputWiz) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputWiz) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputWiz) GetConnections() []InputWizConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputWiz) GetPq() *InputWizPq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputWiz) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *InputWiz) GetAuthURL() string {
	if o == nil {
		return ""
	}
	return o.AuthURL
}

func (o *InputWiz) GetAuthAudienceOverride() *string {
	if o == nil {
		return nil
	}
	return o.AuthAudienceOverride
}

func (o *InputWiz) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *InputWiz) GetContentConfig() []InputWizContentConfig {
	if o == nil {
		return nil
	}
	return o.ContentConfig
}

func (o *InputWiz) GetRequestTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestTimeout
}

func (o *InputWiz) GetKeepAliveTime() *float64 {
	if o == nil {
		return nil
	}
	return o.KeepAliveTime
}

func (o *InputWiz) GetMaxMissedKeepAlives() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxMissedKeepAlives
}

func (o *InputWiz) GetTTL() *string {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *InputWiz) GetMetadata() []InputWizMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputWiz) GetRetryRules() *InputWizRetryRules {
	if o == nil {
		return nil
	}
	return o.RetryRules
}

func (o *InputWiz) GetAuthType() *InputWizAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *InputWiz) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *InputWiz) GetClientSecret() *string {
	if o == nil {
		return nil
	}
	return o.ClientSecret
}

func (o *InputWiz) GetTextSecret() *string {
	if o == nil {
		return nil
	}
	return o.TextSecret
}
