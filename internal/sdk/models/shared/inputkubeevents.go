// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type InputKubeEventsType string

const (
	InputKubeEventsTypeKubeEvents InputKubeEventsType = "kube_events"
)

func (e InputKubeEventsType) ToPointer() *InputKubeEventsType {
	return &e
}
func (e *InputKubeEventsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kube_events":
		*e = InputKubeEventsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeEventsType: %v", v)
	}
}

type InputKubeEventsConnections struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputKubeEventsConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputKubeEventsConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputKubeEventsMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputKubeEventsMode string

const (
	InputKubeEventsModeSmart  InputKubeEventsMode = "smart"
	InputKubeEventsModeAlways InputKubeEventsMode = "always"
)

func (e InputKubeEventsMode) ToPointer() *InputKubeEventsMode {
	return &e
}
func (e *InputKubeEventsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputKubeEventsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeEventsMode: %v", v)
	}
}

// InputKubeEventsCompression - Codec to use to compress the persisted data
type InputKubeEventsCompression string

const (
	InputKubeEventsCompressionNone InputKubeEventsCompression = "none"
	InputKubeEventsCompressionGzip InputKubeEventsCompression = "gzip"
)

func (e InputKubeEventsCompression) ToPointer() *InputKubeEventsCompression {
	return &e
}
func (e *InputKubeEventsCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputKubeEventsCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeEventsCompression: %v", v)
	}
}

type InputKubeEventsPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputKubeEventsMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputKubeEventsCompression `default:"none" json:"compress"`
}

func (i InputKubeEventsPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputKubeEventsPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputKubeEventsPq) GetMode() *InputKubeEventsMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputKubeEventsPq) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputKubeEventsPq) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputKubeEventsPq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputKubeEventsPq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputKubeEventsPq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputKubeEventsPq) GetCompress() *InputKubeEventsCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

type InputKubeEventsRules struct {
	// JavaScript expression applied to Kubernetes objects. Return 'true' to include it.
	Filter string `json:"filter"`
	// Optional description of this rule's purpose
	Description *string `json:"description,omitempty"`
}

func (o *InputKubeEventsRules) GetFilter() string {
	if o == nil {
		return ""
	}
	return o.Filter
}

func (o *InputKubeEventsRules) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type InputKubeEventsMetadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputKubeEventsMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputKubeEventsMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputKubeEvents struct {
	// Unique ID for this input
	ID       string              `json:"id"`
	Type     InputKubeEventsType `json:"type"`
	Disabled *bool               `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputKubeEventsConnections `json:"connections,omitempty"`
	Pq          *InputKubeEventsPq           `json:"pq,omitempty"`
	// Filtering on event fields
	Rules []InputKubeEventsRules `json:"rules,omitempty"`
	// Fields to add to events from this input
	Metadata    []InputKubeEventsMetadata `json:"metadata,omitempty"`
	Description *string                   `json:"description,omitempty"`
}

func (i InputKubeEvents) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputKubeEvents) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputKubeEvents) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *InputKubeEvents) GetType() InputKubeEventsType {
	if o == nil {
		return InputKubeEventsType("")
	}
	return o.Type
}

func (o *InputKubeEvents) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputKubeEvents) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputKubeEvents) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputKubeEvents) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputKubeEvents) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputKubeEvents) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputKubeEvents) GetConnections() []InputKubeEventsConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputKubeEvents) GetPq() *InputKubeEventsPq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputKubeEvents) GetRules() []InputKubeEventsRules {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *InputKubeEvents) GetMetadata() []InputKubeEventsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputKubeEvents) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}
