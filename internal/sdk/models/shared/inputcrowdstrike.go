// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type InputCrowdstrikeType string

const (
	InputCrowdstrikeTypeCrowdstrike InputCrowdstrikeType = "crowdstrike"
)

func (e InputCrowdstrikeType) ToPointer() *InputCrowdstrikeType {
	return &e
}
func (e *InputCrowdstrikeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "crowdstrike":
		*e = InputCrowdstrikeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikeType: %v", v)
	}
}

type InputCrowdstrikeConnections struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputCrowdstrikeConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputCrowdstrikeConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputCrowdstrikeMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputCrowdstrikeMode string

const (
	InputCrowdstrikeModeSmart  InputCrowdstrikeMode = "smart"
	InputCrowdstrikeModeAlways InputCrowdstrikeMode = "always"
)

func (e InputCrowdstrikeMode) ToPointer() *InputCrowdstrikeMode {
	return &e
}
func (e *InputCrowdstrikeMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputCrowdstrikeMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikeMode: %v", v)
	}
}

// InputCrowdstrikeCompression - Codec to use to compress the persisted data
type InputCrowdstrikeCompression string

const (
	InputCrowdstrikeCompressionNone InputCrowdstrikeCompression = "none"
	InputCrowdstrikeCompressionGzip InputCrowdstrikeCompression = "gzip"
)

func (e InputCrowdstrikeCompression) ToPointer() *InputCrowdstrikeCompression {
	return &e
}
func (e *InputCrowdstrikeCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputCrowdstrikeCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikeCompression: %v", v)
	}
}

type InputCrowdstrikePq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputCrowdstrikeMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputCrowdstrikeCompression `default:"none" json:"compress"`
}

func (i InputCrowdstrikePq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCrowdstrikePq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputCrowdstrikePq) GetMode() *InputCrowdstrikeMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputCrowdstrikePq) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputCrowdstrikePq) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputCrowdstrikePq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputCrowdstrikePq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputCrowdstrikePq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputCrowdstrikePq) GetCompress() *InputCrowdstrikeCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

// InputCrowdstrikeAuthenticationMethod - AWS authentication method. Choose Auto to use IAM roles.
type InputCrowdstrikeAuthenticationMethod string

const (
	InputCrowdstrikeAuthenticationMethodAuto   InputCrowdstrikeAuthenticationMethod = "auto"
	InputCrowdstrikeAuthenticationMethodManual InputCrowdstrikeAuthenticationMethod = "manual"
	InputCrowdstrikeAuthenticationMethodSecret InputCrowdstrikeAuthenticationMethod = "secret"
)

func (e InputCrowdstrikeAuthenticationMethod) ToPointer() *InputCrowdstrikeAuthenticationMethod {
	return &e
}
func (e *InputCrowdstrikeAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "manual":
		fallthrough
	case "secret":
		*e = InputCrowdstrikeAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikeAuthenticationMethod: %v", v)
	}
}

// InputCrowdstrikeSignatureVersion - Signature version to use for signing S3 requests
type InputCrowdstrikeSignatureVersion string

const (
	InputCrowdstrikeSignatureVersionV2 InputCrowdstrikeSignatureVersion = "v2"
	InputCrowdstrikeSignatureVersionV4 InputCrowdstrikeSignatureVersion = "v4"
)

func (e InputCrowdstrikeSignatureVersion) ToPointer() *InputCrowdstrikeSignatureVersion {
	return &e
}
func (e *InputCrowdstrikeSignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = InputCrowdstrikeSignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputCrowdstrikeSignatureVersion: %v", v)
	}
}

type InputCrowdstrikePreprocess struct {
	Disabled *bool `default:"true" json:"disabled"`
	// Command to feed the data through (via stdin) and process its output (stdout)
	Command *string `json:"command,omitempty"`
	// Arguments to be added to the custom command
	Args []string `json:"args,omitempty"`
}

func (i InputCrowdstrikePreprocess) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCrowdstrikePreprocess) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputCrowdstrikePreprocess) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputCrowdstrikePreprocess) GetCommand() *string {
	if o == nil {
		return nil
	}
	return o.Command
}

func (o *InputCrowdstrikePreprocess) GetArgs() []string {
	if o == nil {
		return nil
	}
	return o.Args
}

type InputCrowdstrikeMetadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputCrowdstrikeMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputCrowdstrikeMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type Checkpointing struct {
	// Enable checkpointing to resume processing files after an interruption.
	Enabled *bool `default:"false" json:"enabled"`
	// If checkpointing is enabled, the number of times to retry processing when a processing error occurs. If skip file on error is enabled, this setting is ignored.
	Retries *float64 `default:"5" json:"retries"`
}

func (c Checkpointing) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *Checkpointing) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Checkpointing) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Checkpointing) GetRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

type InputCrowdstrike struct {
	// Unique ID for this input
	ID       *string              `json:"id,omitempty"`
	Type     InputCrowdstrikeType `json:"type"`
	Disabled *bool                `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputCrowdstrikeConnections `json:"connections,omitempty"`
	Pq          *InputCrowdstrikePq           `json:"pq,omitempty"`
	// The name, URL, or ARN of the SQS queue to read notifications from. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. E.g., 'https://host:port/myQueueName'. Value must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. E.g., referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
	QueueName string `json:"queueName"`
	// Regex matching file names to download and process. Defaults to: .*
	FileFilter *string `default:"/.*/" json:"fileFilter"`
	// SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
	AwsAccountID *string `json:"awsAccountId,omitempty"`
	// AWS authentication method. Choose Auto to use IAM roles.
	AwsAuthenticationMethod *InputCrowdstrikeAuthenticationMethod `default:"auto" json:"awsAuthenticationMethod"`
	// Secret key
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// AWS Region where the S3 bucket and SQS queue are located. Required, unless the Queue entry is a URL or ARN that includes a Region.
	Region *string `json:"region,omitempty"`
	// S3 service endpoint. If empty, defaults to AWS' Region-specific endpoint. Otherwise, it must point to S3-compatible endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Signature version to use for signing S3 requests
	SignatureVersion *InputCrowdstrikeSignatureVersion `default:"v4" json:"signatureVersion"`
	// Reuse connections between requests, which can improve performance
	ReuseConnections *bool `default:"true" json:"reuseConnections"`
	// Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
	RejectUnauthorized *bool `default:"true" json:"rejectUnauthorized"`
	// A list of event-breaking rulesets that will be applied, in order, to the input data stream
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
	StaleChannelFlushMs *float64 `default:"10000" json:"staleChannelFlushMs"`
	// The maximum number of messages SQS should return in a poll request. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10.
	MaxMessages *float64 `default:"1" json:"maxMessages"`
	// After messages are retrieved by a ReceiveMessage request, @{product} will hide them from subsequent retrieve requests for at least this duration. You can set this as high as 43200 sec. (12 hours).
	VisibilityTimeout *float64 `default:"21600" json:"visibilityTimeout"`
	// The Number of receiver processes to run, the higher the number the better throughput at the expense of CPU overhead
	NumReceivers *float64 `default:"1" json:"numReceivers"`
	// Socket inactivity timeout (in seconds). Increase this value if timeouts occur due to backpressure.
	SocketTimeout *float64 `default:"300" json:"socketTimeout"`
	// Toggle to Yes to skip files that trigger a processing error. Defaults to No, which enables retries after processing errors.
	SkipOnError *bool `default:"false" json:"skipOnError"`
	// Use Assume Role credentials to access S3
	EnableAssumeRole *bool `default:"true" json:"enableAssumeRole"`
	// Amazon Resource Name (ARN) of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID to use when assuming role
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
	DurationSeconds *float64 `default:"3600" json:"durationSeconds"`
	// Use Assume Role credentials when accessing SQS.
	EnableSQSAssumeRole *bool                       `default:"false" json:"enableSQSAssumeRole"`
	Preprocess          *InputCrowdstrikePreprocess `json:"preprocess,omitempty"`
	// Fields to add to events from this input
	Metadata      []InputCrowdstrikeMetadata `json:"metadata,omitempty"`
	Checkpointing *Checkpointing             `json:"checkpointing,omitempty"`
	// The amount of time to wait for events before trying polling again. The lower the number the higher the AWS bill. The higher the number the longer it will take for the source to react to configuration changes and system restarts.
	PollTimeout *float64 `default:"10" json:"pollTimeout"`
	// Character encoding to use when parsing ingested data. When not set, @{product} will default to UTF-8 but may incorrectly interpret multi-byte characters.
	Encoding    *string `json:"encoding,omitempty"`
	Description *string `json:"description,omitempty"`
	// Access key
	AwsAPIKey *string `json:"awsApiKey,omitempty"`
	// Select or create a stored secret that references your access key and secret key.
	AwsSecret *string `json:"awsSecret,omitempty"`
}

func (i InputCrowdstrike) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputCrowdstrike) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputCrowdstrike) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputCrowdstrike) GetType() InputCrowdstrikeType {
	if o == nil {
		return InputCrowdstrikeType("")
	}
	return o.Type
}

func (o *InputCrowdstrike) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputCrowdstrike) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputCrowdstrike) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputCrowdstrike) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputCrowdstrike) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputCrowdstrike) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputCrowdstrike) GetConnections() []InputCrowdstrikeConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputCrowdstrike) GetPq() *InputCrowdstrikePq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputCrowdstrike) GetQueueName() string {
	if o == nil {
		return ""
	}
	return o.QueueName
}

func (o *InputCrowdstrike) GetFileFilter() *string {
	if o == nil {
		return nil
	}
	return o.FileFilter
}

func (o *InputCrowdstrike) GetAwsAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountID
}

func (o *InputCrowdstrike) GetAwsAuthenticationMethod() *InputCrowdstrikeAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AwsAuthenticationMethod
}

func (o *InputCrowdstrike) GetAwsSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretKey
}

func (o *InputCrowdstrike) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *InputCrowdstrike) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *InputCrowdstrike) GetSignatureVersion() *InputCrowdstrikeSignatureVersion {
	if o == nil {
		return nil
	}
	return o.SignatureVersion
}

func (o *InputCrowdstrike) GetReuseConnections() *bool {
	if o == nil {
		return nil
	}
	return o.ReuseConnections
}

func (o *InputCrowdstrike) GetRejectUnauthorized() *bool {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputCrowdstrike) GetBreakerRulesets() []string {
	if o == nil {
		return nil
	}
	return o.BreakerRulesets
}

func (o *InputCrowdstrike) GetStaleChannelFlushMs() *float64 {
	if o == nil {
		return nil
	}
	return o.StaleChannelFlushMs
}

func (o *InputCrowdstrike) GetMaxMessages() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxMessages
}

func (o *InputCrowdstrike) GetVisibilityTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.VisibilityTimeout
}

func (o *InputCrowdstrike) GetNumReceivers() *float64 {
	if o == nil {
		return nil
	}
	return o.NumReceivers
}

func (o *InputCrowdstrike) GetSocketTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SocketTimeout
}

func (o *InputCrowdstrike) GetSkipOnError() *bool {
	if o == nil {
		return nil
	}
	return o.SkipOnError
}

func (o *InputCrowdstrike) GetEnableAssumeRole() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAssumeRole
}

func (o *InputCrowdstrike) GetAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleArn
}

func (o *InputCrowdstrike) GetAssumeRoleExternalID() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleExternalID
}

func (o *InputCrowdstrike) GetDurationSeconds() *float64 {
	if o == nil {
		return nil
	}
	return o.DurationSeconds
}

func (o *InputCrowdstrike) GetEnableSQSAssumeRole() *bool {
	if o == nil {
		return nil
	}
	return o.EnableSQSAssumeRole
}

func (o *InputCrowdstrike) GetPreprocess() *InputCrowdstrikePreprocess {
	if o == nil {
		return nil
	}
	return o.Preprocess
}

func (o *InputCrowdstrike) GetMetadata() []InputCrowdstrikeMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputCrowdstrike) GetCheckpointing() *Checkpointing {
	if o == nil {
		return nil
	}
	return o.Checkpointing
}

func (o *InputCrowdstrike) GetPollTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.PollTimeout
}

func (o *InputCrowdstrike) GetEncoding() *string {
	if o == nil {
		return nil
	}
	return o.Encoding
}

func (o *InputCrowdstrike) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *InputCrowdstrike) GetAwsAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsAPIKey
}

func (o *InputCrowdstrike) GetAwsSecret() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecret
}
