// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AppscopeConfigCribl struct {
	Authtoken               *string            `json:"authtoken,omitempty"`
	Enable                  *bool              `json:"enable,omitempty"`
	Transport               *AppscopeTransport `json:"transport,omitempty"`
	UseScopeSourceTransport *bool              `json:"useScopeSourceTransport,omitempty"`
}

func (o *AppscopeConfigCribl) GetAuthtoken() *string {
	if o == nil {
		return nil
	}
	return o.Authtoken
}

func (o *AppscopeConfigCribl) GetEnable() *bool {
	if o == nil {
		return nil
	}
	return o.Enable
}

func (o *AppscopeConfigCribl) GetTransport() *AppscopeTransport {
	if o == nil {
		return nil
	}
	return o.Transport
}

func (o *AppscopeConfigCribl) GetUseScopeSourceTransport() *bool {
	if o == nil {
		return nil
	}
	return o.UseScopeSourceTransport
}

type AppscopeConfigFormat struct {
	Enhancefs      bool    `json:"enhancefs"`
	Maxeventpersec float64 `json:"maxeventpersec"`
}

func (o *AppscopeConfigFormat) GetEnhancefs() bool {
	if o == nil {
		return false
	}
	return o.Enhancefs
}

func (o *AppscopeConfigFormat) GetMaxeventpersec() float64 {
	if o == nil {
		return 0.0
	}
	return o.Maxeventpersec
}

type AppscopeConfigType string

const (
	AppscopeConfigTypeNdjson AppscopeConfigType = "ndjson"
)

func (e AppscopeConfigType) ToPointer() *AppscopeConfigType {
	return &e
}
func (e *AppscopeConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ndjson":
		*e = AppscopeConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigType: %v", v)
	}
}

type Watch struct {
	Allowbinary *bool   `json:"allowbinary,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Field       *string `json:"field,omitempty"`
	Headers     *string `json:"headers,omitempty"`
	Name        *string `json:"name,omitempty"`
	Type        string  `json:"type"`
	Value       *string `json:"value,omitempty"`
}

func (o *Watch) GetAllowbinary() *bool {
	if o == nil {
		return nil
	}
	return o.Allowbinary
}

func (o *Watch) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Watch) GetField() *string {
	if o == nil {
		return nil
	}
	return o.Field
}

func (o *Watch) GetHeaders() *string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *Watch) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Watch) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Watch) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type Event struct {
	Enable    bool                 `json:"enable"`
	Format    AppscopeConfigFormat `json:"format"`
	Transport AppscopeTransport    `json:"transport"`
	Type      AppscopeConfigType   `json:"type"`
	Watch     []Watch              `json:"watch"`
}

func (o *Event) GetEnable() bool {
	if o == nil {
		return false
	}
	return o.Enable
}

func (o *Event) GetFormat() AppscopeConfigFormat {
	if o == nil {
		return AppscopeConfigFormat{}
	}
	return o.Format
}

func (o *Event) GetTransport() AppscopeTransport {
	if o == nil {
		return AppscopeTransport{}
	}
	return o.Transport
}

func (o *Event) GetType() AppscopeConfigType {
	if o == nil {
		return AppscopeConfigType("")
	}
	return o.Type
}

func (o *Event) GetWatch() []Watch {
	if o == nil {
		return []Watch{}
	}
	return o.Watch
}

type Level string

const (
	LevelError   Level = "error"
	LevelDebug   Level = "debug"
	LevelInfo    Level = "info"
	LevelWarning Level = "warning"
	LevelNone    Level = "none"
)

func (e Level) ToPointer() *Level {
	return &e
}
func (e *Level) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "warning":
		fallthrough
	case "none":
		*e = Level(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Level: %v", v)
	}
}

type Log struct {
	Level     *Level             `json:"level,omitempty"`
	Transport *AppscopeTransport `json:"transport,omitempty"`
}

func (o *Log) GetLevel() *Level {
	if o == nil {
		return nil
	}
	return o.Level
}

func (o *Log) GetTransport() *AppscopeTransport {
	if o == nil {
		return nil
	}
	return o.Transport
}

type Libscope struct {
	Commanddir    *string  `json:"commanddir,omitempty"`
	Configevent   *bool    `json:"configevent,omitempty"`
	Log           *Log     `json:"log,omitempty"`
	Summaryperiod *float64 `json:"summaryperiod,omitempty"`
}

func (o *Libscope) GetCommanddir() *string {
	if o == nil {
		return nil
	}
	return o.Commanddir
}

func (o *Libscope) GetConfigevent() *bool {
	if o == nil {
		return nil
	}
	return o.Configevent
}

func (o *Libscope) GetLog() *Log {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *Libscope) GetSummaryperiod() *float64 {
	if o == nil {
		return nil
	}
	return o.Summaryperiod
}

type AppscopeConfigMetricFormat struct {
	Statsdmaxlen *float64 `json:"statsdmaxlen,omitempty"`
	Statsdprefix *string  `json:"statsdprefix,omitempty"`
	Type         *string  `json:"type,omitempty"`
	Verbosity    *float64 `json:"verbosity,omitempty"`
}

func (o *AppscopeConfigMetricFormat) GetStatsdmaxlen() *float64 {
	if o == nil {
		return nil
	}
	return o.Statsdmaxlen
}

func (o *AppscopeConfigMetricFormat) GetStatsdprefix() *string {
	if o == nil {
		return nil
	}
	return o.Statsdprefix
}

func (o *AppscopeConfigMetricFormat) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AppscopeConfigMetricFormat) GetVerbosity() *float64 {
	if o == nil {
		return nil
	}
	return o.Verbosity
}

type Metric struct {
	Enable    bool                       `json:"enable"`
	Format    AppscopeConfigMetricFormat `json:"format"`
	Transport AppscopeTransport          `json:"transport"`
	Watch     []string                   `json:"watch"`
}

func (o *Metric) GetEnable() bool {
	if o == nil {
		return false
	}
	return o.Enable
}

func (o *Metric) GetFormat() AppscopeConfigMetricFormat {
	if o == nil {
		return AppscopeConfigMetricFormat{}
	}
	return o.Format
}

func (o *Metric) GetTransport() AppscopeTransport {
	if o == nil {
		return AppscopeTransport{}
	}
	return o.Transport
}

func (o *Metric) GetWatch() []string {
	if o == nil {
		return []string{}
	}
	return o.Watch
}

type Payload struct {
	Dir    string `json:"dir"`
	Enable bool   `json:"enable"`
}

func (o *Payload) GetDir() string {
	if o == nil {
		return ""
	}
	return o.Dir
}

func (o *Payload) GetEnable() bool {
	if o == nil {
		return false
	}
	return o.Enable
}

type Protocol struct {
	Binary  bool    `json:"binary"`
	Detect  bool    `json:"detect"`
	Len     float64 `json:"len"`
	Name    string  `json:"name"`
	Payload bool    `json:"payload"`
	Regex   string  `json:"regex"`
}

func (o *Protocol) GetBinary() bool {
	if o == nil {
		return false
	}
	return o.Binary
}

func (o *Protocol) GetDetect() bool {
	if o == nil {
		return false
	}
	return o.Detect
}

func (o *Protocol) GetLen() float64 {
	if o == nil {
		return 0.0
	}
	return o.Len
}

func (o *Protocol) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Protocol) GetPayload() bool {
	if o == nil {
		return false
	}
	return o.Payload
}

func (o *Protocol) GetRegex() string {
	if o == nil {
		return ""
	}
	return o.Regex
}

type Tags struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (o *Tags) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *Tags) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type AppscopeConfig struct {
	Cribl    *AppscopeConfigCribl `json:"cribl,omitempty"`
	Event    *Event               `json:"event,omitempty"`
	Libscope *Libscope            `json:"libscope,omitempty"`
	Metric   *Metric              `json:"metric,omitempty"`
	Payload  *Payload             `json:"payload,omitempty"`
	Protocol []Protocol           `json:"protocol,omitempty"`
	Tags     []Tags               `json:"tags,omitempty"`
}

func (o *AppscopeConfig) GetCribl() *AppscopeConfigCribl {
	if o == nil {
		return nil
	}
	return o.Cribl
}

func (o *AppscopeConfig) GetEvent() *Event {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *AppscopeConfig) GetLibscope() *Libscope {
	if o == nil {
		return nil
	}
	return o.Libscope
}

func (o *AppscopeConfig) GetMetric() *Metric {
	if o == nil {
		return nil
	}
	return o.Metric
}

func (o *AppscopeConfig) GetPayload() *Payload {
	if o == nil {
		return nil
	}
	return o.Payload
}

func (o *AppscopeConfig) GetProtocol() []Protocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *AppscopeConfig) GetTags() []Tags {
	if o == nil {
		return nil
	}
	return o.Tags
}
