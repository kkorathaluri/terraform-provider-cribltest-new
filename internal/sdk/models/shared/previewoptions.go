// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type PreviewOptionsEarliestType string

const (
	PreviewOptionsEarliestTypeStr    PreviewOptionsEarliestType = "str"
	PreviewOptionsEarliestTypeNumber PreviewOptionsEarliestType = "number"
)

type PreviewOptionsEarliest struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type PreviewOptionsEarliestType
}

func CreatePreviewOptionsEarliestStr(str string) PreviewOptionsEarliest {
	typ := PreviewOptionsEarliestTypeStr

	return PreviewOptionsEarliest{
		Str:  &str,
		Type: typ,
	}
}

func CreatePreviewOptionsEarliestNumber(number float64) PreviewOptionsEarliest {
	typ := PreviewOptionsEarliestTypeNumber

	return PreviewOptionsEarliest{
		Number: &number,
		Type:   typ,
	}
}

func (u *PreviewOptionsEarliest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PreviewOptionsEarliestTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PreviewOptionsEarliestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PreviewOptionsEarliest", string(data))
}

func (u PreviewOptionsEarliest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type PreviewOptionsEarliest: all fields are null")
}

type PreviewOptionsLatestType string

const (
	PreviewOptionsLatestTypeStr    PreviewOptionsLatestType = "str"
	PreviewOptionsLatestTypeNumber PreviewOptionsLatestType = "number"
)

type PreviewOptionsLatest struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type PreviewOptionsLatestType
}

func CreatePreviewOptionsLatestStr(str string) PreviewOptionsLatest {
	typ := PreviewOptionsLatestTypeStr

	return PreviewOptionsLatest{
		Str:  &str,
		Type: typ,
	}
}

func CreatePreviewOptionsLatestNumber(number float64) PreviewOptionsLatest {
	typ := PreviewOptionsLatestTypeNumber

	return PreviewOptionsLatest{
		Number: &number,
		Type:   typ,
	}
}

func (u *PreviewOptionsLatest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PreviewOptionsLatestTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PreviewOptionsLatestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PreviewOptionsLatest", string(data))
}

func (u PreviewOptionsLatest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type PreviewOptionsLatest: all fields are null")
}

type PreviewOptions struct {
	Earliest *PreviewOptionsEarliest `json:"earliest,omitempty"`
	Latest   *PreviewOptionsLatest   `json:"latest,omitempty"`
}

func (o *PreviewOptions) GetEarliest() *PreviewOptionsEarliest {
	if o == nil {
		return nil
	}
	return o.Earliest
}

func (o *PreviewOptions) GetLatest() *PreviewOptionsLatest {
	if o == nil {
		return nil
	}
	return o.Latest
}
