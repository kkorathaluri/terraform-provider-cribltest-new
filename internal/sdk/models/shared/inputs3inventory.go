// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type InputS3InventoryType string

const (
	InputS3InventoryTypeS3Inventory InputS3InventoryType = "s3_inventory"
)

func (e InputS3InventoryType) ToPointer() *InputS3InventoryType {
	return &e
}
func (e *InputS3InventoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "s3_inventory":
		*e = InputS3InventoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3InventoryType: %v", v)
	}
}

type InputS3InventoryConnections struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputS3InventoryConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputS3InventoryConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputS3InventoryMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputS3InventoryMode string

const (
	InputS3InventoryModeSmart  InputS3InventoryMode = "smart"
	InputS3InventoryModeAlways InputS3InventoryMode = "always"
)

func (e InputS3InventoryMode) ToPointer() *InputS3InventoryMode {
	return &e
}
func (e *InputS3InventoryMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputS3InventoryMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3InventoryMode: %v", v)
	}
}

// InputS3InventoryCompression - Codec to use to compress the persisted data
type InputS3InventoryCompression string

const (
	InputS3InventoryCompressionNone InputS3InventoryCompression = "none"
	InputS3InventoryCompressionGzip InputS3InventoryCompression = "gzip"
)

func (e InputS3InventoryCompression) ToPointer() *InputS3InventoryCompression {
	return &e
}
func (e *InputS3InventoryCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputS3InventoryCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3InventoryCompression: %v", v)
	}
}

type InputS3InventoryPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputS3InventoryMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputS3InventoryCompression `default:"none" json:"compress"`
}

func (i InputS3InventoryPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputS3InventoryPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputS3InventoryPq) GetMode() *InputS3InventoryMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputS3InventoryPq) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputS3InventoryPq) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputS3InventoryPq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputS3InventoryPq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputS3InventoryPq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputS3InventoryPq) GetCompress() *InputS3InventoryCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

// InputS3InventoryAuthenticationMethod - AWS authentication method. Choose Auto to use IAM roles.
type InputS3InventoryAuthenticationMethod string

const (
	InputS3InventoryAuthenticationMethodAuto   InputS3InventoryAuthenticationMethod = "auto"
	InputS3InventoryAuthenticationMethodManual InputS3InventoryAuthenticationMethod = "manual"
	InputS3InventoryAuthenticationMethodSecret InputS3InventoryAuthenticationMethod = "secret"
)

func (e InputS3InventoryAuthenticationMethod) ToPointer() *InputS3InventoryAuthenticationMethod {
	return &e
}
func (e *InputS3InventoryAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "manual":
		fallthrough
	case "secret":
		*e = InputS3InventoryAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3InventoryAuthenticationMethod: %v", v)
	}
}

// InputS3InventorySignatureVersion - Signature version to use for signing S3 requests
type InputS3InventorySignatureVersion string

const (
	InputS3InventorySignatureVersionV2 InputS3InventorySignatureVersion = "v2"
	InputS3InventorySignatureVersionV4 InputS3InventorySignatureVersion = "v4"
)

func (e InputS3InventorySignatureVersion) ToPointer() *InputS3InventorySignatureVersion {
	return &e
}
func (e *InputS3InventorySignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = InputS3InventorySignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputS3InventorySignatureVersion: %v", v)
	}
}

type InputS3InventoryPreprocess struct {
	Disabled *bool `default:"true" json:"disabled"`
	// Command to feed the data through (via stdin) and process its output (stdout)
	Command *string `json:"command,omitempty"`
	// Arguments to be added to the custom command
	Args []string `json:"args,omitempty"`
}

func (i InputS3InventoryPreprocess) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputS3InventoryPreprocess) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputS3InventoryPreprocess) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputS3InventoryPreprocess) GetCommand() *string {
	if o == nil {
		return nil
	}
	return o.Command
}

func (o *InputS3InventoryPreprocess) GetArgs() []string {
	if o == nil {
		return nil
	}
	return o.Args
}

type InputS3InventoryMetadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputS3InventoryMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputS3InventoryMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputS3InventoryCheckpointing struct {
	// Resume processing files after an interruption
	Enabled *bool `default:"false" json:"enabled"`
	// If checkpointing is enabled, the number of times to retry processing when a processing error occurs. If skip file on error is enabled, this setting is ignored.
	Retries *float64 `default:"5" json:"retries"`
}

func (i InputS3InventoryCheckpointing) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputS3InventoryCheckpointing) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputS3InventoryCheckpointing) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *InputS3InventoryCheckpointing) GetRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.Retries
}

type InputS3Inventory struct {
	// Unique ID for this input
	ID       *string              `json:"id,omitempty"`
	Type     InputS3InventoryType `json:"type"`
	Disabled *bool                `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputS3InventoryConnections `json:"connections,omitempty"`
	Pq          *InputS3InventoryPq           `json:"pq,omitempty"`
	// The name, URL, or ARN of the SQS queue to read notifications from. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. Example: 'https://host:port/myQueueName'. Value must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can be evaluated only at init time. Example referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
	QueueName string `json:"queueName"`
	// Regex matching file names to download and process. Defaults to: .*
	FileFilter *string `default:"/.*/" json:"fileFilter"`
	// SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
	AwsAccountID *string `json:"awsAccountId,omitempty"`
	// AWS authentication method. Choose Auto to use IAM roles.
	AwsAuthenticationMethod *InputS3InventoryAuthenticationMethod `default:"auto" json:"awsAuthenticationMethod"`
	AwsSecretKey            *string                               `json:"awsSecretKey,omitempty"`
	// AWS Region where the S3 bucket and SQS queue are located. Required, unless the Queue entry is a URL or ARN that includes a Region.
	Region *string `json:"region,omitempty"`
	// S3 service endpoint. If empty, defaults to the AWS Region-specific endpoint. Otherwise, it must point to S3-compatible endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Signature version to use for signing S3 requests
	SignatureVersion *InputS3InventorySignatureVersion `default:"v4" json:"signatureVersion"`
	// Reuse connections between requests, which can improve performance
	ReuseConnections *bool `default:"true" json:"reuseConnections"`
	// Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
	RejectUnauthorized *bool `default:"true" json:"rejectUnauthorized"`
	// A list of event-breaking rulesets that will be applied, in order, to the input data stream
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
	StaleChannelFlushMs *float64 `default:"10000" json:"staleChannelFlushMs"`
	// The maximum number of messages SQS should return in a poll request. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10.
	MaxMessages *float64 `default:"1" json:"maxMessages"`
	// After messages are retrieved by a ReceiveMessage request, @{product} will hide them from subsequent retrieve requests for at least this duration. You can set this as high as 43200 sec. (12 hours).
	VisibilityTimeout *float64 `default:"600" json:"visibilityTimeout"`
	// How many receiver processes to run. The higher the number, the better the throughput - at the expense of CPU overhead.
	NumReceivers *float64 `default:"1" json:"numReceivers"`
	// Socket inactivity timeout (in seconds). Increase this value if timeouts occur due to backpressure.
	SocketTimeout *float64 `default:"300" json:"socketTimeout"`
	// Skip files that trigger a processing error. Disabled by default, which allows retries after processing errors.
	SkipOnError *bool `default:"false" json:"skipOnError"`
	// Use Assume Role credentials to access S3
	EnableAssumeRole *bool `default:"true" json:"enableAssumeRole"`
	// Amazon Resource Name (ARN) of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID to use when assuming role
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
	DurationSeconds *float64 `default:"3600" json:"durationSeconds"`
	// Use Assume Role credentials when accessing SQS
	EnableSQSAssumeRole *bool                       `default:"false" json:"enableSQSAssumeRole"`
	Preprocess          *InputS3InventoryPreprocess `json:"preprocess,omitempty"`
	// Fields to add to events from this input
	Metadata []InputS3InventoryMetadata `json:"metadata,omitempty"`
	// Maximum file size for each Parquet chunk
	ParquetChunkSizeMB *float64 `default:"5" json:"parquetChunkSizeMB"`
	// The maximum time allowed for downloading a Parquet chunk. Processing will stop if a chunk cannot be downloaded within the time specified.
	ParquetChunkDownloadTimeout *float64                       `default:"600" json:"parquetChunkDownloadTimeout"`
	Checkpointing               *InputS3InventoryCheckpointing `json:"checkpointing,omitempty"`
	// How long to wait for events before trying polling again. The lower the number the higher the AWS bill. The higher the number the longer it will take for the source to react to configuration changes and system restarts.
	PollTimeout *float64 `default:"10" json:"pollTimeout"`
	// Filename suffix of the manifest checksum file. If a filename matching this suffix is received        in the queue, the matching manifest file will be downloaded and validated against its value. Defaults to "checksum"
	ChecksumSuffix *string `default:"checksum" json:"checksumSuffix"`
	// Maximum download size (KB) of each manifest or checksum file. Manifest files larger than this size will not be read.        Defaults to 4096.
	MaxManifestSizeKB *int64 `default:"4096" json:"maxManifestSizeKB"`
	// If set to Yes, each inventory file in the manifest will be validated against its checksum. Defaults to false
	ValidateInventoryFiles *bool   `default:"false" json:"validateInventoryFiles"`
	Description            *string `json:"description,omitempty"`
	AwsAPIKey              *string `json:"awsApiKey,omitempty"`
	// Select or create a stored secret that references your access key and secret key
	AwsSecret *string `json:"awsSecret,omitempty"`
}

func (i InputS3Inventory) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputS3Inventory) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputS3Inventory) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputS3Inventory) GetType() InputS3InventoryType {
	if o == nil {
		return InputS3InventoryType("")
	}
	return o.Type
}

func (o *InputS3Inventory) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputS3Inventory) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputS3Inventory) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputS3Inventory) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputS3Inventory) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputS3Inventory) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputS3Inventory) GetConnections() []InputS3InventoryConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputS3Inventory) GetPq() *InputS3InventoryPq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputS3Inventory) GetQueueName() string {
	if o == nil {
		return ""
	}
	return o.QueueName
}

func (o *InputS3Inventory) GetFileFilter() *string {
	if o == nil {
		return nil
	}
	return o.FileFilter
}

func (o *InputS3Inventory) GetAwsAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountID
}

func (o *InputS3Inventory) GetAwsAuthenticationMethod() *InputS3InventoryAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AwsAuthenticationMethod
}

func (o *InputS3Inventory) GetAwsSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretKey
}

func (o *InputS3Inventory) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *InputS3Inventory) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *InputS3Inventory) GetSignatureVersion() *InputS3InventorySignatureVersion {
	if o == nil {
		return nil
	}
	return o.SignatureVersion
}

func (o *InputS3Inventory) GetReuseConnections() *bool {
	if o == nil {
		return nil
	}
	return o.ReuseConnections
}

func (o *InputS3Inventory) GetRejectUnauthorized() *bool {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputS3Inventory) GetBreakerRulesets() []string {
	if o == nil {
		return nil
	}
	return o.BreakerRulesets
}

func (o *InputS3Inventory) GetStaleChannelFlushMs() *float64 {
	if o == nil {
		return nil
	}
	return o.StaleChannelFlushMs
}

func (o *InputS3Inventory) GetMaxMessages() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxMessages
}

func (o *InputS3Inventory) GetVisibilityTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.VisibilityTimeout
}

func (o *InputS3Inventory) GetNumReceivers() *float64 {
	if o == nil {
		return nil
	}
	return o.NumReceivers
}

func (o *InputS3Inventory) GetSocketTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.SocketTimeout
}

func (o *InputS3Inventory) GetSkipOnError() *bool {
	if o == nil {
		return nil
	}
	return o.SkipOnError
}

func (o *InputS3Inventory) GetEnableAssumeRole() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAssumeRole
}

func (o *InputS3Inventory) GetAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleArn
}

func (o *InputS3Inventory) GetAssumeRoleExternalID() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleExternalID
}

func (o *InputS3Inventory) GetDurationSeconds() *float64 {
	if o == nil {
		return nil
	}
	return o.DurationSeconds
}

func (o *InputS3Inventory) GetEnableSQSAssumeRole() *bool {
	if o == nil {
		return nil
	}
	return o.EnableSQSAssumeRole
}

func (o *InputS3Inventory) GetPreprocess() *InputS3InventoryPreprocess {
	if o == nil {
		return nil
	}
	return o.Preprocess
}

func (o *InputS3Inventory) GetMetadata() []InputS3InventoryMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputS3Inventory) GetParquetChunkSizeMB() *float64 {
	if o == nil {
		return nil
	}
	return o.ParquetChunkSizeMB
}

func (o *InputS3Inventory) GetParquetChunkDownloadTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.ParquetChunkDownloadTimeout
}

func (o *InputS3Inventory) GetCheckpointing() *InputS3InventoryCheckpointing {
	if o == nil {
		return nil
	}
	return o.Checkpointing
}

func (o *InputS3Inventory) GetPollTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.PollTimeout
}

func (o *InputS3Inventory) GetChecksumSuffix() *string {
	if o == nil {
		return nil
	}
	return o.ChecksumSuffix
}

func (o *InputS3Inventory) GetMaxManifestSizeKB() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxManifestSizeKB
}

func (o *InputS3Inventory) GetValidateInventoryFiles() *bool {
	if o == nil {
		return nil
	}
	return o.ValidateInventoryFiles
}

func (o *InputS3Inventory) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *InputS3Inventory) GetAwsAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsAPIKey
}

func (o *InputS3Inventory) GetAwsSecret() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecret
}
