// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type LicenseInfoType string

const (
	LicenseInfoTypeProd  LicenseInfoType = "prod"
	LicenseInfoTypeTrial LicenseInfoType = "trial"
	LicenseInfoTypeFree  LicenseInfoType = "free"
)

func (e LicenseInfoType) ToPointer() *LicenseInfoType {
	return &e
}
func (e *LicenseInfoType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prod":
		fallthrough
	case "trial":
		fallthrough
	case "free":
		*e = LicenseInfoType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseInfoType: %v", v)
	}
}

type LicenseInfo struct {
	Email        *string         `json:"email,omitempty"`
	IsRegistered bool            `json:"isRegistered"`
	IsSplunkApp  *bool           `json:"isSplunkApp,omitempty"`
	Limits       LicenseLimits   `json:"limits"`
	Type         LicenseInfoType `json:"type"`
}

func (o *LicenseInfo) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *LicenseInfo) GetIsRegistered() bool {
	if o == nil {
		return false
	}
	return o.IsRegistered
}

func (o *LicenseInfo) GetIsSplunkApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsSplunkApp
}

func (o *LicenseInfo) GetLimits() LicenseLimits {
	if o == nil {
		return LicenseLimits{}
	}
	return o.Limits
}

func (o *LicenseInfo) GetType() LicenseInfoType {
	if o == nil {
		return LicenseInfoType("")
	}
	return o.Type
}
