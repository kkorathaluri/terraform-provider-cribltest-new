// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MetricType string

const (
	MetricTypeRawGBsSent                    MetricType = "Raw GBs Sent"
	MetricTypeRawGBsReceived                MetricType = "Raw GBs Received"
	MetricTypeS3GBsSent                     MetricType = "S3 GBs Sent"
	MetricTypeNetGBsSent                    MetricType = "Net GBs Sent"
	MetricTypeHybridWorkerGBsReceived       MetricType = "Hybrid Worker GBs Received"
	MetricTypeHybridWorkerGBsSent           MetricType = "Hybrid Worker GBs Sent"
	MetricTypeCloudWorkerGroupNetDataIngest MetricType = "Cloud Worker Group Net Data Ingest"
	MetricTypeCloudWorkerGroupNetDataEgress MetricType = "Cloud Worker Group Net Data Egress"
	MetricTypeSearchTotalCompute            MetricType = "Search Total Compute"
	MetricTypeCriblLakeStorageTotalUsage    MetricType = "Cribl Lake Storage - Total Usage"
	MetricTypeCriblLakeStorageCustomerData  MetricType = "Cribl Lake Storage - Customer Data"
	MetricTypeCriblLakeStorageInternalData  MetricType = "Cribl Lake Storage - Internal Data"
	MetricTypeEdgeNodeGBsIngress            MetricType = "Edge Node GBs Ingress"
	MetricTypeEdgeNodeGBsEgress             MetricType = "Edge Node GBs Egress"
	MetricTypeConnectedStreamGBsIn          MetricType = "Connected Stream GBs In"
	MetricTypeConnectedStreamGBsOut         MetricType = "Connected Stream GBs Out"
	MetricTypeConnectedEdgeGBsIn            MetricType = "Connected Edge GBs In"
	MetricTypeConnectedEdgeGBsOut           MetricType = "Connected Edge GBs Out"
)

func (e MetricType) ToPointer() *MetricType {
	return &e
}
func (e *MetricType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Raw GBs Sent":
		fallthrough
	case "Raw GBs Received":
		fallthrough
	case "S3 GBs Sent":
		fallthrough
	case "Net GBs Sent":
		fallthrough
	case "Hybrid Worker GBs Received":
		fallthrough
	case "Hybrid Worker GBs Sent":
		fallthrough
	case "Cloud Worker Group Net Data Ingest":
		fallthrough
	case "Cloud Worker Group Net Data Egress":
		fallthrough
	case "Search Total Compute":
		fallthrough
	case "Cribl Lake Storage - Total Usage":
		fallthrough
	case "Cribl Lake Storage - Customer Data":
		fallthrough
	case "Cribl Lake Storage - Internal Data":
		fallthrough
	case "Edge Node GBs Ingress":
		fallthrough
	case "Edge Node GBs Egress":
		fallthrough
	case "Connected Stream GBs In":
		fallthrough
	case "Connected Stream GBs Out":
		fallthrough
	case "Connected Edge GBs In":
		fallthrough
	case "Connected Edge GBs Out":
		*e = MetricType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MetricType: %v", v)
	}
}
