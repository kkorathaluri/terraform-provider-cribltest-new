// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type OutputTcpjsonType string

const (
	OutputTcpjsonTypeTcpjson OutputTcpjsonType = "tcpjson"
)

func (e OutputTcpjsonType) ToPointer() *OutputTcpjsonType {
	return &e
}
func (e *OutputTcpjsonType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcpjson":
		*e = OutputTcpjsonType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputTcpjsonType: %v", v)
	}
}

// OutputTcpjsonCompression - Codec to use to compress the data before sending
type OutputTcpjsonCompression string

const (
	OutputTcpjsonCompressionNone OutputTcpjsonCompression = "none"
	OutputTcpjsonCompressionGzip OutputTcpjsonCompression = "gzip"
)

func (e OutputTcpjsonCompression) ToPointer() *OutputTcpjsonCompression {
	return &e
}
func (e *OutputTcpjsonCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputTcpjsonCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputTcpjsonCompression: %v", v)
	}
}

// OutputTcpjsonMinimumTLSVersion - Minimum TLS version to use when connecting
type OutputTcpjsonMinimumTLSVersion string

const (
	OutputTcpjsonMinimumTLSVersionTlSv1  OutputTcpjsonMinimumTLSVersion = "TLSv1"
	OutputTcpjsonMinimumTLSVersionTlSv11 OutputTcpjsonMinimumTLSVersion = "TLSv1.1"
	OutputTcpjsonMinimumTLSVersionTlSv12 OutputTcpjsonMinimumTLSVersion = "TLSv1.2"
	OutputTcpjsonMinimumTLSVersionTlSv13 OutputTcpjsonMinimumTLSVersion = "TLSv1.3"
)

func (e OutputTcpjsonMinimumTLSVersion) ToPointer() *OutputTcpjsonMinimumTLSVersion {
	return &e
}
func (e *OutputTcpjsonMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputTcpjsonMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputTcpjsonMinimumTLSVersion: %v", v)
	}
}

// OutputTcpjsonMaximumTLSVersion - Maximum TLS version to use when connecting
type OutputTcpjsonMaximumTLSVersion string

const (
	OutputTcpjsonMaximumTLSVersionTlSv1  OutputTcpjsonMaximumTLSVersion = "TLSv1"
	OutputTcpjsonMaximumTLSVersionTlSv11 OutputTcpjsonMaximumTLSVersion = "TLSv1.1"
	OutputTcpjsonMaximumTLSVersionTlSv12 OutputTcpjsonMaximumTLSVersion = "TLSv1.2"
	OutputTcpjsonMaximumTLSVersionTlSv13 OutputTcpjsonMaximumTLSVersion = "TLSv1.3"
)

func (e OutputTcpjsonMaximumTLSVersion) ToPointer() *OutputTcpjsonMaximumTLSVersion {
	return &e
}
func (e *OutputTcpjsonMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputTcpjsonMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputTcpjsonMaximumTLSVersion: %v", v)
	}
}

type OutputTcpjsonTLSSettingsClientSide struct {
	Disabled *bool `default:"true" json:"disabled"`
	// Reject certs that are not authorized by a CA in the CA certificate path, or by another
	//                     trusted CA (e.g., the system's CA). Defaults to Yes. Overrides the toggle from Advanced Settings, when also present.
	RejectUnauthorized *bool `default:"true" json:"rejectUnauthorized"`
	// Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
	Servername *string `json:"servername,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string `json:"certificateName,omitempty"`
	// Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Minimum TLS version to use when connecting
	MinVersion *OutputTcpjsonMinimumTLSVersion `json:"minVersion,omitempty"`
	// Maximum TLS version to use when connecting
	MaxVersion *OutputTcpjsonMaximumTLSVersion `json:"maxVersion,omitempty"`
}

func (o OutputTcpjsonTLSSettingsClientSide) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputTcpjsonTLSSettingsClientSide) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputTcpjsonTLSSettingsClientSide) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *OutputTcpjsonTLSSettingsClientSide) GetRejectUnauthorized() *bool {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *OutputTcpjsonTLSSettingsClientSide) GetServername() *string {
	if o == nil {
		return nil
	}
	return o.Servername
}

func (o *OutputTcpjsonTLSSettingsClientSide) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *OutputTcpjsonTLSSettingsClientSide) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *OutputTcpjsonTLSSettingsClientSide) GetPrivKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.PrivKeyPath
}

func (o *OutputTcpjsonTLSSettingsClientSide) GetCertPath() *string {
	if o == nil {
		return nil
	}
	return o.CertPath
}

func (o *OutputTcpjsonTLSSettingsClientSide) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *OutputTcpjsonTLSSettingsClientSide) GetMinVersion() *OutputTcpjsonMinimumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *OutputTcpjsonTLSSettingsClientSide) GetMaxVersion() *OutputTcpjsonMaximumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MaxVersion
}

// OutputTcpjsonBackpressureBehavior - Whether to block, drop, or queue events when all receivers are exerting backpressure.
type OutputTcpjsonBackpressureBehavior string

const (
	OutputTcpjsonBackpressureBehaviorBlock OutputTcpjsonBackpressureBehavior = "block"
	OutputTcpjsonBackpressureBehaviorDrop  OutputTcpjsonBackpressureBehavior = "drop"
	OutputTcpjsonBackpressureBehaviorQueue OutputTcpjsonBackpressureBehavior = "queue"
)

func (e OutputTcpjsonBackpressureBehavior) ToPointer() *OutputTcpjsonBackpressureBehavior {
	return &e
}
func (e *OutputTcpjsonBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		fallthrough
	case "queue":
		*e = OutputTcpjsonBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputTcpjsonBackpressureBehavior: %v", v)
	}
}

// OutputTcpjsonAuthenticationMethod - Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
type OutputTcpjsonAuthenticationMethod string

const (
	OutputTcpjsonAuthenticationMethodManual OutputTcpjsonAuthenticationMethod = "manual"
	OutputTcpjsonAuthenticationMethodSecret OutputTcpjsonAuthenticationMethod = "secret"
)

func (e OutputTcpjsonAuthenticationMethod) ToPointer() *OutputTcpjsonAuthenticationMethod {
	return &e
}
func (e *OutputTcpjsonAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "secret":
		*e = OutputTcpjsonAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputTcpjsonAuthenticationMethod: %v", v)
	}
}

// OutputTcpjsonTLS - Whether to inherit TLS configs from group setting or disable TLS.
type OutputTcpjsonTLS string

const (
	OutputTcpjsonTLSInherit OutputTcpjsonTLS = "inherit"
	OutputTcpjsonTLSOff     OutputTcpjsonTLS = "off"
)

func (e OutputTcpjsonTLS) ToPointer() *OutputTcpjsonTLS {
	return &e
}
func (e *OutputTcpjsonTLS) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inherit":
		fallthrough
	case "off":
		*e = OutputTcpjsonTLS(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputTcpjsonTLS: %v", v)
	}
}

type OutputTcpjsonHosts struct {
	// The hostname of the receiver.
	Host string `json:"host"`
	// The port to connect to on the provided host.
	Port float64 `json:"port"`
	// Whether to inherit TLS configs from group setting or disable TLS.
	TLS *OutputTcpjsonTLS `default:"inherit" json:"tls"`
	// Servername to use if establishing a TLS connection. If not specified, defaults to connection host (iff not an IP); otherwise, to the global TLS settings.
	Servername *string `json:"servername,omitempty"`
	// Assign a weight (>0) to each endpoint to indicate its traffic-handling capability
	Weight *float64 `default:"1" json:"weight"`
}

func (o OutputTcpjsonHosts) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputTcpjsonHosts) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputTcpjsonHosts) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *OutputTcpjsonHosts) GetPort() float64 {
	if o == nil {
		return 0.0
	}
	return o.Port
}

func (o *OutputTcpjsonHosts) GetTLS() *OutputTcpjsonTLS {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *OutputTcpjsonHosts) GetServername() *string {
	if o == nil {
		return nil
	}
	return o.Servername
}

func (o *OutputTcpjsonHosts) GetWeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Weight
}

// OutputTcpjsonPqCompressCompression - Codec to use to compress the persisted data.
type OutputTcpjsonPqCompressCompression string

const (
	OutputTcpjsonPqCompressCompressionNone OutputTcpjsonPqCompressCompression = "none"
	OutputTcpjsonPqCompressCompressionGzip OutputTcpjsonPqCompressCompression = "gzip"
)

func (e OutputTcpjsonPqCompressCompression) ToPointer() *OutputTcpjsonPqCompressCompression {
	return &e
}
func (e *OutputTcpjsonPqCompressCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputTcpjsonPqCompressCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputTcpjsonPqCompressCompression: %v", v)
	}
}

// OutputTcpjsonQueueFullBehavior - Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputTcpjsonQueueFullBehavior string

const (
	OutputTcpjsonQueueFullBehaviorBlock OutputTcpjsonQueueFullBehavior = "block"
	OutputTcpjsonQueueFullBehaviorDrop  OutputTcpjsonQueueFullBehavior = "drop"
)

func (e OutputTcpjsonQueueFullBehavior) ToPointer() *OutputTcpjsonQueueFullBehavior {
	return &e
}
func (e *OutputTcpjsonQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputTcpjsonQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputTcpjsonQueueFullBehavior: %v", v)
	}
}

// OutputTcpjsonMode - In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem.
type OutputTcpjsonMode string

const (
	OutputTcpjsonModeError        OutputTcpjsonMode = "error"
	OutputTcpjsonModeBackpressure OutputTcpjsonMode = "backpressure"
	OutputTcpjsonModeAlways       OutputTcpjsonMode = "always"
)

func (e OutputTcpjsonMode) ToPointer() *OutputTcpjsonMode {
	return &e
}
func (e *OutputTcpjsonMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "backpressure":
		fallthrough
	case "always":
		*e = OutputTcpjsonMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputTcpjsonMode: %v", v)
	}
}

type OutputTcpjsonPqControls struct {
}

type OutputTcpjson struct {
	// Unique ID for this output
	ID   string            `json:"id"`
	Type OutputTcpjsonType `json:"type"`
	// Pipeline to process data before sending out to this output
	Pipeline *string `json:"pipeline,omitempty"`
	// Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
	SystemFields []string `json:"systemFields,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Use load-balanced destinations
	LoadBalanced *bool `default:"true" json:"loadBalanced"`
	// Codec to use to compress the data before sending
	Compression *OutputTcpjsonCompression `default:"gzip" json:"compression"`
	// Use to troubleshoot issues with sending data
	LogFailedRequests *bool `default:"false" json:"logFailedRequests"`
	// Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
	ThrottleRatePerSec *string                             `default:"0" json:"throttleRatePerSec"`
	TLS                *OutputTcpjsonTLSSettingsClientSide `json:"tls,omitempty"`
	// Amount of time (milliseconds) to wait for the connection to establish before retrying
	ConnectionTimeout *float64 `default:"10000" json:"connectionTimeout"`
	// Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead
	WriteTimeout *float64 `default:"60000" json:"writeTimeout"`
	// The number of minutes before the internally generated authentication token expires, valid values between 1 and 60
	TokenTTLMinutes *float64 `default:"60" json:"tokenTTLMinutes"`
	// Upon connection, send a header-like record containing the auth token and other metadata.This record will not contain an actual event – only subsequent records will.
	SendHeader *bool `default:"true" json:"sendHeader"`
	// Whether to block, drop, or queue events when all receivers are exerting backpressure.
	OnBackpressure *OutputTcpjsonBackpressureBehavior `default:"block" json:"onBackpressure"`
	// Select Manual to enter an auth token directly, or select Secret to use a text secret to authenticate
	AuthType    *OutputTcpjsonAuthenticationMethod `default:"manual" json:"authType"`
	Description *string                            `json:"description,omitempty"`
	// The hostname of the receiver
	Host *string `json:"host,omitempty"`
	// The port to connect to on the provided host
	Port *float64 `json:"port,omitempty"`
	// Exclude all IPs of the current host from the list of any resolved hostnames.
	ExcludeSelf *bool `default:"false" json:"excludeSelf"`
	// Set of hosts to load-balance data to.
	Hosts []OutputTcpjsonHosts `json:"hosts,omitempty"`
	// Re-resolve any hostnames every this many seconds and pick up destinations from A records.
	DNSResolvePeriodSec *float64 `default:"600" json:"dnsResolvePeriodSec"`
	// How far back in time to keep traffic stats for load balancing purposes.
	LoadBalanceStatsPeriodSec *float64 `default:"300" json:"loadBalanceStatsPeriodSec"`
	// Maximum number of concurrent connections (per worker process). A random set of IPs will be picked on every DNS resolution period. Use 0 for unlimited.
	MaxConcurrentSenders *float64 `default:"0" json:"maxConcurrentSenders"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	PqMaxFileSize *string `default:"1 MB" json:"pqMaxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `default:"5GB" json:"pqMaxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `default:"\\$CRIBL_HOME/state/queues" json:"pqPath"`
	// Codec to use to compress the persisted data.
	PqCompress *OutputTcpjsonPqCompressCompression `default:"none" json:"pqCompress"`
	// Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputTcpjsonQueueFullBehavior `default:"block" json:"pqOnBackpressure"`
	// In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem.
	PqMode     *OutputTcpjsonMode       `default:"error" json:"pqMode"`
	PqControls *OutputTcpjsonPqControls `json:"pqControls,omitempty"`
	// Optional authentication token to include as part of the connection header
	AuthToken *string `default:"" json:"authToken"`
	// Select or create a stored text secret
	TextSecret *string `json:"textSecret,omitempty"`
}

func (o OutputTcpjson) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputTcpjson) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *OutputTcpjson) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OutputTcpjson) GetType() OutputTcpjsonType {
	if o == nil {
		return OutputTcpjsonType("")
	}
	return o.Type
}

func (o *OutputTcpjson) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *OutputTcpjson) GetSystemFields() []string {
	if o == nil {
		return nil
	}
	return o.SystemFields
}

func (o *OutputTcpjson) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *OutputTcpjson) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *OutputTcpjson) GetLoadBalanced() *bool {
	if o == nil {
		return nil
	}
	return o.LoadBalanced
}

func (o *OutputTcpjson) GetCompression() *OutputTcpjsonCompression {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *OutputTcpjson) GetLogFailedRequests() *bool {
	if o == nil {
		return nil
	}
	return o.LogFailedRequests
}

func (o *OutputTcpjson) GetThrottleRatePerSec() *string {
	if o == nil {
		return nil
	}
	return o.ThrottleRatePerSec
}

func (o *OutputTcpjson) GetTLS() *OutputTcpjsonTLSSettingsClientSide {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *OutputTcpjson) GetConnectionTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.ConnectionTimeout
}

func (o *OutputTcpjson) GetWriteTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.WriteTimeout
}

func (o *OutputTcpjson) GetTokenTTLMinutes() *float64 {
	if o == nil {
		return nil
	}
	return o.TokenTTLMinutes
}

func (o *OutputTcpjson) GetSendHeader() *bool {
	if o == nil {
		return nil
	}
	return o.SendHeader
}

func (o *OutputTcpjson) GetOnBackpressure() *OutputTcpjsonBackpressureBehavior {
	if o == nil {
		return nil
	}
	return o.OnBackpressure
}

func (o *OutputTcpjson) GetAuthType() *OutputTcpjsonAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *OutputTcpjson) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *OutputTcpjson) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *OutputTcpjson) GetPort() *float64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *OutputTcpjson) GetExcludeSelf() *bool {
	if o == nil {
		return nil
	}
	return o.ExcludeSelf
}

func (o *OutputTcpjson) GetHosts() []OutputTcpjsonHosts {
	if o == nil {
		return nil
	}
	return o.Hosts
}

func (o *OutputTcpjson) GetDNSResolvePeriodSec() *float64 {
	if o == nil {
		return nil
	}
	return o.DNSResolvePeriodSec
}

func (o *OutputTcpjson) GetLoadBalanceStatsPeriodSec() *float64 {
	if o == nil {
		return nil
	}
	return o.LoadBalanceStatsPeriodSec
}

func (o *OutputTcpjson) GetMaxConcurrentSenders() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxConcurrentSenders
}

func (o *OutputTcpjson) GetPqMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.PqMaxFileSize
}

func (o *OutputTcpjson) GetPqMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.PqMaxSize
}

func (o *OutputTcpjson) GetPqPath() *string {
	if o == nil {
		return nil
	}
	return o.PqPath
}

func (o *OutputTcpjson) GetPqCompress() *OutputTcpjsonPqCompressCompression {
	if o == nil {
		return nil
	}
	return o.PqCompress
}

func (o *OutputTcpjson) GetPqOnBackpressure() *OutputTcpjsonQueueFullBehavior {
	if o == nil {
		return nil
	}
	return o.PqOnBackpressure
}

func (o *OutputTcpjson) GetPqMode() *OutputTcpjsonMode {
	if o == nil {
		return nil
	}
	return o.PqMode
}

func (o *OutputTcpjson) GetPqControls() *OutputTcpjsonPqControls {
	if o == nil {
		return nil
	}
	return o.PqControls
}

func (o *OutputTcpjson) GetAuthToken() *string {
	if o == nil {
		return nil
	}
	return o.AuthToken
}

func (o *OutputTcpjson) GetTextSecret() *string {
	if o == nil {
		return nil
	}
	return o.TextSecret
}
