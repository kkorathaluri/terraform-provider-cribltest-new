// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type OutputRouterType string

const (
	OutputRouterTypeRouter OutputRouterType = "router"
)

func (e OutputRouterType) ToPointer() *OutputRouterType {
	return &e
}
func (e *OutputRouterType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "router":
		*e = OutputRouterType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputRouterType: %v", v)
	}
}

type OutputRouterRules struct {
	// JavaScript expression to select events to send to output
	Filter string `json:"filter"`
	// Output to send matching events to
	Output string `json:"output"`
	// Description of this rule's purpose
	Description *string `json:"description,omitempty"`
	// Flag to control whether to stop the event from being checked against other rules
	Final *bool `default:"true" json:"final"`
}

func (o OutputRouterRules) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputRouterRules) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputRouterRules) GetFilter() string {
	if o == nil {
		return ""
	}
	return o.Filter
}

func (o *OutputRouterRules) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

func (o *OutputRouterRules) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *OutputRouterRules) GetFinal() *bool {
	if o == nil {
		return nil
	}
	return o.Final
}

type OutputRouter struct {
	// Unique ID for this output
	ID   *string          `json:"id,omitempty"`
	Type OutputRouterType `json:"type"`
	// Pipeline to process data before sending out to this output
	Pipeline *string `json:"pipeline,omitempty"`
	// Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
	SystemFields []string `json:"systemFields,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Event routing rules
	Rules       []OutputRouterRules `json:"rules"`
	Description *string             `json:"description,omitempty"`
}

func (o *OutputRouter) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OutputRouter) GetType() OutputRouterType {
	if o == nil {
		return OutputRouterType("")
	}
	return o.Type
}

func (o *OutputRouter) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *OutputRouter) GetSystemFields() []string {
	if o == nil {
		return nil
	}
	return o.SystemFields
}

func (o *OutputRouter) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *OutputRouter) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *OutputRouter) GetRules() []OutputRouterRules {
	if o == nil {
		return []OutputRouterRules{}
	}
	return o.Rules
}

func (o *OutputRouter) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}
