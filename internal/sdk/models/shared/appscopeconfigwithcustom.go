// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Cribl struct {
	Authtoken               *string            `json:"authtoken,omitempty"`
	Enable                  *bool              `json:"enable,omitempty"`
	Transport               *AppscopeTransport `json:"transport,omitempty"`
	UseScopeSourceTransport *bool              `json:"useScopeSourceTransport,omitempty"`
}

func (o *Cribl) GetAuthtoken() *string {
	if o == nil {
		return nil
	}
	return o.Authtoken
}

func (o *Cribl) GetEnable() *bool {
	if o == nil {
		return nil
	}
	return o.Enable
}

func (o *Cribl) GetTransport() *AppscopeTransport {
	if o == nil {
		return nil
	}
	return o.Transport
}

func (o *Cribl) GetUseScopeSourceTransport() *bool {
	if o == nil {
		return nil
	}
	return o.UseScopeSourceTransport
}

type AppscopeConfigWithCustomFormat struct {
	Enhancefs      bool    `json:"enhancefs"`
	Maxeventpersec float64 `json:"maxeventpersec"`
}

func (o *AppscopeConfigWithCustomFormat) GetEnhancefs() bool {
	if o == nil {
		return false
	}
	return o.Enhancefs
}

func (o *AppscopeConfigWithCustomFormat) GetMaxeventpersec() float64 {
	if o == nil {
		return 0.0
	}
	return o.Maxeventpersec
}

type AppscopeConfigWithCustomType string

const (
	AppscopeConfigWithCustomTypeNdjson AppscopeConfigWithCustomType = "ndjson"
)

func (e AppscopeConfigWithCustomType) ToPointer() *AppscopeConfigWithCustomType {
	return &e
}
func (e *AppscopeConfigWithCustomType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ndjson":
		*e = AppscopeConfigWithCustomType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigWithCustomType: %v", v)
	}
}

type AppscopeConfigWithCustomWatch struct {
	Allowbinary *bool   `json:"allowbinary,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	Field       *string `json:"field,omitempty"`
	Headers     *string `json:"headers,omitempty"`
	Name        *string `json:"name,omitempty"`
	Type        string  `json:"type"`
	Value       *string `json:"value,omitempty"`
}

func (o *AppscopeConfigWithCustomWatch) GetAllowbinary() *bool {
	if o == nil {
		return nil
	}
	return o.Allowbinary
}

func (o *AppscopeConfigWithCustomWatch) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *AppscopeConfigWithCustomWatch) GetField() *string {
	if o == nil {
		return nil
	}
	return o.Field
}

func (o *AppscopeConfigWithCustomWatch) GetHeaders() *string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *AppscopeConfigWithCustomWatch) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AppscopeConfigWithCustomWatch) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *AppscopeConfigWithCustomWatch) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type AppscopeConfigWithCustomEvent struct {
	Enable    bool                            `json:"enable"`
	Format    AppscopeConfigWithCustomFormat  `json:"format"`
	Transport AppscopeTransport               `json:"transport"`
	Type      AppscopeConfigWithCustomType    `json:"type"`
	Watch     []AppscopeConfigWithCustomWatch `json:"watch"`
}

func (o *AppscopeConfigWithCustomEvent) GetEnable() bool {
	if o == nil {
		return false
	}
	return o.Enable
}

func (o *AppscopeConfigWithCustomEvent) GetFormat() AppscopeConfigWithCustomFormat {
	if o == nil {
		return AppscopeConfigWithCustomFormat{}
	}
	return o.Format
}

func (o *AppscopeConfigWithCustomEvent) GetTransport() AppscopeTransport {
	if o == nil {
		return AppscopeTransport{}
	}
	return o.Transport
}

func (o *AppscopeConfigWithCustomEvent) GetType() AppscopeConfigWithCustomType {
	if o == nil {
		return AppscopeConfigWithCustomType("")
	}
	return o.Type
}

func (o *AppscopeConfigWithCustomEvent) GetWatch() []AppscopeConfigWithCustomWatch {
	if o == nil {
		return []AppscopeConfigWithCustomWatch{}
	}
	return o.Watch
}

type AppscopeConfigWithCustomLevel string

const (
	AppscopeConfigWithCustomLevelError   AppscopeConfigWithCustomLevel = "error"
	AppscopeConfigWithCustomLevelDebug   AppscopeConfigWithCustomLevel = "debug"
	AppscopeConfigWithCustomLevelInfo    AppscopeConfigWithCustomLevel = "info"
	AppscopeConfigWithCustomLevelWarning AppscopeConfigWithCustomLevel = "warning"
	AppscopeConfigWithCustomLevelNone    AppscopeConfigWithCustomLevel = "none"
)

func (e AppscopeConfigWithCustomLevel) ToPointer() *AppscopeConfigWithCustomLevel {
	return &e
}
func (e *AppscopeConfigWithCustomLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "debug":
		fallthrough
	case "info":
		fallthrough
	case "warning":
		fallthrough
	case "none":
		*e = AppscopeConfigWithCustomLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppscopeConfigWithCustomLevel: %v", v)
	}
}

type AppscopeConfigWithCustomLog struct {
	Level     *AppscopeConfigWithCustomLevel `json:"level,omitempty"`
	Transport *AppscopeTransport             `json:"transport,omitempty"`
}

func (o *AppscopeConfigWithCustomLog) GetLevel() *AppscopeConfigWithCustomLevel {
	if o == nil {
		return nil
	}
	return o.Level
}

func (o *AppscopeConfigWithCustomLog) GetTransport() *AppscopeTransport {
	if o == nil {
		return nil
	}
	return o.Transport
}

type AppscopeConfigWithCustomLibscope struct {
	Commanddir    *string                      `json:"commanddir,omitempty"`
	Configevent   *bool                        `json:"configevent,omitempty"`
	Log           *AppscopeConfigWithCustomLog `json:"log,omitempty"`
	Summaryperiod *float64                     `json:"summaryperiod,omitempty"`
}

func (o *AppscopeConfigWithCustomLibscope) GetCommanddir() *string {
	if o == nil {
		return nil
	}
	return o.Commanddir
}

func (o *AppscopeConfigWithCustomLibscope) GetConfigevent() *bool {
	if o == nil {
		return nil
	}
	return o.Configevent
}

func (o *AppscopeConfigWithCustomLibscope) GetLog() *AppscopeConfigWithCustomLog {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *AppscopeConfigWithCustomLibscope) GetSummaryperiod() *float64 {
	if o == nil {
		return nil
	}
	return o.Summaryperiod
}

type AppscopeConfigWithCustomMetricFormat struct {
	Statsdmaxlen *float64 `json:"statsdmaxlen,omitempty"`
	Statsdprefix *string  `json:"statsdprefix,omitempty"`
	Type         *string  `json:"type,omitempty"`
	Verbosity    *float64 `json:"verbosity,omitempty"`
}

func (o *AppscopeConfigWithCustomMetricFormat) GetStatsdmaxlen() *float64 {
	if o == nil {
		return nil
	}
	return o.Statsdmaxlen
}

func (o *AppscopeConfigWithCustomMetricFormat) GetStatsdprefix() *string {
	if o == nil {
		return nil
	}
	return o.Statsdprefix
}

func (o *AppscopeConfigWithCustomMetricFormat) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AppscopeConfigWithCustomMetricFormat) GetVerbosity() *float64 {
	if o == nil {
		return nil
	}
	return o.Verbosity
}

type AppscopeConfigWithCustomMetric struct {
	Enable    bool                                 `json:"enable"`
	Format    AppscopeConfigWithCustomMetricFormat `json:"format"`
	Transport AppscopeTransport                    `json:"transport"`
	Watch     []string                             `json:"watch"`
}

func (o *AppscopeConfigWithCustomMetric) GetEnable() bool {
	if o == nil {
		return false
	}
	return o.Enable
}

func (o *AppscopeConfigWithCustomMetric) GetFormat() AppscopeConfigWithCustomMetricFormat {
	if o == nil {
		return AppscopeConfigWithCustomMetricFormat{}
	}
	return o.Format
}

func (o *AppscopeConfigWithCustomMetric) GetTransport() AppscopeTransport {
	if o == nil {
		return AppscopeTransport{}
	}
	return o.Transport
}

func (o *AppscopeConfigWithCustomMetric) GetWatch() []string {
	if o == nil {
		return []string{}
	}
	return o.Watch
}

type AppscopeConfigWithCustomPayload struct {
	Dir    string `json:"dir"`
	Enable bool   `json:"enable"`
}

func (o *AppscopeConfigWithCustomPayload) GetDir() string {
	if o == nil {
		return ""
	}
	return o.Dir
}

func (o *AppscopeConfigWithCustomPayload) GetEnable() bool {
	if o == nil {
		return false
	}
	return o.Enable
}

type AppscopeConfigWithCustomProtocol struct {
	Binary  bool    `json:"binary"`
	Detect  bool    `json:"detect"`
	Len     float64 `json:"len"`
	Name    string  `json:"name"`
	Payload bool    `json:"payload"`
	Regex   string  `json:"regex"`
}

func (o *AppscopeConfigWithCustomProtocol) GetBinary() bool {
	if o == nil {
		return false
	}
	return o.Binary
}

func (o *AppscopeConfigWithCustomProtocol) GetDetect() bool {
	if o == nil {
		return false
	}
	return o.Detect
}

func (o *AppscopeConfigWithCustomProtocol) GetLen() float64 {
	if o == nil {
		return 0.0
	}
	return o.Len
}

func (o *AppscopeConfigWithCustomProtocol) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AppscopeConfigWithCustomProtocol) GetPayload() bool {
	if o == nil {
		return false
	}
	return o.Payload
}

func (o *AppscopeConfigWithCustomProtocol) GetRegex() string {
	if o == nil {
		return ""
	}
	return o.Regex
}

type AppscopeConfigWithCustomTags struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (o *AppscopeConfigWithCustomTags) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *AppscopeConfigWithCustomTags) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type AppscopeConfigWithCustom struct {
	Cribl    *Cribl                             `json:"cribl,omitempty"`
	Custom   []AppscopeCustom                   `json:"custom,omitempty"`
	Event    *AppscopeConfigWithCustomEvent     `json:"event,omitempty"`
	Libscope *AppscopeConfigWithCustomLibscope  `json:"libscope,omitempty"`
	Metric   *AppscopeConfigWithCustomMetric    `json:"metric,omitempty"`
	Payload  *AppscopeConfigWithCustomPayload   `json:"payload,omitempty"`
	Protocol []AppscopeConfigWithCustomProtocol `json:"protocol,omitempty"`
	Tags     []AppscopeConfigWithCustomTags     `json:"tags,omitempty"`
}

func (o *AppscopeConfigWithCustom) GetCribl() *Cribl {
	if o == nil {
		return nil
	}
	return o.Cribl
}

func (o *AppscopeConfigWithCustom) GetCustom() []AppscopeCustom {
	if o == nil {
		return nil
	}
	return o.Custom
}

func (o *AppscopeConfigWithCustom) GetEvent() *AppscopeConfigWithCustomEvent {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *AppscopeConfigWithCustom) GetLibscope() *AppscopeConfigWithCustomLibscope {
	if o == nil {
		return nil
	}
	return o.Libscope
}

func (o *AppscopeConfigWithCustom) GetMetric() *AppscopeConfigWithCustomMetric {
	if o == nil {
		return nil
	}
	return o.Metric
}

func (o *AppscopeConfigWithCustom) GetPayload() *AppscopeConfigWithCustomPayload {
	if o == nil {
		return nil
	}
	return o.Payload
}

func (o *AppscopeConfigWithCustom) GetProtocol() []AppscopeConfigWithCustomProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *AppscopeConfigWithCustom) GetTags() []AppscopeConfigWithCustomTags {
	if o == nil {
		return nil
	}
	return o.Tags
}
