// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type DatatypePreviewInput2Type string

const (
	DatatypePreviewInput2TypeRawData DatatypePreviewInput2Type = "rawData"
)

func (e DatatypePreviewInput2Type) ToPointer() *DatatypePreviewInput2Type {
	return &e
}
func (e *DatatypePreviewInput2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rawData":
		*e = DatatypePreviewInput2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatatypePreviewInput2Type: %v", v)
	}
}

type DatatypePreviewInput2 struct {
	RawData string                    `json:"rawData"`
	Type    DatatypePreviewInput2Type `json:"type"`
}

func (o *DatatypePreviewInput2) GetRawData() string {
	if o == nil {
		return ""
	}
	return o.RawData
}

func (o *DatatypePreviewInput2) GetType() DatatypePreviewInput2Type {
	if o == nil {
		return DatatypePreviewInput2Type("")
	}
	return o.Type
}

type DatatypePreviewInputType string

const (
	DatatypePreviewInputTypeDataset DatatypePreviewInputType = "dataset"
)

func (e DatatypePreviewInputType) ToPointer() *DatatypePreviewInputType {
	return &e
}
func (e *DatatypePreviewInputType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dataset":
		*e = DatatypePreviewInputType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DatatypePreviewInputType: %v", v)
	}
}

type DatatypePreviewInput1 struct {
	Dataset string                   `json:"dataset"`
	Type    DatatypePreviewInputType `json:"type"`
}

func (o *DatatypePreviewInput1) GetDataset() string {
	if o == nil {
		return ""
	}
	return o.Dataset
}

func (o *DatatypePreviewInput1) GetType() DatatypePreviewInputType {
	if o == nil {
		return DatatypePreviewInputType("")
	}
	return o.Type
}

type DatatypePreviewInputUnionType string

const (
	DatatypePreviewInputUnionTypeDatatypePreviewInput1 DatatypePreviewInputUnionType = "DatatypePreviewInput_1"
	DatatypePreviewInputUnionTypeDatatypePreviewInput2 DatatypePreviewInputUnionType = "DatatypePreviewInput_2"
)

type DatatypePreviewInput struct {
	DatatypePreviewInput1 *DatatypePreviewInput1 `queryParam:"inline"`
	DatatypePreviewInput2 *DatatypePreviewInput2 `queryParam:"inline"`

	Type DatatypePreviewInputUnionType
}

func CreateDatatypePreviewInputDatatypePreviewInput1(datatypePreviewInput1 DatatypePreviewInput1) DatatypePreviewInput {
	typ := DatatypePreviewInputUnionTypeDatatypePreviewInput1

	return DatatypePreviewInput{
		DatatypePreviewInput1: &datatypePreviewInput1,
		Type:                  typ,
	}
}

func CreateDatatypePreviewInputDatatypePreviewInput2(datatypePreviewInput2 DatatypePreviewInput2) DatatypePreviewInput {
	typ := DatatypePreviewInputUnionTypeDatatypePreviewInput2

	return DatatypePreviewInput{
		DatatypePreviewInput2: &datatypePreviewInput2,
		Type:                  typ,
	}
}

func (u *DatatypePreviewInput) UnmarshalJSON(data []byte) error {

	var datatypePreviewInput1 DatatypePreviewInput1 = DatatypePreviewInput1{}
	if err := utils.UnmarshalJSON(data, &datatypePreviewInput1, "", true, true); err == nil {
		u.DatatypePreviewInput1 = &datatypePreviewInput1
		u.Type = DatatypePreviewInputUnionTypeDatatypePreviewInput1
		return nil
	}

	var datatypePreviewInput2 DatatypePreviewInput2 = DatatypePreviewInput2{}
	if err := utils.UnmarshalJSON(data, &datatypePreviewInput2, "", true, true); err == nil {
		u.DatatypePreviewInput2 = &datatypePreviewInput2
		u.Type = DatatypePreviewInputUnionTypeDatatypePreviewInput2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DatatypePreviewInput", string(data))
}

func (u DatatypePreviewInput) MarshalJSON() ([]byte, error) {
	if u.DatatypePreviewInput1 != nil {
		return utils.MarshalJSON(u.DatatypePreviewInput1, "", true)
	}

	if u.DatatypePreviewInput2 != nil {
		return utils.MarshalJSON(u.DatatypePreviewInput2, "", true)
	}

	return nil, errors.New("could not marshal union type DatatypePreviewInput: all fields are null")
}
