// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type ElementsType string

const (
	ElementsTypeMarkdownDefault ElementsType = "markdown.default"
)

func (e ElementsType) ToPointer() *ElementsType {
	return &e
}
func (e *ElementsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "markdown.default":
		*e = ElementsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ElementsType: %v", v)
	}
}

type Variant string

const (
	VariantMarkdown Variant = "markdown"
)

func (e Variant) ToPointer() *Variant {
	return &e
}
func (e *Variant) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "markdown":
		*e = Variant(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Variant: %v", v)
	}
}

type Two struct {
	Description *string         `json:"description,omitempty"`
	Empty       *bool           `json:"empty,omitempty"`
	HidePanel   *bool           `json:"hidePanel,omitempty"`
	ID          string          `json:"id"`
	Index       *float64        `json:"index,omitempty"`
	Layout      DashboardLayout `json:"layout"`
	Title       *string         `json:"title,omitempty"`
	Type        ElementsType    `json:"type"`
	Value       *string         `json:"value,omitempty"`
	Variant     Variant         `json:"variant"`
}

func (o *Two) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Two) GetEmpty() *bool {
	if o == nil {
		return nil
	}
	return o.Empty
}

func (o *Two) GetHidePanel() *bool {
	if o == nil {
		return nil
	}
	return o.HidePanel
}

func (o *Two) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Two) GetIndex() *float64 {
	if o == nil {
		return nil
	}
	return o.Index
}

func (o *Two) GetLayout() DashboardLayout {
	if o == nil {
		return DashboardLayout{}
	}
	return o.Layout
}

func (o *Two) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Two) GetType() ElementsType {
	if o == nil {
		return ElementsType("")
	}
	return o.Type
}

func (o *Two) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Two) GetVariant() Variant {
	if o == nil {
		return Variant("")
	}
	return o.Variant
}

type Elements1 struct {
	Description     *string                  `json:"description,omitempty"`
	Empty           *bool                    `json:"empty,omitempty"`
	HidePanel       *bool                    `json:"hidePanel,omitempty"`
	HorizontalChart *bool                    `json:"horizontalChart,omitempty"`
	ID              string                   `json:"id"`
	Index           *float64                 `json:"index,omitempty"`
	InputID         *string                  `json:"inputId,omitempty"`
	Layout          DashboardLayout          `json:"layout"`
	Search          SearchQuery              `json:"search"`
	Title           *string                  `json:"title,omitempty"`
	Type            DashboardElementType     `json:"type"`
	Value           map[string]any           `json:"value,omitempty"`
	Variant         *DashboardElementVariant `json:"variant,omitempty"`
}

func (o *Elements1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Elements1) GetEmpty() *bool {
	if o == nil {
		return nil
	}
	return o.Empty
}

func (o *Elements1) GetHidePanel() *bool {
	if o == nil {
		return nil
	}
	return o.HidePanel
}

func (o *Elements1) GetHorizontalChart() *bool {
	if o == nil {
		return nil
	}
	return o.HorizontalChart
}

func (o *Elements1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Elements1) GetIndex() *float64 {
	if o == nil {
		return nil
	}
	return o.Index
}

func (o *Elements1) GetInputID() *string {
	if o == nil {
		return nil
	}
	return o.InputID
}

func (o *Elements1) GetLayout() DashboardLayout {
	if o == nil {
		return DashboardLayout{}
	}
	return o.Layout
}

func (o *Elements1) GetSearch() SearchQuery {
	if o == nil {
		return SearchQuery{}
	}
	return o.Search
}

func (o *Elements1) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

func (o *Elements1) GetType() DashboardElementType {
	if o == nil {
		return DashboardElementType("")
	}
	return o.Type
}

func (o *Elements1) GetValue() map[string]any {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Elements1) GetVariant() *DashboardElementVariant {
	if o == nil {
		return nil
	}
	return o.Variant
}

type ElementsUnionType string

const (
	ElementsUnionTypeElements1 ElementsUnionType = "elements_1"
	ElementsUnionTypeTwo       ElementsUnionType = "2"
)

type Elements struct {
	Elements1 *Elements1 `queryParam:"inline"`
	Two       *Two       `queryParam:"inline"`

	Type ElementsUnionType
}

func CreateElementsElements1(elements1 Elements1) Elements {
	typ := ElementsUnionTypeElements1

	return Elements{
		Elements1: &elements1,
		Type:      typ,
	}
}

func CreateElementsTwo(two Two) Elements {
	typ := ElementsUnionTypeTwo

	return Elements{
		Two:  &two,
		Type: typ,
	}
}

func (u *Elements) UnmarshalJSON(data []byte) error {

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = ElementsUnionTypeTwo
		return nil
	}

	var elements1 Elements1 = Elements1{}
	if err := utils.UnmarshalJSON(data, &elements1, "", true, true); err == nil {
		u.Elements1 = &elements1
		u.Type = ElementsUnionTypeElements1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Elements", string(data))
}

func (u Elements) MarshalJSON() ([]byte, error) {
	if u.Elements1 != nil {
		return utils.MarshalJSON(u.Elements1, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type Elements: all fields are null")
}

type SearchDashboard struct {
	CacheTTLSeconds    *float64            `json:"cacheTTLSeconds,omitempty"`
	Category           *string             `json:"category,omitempty"`
	Created            float64             `json:"created"`
	CreatedBy          string              `json:"createdBy"`
	Description        *string             `json:"description,omitempty"`
	DisplayCreatedBy   *string             `json:"displayCreatedBy,omitempty"`
	DisplayModifiedBy  *string             `json:"displayModifiedBy,omitempty"`
	Elements           []Elements          `json:"elements"`
	ID                 string              `json:"id"`
	Modified           float64             `json:"modified"`
	ModifiedBy         *string             `json:"modifiedBy,omitempty"`
	Name               string              `json:"name"`
	PackID             *string             `json:"packId,omitempty"`
	RefreshRate        *float64            `json:"refreshRate,omitempty"`
	ResolvedDatasetIds []string            `json:"resolvedDatasetIds,omitempty"`
	Schedule           *SavedQuerySchedule `json:"schedule,omitempty"`
}

func (o *SearchDashboard) GetCacheTTLSeconds() *float64 {
	if o == nil {
		return nil
	}
	return o.CacheTTLSeconds
}

func (o *SearchDashboard) GetCategory() *string {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *SearchDashboard) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *SearchDashboard) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *SearchDashboard) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SearchDashboard) GetDisplayCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.DisplayCreatedBy
}

func (o *SearchDashboard) GetDisplayModifiedBy() *string {
	if o == nil {
		return nil
	}
	return o.DisplayModifiedBy
}

func (o *SearchDashboard) GetElements() []Elements {
	if o == nil {
		return []Elements{}
	}
	return o.Elements
}

func (o *SearchDashboard) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SearchDashboard) GetModified() float64 {
	if o == nil {
		return 0.0
	}
	return o.Modified
}

func (o *SearchDashboard) GetModifiedBy() *string {
	if o == nil {
		return nil
	}
	return o.ModifiedBy
}

func (o *SearchDashboard) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SearchDashboard) GetPackID() *string {
	if o == nil {
		return nil
	}
	return o.PackID
}

func (o *SearchDashboard) GetRefreshRate() *float64 {
	if o == nil {
		return nil
	}
	return o.RefreshRate
}

func (o *SearchDashboard) GetResolvedDatasetIds() []string {
	if o == nil {
		return nil
	}
	return o.ResolvedDatasetIds
}

func (o *SearchDashboard) GetSchedule() *SavedQuerySchedule {
	if o == nil {
		return nil
	}
	return o.Schedule
}
