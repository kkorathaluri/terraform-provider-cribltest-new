// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type JobType string

const (
	JobTypeCollection      JobType = "collection"
	JobTypeExecutor        JobType = "executor"
	JobTypeScheduledSearch JobType = "scheduledSearch"
)

func (e JobType) ToPointer() *JobType {
	return &e
}
func (e *JobType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		fallthrough
	case "executor":
		fallthrough
	case "scheduledSearch":
		*e = JobType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobType: %v", v)
	}
}

type SavedJobCollectionScheduleType string

const (
	SavedJobCollectionScheduleTypeCollection SavedJobCollectionScheduleType = "collection"
)

func (e SavedJobCollectionScheduleType) ToPointer() *SavedJobCollectionScheduleType {
	return &e
}
func (e *SavedJobCollectionScheduleType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		*e = SavedJobCollectionScheduleType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavedJobCollectionScheduleType: %v", v)
	}
}

// SavedJobCollectionLogLevel - Level at which to set task logging
type SavedJobCollectionLogLevel string

const (
	SavedJobCollectionLogLevelError SavedJobCollectionLogLevel = "error"
	SavedJobCollectionLogLevelWarn  SavedJobCollectionLogLevel = "warn"
	SavedJobCollectionLogLevelInfo  SavedJobCollectionLogLevel = "info"
	SavedJobCollectionLogLevelDebug SavedJobCollectionLogLevel = "debug"
	SavedJobCollectionLogLevelSilly SavedJobCollectionLogLevel = "silly"
)

func (e SavedJobCollectionLogLevel) ToPointer() *SavedJobCollectionLogLevel {
	return &e
}
func (e *SavedJobCollectionLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "silly":
		*e = SavedJobCollectionLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavedJobCollectionLogLevel: %v", v)
	}
}

type SavedJobCollectionTimeWarning struct {
}

type RunSettings struct {
	Type *SavedJobCollectionScheduleType `json:"type,omitempty"`
	// Reschedule tasks that failed with non-fatal errors
	RescheduleDroppedTasks *bool `default:"true" json:"rescheduleDroppedTasks"`
	// Maximum number of times a task can be rescheduled
	MaxTaskReschedule *float64 `default:"1" json:"maxTaskReschedule"`
	// Level at which to set task logging
	LogLevel *SavedJobCollectionLogLevel `default:"info" json:"logLevel"`
	// Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time.
	JobTimeout *string `default:"0" json:"jobTimeout"`
	// Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
	Mode          *string `default:"list" json:"mode"`
	TimeRangeType *string `default:"relative" json:"timeRangeType"`
	// Earliest time to collect data for the selected timezone
	Earliest *float64 `json:"earliest,omitempty"`
	// Latest time to collect data for the selected timezone
	Latest            *float64                       `json:"latest,omitempty"`
	TimestampTimezone any                            `json:"timestampTimezone,omitempty"`
	TimeWarning       *SavedJobCollectionTimeWarning `json:"timeWarning,omitempty"`
	// A filter for tokens in the provided collect path and/or the events being collected
	Expression *string `default:"true" json:"expression"`
	// Limits the bundle size for small tasks. For example,
	//
	//
	//
	//
	//
	//         if your lower bundle size is 1MB, you can bundle up to five 200KB files into one task.
	MinTaskSize *string `default:"1MB" json:"minTaskSize"`
	// Limits the bundle size for files above the lower task bundle size. For example, if your upper bundle size is 10MB,
	//
	//
	//
	//
	//
	//         you can bundle up to five 2MB files into one task. Files greater than this size will be assigned to individual tasks.
	MaxTaskSize *string `default:"10MB" json:"maxTaskSize"`
}

func (r RunSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RunSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RunSettings) GetType() *SavedJobCollectionScheduleType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RunSettings) GetRescheduleDroppedTasks() *bool {
	if o == nil {
		return nil
	}
	return o.RescheduleDroppedTasks
}

func (o *RunSettings) GetMaxTaskReschedule() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxTaskReschedule
}

func (o *RunSettings) GetLogLevel() *SavedJobCollectionLogLevel {
	if o == nil {
		return nil
	}
	return o.LogLevel
}

func (o *RunSettings) GetJobTimeout() *string {
	if o == nil {
		return nil
	}
	return o.JobTimeout
}

func (o *RunSettings) GetMode() *string {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *RunSettings) GetTimeRangeType() *string {
	if o == nil {
		return nil
	}
	return o.TimeRangeType
}

func (o *RunSettings) GetEarliest() *float64 {
	if o == nil {
		return nil
	}
	return o.Earliest
}

func (o *RunSettings) GetLatest() *float64 {
	if o == nil {
		return nil
	}
	return o.Latest
}

func (o *RunSettings) GetTimestampTimezone() any {
	if o == nil {
		return nil
	}
	return o.TimestampTimezone
}

func (o *RunSettings) GetTimeWarning() *SavedJobCollectionTimeWarning {
	if o == nil {
		return nil
	}
	return o.TimeWarning
}

func (o *RunSettings) GetExpression() *string {
	if o == nil {
		return nil
	}
	return o.Expression
}

func (o *RunSettings) GetMinTaskSize() *string {
	if o == nil {
		return nil
	}
	return o.MinTaskSize
}

func (o *RunSettings) GetMaxTaskSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxTaskSize
}

// Schedule - Configuration for a scheduled job
type Schedule struct {
	// Enable to configure scheduling for this Collector
	Enabled *bool `json:"enabled,omitempty"`
	// A cron schedule on which to run this job
	CronSchedule *string `default:"*/5 * * * *" json:"cronSchedule"`
	// The maximum number of instances of this scheduled job that may be running at any time
	MaxConcurrentRuns *float64 `default:"1" json:"maxConcurrentRuns"`
	// Skippable jobs can be delayed, up to their next run time, if the system is hitting concurrency limits
	Skippable    *bool        `default:"true" json:"skippable"`
	ResumeMissed any          `json:"resumeMissed,omitempty"`
	Run          *RunSettings `json:"run,omitempty"`
}

func (s Schedule) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Schedule) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Schedule) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *Schedule) GetCronSchedule() *string {
	if o == nil {
		return nil
	}
	return o.CronSchedule
}

func (o *Schedule) GetMaxConcurrentRuns() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxConcurrentRuns
}

func (o *Schedule) GetSkippable() *bool {
	if o == nil {
		return nil
	}
	return o.Skippable
}

func (o *Schedule) GetResumeMissed() any {
	if o == nil {
		return nil
	}
	return o.ResumeMissed
}

func (o *Schedule) GetRun() *RunSettings {
	if o == nil {
		return nil
	}
	return o.Run
}

type CollectorSpecificSettings struct {
}

type SavedJobCollectionCollector struct {
	// The type of collector to run
	Type string                    `json:"type"`
	Conf CollectorSpecificSettings `json:"conf"`
	// If set to Yes, the collector will delete any files that it collects (where applicable)
	Destructive *bool `default:"false" json:"destructive"`
	// Character encoding to use when parsing ingested data. When not set, @{product} will default to UTF-8 but may incorrectly interpret multi-byte characters.
	Encoding *string `json:"encoding,omitempty"`
}

func (s SavedJobCollectionCollector) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedJobCollectionCollector) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SavedJobCollectionCollector) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *SavedJobCollectionCollector) GetConf() CollectorSpecificSettings {
	if o == nil {
		return CollectorSpecificSettings{}
	}
	return o.Conf
}

func (o *SavedJobCollectionCollector) GetDestructive() *bool {
	if o == nil {
		return nil
	}
	return o.Destructive
}

func (o *SavedJobCollectionCollector) GetEncoding() *string {
	if o == nil {
		return nil
	}
	return o.Encoding
}

type SavedJobCollectionType string

const (
	SavedJobCollectionTypeCollection SavedJobCollectionType = "collection"
)

func (e SavedJobCollectionType) ToPointer() *SavedJobCollectionType {
	return &e
}
func (e *SavedJobCollectionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		*e = SavedJobCollectionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SavedJobCollectionType: %v", v)
	}
}

type SavedJobCollectionPreprocess struct {
	Disabled *bool `default:"true" json:"disabled"`
	// Command to feed the data through (via stdin) and process its output (stdout)
	Command *string `json:"command,omitempty"`
	// Arguments to be added to the custom command
	Args []string `json:"args,omitempty"`
}

func (s SavedJobCollectionPreprocess) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedJobCollectionPreprocess) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SavedJobCollectionPreprocess) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *SavedJobCollectionPreprocess) GetCommand() *string {
	if o == nil {
		return nil
	}
	return o.Command
}

func (o *SavedJobCollectionPreprocess) GetArgs() []string {
	if o == nil {
		return nil
	}
	return o.Args
}

type SavedJobCollectionMetadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *SavedJobCollectionMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SavedJobCollectionMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type SavedJobCollectionInput struct {
	Type *SavedJobCollectionType `default:"collection" json:"type"`
	// A list of event-breaking rulesets that will be applied, in order, to the input data stream
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// How long (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel before flushing the data stream out, as is, to the Pipelines
	StaleChannelFlushMs *float64 `default:"10000" json:"staleChannelFlushMs"`
	// Send events to normal routing and event processing. Disable to select a specific Pipeline/Destination combination.
	SendToRoutes *bool                         `default:"true" json:"sendToRoutes"`
	Preprocess   *SavedJobCollectionPreprocess `json:"preprocess,omitempty"`
	// Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
	ThrottleRatePerSec *string `default:"0" json:"throttleRatePerSec"`
	// Fields to add to events from this input
	Metadata []SavedJobCollectionMetadata `json:"metadata,omitempty"`
	// Pipeline to process results
	Pipeline *string `json:"pipeline,omitempty"`
	// Destination to send results to
	Output *string `json:"output,omitempty"`
}

func (s SavedJobCollectionInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedJobCollectionInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SavedJobCollectionInput) GetType() *SavedJobCollectionType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *SavedJobCollectionInput) GetBreakerRulesets() []string {
	if o == nil {
		return nil
	}
	return o.BreakerRulesets
}

func (o *SavedJobCollectionInput) GetStaleChannelFlushMs() *float64 {
	if o == nil {
		return nil
	}
	return o.StaleChannelFlushMs
}

func (o *SavedJobCollectionInput) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *SavedJobCollectionInput) GetPreprocess() *SavedJobCollectionPreprocess {
	if o == nil {
		return nil
	}
	return o.Preprocess
}

func (o *SavedJobCollectionInput) GetThrottleRatePerSec() *string {
	if o == nil {
		return nil
	}
	return o.ThrottleRatePerSec
}

func (o *SavedJobCollectionInput) GetMetadata() []SavedJobCollectionMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *SavedJobCollectionInput) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *SavedJobCollectionInput) GetOutput() *string {
	if o == nil {
		return nil
	}
	return o.Output
}

type SavedJobCollection struct {
	// Unique ID for this Job
	ID          *string `json:"id,omitempty"`
	Description *string `json:"description,omitempty"`
	Type        JobType `json:"type"`
	// Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
	TTL *string `default:"4h" json:"ttl"`
	// List of fields to remove from Discover results. Wildcards (for example, aws*) are allowed. This is useful when discovery returns sensitive fields that should not be exposed in the Jobs user interface.
	RemoveFields []string `json:"removeFields,omitempty"`
	// Resume the ad hoc job if a failure condition causes Stream to restart during job execution
	ResumeOnBoot *bool `default:"false" json:"resumeOnBoot"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Configuration for a scheduled job
	Schedule *Schedule `json:"schedule,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// If enabled, tasks are created and run by the same Worker Node
	WorkerAffinity *bool                       `default:"false" json:"workerAffinity"`
	Collector      SavedJobCollectionCollector `json:"collector"`
	Input          *SavedJobCollectionInput    `json:"input,omitempty"`
}

func (s SavedJobCollection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SavedJobCollection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *SavedJobCollection) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *SavedJobCollection) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *SavedJobCollection) GetType() JobType {
	if o == nil {
		return JobType("")
	}
	return o.Type
}

func (o *SavedJobCollection) GetTTL() *string {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *SavedJobCollection) GetRemoveFields() []string {
	if o == nil {
		return nil
	}
	return o.RemoveFields
}

func (o *SavedJobCollection) GetResumeOnBoot() *bool {
	if o == nil {
		return nil
	}
	return o.ResumeOnBoot
}

func (o *SavedJobCollection) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *SavedJobCollection) GetSchedule() *Schedule {
	if o == nil {
		return nil
	}
	return o.Schedule
}

func (o *SavedJobCollection) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *SavedJobCollection) GetWorkerAffinity() *bool {
	if o == nil {
		return nil
	}
	return o.WorkerAffinity
}

func (o *SavedJobCollection) GetCollector() SavedJobCollectionCollector {
	if o == nil {
		return SavedJobCollectionCollector{}
	}
	return o.Collector
}

func (o *SavedJobCollection) GetInput() *SavedJobCollectionInput {
	if o == nil {
		return nil
	}
	return o.Input
}
