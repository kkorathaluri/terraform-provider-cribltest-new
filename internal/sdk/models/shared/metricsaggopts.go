// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type MetricsAggOptsEarliestType string

const (
	MetricsAggOptsEarliestTypeStr    MetricsAggOptsEarliestType = "str"
	MetricsAggOptsEarliestTypeNumber MetricsAggOptsEarliestType = "number"
)

type MetricsAggOptsEarliest struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type MetricsAggOptsEarliestType
}

func CreateMetricsAggOptsEarliestStr(str string) MetricsAggOptsEarliest {
	typ := MetricsAggOptsEarliestTypeStr

	return MetricsAggOptsEarliest{
		Str:  &str,
		Type: typ,
	}
}

func CreateMetricsAggOptsEarliestNumber(number float64) MetricsAggOptsEarliest {
	typ := MetricsAggOptsEarliestTypeNumber

	return MetricsAggOptsEarliest{
		Number: &number,
		Type:   typ,
	}
}

func (u *MetricsAggOptsEarliest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MetricsAggOptsEarliestTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = MetricsAggOptsEarliestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MetricsAggOptsEarliest", string(data))
}

func (u MetricsAggOptsEarliest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type MetricsAggOptsEarliest: all fields are null")
}

type MetricsAggOptsLatestType string

const (
	MetricsAggOptsLatestTypeStr    MetricsAggOptsLatestType = "str"
	MetricsAggOptsLatestTypeNumber MetricsAggOptsLatestType = "number"
)

type MetricsAggOptsLatest struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type MetricsAggOptsLatestType
}

func CreateMetricsAggOptsLatestStr(str string) MetricsAggOptsLatest {
	typ := MetricsAggOptsLatestTypeStr

	return MetricsAggOptsLatest{
		Str:  &str,
		Type: typ,
	}
}

func CreateMetricsAggOptsLatestNumber(number float64) MetricsAggOptsLatest {
	typ := MetricsAggOptsLatestTypeNumber

	return MetricsAggOptsLatest{
		Number: &number,
		Type:   typ,
	}
}

func (u *MetricsAggOptsLatest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = MetricsAggOptsLatestTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = MetricsAggOptsLatestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MetricsAggOptsLatest", string(data))
}

func (u MetricsAggOptsLatest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type MetricsAggOptsLatest: all fields are null")
}

type MetricsAggOpts struct {
	Aggs         AggregationMgrOptions   `json:"aggs"`
	AlwaysBounds *bool                   `json:"alwaysBounds,omitempty"`
	Earliest     *MetricsAggOptsEarliest `json:"earliest,omitempty"`
	Latest       *MetricsAggOptsLatest   `json:"latest,omitempty"`
	Metrics      *MetricsStore           `json:"metrics,omitempty"`
	Where        *string                 `json:"where,omitempty"`
}

func (o *MetricsAggOpts) GetAggs() AggregationMgrOptions {
	if o == nil {
		return AggregationMgrOptions{}
	}
	return o.Aggs
}

func (o *MetricsAggOpts) GetAlwaysBounds() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysBounds
}

func (o *MetricsAggOpts) GetEarliest() *MetricsAggOptsEarliest {
	if o == nil {
		return nil
	}
	return o.Earliest
}

func (o *MetricsAggOpts) GetLatest() *MetricsAggOptsLatest {
	if o == nil {
		return nil
	}
	return o.Latest
}

func (o *MetricsAggOpts) GetMetrics() *MetricsStore {
	if o == nil {
		return nil
	}
	return o.Metrics
}

func (o *MetricsAggOpts) GetWhere() *string {
	if o == nil {
		return nil
	}
	return o.Where
}
