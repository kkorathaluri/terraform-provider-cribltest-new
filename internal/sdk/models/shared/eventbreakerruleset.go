// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type Library string

const (
	LibraryCustom      Library = "custom"
	LibraryCriblCustom Library = "cribl-custom"
)

func (e Library) ToPointer() *Library {
	return &e
}
func (e *Library) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		fallthrough
	case "cribl-custom":
		*e = Library(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Library: %v", v)
	}
}

type EventBreakerType string

const (
	EventBreakerTypeRegex         EventBreakerType = "regex"
	EventBreakerTypeJSON          EventBreakerType = "json"
	EventBreakerTypeJSONArray     EventBreakerType = "json_array"
	EventBreakerTypeHeader        EventBreakerType = "header"
	EventBreakerTypeTimestamp     EventBreakerType = "timestamp"
	EventBreakerTypeCsv           EventBreakerType = "csv"
	EventBreakerTypeAwsCloudtrail EventBreakerType = "aws_cloudtrail"
	EventBreakerTypeAwsVpcflow    EventBreakerType = "aws_vpcflow"
)

func (e EventBreakerType) ToPointer() *EventBreakerType {
	return &e
}
func (e *EventBreakerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "regex":
		fallthrough
	case "json":
		fallthrough
	case "json_array":
		fallthrough
	case "header":
		fallthrough
	case "timestamp":
		fallthrough
	case "csv":
		fallthrough
	case "aws_cloudtrail":
		fallthrough
	case "aws_vpcflow":
		*e = EventBreakerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventBreakerType: %v", v)
	}
}

type TimestampType string

const (
	TimestampTypeAuto    TimestampType = "auto"
	TimestampTypeFormat  TimestampType = "format"
	TimestampTypeCurrent TimestampType = "current"
)

func (e TimestampType) ToPointer() *TimestampType {
	return &e
}
func (e *TimestampType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "format":
		fallthrough
	case "current":
		*e = TimestampType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimestampType: %v", v)
	}
}

// EventBreakerRulesetTimestampFormat - Auto, manual format (strptime), or current time
type EventBreakerRulesetTimestampFormat struct {
	Type   *TimestampType `default:"auto" json:"type"`
	Length *float64       `default:"150" json:"length"`
	Format *string        `json:"format,omitempty"`
}

func (e EventBreakerRulesetTimestampFormat) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventBreakerRulesetTimestampFormat) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EventBreakerRulesetTimestampFormat) GetType() *TimestampType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EventBreakerRulesetTimestampFormat) GetLength() *float64 {
	if o == nil {
		return nil
	}
	return o.Length
}

func (o *EventBreakerRulesetTimestampFormat) GetFormat() *string {
	if o == nil {
		return nil
	}
	return o.Format
}

type Fields struct {
	Name *string `json:"name,omitempty"`
	// The JavaScript expression used to compute the field's value (can be constant)
	Value string `json:"value"`
}

func (o *Fields) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Fields) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type Rules struct {
	Name string `json:"name"`
	// The JavaScript filter expression used to match the data to apply the rule to
	Condition *string           `default:"true" json:"condition"`
	Type      *EventBreakerType `default:"regex" json:"type"`
	// The regex to match before attempting timestamp extraction. Use $ (end-of-string anchor) to prevent extraction.
	TimestampAnchorRegex *string `default:"/^/" json:"timestampAnchorRegex"`
	// Auto, manual format (strptime), or current time
	Timestamp EventBreakerRulesetTimestampFormat `json:"timestamp"`
	// Timezone to assign to timestamps without timezone info
	TimestampTimezone *string `default:"local" json:"timestampTimezone"`
	// The earliest timestamp value allowed relative to now. Example: -42years. Parsed values prior to this date will be set to current time.
	TimestampEarliest *string `default:"-420weeks" json:"timestampEarliest"`
	// The latest timestamp value allowed relative to now. Example: +42days. Parsed values after this date will be set to current time.
	TimestampLatest *string `default:"+1week" json:"timestampLatest"`
	// The maximum number of bytes in an event before it is flushed to the pipelines
	MaxEventBytes *float64 `default:"51200" json:"maxEventBytes"`
	// Key-value pairs to be added to each event
	Fields []Fields `json:"fields,omitempty"`
	// Disable this breaker rule (enabled by default)
	Disabled      *bool `default:"false" json:"disabled"`
	ParserEnabled *bool `default:"false" json:"parserEnabled"`
	// Enable to set an internal field on events indicating that the field in the data called _raw should be used. This can be useful for post processors that want to use that field for event._raw, instead of replacing it with the actual raw event.
	ShouldUseDataRaw *bool `default:"false" json:"shouldUseDataRaw"`
}

func (r Rules) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Rules) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Rules) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Rules) GetCondition() *string {
	if o == nil {
		return nil
	}
	return o.Condition
}

func (o *Rules) GetType() *EventBreakerType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Rules) GetTimestampAnchorRegex() *string {
	if o == nil {
		return nil
	}
	return o.TimestampAnchorRegex
}

func (o *Rules) GetTimestamp() EventBreakerRulesetTimestampFormat {
	if o == nil {
		return EventBreakerRulesetTimestampFormat{}
	}
	return o.Timestamp
}

func (o *Rules) GetTimestampTimezone() *string {
	if o == nil {
		return nil
	}
	return o.TimestampTimezone
}

func (o *Rules) GetTimestampEarliest() *string {
	if o == nil {
		return nil
	}
	return o.TimestampEarliest
}

func (o *Rules) GetTimestampLatest() *string {
	if o == nil {
		return nil
	}
	return o.TimestampLatest
}

func (o *Rules) GetMaxEventBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxEventBytes
}

func (o *Rules) GetFields() []Fields {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *Rules) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *Rules) GetParserEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ParserEnabled
}

func (o *Rules) GetShouldUseDataRaw() *bool {
	if o == nil {
		return nil
	}
	return o.ShouldUseDataRaw
}

type EventBreakerRuleset struct {
	ID          string   `json:"id"`
	Lib         *Library `default:"custom" json:"lib"`
	Description *string  `json:"description,omitempty"`
	Tags        *string  `json:"tags,omitempty"`
	// The  minimum number of characters in _raw to determine which rule to use
	MinRawLength *float64 `default:"256" json:"minRawLength"`
	// A list of rules that will be applied, in order, to the input data stream
	Rules []Rules `json:"rules,omitempty"`
}

func (e EventBreakerRuleset) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *EventBreakerRuleset) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *EventBreakerRuleset) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EventBreakerRuleset) GetLib() *Library {
	if o == nil {
		return nil
	}
	return o.Lib
}

func (o *EventBreakerRuleset) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *EventBreakerRuleset) GetTags() *string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *EventBreakerRuleset) GetMinRawLength() *float64 {
	if o == nil {
		return nil
	}
	return o.MinRawLength
}

func (o *EventBreakerRuleset) GetRules() []Rules {
	if o == nil {
		return nil
	}
	return o.Rules
}
