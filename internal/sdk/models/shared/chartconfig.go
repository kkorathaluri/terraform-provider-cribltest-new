// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type Axis struct {
	XAxis         *string  `json:"xAxis,omitempty"`
	YAxis         []string `json:"yAxis,omitempty"`
	YAxisExcluded []string `json:"yAxisExcluded,omitempty"`
}

func (o *Axis) GetXAxis() *string {
	if o == nil {
		return nil
	}
	return o.XAxis
}

func (o *Axis) GetYAxis() []string {
	if o == nil {
		return nil
	}
	return o.YAxis
}

func (o *Axis) GetYAxisExcluded() []string {
	if o == nil {
		return nil
	}
	return o.YAxisExcluded
}

type Thresholds struct {
	Color     string  `json:"color"`
	Threshold float64 `json:"threshold"`
}

func (o *Thresholds) GetColor() string {
	if o == nil {
		return ""
	}
	return o.Color
}

func (o *Thresholds) GetThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.Threshold
}

type ColorThresholds struct {
	Thresholds []Thresholds `json:"thresholds"`
}

func (o *ColorThresholds) GetThresholds() []Thresholds {
	if o == nil {
		return []Thresholds{}
	}
	return o.Thresholds
}

type PointScaleType string

const (
	PointScaleTypeStr    PointScaleType = "str"
	PointScaleTypeNumber PointScaleType = "number"
)

type PointScale struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type PointScaleType
}

func CreatePointScaleStr(str string) PointScale {
	typ := PointScaleTypeStr

	return PointScale{
		Str:  &str,
		Type: typ,
	}
}

func CreatePointScaleNumber(number float64) PointScale {
	typ := PointScaleTypeNumber

	return PointScale{
		Number: &number,
		Type:   typ,
	}
}

func (u *PointScale) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PointScaleTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PointScaleTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PointScale", string(data))
}

func (u PointScale) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type PointScale: all fields are null")
}

type CustomData struct {
	ConnectNulls              *string     `json:"connectNulls,omitempty"`
	DataFields                []string    `json:"dataFields,omitempty"`
	IsPointColor              *bool       `json:"isPointColor,omitempty"`
	LimitToTopN               *float64    `json:"limitToTopN,omitempty"`
	Lines                     *bool       `json:"lines,omitempty"`
	NameField                 *string     `json:"nameField,omitempty"`
	PointColorPalette         *float64    `json:"pointColorPalette,omitempty"`
	PointColorPaletteReversed *bool       `json:"pointColorPaletteReversed,omitempty"`
	PointScale                *PointScale `json:"pointScale,omitempty"`
	PointScaleDataField       *string     `json:"pointScaleDataField,omitempty"`
	SeriesCount               *float64    `json:"seriesCount,omitempty"`
	SplitBy                   *string     `json:"splitBy,omitempty"`
	Stack                     *bool       `json:"stack,omitempty"`
	SummarizeOthers           *bool       `json:"summarizeOthers,omitempty"`
	Trellis                   *bool       `json:"trellis,omitempty"`
}

func (o *CustomData) GetConnectNulls() *string {
	if o == nil {
		return nil
	}
	return o.ConnectNulls
}

func (o *CustomData) GetDataFields() []string {
	if o == nil {
		return nil
	}
	return o.DataFields
}

func (o *CustomData) GetIsPointColor() *bool {
	if o == nil {
		return nil
	}
	return o.IsPointColor
}

func (o *CustomData) GetLimitToTopN() *float64 {
	if o == nil {
		return nil
	}
	return o.LimitToTopN
}

func (o *CustomData) GetLines() *bool {
	if o == nil {
		return nil
	}
	return o.Lines
}

func (o *CustomData) GetNameField() *string {
	if o == nil {
		return nil
	}
	return o.NameField
}

func (o *CustomData) GetPointColorPalette() *float64 {
	if o == nil {
		return nil
	}
	return o.PointColorPalette
}

func (o *CustomData) GetPointColorPaletteReversed() *bool {
	if o == nil {
		return nil
	}
	return o.PointColorPaletteReversed
}

func (o *CustomData) GetPointScale() *PointScale {
	if o == nil {
		return nil
	}
	return o.PointScale
}

func (o *CustomData) GetPointScaleDataField() *string {
	if o == nil {
		return nil
	}
	return o.PointScaleDataField
}

func (o *CustomData) GetSeriesCount() *float64 {
	if o == nil {
		return nil
	}
	return o.SeriesCount
}

func (o *CustomData) GetSplitBy() *string {
	if o == nil {
		return nil
	}
	return o.SplitBy
}

func (o *CustomData) GetStack() *bool {
	if o == nil {
		return nil
	}
	return o.Stack
}

func (o *CustomData) GetSummarizeOthers() *bool {
	if o == nil {
		return nil
	}
	return o.SummarizeOthers
}

func (o *CustomData) GetTrellis() *bool {
	if o == nil {
		return nil
	}
	return o.Trellis
}

type Legend struct {
	Position *string `json:"position,omitempty"`
	Truncate *bool   `json:"truncate,omitempty"`
}

func (o *Legend) GetPosition() *string {
	if o == nil {
		return nil
	}
	return o.Position
}

func (o *Legend) GetTruncate() *bool {
	if o == nil {
		return nil
	}
	return o.Truncate
}

type ChartConfigPointScaleType string

const (
	ChartConfigPointScaleTypeStr    ChartConfigPointScaleType = "str"
	ChartConfigPointScaleTypeNumber ChartConfigPointScaleType = "number"
)

type ChartConfigPointScale struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type ChartConfigPointScaleType
}

func CreateChartConfigPointScaleStr(str string) ChartConfigPointScale {
	typ := ChartConfigPointScaleTypeStr

	return ChartConfigPointScale{
		Str:  &str,
		Type: typ,
	}
}

func CreateChartConfigPointScaleNumber(number float64) ChartConfigPointScale {
	typ := ChartConfigPointScaleTypeNumber

	return ChartConfigPointScale{
		Number: &number,
		Type:   typ,
	}
}

func (u *ChartConfigPointScale) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ChartConfigPointScaleTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ChartConfigPointScaleTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ChartConfigPointScale", string(data))
}

func (u ChartConfigPointScale) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type ChartConfigPointScale: all fields are null")
}

type MapDetails struct {
	LatitudeField  *string                `json:"latitudeField,omitempty"`
	LongitudeField *string                `json:"longitudeField,omitempty"`
	MapSourceID    *string                `json:"mapSourceID,omitempty"`
	MapType        *string                `json:"mapType,omitempty"`
	NameField      *string                `json:"nameField,omitempty"`
	PointScale     *ChartConfigPointScale `json:"pointScale,omitempty"`
	ValueField     *string                `json:"valueField,omitempty"`
}

func (o *MapDetails) GetLatitudeField() *string {
	if o == nil {
		return nil
	}
	return o.LatitudeField
}

func (o *MapDetails) GetLongitudeField() *string {
	if o == nil {
		return nil
	}
	return o.LongitudeField
}

func (o *MapDetails) GetMapSourceID() *string {
	if o == nil {
		return nil
	}
	return o.MapSourceID
}

func (o *MapDetails) GetMapType() *string {
	if o == nil {
		return nil
	}
	return o.MapType
}

func (o *MapDetails) GetNameField() *string {
	if o == nil {
		return nil
	}
	return o.NameField
}

func (o *MapDetails) GetPointScale() *ChartConfigPointScale {
	if o == nil {
		return nil
	}
	return o.PointScale
}

func (o *MapDetails) GetValueField() *string {
	if o == nil {
		return nil
	}
	return o.ValueField
}

type OnClickAction struct {
	Search                   *string `json:"search,omitempty"`
	SelectedDashboardID      *string `json:"selectedDashboardId,omitempty"`
	SelectedInputID          *string `json:"selectedInputId,omitempty"`
	SelectedTimerangeInputID *string `json:"selectedTimerangeInputId,omitempty"`
	Type                     *string `json:"type,omitempty"`
}

func (o *OnClickAction) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *OnClickAction) GetSelectedDashboardID() *string {
	if o == nil {
		return nil
	}
	return o.SelectedDashboardID
}

func (o *OnClickAction) GetSelectedInputID() *string {
	if o == nil {
		return nil
	}
	return o.SelectedInputID
}

func (o *OnClickAction) GetSelectedTimerangeInputID() *string {
	if o == nil {
		return nil
	}
	return o.SelectedTimerangeInputID
}

func (o *OnClickAction) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type XAxis struct {
	DataField        *string  `json:"dataField,omitempty"`
	Inverse          *bool    `json:"inverse,omitempty"`
	LabelInterval    *string  `json:"labelInterval,omitempty"`
	LabelOrientation *float64 `json:"labelOrientation,omitempty"`
	Name             *string  `json:"name,omitempty"`
	Offset           *float64 `json:"offset,omitempty"`
	Position         *string  `json:"position,omitempty"`
	Type             *string  `json:"type,omitempty"`
}

func (o *XAxis) GetDataField() *string {
	if o == nil {
		return nil
	}
	return o.DataField
}

func (o *XAxis) GetInverse() *bool {
	if o == nil {
		return nil
	}
	return o.Inverse
}

func (o *XAxis) GetLabelInterval() *string {
	if o == nil {
		return nil
	}
	return o.LabelInterval
}

func (o *XAxis) GetLabelOrientation() *float64 {
	if o == nil {
		return nil
	}
	return o.LabelOrientation
}

func (o *XAxis) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *XAxis) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *XAxis) GetPosition() *string {
	if o == nil {
		return nil
	}
	return o.Position
}

func (o *XAxis) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type YAxis struct {
	DataField []string `json:"dataField,omitempty"`
	Interval  *float64 `json:"interval,omitempty"`
	Max       *float64 `json:"max,omitempty"`
	Min       *float64 `json:"min,omitempty"`
	Position  *string  `json:"position,omitempty"`
	Scale     *string  `json:"scale,omitempty"`
	SplitLine *bool    `json:"splitLine,omitempty"`
	Type      *string  `json:"type,omitempty"`
}

func (o *YAxis) GetDataField() []string {
	if o == nil {
		return nil
	}
	return o.DataField
}

func (o *YAxis) GetInterval() *float64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *YAxis) GetMax() *float64 {
	if o == nil {
		return nil
	}
	return o.Max
}

func (o *YAxis) GetMin() *float64 {
	if o == nil {
		return nil
	}
	return o.Min
}

func (o *YAxis) GetPosition() *string {
	if o == nil {
		return nil
	}
	return o.Position
}

func (o *YAxis) GetScale() *string {
	if o == nil {
		return nil
	}
	return o.Scale
}

func (o *YAxis) GetSplitLine() *bool {
	if o == nil {
		return nil
	}
	return o.SplitLine
}

func (o *YAxis) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type ChartConfig struct {
	ApplyThreshold               *bool            `json:"applyThreshold,omitempty"`
	Axis                         *Axis            `json:"axis,omitempty"`
	Color                        *string          `json:"color,omitempty"`
	ColorPalette                 float64          `json:"colorPalette"`
	ColorPaletteReversed         *bool            `json:"colorPaletteReversed,omitempty"`
	ColorThresholds              *ColorThresholds `json:"colorThresholds,omitempty"`
	CustomData                   *CustomData      `json:"customData,omitempty"`
	Decimals                     *float64         `json:"decimals,omitempty"`
	Label                        *string          `json:"label,omitempty"`
	Legend                       *Legend          `json:"legend,omitempty"`
	MapDetails                   *MapDetails      `json:"mapDetails,omitempty"`
	OnClickAction                *OnClickAction   `json:"onClickAction,omitempty"`
	Prefix                       *string          `json:"prefix,omitempty"`
	Separator                    *bool            `json:"separator,omitempty"`
	Series                       []ChartSeries    `json:"series,omitempty"`
	ShouldApplyUserChartSettings *bool            `json:"shouldApplyUserChartSettings,omitempty"`
	Style                        *bool            `json:"style,omitempty"`
	Suffix                       *string          `json:"suffix,omitempty"`
	Type                         string           `json:"type"`
	XAxis                        *XAxis           `json:"xAxis,omitempty"`
	YAxis                        *YAxis           `json:"yAxis,omitempty"`
}

func (o *ChartConfig) GetApplyThreshold() *bool {
	if o == nil {
		return nil
	}
	return o.ApplyThreshold
}

func (o *ChartConfig) GetAxis() *Axis {
	if o == nil {
		return nil
	}
	return o.Axis
}

func (o *ChartConfig) GetColor() *string {
	if o == nil {
		return nil
	}
	return o.Color
}

func (o *ChartConfig) GetColorPalette() float64 {
	if o == nil {
		return 0.0
	}
	return o.ColorPalette
}

func (o *ChartConfig) GetColorPaletteReversed() *bool {
	if o == nil {
		return nil
	}
	return o.ColorPaletteReversed
}

func (o *ChartConfig) GetColorThresholds() *ColorThresholds {
	if o == nil {
		return nil
	}
	return o.ColorThresholds
}

func (o *ChartConfig) GetCustomData() *CustomData {
	if o == nil {
		return nil
	}
	return o.CustomData
}

func (o *ChartConfig) GetDecimals() *float64 {
	if o == nil {
		return nil
	}
	return o.Decimals
}

func (o *ChartConfig) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *ChartConfig) GetLegend() *Legend {
	if o == nil {
		return nil
	}
	return o.Legend
}

func (o *ChartConfig) GetMapDetails() *MapDetails {
	if o == nil {
		return nil
	}
	return o.MapDetails
}

func (o *ChartConfig) GetOnClickAction() *OnClickAction {
	if o == nil {
		return nil
	}
	return o.OnClickAction
}

func (o *ChartConfig) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *ChartConfig) GetSeparator() *bool {
	if o == nil {
		return nil
	}
	return o.Separator
}

func (o *ChartConfig) GetSeries() []ChartSeries {
	if o == nil {
		return nil
	}
	return o.Series
}

func (o *ChartConfig) GetShouldApplyUserChartSettings() *bool {
	if o == nil {
		return nil
	}
	return o.ShouldApplyUserChartSettings
}

func (o *ChartConfig) GetStyle() *bool {
	if o == nil {
		return nil
	}
	return o.Style
}

func (o *ChartConfig) GetSuffix() *string {
	if o == nil {
		return nil
	}
	return o.Suffix
}

func (o *ChartConfig) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ChartConfig) GetXAxis() *XAxis {
	if o == nil {
		return nil
	}
	return o.XAxis
}

func (o *ChartConfig) GetYAxis() *YAxis {
	if o == nil {
		return nil
	}
	return o.YAxis
}
