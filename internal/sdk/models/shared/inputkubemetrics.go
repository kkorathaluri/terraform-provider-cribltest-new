// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type InputKubeMetricsType string

const (
	InputKubeMetricsTypeKubeMetrics InputKubeMetricsType = "kube_metrics"
)

func (e InputKubeMetricsType) ToPointer() *InputKubeMetricsType {
	return &e
}
func (e *InputKubeMetricsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kube_metrics":
		*e = InputKubeMetricsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeMetricsType: %v", v)
	}
}

type InputKubeMetricsConnections struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputKubeMetricsConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputKubeMetricsConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputKubeMetricsMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputKubeMetricsMode string

const (
	InputKubeMetricsModeSmart  InputKubeMetricsMode = "smart"
	InputKubeMetricsModeAlways InputKubeMetricsMode = "always"
)

func (e InputKubeMetricsMode) ToPointer() *InputKubeMetricsMode {
	return &e
}
func (e *InputKubeMetricsMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputKubeMetricsMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeMetricsMode: %v", v)
	}
}

// InputKubeMetricsCompression - Codec to use to compress the persisted data
type InputKubeMetricsCompression string

const (
	InputKubeMetricsCompressionNone InputKubeMetricsCompression = "none"
	InputKubeMetricsCompressionGzip InputKubeMetricsCompression = "gzip"
)

func (e InputKubeMetricsCompression) ToPointer() *InputKubeMetricsCompression {
	return &e
}
func (e *InputKubeMetricsCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputKubeMetricsCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeMetricsCompression: %v", v)
	}
}

type InputKubeMetricsPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputKubeMetricsMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputKubeMetricsCompression `default:"none" json:"compress"`
}

func (i InputKubeMetricsPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputKubeMetricsPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputKubeMetricsPq) GetMode() *InputKubeMetricsMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputKubeMetricsPq) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputKubeMetricsPq) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputKubeMetricsPq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputKubeMetricsPq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputKubeMetricsPq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputKubeMetricsPq) GetCompress() *InputKubeMetricsCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

type InputKubeMetricsRules struct {
	// JavaScript expression applied to Kubernetes objects. Return 'true' to include it.
	Filter string `json:"filter"`
	// Optional description of this rule's purpose
	Description *string `json:"description,omitempty"`
}

func (o *InputKubeMetricsRules) GetFilter() string {
	if o == nil {
		return ""
	}
	return o.Filter
}

func (o *InputKubeMetricsRules) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type InputKubeMetricsMetadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputKubeMetricsMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputKubeMetricsMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputKubeMetricsDataCompressionFormat string

const (
	InputKubeMetricsDataCompressionFormatNone InputKubeMetricsDataCompressionFormat = "none"
	InputKubeMetricsDataCompressionFormatGzip InputKubeMetricsDataCompressionFormat = "gzip"
)

func (e InputKubeMetricsDataCompressionFormat) ToPointer() *InputKubeMetricsDataCompressionFormat {
	return &e
}
func (e *InputKubeMetricsDataCompressionFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputKubeMetricsDataCompressionFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputKubeMetricsDataCompressionFormat: %v", v)
	}
}

type InputKubeMetricsPersistence struct {
	// Spool metrics on disk for Cribl Search
	Enable *bool `default:"false" json:"enable"`
	// Time span for each file bucket
	TimeWindow *string `default:"10m" json:"timeWindow"`
	// Maximum disk space allowed to be consumed (examples: 420MB, 4GB). When limit is reached, older data will be deleted.
	MaxDataSize *string `default:"1GB" json:"maxDataSize"`
	// Maximum amount of time to retain data (examples: 2h, 4d). When limit is reached, older data will be deleted.
	MaxDataTime *string                                `default:"24h" json:"maxDataTime"`
	Compress    *InputKubeMetricsDataCompressionFormat `default:"gzip" json:"compress"`
	// Path to use to write metrics. Defaults to $CRIBL_HOME/state/<id>
	DestPath *string `default:"\\$CRIBL_HOME/state/kube_metrics" json:"destPath"`
}

func (i InputKubeMetricsPersistence) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputKubeMetricsPersistence) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputKubeMetricsPersistence) GetEnable() *bool {
	if o == nil {
		return nil
	}
	return o.Enable
}

func (o *InputKubeMetricsPersistence) GetTimeWindow() *string {
	if o == nil {
		return nil
	}
	return o.TimeWindow
}

func (o *InputKubeMetricsPersistence) GetMaxDataSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxDataSize
}

func (o *InputKubeMetricsPersistence) GetMaxDataTime() *string {
	if o == nil {
		return nil
	}
	return o.MaxDataTime
}

func (o *InputKubeMetricsPersistence) GetCompress() *InputKubeMetricsDataCompressionFormat {
	if o == nil {
		return nil
	}
	return o.Compress
}

func (o *InputKubeMetricsPersistence) GetDestPath() *string {
	if o == nil {
		return nil
	}
	return o.DestPath
}

type InputKubeMetrics struct {
	// Unique ID for this input
	ID       string               `json:"id"`
	Type     InputKubeMetricsType `json:"type"`
	Disabled *bool                `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputKubeMetricsConnections `json:"connections,omitempty"`
	Pq          *InputKubeMetricsPq           `json:"pq,omitempty"`
	// Time, in seconds, between consecutive metrics collections. Default is 15 secs.
	Interval *float64 `default:"15" json:"interval"`
	// Add rules to decide which Kubernetes objects to generate metrics for. Events are generated if no rules are given or of all the rules' expressions evaluate to true.
	Rules []InputKubeMetricsRules `json:"rules,omitempty"`
	// Fields to add to events from this input
	Metadata    []InputKubeMetricsMetadata   `json:"metadata,omitempty"`
	Persistence *InputKubeMetricsPersistence `json:"persistence,omitempty"`
	Description *string                      `json:"description,omitempty"`
}

func (i InputKubeMetrics) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputKubeMetrics) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputKubeMetrics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *InputKubeMetrics) GetType() InputKubeMetricsType {
	if o == nil {
		return InputKubeMetricsType("")
	}
	return o.Type
}

func (o *InputKubeMetrics) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputKubeMetrics) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputKubeMetrics) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputKubeMetrics) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputKubeMetrics) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputKubeMetrics) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputKubeMetrics) GetConnections() []InputKubeMetricsConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputKubeMetrics) GetPq() *InputKubeMetricsPq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputKubeMetrics) GetInterval() *float64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *InputKubeMetrics) GetRules() []InputKubeMetricsRules {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *InputKubeMetrics) GetMetadata() []InputKubeMetricsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputKubeMetrics) GetPersistence() *InputKubeMetricsPersistence {
	if o == nil {
		return nil
	}
	return o.Persistence
}

func (o *InputKubeMetrics) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}
