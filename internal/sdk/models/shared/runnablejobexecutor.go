// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type RunnableJobExecutorJobType string

const (
	RunnableJobExecutorJobTypeCollection      RunnableJobExecutorJobType = "collection"
	RunnableJobExecutorJobTypeExecutor        RunnableJobExecutorJobType = "executor"
	RunnableJobExecutorJobTypeScheduledSearch RunnableJobExecutorJobType = "scheduledSearch"
)

func (e RunnableJobExecutorJobType) ToPointer() *RunnableJobExecutorJobType {
	return &e
}
func (e *RunnableJobExecutorJobType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		fallthrough
	case "executor":
		fallthrough
	case "scheduledSearch":
		*e = RunnableJobExecutorJobType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunnableJobExecutorJobType: %v", v)
	}
}

type RunnableJobExecutorType string

const (
	RunnableJobExecutorTypeCollection RunnableJobExecutorType = "collection"
)

func (e RunnableJobExecutorType) ToPointer() *RunnableJobExecutorType {
	return &e
}
func (e *RunnableJobExecutorType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "collection":
		*e = RunnableJobExecutorType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunnableJobExecutorType: %v", v)
	}
}

// RunnableJobExecutorScheduleLogLevel - Level at which to set task logging
type RunnableJobExecutorScheduleLogLevel string

const (
	RunnableJobExecutorScheduleLogLevelError RunnableJobExecutorScheduleLogLevel = "error"
	RunnableJobExecutorScheduleLogLevelWarn  RunnableJobExecutorScheduleLogLevel = "warn"
	RunnableJobExecutorScheduleLogLevelInfo  RunnableJobExecutorScheduleLogLevel = "info"
	RunnableJobExecutorScheduleLogLevelDebug RunnableJobExecutorScheduleLogLevel = "debug"
	RunnableJobExecutorScheduleLogLevelSilly RunnableJobExecutorScheduleLogLevel = "silly"
)

func (e RunnableJobExecutorScheduleLogLevel) ToPointer() *RunnableJobExecutorScheduleLogLevel {
	return &e
}
func (e *RunnableJobExecutorScheduleLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "silly":
		*e = RunnableJobExecutorScheduleLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunnableJobExecutorScheduleLogLevel: %v", v)
	}
}

type RunnableJobExecutorTimeWarning struct {
}

type RunnableJobExecutorRunSettings struct {
	Type *RunnableJobExecutorType `json:"type,omitempty"`
	// Reschedule tasks that failed with non-fatal errors
	RescheduleDroppedTasks *bool `default:"true" json:"rescheduleDroppedTasks"`
	// Maximum number of times a task can be rescheduled
	MaxTaskReschedule *float64 `default:"1" json:"maxTaskReschedule"`
	// Level at which to set task logging
	LogLevel *RunnableJobExecutorScheduleLogLevel `default:"info" json:"logLevel"`
	// Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time.
	JobTimeout *string `default:"0" json:"jobTimeout"`
	// Job run mode. Preview will either return up to N matching results, or will run until capture time T is reached. Discovery will gather the list of files to turn into streaming tasks, without running the data collection job. Full Run will run the collection job.
	Mode          *string `default:"list" json:"mode"`
	TimeRangeType *string `default:"relative" json:"timeRangeType"`
	// Earliest time to collect data for the selected timezone
	Earliest *float64 `json:"earliest,omitempty"`
	// Latest time to collect data for the selected timezone
	Latest            *float64                        `json:"latest,omitempty"`
	TimestampTimezone any                             `json:"timestampTimezone,omitempty"`
	TimeWarning       *RunnableJobExecutorTimeWarning `json:"timeWarning,omitempty"`
	// A filter for tokens in the provided collect path and/or the events being collected
	Expression *string `default:"true" json:"expression"`
	// Limits the bundle size for small tasks. For example,
	//
	//
	//
	//         if your lower bundle size is 1MB, you can bundle up to five 200KB files into one task.
	MinTaskSize *string `default:"1MB" json:"minTaskSize"`
	// Limits the bundle size for files above the lower task bundle size. For example, if your upper bundle size is 10MB,
	//
	//
	//
	//         you can bundle up to five 2MB files into one task. Files greater than this size will be assigned to individual tasks.
	MaxTaskSize *string `default:"10MB" json:"maxTaskSize"`
}

func (r RunnableJobExecutorRunSettings) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RunnableJobExecutorRunSettings) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RunnableJobExecutorRunSettings) GetType() *RunnableJobExecutorType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RunnableJobExecutorRunSettings) GetRescheduleDroppedTasks() *bool {
	if o == nil {
		return nil
	}
	return o.RescheduleDroppedTasks
}

func (o *RunnableJobExecutorRunSettings) GetMaxTaskReschedule() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxTaskReschedule
}

func (o *RunnableJobExecutorRunSettings) GetLogLevel() *RunnableJobExecutorScheduleLogLevel {
	if o == nil {
		return nil
	}
	return o.LogLevel
}

func (o *RunnableJobExecutorRunSettings) GetJobTimeout() *string {
	if o == nil {
		return nil
	}
	return o.JobTimeout
}

func (o *RunnableJobExecutorRunSettings) GetMode() *string {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *RunnableJobExecutorRunSettings) GetTimeRangeType() *string {
	if o == nil {
		return nil
	}
	return o.TimeRangeType
}

func (o *RunnableJobExecutorRunSettings) GetEarliest() *float64 {
	if o == nil {
		return nil
	}
	return o.Earliest
}

func (o *RunnableJobExecutorRunSettings) GetLatest() *float64 {
	if o == nil {
		return nil
	}
	return o.Latest
}

func (o *RunnableJobExecutorRunSettings) GetTimestampTimezone() any {
	if o == nil {
		return nil
	}
	return o.TimestampTimezone
}

func (o *RunnableJobExecutorRunSettings) GetTimeWarning() *RunnableJobExecutorTimeWarning {
	if o == nil {
		return nil
	}
	return o.TimeWarning
}

func (o *RunnableJobExecutorRunSettings) GetExpression() *string {
	if o == nil {
		return nil
	}
	return o.Expression
}

func (o *RunnableJobExecutorRunSettings) GetMinTaskSize() *string {
	if o == nil {
		return nil
	}
	return o.MinTaskSize
}

func (o *RunnableJobExecutorRunSettings) GetMaxTaskSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxTaskSize
}

// RunnableJobExecutorSchedule - Configuration for a scheduled job
type RunnableJobExecutorSchedule struct {
	// Enable to configure scheduling for this Collector
	Enabled *bool `json:"enabled,omitempty"`
	// A cron schedule on which to run this job
	CronSchedule *string `default:"*/5 * * * *" json:"cronSchedule"`
	// The maximum number of instances of this scheduled job that may be running at any time
	MaxConcurrentRuns *float64 `default:"1" json:"maxConcurrentRuns"`
	// Skippable jobs can be delayed, up to their next run time, if the system is hitting concurrency limits
	Skippable    *bool                           `default:"true" json:"skippable"`
	ResumeMissed any                             `json:"resumeMissed,omitempty"`
	Run          *RunnableJobExecutorRunSettings `json:"run,omitempty"`
}

func (r RunnableJobExecutorSchedule) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RunnableJobExecutorSchedule) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RunnableJobExecutorSchedule) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *RunnableJobExecutorSchedule) GetCronSchedule() *string {
	if o == nil {
		return nil
	}
	return o.CronSchedule
}

func (o *RunnableJobExecutorSchedule) GetMaxConcurrentRuns() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxConcurrentRuns
}

func (o *RunnableJobExecutorSchedule) GetSkippable() *bool {
	if o == nil {
		return nil
	}
	return o.Skippable
}

func (o *RunnableJobExecutorSchedule) GetResumeMissed() any {
	if o == nil {
		return nil
	}
	return o.ResumeMissed
}

func (o *RunnableJobExecutorSchedule) GetRun() *RunnableJobExecutorRunSettings {
	if o == nil {
		return nil
	}
	return o.Run
}

type RunnableJobExecutorExecutorSpecificSettings struct {
}

type RunnableJobExecutorExecutor struct {
	// The type of executor to run
	Type string `json:"type"`
	// Determines whether or not to write task results to disk
	StoreTaskResults *bool                                        `default:"true" json:"storeTaskResults"`
	Conf             *RunnableJobExecutorExecutorSpecificSettings `json:"conf,omitempty"`
}

func (r RunnableJobExecutorExecutor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RunnableJobExecutorExecutor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RunnableJobExecutorExecutor) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *RunnableJobExecutorExecutor) GetStoreTaskResults() *bool {
	if o == nil {
		return nil
	}
	return o.StoreTaskResults
}

func (o *RunnableJobExecutorExecutor) GetConf() *RunnableJobExecutorExecutorSpecificSettings {
	if o == nil {
		return nil
	}
	return o.Conf
}

// RunnableJobExecutorLogLevel - Level at which to set task logging
type RunnableJobExecutorLogLevel string

const (
	RunnableJobExecutorLogLevelError RunnableJobExecutorLogLevel = "error"
	RunnableJobExecutorLogLevelWarn  RunnableJobExecutorLogLevel = "warn"
	RunnableJobExecutorLogLevelInfo  RunnableJobExecutorLogLevel = "info"
	RunnableJobExecutorLogLevelDebug RunnableJobExecutorLogLevel = "debug"
	RunnableJobExecutorLogLevelSilly RunnableJobExecutorLogLevel = "silly"
)

func (e RunnableJobExecutorLogLevel) ToPointer() *RunnableJobExecutorLogLevel {
	return &e
}
func (e *RunnableJobExecutorLogLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warn":
		fallthrough
	case "info":
		fallthrough
	case "debug":
		fallthrough
	case "silly":
		*e = RunnableJobExecutorLogLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunnableJobExecutorLogLevel: %v", v)
	}
}

type RunnableJobExecutorRun struct {
	// Reschedule tasks that failed with non-fatal errors
	RescheduleDroppedTasks *bool `default:"true" json:"rescheduleDroppedTasks"`
	// Maximum number of times a task can be rescheduled
	MaxTaskReschedule *float64 `default:"1" json:"maxTaskReschedule"`
	// Level at which to set task logging
	LogLevel *RunnableJobExecutorLogLevel `default:"info" json:"logLevel"`
	// Maximum time the job is allowed to run. Time unit defaults to seconds if not specified (examples: 30, 45s, 15m). Enter 0 for unlimited time.
	JobTimeout *string `default:"0" json:"jobTimeout"`
}

func (r RunnableJobExecutorRun) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RunnableJobExecutorRun) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RunnableJobExecutorRun) GetRescheduleDroppedTasks() *bool {
	if o == nil {
		return nil
	}
	return o.RescheduleDroppedTasks
}

func (o *RunnableJobExecutorRun) GetMaxTaskReschedule() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxTaskReschedule
}

func (o *RunnableJobExecutorRun) GetLogLevel() *RunnableJobExecutorLogLevel {
	if o == nil {
		return nil
	}
	return o.LogLevel
}

func (o *RunnableJobExecutorRun) GetJobTimeout() *string {
	if o == nil {
		return nil
	}
	return o.JobTimeout
}

type RunnableJobExecutor struct {
	// Unique ID for this Job
	ID          *string                     `json:"id,omitempty"`
	Description *string                     `json:"description,omitempty"`
	Type        *RunnableJobExecutorJobType `json:"type,omitempty"`
	// Time to keep the job's artifacts on disk after job completion. This also affects how long a job is listed in the Job Inspector.
	TTL *string `default:"4h" json:"ttl"`
	// List of fields to remove from Discover results. Wildcards (for example, aws*) are allowed. This is useful when discovery returns sensitive fields that should not be exposed in the Jobs user interface.
	RemoveFields []string `json:"removeFields,omitempty"`
	// Resumes the ad hoc job if a failure condition causes Stream to restart during job execution
	ResumeOnBoot *bool `default:"false" json:"resumeOnBoot"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Configuration for a scheduled job
	Schedule *RunnableJobExecutorSchedule `json:"schedule,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string                    `json:"streamtags,omitempty"`
	Executor   RunnableJobExecutorExecutor `json:"executor"`
	Run        RunnableJobExecutorRun      `json:"run"`
}

func (r RunnableJobExecutor) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RunnableJobExecutor) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *RunnableJobExecutor) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RunnableJobExecutor) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *RunnableJobExecutor) GetType() *RunnableJobExecutorJobType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *RunnableJobExecutor) GetTTL() *string {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *RunnableJobExecutor) GetRemoveFields() []string {
	if o == nil {
		return nil
	}
	return o.RemoveFields
}

func (o *RunnableJobExecutor) GetResumeOnBoot() *bool {
	if o == nil {
		return nil
	}
	return o.ResumeOnBoot
}

func (o *RunnableJobExecutor) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *RunnableJobExecutor) GetSchedule() *RunnableJobExecutorSchedule {
	if o == nil {
		return nil
	}
	return o.Schedule
}

func (o *RunnableJobExecutor) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *RunnableJobExecutor) GetExecutor() RunnableJobExecutorExecutor {
	if o == nil {
		return RunnableJobExecutorExecutor{}
	}
	return o.Executor
}

func (o *RunnableJobExecutor) GetRun() RunnableJobExecutorRun {
	if o == nil {
		return RunnableJobExecutorRun{}
	}
	return o.Run
}
