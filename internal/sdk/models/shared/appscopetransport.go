// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Buffer string

const (
	BufferLine Buffer = "line"
	BufferFull Buffer = "full"
)

func (e Buffer) ToPointer() *Buffer {
	return &e
}
func (e *Buffer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "line":
		fallthrough
	case "full":
		*e = Buffer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Buffer: %v", v)
	}
}

type TLS struct {
	Cacertpath     *string `json:"cacertpath,omitempty"`
	Enable         *bool   `json:"enable,omitempty"`
	Validateserver *bool   `json:"validateserver,omitempty"`
}

func (o *TLS) GetCacertpath() *string {
	if o == nil {
		return nil
	}
	return o.Cacertpath
}

func (o *TLS) GetEnable() *bool {
	if o == nil {
		return nil
	}
	return o.Enable
}

func (o *TLS) GetValidateserver() *bool {
	if o == nil {
		return nil
	}
	return o.Validateserver
}

type AppscopeTransport struct {
	Buffer *Buffer  `json:"buffer,omitempty"`
	Host   *string  `json:"host,omitempty"`
	Path   *string  `json:"path,omitempty"`
	Port   *float64 `json:"port,omitempty"`
	TLS    *TLS     `json:"tls,omitempty"`
	Type   *string  `json:"type,omitempty"`
}

func (o *AppscopeTransport) GetBuffer() *Buffer {
	if o == nil {
		return nil
	}
	return o.Buffer
}

func (o *AppscopeTransport) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *AppscopeTransport) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *AppscopeTransport) GetPort() *float64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *AppscopeTransport) GetTLS() *TLS {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *AppscopeTransport) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}
