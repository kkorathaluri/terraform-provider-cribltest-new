// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type PackageUrls struct {
	// Package HTTP URL or local path
	PackageURL string `json:"packageUrl"`
	// Package's MD5 or SHA256 hash HTTP URL or local path
	PackageHashURL *string `json:"packageHashUrl,omitempty"`
}

func (o *PackageUrls) GetPackageURL() string {
	if o == nil {
		return ""
	}
	return o.PackageURL
}

func (o *PackageUrls) GetPackageHashURL() *string {
	if o == nil {
		return nil
	}
	return o.PackageHashURL
}

type UpgradeMode string

const (
	UpgradeModeRolling UpgradeMode = "rolling"
	UpgradeModeRegular UpgradeMode = "regular"
	UpgradeModeBatch   UpgradeMode = "batch"
)

func (e UpgradeMode) ToPointer() *UpgradeMode {
	return &e
}
func (e *UpgradeMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rolling":
		fallthrough
	case "regular":
		fallthrough
	case "batch":
		*e = UpgradeMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpgradeMode: %v", v)
	}
}

type DistributedUpgradeRequest struct {
	// Provide your own URLs or local paths for platform-specific Cribl packages
	PackageUrls []PackageUrls `json:"packageUrls,omitempty"`
	// Percentage of the total worker nodes on the group to run the upgrade on
	UpgradePercentage *float64 `default:"1" json:"upgradePercentage"`
	// Number of times to retry conncecting to a worker node before marking the upgrade as failed.
	WorkerRetries *float64 `default:"5" json:"workerRetries"`
	// Delay between retries
	WorkerRetryDelay *float64     `default:"1000" json:"workerRetryDelay"`
	UpgradeMode      *UpgradeMode `json:"upgradeMode,omitempty"`
	VersionTo        *string      `json:"versionTo,omitempty"`
}

func (d DistributedUpgradeRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DistributedUpgradeRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DistributedUpgradeRequest) GetPackageUrls() []PackageUrls {
	if o == nil {
		return nil
	}
	return o.PackageUrls
}

func (o *DistributedUpgradeRequest) GetUpgradePercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.UpgradePercentage
}

func (o *DistributedUpgradeRequest) GetWorkerRetries() *float64 {
	if o == nil {
		return nil
	}
	return o.WorkerRetries
}

func (o *DistributedUpgradeRequest) GetWorkerRetryDelay() *float64 {
	if o == nil {
		return nil
	}
	return o.WorkerRetryDelay
}

func (o *DistributedUpgradeRequest) GetUpgradeMode() *UpgradeMode {
	if o == nil {
		return nil
	}
	return o.UpgradeMode
}

func (o *DistributedUpgradeRequest) GetVersionTo() *string {
	if o == nil {
		return nil
	}
	return o.VersionTo
}
