// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type OutputCriblTCPType string

const (
	OutputCriblTCPTypeCriblTCP OutputCriblTCPType = "cribl_tcp"
)

func (e OutputCriblTCPType) ToPointer() *OutputCriblTCPType {
	return &e
}
func (e *OutputCriblTCPType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cribl_tcp":
		*e = OutputCriblTCPType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPType: %v", v)
	}
}

// OutputCriblTCPCompression - Codec to use to compress the data before sending
type OutputCriblTCPCompression string

const (
	OutputCriblTCPCompressionNone OutputCriblTCPCompression = "none"
	OutputCriblTCPCompressionGzip OutputCriblTCPCompression = "gzip"
)

func (e OutputCriblTCPCompression) ToPointer() *OutputCriblTCPCompression {
	return &e
}
func (e *OutputCriblTCPCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputCriblTCPCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPCompression: %v", v)
	}
}

// OutputCriblTCPMinimumTLSVersion - Minimum TLS version to use when connecting
type OutputCriblTCPMinimumTLSVersion string

const (
	OutputCriblTCPMinimumTLSVersionTlSv1  OutputCriblTCPMinimumTLSVersion = "TLSv1"
	OutputCriblTCPMinimumTLSVersionTlSv11 OutputCriblTCPMinimumTLSVersion = "TLSv1.1"
	OutputCriblTCPMinimumTLSVersionTlSv12 OutputCriblTCPMinimumTLSVersion = "TLSv1.2"
	OutputCriblTCPMinimumTLSVersionTlSv13 OutputCriblTCPMinimumTLSVersion = "TLSv1.3"
)

func (e OutputCriblTCPMinimumTLSVersion) ToPointer() *OutputCriblTCPMinimumTLSVersion {
	return &e
}
func (e *OutputCriblTCPMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputCriblTCPMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPMinimumTLSVersion: %v", v)
	}
}

// OutputCriblTCPMaximumTLSVersion - Maximum TLS version to use when connecting
type OutputCriblTCPMaximumTLSVersion string

const (
	OutputCriblTCPMaximumTLSVersionTlSv1  OutputCriblTCPMaximumTLSVersion = "TLSv1"
	OutputCriblTCPMaximumTLSVersionTlSv11 OutputCriblTCPMaximumTLSVersion = "TLSv1.1"
	OutputCriblTCPMaximumTLSVersionTlSv12 OutputCriblTCPMaximumTLSVersion = "TLSv1.2"
	OutputCriblTCPMaximumTLSVersionTlSv13 OutputCriblTCPMaximumTLSVersion = "TLSv1.3"
)

func (e OutputCriblTCPMaximumTLSVersion) ToPointer() *OutputCriblTCPMaximumTLSVersion {
	return &e
}
func (e *OutputCriblTCPMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = OutputCriblTCPMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPMaximumTLSVersion: %v", v)
	}
}

type OutputCriblTCPTLSSettingsClientSide struct {
	Disabled *bool `default:"true" json:"disabled"`
	// Reject certs that are not authorized by a CA in the CA certificate path, or by another
	//                     trusted CA (e.g., the system's CA). Defaults to Yes. Overrides the toggle from Advanced Settings, when also present.
	RejectUnauthorized *bool `default:"true" json:"rejectUnauthorized"`
	// Server name for the SNI (Server Name Indication) TLS extension. It must be a host name, and not an IP address.
	Servername *string `json:"servername,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string `json:"certificateName,omitempty"`
	// Path on client in which to find CA certificates to verify the server's cert. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on client in which to find the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath *string `json:"privKeyPath,omitempty"`
	// Path on client in which to find certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Minimum TLS version to use when connecting
	MinVersion *OutputCriblTCPMinimumTLSVersion `json:"minVersion,omitempty"`
	// Maximum TLS version to use when connecting
	MaxVersion *OutputCriblTCPMaximumTLSVersion `json:"maxVersion,omitempty"`
}

func (o OutputCriblTCPTLSSettingsClientSide) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputCriblTCPTLSSettingsClientSide) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputCriblTCPTLSSettingsClientSide) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *OutputCriblTCPTLSSettingsClientSide) GetRejectUnauthorized() *bool {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *OutputCriblTCPTLSSettingsClientSide) GetServername() *string {
	if o == nil {
		return nil
	}
	return o.Servername
}

func (o *OutputCriblTCPTLSSettingsClientSide) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *OutputCriblTCPTLSSettingsClientSide) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *OutputCriblTCPTLSSettingsClientSide) GetPrivKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.PrivKeyPath
}

func (o *OutputCriblTCPTLSSettingsClientSide) GetCertPath() *string {
	if o == nil {
		return nil
	}
	return o.CertPath
}

func (o *OutputCriblTCPTLSSettingsClientSide) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *OutputCriblTCPTLSSettingsClientSide) GetMinVersion() *OutputCriblTCPMinimumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *OutputCriblTCPTLSSettingsClientSide) GetMaxVersion() *OutputCriblTCPMaximumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MaxVersion
}

// OutputCriblTCPBackpressureBehavior - Whether to block, drop, or queue events when all receivers are exerting backpressure.
type OutputCriblTCPBackpressureBehavior string

const (
	OutputCriblTCPBackpressureBehaviorBlock OutputCriblTCPBackpressureBehavior = "block"
	OutputCriblTCPBackpressureBehaviorDrop  OutputCriblTCPBackpressureBehavior = "drop"
	OutputCriblTCPBackpressureBehaviorQueue OutputCriblTCPBackpressureBehavior = "queue"
)

func (e OutputCriblTCPBackpressureBehavior) ToPointer() *OutputCriblTCPBackpressureBehavior {
	return &e
}
func (e *OutputCriblTCPBackpressureBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		fallthrough
	case "queue":
		*e = OutputCriblTCPBackpressureBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPBackpressureBehavior: %v", v)
	}
}

// OutputCriblTCPTLS - Whether to inherit TLS configs from group setting or disable TLS.
type OutputCriblTCPTLS string

const (
	OutputCriblTCPTLSInherit OutputCriblTCPTLS = "inherit"
	OutputCriblTCPTLSOff     OutputCriblTCPTLS = "off"
)

func (e OutputCriblTCPTLS) ToPointer() *OutputCriblTCPTLS {
	return &e
}
func (e *OutputCriblTCPTLS) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inherit":
		fallthrough
	case "off":
		*e = OutputCriblTCPTLS(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPTLS: %v", v)
	}
}

type OutputCriblTCPHosts struct {
	// The hostname of the receiver.
	Host string `json:"host"`
	// The port to connect to on the provided host.
	Port *float64 `default:"10300" json:"port"`
	// Whether to inherit TLS configs from group setting or disable TLS.
	TLS *OutputCriblTCPTLS `default:"inherit" json:"tls"`
	// Servername to use if establishing a TLS connection. If not specified, defaults to connection host (iff not an IP); otherwise, to the global TLS settings.
	Servername *string `json:"servername,omitempty"`
	// Assign a weight (>0) to each endpoint to indicate its traffic-handling capability
	Weight *float64 `default:"1" json:"weight"`
}

func (o OutputCriblTCPHosts) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputCriblTCPHosts) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OutputCriblTCPHosts) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *OutputCriblTCPHosts) GetPort() *float64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *OutputCriblTCPHosts) GetTLS() *OutputCriblTCPTLS {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *OutputCriblTCPHosts) GetServername() *string {
	if o == nil {
		return nil
	}
	return o.Servername
}

func (o *OutputCriblTCPHosts) GetWeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Weight
}

// OutputCriblTCPPqCompressCompression - Codec to use to compress the persisted data.
type OutputCriblTCPPqCompressCompression string

const (
	OutputCriblTCPPqCompressCompressionNone OutputCriblTCPPqCompressCompression = "none"
	OutputCriblTCPPqCompressCompressionGzip OutputCriblTCPPqCompressCompression = "gzip"
)

func (e OutputCriblTCPPqCompressCompression) ToPointer() *OutputCriblTCPPqCompressCompression {
	return &e
}
func (e *OutputCriblTCPPqCompressCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = OutputCriblTCPPqCompressCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPPqCompressCompression: %v", v)
	}
}

// OutputCriblTCPQueueFullBehavior - Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
type OutputCriblTCPQueueFullBehavior string

const (
	OutputCriblTCPQueueFullBehaviorBlock OutputCriblTCPQueueFullBehavior = "block"
	OutputCriblTCPQueueFullBehaviorDrop  OutputCriblTCPQueueFullBehavior = "drop"
)

func (e OutputCriblTCPQueueFullBehavior) ToPointer() *OutputCriblTCPQueueFullBehavior {
	return &e
}
func (e *OutputCriblTCPQueueFullBehavior) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "drop":
		*e = OutputCriblTCPQueueFullBehavior(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPQueueFullBehavior: %v", v)
	}
}

// OutputCriblTCPMode - In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem.
type OutputCriblTCPMode string

const (
	OutputCriblTCPModeError        OutputCriblTCPMode = "error"
	OutputCriblTCPModeBackpressure OutputCriblTCPMode = "backpressure"
	OutputCriblTCPModeAlways       OutputCriblTCPMode = "always"
)

func (e OutputCriblTCPMode) ToPointer() *OutputCriblTCPMode {
	return &e
}
func (e *OutputCriblTCPMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "backpressure":
		fallthrough
	case "always":
		*e = OutputCriblTCPMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OutputCriblTCPMode: %v", v)
	}
}

type OutputCriblTCPPqControls struct {
}

type OutputCriblTCP struct {
	// Unique ID for this output
	ID   string             `json:"id"`
	Type OutputCriblTCPType `json:"type"`
	// Pipeline to process data before sending out to this output
	Pipeline *string `json:"pipeline,omitempty"`
	// Fields to automatically add to events, such as cribl_pipe. Supports wildcards.
	SystemFields []string `json:"systemFields,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Use load-balanced destinations
	LoadBalanced *bool `default:"true" json:"loadBalanced"`
	// Codec to use to compress the data before sending
	Compression *OutputCriblTCPCompression `default:"gzip" json:"compression"`
	// Use to troubleshoot issues with sending data
	LogFailedRequests *bool `default:"false" json:"logFailedRequests"`
	// Rate (in bytes per second) to throttle while writing to an output. Accepts values with multiple-byte units, such as KB, MB, and GB. (Example: 42 MB) Default value of 0 specifies no throttling.
	ThrottleRatePerSec *string                              `default:"0" json:"throttleRatePerSec"`
	TLS                *OutputCriblTCPTLSSettingsClientSide `json:"tls,omitempty"`
	// Amount of time (milliseconds) to wait for the connection to establish before retrying
	ConnectionTimeout *float64 `default:"10000" json:"connectionTimeout"`
	// Amount of time (milliseconds) to wait for a write to complete before assuming connection is dead
	WriteTimeout *float64 `default:"60000" json:"writeTimeout"`
	// The number of minutes before the internally generated authentication token expires, valid values between 1 and 60
	TokenTTLMinutes *float64 `default:"60" json:"tokenTTLMinutes"`
	// Fields to exclude from the event. By default, all internal fields except `__output` are sent. E.g.: `cribl_pipe`, `c*`. Wildcards supported.
	ExcludeFields []string `json:"excludeFields,omitempty"`
	// Whether to block, drop, or queue events when all receivers are exerting backpressure.
	OnBackpressure *OutputCriblTCPBackpressureBehavior `default:"block" json:"onBackpressure"`
	Description    *string                             `json:"description,omitempty"`
	// The hostname of the receiver
	Host *string `json:"host,omitempty"`
	// The port to connect to on the provided host
	Port *float64 `default:"10300" json:"port"`
	// Exclude all IPs of the current host from the list of any resolved hostnames.
	ExcludeSelf *bool `default:"false" json:"excludeSelf"`
	// Set of hosts to load-balance data to.
	Hosts []OutputCriblTCPHosts `json:"hosts,omitempty"`
	// Re-resolve any hostnames every this many seconds and pick up destinations from A records.
	DNSResolvePeriodSec *float64 `default:"600" json:"dnsResolvePeriodSec"`
	// How far back in time to keep traffic stats for load balancing purposes.
	LoadBalanceStatsPeriodSec *float64 `default:"300" json:"loadBalanceStatsPeriodSec"`
	// Maximum number of concurrent connections (per worker process). A random set of IPs will be picked on every DNS resolution period. Use 0 for unlimited.
	MaxConcurrentSenders *float64 `default:"0" json:"maxConcurrentSenders"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	PqMaxFileSize *string `default:"1 MB" json:"pqMaxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	PqMaxSize *string `default:"5GB" json:"pqMaxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/<output-id>.
	PqPath *string `default:"\\$CRIBL_HOME/state/queues" json:"pqPath"`
	// Codec to use to compress the persisted data.
	PqCompress *OutputCriblTCPPqCompressCompression `default:"none" json:"pqCompress"`
	// Whether to block or drop events when the queue is exerting backpressure (full capacity or low disk). 'Block' is the same behavior as non-PQ blocking. 'Drop new data' throws away incoming data, while leaving the contents of the PQ unchanged.
	PqOnBackpressure *OutputCriblTCPQueueFullBehavior `default:"block" json:"pqOnBackpressure"`
	// In Error mode, PQ writes events to the filesystem only when it detects a non-retryable Destination error. In Backpressure mode, PQ writes events to the filesystem when it detects backpressure from the Destination or when there are non-retryable Destination errors. In Always On mode, PQ always writes events to the filesystem.
	PqMode     *OutputCriblTCPMode       `default:"error" json:"pqMode"`
	PqControls *OutputCriblTCPPqControls `json:"pqControls,omitempty"`
}

func (o OutputCriblTCP) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OutputCriblTCP) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *OutputCriblTCP) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *OutputCriblTCP) GetType() OutputCriblTCPType {
	if o == nil {
		return OutputCriblTCPType("")
	}
	return o.Type
}

func (o *OutputCriblTCP) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *OutputCriblTCP) GetSystemFields() []string {
	if o == nil {
		return nil
	}
	return o.SystemFields
}

func (o *OutputCriblTCP) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *OutputCriblTCP) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *OutputCriblTCP) GetLoadBalanced() *bool {
	if o == nil {
		return nil
	}
	return o.LoadBalanced
}

func (o *OutputCriblTCP) GetCompression() *OutputCriblTCPCompression {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *OutputCriblTCP) GetLogFailedRequests() *bool {
	if o == nil {
		return nil
	}
	return o.LogFailedRequests
}

func (o *OutputCriblTCP) GetThrottleRatePerSec() *string {
	if o == nil {
		return nil
	}
	return o.ThrottleRatePerSec
}

func (o *OutputCriblTCP) GetTLS() *OutputCriblTCPTLSSettingsClientSide {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *OutputCriblTCP) GetConnectionTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.ConnectionTimeout
}

func (o *OutputCriblTCP) GetWriteTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.WriteTimeout
}

func (o *OutputCriblTCP) GetTokenTTLMinutes() *float64 {
	if o == nil {
		return nil
	}
	return o.TokenTTLMinutes
}

func (o *OutputCriblTCP) GetExcludeFields() []string {
	if o == nil {
		return nil
	}
	return o.ExcludeFields
}

func (o *OutputCriblTCP) GetOnBackpressure() *OutputCriblTCPBackpressureBehavior {
	if o == nil {
		return nil
	}
	return o.OnBackpressure
}

func (o *OutputCriblTCP) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *OutputCriblTCP) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *OutputCriblTCP) GetPort() *float64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *OutputCriblTCP) GetExcludeSelf() *bool {
	if o == nil {
		return nil
	}
	return o.ExcludeSelf
}

func (o *OutputCriblTCP) GetHosts() []OutputCriblTCPHosts {
	if o == nil {
		return nil
	}
	return o.Hosts
}

func (o *OutputCriblTCP) GetDNSResolvePeriodSec() *float64 {
	if o == nil {
		return nil
	}
	return o.DNSResolvePeriodSec
}

func (o *OutputCriblTCP) GetLoadBalanceStatsPeriodSec() *float64 {
	if o == nil {
		return nil
	}
	return o.LoadBalanceStatsPeriodSec
}

func (o *OutputCriblTCP) GetMaxConcurrentSenders() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxConcurrentSenders
}

func (o *OutputCriblTCP) GetPqMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.PqMaxFileSize
}

func (o *OutputCriblTCP) GetPqMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.PqMaxSize
}

func (o *OutputCriblTCP) GetPqPath() *string {
	if o == nil {
		return nil
	}
	return o.PqPath
}

func (o *OutputCriblTCP) GetPqCompress() *OutputCriblTCPPqCompressCompression {
	if o == nil {
		return nil
	}
	return o.PqCompress
}

func (o *OutputCriblTCP) GetPqOnBackpressure() *OutputCriblTCPQueueFullBehavior {
	if o == nil {
		return nil
	}
	return o.PqOnBackpressure
}

func (o *OutputCriblTCP) GetPqMode() *OutputCriblTCPMode {
	if o == nil {
		return nil
	}
	return o.PqMode
}

func (o *OutputCriblTCP) GetPqControls() *OutputCriblTCPPqControls {
	if o == nil {
		return nil
	}
	return o.PqControls
}
