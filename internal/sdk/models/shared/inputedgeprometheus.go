// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type InputEdgePrometheusType string

const (
	InputEdgePrometheusTypeEdgePrometheus InputEdgePrometheusType = "edge_prometheus"
)

func (e InputEdgePrometheusType) ToPointer() *InputEdgePrometheusType {
	return &e
}
func (e *InputEdgePrometheusType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "edge_prometheus":
		*e = InputEdgePrometheusType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusType: %v", v)
	}
}

type InputEdgePrometheusConnections struct {
	Pipeline *string `json:"pipeline,omitempty"`
	Output   string  `json:"output"`
}

func (o *InputEdgePrometheusConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputEdgePrometheusConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

// InputEdgePrometheusMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputEdgePrometheusMode string

const (
	InputEdgePrometheusModeSmart  InputEdgePrometheusMode = "smart"
	InputEdgePrometheusModeAlways InputEdgePrometheusMode = "always"
)

func (e InputEdgePrometheusMode) ToPointer() *InputEdgePrometheusMode {
	return &e
}
func (e *InputEdgePrometheusMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputEdgePrometheusMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusMode: %v", v)
	}
}

// InputEdgePrometheusCompression - Codec to use to compress the persisted data
type InputEdgePrometheusCompression string

const (
	InputEdgePrometheusCompressionNone InputEdgePrometheusCompression = "none"
	InputEdgePrometheusCompressionGzip InputEdgePrometheusCompression = "gzip"
)

func (e InputEdgePrometheusCompression) ToPointer() *InputEdgePrometheusCompression {
	return &e
}
func (e *InputEdgePrometheusCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputEdgePrometheusCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusCompression: %v", v)
	}
}

type InputEdgePrometheusPq struct {
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputEdgePrometheusMode `default:"always" json:"mode"`
	// The maximum number of events to hold in memory before writing the events to disk
	MaxBufferSize *float64 `default:"1000" json:"maxBufferSize"`
	// The number of events to send downstream before committing that Stream has read them
	CommitFrequency *float64 `default:"42" json:"commitFrequency"`
	// The maximum size to store in each queue file before closing and optionally compressing. Enter a numeral with units of KB, MB, etc.
	MaxFileSize *string `default:"1 MB" json:"maxFileSize"`
	// The maximum disk space that the queue can consume (as an average per Worker Process) before queueing stops. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `default:"5GB" json:"maxSize"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>
	Path *string `default:"\\$CRIBL_HOME/state/queues" json:"path"`
	// Codec to use to compress the persisted data
	Compress *InputEdgePrometheusCompression `default:"none" json:"compress"`
}

func (i InputEdgePrometheusPq) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputEdgePrometheusPq) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InputEdgePrometheusPq) GetMode() *InputEdgePrometheusMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputEdgePrometheusPq) GetMaxBufferSize() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputEdgePrometheusPq) GetCommitFrequency() *float64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputEdgePrometheusPq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputEdgePrometheusPq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputEdgePrometheusPq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *InputEdgePrometheusPq) GetCompress() *InputEdgePrometheusCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

// InputEdgePrometheusDiscoveryType - Target discovery mechanism. Use static to manually enter a list of targets.
type InputEdgePrometheusDiscoveryType string

const (
	InputEdgePrometheusDiscoveryTypeStatic  InputEdgePrometheusDiscoveryType = "static"
	InputEdgePrometheusDiscoveryTypeDNS     InputEdgePrometheusDiscoveryType = "dns"
	InputEdgePrometheusDiscoveryTypeEc2     InputEdgePrometheusDiscoveryType = "ec2"
	InputEdgePrometheusDiscoveryTypeK8sNode InputEdgePrometheusDiscoveryType = "k8s-node"
	InputEdgePrometheusDiscoveryTypeK8sPods InputEdgePrometheusDiscoveryType = "k8s-pods"
)

func (e InputEdgePrometheusDiscoveryType) ToPointer() *InputEdgePrometheusDiscoveryType {
	return &e
}
func (e *InputEdgePrometheusDiscoveryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "dns":
		fallthrough
	case "ec2":
		fallthrough
	case "k8s-node":
		fallthrough
	case "k8s-pods":
		*e = InputEdgePrometheusDiscoveryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusDiscoveryType: %v", v)
	}
}

// InputEdgePrometheusPersistenceCompression - Data compression format. Default is gzip.
type InputEdgePrometheusPersistenceCompression string

const (
	InputEdgePrometheusPersistenceCompressionNone InputEdgePrometheusPersistenceCompression = "none"
	InputEdgePrometheusPersistenceCompressionGzip InputEdgePrometheusPersistenceCompression = "gzip"
)

func (e InputEdgePrometheusPersistenceCompression) ToPointer() *InputEdgePrometheusPersistenceCompression {
	return &e
}
func (e *InputEdgePrometheusPersistenceCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputEdgePrometheusPersistenceCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusPersistenceCompression: %v", v)
	}
}

type DiskSpooling struct {
	// Spool events on disk for Cribl Edge and Search. Default is disabled.
	Enable *bool `default:"false" json:"enable"`
	// Time period for grouping spooled events. Default is 10m.
	TimeWindow *string `default:"10m" json:"timeWindow"`
	// Maximum disk space that can be consumed before older buckets are deleted. Examples: 420MB, 4GB. Default is 1GB.
	MaxDataSize *string `default:"1GB" json:"maxDataSize"`
	// Maximum amount of time to retain data before older buckets are deleted. Examples: 2h, 4d. Default is 24h.
	MaxDataTime *string `default:"24h" json:"maxDataTime"`
	// Data compression format. Default is gzip.
	Compress *InputEdgePrometheusPersistenceCompression `default:"gzip" json:"compress"`
}

func (d DiskSpooling) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DiskSpooling) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DiskSpooling) GetEnable() *bool {
	if o == nil {
		return nil
	}
	return o.Enable
}

func (o *DiskSpooling) GetTimeWindow() *string {
	if o == nil {
		return nil
	}
	return o.TimeWindow
}

func (o *DiskSpooling) GetMaxDataSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxDataSize
}

func (o *DiskSpooling) GetMaxDataTime() *string {
	if o == nil {
		return nil
	}
	return o.MaxDataTime
}

func (o *DiskSpooling) GetCompress() *InputEdgePrometheusPersistenceCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

type InputEdgePrometheusMetadata struct {
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputEdgePrometheusMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputEdgePrometheusMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// InputEdgePrometheusAuthenticationMethod - Enter credentials directly, or select a stored secret
type InputEdgePrometheusAuthenticationMethod string

const (
	InputEdgePrometheusAuthenticationMethodManual     InputEdgePrometheusAuthenticationMethod = "manual"
	InputEdgePrometheusAuthenticationMethodSecret     InputEdgePrometheusAuthenticationMethod = "secret"
	InputEdgePrometheusAuthenticationMethodKubernetes InputEdgePrometheusAuthenticationMethod = "kubernetes"
)

func (e InputEdgePrometheusAuthenticationMethod) ToPointer() *InputEdgePrometheusAuthenticationMethod {
	return &e
}
func (e *InputEdgePrometheusAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manual":
		fallthrough
	case "secret":
		fallthrough
	case "kubernetes":
		*e = InputEdgePrometheusAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusAuthenticationMethod: %v", v)
	}
}

// InputEdgePrometheusTargetsProtocol - Protocol to use when collecting metrics
type InputEdgePrometheusTargetsProtocol string

const (
	InputEdgePrometheusTargetsProtocolHTTP  InputEdgePrometheusTargetsProtocol = "http"
	InputEdgePrometheusTargetsProtocolHTTPS InputEdgePrometheusTargetsProtocol = "https"
)

func (e InputEdgePrometheusTargetsProtocol) ToPointer() *InputEdgePrometheusTargetsProtocol {
	return &e
}
func (e *InputEdgePrometheusTargetsProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = InputEdgePrometheusTargetsProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusTargetsProtocol: %v", v)
	}
}

type Targets struct {
	// Protocol to use when collecting metrics
	Protocol *InputEdgePrometheusTargetsProtocol `default:"http" json:"protocol"`
	// Name of host from which to pull metrics.
	Host string `json:"host"`
	// The port number in the metrics URL for discovered targets.
	Port *float64 `default:"9090" json:"port"`
	// Path to use when collecting metrics from discovered targets
	Path *string `default:"/metrics" json:"path"`
}

func (t Targets) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Targets) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Targets) GetProtocol() *InputEdgePrometheusTargetsProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *Targets) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *Targets) GetPort() *float64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *Targets) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

// InputEdgePrometheusRecordType - DNS Record type to resolve
type InputEdgePrometheusRecordType string

const (
	InputEdgePrometheusRecordTypeSrv  InputEdgePrometheusRecordType = "SRV"
	InputEdgePrometheusRecordTypeA    InputEdgePrometheusRecordType = "A"
	InputEdgePrometheusRecordTypeAaaa InputEdgePrometheusRecordType = "AAAA"
)

func (e InputEdgePrometheusRecordType) ToPointer() *InputEdgePrometheusRecordType {
	return &e
}
func (e *InputEdgePrometheusRecordType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SRV":
		fallthrough
	case "A":
		fallthrough
	case "AAAA":
		*e = InputEdgePrometheusRecordType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusRecordType: %v", v)
	}
}

// InputEdgePrometheusProtocol - Protocol to use when collecting metrics
type InputEdgePrometheusProtocol string

const (
	InputEdgePrometheusProtocolHTTP  InputEdgePrometheusProtocol = "http"
	InputEdgePrometheusProtocolHTTPS InputEdgePrometheusProtocol = "https"
)

func (e InputEdgePrometheusProtocol) ToPointer() *InputEdgePrometheusProtocol {
	return &e
}
func (e *InputEdgePrometheusProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = InputEdgePrometheusProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusProtocol: %v", v)
	}
}

type InputEdgePrometheusSearchFilter struct {
	// Search filter attribute name, see: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html for more information. Attributes can be manually entered if not present in the drop down list
	Name string `json:"Name"`
	// Search Filter Values, if empty only "running" EC2 instances will be returned
	Values []string `json:"Values,omitempty"`
}

func (o *InputEdgePrometheusSearchFilter) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputEdgePrometheusSearchFilter) GetValues() []string {
	if o == nil {
		return nil
	}
	return o.Values
}

// InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod - AWS authentication method. Choose Auto to use IAM roles.
type InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod string

const (
	InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethodAuto   InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod = "auto"
	InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethodManual InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod = "manual"
	InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethodSecret InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod = "secret"
)

func (e InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod) ToPointer() *InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod {
	return &e
}
func (e *InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "manual":
		fallthrough
	case "secret":
		*e = InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod: %v", v)
	}
}

// InputEdgePrometheusSignatureVersion - Signature version to use for signing EC2 requests
type InputEdgePrometheusSignatureVersion string

const (
	InputEdgePrometheusSignatureVersionV2 InputEdgePrometheusSignatureVersion = "v2"
	InputEdgePrometheusSignatureVersionV4 InputEdgePrometheusSignatureVersion = "v4"
)

func (e InputEdgePrometheusSignatureVersion) ToPointer() *InputEdgePrometheusSignatureVersion {
	return &e
}
func (e *InputEdgePrometheusSignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = InputEdgePrometheusSignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputEdgePrometheusSignatureVersion: %v", v)
	}
}

type PodFilter struct {
	// JavaScript expression applied to pods objects. Return 'true' to include it.
	Filter string `json:"filter"`
	// Optional description of this rule's purpose
	Description *string `json:"description,omitempty"`
}

func (o *PodFilter) GetFilter() string {
	if o == nil {
		return ""
	}
	return o.Filter
}

func (o *PodFilter) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

type InputEdgePrometheus struct {
	// Unique ID for this input
	ID       *string                  `json:"id,omitempty"`
	Type     *InputEdgePrometheusType `json:"type,omitempty"`
	Disabled *bool                    `default:"false" json:"disabled"`
	// Pipeline to process data from this Source before sending it through the Routes
	Pipeline *string `json:"pipeline,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `default:"true" json:"sendToRoutes"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Use a disk queue to minimize data loss when connected services block. See [Cribl Docs](https://docs.cribl.io/stream/persistent-queues) for PQ defaults (Cribl-managed Cloud Workers) and configuration options (on-prem and hybrid Workers).
	PqEnabled *bool `default:"false" json:"pqEnabled"`
	// Tags for filtering and grouping in @{product}
	Streamtags []string `json:"streamtags,omitempty"`
	// Direct connections to Destinations, and optionally via a Pipeline or a Pack
	Connections []InputEdgePrometheusConnections `json:"connections,omitempty"`
	Pq          *InputEdgePrometheusPq           `json:"pq,omitempty"`
	// Other dimensions to include in events
	DimensionList []string `json:"dimensionList,omitempty"`
	// Target discovery mechanism. Use static to manually enter a list of targets.
	DiscoveryType *InputEdgePrometheusDiscoveryType `default:"static" json:"discoveryType"`
	// How often in seconds to scrape targets for metrics.
	Interval *float64 `default:"15" json:"interval"`
	// Timeout, in milliseconds, before aborting HTTP connection attempts; 1-60000 or 0 to disable
	Timeout     *float64      `default:"5000" json:"timeout"`
	Persistence *DiskSpooling `json:"persistence,omitempty"`
	// Fields to add to events from this input
	Metadata []InputEdgePrometheusMetadata `json:"metadata,omitempty"`
	// Enter credentials directly, or select a stored secret
	AuthType    *InputEdgePrometheusAuthenticationMethod `default:"manual" json:"authType"`
	Description *string                                  `json:"description,omitempty"`
	Targets     []Targets                                `json:"targets,omitempty"`
	// List of DNS names to resolve
	NameList []string `json:"nameList,omitempty"`
	// DNS Record type to resolve
	RecordType *InputEdgePrometheusRecordType `default:"SRV" json:"recordType"`
	// Protocol to use when collecting metrics
	ScrapeProtocol *InputEdgePrometheusProtocol `default:"http" json:"scrapeProtocol"`
	// Path to use when collecting metrics from discovered targets
	ScrapePath *string `default:"/metrics" json:"scrapePath"`
	// Use public IP address for discovered targets. Set to false if the private IP address should be used.
	UsePublicIP *bool `default:"true" json:"usePublicIp"`
	// The port number in the metrics URL for discovered targets.
	ScrapePort *float64 `default:"9090" json:"scrapePort"`
	// EC2 Instance Search Filter
	SearchFilter []InputEdgePrometheusSearchFilter `json:"searchFilter,omitempty"`
	// AWS authentication method. Choose Auto to use IAM roles.
	AwsAuthenticationMethod *InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod `default:"auto" json:"awsAuthenticationMethod"`
	// Secret key
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// Region where the EC2 is located
	Region *string `json:"region,omitempty"`
	// EC2 service endpoint. If empty, defaults to AWS' Region-specific endpoint. Otherwise, it must point to EC2-compatible endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Signature version to use for signing EC2 requests
	SignatureVersion *InputEdgePrometheusSignatureVersion `default:"v4" json:"signatureVersion"`
	// Reuse connections between requests, which can improve performance
	ReuseConnections *bool `default:"true" json:"reuseConnections"`
	// Reject certificates that cannot be verified against a valid CA, such as self-signed certificates
	RejectUnauthorized *bool `default:"true" json:"rejectUnauthorized"`
	// Use Assume Role credentials to access EC2
	EnableAssumeRole *bool `default:"false" json:"enableAssumeRole"`
	// Amazon Resource Name (ARN) of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID to use when assuming role
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// Duration of the assumed role's session, in seconds. Minimum is 900 (15 minutes), default is 3600 (1 hour), and maximum is 43200 (12 hours).
	DurationSeconds *float64 `default:"3600" json:"durationSeconds"`
	// Protocol to use when collecting metrics
	ScrapeProtocolExpr *string `default:"metadata.annotations['prometheus.io/scheme'] || 'http'" json:"scrapeProtocolExpr"`
	// The port number in the metrics URL for discovered targets.
	ScrapePortExpr *string `default:"metadata.annotations['prometheus.io/port'] || 9090" json:"scrapePortExpr"`
	// Path to use when collecting metrics from discovered targets
	ScrapePathExpr *string `default:"metadata.annotations['prometheus.io/path'] || '/metrics'" json:"scrapePathExpr"`
	//   Add rules to decide which pods to discover for metrics.
	//   Pods are searched if no rules are given or of all the rules'
	//   expressions evaluate to true.
	//
	PodFilter []PodFilter `json:"podFilter,omitempty"`
	// Username for Prometheus Basic authentication
	Username *string `json:"username,omitempty"`
	// Password for Prometheus Basic authentication
	Password *string `json:"password,omitempty"`
	// Select or create a secret that references your credentials
	CredentialsSecret *string `json:"credentialsSecret,omitempty"`
}

func (i InputEdgePrometheus) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InputEdgePrometheus) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *InputEdgePrometheus) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputEdgePrometheus) GetType() *InputEdgePrometheusType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputEdgePrometheus) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputEdgePrometheus) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputEdgePrometheus) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputEdgePrometheus) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputEdgePrometheus) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputEdgePrometheus) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputEdgePrometheus) GetConnections() []InputEdgePrometheusConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputEdgePrometheus) GetPq() *InputEdgePrometheusPq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputEdgePrometheus) GetDimensionList() []string {
	if o == nil {
		return nil
	}
	return o.DimensionList
}

func (o *InputEdgePrometheus) GetDiscoveryType() *InputEdgePrometheusDiscoveryType {
	if o == nil {
		return nil
	}
	return o.DiscoveryType
}

func (o *InputEdgePrometheus) GetInterval() *float64 {
	if o == nil {
		return nil
	}
	return o.Interval
}

func (o *InputEdgePrometheus) GetTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.Timeout
}

func (o *InputEdgePrometheus) GetPersistence() *DiskSpooling {
	if o == nil {
		return nil
	}
	return o.Persistence
}

func (o *InputEdgePrometheus) GetMetadata() []InputEdgePrometheusMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputEdgePrometheus) GetAuthType() *InputEdgePrometheusAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *InputEdgePrometheus) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *InputEdgePrometheus) GetTargets() []Targets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *InputEdgePrometheus) GetNameList() []string {
	if o == nil {
		return nil
	}
	return o.NameList
}

func (o *InputEdgePrometheus) GetRecordType() *InputEdgePrometheusRecordType {
	if o == nil {
		return nil
	}
	return o.RecordType
}

func (o *InputEdgePrometheus) GetScrapeProtocol() *InputEdgePrometheusProtocol {
	if o == nil {
		return nil
	}
	return o.ScrapeProtocol
}

func (o *InputEdgePrometheus) GetScrapePath() *string {
	if o == nil {
		return nil
	}
	return o.ScrapePath
}

func (o *InputEdgePrometheus) GetUsePublicIP() *bool {
	if o == nil {
		return nil
	}
	return o.UsePublicIP
}

func (o *InputEdgePrometheus) GetScrapePort() *float64 {
	if o == nil {
		return nil
	}
	return o.ScrapePort
}

func (o *InputEdgePrometheus) GetSearchFilter() []InputEdgePrometheusSearchFilter {
	if o == nil {
		return nil
	}
	return o.SearchFilter
}

func (o *InputEdgePrometheus) GetAwsAuthenticationMethod() *InputEdgePrometheusAwsAuthenticationMethodAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AwsAuthenticationMethod
}

func (o *InputEdgePrometheus) GetAwsSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretKey
}

func (o *InputEdgePrometheus) GetRegion() *string {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *InputEdgePrometheus) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *InputEdgePrometheus) GetSignatureVersion() *InputEdgePrometheusSignatureVersion {
	if o == nil {
		return nil
	}
	return o.SignatureVersion
}

func (o *InputEdgePrometheus) GetReuseConnections() *bool {
	if o == nil {
		return nil
	}
	return o.ReuseConnections
}

func (o *InputEdgePrometheus) GetRejectUnauthorized() *bool {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputEdgePrometheus) GetEnableAssumeRole() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAssumeRole
}

func (o *InputEdgePrometheus) GetAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleArn
}

func (o *InputEdgePrometheus) GetAssumeRoleExternalID() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleExternalID
}

func (o *InputEdgePrometheus) GetDurationSeconds() *float64 {
	if o == nil {
		return nil
	}
	return o.DurationSeconds
}

func (o *InputEdgePrometheus) GetScrapeProtocolExpr() *string {
	if o == nil {
		return nil
	}
	return o.ScrapeProtocolExpr
}

func (o *InputEdgePrometheus) GetScrapePortExpr() *string {
	if o == nil {
		return nil
	}
	return o.ScrapePortExpr
}

func (o *InputEdgePrometheus) GetScrapePathExpr() *string {
	if o == nil {
		return nil
	}
	return o.ScrapePathExpr
}

func (o *InputEdgePrometheus) GetPodFilter() []PodFilter {
	if o == nil {
		return nil
	}
	return o.PodFilter
}

func (o *InputEdgePrometheus) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *InputEdgePrometheus) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *InputEdgePrometheus) GetCredentialsSecret() *string {
	if o == nil {
		return nil
	}
	return o.CredentialsSecret
}
