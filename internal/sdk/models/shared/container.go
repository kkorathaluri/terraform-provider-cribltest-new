// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
)

type CommandType string

const (
	CommandTypeStr        CommandType = "str"
	CommandTypeArrayOfStr CommandType = "arrayOfStr"
)

type Command struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CommandType
}

func CreateCommandStr(str string) Command {
	typ := CommandTypeStr

	return Command{
		Str:  &str,
		Type: typ,
	}
}

func CreateCommandArrayOfStr(arrayOfStr []string) Command {
	typ := CommandTypeArrayOfStr

	return Command{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *Command) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CommandTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CommandTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Command", string(data))
}

func (u Command) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type Command: all fields are null")
}

type ContainerType string

const (
	ContainerTypeDocker     ContainerType = "docker"
	ContainerTypeContainerd ContainerType = "containerd"
)

func (e ContainerType) ToPointer() *ContainerType {
	return &e
}
func (e *ContainerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "docker":
		fallthrough
	case "containerd":
		*e = ContainerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContainerType: %v", v)
	}
}

type Container struct {
	Command    Command         `json:"command"`
	Containerd *ContainerdInfo `json:"containerd,omitempty"`
	Created    float64         `json:"created"`
	Docker     *DockerInfo     `json:"docker,omitempty"`
	ID         string          `json:"id"`
	Image      string          `json:"image"`
	Ips        []string        `json:"ips,omitempty"`
	Name       string          `json:"name"`
	Ports      []ContainerPort `json:"ports,omitempty"`
	Status     string          `json:"status"`
	Type       ContainerType   `json:"type"`
}

func (o *Container) GetCommand() Command {
	if o == nil {
		return Command{}
	}
	return o.Command
}

func (o *Container) GetContainerd() *ContainerdInfo {
	if o == nil {
		return nil
	}
	return o.Containerd
}

func (o *Container) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *Container) GetDocker() *DockerInfo {
	if o == nil {
		return nil
	}
	return o.Docker
}

func (o *Container) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Container) GetImage() string {
	if o == nil {
		return ""
	}
	return o.Image
}

func (o *Container) GetIps() []string {
	if o == nil {
		return nil
	}
	return o.Ips
}

func (o *Container) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Container) GetPorts() []ContainerPort {
	if o == nil {
		return nil
	}
	return o.Ports
}

func (o *Container) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *Container) GetType() ContainerType {
	if o == nil {
		return ContainerType("")
	}
	return o.Type
}
