// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/shared"
	"net/http"
)

// RunType - Filter by job run type
type RunType string

const (
	RunTypeAdhoc     RunType = "adhoc"
	RunTypeScheduled RunType = "scheduled"
	RunTypeSystem    RunType = "system"
)

func (e RunType) ToPointer() *RunType {
	return &e
}
func (e *RunType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "adhoc":
		fallthrough
	case "scheduled":
		fallthrough
	case "system":
		*e = RunType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RunType: %v", v)
	}
}

type GetJobsRequest struct {
	// Pagination offset
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// Maximum number of items to return
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Filter by job run type
	RunType *RunType `queryParam:"style=form,explode=true,name=runType"`
	// Filter by current job state, e.g. "running"
	State *string `queryParam:"style=form,explode=true,name=state"`
	// Filter by job id, e.g. "id=1608713335.3&id=1608713326.1"
	ID *string `queryParam:"style=form,explode=true,name=id"`
	// Filter by collector id, e.g. "collectorId=Prometheus-in"
	CollectorID *string `queryParam:"style=form,explode=true,name=collectorId"`
	// Filter by worker group id, e.g. "defaultHybrid"
	GroupID *string `queryParam:"style=form,explode=true,name=groupId"`
}

func (o *GetJobsRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetJobsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetJobsRequest) GetRunType() *RunType {
	if o == nil {
		return nil
	}
	return o.RunType
}

func (o *GetJobsRequest) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *GetJobsRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetJobsRequest) GetCollectorID() *string {
	if o == nil {
		return nil
	}
	return o.CollectorID
}

func (o *GetJobsRequest) GetGroupID() *string {
	if o == nil {
		return nil
	}
	return o.GroupID
}

// GetJobsResponseBody - a list of JobInfo objects
type GetJobsResponseBody struct {
	// pagination offset
	Offset *int64 `json:"offset,omitempty"`
	// number of items present in the items array
	Limit *int64 `json:"limit,omitempty"`
	// the pre-limited items in the list of results
	Items []shared.JobInfo `json:"items,omitempty"`
}

func (o *GetJobsResponseBody) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetJobsResponseBody) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetJobsResponseBody) GetItems() []shared.JobInfo {
	if o == nil {
		return nil
	}
	return o.Items
}

type GetJobsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// a list of JobInfo objects
	Object *GetJobsResponseBody
	// Unexpected error
	Error *shared.Error
}

func (o *GetJobsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetJobsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetJobsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetJobsResponse) GetObject() *GetJobsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *GetJobsResponse) GetError() *shared.Error {
	if o == nil {
		return nil
	}
	return o.Error
}
