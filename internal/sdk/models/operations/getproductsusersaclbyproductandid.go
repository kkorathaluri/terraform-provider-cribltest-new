// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/shared"
	"net/http"
)

// PathParamProduct - product by which to filter members
type PathParamProduct string

const (
	PathParamProductStream PathParamProduct = "stream"
	PathParamProductEdge   PathParamProduct = "edge"
	PathParamProductSearch PathParamProduct = "search"
	PathParamProductLake   PathParamProduct = "lake"
)

func (e PathParamProduct) ToPointer() *PathParamProduct {
	return &e
}
func (e *PathParamProduct) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stream":
		fallthrough
	case "edge":
		fallthrough
	case "search":
		fallthrough
	case "lake":
		*e = PathParamProduct(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PathParamProduct: %v", v)
	}
}

// QueryParamType - resource type by which to filter access levels
type QueryParamType string

const (
	QueryParamTypeGroups           QueryParamType = "groups"
	QueryParamTypeDatasets         QueryParamType = "datasets"
	QueryParamTypeDatasetProviders QueryParamType = "dataset-providers"
	QueryParamTypeProjects         QueryParamType = "projects"
	QueryParamTypeDashboards       QueryParamType = "dashboards"
	QueryParamTypeMacros           QueryParamType = "macros"
)

func (e QueryParamType) ToPointer() *QueryParamType {
	return &e
}
func (e *QueryParamType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "groups":
		fallthrough
	case "datasets":
		fallthrough
	case "dataset-providers":
		fallthrough
	case "projects":
		fallthrough
	case "dashboards":
		fallthrough
	case "macros":
		*e = QueryParamType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamType: %v", v)
	}
}

type GetProductsUsersACLByProductAndIDRequest struct {
	// product by which to filter members
	Product PathParamProduct `pathParam:"style=simple,explode=false,name=product"`
	// user id
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// resource type by which to filter access levels
	Type *QueryParamType `queryParam:"style=form,explode=true,name=type"`
}

func (o *GetProductsUsersACLByProductAndIDRequest) GetProduct() PathParamProduct {
	if o == nil {
		return PathParamProduct("")
	}
	return o.Product
}

func (o *GetProductsUsersACLByProductAndIDRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProductsUsersACLByProductAndIDRequest) GetType() *QueryParamType {
	if o == nil {
		return nil
	}
	return o.Type
}

// GetProductsUsersACLByProductAndIDResponseBody - a list of ResourcePolicy objects
type GetProductsUsersACLByProductAndIDResponseBody struct {
	// number of items present in the items array
	Count *int64                  `json:"count,omitempty"`
	Items []shared.ResourcePolicy `json:"items,omitempty"`
}

func (o *GetProductsUsersACLByProductAndIDResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *GetProductsUsersACLByProductAndIDResponseBody) GetItems() []shared.ResourcePolicy {
	if o == nil {
		return nil
	}
	return o.Items
}

type GetProductsUsersACLByProductAndIDResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// a list of ResourcePolicy objects
	Object *GetProductsUsersACLByProductAndIDResponseBody
	// Unexpected error
	Error *shared.Error
}

func (o *GetProductsUsersACLByProductAndIDResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetProductsUsersACLByProductAndIDResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetProductsUsersACLByProductAndIDResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetProductsUsersACLByProductAndIDResponse) GetObject() *GetProductsUsersACLByProductAndIDResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *GetProductsUsersACLByProductAndIDResponse) GetError() *shared.Error {
	if o == nil {
		return nil
	}
	return o.Error
}
