// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/shared"
	"net/http"
	"time"
)

var V5BillingConsumptionGetSingleProductUsageBreakdownServerList = []string{
	"https://api.cribl-staging.cloud",
}

type ProductSlug string

const (
	ProductSlugStream         ProductSlug = "stream"
	ProductSlugSearch         ProductSlug = "search"
	ProductSlugEdge           ProductSlug = "edge"
	ProductSlugLakehouse      ProductSlug = "lakehouse"
	ProductSlugLake           ProductSlug = "lake"
	ProductSlugInfrastructure ProductSlug = "infrastructure"
	ProductSlugOther          ProductSlug = "other"
)

func (e ProductSlug) ToPointer() *ProductSlug {
	return &e
}
func (e *ProductSlug) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stream":
		fallthrough
	case "search":
		fallthrough
	case "edge":
		fallthrough
	case "lakehouse":
		fallthrough
	case "lake":
		fallthrough
	case "infrastructure":
		fallthrough
	case "other":
		*e = ProductSlug(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductSlug: %v", v)
	}
}

type V5BillingConsumptionGetSingleProductUsageBreakdownRequest struct {
	OrganizationID string                     `pathParam:"style=simple,explode=false,name=organizationId"`
	ProductSlug    ProductSlug                `pathParam:"style=simple,explode=false,name=productSlug"`
	StartingOn     time.Time                  `queryParam:"style=form,explode=true,name=startingOn"`
	EndingBefore   time.Time                  `queryParam:"style=form,explode=true,name=endingBefore"`
	Window         shared.ConsumptionWindowV5 `queryParam:"style=form,explode=true,name=window"`
}

func (v V5BillingConsumptionGetSingleProductUsageBreakdownRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *V5BillingConsumptionGetSingleProductUsageBreakdownRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *V5BillingConsumptionGetSingleProductUsageBreakdownRequest) GetOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.OrganizationID
}

func (o *V5BillingConsumptionGetSingleProductUsageBreakdownRequest) GetProductSlug() ProductSlug {
	if o == nil {
		return ProductSlug("")
	}
	return o.ProductSlug
}

func (o *V5BillingConsumptionGetSingleProductUsageBreakdownRequest) GetStartingOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingOn
}

func (o *V5BillingConsumptionGetSingleProductUsageBreakdownRequest) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

func (o *V5BillingConsumptionGetSingleProductUsageBreakdownRequest) GetWindow() shared.ConsumptionWindowV5 {
	if o == nil {
		return shared.ConsumptionWindowV5("")
	}
	return o.Window
}

type V5BillingConsumptionGetSingleProductUsageBreakdownResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse                              *http.Response
	GetSingleProductUsageBreakdownResponseV5 *shared.GetSingleProductUsageBreakdownResponseV5
}

func (o *V5BillingConsumptionGetSingleProductUsageBreakdownResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *V5BillingConsumptionGetSingleProductUsageBreakdownResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *V5BillingConsumptionGetSingleProductUsageBreakdownResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *V5BillingConsumptionGetSingleProductUsageBreakdownResponse) GetGetSingleProductUsageBreakdownResponseV5() *shared.GetSingleProductUsageBreakdownResponseV5 {
	if o == nil {
		return nil
	}
	return o.GetSingleProductUsageBreakdownResponseV5
}
