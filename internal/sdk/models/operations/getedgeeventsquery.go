// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy/terraform-provider-cribl-terraform/internal/sdk/models/shared"
	"net/http"
)

type GetEdgeEventsQueryRequest struct {
	// Optional parameter, when provided the files and provided offsets are used to look for events.
	Files *string `queryParam:"style=form,explode=true,name=Files"`
	// The type of source events to search in the format {type}/{subtype} i.e system_state/hostsfile, system_state/routes, etc...
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// Maximum number of log lines to retrieve starting from offset.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Epoch timestamp of the earliest event (includes rolled files present on disk)
	Et *int64 `queryParam:"style=form,explode=true,name=et"`
	// Epoch timestamp of the latest event (includes rolled files present on disk)
	Lt *int64 `queryParam:"style=form,explode=true,name=lt"`
	// Filter
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
}

func (o *GetEdgeEventsQueryRequest) GetFiles() *string {
	if o == nil {
		return nil
	}
	return o.Files
}

func (o *GetEdgeEventsQueryRequest) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetEdgeEventsQueryRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetEdgeEventsQueryRequest) GetEt() *int64 {
	if o == nil {
		return nil
	}
	return o.Et
}

func (o *GetEdgeEventsQueryRequest) GetLt() *int64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *GetEdgeEventsQueryRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

// GetEdgeEventsQueryResponseBody - a list of any objects
type GetEdgeEventsQueryResponseBody struct {
	// number of items present in the items array
	Count *int64           `json:"count,omitempty"`
	Items []map[string]any `json:"items,omitempty"`
}

func (o *GetEdgeEventsQueryResponseBody) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *GetEdgeEventsQueryResponseBody) GetItems() []map[string]any {
	if o == nil {
		return nil
	}
	return o.Items
}

type GetEdgeEventsQueryResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// a list of any objects
	Object *GetEdgeEventsQueryResponseBody
	// Unexpected error
	Error *shared.Error
}

func (o *GetEdgeEventsQueryResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetEdgeEventsQueryResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetEdgeEventsQueryResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetEdgeEventsQueryResponse) GetObject() *GetEdgeEventsQueryResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}

func (o *GetEdgeEventsQueryResponse) GetError() *shared.Error {
	if o == nil {
		return nil
	}
	return o.Error
}
